ifeq (x,y)

# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated dependencies for module `mer_mdbcomp'
# generated from source file `mer_mdbcomp.m'
# Generated by the Mercury compiler, version rotd-2017-07-18
# configured for x86_64-apple-darwin13.4.0.


endif # ifeq(x,y)

# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `mer_mdbcomp' in source file `mer_mdbcomp.m'.
# Generated by Mercury compiler version rotd-2017-07-18
# configured for x86_64-apple-darwin13.4.0.

ifeq (x,y)

ifneq ($(EXT_FOR_EXE),)
.PHONY : mer_mdbcomp
mer_mdbcomp : mer_mdbcomp$(EXT_FOR_EXE)
endif

endif # ifeq(x,y)

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: mer_mdbcomp
mer_mdbcomp : mer_mdbcomp$(EXT_FOR_EXE)

endif # conditional fragment

ifeq (x,y)

ifeq ($(findstring java,$(GRADE)),java)
mer_mdbcomp : $(mer_mdbcomp.classes)
else
mer_mdbcomp$(EXT_FOR_EXE) : $(mer_mdbcomp.os) mer_mdbcomp_init.$O \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS)) \
		$(foreach @,mer_mdbcomp,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mer_mdbcomp$(EXT_FOR_EXE) mer_mdbcomp_init.$O \
		$(mer_mdbcomp.os) \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif

endif # ifeq(x,y)

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
mer_mdbcomp : $(mer_mdbcomp.classes)

else

# RULE executable_non_java
mer_mdbcomp$(EXT_FOR_EXE) : \
		$(mer_mdbcomp.os) \
		mer_mdbcomp_init.$O \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS)) \
		$(foreach @,mer_mdbcomp,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mer_mdbcomp$(EXT_FOR_EXE) mer_mdbcomp_init.$O \
		$(mer_mdbcomp.os) \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq (x,y)

.PHONY : libmer_mdbcomp
ifeq ($(findstring java,$(GRADE)),java)
libmer_mdbcomp : mer_mdbcomp.jar \
		$(mer_mdbcomp.ints) $(mer_mdbcomp.int3s) mer_mdbcomp.init

else
libmer_mdbcomp : libmer_mdbcomp.$A libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) \
		$(mer_mdbcomp.ints) $(mer_mdbcomp.int3s) mer_mdbcomp.init

endif

endif # ifeq(x,y)

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libmer_mdbcomp
libmer_mdbcomp : \
		mer_mdbcomp.jar \
		$(mer_mdbcomp.ints) \
		$(mer_mdbcomp.int3s) \
		mer_mdbcomp.init

else

# RULE lib_target_non_java
.PHONY: libmer_mdbcomp
libmer_mdbcomp : \
		libmer_mdbcomp.$A \
		libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) \
		$(mer_mdbcomp.ints) \
		$(mer_mdbcomp.int3s) \
		mer_mdbcomp.init

endif # conditional fragment

ifeq (x,y)

ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) : $(mer_mdbcomp.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))) \
		$(foreach @,mer_mdbcomp,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) \
		$(mer_mdbcomp.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif


endif # ifeq(x,y)

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) : \
		$(mer_mdbcomp.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))) \
		$(foreach @,mer_mdbcomp,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) \
		$(mer_mdbcomp.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

ifeq (x,y)

libmer_mdbcomp.$A : $(mer_mdbcomp.os) \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))
	rm -f libmer_mdbcomp.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmer_mdbcomp.$A $(mer_mdbcomp.os) \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmer_mdbcomp.$A


endif # ifeq(x,y)

# RULE lib
libmer_mdbcomp.$A : \
		$(mer_mdbcomp.os) \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))
	rm -f libmer_mdbcomp.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmer_mdbcomp.$A $(mer_mdbcomp.os) \
		$(foreach @,mer_mdbcomp,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmer_mdbcomp.$A

ifeq (x,y)

mer_mdbcomp.jar : $(mer_mdbcomp.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mer_mdbcomp.jar $(mer_mdbcomp.classes)


endif # ifeq(x,y)

# RULE jar
mer_mdbcomp.jar : $(mer_mdbcomp.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mer_mdbcomp.jar $(mer_mdbcomp.classes)

ifeq (x,y)

mer_mdbcomp.init : mer_mdbcomp.dep $(mer_mdbcomp.cs)
	echo > mer_mdbcomp.init
	$(MKLIBINIT) $(mer_mdbcomp.cs) >> mer_mdbcomp.init
	$(EXTRA_INIT_COMMAND) >> mer_mdbcomp.init


endif # ifeq(x,y)

# RULE init_file
mer_mdbcomp.init : \
		mer_mdbcomp.dep \
		$(mer_mdbcomp.cs)
	echo > mer_mdbcomp.init
	$(MKLIBINIT) $(mer_mdbcomp.cs) >> mer_mdbcomp.init
	$(EXTRA_INIT_COMMAND) >> mer_mdbcomp.init

ifeq (x,y)

force-mer_mdbcomp_init :


endif # ifeq(x,y)

# RULE force_init_c_file
force-mer_mdbcomp_init :

ifeq (x,y)

mer_mdbcomp_init.c : force-mer_mdbcomp_init $(mer_mdbcomp.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mer_mdbcomp_init.c.tmp $(mer_mdbcomp.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mer_mdbcomp_init.c


endif # ifeq(x,y)

# RULE init_c_file
mer_mdbcomp_init.c : \
		force-mer_mdbcomp_init \
		$(mer_mdbcomp.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mer_mdbcomp_init.c.tmp $(mer_mdbcomp.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mer_mdbcomp_init.c

ifeq (x,y)

.PHONY : libmer_mdbcomp.install_ints
libmer_mdbcomp.install_ints : $(mer_mdbcomp.ints) $(mer_mdbcomp.int3s) $(mer_mdbcomp.module_deps)  install_lib_dirs
	files="$(mer_mdbcomp.ints) $(mer_mdbcomp.int3s) $(mer_mdbcomp.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done


endif # ifeq(x,y)

# RULE lib_install_ints
.PHONY: libmer_mdbcomp.install_ints
libmer_mdbcomp.install_ints : \
		$(mer_mdbcomp.ints) \
		$(mer_mdbcomp.int3s) \
		$(mer_mdbcomp.module_deps) \
		install_lib_dirs
	files="$(mer_mdbcomp.ints) $(mer_mdbcomp.int3s) $(mer_mdbcomp.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

ifeq (x,y)

.PHONY : libmer_mdbcomp.install_opts
libmer_mdbcomp.install_opts : 
	@:


endif # ifeq(x,y)

# RULE lib_install_opts
.PHONY: libmer_mdbcomp.install_opts
libmer_mdbcomp.install_opts :
	@:

ifeq (x,y)

.PHONY : libmer_mdbcomp.install_hdrs
libmer_mdbcomp.install_hdrs : $(mer_mdbcomp.mhs) install_lib_dirs
ifeq ($(mer_mdbcomp.mhs),)
	@:
else
	for hdr in $(mer_mdbcomp.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif


endif # ifeq(x,y)

ifeq ($(mer_mdbcomp.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libmer_mdbcomp.install_hdrs
libmer_mdbcomp.install_hdrs : \
		$(mer_mdbcomp.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libmer_mdbcomp.install_hdrs
libmer_mdbcomp.install_hdrs : \
		$(mer_mdbcomp.mhs) \
		install_lib_dirs
	for hdr in $(mer_mdbcomp.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq (x,y)

.PHONY : libmer_mdbcomp.install_grade_hdrs
libmer_mdbcomp.install_grade_hdrs : $(mer_mdbcomp.mihs) install_grade_dirs
ifeq ($(mer_mdbcomp.mihs),)
	@:
else
	for hdr in $(mer_mdbcomp.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif


endif # ifeq(x,y)

ifeq ($(mer_mdbcomp.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libmer_mdbcomp.install_grade_hdrs
libmer_mdbcomp.install_grade_hdrs : \
		$(mer_mdbcomp.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libmer_mdbcomp.install_grade_hdrs
libmer_mdbcomp.install_grade_hdrs : \
		$(mer_mdbcomp.mihs) \
		install_grade_dirs
	for hdr in $(mer_mdbcomp.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

ifeq (x,y)

.PHONY : mer_mdbcomp.check
mer_mdbcomp.check : $(mer_mdbcomp.errs)


endif # ifeq(x,y)

# RULE collective_target_.check.errs
.PHONY: mer_mdbcomp.check
mer_mdbcomp.check : $(mer_mdbcomp.errs)

ifeq (x,y)

.PHONY : mer_mdbcomp.ints
mer_mdbcomp.ints : $(mer_mdbcomp.dates)


endif # ifeq(x,y)

# RULE collective_target_.ints.dates
.PHONY: mer_mdbcomp.ints
mer_mdbcomp.ints : $(mer_mdbcomp.dates)

ifeq (x,y)

.PHONY : mer_mdbcomp.int3s
mer_mdbcomp.int3s : $(mer_mdbcomp.date3s)


endif # ifeq(x,y)

# RULE collective_target_.int3s.date3s
.PHONY: mer_mdbcomp.int3s
mer_mdbcomp.int3s : $(mer_mdbcomp.date3s)

ifeq (x,y)

.PHONY : mer_mdbcomp.opts
mer_mdbcomp.opts : $(mer_mdbcomp.optdates)


endif # ifeq(x,y)

# RULE collective_target_.opts.optdates
.PHONY: mer_mdbcomp.opts
mer_mdbcomp.opts : $(mer_mdbcomp.optdates)

ifeq (x,y)

.PHONY : mer_mdbcomp.trans_opts
mer_mdbcomp.trans_opts : $(mer_mdbcomp.trans_opt_dates)


endif # ifeq(x,y)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: mer_mdbcomp.trans_opts
mer_mdbcomp.trans_opts : $(mer_mdbcomp.trans_opt_dates)

ifeq (x,y)

.PHONY : mer_mdbcomp.javas
mer_mdbcomp.javas : $(mer_mdbcomp.javas)


endif # ifeq(x,y)

# RULE collective_target_.javas.javas
.PHONY: mer_mdbcomp.javas
mer_mdbcomp.javas : $(mer_mdbcomp.javas)

ifeq (x,y)

.PHONY : mer_mdbcomp.classes
mer_mdbcomp.classes : $(mer_mdbcomp.classes)


endif # ifeq(x,y)

# RULE collective_target_.classes.classes
.PHONY: mer_mdbcomp.classes
mer_mdbcomp.classes : $(mer_mdbcomp.classes)

ifeq (x,y)

.PHONY : mer_mdbcomp.all_ints
mer_mdbcomp.all_ints : $(mer_mdbcomp.dates)


endif # ifeq(x,y)

# RULE collective_target_.all_ints.dates
.PHONY: mer_mdbcomp.all_ints
mer_mdbcomp.all_ints : $(mer_mdbcomp.dates)

ifeq (x,y)

.PHONY : mer_mdbcomp.all_int3s
mer_mdbcomp.all_int3s : $(mer_mdbcomp.date3s)


endif # ifeq(x,y)

# RULE collective_target_.all_int3s.date3s
.PHONY: mer_mdbcomp.all_int3s
mer_mdbcomp.all_int3s : $(mer_mdbcomp.date3s)

ifeq (x,y)

.PHONY : mer_mdbcomp.all_opts
mer_mdbcomp.all_opts : $(mer_mdbcomp.optdates)


endif # ifeq(x,y)

# RULE collective_target_.all_opts.optdates
.PHONY: mer_mdbcomp.all_opts
mer_mdbcomp.all_opts : $(mer_mdbcomp.optdates)

ifeq (x,y)

.PHONY : mer_mdbcomp.all_trans_opts
mer_mdbcomp.all_trans_opts : $(mer_mdbcomp.trans_opt_dates)


endif # ifeq(x,y)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: mer_mdbcomp.all_trans_opts
mer_mdbcomp.all_trans_opts : $(mer_mdbcomp.trans_opt_dates)

ifeq (x,y)

clean_local : mer_mdbcomp.clean
.PHONY : mer_mdbcomp.clean
mer_mdbcomp.clean :
	-echo $(mer_mdbcomp.dirs) | xargs rm -rf 
	-echo $(mer_mdbcomp.cs) mer_mdbcomp_init.c | xargs rm -f
	-echo $(mer_mdbcomp.mihs) | xargs rm -f
	-echo $(mer_mdbcomp.all_os) mer_mdbcomp_init.$O | xargs rm -f
	-echo $(mer_mdbcomp.all_pic_os) mer_mdbcomp_init.pic_o | xargs rm -f
	-echo $(mer_mdbcomp.c_dates) | xargs rm -f
	-echo $(mer_mdbcomp.java_dates) | xargs rm -f
	-echo $(mer_mdbcomp.useds) | xargs rm -f
	-echo $(mer_mdbcomp.javas) | xargs rm -f
	-echo $(mer_mdbcomp.profs) | xargs rm -f
	-echo $(mer_mdbcomp.errs) | xargs rm -f
	-echo $(mer_mdbcomp.foreign_cs) | xargs rm -f


endif # ifeq(x,y)

# RULE clean_local
clean_local : mer_mdbcomp.clean

# RULE clean_target
.PHONY: mer_mdbcomp.clean
mer_mdbcomp.clean :
	-echo $(mer_mdbcomp.dirs) | xargs rm -f
	-echo $(mer_mdbcomp.cs) | xargs rm -f
	-echo $(mer_mdbcomp.mihs) | xargs rm -f
	-echo $(mer_mdbcomp.all_os) | xargs rm -f
	-echo $(mer_mdbcomp.all_pic_os) | xargs rm -f
	-echo $(mer_mdbcomp.c_dates) | xargs rm -f
	-echo $(mer_mdbcomp.java_dates) | xargs rm -f
	-echo $(mer_mdbcomp.useds) | xargs rm -f
	-echo $(mer_mdbcomp.javas) | xargs rm -f
	-echo $(mer_mdbcomp.profs) | xargs rm -f
	-echo $(mer_mdbcomp.errs) | xargs rm -f
	-echo $(mer_mdbcomp.foreign_cs) | xargs rm -f
	-rm -f mer_mdbcomp_init.c mer_mdbcomp_init.$O mer_mdbcomp_init.pic_o

ifeq (x,y)

realclean_local : mer_mdbcomp.realclean
.PHONY : mer_mdbcomp.realclean
mer_mdbcomp.realclean : mer_mdbcomp.clean
	-echo $(mer_mdbcomp.dates) | xargs rm -f
	-echo $(mer_mdbcomp.date0s) | xargs rm -f
	-echo $(mer_mdbcomp.date3s) | xargs rm -f
	-echo $(mer_mdbcomp.optdates) | xargs rm -f
	-echo $(mer_mdbcomp.trans_opt_dates) | xargs rm -f
	-echo $(mer_mdbcomp.ints) | xargs rm -f
	-echo $(mer_mdbcomp.all_int0s) | xargs rm -f
	-echo $(mer_mdbcomp.int3s) | xargs rm -f
	-echo $(mer_mdbcomp.opts) | xargs rm -f
	-echo $(mer_mdbcomp.trans_opts) | xargs rm -f
	-echo $(mer_mdbcomp.analysiss) | xargs rm -f
	-echo $(mer_mdbcomp.requests) | xargs rm -f
	-echo $(mer_mdbcomp.imdgs) | xargs rm -f
	-echo $(mer_mdbcomp.ds) | xargs rm -f
	-echo $(mer_mdbcomp.module_deps) | xargs rm -f
	-echo $(mer_mdbcomp.all_mhs) | xargs rm -f
	-echo $(mer_mdbcomp.all_mihs) | xargs rm -f
	-echo $(mer_mdbcomp.dlls) | xargs rm -f
	-echo $(mer_mdbcomp.foreign_dlls) | xargs rm -f
	-echo $(mer_mdbcomp.classes) | xargs rm -f
	-rm -f mer_mdbcomp$(EXT_FOR_EXE) mer_mdbcomp.init libmer_mdbcomp.$A libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) mer_mdbcomp.jar mer_mdbcomp.dep mer_mdbcomp.dv


endif # ifeq(x,y)

# RULE realclean_local
realclean_local : mer_mdbcomp.realclean

# RULE realclean_target
.PHONY: mer_mdbcomp.realclean
mer_mdbcomp.realclean : mer_mdbcomp.clean
	-echo $(mer_mdbcomp.dates) | xargs rm -f
	-echo $(mer_mdbcomp.date0s) | xargs rm -f
	-echo $(mer_mdbcomp.date3s) | xargs rm -f
	-echo $(mer_mdbcomp.optdates) | xargs rm -f
	-echo $(mer_mdbcomp.trans_opt_dates) | xargs rm -f
	-echo $(mer_mdbcomp.ints) | xargs rm -f
	-echo $(mer_mdbcomp.all_int0s) | xargs rm -f
	-echo $(mer_mdbcomp.int3s) | xargs rm -f
	-echo $(mer_mdbcomp.opts) | xargs rm -f
	-echo $(mer_mdbcomp.trans_opts) | xargs rm -f
	-echo $(mer_mdbcomp.analysiss) | xargs rm -f
	-echo $(mer_mdbcomp.requests) | xargs rm -f
	-echo $(mer_mdbcomp.imdgs) | xargs rm -f
	-echo $(mer_mdbcomp.ds) | xargs rm -f
	-echo $(mer_mdbcomp.module_deps) | xargs rm -f
	-echo $(mer_mdbcomp.all_mhs) | xargs rm -f
	-echo $(mer_mdbcomp.all_mihs) | xargs rm -f
	-echo $(mer_mdbcomp.dlls) | xargs rm -f
	-echo $(mer_mdbcomp.foreign_dlls) | xargs rm -f
	-echo $(mer_mdbcomp.classes) | xargs rm -f
	-rm -f mer_mdbcomp$(EXT_FOR_EXE)  mer_mdbcomp.init libmer_mdbcomp.$A libmer_mdbcomp.$(EXT_FOR_SHARED_LIB) mer_mdbcomp.jar mer_mdbcomp.dep mer_mdbcomp.dv

ifeq (x,y)


endif # ifeq(x,y)

