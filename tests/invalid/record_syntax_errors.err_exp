record_syntax_errors.m:014: Error: no clauses for predicate `dcg_syntax'/2.
record_syntax_errors.m:016: Error: no clauses for predicate `dcg_syntax_2'/2.
record_syntax_errors.m:023: Error: `:- mode' declaration for function
record_syntax_errors.m:023:   `record_syntax_errors.field8'/1
record_syntax_errors.m:023:   without corresponding `:- func' declaration.
record_syntax_errors.m:023: Inferred :- func field8(record_syntax_errors.cons2)
record_syntax_errors.m:023:   = int.
record_syntax_errors.m:028: In DCG field update goal:
record_syntax_errors.m:028:   error: expected field name at term `Field'.
record_syntax_errors.m:031: Error: expected `Field =^ field1 ^ ... ^ fieldN' or
record_syntax_errors.m:031:   `^ field1 ^ ... ^ fieldN := Field' in DCG field
record_syntax_errors.m:031:   access goal.
record_syntax_errors.m:042: In clause for predicate `construct_exist_cons'/1:
record_syntax_errors.m:042:   error: undefined symbol `field2 :=/2'.
record_syntax_errors.m:006:   Field `field2' cannot be updated because the
record_syntax_errors.m:006:   existentially quantified type variable `T' occurs
record_syntax_errors.m:006:   in the types of field `field2' and some other
record_syntax_errors.m:006:   field in definition of constructor
record_syntax_errors.m:006:   `record_syntax_errors.exist_cons/3'.
record_syntax_errors.m:046: In clause for predicate `arg_type_error'/1:
record_syntax_errors.m:046:   in argument 2 of functor `field6 :=/2':
record_syntax_errors.m:046:   in unification of argument
record_syntax_errors.m:046:   and term `'field7 :='(V_10, V_9)':
record_syntax_errors.m:046:   type error in argument(s) of functor
record_syntax_errors.m:046:   `field7 :=/2'.
record_syntax_errors.m:046:   Argument 2 has type `string',
record_syntax_errors.m:046:   expected type was `int'.
record_syntax_errors.m:048: Error: clause for predicate
record_syntax_errors.m:048:   `record_syntax_errors.term_type_error'/1
record_syntax_errors.m:048:   without corresponding `:- pred' declaration.
record_syntax_errors.m:050: In clause for predicate `term_type_error'/1:
record_syntax_errors.m:050:   in argument 2 of functor `field6 :=/2':
record_syntax_errors.m:050:   in unification of argument
record_syntax_errors.m:050:   and term `'field4 :='(V_10, V_9)':
record_syntax_errors.m:050:   type error in argument(s) of functor
record_syntax_errors.m:050:   `field4 :=/2'.
record_syntax_errors.m:050:   Argument 1 has type `record_syntax_errors.cons2',
record_syntax_errors.m:050:   expected type was `record_syntax_errors.cons'.
record_syntax_errors.m:054: In declaration of function
record_syntax_errors.m:054:   `record_syntax_errors.field4'/1:
record_syntax_errors.m:054:   error: a field access function for an exported
record_syntax_errors.m:054:   field must also be exported.
record_syntax_errors.m:057: Error: clause for automatically generated field
record_syntax_errors.m:057:   access function `record_syntax_errors.field4'/1.
record_syntax_errors.m:057:   Clauses for field access functions are
record_syntax_errors.m:057:   automatically generated by the compiler. To
record_syntax_errors.m:057:   supply your own definition for a field access
record_syntax_errors.m:057:   function, for example to check the input to a
record_syntax_errors.m:057:   field update, give the field of the constructor a
record_syntax_errors.m:057:   different name.
