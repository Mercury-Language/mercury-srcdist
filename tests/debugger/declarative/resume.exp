      E1:     C1 CALL pred resume.main/2-0 (det) resume.m:13
mdb> mdb> Contexts will not be printed.
mdb> echo on
Command echo enabled.
mdb> break -E3 resume.l
 0: + stop  interface func resume.l/1-0 (semidet)
            (ignore next 3 call events)
mdb> c
      E2:     C2 CALL func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface func resume.l/1-0 (semidet)
mdb> f
      E3:     C2 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 3 -n 7
l([4, 5]) = 5
Valid? pd
      E3:     C2 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 3 -n 7 --resume
l([4, 5]) = 5
Valid? y
l([3, 4, 5]) = 5
Valid? pd
      E4:     C3 EXIT func resume.l/1-0 (semidet)
mdb> break wrapper
 0: + stop  interface pred resume.wrapper/6-0 (semidet)
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> retry
      E6:     C4 CALL pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([3, 4, 5]) = 5
Valid? q
Diagnosis aborted.
      E6:     C4 CALL pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([3, 4, 5]) = 5
Valid? pd
      E4:     C3 EXIT func resume.l/1-0 (semidet)
mdb> print
l([3, 4, 5]) = 5
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> retry
      E6:     C4 CALL pred resume.wrapper/6-0 (semidet)
mdb> break resume.m:33
 1: + stop  linenumber resume.m:33
mdb> c
      E7:     C5 CALL func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface pred resume.wrapper/6-0 (semidet)
 1: E stop  linenumber resume.m:33
mdb> break -E3 resume.l
 0: + stop  interface func resume.l/1-0 (semidet)
            (ignore next 3 call events)
mdb> c
      E8:     C6 CALL func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface func resume.l/1-0 (semidet)
mdb> f
      E9:     C6 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 3 -n 7
l([10]) = 10
Valid? pd
      E9:     C6 EXIT func resume.l/1-0 (semidet)
mdb> break wrapper
 0: + stop  interface pred resume.wrapper/6-0 (semidet)
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> retry
      E6:     C4 CALL pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([10]) = 10
Valid? y
l([9, 10]) = 10
Valid? y
l([8, 9, 10]) = 10
Valid? n
Found incorrect contour:
l([9, 10]) = 10
l([8, 9, 10]) = 10
Is this a bug? y
     E10:     C7 EXIT func resume.l/1-0 (semidet)
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> retry
      E6:     C4 CALL pred resume.wrapper/6-0 (semidet)
mdb> break resume.m:34
 2: + stop  linenumber resume.m:34
mdb> c
     E11:     C8 CALL func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface pred resume.wrapper/6-0 (semidet)
 2: E stop  linenumber resume.m:34
mdb> break -E3 resume.l
 0: + stop  interface func resume.l/1-0 (semidet)
            (ignore next 3 call events)
mdb> c
     E12:     C9 CALL func resume.l/1-0 (semidet)
mdb> f
     E13:     C9 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 3 -n 7
l([15]) = 15
Valid? pd
     E13:     C9 EXIT func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface func resume.l/1-0 (semidet)
mdb> break wrapper
 0: + stop  interface pred resume.wrapper/6-0 (semidet)
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([15]) = 15
Valid? y
l([14, 15]) = 15
Valid? pd
     E14:    C10 EXIT func resume.l/1-0 (semidet)
mdb> break resume.m:35
 3: + stop  linenumber resume.m:35
mdb> c
     E15:    C11 CALL func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface pred resume.wrapper/6-0 (semidet)
 3: E stop  linenumber resume.m:35
mdb> f
     E16:    C11 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 2 -n 7
l([16, 17, 18, 19, 20]) = 20
Valid? pd
     E16:    C11 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([16, 17, 18, 19, 20]) = 20
Valid? n
l([17, 18, 19, 20]) = 20
Valid? n
l([18, 19, 20]) = 20
Valid? n
l([19, 20]) = 20
Valid? n
l([20]) = 20
Valid? n
Found incorrect contour:
l([20]) = 20
Is this a bug? y
     E17:    C12 EXIT func resume.l/1-0 (semidet)
mdb> break resume.m:36
 4: + stop  linenumber resume.m:36
mdb> c
     E18:    C13 CALL func resume.l/1-0 (semidet)
mdb> f
     E19:    C13 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 2 -n 7
l([21, 22, 23, 24, 25]) = 25
Valid? pd
     E19:    C13 EXIT func resume.l/1-0 (semidet)
mdb> delete *
 4: E stop  linenumber resume.m:36
mdb> break wrapper
 0: + stop  interface pred resume.wrapper/6-0 (semidet)
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> retry
      E6:     C4 CALL pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([21, 22, 23, 24, 25]) = 25
Valid? n
l([22, 23, 24, 25]) = 25
Valid? n
l([23, 24, 25]) = 25
Valid? n
l([24, 25]) = 25
Valid? n
l([25]) = 25
Valid? n
Found incorrect contour:
l([25]) = 25
Is this a bug? y
     E20:    C14 EXIT func resume.l/1-0 (semidet)
mdb> break resume.m:37
 5: + stop  linenumber resume.m:37
mdb> c
     E21:    C15 CALL func resume.l/1-0 (semidet)
mdb> f
     E22:    C15 EXIT func resume.l/1-0 (semidet)
mdb> dd -d 2 -n 7
l([26, 27, 28, 29, 30]) = 30
Valid? pd
     E22:    C15 EXIT func resume.l/1-0 (semidet)
mdb> delete *
 0: E stop  interface pred resume.wrapper/6-0 (semidet)
 5: E stop  linenumber resume.m:37
mdb> break wrapper
 0: + stop  interface pred resume.wrapper/6-0 (semidet)
mdb> c
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r -s divide_and_query
l([26, 27, 28, 29, 30]) = 30
Valid? n
l([29, 30]) = 30
Valid? q
Diagnosis aborted.
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -r
l([29, 30]) = 30
Valid? q
Diagnosis aborted.
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> dd -d 3 -n 7 -rs top_down
l([27, 28, 29, 30]) = 30
Valid? q
Diagnosis aborted.
      E5:     C4 EXIT pred resume.wrapper/6-0 (semidet)
mdb> quit -y
