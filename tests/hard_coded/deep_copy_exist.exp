TESTING DISCRIMINATED UNIONS
apple([9, 5, 1])
apple([9, 5, 1])
apple([9, 5, 1])
banana([three, one, two])
banana([three, one, two])
banana([three, one, two])
zop(3.3, 2.03)
zop(3.3, 2.03)
zop(3.3, 2.03)
zip(3, 2)
zip(3, 2)
zip(3, 2)
zap(3, -2.111)
zap(3, -2.111)
zap(3, -2.111)
wombat
wombat
wombat
foo
foo
foo
tuple_a(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ["a", "b", "c"], 16, 17)
tuple_a(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ["a", "b", "c"], 16, 17)
tuple_a(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ["a", "b", "c"], 16, 17)
tuple_b(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ["a", "b", "c"], 16, ["x", "y", "z"])
tuple_b(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ["a", "b", "c"], 16, ["x", "y", "z"])
tuple_b(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ["a", "b", "c"], 16, ["x", "y", "z"])
tuple_c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ["p", "q"], 17)
tuple_c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ["p", "q"], 17)
tuple_c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ["p", "q"], 17)
tuple_d(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 'a', 15, 'z', 17)
tuple_d(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 'a', 15, 'z', 17)
tuple_d(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 'a', 15, 'z', 17)

TESTING POLYMORPHISM
poly_three(3.33, 4, poly_one(9.11))
poly_three(3.33, 4, poly_one(9.11))
poly_three(3.33, 4, poly_one(9.11))
poly_two(3)
poly_two(3)
poly_two(3)
poly_one([2399.3])
poly_one([2399.3])
poly_one([2399.3])

TESTING BUILTINS
univ_cons(["hi! I\'m a univ!"])
univ_cons(["hi! I\'m a univ!"])
univ_cons(["hi! I\'m a univ!"])

