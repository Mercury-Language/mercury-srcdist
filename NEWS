NEWS since Mercury 14.01.x
--------------------------

Changes to the Mercury language:

* We have added a new kind of scope to the language: determinism checks
  for switch arms. These scopes are introduced by any of the new keywords

      require_switch_arms_det
      require_switch_arms_semidet
      require_switch_arms_multi
      require_switch_arms_nondet
      require_switch_arms_cc_multi
      require_switch_arms_cc_nondet
      require_switch_arms_erroneous
      require_switch_arms_failure

  If `Goal' is switch on `Var', then e.g. `require_switch_arms_det [Var] Goal'
  tells the compiler to require all the arms of that switch to have
  determinisms at least as tight as det, and to generate error messages
  for any violations of this requirement.

* We have added an extension to include external files
  in pragma foreign_decl and pragma foreign_code declarations.

Changes to the Mercury standard library:

* We have added variants of the process_options predicates to the getopt
  and getopt_io modules that represent errors using a type instead of strings.
  A new function, option_error_to_string/1, can be used to convert values
  of the new error type into strings.

* We have added the print_line and write_line family of predicates to the
  io module.  These behave like the print and write predicates, but also
  write a terminating newline character.

* io.print and string_writer.print now print arbitrary precision integers
  in their decimal form instead of printing their underlying representation.

* We have added a module for discrete interval encoding trees, which are a
  highly efficient set implementation for fat sets.  This module is a
  contribution from Yes Logic Pty. Ltd.

+ We have added two new modules for concurrent programming: thread.barrier
  and thread.future.  The barrier module provides a barrier type which can
  be used to control progress in concurrent code.  The future module
  provides future and future_io data types which can be used to compute
  values in parallel using other threads.  These modules were contributed by
  Mission Critical IT.

* We have added thread.spawn_native/4 to dedicate an OS thread to a Mercury
  thread. thread.spawn/4 was added as well.

+ We have deprecated the impure init/1 function in thread.semaphore.

* In C grades, the math module now provides the fused multiply-add operation
  on platforms that support it.

* Procedures in the store module no longer acquire the global lock.

* The following predicates and functions have been added to the char module:

    - is_decimal_digit/1
    - is_base_digit/2
    - int_to_binary_digit/2
    - int_to_octal_digit/2
    - int_to_decimal_digit/2
    - int_to_hex_digit/2
    - base_int_to_digit/3, det_base_int_to_digit/2
    - binary_digit_to_int/2, det_binary_digit_to_int/1
    - octal_digit_to_int/2, det_octal_digit_to_int/1
    - decimal_digit_to_int/2, det_decimal_digit_to_int/1
    - hex_digit_to_int/2, det_hex_digit_to_int/1
    - base_digit_to_int/3, det_base_digit_to_int/2

  The following predicates in the char module have been deprecated and will
  either be removed or have their semantics changed in a future release.

    - is_hex_digit/2
    - int_to_hex_char/2
    - digit_to_int/2
    - int_to_digit/2
    - det_int_to_digit/1, det_int_to_digit/2

  NOTE: existing code that calls char.digit_to_int/2 assuming that it will
  only succeed for decimal digits (0-9) may be broken.

* Float special values, NaNs and Infinities, are now converted to strings in
  a way that is backend and grade-independent.  (Bug #348)

* The following classification predicates have been added to the float module:

   - is_finite/1
   - is_zero/1
   - is_infinite/1        (synonym for the existing is_inf/1 predicate)
   - is_nan_or_infinite/1 (synonym for the existing is_nan_or_inf/1 predicate)

  The following function has been added to the float module:

   - infinity/0

* The following predicates and functions have been added to the require module:

   - error/2
   - func_error/2

* The following predicate has been added to the string module:

   - is_all_alnum/1

Changes to the Mercury compiler:

* We have enabled stricter checking of non-ground final insts to reject more
  mode-incorrect code.  Due to compiler limitations, some code that should be
  accepted will now be rejected.  They will require modifications to appease
  the compiler.

* We have fixed a long-standing bug causing crashes in deep profiling
  grades, related to unify/compare for tuples.  (Bug #3)

* We have fixed some bugs with constrained polymorphic modes.

* We have removed legacy support for the following systems:
    - IRIX
    - OSF/1

* The asm_fast* and reg* grades now work on 64-bit Intel OS X systems when
  using GCC as the C compiler.
  See README.MacOS for further details.

Changes to the extras distribution:

* We have added support for Unicode and other enhancements to the lex and
  regex libraries.  Thanks to Sebastian Godelet.


NEWS for Mercury 14.01.2
------------------------

This is a bug-fix release.

* Fix array.sort, which has been buggy since 2001.  You may wish to
  reference array.sort_fix_2014 to ensure that you using the fixed version.
* Fix the handling of nondet code by the auto-parallelisation analysis in
  mdprof_create_feedback.  (Bug #364)


NEWS for Mercury 14.01.1
------------------------

This is a bug-fix release.

* The function string.string/1 and related functions now handle version
  arrays properly.
* Fix resource leaks in dir fold predicates.
* The mfilterjavac program is now generated with the correct file extension
  on Windows.
* A problem that caused compilation of the Boehm GC to fail on 64-bit
  openSUSE 13.1 systems has been fixed.  (Github issue #14)
* The documentation now builds correctly on Cygwin systems.
* The script configure_mingw_cross now supports 64-bit Windows targets.
* We have added workarounds for problems with (arguably broken)
  system headers on MinGW and MinGW64 systems.
* The MinGW port now builds in the absence of POSIX threads library.
* Low-level C parallel grades now work on Windows instead of crashing
  at startup.  (Bug #338)
* We now use thread-safe alternatives to strerror().  (Bug #340)
* We have added the configure option --enable-gc-mmap.
* We configure Boehm GC to use mmap in threaded grades on Linux to avoid
  conflicts with glibc malloc leading to memory corruption.
* A problem that caused string.format/[23] to sometimes return incorrect
  results when formatting floats with the 'g' conversion specifier has
  been fixed.  This bug only affected the non-C backends.  (Bug #342)
* string.format now handles special float values (i.e. nan, inf,  and -inf)
  correctly with the non-C backends.
* A bug that caused io.write_float/[34] to append ".0" to float special values
  has been fixed.  This bug affected the C and C# backends.
* In the C# and Java grades, the predicate string.from_char_list now
  implements the documented behaviour for input lists containing null
  characters (i.e. it throws an exception).
  Likewise, for string.from_reverse_char_list in the C# grade.
* We have fixed a problem that caused `mmc --make' to attempt to install
  libraries in non-existent grades.

Changes to the Mercury compiler:

* The compiler now supports stripping of executables in a separate
  post-link step.  The new options, --strip-executable-command,
  --strip-executable-shared-flags and --strip-executable-static-flags
  are used to control this.
  (This is now the default on Mac OS X systems.)


NEWS for Mercury 14.01
----------------------

Changes to the Mercury language:

* Repeated type variables may now occur in the heads of type class instances.
  For example, instance declarations like the following are now allowed:

      :- instance foo(list(T), map(T, T)).

Changes to the Mercury standard library:

* We have added the function cord.condense/1.

* The following functions in the standard library's cord module now use
  constant stack space: foldl/3, foldl_pred/4.

* We have added the following predicates to the array and version_array
  modules: is_empty/1, all_true/2 and all_false/2.

* We have added the following predicates and functions to the map module:
  det_min_key/1, det_max_key/1, foldl2_values/6 and foldl3_values/8.

* We have added the following predicates to the list module: foldr2/6,
  foldr3/8, det_take/3 and map_foldr/5.

* We have added the following predicates to the bag module: foldl/4 and
  foldl2/6.

* We have added the following predicates to the assoc_list module:
  foldl2_values/6 and foldl3_values/8.

* We have added the following predicates and functions to the pqueue module:
  is_empty/1, peek/3, peek_key/2, peek_value/2, det_peek/3, merge/3,
  det_peek_key/1 and det_peek_value/1.

* We have added the predicate bimap.equal/2.

* We have added the following predicates to the int module: fold_up3/9 and
  fold_down3/9.

Changes to the Mercury compiler:

* On Mac OS X systems the compiler is now configured use the version of the
  host system as the default value for the deployment target.

  A new configuration option, `--with-macosx-deployment-target', allows
  an alternative value to be selected at configuration time.

Portability improvements:

* We have made the implementation compatible with GCC 4.8 and Visual Studio
  2013.

* We have made the implementation compatible with OS X 10.9.

Changes to the extras distribution:

* We've added a library that provides support for accessing the function
  trail from Mercury code.


For news about earlier versions, see the HISTORY file.
