# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated dependencies for module `mercury_profile'
# generated from source file `mercury_profile.m'
# Generated by the Mercury compiler, version rotd-2017-06-22
# configured for x86_64-apple-darwin13.4.0.

ifeq (x,y)
# Automatically generated dependencies for module `mercury_profile'
# generated from source file `mercury_profile.m'
# Generated by the Mercury compiler, version rotd-2017-06-22,
# configured for x86_64-apple-darwin13.4.0.
endif

ifneq ($(EXT_FOR_EXE),)
.PHONY : mercury_profile
mercury_profile : mercury_profile$(EXT_FOR_EXE)
endif
ifneq ($(EXT_FOR_EXE),)

ifeq (x,y)
# RULE ext_for_exe
.PHONY: mercury_profile
mercury_profile : mercury_profile$(EXT_FOR_EXE)
endif

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)
mercury_profile : $(mercury_profile.classes)
else
mercury_profile$(EXT_FOR_EXE) : $(mercury_profile.os) mercury_profile_init.$O \
		$(foreach @,mercury_profile,$(ALL_MLOBJS)) \
		$(foreach @,mercury_profile,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mercury_profile$(EXT_FOR_EXE) mercury_profile_init.$O \
		$(mercury_profile.os) \
		$(foreach @,mercury_profile,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif
ifeq ($(findstring java,$(GRADE)),java)

ifeq (x,y)
# RULE executable_java
mercury_profile : $(mercury_profile.classes)
endif

else

ifeq (x,y)
# RULE executable_non_java
mercury_profile$(EXT_FOR_EXE) : \
		$(mercury_profile.os) \
		mercury_profile_init.$O \
		$(foreach @,mercury_profile,$(ALL_MLOBJS)) \
		$(foreach @,mercury_profile,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mercury_profile$(EXT_FOR_EXE) mercury_profile_init.$O \
		$(mercury_profile.os) \
		$(foreach @,mercury_profile,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif

endif # conditional fragment

.PHONY : libmercury_profile
ifeq ($(findstring java,$(GRADE)),java)
libmercury_profile : mercury_profile.jar \
		$(mercury_profile.ints) $(mercury_profile.int3s) mercury_profile.init

else
libmercury_profile : libmercury_profile.$A libmercury_profile.$(EXT_FOR_SHARED_LIB) \
		$(mercury_profile.ints) $(mercury_profile.int3s) mercury_profile.init

endif
ifeq ($(findstring java,$(GRADE)),java)

ifeq (x,y)
# RULE lib_target_java
.PHONY: libmercury_profile
libmercury_profile : \
		mercury_profile.jar \
		$(mercury_profile.ints) \
		$(mercury_profile.int3s) \
		mercury_profile.init
endif

else

ifeq (x,y)
# RULE lib_target_non_java
.PHONY: libmercury_profile
libmercury_profile : \
		libmercury_profile.$A \
		libmercury_profile.$(EXT_FOR_SHARED_LIB) \
		$(mercury_profile.ints) \
		$(mercury_profile.int3s) \
		mercury_profile.init
endif

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmercury_profile.$(EXT_FOR_SHARED_LIB) : $(mercury_profile.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mercury_profile,$(ALL_MLOBJS))) \
		$(foreach @,mercury_profile,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- -install_name /usr/local/mercury-rotd-2017-06-22/lib/mercury/lib/hlc.gc.pregen/libmercury_profile.$(EXT_FOR_SHARED_LIB) $(ALL_LD_LIBFLAGS) -o libmercury_profile.$(EXT_FOR_SHARED_LIB) \
		$(mercury_profile.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mercury_profile,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

ifeq (x,y)
# RULE shared_lib
libmercury_profile.$(EXT_FOR_SHARED_LIB) : \
		$(mercury_profile.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mercury_profile,$(ALL_MLOBJS))) \
		$(foreach @,mercury_profile,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- -install_name /usr/local/mercury-rotd-2017-06-22/lib/mercury/lib/hlc.gc.pregen/libmercury_profile.$(EXT_FOR_SHARED_LIB) $(ALL_LD_LIBFLAGS) -o libmercury_profile.$(EXT_FOR_SHARED_LIB) \
		$(mercury_profile.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mercury_profile,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

endif # conditional fragment

libmercury_profile.$A : $(mercury_profile.os) \
		$(foreach @,mercury_profile,$(ALL_MLOBJS))
	rm -f libmercury_profile.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmercury_profile.$A $(mercury_profile.os) \
		$(foreach @,mercury_profile,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmercury_profile.$A

ifeq (x,y)
# RULE lib
libmercury_profile.$A : \
		$(mercury_profile.os) \
		$(foreach @,mercury_profile,$(ALL_MLOBJS))
	rm -f libmercury_profile.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmercury_profile.$A $(mercury_profile.os) \
		$(foreach @,mercury_profile,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmercury_profile.$A
endif

mercury_profile.jar : $(mercury_profile.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mercury_profile.jar $(mercury_profile.classes)

ifeq (x,y)
# RULE jar
mercury_profile.jar : $(mercury_profile.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mercury_profile.jar $(mercury_profile.classes)
endif

mercury_profile.init : mercury_profile.dep $(mercury_profile.cs)
	echo > mercury_profile.init
	$(MKLIBINIT) $(mercury_profile.cs) >> mercury_profile.init
	$(EXTRA_INIT_COMMAND) >> mercury_profile.init

ifeq (x,y)
# RULE init_file
mercury_profile.init : \
		mercury_profile.dep \
		$(mercury_profile.cs)
	echo > mercury_profile.init
	$(MKLIBINIT) $(mercury_profile.cs) >> mercury_profile.init
	$(EXTRA_INIT_COMMAND) >> mercury_profile.init
endif

force-mercury_profile_init :

ifeq (x,y)
# RULE force_init_c_file
force-mercury_profile_init :
endif

mercury_profile_init.c : force-mercury_profile_init $(mercury_profile.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mercury_profile_init.c.tmp $(mercury_profile.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mercury_profile_init.c

ifeq (x,y)
# RULE init_c_file
mercury_profile_init.c : \
		force-mercury_profile_init \
		$(mercury_profile.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mercury_profile_init.c.tmp $(mercury_profile.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mercury_profile_init.c
endif

.PHONY : libmercury_profile.install_ints
libmercury_profile.install_ints : $(mercury_profile.ints) $(mercury_profile.int3s)  install_lib_dirs
	files="$(mercury_profile.ints) $(mercury_profile.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

ifeq (x,y)
# RULE lib_install_ints
.PHONY: libmercury_profile.install_ints
libmercury_profile.install_ints : \
		$(mercury_profile.ints) \
		$(mercury_profile.int3s) \
		install_lib_dirs
	files="$(mercury_profile.ints) $(mercury_profile.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done
endif

.PHONY : libmercury_profile.install_opts
libmercury_profile.install_opts : 
	@:

ifeq (x,y)
# RULE lib_install_opts
.PHONY: libmercury_profile.install_opts
libmercury_profile.install_opts :
	@:
endif

.PHONY : libmercury_profile.install_hdrs
libmercury_profile.install_hdrs : $(mercury_profile.mhs) install_lib_dirs
ifeq ($(mercury_profile.mhs),)
	@:
else
	for hdr in $(mercury_profile.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

ifeq ($(mercury_profile.mhs),)

ifeq (x,y)
# RULE install_lib_hdrs_nomhs
.PHONY: libmercury_profile.install_hdrs
libmercury_profile.install_hdrs : \
		$(mercury_profile.mhs) \
		install_lib_dirs
	@:
endif

else

ifeq (x,y)
# RULE install_lib_hdrs_mhs
.PHONY: libmercury_profile.install_hdrs
libmercury_profile.install_hdrs : \
		$(mercury_profile.mhs) \
		install_lib_dirs
	for hdr in $(mercury_profile.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

endif # conditional fragment

.PHONY : libmercury_profile.install_grade_hdrs
libmercury_profile.install_grade_hdrs : $(mercury_profile.mihs) install_grade_dirs
ifeq ($(mercury_profile.mihs),)
	@:
else
	for hdr in $(mercury_profile.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

ifeq ($(mercury_profile.mihs),)

ifeq (x,y)
# RULE install_grade_hdrs_no_mihs
.PHONY: libmercury_profile.install_grade_hdrs
libmercury_profile.install_grade_hdrs : \
		$(mercury_profile.mihs) \
		install_grade_dirs
	@:
endif

else

ifeq (x,y)
# RULE install_grade_hdrs_mihs
.PHONY: libmercury_profile.install_grade_hdrs
libmercury_profile.install_grade_hdrs : \
		$(mercury_profile.mihs) \
		install_grade_dirs
	for hdr in $(mercury_profile.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

endif # conditional fragment

.PHONY : mercury_profile.check
mercury_profile.check : $(mercury_profile.errs)

ifeq (x,y)
# RULE collective_target_.check.errs
.PHONY: mercury_profile.check
mercury_profile.check : $(mercury_profile.errs)
endif

.PHONY : mercury_profile.ints
mercury_profile.ints : $(mercury_profile.dates)

ifeq (x,y)
# RULE collective_target_.ints.dates
.PHONY: mercury_profile.ints
mercury_profile.ints : $(mercury_profile.dates)
endif

.PHONY : mercury_profile.int3s
mercury_profile.int3s : $(mercury_profile.date3s)

ifeq (x,y)
# RULE collective_target_.int3s.date3s
.PHONY: mercury_profile.int3s
mercury_profile.int3s : $(mercury_profile.date3s)
endif

.PHONY : mercury_profile.opts
mercury_profile.opts : $(mercury_profile.optdates)

ifeq (x,y)
# RULE collective_target_.opts.optdates
.PHONY: mercury_profile.opts
mercury_profile.opts : $(mercury_profile.optdates)
endif

.PHONY : mercury_profile.trans_opts
mercury_profile.trans_opts : $(mercury_profile.trans_opt_dates)

ifeq (x,y)
# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: mercury_profile.trans_opts
mercury_profile.trans_opts : $(mercury_profile.trans_opt_dates)
endif

.PHONY : mercury_profile.javas
mercury_profile.javas : $(mercury_profile.javas)

ifeq (x,y)
# RULE collective_target_.javas.javas
.PHONY: mercury_profile.javas
mercury_profile.javas : $(mercury_profile.javas)
endif

.PHONY : mercury_profile.classes
mercury_profile.classes : $(mercury_profile.classes)

ifeq (x,y)
# RULE collective_target_.classes.classes
.PHONY: mercury_profile.classes
mercury_profile.classes : $(mercury_profile.classes)
endif

.PHONY : mercury_profile.all_ints
mercury_profile.all_ints : $(mercury_profile.dates)

ifeq (x,y)
# RULE collective_target_.all_ints.dates
.PHONY: mercury_profile.all_ints
mercury_profile.all_ints : $(mercury_profile.dates)
endif

.PHONY : mercury_profile.all_int3s
mercury_profile.all_int3s : $(mercury_profile.date3s)

ifeq (x,y)
# RULE collective_target_.all_int3s.date3s
.PHONY: mercury_profile.all_int3s
mercury_profile.all_int3s : $(mercury_profile.date3s)
endif

.PHONY : mercury_profile.all_opts
mercury_profile.all_opts : $(mercury_profile.optdates)

ifeq (x,y)
# RULE collective_target_.all_opts.optdates
.PHONY: mercury_profile.all_opts
mercury_profile.all_opts : $(mercury_profile.optdates)
endif

.PHONY : mercury_profile.all_trans_opts
mercury_profile.all_trans_opts : $(mercury_profile.trans_opt_dates)

ifeq (x,y)
# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: mercury_profile.all_trans_opts
mercury_profile.all_trans_opts : $(mercury_profile.trans_opt_dates)
endif

clean_local : mercury_profile.clean
.PHONY : mercury_profile.clean
mercury_profile.clean :
	-echo $(mercury_profile.dirs) | xargs rm -rf 
	-echo $(mercury_profile.cs) mercury_profile_init.c | xargs rm -f
	-echo $(mercury_profile.mihs) | xargs rm -f
	-echo $(mercury_profile.all_os) mercury_profile_init.$O | xargs rm -f
	-echo $(mercury_profile.all_pic_os) mercury_profile_init.pic_o | xargs rm -f
	-echo $(mercury_profile.c_dates) | xargs rm -f
	-echo $(mercury_profile.java_dates) | xargs rm -f
	-echo $(mercury_profile.useds) | xargs rm -f
	-echo $(mercury_profile.javas) | xargs rm -f
	-echo $(mercury_profile.profs) | xargs rm -f
	-echo $(mercury_profile.errs) | xargs rm -f
	-echo $(mercury_profile.foreign_cs) | xargs rm -f

ifeq (x,y)
# RULE clean_local
clean_local : mercury_profile.clean
endif

ifeq (x,y)
# RULE clean_target
.PHONY: mercury_profile.clean
mercury_profile.clean :
	-echo $(mercury_profile.dirs) | xargs rm -f
	-echo $(mercury_profile.cs) | xargs rm -f
	-echo $(mercury_profile.mihs) | xargs rm -f
	-echo $(mercury_profile.all_os) | xargs rm -f
	-echo $(mercury_profile.all_pic_os) | xargs rm -f
	-echo $(mercury_profile.c_dates) | xargs rm -f
	-echo $(mercury_profile.java_dates) | xargs rm -f
	-echo $(mercury_profile.useds) | xargs rm -f
	-echo $(mercury_profile.javas) | xargs rm -f
	-echo $(mercury_profile.profs) | xargs rm -f
	-echo $(mercury_profile.errs) | xargs rm -f
	-echo $(mercury_profile.foreign_cs) | xargs rm -f
	-rm -f mercury_profile_init.c mercury_profile_init.$O mercury_profile_init.pic_o
endif

realclean_local : mercury_profile.realclean
.PHONY : mercury_profile.realclean
mercury_profile.realclean : mercury_profile.clean
	-echo $(mercury_profile.dates) | xargs rm -f
	-echo $(mercury_profile.date0s) | xargs rm -f
	-echo $(mercury_profile.date3s) | xargs rm -f
	-echo $(mercury_profile.optdates) | xargs rm -f
	-echo $(mercury_profile.trans_opt_dates) | xargs rm -f
	-echo $(mercury_profile.ints) | xargs rm -f
	-echo $(mercury_profile.all_int0s) | xargs rm -f
	-echo $(mercury_profile.int3s) | xargs rm -f
	-echo $(mercury_profile.opts) | xargs rm -f
	-echo $(mercury_profile.trans_opts) | xargs rm -f
	-echo $(mercury_profile.analysiss) | xargs rm -f
	-echo $(mercury_profile.requests) | xargs rm -f
	-echo $(mercury_profile.imdgs) | xargs rm -f
	-echo $(mercury_profile.ds) | xargs rm -f
	-echo $(mercury_profile.module_deps) | xargs rm -f
	-echo $(mercury_profile.all_mhs) | xargs rm -f
	-echo $(mercury_profile.all_mihs) | xargs rm -f
	-echo $(mercury_profile.dlls) | xargs rm -f
	-echo $(mercury_profile.foreign_dlls) | xargs rm -f
	-echo $(mercury_profile.classes) | xargs rm -f
	-rm -f mercury_profile$(EXT_FOR_EXE) mercury_profile.init libmercury_profile.$A libmercury_profile.$(EXT_FOR_SHARED_LIB) mercury_profile.jar mercury_profile.dep mercury_profile.dv

ifeq (x,y)
# RULE realclean_local
realclean_local : mercury_profile.realclean
endif

ifeq (x,y)
# RULE realclean_target
.PHONY: mercury_profile.realclean
mercury_profile.realclean : mercury_profile.clean
	-echo $(mercury_profile.dates) | xargs rm -f
	-echo $(mercury_profile.date0s) | xargs rm -f
	-echo $(mercury_profile.date3s) | xargs rm -f
	-echo $(mercury_profile.optdates) | xargs rm -f
	-echo $(mercury_profile.trans_opt_dates) | xargs rm -f
	-echo $(mercury_profile.ints) | xargs rm -f
	-echo $(mercury_profile.all_int0s) | xargs rm -f
	-echo $(mercury_profile.int3s) | xargs rm -f
	-echo $(mercury_profile.opts) | xargs rm -f
	-echo $(mercury_profile.trans_opts) | xargs rm -f
	-echo $(mercury_profile.analysiss) | xargs rm -f
	-echo $(mercury_profile.requests) | xargs rm -f
	-echo $(mercury_profile.imdgs) | xargs rm -f
	-echo $(mercury_profile.ds) | xargs rm -f
	-echo $(mercury_profile.module_deps) | xargs rm -f
	-echo $(mercury_profile.all_mhs) | xargs rm -f
	-echo $(mercury_profile.all_mihs) | xargs rm -f
	-echo $(mercury_profile.dlls) | xargs rm -f
	-echo $(mercury_profile.foreign_dlls) | xargs rm -f
	-echo $(mercury_profile.classes) | xargs rm -f
	-rm -f mercury_profile$(EXT_FOR_EXE)  mercury_profile.init libmercury_profile.$A libmercury_profile.$(EXT_FOR_SHARED_LIB) mercury_profile.jar mercury_profile.dep mercury_profile.dv
endif

