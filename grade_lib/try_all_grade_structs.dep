# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `try_all_grade_structs' in source file `try_all_grade_structs.m'.
# Generated by Mercury compiler version rotd-2023-01-12
# configured for x86_64-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: try_all_grade_structs
try_all_grade_structs : try_all_grade_structs$(EXT_FOR_EXE)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
try_all_grade_structs : $(try_all_grade_structs.classes)

else

# RULE executable_non_java
try_all_grade_structs$(EXT_FOR_EXE) : \
		$(try_all_grade_structs.os) \
		try_all_grade_structs_init.$O \
		$(foreach @,try_all_grade_structs,$(ALL_MLOBJS)) \
		$(foreach @,try_all_grade_structs,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)try_all_grade_structs$(EXT_FOR_EXE) try_all_grade_structs_init.$O \
		$(try_all_grade_structs.os) \
		$(foreach @,try_all_grade_structs,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libtry_all_grade_structs
libtry_all_grade_structs : \
		try_all_grade_structs.jar \
		$(try_all_grade_structs.ints) \
		$(try_all_grade_structs.int3s) \
		try_all_grade_structs.init

else

# RULE lib_target_non_java
.PHONY: libtry_all_grade_structs
libtry_all_grade_structs : \
		libtry_all_grade_structs.$A \
		libtry_all_grade_structs.$(EXT_FOR_SHARED_LIB) \
		$(try_all_grade_structs.ints) \
		$(try_all_grade_structs.int3s) \
		try_all_grade_structs.init

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libtry_all_grade_structs.$(EXT_FOR_SHARED_LIB) : \
		$(try_all_grade_structs.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,try_all_grade_structs,$(ALL_MLOBJS))) \
		$(foreach @,try_all_grade_structs,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libtry_all_grade_structs.$(EXT_FOR_SHARED_LIB) \
		$(try_all_grade_structs.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,try_all_grade_structs,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

# RULE lib
libtry_all_grade_structs.$A : \
		$(try_all_grade_structs.os) \
		$(foreach @,try_all_grade_structs,$(ALL_MLOBJS))
	rm -f libtry_all_grade_structs.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libtry_all_grade_structs.$A $(try_all_grade_structs.os) \
		$(foreach @,try_all_grade_structs,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libtry_all_grade_structs.$A

# RULE jar
try_all_grade_structs.jar : $(try_all_grade_structs.classes)
	$(JAR) $(JAR_CREATE_FLAGS) try_all_grade_structs.jar $(try_all_grade_structs.classes)

# RULE init_file
try_all_grade_structs.init : \
		try_all_grade_structs.dep \
		$(try_all_grade_structs.cs)
	echo > try_all_grade_structs.init
	$(MKLIBINIT) $(try_all_grade_structs.cs) >> try_all_grade_structs.init
	$(EXTRA_INIT_COMMAND) >> try_all_grade_structs.init

# RULE force_init_c_file
force-try_all_grade_structs_init :

# RULE init_c_file
try_all_grade_structs_init.c : \
		force-try_all_grade_structs_init \
		$(try_all_grade_structs.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file try_all_grade_structs_init.c.tmp $(try_all_grade_structs.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface try_all_grade_structs_init.c

# RULE lib_install_ints
.PHONY: libtry_all_grade_structs.install_ints
libtry_all_grade_structs.install_ints : \
		$(try_all_grade_structs.ints) \
		$(try_all_grade_structs.int3s) \
		install_lib_dirs
	files="$(try_all_grade_structs.ints) $(try_all_grade_structs.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

# RULE lib_install_opts
.PHONY: libtry_all_grade_structs.install_opts
libtry_all_grade_structs.install_opts :
	@:

ifeq ($(try_all_grade_structs.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libtry_all_grade_structs.install_hdrs
libtry_all_grade_structs.install_hdrs : \
		$(try_all_grade_structs.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libtry_all_grade_structs.install_hdrs
libtry_all_grade_structs.install_hdrs : \
		$(try_all_grade_structs.mhs) \
		install_lib_dirs
	for hdr in $(try_all_grade_structs.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq ($(try_all_grade_structs.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libtry_all_grade_structs.install_grade_hdrs
libtry_all_grade_structs.install_grade_hdrs : \
		$(try_all_grade_structs.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libtry_all_grade_structs.install_grade_hdrs
libtry_all_grade_structs.install_grade_hdrs : \
		$(try_all_grade_structs.mihs) \
		install_grade_dirs
	for hdr in $(try_all_grade_structs.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

# RULE collective_target_.check.errs
.PHONY: try_all_grade_structs.check
try_all_grade_structs.check : $(try_all_grade_structs.errs)

# RULE collective_target_.ints.dates
.PHONY: try_all_grade_structs.ints
try_all_grade_structs.ints : $(try_all_grade_structs.dates)

# RULE collective_target_.int3s.date3s
.PHONY: try_all_grade_structs.int3s
try_all_grade_structs.int3s : $(try_all_grade_structs.date3s)

# RULE collective_target_.opts.optdates
.PHONY: try_all_grade_structs.opts
try_all_grade_structs.opts : $(try_all_grade_structs.optdates)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: try_all_grade_structs.trans_opts
try_all_grade_structs.trans_opts : $(try_all_grade_structs.trans_opt_dates)

# RULE collective_target_.javas.javas
.PHONY: try_all_grade_structs.javas
try_all_grade_structs.javas : $(try_all_grade_structs.javas)

# RULE collective_target_.classes.classes
.PHONY: try_all_grade_structs.classes
try_all_grade_structs.classes : $(try_all_grade_structs.classes)

# RULE collective_target_.all_ints.dates
.PHONY: try_all_grade_structs.all_ints
try_all_grade_structs.all_ints : $(try_all_grade_structs.dates)

# RULE collective_target_.all_int3s.date3s
.PHONY: try_all_grade_structs.all_int3s
try_all_grade_structs.all_int3s : $(try_all_grade_structs.date3s)

# RULE collective_target_.all_opts.optdates
.PHONY: try_all_grade_structs.all_opts
try_all_grade_structs.all_opts : $(try_all_grade_structs.optdates)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: try_all_grade_structs.all_trans_opts
try_all_grade_structs.all_trans_opts : $(try_all_grade_structs.trans_opt_dates)

# RULE clean_local
clean_local : try_all_grade_structs.clean

# RULE clean_target
.PHONY: try_all_grade_structs.clean
try_all_grade_structs.clean :
	-echo $(try_all_grade_structs.dirs) | xargs rm -f
	-echo $(try_all_grade_structs.cs) | xargs rm -f
	-echo $(try_all_grade_structs.mihs) | xargs rm -f
	-echo $(try_all_grade_structs.all_os) | xargs rm -f
	-echo $(try_all_grade_structs.all_pic_os) | xargs rm -f
	-echo $(try_all_grade_structs.c_dates) | xargs rm -f
	-echo $(try_all_grade_structs.java_dates) | xargs rm -f
	-echo $(try_all_grade_structs.useds) | xargs rm -f
	-echo $(try_all_grade_structs.javas) | xargs rm -f
	-echo $(try_all_grade_structs.profs) | xargs rm -f
	-echo $(try_all_grade_structs.dep_errs) | xargs rm -f
	-echo $(try_all_grade_structs.errs) | xargs rm -f
	-echo $(try_all_grade_structs.foreign_cs) | xargs rm -f
	-rm -f try_all_grade_structs_init.c try_all_grade_structs_init.$O try_all_grade_structs_init.pic_o

# RULE realclean_local
realclean_local : try_all_grade_structs.realclean

# RULE realclean_target
.PHONY: try_all_grade_structs.realclean
try_all_grade_structs.realclean : try_all_grade_structs.clean
	-echo $(try_all_grade_structs.dates) | xargs rm -f
	-echo $(try_all_grade_structs.date0s) | xargs rm -f
	-echo $(try_all_grade_structs.date3s) | xargs rm -f
	-echo $(try_all_grade_structs.optdates) | xargs rm -f
	-echo $(try_all_grade_structs.trans_opt_dates) | xargs rm -f
	-echo $(try_all_grade_structs.ints) | xargs rm -f
	-echo $(try_all_grade_structs.all_int0s) | xargs rm -f
	-echo $(try_all_grade_structs.int3s) | xargs rm -f
	-echo $(try_all_grade_structs.opts) | xargs rm -f
	-echo $(try_all_grade_structs.trans_opts) | xargs rm -f
	-echo $(try_all_grade_structs.analysiss) | xargs rm -f
	-echo $(try_all_grade_structs.requests) | xargs rm -f
	-echo $(try_all_grade_structs.imdgs) | xargs rm -f
	-echo $(try_all_grade_structs.ds) | xargs rm -f
	-echo $(try_all_grade_structs.module_deps) | xargs rm -f
	-echo $(try_all_grade_structs.all_mhs) | xargs rm -f
	-echo $(try_all_grade_structs.all_mihs) | xargs rm -f
	-echo $(try_all_grade_structs.dlls) | xargs rm -f
	-echo $(try_all_grade_structs.foreign_dlls) | xargs rm -f
	-echo $(try_all_grade_structs.classes) | xargs rm -f
	-rm -f try_all_grade_structs$(EXT_FOR_EXE)  try_all_grade_structs.init libtry_all_grade_structs.$A libtry_all_grade_structs.$(EXT_FOR_SHARED_LIB) try_all_grade_structs.jar try_all_grade_structs.dep try_all_grade_structs.dv

