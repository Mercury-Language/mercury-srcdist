# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `test_grades' in source file `test_grades.m'.
# Generated by Mercury compiler version rotd-2022-02-03
# configured for x86_64-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: test_grades
test_grades : test_grades$(EXT_FOR_EXE)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
test_grades : $(test_grades.classes)

else

# RULE executable_non_java
test_grades$(EXT_FOR_EXE) : \
		$(test_grades.os) \
		test_grades_init.$O \
		$(foreach @,test_grades,$(ALL_MLOBJS)) \
		$(foreach @,test_grades,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)test_grades$(EXT_FOR_EXE) test_grades_init.$O \
		$(test_grades.os) \
		$(foreach @,test_grades,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libtest_grades
libtest_grades : \
		test_grades.jar \
		$(test_grades.ints) \
		$(test_grades.int3s) \
		test_grades.init

else

# RULE lib_target_non_java
.PHONY: libtest_grades
libtest_grades : \
		libtest_grades.$A \
		libtest_grades.$(EXT_FOR_SHARED_LIB) \
		$(test_grades.ints) \
		$(test_grades.int3s) \
		test_grades.init

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libtest_grades.$(EXT_FOR_SHARED_LIB) : \
		$(test_grades.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,test_grades,$(ALL_MLOBJS))) \
		$(foreach @,test_grades,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libtest_grades.$(EXT_FOR_SHARED_LIB) \
		$(test_grades.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,test_grades,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

# RULE lib
libtest_grades.$A : \
		$(test_grades.os) \
		$(foreach @,test_grades,$(ALL_MLOBJS))
	rm -f libtest_grades.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libtest_grades.$A $(test_grades.os) \
		$(foreach @,test_grades,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libtest_grades.$A

# RULE jar
test_grades.jar : $(test_grades.classes)
	$(JAR) $(JAR_CREATE_FLAGS) test_grades.jar $(test_grades.classes)

# RULE init_file
test_grades.init : \
		test_grades.dep \
		$(test_grades.cs)
	echo > test_grades.init
	$(MKLIBINIT) $(test_grades.cs) >> test_grades.init
	$(EXTRA_INIT_COMMAND) >> test_grades.init

# RULE force_init_c_file
force-test_grades_init :

# RULE init_c_file
test_grades_init.c : \
		force-test_grades_init \
		$(test_grades.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file test_grades_init.c.tmp $(test_grades.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface test_grades_init.c

# RULE lib_install_ints
.PHONY: libtest_grades.install_ints
libtest_grades.install_ints : \
		$(test_grades.ints) \
		$(test_grades.int3s) \
		install_lib_dirs
	files="$(test_grades.ints) $(test_grades.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

# RULE lib_install_opts
.PHONY: libtest_grades.install_opts
libtest_grades.install_opts :
	@:

ifeq ($(test_grades.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libtest_grades.install_hdrs
libtest_grades.install_hdrs : \
		$(test_grades.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libtest_grades.install_hdrs
libtest_grades.install_hdrs : \
		$(test_grades.mhs) \
		install_lib_dirs
	for hdr in $(test_grades.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq ($(test_grades.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libtest_grades.install_grade_hdrs
libtest_grades.install_grade_hdrs : \
		$(test_grades.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libtest_grades.install_grade_hdrs
libtest_grades.install_grade_hdrs : \
		$(test_grades.mihs) \
		install_grade_dirs
	for hdr in $(test_grades.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

# RULE collective_target_.check.errs
.PHONY: test_grades.check
test_grades.check : $(test_grades.errs)

# RULE collective_target_.ints.dates
.PHONY: test_grades.ints
test_grades.ints : $(test_grades.dates)

# RULE collective_target_.int3s.date3s
.PHONY: test_grades.int3s
test_grades.int3s : $(test_grades.date3s)

# RULE collective_target_.opts.optdates
.PHONY: test_grades.opts
test_grades.opts : $(test_grades.optdates)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: test_grades.trans_opts
test_grades.trans_opts : $(test_grades.trans_opt_dates)

# RULE collective_target_.javas.javas
.PHONY: test_grades.javas
test_grades.javas : $(test_grades.javas)

# RULE collective_target_.classes.classes
.PHONY: test_grades.classes
test_grades.classes : $(test_grades.classes)

# RULE collective_target_.all_ints.dates
.PHONY: test_grades.all_ints
test_grades.all_ints : $(test_grades.dates)

# RULE collective_target_.all_int3s.date3s
.PHONY: test_grades.all_int3s
test_grades.all_int3s : $(test_grades.date3s)

# RULE collective_target_.all_opts.optdates
.PHONY: test_grades.all_opts
test_grades.all_opts : $(test_grades.optdates)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: test_grades.all_trans_opts
test_grades.all_trans_opts : $(test_grades.trans_opt_dates)

# RULE clean_local
clean_local : test_grades.clean

# RULE clean_target
.PHONY: test_grades.clean
test_grades.clean :
	-echo $(test_grades.dirs) | xargs rm -f
	-echo $(test_grades.cs) | xargs rm -f
	-echo $(test_grades.mihs) | xargs rm -f
	-echo $(test_grades.all_os) | xargs rm -f
	-echo $(test_grades.all_pic_os) | xargs rm -f
	-echo $(test_grades.c_dates) | xargs rm -f
	-echo $(test_grades.java_dates) | xargs rm -f
	-echo $(test_grades.useds) | xargs rm -f
	-echo $(test_grades.javas) | xargs rm -f
	-echo $(test_grades.profs) | xargs rm -f
	-echo $(test_grades.errs) | xargs rm -f
	-echo $(test_grades.foreign_cs) | xargs rm -f
	-rm -f test_grades_init.c test_grades_init.$O test_grades_init.pic_o

# RULE realclean_local
realclean_local : test_grades.realclean

# RULE realclean_target
.PHONY: test_grades.realclean
test_grades.realclean : test_grades.clean
	-echo $(test_grades.dates) | xargs rm -f
	-echo $(test_grades.date0s) | xargs rm -f
	-echo $(test_grades.date3s) | xargs rm -f
	-echo $(test_grades.optdates) | xargs rm -f
	-echo $(test_grades.trans_opt_dates) | xargs rm -f
	-echo $(test_grades.ints) | xargs rm -f
	-echo $(test_grades.all_int0s) | xargs rm -f
	-echo $(test_grades.int3s) | xargs rm -f
	-echo $(test_grades.opts) | xargs rm -f
	-echo $(test_grades.trans_opts) | xargs rm -f
	-echo $(test_grades.analysiss) | xargs rm -f
	-echo $(test_grades.requests) | xargs rm -f
	-echo $(test_grades.imdgs) | xargs rm -f
	-echo $(test_grades.ds) | xargs rm -f
	-echo $(test_grades.module_deps) | xargs rm -f
	-echo $(test_grades.all_mhs) | xargs rm -f
	-echo $(test_grades.all_mihs) | xargs rm -f
	-echo $(test_grades.dlls) | xargs rm -f
	-echo $(test_grades.foreign_dlls) | xargs rm -f
	-echo $(test_grades.classes) | xargs rm -f
	-rm -f test_grades$(EXT_FOR_EXE)  test_grades.init libtest_grades.$A libtest_grades.$(EXT_FOR_SHARED_LIB) test_grades.jar test_grades.dep test_grades.dv

