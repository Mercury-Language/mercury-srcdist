-----------------------------------------------------------------------------

BUILDING WITH MINGW

It is possible to build the Mercury compiler using the MinGW version of GCC.
The advantage of using MinGW is that the generated executables will run
natively on Windows without the need for any support environments like Cygwin.

A Unix like environment is however still required to build the Mercury
compiler.  MSYS or Cygwin can be used for this purpose.

-----------------------------------------------------------------------------

BUILDING A MINGW COMPILER UNDER MSYS

To build the source distribution under MSYS follow these steps:

1.  Download and install MinGW and MSYS
    (available from <http://www.mingw.org>).

    To get MinGW just download the Automated MinGW Installer and run it.

    To get a version of MSYS which is capable of installing Mercury is
    slightly more difficult.  The following process works as of 2009-09-30.

    - Run MSYS-1.0.11.exe
    - Run msysDTK-1.0.1.exe
    - Open an MSYS console window
    - cd /
    - tar --lzma -xf bison-2.4.1-1-msys-1.0.11-bin.tar.lzma
    - tar --lzma -xf flex-2.5.35-1-msys-1.0.11-bin.tar.lzma
    - tar --lzma -xf libregex-1.20090805-1-msys-1.0.11-dll-1.tar.lzma

    If bison complains about msys-intl-8.dll being missing then you need to
    also install libintl-*-msys-dll-8.tar.lzma.  This file is part of the MSYS
    gettext package.  It should be installed as above.

2.  Unpack the source distribution with a command like:
    
        tar -xvzf mercury-compiler-<VERSION>.tar.gz

3.  cd into the new directory and run configure:

        ./configure --prefix=c:/mercury

    It is important to specify the installation prefix as a full windows
    path with a drive letter (except use `/' instead of `\').  
    Do not use a path like `/mercury', because that
    will be interpreted differently by the MSYS shell than by the generated
    executables, resulting in a broken installation.  

    If you get a dialog from the "Microsoft Management Console" with the
    message "The selected file cannot be found." simply dismiss it.
    This is because configure looks for a program called "mmc".

4.  run: `make' and then `make install'.

Add /c/mercury/bin (or whatever path you installed Mercury to) to the MSYS
PATH (you cannot add `c:/mercury/bin' to the MSYS PATH because `:' is used to
separate directories in the MSYS PATH).  Make sure Mercury's mmc appears in the
PATH before the Microsoft Management Console.

NOTE TO DEVELOPERS: the tools/bootcheck script does not work properly
on MSYS at the moment -- it will build stage 3, but will not run the tests
correctly.  To run the tests you should first install the compiler and add
it to the PATH.  Next set the DIFF_OPTS environment variable to "-c -b".  This
will cause the test scripts to ignore the extra carriage return character that
gets added to the end of each line under MinGW.  Then run mmake from the tests
directory.

NOTE TO DEVELOPERS: there may be problems with configure scripts generated by
the MinGW/MSYS versions of autoconf.  The script will appear to run correctly
but generates incorrect mercury_conf.h files.  A working version of autoconf
is available here:
    <http://downloads.sourceforge.net/mingw/autoconf2.5-2.61-1-bin.tar.bz2>

-----------------------------------------------------------------------------

BUILDING A CYGWIN COMPILER WHICH TARGETS MINGW

To build a compiler which targets MinGW from Cygwin do the following:

- First, install the Cygwin version of Mercury, and put it in your PATH.
- Second, configure the source distribution of Mercury using
  --with-cc="gcc -mno-cygwin".
- Third, run "make" and "make install".
- Fourth, replace the following files in the installed Mingw Mercury
  directories with copies of the corresponding file from the installed
  Cygwin Mercury directories:
        mercury_compile.exe (in <prefix>/lib/mercury/bin/<config>)
        mercury_profile.exe (in <prefix>/lib/mercury/bin/<config>)
        mdemangle.exe (in <prefix>/bin)
        mfiltercc.exe (in <prefix>/bin)
        mkinit.exe (in <prefix>/bin)

-----------------------------------------------------------------------------
