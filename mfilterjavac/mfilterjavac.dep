ifeq (x,y)

# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated dependencies for module `mfilterjavac'
# generated from source file `mfilterjavac.m'
# Generated by the Mercury compiler, version rotd-2017-07-18
# configured for x86_64-apple-darwin13.4.0.


endif # ifeq(x,y)

# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `mfilterjavac' in source file `mfilterjavac.m'.
# Generated by Mercury compiler version rotd-2017-07-18
# configured for x86_64-apple-darwin13.4.0.

ifeq (x,y)

ifneq ($(EXT_FOR_EXE),)
.PHONY : mfilterjavac
mfilterjavac : mfilterjavac$(EXT_FOR_EXE)
endif

endif # ifeq(x,y)

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: mfilterjavac
mfilterjavac : mfilterjavac$(EXT_FOR_EXE)

endif # conditional fragment

ifeq (x,y)

ifeq ($(findstring java,$(GRADE)),java)
mfilterjavac : $(mfilterjavac.classes)
else
mfilterjavac$(EXT_FOR_EXE) : $(mfilterjavac.os) mfilterjavac_init.$O \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS)) \
		$(foreach @,mfilterjavac,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mfilterjavac$(EXT_FOR_EXE) mfilterjavac_init.$O \
		$(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif

endif # ifeq(x,y)

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
mfilterjavac : $(mfilterjavac.classes)

else

# RULE executable_non_java
mfilterjavac$(EXT_FOR_EXE) : \
		$(mfilterjavac.os) \
		mfilterjavac_init.$O \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS)) \
		$(foreach @,mfilterjavac,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mfilterjavac$(EXT_FOR_EXE) mfilterjavac_init.$O \
		$(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq (x,y)

.PHONY : libmfilterjavac
ifeq ($(findstring java,$(GRADE)),java)
libmfilterjavac : mfilterjavac.jar \
		$(mfilterjavac.ints) $(mfilterjavac.int3s) mfilterjavac.init

else
libmfilterjavac : libmfilterjavac.$A libmfilterjavac.$(EXT_FOR_SHARED_LIB) \
		$(mfilterjavac.ints) $(mfilterjavac.int3s) mfilterjavac.init

endif

endif # ifeq(x,y)

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libmfilterjavac
libmfilterjavac : \
		mfilterjavac.jar \
		$(mfilterjavac.ints) \
		$(mfilterjavac.int3s) \
		mfilterjavac.init

else

# RULE lib_target_non_java
.PHONY: libmfilterjavac
libmfilterjavac : \
		libmfilterjavac.$A \
		libmfilterjavac.$(EXT_FOR_SHARED_LIB) \
		$(mfilterjavac.ints) \
		$(mfilterjavac.int3s) \
		mfilterjavac.init

endif # conditional fragment

ifeq (x,y)

ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmfilterjavac.$(EXT_FOR_SHARED_LIB) : $(mfilterjavac.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mfilterjavac,$(ALL_MLOBJS))) \
		$(foreach @,mfilterjavac,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- -install_name /usr/local/mercury-rotd-2017-07-18/lib/mercury/lib/hlc.gc.pregen/libmfilterjavac.$(EXT_FOR_SHARED_LIB) $(ALL_LD_LIBFLAGS) -o libmfilterjavac.$(EXT_FOR_SHARED_LIB) \
		$(mfilterjavac.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mfilterjavac,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif


endif # ifeq(x,y)

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libmfilterjavac.$(EXT_FOR_SHARED_LIB) : \
		$(mfilterjavac.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mfilterjavac,$(ALL_MLOBJS))) \
		$(foreach @,mfilterjavac,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- -install_name /usr/local/mercury-rotd-2017-07-18/lib/mercury/lib/hlc.gc.pregen/libmfilterjavac.$(EXT_FOR_SHARED_LIB) $(ALL_LD_LIBFLAGS) -o libmfilterjavac.$(EXT_FOR_SHARED_LIB) \
		$(mfilterjavac.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mfilterjavac,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

ifeq (x,y)

libmfilterjavac.$A : $(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS))
	rm -f libmfilterjavac.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmfilterjavac.$A $(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmfilterjavac.$A


endif # ifeq(x,y)

# RULE lib
libmfilterjavac.$A : \
		$(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS))
	rm -f libmfilterjavac.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmfilterjavac.$A $(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmfilterjavac.$A

ifeq (x,y)

mfilterjavac.jar : $(mfilterjavac.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mfilterjavac.jar $(mfilterjavac.classes)


endif # ifeq(x,y)

# RULE jar
mfilterjavac.jar : $(mfilterjavac.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mfilterjavac.jar $(mfilterjavac.classes)

ifeq (x,y)

mfilterjavac.init : mfilterjavac.dep $(mfilterjavac.cs)
	echo > mfilterjavac.init
	$(MKLIBINIT) $(mfilterjavac.cs) >> mfilterjavac.init
	$(EXTRA_INIT_COMMAND) >> mfilterjavac.init


endif # ifeq(x,y)

# RULE init_file
mfilterjavac.init : \
		mfilterjavac.dep \
		$(mfilterjavac.cs)
	echo > mfilterjavac.init
	$(MKLIBINIT) $(mfilterjavac.cs) >> mfilterjavac.init
	$(EXTRA_INIT_COMMAND) >> mfilterjavac.init

ifeq (x,y)

force-mfilterjavac_init :


endif # ifeq(x,y)

# RULE force_init_c_file
force-mfilterjavac_init :

ifeq (x,y)

mfilterjavac_init.c : force-mfilterjavac_init $(mfilterjavac.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mfilterjavac_init.c.tmp $(mfilterjavac.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mfilterjavac_init.c


endif # ifeq(x,y)

# RULE init_c_file
mfilterjavac_init.c : \
		force-mfilterjavac_init \
		$(mfilterjavac.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mfilterjavac_init.c.tmp $(mfilterjavac.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mfilterjavac_init.c

ifeq (x,y)

.PHONY : libmfilterjavac.install_ints
libmfilterjavac.install_ints : $(mfilterjavac.ints) $(mfilterjavac.int3s)  install_lib_dirs
	files="$(mfilterjavac.ints) $(mfilterjavac.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done


endif # ifeq(x,y)

# RULE lib_install_ints
.PHONY: libmfilterjavac.install_ints
libmfilterjavac.install_ints : \
		$(mfilterjavac.ints) \
		$(mfilterjavac.int3s) \
		install_lib_dirs
	files="$(mfilterjavac.ints) $(mfilterjavac.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

ifeq (x,y)

.PHONY : libmfilterjavac.install_opts
libmfilterjavac.install_opts : 
	@:


endif # ifeq(x,y)

# RULE lib_install_opts
.PHONY: libmfilterjavac.install_opts
libmfilterjavac.install_opts :
	@:

ifeq (x,y)

.PHONY : libmfilterjavac.install_hdrs
libmfilterjavac.install_hdrs : $(mfilterjavac.mhs) install_lib_dirs
ifeq ($(mfilterjavac.mhs),)
	@:
else
	for hdr in $(mfilterjavac.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif


endif # ifeq(x,y)

ifeq ($(mfilterjavac.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libmfilterjavac.install_hdrs
libmfilterjavac.install_hdrs : \
		$(mfilterjavac.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libmfilterjavac.install_hdrs
libmfilterjavac.install_hdrs : \
		$(mfilterjavac.mhs) \
		install_lib_dirs
	for hdr in $(mfilterjavac.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq (x,y)

.PHONY : libmfilterjavac.install_grade_hdrs
libmfilterjavac.install_grade_hdrs : $(mfilterjavac.mihs) install_grade_dirs
ifeq ($(mfilterjavac.mihs),)
	@:
else
	for hdr in $(mfilterjavac.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif


endif # ifeq(x,y)

ifeq ($(mfilterjavac.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libmfilterjavac.install_grade_hdrs
libmfilterjavac.install_grade_hdrs : \
		$(mfilterjavac.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libmfilterjavac.install_grade_hdrs
libmfilterjavac.install_grade_hdrs : \
		$(mfilterjavac.mihs) \
		install_grade_dirs
	for hdr in $(mfilterjavac.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

ifeq (x,y)

.PHONY : mfilterjavac.check
mfilterjavac.check : $(mfilterjavac.errs)


endif # ifeq(x,y)

# RULE collective_target_.check.errs
.PHONY: mfilterjavac.check
mfilterjavac.check : $(mfilterjavac.errs)

ifeq (x,y)

.PHONY : mfilterjavac.ints
mfilterjavac.ints : $(mfilterjavac.dates)


endif # ifeq(x,y)

# RULE collective_target_.ints.dates
.PHONY: mfilterjavac.ints
mfilterjavac.ints : $(mfilterjavac.dates)

ifeq (x,y)

.PHONY : mfilterjavac.int3s
mfilterjavac.int3s : $(mfilterjavac.date3s)


endif # ifeq(x,y)

# RULE collective_target_.int3s.date3s
.PHONY: mfilterjavac.int3s
mfilterjavac.int3s : $(mfilterjavac.date3s)

ifeq (x,y)

.PHONY : mfilterjavac.opts
mfilterjavac.opts : $(mfilterjavac.optdates)


endif # ifeq(x,y)

# RULE collective_target_.opts.optdates
.PHONY: mfilterjavac.opts
mfilterjavac.opts : $(mfilterjavac.optdates)

ifeq (x,y)

.PHONY : mfilterjavac.trans_opts
mfilterjavac.trans_opts : $(mfilterjavac.trans_opt_dates)


endif # ifeq(x,y)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: mfilterjavac.trans_opts
mfilterjavac.trans_opts : $(mfilterjavac.trans_opt_dates)

ifeq (x,y)

.PHONY : mfilterjavac.javas
mfilterjavac.javas : $(mfilterjavac.javas)


endif # ifeq(x,y)

# RULE collective_target_.javas.javas
.PHONY: mfilterjavac.javas
mfilterjavac.javas : $(mfilterjavac.javas)

ifeq (x,y)

.PHONY : mfilterjavac.classes
mfilterjavac.classes : $(mfilterjavac.classes)


endif # ifeq(x,y)

# RULE collective_target_.classes.classes
.PHONY: mfilterjavac.classes
mfilterjavac.classes : $(mfilterjavac.classes)

ifeq (x,y)

.PHONY : mfilterjavac.all_ints
mfilterjavac.all_ints : $(mfilterjavac.dates)


endif # ifeq(x,y)

# RULE collective_target_.all_ints.dates
.PHONY: mfilterjavac.all_ints
mfilterjavac.all_ints : $(mfilterjavac.dates)

ifeq (x,y)

.PHONY : mfilterjavac.all_int3s
mfilterjavac.all_int3s : $(mfilterjavac.date3s)


endif # ifeq(x,y)

# RULE collective_target_.all_int3s.date3s
.PHONY: mfilterjavac.all_int3s
mfilterjavac.all_int3s : $(mfilterjavac.date3s)

ifeq (x,y)

.PHONY : mfilterjavac.all_opts
mfilterjavac.all_opts : $(mfilterjavac.optdates)


endif # ifeq(x,y)

# RULE collective_target_.all_opts.optdates
.PHONY: mfilterjavac.all_opts
mfilterjavac.all_opts : $(mfilterjavac.optdates)

ifeq (x,y)

.PHONY : mfilterjavac.all_trans_opts
mfilterjavac.all_trans_opts : $(mfilterjavac.trans_opt_dates)


endif # ifeq(x,y)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: mfilterjavac.all_trans_opts
mfilterjavac.all_trans_opts : $(mfilterjavac.trans_opt_dates)

ifeq (x,y)

clean_local : mfilterjavac.clean
.PHONY : mfilterjavac.clean
mfilterjavac.clean :
	-echo $(mfilterjavac.dirs) | xargs rm -rf 
	-echo $(mfilterjavac.cs) mfilterjavac_init.c | xargs rm -f
	-echo $(mfilterjavac.mihs) | xargs rm -f
	-echo $(mfilterjavac.all_os) mfilterjavac_init.$O | xargs rm -f
	-echo $(mfilterjavac.all_pic_os) mfilterjavac_init.pic_o | xargs rm -f
	-echo $(mfilterjavac.c_dates) | xargs rm -f
	-echo $(mfilterjavac.java_dates) | xargs rm -f
	-echo $(mfilterjavac.useds) | xargs rm -f
	-echo $(mfilterjavac.javas) | xargs rm -f
	-echo $(mfilterjavac.profs) | xargs rm -f
	-echo $(mfilterjavac.errs) | xargs rm -f
	-echo $(mfilterjavac.foreign_cs) | xargs rm -f


endif # ifeq(x,y)

# RULE clean_local
clean_local : mfilterjavac.clean

# RULE clean_target
.PHONY: mfilterjavac.clean
mfilterjavac.clean :
	-echo $(mfilterjavac.dirs) | xargs rm -f
	-echo $(mfilterjavac.cs) | xargs rm -f
	-echo $(mfilterjavac.mihs) | xargs rm -f
	-echo $(mfilterjavac.all_os) | xargs rm -f
	-echo $(mfilterjavac.all_pic_os) | xargs rm -f
	-echo $(mfilterjavac.c_dates) | xargs rm -f
	-echo $(mfilterjavac.java_dates) | xargs rm -f
	-echo $(mfilterjavac.useds) | xargs rm -f
	-echo $(mfilterjavac.javas) | xargs rm -f
	-echo $(mfilterjavac.profs) | xargs rm -f
	-echo $(mfilterjavac.errs) | xargs rm -f
	-echo $(mfilterjavac.foreign_cs) | xargs rm -f
	-rm -f mfilterjavac_init.c mfilterjavac_init.$O mfilterjavac_init.pic_o

ifeq (x,y)

realclean_local : mfilterjavac.realclean
.PHONY : mfilterjavac.realclean
mfilterjavac.realclean : mfilterjavac.clean
	-echo $(mfilterjavac.dates) | xargs rm -f
	-echo $(mfilterjavac.date0s) | xargs rm -f
	-echo $(mfilterjavac.date3s) | xargs rm -f
	-echo $(mfilterjavac.optdates) | xargs rm -f
	-echo $(mfilterjavac.trans_opt_dates) | xargs rm -f
	-echo $(mfilterjavac.ints) | xargs rm -f
	-echo $(mfilterjavac.all_int0s) | xargs rm -f
	-echo $(mfilterjavac.int3s) | xargs rm -f
	-echo $(mfilterjavac.opts) | xargs rm -f
	-echo $(mfilterjavac.trans_opts) | xargs rm -f
	-echo $(mfilterjavac.analysiss) | xargs rm -f
	-echo $(mfilterjavac.requests) | xargs rm -f
	-echo $(mfilterjavac.imdgs) | xargs rm -f
	-echo $(mfilterjavac.ds) | xargs rm -f
	-echo $(mfilterjavac.module_deps) | xargs rm -f
	-echo $(mfilterjavac.all_mhs) | xargs rm -f
	-echo $(mfilterjavac.all_mihs) | xargs rm -f
	-echo $(mfilterjavac.dlls) | xargs rm -f
	-echo $(mfilterjavac.foreign_dlls) | xargs rm -f
	-echo $(mfilterjavac.classes) | xargs rm -f
	-rm -f mfilterjavac$(EXT_FOR_EXE) mfilterjavac.init libmfilterjavac.$A libmfilterjavac.$(EXT_FOR_SHARED_LIB) mfilterjavac.jar mfilterjavac.dep mfilterjavac.dv


endif # ifeq(x,y)

# RULE realclean_local
realclean_local : mfilterjavac.realclean

# RULE realclean_target
.PHONY: mfilterjavac.realclean
mfilterjavac.realclean : mfilterjavac.clean
	-echo $(mfilterjavac.dates) | xargs rm -f
	-echo $(mfilterjavac.date0s) | xargs rm -f
	-echo $(mfilterjavac.date3s) | xargs rm -f
	-echo $(mfilterjavac.optdates) | xargs rm -f
	-echo $(mfilterjavac.trans_opt_dates) | xargs rm -f
	-echo $(mfilterjavac.ints) | xargs rm -f
	-echo $(mfilterjavac.all_int0s) | xargs rm -f
	-echo $(mfilterjavac.int3s) | xargs rm -f
	-echo $(mfilterjavac.opts) | xargs rm -f
	-echo $(mfilterjavac.trans_opts) | xargs rm -f
	-echo $(mfilterjavac.analysiss) | xargs rm -f
	-echo $(mfilterjavac.requests) | xargs rm -f
	-echo $(mfilterjavac.imdgs) | xargs rm -f
	-echo $(mfilterjavac.ds) | xargs rm -f
	-echo $(mfilterjavac.module_deps) | xargs rm -f
	-echo $(mfilterjavac.all_mhs) | xargs rm -f
	-echo $(mfilterjavac.all_mihs) | xargs rm -f
	-echo $(mfilterjavac.dlls) | xargs rm -f
	-echo $(mfilterjavac.foreign_dlls) | xargs rm -f
	-echo $(mfilterjavac.classes) | xargs rm -f
	-rm -f mfilterjavac$(EXT_FOR_EXE)  mfilterjavac.init libmfilterjavac.$A libmfilterjavac.$(EXT_FOR_SHARED_LIB) mfilterjavac.jar mfilterjavac.dep mfilterjavac.dv

ifeq (x,y)


endif # ifeq(x,y)

