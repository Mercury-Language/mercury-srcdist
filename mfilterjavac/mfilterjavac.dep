# Automatically generated dependencies for module `mfilterjavac'
# generated from source file `mfilterjavac.m'
# Generated by the Mercury compiler, version rotd-2015-09-15
# configured for x86_64-apple-darwin13.4.0.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mfilterjavac
mfilterjavac : mfilterjavac$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mfilterjavac : mfilterjavac.exe
mfilterjavac.exe : $(mfilterjavac.dlls) $(mfilterjavac.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mfilterjavac : $(mfilterjavac.classes)
 else
mfilterjavac$(EXT_FOR_EXE) : $(mfilterjavac.cs_or_ss) $(mfilterjavac.os) mfilterjavac_init.$O \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS)) \
		$(foreach @,mfilterjavac,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mfilterjavac$(EXT_FOR_EXE) mfilterjavac_init.$O \
		$(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmfilterjavac
ifeq ($(findstring il,$(GRADE)),il)
libmfilterjavac : $(mfilterjavac.dlls) $(mfilterjavac.foreign_dlls) \
		$(mfilterjavac.ints) $(mfilterjavac.int3s) mfilterjavac.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmfilterjavac : mfilterjavac.jar \
		$(mfilterjavac.ints) $(mfilterjavac.int3s) mfilterjavac.init

 else
libmfilterjavac : libmfilterjavac.$A libmfilterjavac.$(EXT_FOR_SHARED_LIB) \
		$(mfilterjavac.ints) $(mfilterjavac.int3s) mfilterjavac.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmfilterjavac.$(EXT_FOR_SHARED_LIB) : $(mfilterjavac.cs_or_ss) $(mfilterjavac.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mfilterjavac,$(ALL_MLOBJS))) \
		$(foreach @,mfilterjavac,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- -install_name /usr/local/mercury-rotd-2015-09-15/lib/mercury/lib/hlc.gc.pregen/libmfilterjavac.$(EXT_FOR_SHARED_LIB) $(ALL_LD_LIBFLAGS) -o libmfilterjavac.$(EXT_FOR_SHARED_LIB) \
		$(mfilterjavac.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mfilterjavac,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmfilterjavac.$A : $(mfilterjavac.cs_or_ss) $(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS))
	rm -f libmfilterjavac.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmfilterjavac.$A $(mfilterjavac.os) \
		$(foreach @,mfilterjavac,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmfilterjavac.$A

mfilterjavac.jar : $(mfilterjavac.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mfilterjavac.jar $(mfilterjavac.classes)

mfilterjavac.init : mfilterjavac.dep $(mfilterjavac.cs)
	echo > mfilterjavac.init
	$(MKLIBINIT) $(mfilterjavac.cs) >> mfilterjavac.init
	$(EXTRA_INIT_COMMAND) >> mfilterjavac.init
force-mfilterjavac_init :

mfilterjavac_init.c : force-mfilterjavac_init $(mfilterjavac.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mfilterjavac_init.c.tmp $(mfilterjavac.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mfilterjavac_init.c

.PHONY : libmfilterjavac.install_ints
libmfilterjavac.install_ints : $(mfilterjavac.ints) $(mfilterjavac.int3s)  install_lib_dirs
	files="$(mfilterjavac.ints) $(mfilterjavac.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmfilterjavac.install_opts
libmfilterjavac.install_opts : 
	@:

.PHONY : libmfilterjavac.install_hdrs
libmfilterjavac.install_hdrs : $(mfilterjavac.mhs) install_lib_dirs
ifeq ($(mfilterjavac.mhs),)
	@:
else
	for hdr in $(mfilterjavac.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmfilterjavac.install_grade_hdrs
libmfilterjavac.install_grade_hdrs : $(mfilterjavac.mihs) install_grade_dirs
ifeq ($(mfilterjavac.mihs),)
	@:
else
	for hdr in $(mfilterjavac.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mfilterjavac.check
mfilterjavac.check : $(mfilterjavac.errs)

.PHONY : mfilterjavac.ints
mfilterjavac.ints : $(mfilterjavac.dates)

.PHONY : mfilterjavac.int3s
mfilterjavac.int3s : $(mfilterjavac.date3s)

.PHONY : mfilterjavac.opts
mfilterjavac.opts : $(mfilterjavac.optdates)

.PHONY : mfilterjavac.trans_opts
mfilterjavac.trans_opts : $(mfilterjavac.trans_opt_dates)

.PHONY : mfilterjavac.ils
mfilterjavac.ils : $(mfilterjavac.ils)

.PHONY : mfilterjavac.javas
mfilterjavac.javas : $(mfilterjavac.javas)

.PHONY : mfilterjavac.classes
mfilterjavac.classes : $(mfilterjavac.classes)

.PHONY : mfilterjavac.all_ints
mfilterjavac.all_ints : $(mfilterjavac.dates)

.PHONY : mfilterjavac.all_int3s
mfilterjavac.all_int3s : $(mfilterjavac.date3s)

.PHONY : mfilterjavac.all_opts
mfilterjavac.all_opts : $(mfilterjavac.optdates)

.PHONY : mfilterjavac.all_trans_opts
mfilterjavac.all_trans_opts : $(mfilterjavac.trans_opt_dates)

clean_local : mfilterjavac.clean
.PHONY : mfilterjavac.clean
mfilterjavac.clean :
	-echo $(mfilterjavac.dirs) | xargs rm -rf 
	-echo $(mfilterjavac.cs) mfilterjavac_init.c | xargs rm -f
	-echo $(mfilterjavac.mihs) | xargs rm -f
	-echo $(mfilterjavac.all_os) mfilterjavac_init.$O | xargs rm -f
	-echo $(mfilterjavac.all_pic_os) mfilterjavac_init.pic_o | xargs rm -f
	-echo $(mfilterjavac.c_dates) | xargs rm -f
	-echo $(mfilterjavac.il_dates) | xargs rm -f
	-echo $(mfilterjavac.java_dates) | xargs rm -f
	-echo $(mfilterjavac.useds) | xargs rm -f
	-echo $(mfilterjavac.ils) | xargs rm -f
	-echo $(mfilterjavac.javas) | xargs rm -f
	-echo $(mfilterjavac.profs) | xargs rm -f
	-echo $(mfilterjavac.errs) | xargs rm -f
	-echo $(mfilterjavac.foreign_cs) | xargs rm -f

realclean_local : mfilterjavac.realclean
.PHONY : mfilterjavac.realclean
mfilterjavac.realclean : mfilterjavac.clean
	-echo $(mfilterjavac.dates) | xargs rm -f
	-echo $(mfilterjavac.date0s) | xargs rm -f
	-echo $(mfilterjavac.date3s) | xargs rm -f
	-echo $(mfilterjavac.optdates) | xargs rm -f
	-echo $(mfilterjavac.trans_opt_dates) | xargs rm -f
	-echo $(mfilterjavac.ints) | xargs rm -f
	-echo $(mfilterjavac.all_int0s) | xargs rm -f
	-echo $(mfilterjavac.int3s) | xargs rm -f
	-echo $(mfilterjavac.opts) | xargs rm -f
	-echo $(mfilterjavac.trans_opts) | xargs rm -f
	-echo $(mfilterjavac.analysiss) | xargs rm -f
	-echo $(mfilterjavac.requests) | xargs rm -f
	-echo $(mfilterjavac.imdgs) | xargs rm -f
	-echo $(mfilterjavac.ds) | xargs rm -f
	-echo $(mfilterjavac.module_deps) | xargs rm -f
	-echo $(mfilterjavac.all_mhs) | xargs rm -f
	-echo $(mfilterjavac.all_mihs) | xargs rm -f
	-echo $(mfilterjavac.dlls) | xargs rm -f
	-echo $(mfilterjavac.foreign_dlls) | xargs rm -f
	-echo $(mfilterjavac.classes) | xargs rm -f
	-rm -f mfilterjavac$(EXT_FOR_EXE) mfilterjavac.init libmfilterjavac.$A libmfilterjavac.$(EXT_FOR_SHARED_LIB) mfilterjavac.jar mfilterjavac.dep mfilterjavac.dv

