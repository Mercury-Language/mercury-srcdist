:- module var_use_analysis.
:- interface.
:- import_module list.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module profile.
:- import_module report.
:- import_module set.
:- import_module (mdbcomp.program_representation).
:- type cost_until_var_use
	--->	cost_since_proc_start(float)
	;	cost_before_proc_end(float).
:- type var_use_info
	--->	var_use_info((var_use_analysis.vui_cost_until_use) :: var_use_analysis.cost_until_var_use, (var_use_analysis.vui_use_type) :: var_use_analysis.var_use_type).
:- type var_use_type
	--->	var_use_production 
	;	var_use_consumption 
	;	var_use_other .
:- func cost_until_to_cost_before_end(var_use_analysis.cost_until_var_use, float) = float.
:- func cost_until_to_cost_since_start(var_use_analysis.cost_until_var_use, float) = float.
:- pred generic_vars_first_use(pred(list.list(mdbcomp.program_representation.head_var_rep), list.list(mdbcomp.program_representation.var_rep), list.list(var_use_analysis.var_use_type)), profile.deep, profile.proc_static_ptr, set.set(profile.proc_static_ptr), maybe.maybe_error(report.proc_var_use_dump_info)).
:- mode generic_vars_first_use(builtin.in((pred((builtin.in), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred head_vars_all(list.list(mdbcomp.program_representation.head_var_rep), list.list(mdbcomp.program_representation.var_rep), list.list(var_use_analysis.var_use_type)).
:- mode head_vars_all((builtin.in), (builtin.out), (builtin.out)) is det.
:- pred pessimistic_var_use_info(var_use_analysis.var_use_type, var_use_analysis.var_use_info).
:- mode pessimistic_var_use_info((builtin.in), (builtin.out)) is det.
:- pred var_mode_to_var_use(mdbcomp.program_representation.var_mode_rep, var_use_analysis.var_use_type).
:- mode var_mode_to_var_use((builtin.in), (builtin.out)) is det.
