:- module (mdbcomp.feedback).
:- interface.
:- import_module assoc_list.
:- import_module int.
:- import_module io.
:- import_module list.
:- import_module maybe.
:- import_module pair.
:- import_module set.
:- import_module string.
:- import_module (mdbcomp.program_representation).
:- type candidate_par_conjunct
	--->	candidate_par_conjunct(((mdbcomp.feedback).callee) :: maybe.maybe(pair.pair(string, string)), ((mdbcomp.feedback).vars) :: list.list(maybe.maybe(string)), ((mdbcomp.feedback).cost_percall) :: float).
:- type candidate_par_conjunction
	--->	candidate_par_conjunction(((mdbcomp.feedback).goal_path) :: mdbcomp.program_representation.goal_path_string, ((mdbcomp.feedback).par_conjunct_a) :: mdbcomp.feedback.candidate_par_conjunct, ((mdbcomp.feedback).par_conjunct_b) :: mdbcomp.feedback.candidate_par_conjunct, ((mdbcomp.feedback).dependence) :: mdbcomp.feedback.conjuncts_are_dependant, ((mdbcomp.feedback).speedup) :: float).
:- type conjuncts_are_dependant
	--->	conjuncts_are_dependant(((mdbcomp.feedback).dependant_vars) :: set.set(mdbcomp.program_representation.var_rep))
	;	conjuncts_are_independent .
:- type feedback_data
	--->	feedback_data_calls_above_threshold_sorted(((mdbcomp.feedback).threshold) :: int, ((mdbcomp.feedback).stat_measure) :: mdbcomp.feedback.stat_measure, ((mdbcomp.feedback).calls) :: list.list(mdbcomp.program_representation.call_site))
	;	feedback_data_candidate_parallel_conjunctions(((mdbcomp.feedback).desired_parallelism) :: float, ((mdbcomp.feedback).sparking_cost) :: int, ((mdbcomp.feedback).locking_cost) :: int, ((mdbcomp.feedback).conjunctions) :: assoc_list.assoc_list(mdbcomp.program_representation.string_proc_label, mdbcomp.feedback.candidate_par_conjunction)).
:- type feedback_info.
:- type feedback_read_error
	--->	open_error(io.error)
	;	read_error(io.error)
	;	parse_error(((mdbcomp.feedback).message) :: string, ((mdbcomp.feedback).line_no) :: int)
	;	unexpected_eof 
	;	incorrect_version 
	;	incorrect_first_line 
	;	incorrect_program_name .
:- type feedback_write_result
	--->	ok 
	;	open_error(io.error)
	;	write_error(io.error).
:- type stat_measure
	--->	stat_mean 
	;	stat_median .
:- type feedback_read_result(T)
	--->	ok(T)
	;	error(mdbcomp.feedback.feedback_read_error).
:- inst (feedback_data_query) == bound(feedback_data_calls_above_threshold_sorted(free, free, free) ; feedback_data_candidate_parallel_conjunctions(free, free, free, free)).
:- mode (feedback_data_query) == (((mdbcomp.feedback).feedback_data_query) >> ground).
