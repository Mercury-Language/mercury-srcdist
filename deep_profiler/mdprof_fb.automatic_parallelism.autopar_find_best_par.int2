:- module ((mdprof_fb.automatic_parallelism).autopar_find_best_par).
:- interface.
:- type full_parallelisation
    --->    fp_parallel_execution((((mdprof_fb.automatic_parallelism).autopar_find_best_par).fp_goals_before) :: list.list(mdprof_fb.automatic_parallelism.autopar_types.pard_goal_detail), (((mdprof_fb.automatic_parallelism).autopar_find_best_par).fp_par_conjs) :: list.list(mdbcomp.feedback.automatic_parallelism.seq_conj(mdprof_fb.automatic_parallelism.autopar_types.pard_goal_detail)), (((mdprof_fb.automatic_parallelism).autopar_find_best_par).fp_goals_after) :: list.list(mdprof_fb.automatic_parallelism.autopar_types.pard_goal_detail), (((mdprof_fb.automatic_parallelism).autopar_find_best_par).fp_is_dependent) :: mdbcomp.feedback.automatic_parallelism.conjuncts_are_dependent, (((mdprof_fb.automatic_parallelism).autopar_find_best_par).fp_par_exec_metrics) :: mdbcomp.feedback.automatic_parallelism.parallel_exec_metrics).
:- type_representation(full_parallelisation, is_word_aligned_ptr).
:- type_representation(producer_map, is_eqv_to(map.map(mdbcomp.program_representation.var_rep, int))).
