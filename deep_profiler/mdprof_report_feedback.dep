# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `mdprof_report_feedback' in source file `mdprof_report_feedback.m'.
# Generated by Mercury compiler version rotd-2024-01-11
# configured for x86_64-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: mdprof_report_feedback
mdprof_report_feedback : mdprof_report_feedback$(EXT_FOR_EXE)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
mdprof_report_feedback : $(mdprof_report_feedback.classes)

else

# RULE executable_non_java
mdprof_report_feedback$(EXT_FOR_EXE) : \
		$(mdprof_report_feedback.all_os) \
		mdprof_report_feedback_init.$O \
		$(foreach @,mdprof_report_feedback,$(ALL_MLOBJS)) \
		$(foreach @,mdprof_report_feedback,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mdprof_report_feedback$(EXT_FOR_EXE) mdprof_report_feedback_init.$O \
		$(mdprof_report_feedback.all_os) \
		$(foreach @,mdprof_report_feedback,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libmdprof_report_feedback
libmdprof_report_feedback : \
		mdprof_report_feedback.jar \
		$(mdprof_report_feedback.ints) \
		$(mdprof_report_feedback.int3s) \
		mdprof_report_feedback.init

else

# RULE lib_target_non_java
.PHONY: libmdprof_report_feedback
libmdprof_report_feedback : \
		libmdprof_report_feedback.$A \
		libmdprof_report_feedback.$(EXT_FOR_SHARED_LIB) \
		$(mdprof_report_feedback.ints) \
		$(mdprof_report_feedback.int3s) \
		mdprof_report_feedback.init

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libmdprof_report_feedback.$(EXT_FOR_SHARED_LIB) : \
		$(mdprof_report_feedback.all_pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mdprof_report_feedback,$(ALL_MLOBJS))) \
		$(foreach @,mdprof_report_feedback,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmdprof_report_feedback.$(EXT_FOR_SHARED_LIB) \
		$(mdprof_report_feedback.all_pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mdprof_report_feedback,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

# RULE lib
libmdprof_report_feedback.$A : \
		$(mdprof_report_feedback.all_os) \
		$(foreach @,mdprof_report_feedback,$(ALL_MLOBJS))
	rm -f libmdprof_report_feedback.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmdprof_report_feedback.$A $(mdprof_report_feedback.all_os) \
		$(foreach @,mdprof_report_feedback,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmdprof_report_feedback.$A

# RULE jar
mdprof_report_feedback.jar : $(mdprof_report_feedback.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mdprof_report_feedback.jar $(mdprof_report_feedback.classes)

# RULE init_file
mdprof_report_feedback.init : \
		mdprof_report_feedback.dep \
		$(mdprof_report_feedback.all_cs)
	echo > mdprof_report_feedback.init
	$(MKLIBINIT) $(mdprof_report_feedback.all_cs) >> mdprof_report_feedback.init
	$(EXTRA_INIT_COMMAND) >> mdprof_report_feedback.init

# RULE force_init_c_file
force-mdprof_report_feedback_init :

# RULE init_c_file
mdprof_report_feedback_init.c : \
		force-mdprof_report_feedback_init \
		$(mdprof_report_feedback.all_cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mdprof_report_feedback_init.c.tmp $(mdprof_report_feedback.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mdprof_report_feedback_init.c

# RULE lib_install_ints
.PHONY: libmdprof_report_feedback.install_ints
libmdprof_report_feedback.install_ints : \
		$(mdprof_report_feedback.ints) \
		$(mdprof_report_feedback.int3s) \
		$(mdprof_report_feedback.int0s) \
		install_lib_dirs
	files="$(mdprof_report_feedback.ints) $(mdprof_report_feedback.int3s) $(mdprof_report_feedback.int0s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 int0; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

# RULE lib_install_opts
.PHONY: libmdprof_report_feedback.install_opts
libmdprof_report_feedback.install_opts :
	@:

ifeq ($(mdprof_report_feedback.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libmdprof_report_feedback.install_hdrs
libmdprof_report_feedback.install_hdrs : \
		$(mdprof_report_feedback.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libmdprof_report_feedback.install_hdrs
libmdprof_report_feedback.install_hdrs : \
		$(mdprof_report_feedback.mhs) \
		install_lib_dirs
	for hdr in $(mdprof_report_feedback.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq ($(mdprof_report_feedback.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libmdprof_report_feedback.install_grade_hdrs
libmdprof_report_feedback.install_grade_hdrs : \
		$(mdprof_report_feedback.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libmdprof_report_feedback.install_grade_hdrs
libmdprof_report_feedback.install_grade_hdrs : \
		$(mdprof_report_feedback.mihs) \
		install_grade_dirs
	for hdr in $(mdprof_report_feedback.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

# RULE collective_target_.check.errs
.PHONY: mdprof_report_feedback.check
mdprof_report_feedback.check : $(mdprof_report_feedback.errs)

# RULE collective_target_.ints.dates
.PHONY: mdprof_report_feedback.ints
mdprof_report_feedback.ints : $(mdprof_report_feedback.dates)

# RULE collective_target_.int3s.date3s
.PHONY: mdprof_report_feedback.int3s
mdprof_report_feedback.int3s : $(mdprof_report_feedback.date3s)

# RULE collective_target_.opts.optdates
.PHONY: mdprof_report_feedback.opts
mdprof_report_feedback.opts : $(mdprof_report_feedback.optdates)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: mdprof_report_feedback.trans_opts
mdprof_report_feedback.trans_opts : $(mdprof_report_feedback.trans_opt_dates)

# RULE collective_target_.javas.all_javas
.PHONY: mdprof_report_feedback.javas
mdprof_report_feedback.javas : $(mdprof_report_feedback.all_javas)

# RULE collective_target_.classes.classes
.PHONY: mdprof_report_feedback.classes
mdprof_report_feedback.classes : $(mdprof_report_feedback.classes)

# RULE collective_target_.all_ints.dates
.PHONY: mdprof_report_feedback.all_ints
mdprof_report_feedback.all_ints : $(mdprof_report_feedback.dates)

# RULE collective_target_.all_int3s.date3s
.PHONY: mdprof_report_feedback.all_int3s
mdprof_report_feedback.all_int3s : $(mdprof_report_feedback.date3s)

# RULE collective_target_.all_opts.optdates
.PHONY: mdprof_report_feedback.all_opts
mdprof_report_feedback.all_opts : $(mdprof_report_feedback.optdates)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: mdprof_report_feedback.all_trans_opts
mdprof_report_feedback.all_trans_opts : $(mdprof_report_feedback.trans_opt_dates)

# RULE clean_local
clean_local : mdprof_report_feedback.clean

# RULE clean_target
.PHONY: mdprof_report_feedback.clean
mdprof_report_feedback.clean :
	-echo $(mdprof_report_feedback.dirs) | xargs rm -f
	-echo $(mdprof_report_feedback.all_cs) | xargs rm -f
	-echo $(mdprof_report_feedback.mihs) | xargs rm -f
	-echo $(mdprof_report_feedback.all_os) | xargs rm -f
	-echo $(mdprof_report_feedback.all_pic_os) | xargs rm -f
	-echo $(mdprof_report_feedback.c_dates) | xargs rm -f
	-echo $(mdprof_report_feedback.java_dates) | xargs rm -f
	-echo $(mdprof_report_feedback.useds) | xargs rm -f
	-echo $(mdprof_report_feedback.all_javas) | xargs rm -f
	-echo $(mdprof_report_feedback.profs) | xargs rm -f
	-echo $(mdprof_report_feedback.dep_errs) | xargs rm -f
	-echo $(mdprof_report_feedback.errs) | xargs rm -f
	-echo $(mdprof_report_feedback.foreign_cs) | xargs rm -f
	-rm -f mdprof_report_feedback_init.c mdprof_report_feedback_init.$O mdprof_report_feedback_init.pic_o

# RULE realclean_local
realclean_local : mdprof_report_feedback.realclean

# RULE realclean_target
.PHONY: mdprof_report_feedback.realclean
mdprof_report_feedback.realclean : mdprof_report_feedback.clean
	-echo $(mdprof_report_feedback.dates) | xargs rm -f
	-echo $(mdprof_report_feedback.date0s) | xargs rm -f
	-echo $(mdprof_report_feedback.date3s) | xargs rm -f
	-echo $(mdprof_report_feedback.optdates) | xargs rm -f
	-echo $(mdprof_report_feedback.trans_opt_dates) | xargs rm -f
	-echo $(mdprof_report_feedback.ints) | xargs rm -f
	-echo $(mdprof_report_feedback.int0s_to_clean) | xargs rm -f
	-echo $(mdprof_report_feedback.int3s) | xargs rm -f
	-echo $(mdprof_report_feedback.opts) | xargs rm -f
	-echo $(mdprof_report_feedback.trans_opts) | xargs rm -f
	-echo $(mdprof_report_feedback.analyses) | xargs rm -f
	-echo $(mdprof_report_feedback.requests) | xargs rm -f
	-echo $(mdprof_report_feedback.imdgs) | xargs rm -f
	-echo $(mdprof_report_feedback.ds) | xargs rm -f
	-echo $(mdprof_report_feedback.module_deps) | xargs rm -f
	-echo $(mdprof_report_feedback.mhs_to_clean) | xargs rm -f
	-echo $(mdprof_report_feedback.mihs_to_clean) | xargs rm -f
	-echo $(mdprof_report_feedback.dlls) | xargs rm -f
	-echo $(mdprof_report_feedback.foreign_dlls) | xargs rm -f
	-echo $(mdprof_report_feedback.classes) | xargs rm -f
	-rm -f mdprof_report_feedback$(EXT_FOR_EXE)  mdprof_report_feedback.init libmdprof_report_feedback.$A libmdprof_report_feedback.$(EXT_FOR_SHARED_LIB) mdprof_report_feedback.jar mdprof_report_feedback.dep mdprof_report_feedback.dv

