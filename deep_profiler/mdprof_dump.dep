# Automatically generated dependencies for module `mdprof_dump'
# generated from source file `mdprof_dump.m'
# Generated by the Mercury compiler, version rotd-2009-12-12, configured for i686-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mdprof_dump
mdprof_dump : mdprof_dump$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mdprof_dump : mdprof_dump.exe
mdprof_dump.exe : $(mdprof_dump.dlls) $(mdprof_dump.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mdprof_dump : $(mdprof_dump.classes)
 else
mdprof_dump$(EXT_FOR_EXE) : $(mdprof_dump.cs_or_ss) $(mdprof_dump.os) mdprof_dump_init.$O \
		$(foreach @,mdprof_dump,$(ALL_MLOBJS)) \
		$(foreach @,mdprof_dump,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) -o mdprof_dump$(EXT_FOR_EXE) mdprof_dump_init.$O \
		$(mdprof_dump.os) \
		$(foreach @,mdprof_dump,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmdprof_dump
ifeq ($(findstring il,$(GRADE)),il)
libmdprof_dump : $(mdprof_dump.dlls) $(mdprof_dump.foreign_dlls) \
		$(mdprof_dump.ints) $(mdprof_dump.int3s) mdprof_dump.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmdprof_dump : mdprof_dump.jar \
		$(mdprof_dump.ints) $(mdprof_dump.int3s) mdprof_dump.init

 else
libmdprof_dump : libmdprof_dump.$A libmdprof_dump.$(EXT_FOR_SHARED_LIB) \
		$(mdprof_dump.ints) $(mdprof_dump.int3s) mdprof_dump.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmdprof_dump.$(EXT_FOR_SHARED_LIB) : $(mdprof_dump.cs_or_ss) $(mdprof_dump.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mdprof_dump,$(ALL_MLOBJS))) \
		$(foreach @,mdprof_dump,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmdprof_dump.$(EXT_FOR_SHARED_LIB) \
		$(mdprof_dump.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mdprof_dump,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmdprof_dump.$A : $(mdprof_dump.cs_or_ss) $(mdprof_dump.os) \
		$(foreach @,mdprof_dump,$(ALL_MLOBJS))
	rm -f libmdprof_dump.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmdprof_dump.$A $(mdprof_dump.os) \
		$(foreach @,mdprof_dump,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmdprof_dump.$A

mdprof_dump.jar : $(mdprof_dump.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mdprof_dump.jar $(mdprof_dump.classes)

mdprof_dump.init : mdprof_dump.dep $(mdprof_dump.cs)
	echo > mdprof_dump.init
	$(MKLIBINIT) $(mdprof_dump.cs) >> mdprof_dump.init
	$(EXTRA_INIT_COMMAND) >> mdprof_dump.init
force-mdprof_dump_init :

mdprof_dump_init.c : force-mdprof_dump_init $(mdprof_dump.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mdprof_dump_init.c.tmp $(mdprof_dump.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mdprof_dump_init.c

.PHONY : libmdprof_dump.install_ints
libmdprof_dump.install_ints : $(mdprof_dump.ints) $(mdprof_dump.int3s)  install_lib_dirs
	files="$(mdprof_dump.ints) $(mdprof_dump.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmdprof_dump.install_opts
libmdprof_dump.install_opts : 
	@:

.PHONY : libmdprof_dump.install_hdrs
libmdprof_dump.install_hdrs : $(mdprof_dump.mhs) install_lib_dirs
ifeq ($(mdprof_dump.mhs),)
	@:
else
	for hdr in $(mdprof_dump.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmdprof_dump.install_grade_hdrs
libmdprof_dump.install_grade_hdrs : $(mdprof_dump.mihs) install_grade_dirs
ifeq ($(mdprof_dump.mihs),)
	@:
else
	for hdr in $(mdprof_dump.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mdprof_dump.check
mdprof_dump.check : $(mdprof_dump.errs)

.PHONY : mdprof_dump.ints
mdprof_dump.ints : $(mdprof_dump.dates)

.PHONY : mdprof_dump.int3s
mdprof_dump.int3s : $(mdprof_dump.date3s)

.PHONY : mdprof_dump.opts
mdprof_dump.opts : $(mdprof_dump.optdates)

.PHONY : mdprof_dump.trans_opts
mdprof_dump.trans_opts : $(mdprof_dump.trans_opt_dates)

.PHONY : mdprof_dump.ss
mdprof_dump.ss : $(mdprof_dump.ss)

.PHONY : mdprof_dump.pic_ss
mdprof_dump.pic_ss : $(mdprof_dump.pic_ss)

.PHONY : mdprof_dump.ils
mdprof_dump.ils : $(mdprof_dump.ils)

.PHONY : mdprof_dump.javas
mdprof_dump.javas : $(mdprof_dump.javas)

.PHONY : mdprof_dump.classes
mdprof_dump.classes : $(mdprof_dump.classes)

clean_local : mdprof_dump.clean
.PHONY : mdprof_dump.clean
mdprof_dump.clean :
	-echo $(mdprof_dump.dirs) | xargs rm -rf 
	-echo $(mdprof_dump.cs) mdprof_dump_init.c | xargs rm -f
	-echo $(mdprof_dump.mihs) | xargs rm -f
	-echo $(mdprof_dump.all_ss) mdprof_dump_init.s | xargs rm -f
	-echo $(mdprof_dump.all_pic_ss) mdprof_dump_init.s | xargs rm -f
	-echo $(mdprof_dump.all_os) mdprof_dump_init.$O | xargs rm -f
	-echo $(mdprof_dump.all_pic_os) mdprof_dump_init.pic_o | xargs rm -f
	-echo $(mdprof_dump.c_dates) | xargs rm -f
	-echo $(mdprof_dump.il_dates) | xargs rm -f
	-echo $(mdprof_dump.java_dates) | xargs rm -f
	-echo $(mdprof_dump.all_s_dates) | xargs rm -f
	-echo $(mdprof_dump.all_pic_s_dates) | xargs rm -f
	-echo $(mdprof_dump.useds) | xargs rm -f
	-echo $(mdprof_dump.ils) | xargs rm -f
	-echo $(mdprof_dump.javas) | xargs rm -f
	-echo $(mdprof_dump.profs) | xargs rm -f
	-echo $(mdprof_dump.errs) | xargs rm -f
	-echo $(mdprof_dump.foreign_cs) | xargs rm -f

realclean_local : mdprof_dump.realclean
.PHONY : mdprof_dump.realclean
mdprof_dump.realclean : mdprof_dump.clean
	-echo $(mdprof_dump.dates) | xargs rm -f
	-echo $(mdprof_dump.date0s) | xargs rm -f
	-echo $(mdprof_dump.date3s) | xargs rm -f
	-echo $(mdprof_dump.optdates) | xargs rm -f
	-echo $(mdprof_dump.trans_opt_dates) | xargs rm -f
	-echo $(mdprof_dump.ints) | xargs rm -f
	-echo $(mdprof_dump.all_int0s) | xargs rm -f
	-echo $(mdprof_dump.int3s) | xargs rm -f
	-echo $(mdprof_dump.opts) | xargs rm -f
	-echo $(mdprof_dump.trans_opts) | xargs rm -f
	-echo $(mdprof_dump.analysiss) | xargs rm -f
	-echo $(mdprof_dump.requests) | xargs rm -f
	-echo $(mdprof_dump.imdgs) | xargs rm -f
	-echo $(mdprof_dump.ds) | xargs rm -f
	-echo $(mdprof_dump.module_deps) | xargs rm -f
	-echo $(mdprof_dump.all_mhs) | xargs rm -f
	-echo $(mdprof_dump.all_mihs) | xargs rm -f
	-echo $(mdprof_dump.dlls) | xargs rm -f
	-echo $(mdprof_dump.foreign_dlls) | xargs rm -f
	-echo $(mdprof_dump.classes) | xargs rm -f
	-rm -f mdprof_dump$(EXT_FOR_EXE) mdprof_dump.init libmdprof_dump.$A libmdprof_dump.$(EXT_FOR_SHARED_LIB) mdprof_dump.jar mdprof_dump.dep mdprof_dump.dv

