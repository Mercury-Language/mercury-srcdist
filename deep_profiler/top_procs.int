:- module top_procs.
:- interface.
:- use_module list.
:- use_module maybe.
:- use_module measurements.
:- use_module profile.
:- use_module query.
:- type line_group(FL, LL)
    --->    line_group(top_procs.group_filename :: string, top_procs.group_linenumber :: int, top_procs.group_name :: string, top_procs.group_own :: measurements.own_prof_info, top_procs.group_desc :: measurements.inherit_prof_info, top_procs.group_first_line_id :: string, top_procs.group_later_lines :: LL).
:- func find_top_procs(query.cost_kind, query.include_descendants, query.measurement_scope, query.display_limit, profile.deep) = maybe.maybe_error(list.list(int)).
:- func sort_line_groups(query.order_criteria, list.list(top_procs.line_group(FL, LL))) = list.list(top_procs.line_group(FL, LL)).
:- pred sum_line_group_measurements(list.list(top_procs.line_group(FL, LL)), measurements.own_prof_info, measurements.inherit_prof_info).
:- mode sum_line_group_measurements(builtin.in, builtin.out, builtin.out) is det.
