/*
** Automatically generated from `autopar_types.m'
** by the Mercury compiler,
** version rotd-2024-08-07
** configured for x86_64-pc-linux-gnu.
** Do not edit.
**
** The autoconfigured grade settings governing
** the generation of this C file were
**
** TAG_BITS=2
** UNBOXED_FLOAT=no
** UNBOXED_INT64S=no
** PREGENERATED_DIST=yes
** HIGHLEVEL_CODE=yes
**
** END_OF_C_GRADE_INFO
*/


// :- module mdprof_fb.automatic_parallelism.autopar_types.
// :- interface.

#ifndef MR_HEADER_GUARD_mdprof_fb__automatic_parallelism__autopar_types
#define MR_HEADER_GUARD_mdprof_fb__automatic_parallelism__autopar_types

#ifdef __cplusplus
extern "C" {
#endif

#include "mercury.h"


#ifndef MDPROF_FB__AUTOMATIC_PARALLELISM__AUTOPAR_TYPES_DECL_GUARD
#define MDPROF_FB__AUTOMATIC_PARALLELISM__AUTOPAR_TYPES_DECL_GUARD
#include "mdprof_fb.mih"
#include "mdprof_fb.automatic_parallelism.mih"

#endif



extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_candidate_par_conjunctions_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_dependency_graphs_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_dependent_conjunct_execution_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_implicit_parallelism_info_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_incomplete_parallelisation_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_inst_map_info_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_is_costly_goal_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_lazy_var_use_map_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_parallel_execution_overlap_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_parallelisation_cost_data_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_pard_goal_detail_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_pard_goal_detail_annotation_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_pard_goal_type_0;

extern const MR_TypeCtorInfo_Struct mdprof_fb__automatic_parallelism__autopar_types__mdprof_fb__automatic_parallelism__autopar_types__type_ctor_info_var_and_mode_0;

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__conj_produced_and_consumed_vars_5_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3,
  MR_Word param_4,
  MR_Word * param_5);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__identify_costly_goal_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__identify_costly_goals_3_p_0(
  MR_Word param_1,
  MR_Integer param_2,
  MR_Word * param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__pard_goal_detail_to_pard_goal_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

MR_Word MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_calc_sharedvars_set_1_f_0(
  MR_Word param_1);

MR_Word MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_get_goals_after_1_f_0(
  MR_Word param_1);

MR_Word MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_get_goals_before_1_f_0(
  MR_Word param_1);

MR_Integer MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_get_num_goals_1_f_0(
  MR_Word param_1);

MR_Integer MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_get_num_goals_middle_1_f_0(
  MR_Word param_1);

MR_Integer MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_get_num_parallel_conjuncts_1_f_0(
  MR_Word param_1);

MR_Word MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types__ip_get_par_conjs_1_f_0(
  MR_Word param_1);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____candidate_par_conjunctions_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____dependency_graphs_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____dependent_conjunct_execution_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____implicit_parallelism_info_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____incomplete_parallelisation_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____inst_map_info_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____is_costly_goal_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____lazy_var_use_map_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____parallel_execution_overlap_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____parallelisation_cost_data_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____pard_goal_detail_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____pard_goal_detail_annotation_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____pard_goal_type_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Compare____var_and_mode_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____candidate_par_conjunctions_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____dependency_graphs_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____dependent_conjunct_execution_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____implicit_parallelism_info_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____incomplete_parallelisation_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____inst_map_info_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____is_costly_goal_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____lazy_var_use_map_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____parallel_execution_overlap_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____parallelisation_cost_data_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____pard_goal_detail_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____pard_goal_detail_annotation_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____pard_goal_type_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
mdprof_fb__automatic_parallelism__autopar_types____Unify____var_and_mode_0_0(
  MR_Word param_1,
  MR_Word param_2);

void mercury__mdprof_fb__automatic_parallelism__autopar_types__init(void);
void mercury__mdprof_fb__automatic_parallelism__autopar_types__init_type_tables(void);
void mercury__mdprof_fb__automatic_parallelism__autopar_types__init_debugger(void);
const char *mercury__mdprof_fb__automatic_parallelism__autopar_types__grade_check(void);

#ifdef __cplusplus
}
#endif

#endif // MR_HEADER_GUARD_mdprof_fb.automatic_parallelism.autopar_types

// :- end_interface mdprof_fb.automatic_parallelism.autopar_types.
