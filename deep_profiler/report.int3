:- module report.
:- interface.
:- import_module coverage.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module measurement_units.
:- import_module profile.
:- import_module query.
:- import_module set.
:- import_module unit.
:- import_module var_use_analysis.
:- import_module (mdbcomp.goal_path).
:- import_module (mdbcomp.program_representation).
:- type ancestor_desc.
:- type call_site_desc.
:- type call_site_dynamic_dump_info.
:- type call_site_dynamic_var_use_info.
:- type call_site_perf.
:- type call_site_static_dump_info.
:- type callers_counts.
:- type clique_call_site_report.
:- type clique_desc.
:- type clique_dump_info.
:- type clique_proc_dynamic_report.
:- type clique_proc_report.
:- type clique_recursion_report.
:- type clique_report.
:- type data_struct_name.
:- type deep_report.
:- type field_name.
:- type getter_or_setter
	where	type_is_abstract_enum(1).
:- type gs_ds_map.
:- type gs_ds_map(T).
:- type gs_field_info.
:- type gs_field_info(I, S).
:- type gs_field_map.
:- type gs_field_map(T).
:- type inheritable_perf.
:- type maybe_have_module_rep
	where	type_is_abstract_enum(1).
:- type menu_report.
:- type message_report.
:- type module_active.
:- type module_getter_setters_report.
:- type module_is_active
	where	type_is_abstract_enum(1).
:- type module_rep_report.
:- type module_report.
:- type normal_callee_id.
:- type perf_row_data(T).
:- type proc_active.
:- type proc_callers.
:- type proc_callers_report.
:- type proc_desc.
:- type proc_dynamic_dump_info.
:- type proc_is_active
	where	type_is_abstract_enum(1).
:- type proc_report.
:- type proc_static_dump_info.
:- type procrep_coverage_info.
:- type program_modules_report.
:- type recursion_level_report.
:- type recursion_type.
:- type recursion_type_freq_data.
:- type recursion_type_histogram.
:- type recursion_type_proc_freq_data.
:- type recursion_type_proc_map.
:- type recursion_type_simple.
:- type recursion_types_frequency_report.
:- type report_ordering.
:- type top_procs_report.
:- type var_use_and_name.
:- inst (recursion_type_known_costs) == bound(rt_not_recursive ; rt_single(ground, ground, ground, ground, ground)).
:- inst (recursion_type_unknown_costs) == bound(rt_divide_and_conquer(ground, ground) ; rt_errors(ground) ; rt_mutual_recursion(ground) ; rt_other(ground)).
