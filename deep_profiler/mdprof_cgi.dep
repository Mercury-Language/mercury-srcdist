# Automatically generated dependencies for module `mdprof_cgi'
# generated from source file `mdprof_cgi.m'
# Generated by the Mercury compiler, version rotd-2007-06-30, configured for i686-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mdprof_cgi
mdprof_cgi : mdprof_cgi$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mdprof_cgi : mdprof_cgi.exe
mdprof_cgi.exe : $(mdprof_cgi.dlls) $(mdprof_cgi.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mdprof_cgi : $(mdprof_cgi.classes)
 else
mdprof_cgi$(EXT_FOR_EXE) : $(mdprof_cgi.cs_or_ss) $(mdprof_cgi.os) mdprof_cgi_init.$O \
		$(foreach @,mdprof_cgi,$(ALL_MLOBJS)) \
		$(foreach @,mdprof_cgi,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) -o mdprof_cgi$(EXT_FOR_EXE) mdprof_cgi_init.$O \
		$(mdprof_cgi.os) \
		$(foreach @,mdprof_cgi,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmdprof_cgi
ifeq ($(findstring il,$(GRADE)),il)
libmdprof_cgi : $(mdprof_cgi.dlls) $(mdprof_cgi.foreign_dlls) \
		$(mdprof_cgi.ints) $(mdprof_cgi.int3s) mdprof_cgi.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmdprof_cgi : mdprof_cgi.jar \
		$(mdprof_cgi.ints) $(mdprof_cgi.int3s) mdprof_cgi.init

 else
libmdprof_cgi : libmdprof_cgi.$A libmdprof_cgi.$(EXT_FOR_SHARED_LIB) \
		$(mdprof_cgi.ints) $(mdprof_cgi.int3s) mdprof_cgi.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmdprof_cgi.$(EXT_FOR_SHARED_LIB) : $(mdprof_cgi.cs_or_ss) $(mdprof_cgi.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mdprof_cgi,$(ALL_MLOBJS))) \
		$(foreach @,mdprof_cgi,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmdprof_cgi.$(EXT_FOR_SHARED_LIB) \
		$(mdprof_cgi.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mdprof_cgi,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmdprof_cgi.$A : $(mdprof_cgi.cs_or_ss) $(mdprof_cgi.os) \
		$(foreach @,mdprof_cgi,$(ALL_MLOBJS))
	rm -f libmdprof_cgi.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmdprof_cgi.$A $(mdprof_cgi.os) \
		$(foreach @,mdprof_cgi,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmdprof_cgi.$A

mdprof_cgi.jar : $(mdprof_cgi.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mdprof_cgi.jar $(mdprof_cgi.classes)

mdprof_cgi.init : mdprof_cgi.dep $(mdprof_cgi.cs)
	echo > mdprof_cgi.init
	$(MKLIBINIT) $(mdprof_cgi.cs) >> mdprof_cgi.init
	$(EXTRA_INIT_COMMAND) >> mdprof_cgi.init
force-mdprof_cgi_init :

mdprof_cgi_init.c : force-mdprof_cgi_init $(mdprof_cgi.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mdprof_cgi_init.c.tmp $(mdprof_cgi.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mdprof_cgi_init.c

.PHONY : libmdprof_cgi.install_ints
libmdprof_cgi.install_ints : $(mdprof_cgi.ints) $(mdprof_cgi.int3s)  install_lib_dirs
	files="$(mdprof_cgi.ints) $(mdprof_cgi.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmdprof_cgi.install_opts
libmdprof_cgi.install_opts : 
	@:

.PHONY : libmdprof_cgi.install_hdrs
libmdprof_cgi.install_hdrs : $(mdprof_cgi.mhs) install_lib_dirs
ifeq ($(mdprof_cgi.mhs),)
	@:
else
	for hdr in $(mdprof_cgi.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmdprof_cgi.install_grade_hdrs
libmdprof_cgi.install_grade_hdrs : $(mdprof_cgi.mihs) install_grade_dirs
ifeq ($(mdprof_cgi.mihs),)
	@:
else
	for hdr in $(mdprof_cgi.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mdprof_cgi.check
mdprof_cgi.check : $(mdprof_cgi.errs)

.PHONY : mdprof_cgi.ints
mdprof_cgi.ints : $(mdprof_cgi.dates)

.PHONY : mdprof_cgi.int3s
mdprof_cgi.int3s : $(mdprof_cgi.date3s)

.PHONY : mdprof_cgi.opts
mdprof_cgi.opts : $(mdprof_cgi.optdates)

.PHONY : mdprof_cgi.trans_opts
mdprof_cgi.trans_opts : $(mdprof_cgi.trans_opt_dates)

.PHONY : mdprof_cgi.ss
mdprof_cgi.ss : $(mdprof_cgi.ss)

.PHONY : mdprof_cgi.pic_ss
mdprof_cgi.pic_ss : $(mdprof_cgi.pic_ss)

.PHONY : mdprof_cgi.ils
mdprof_cgi.ils : $(mdprof_cgi.ils)

.PHONY : mdprof_cgi.javas
mdprof_cgi.javas : $(mdprof_cgi.javas)

.PHONY : mdprof_cgi.classes
mdprof_cgi.classes : $(mdprof_cgi.classes)

clean_local : mdprof_cgi.clean
.PHONY : mdprof_cgi.clean
mdprof_cgi.clean :
	-echo $(mdprof_cgi.dirs) | xargs rm -rf 
	-echo $(mdprof_cgi.cs) mdprof_cgi_init.c | xargs rm -f
	-echo $(mdprof_cgi.mihs) | xargs rm -f
	-echo $(mdprof_cgi.all_ss) mdprof_cgi_init.s | xargs rm -f
	-echo $(mdprof_cgi.all_pic_ss) mdprof_cgi_init.s | xargs rm -f
	-echo $(mdprof_cgi.all_os) mdprof_cgi_init.$O | xargs rm -f
	-echo $(mdprof_cgi.all_pic_os) mdprof_cgi_init.pic_o | xargs rm -f
	-echo $(mdprof_cgi.c_dates) | xargs rm -f
	-echo $(mdprof_cgi.il_dates) | xargs rm -f
	-echo $(mdprof_cgi.java_dates) | xargs rm -f
	-echo $(mdprof_cgi.all_s_dates) | xargs rm -f
	-echo $(mdprof_cgi.all_pic_s_dates) | xargs rm -f
	-echo $(mdprof_cgi.useds) | xargs rm -f
	-echo $(mdprof_cgi.ils) | xargs rm -f
	-echo $(mdprof_cgi.javas) | xargs rm -f
	-echo $(mdprof_cgi.profs) | xargs rm -f
	-echo $(mdprof_cgi.errs) | xargs rm -f
	-echo $(mdprof_cgi.foreign_cs) | xargs rm -f

realclean_local : mdprof_cgi.realclean
.PHONY : mdprof_cgi.realclean
mdprof_cgi.realclean : mdprof_cgi.clean
	-echo $(mdprof_cgi.dates) | xargs rm -f
	-echo $(mdprof_cgi.date0s) | xargs rm -f
	-echo $(mdprof_cgi.date3s) | xargs rm -f
	-echo $(mdprof_cgi.optdates) | xargs rm -f
	-echo $(mdprof_cgi.trans_opt_dates) | xargs rm -f
	-echo $(mdprof_cgi.ints) | xargs rm -f
	-echo $(mdprof_cgi.all_int0s) | xargs rm -f
	-echo $(mdprof_cgi.int3s) | xargs rm -f
	-echo $(mdprof_cgi.opts) | xargs rm -f
	-echo $(mdprof_cgi.trans_opts) | xargs rm -f
	-echo $(mdprof_cgi.analysiss) | xargs rm -f
	-echo $(mdprof_cgi.requests) | xargs rm -f
	-echo $(mdprof_cgi.imdgs) | xargs rm -f
	-echo $(mdprof_cgi.ds) | xargs rm -f
	-echo $(mdprof_cgi.module_deps) | xargs rm -f
	-echo $(mdprof_cgi.all_mhs) | xargs rm -f
	-echo $(mdprof_cgi.all_mihs) | xargs rm -f
	-echo $(mdprof_cgi.dlls) | xargs rm -f
	-echo $(mdprof_cgi.foreign_dlls) | xargs rm -f
	-echo $(mdprof_cgi.classes) | xargs rm -f
	-rm -f mdprof_cgi$(EXT_FOR_EXE) mdprof_cgi.init libmdprof_cgi.$A libmdprof_cgi.$(EXT_FOR_SHARED_LIB) mdprof_cgi.jar mdprof_cgi.dep mdprof_cgi.dv

