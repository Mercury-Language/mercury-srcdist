# Automatically generated dependencies for module `mer_ssdb'
# generated from source file `mer_ssdb.m'
# Generated by the Mercury compiler, version rotd-2015-01-28
# configured for x86_64-apple-darwin13.4.0.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mer_ssdb
mer_ssdb : mer_ssdb$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mer_ssdb : mer_ssdb.exe
mer_ssdb.exe : $(mer_ssdb.dlls) $(mer_ssdb.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mer_ssdb : $(mer_ssdb.classes)
 else
mer_ssdb$(EXT_FOR_EXE) : $(mer_ssdb.cs_or_ss) $(mer_ssdb.os) mer_ssdb_init.$O \
		$(foreach @,mer_ssdb,$(ALL_MLOBJS)) \
		$(foreach @,mer_ssdb,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mer_ssdb$(EXT_FOR_EXE) mer_ssdb_init.$O \
		$(mer_ssdb.os) \
		$(foreach @,mer_ssdb,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmer_ssdb
ifeq ($(findstring il,$(GRADE)),il)
libmer_ssdb : $(mer_ssdb.dlls) $(mer_ssdb.foreign_dlls) \
		$(mer_ssdb.ints) $(mer_ssdb.int3s) mer_ssdb.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmer_ssdb : mer_ssdb.jar \
		$(mer_ssdb.ints) $(mer_ssdb.int3s) mer_ssdb.init

 else
libmer_ssdb : libmer_ssdb.$A libmer_ssdb.$(EXT_FOR_SHARED_LIB) \
		$(mer_ssdb.ints) $(mer_ssdb.int3s) mer_ssdb.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmer_ssdb.$(EXT_FOR_SHARED_LIB) : $(mer_ssdb.cs_or_ss) $(mer_ssdb.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_ssdb,$(ALL_MLOBJS))) \
		$(foreach @,mer_ssdb,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmer_ssdb.$(EXT_FOR_SHARED_LIB) \
		$(mer_ssdb.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_ssdb,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmer_ssdb.$A : $(mer_ssdb.cs_or_ss) $(mer_ssdb.os) \
		$(foreach @,mer_ssdb,$(ALL_MLOBJS))
	rm -f libmer_ssdb.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmer_ssdb.$A $(mer_ssdb.os) \
		$(foreach @,mer_ssdb,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmer_ssdb.$A

mer_ssdb.jar : $(mer_ssdb.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mer_ssdb.jar $(mer_ssdb.classes)

mer_ssdb.init : mer_ssdb.dep $(mer_ssdb.cs)
	echo > mer_ssdb.init
	$(MKLIBINIT) $(mer_ssdb.cs) >> mer_ssdb.init
	$(EXTRA_INIT_COMMAND) >> mer_ssdb.init
force-mer_ssdb_init :

mer_ssdb_init.c : force-mer_ssdb_init $(mer_ssdb.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mer_ssdb_init.c.tmp $(mer_ssdb.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mer_ssdb_init.c

.PHONY : libmer_ssdb.install_ints
libmer_ssdb.install_ints : $(mer_ssdb.ints) $(mer_ssdb.int3s) $(mer_ssdb.module_deps)  install_lib_dirs
	files="$(mer_ssdb.ints) $(mer_ssdb.int3s) $(mer_ssdb.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmer_ssdb.install_opts
libmer_ssdb.install_opts : 
	@:

.PHONY : libmer_ssdb.install_hdrs
libmer_ssdb.install_hdrs : $(mer_ssdb.mhs) install_lib_dirs
ifeq ($(mer_ssdb.mhs),)
	@:
else
	for hdr in $(mer_ssdb.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmer_ssdb.install_grade_hdrs
libmer_ssdb.install_grade_hdrs : $(mer_ssdb.mihs) install_grade_dirs
ifeq ($(mer_ssdb.mihs),)
	@:
else
	for hdr in $(mer_ssdb.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mer_ssdb.check
mer_ssdb.check : $(mer_ssdb.errs)

.PHONY : mer_ssdb.ints
mer_ssdb.ints : $(mer_ssdb.dates)

.PHONY : mer_ssdb.int3s
mer_ssdb.int3s : $(mer_ssdb.date3s)

.PHONY : mer_ssdb.opts
mer_ssdb.opts : $(mer_ssdb.optdates)

.PHONY : mer_ssdb.trans_opts
mer_ssdb.trans_opts : $(mer_ssdb.trans_opt_dates)

.PHONY : mer_ssdb.ils
mer_ssdb.ils : $(mer_ssdb.ils)

.PHONY : mer_ssdb.javas
mer_ssdb.javas : $(mer_ssdb.javas)

.PHONY : mer_ssdb.classes
mer_ssdb.classes : $(mer_ssdb.classes)

.PHONY : mer_ssdb.all_ints
mer_ssdb.all_ints : $(mer_ssdb.dates)

.PHONY : mer_ssdb.all_int3s
mer_ssdb.all_int3s : $(mer_ssdb.date3s)

.PHONY : mer_ssdb.all_opts
mer_ssdb.all_opts : $(mer_ssdb.optdates)

.PHONY : mer_ssdb.all_trans_opts
mer_ssdb.all_trans_opts : $(mer_ssdb.trans_opt_dates)

clean_local : mer_ssdb.clean
.PHONY : mer_ssdb.clean
mer_ssdb.clean :
	-echo $(mer_ssdb.dirs) | xargs rm -rf 
	-echo $(mer_ssdb.cs) mer_ssdb_init.c | xargs rm -f
	-echo $(mer_ssdb.mihs) | xargs rm -f
	-echo $(mer_ssdb.all_os) mer_ssdb_init.$O | xargs rm -f
	-echo $(mer_ssdb.all_pic_os) mer_ssdb_init.pic_o | xargs rm -f
	-echo $(mer_ssdb.c_dates) | xargs rm -f
	-echo $(mer_ssdb.il_dates) | xargs rm -f
	-echo $(mer_ssdb.java_dates) | xargs rm -f
	-echo $(mer_ssdb.useds) | xargs rm -f
	-echo $(mer_ssdb.ils) | xargs rm -f
	-echo $(mer_ssdb.javas) | xargs rm -f
	-echo $(mer_ssdb.profs) | xargs rm -f
	-echo $(mer_ssdb.errs) | xargs rm -f
	-echo $(mer_ssdb.foreign_cs) | xargs rm -f

realclean_local : mer_ssdb.realclean
.PHONY : mer_ssdb.realclean
mer_ssdb.realclean : mer_ssdb.clean
	-echo $(mer_ssdb.dates) | xargs rm -f
	-echo $(mer_ssdb.date0s) | xargs rm -f
	-echo $(mer_ssdb.date3s) | xargs rm -f
	-echo $(mer_ssdb.optdates) | xargs rm -f
	-echo $(mer_ssdb.trans_opt_dates) | xargs rm -f
	-echo $(mer_ssdb.ints) | xargs rm -f
	-echo $(mer_ssdb.all_int0s) | xargs rm -f
	-echo $(mer_ssdb.int3s) | xargs rm -f
	-echo $(mer_ssdb.opts) | xargs rm -f
	-echo $(mer_ssdb.trans_opts) | xargs rm -f
	-echo $(mer_ssdb.analysiss) | xargs rm -f
	-echo $(mer_ssdb.requests) | xargs rm -f
	-echo $(mer_ssdb.imdgs) | xargs rm -f
	-echo $(mer_ssdb.ds) | xargs rm -f
	-echo $(mer_ssdb.module_deps) | xargs rm -f
	-echo $(mer_ssdb.all_mhs) | xargs rm -f
	-echo $(mer_ssdb.all_mihs) | xargs rm -f
	-echo $(mer_ssdb.dlls) | xargs rm -f
	-echo $(mer_ssdb.foreign_dlls) | xargs rm -f
	-echo $(mer_ssdb.classes) | xargs rm -f
	-rm -f mer_ssdb$(EXT_FOR_EXE) mer_ssdb.init libmer_ssdb.$A libmer_ssdb.$(EXT_FOR_SHARED_LIB) mer_ssdb.jar mer_ssdb.dep mer_ssdb.dv

