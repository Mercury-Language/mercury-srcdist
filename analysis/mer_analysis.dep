# Automatically generated dependencies for module `mer_analysis'
# generated from source file `mer_analysis.m'
# Generated by the Mercury compiler, version rotd-2007-12-21, configured for i686-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mer_analysis
mer_analysis : mer_analysis$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mer_analysis : mer_analysis.exe
mer_analysis.exe : $(mer_analysis.dlls) $(mer_analysis.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mer_analysis : $(mer_analysis.classes)
 else
mer_analysis$(EXT_FOR_EXE) : $(mer_analysis.cs_or_ss) $(mer_analysis.os) mer_analysis_init.$O \
		$(foreach @,mer_analysis,$(ALL_MLOBJS)) \
		$(foreach @,mer_analysis,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) -o mer_analysis$(EXT_FOR_EXE) mer_analysis_init.$O \
		$(mer_analysis.os) \
		$(foreach @,mer_analysis,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmer_analysis
ifeq ($(findstring il,$(GRADE)),il)
libmer_analysis : $(mer_analysis.dlls) $(mer_analysis.foreign_dlls) \
		$(mer_analysis.ints) $(mer_analysis.int3s) mer_analysis.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmer_analysis : mer_analysis.jar \
		$(mer_analysis.ints) $(mer_analysis.int3s) mer_analysis.init

 else
libmer_analysis : libmer_analysis.$A libmer_analysis.$(EXT_FOR_SHARED_LIB) \
		$(mer_analysis.ints) $(mer_analysis.int3s) mer_analysis.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmer_analysis.$(EXT_FOR_SHARED_LIB) : $(mer_analysis.cs_or_ss) $(mer_analysis.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_analysis,$(ALL_MLOBJS))) \
		$(foreach @,mer_analysis,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmer_analysis.$(EXT_FOR_SHARED_LIB) \
		$(mer_analysis.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_analysis,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmer_analysis.$A : $(mer_analysis.cs_or_ss) $(mer_analysis.os) \
		$(foreach @,mer_analysis,$(ALL_MLOBJS))
	rm -f libmer_analysis.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmer_analysis.$A $(mer_analysis.os) \
		$(foreach @,mer_analysis,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmer_analysis.$A

mer_analysis.jar : $(mer_analysis.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mer_analysis.jar $(mer_analysis.classes)

mer_analysis.init : mer_analysis.dep $(mer_analysis.cs)
	echo > mer_analysis.init
	$(MKLIBINIT) $(mer_analysis.cs) >> mer_analysis.init
	$(EXTRA_INIT_COMMAND) >> mer_analysis.init
force-mer_analysis_init :

mer_analysis_init.c : force-mer_analysis_init $(mer_analysis.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mer_analysis_init.c.tmp $(mer_analysis.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mer_analysis_init.c

.PHONY : libmer_analysis.install_ints
libmer_analysis.install_ints : $(mer_analysis.ints) $(mer_analysis.int3s)  install_lib_dirs
	files="$(mer_analysis.ints) $(mer_analysis.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmer_analysis.install_opts
libmer_analysis.install_opts : 
	@:

.PHONY : libmer_analysis.install_hdrs
libmer_analysis.install_hdrs : $(mer_analysis.mhs) install_lib_dirs
ifeq ($(mer_analysis.mhs),)
	@:
else
	for hdr in $(mer_analysis.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmer_analysis.install_grade_hdrs
libmer_analysis.install_grade_hdrs : $(mer_analysis.mihs) install_grade_dirs
ifeq ($(mer_analysis.mihs),)
	@:
else
	for hdr in $(mer_analysis.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mer_analysis.check
mer_analysis.check : $(mer_analysis.errs)

.PHONY : mer_analysis.ints
mer_analysis.ints : $(mer_analysis.dates)

.PHONY : mer_analysis.int3s
mer_analysis.int3s : $(mer_analysis.date3s)

.PHONY : mer_analysis.opts
mer_analysis.opts : $(mer_analysis.optdates)

.PHONY : mer_analysis.trans_opts
mer_analysis.trans_opts : $(mer_analysis.trans_opt_dates)

.PHONY : mer_analysis.ss
mer_analysis.ss : $(mer_analysis.ss)

.PHONY : mer_analysis.pic_ss
mer_analysis.pic_ss : $(mer_analysis.pic_ss)

.PHONY : mer_analysis.ils
mer_analysis.ils : $(mer_analysis.ils)

.PHONY : mer_analysis.javas
mer_analysis.javas : $(mer_analysis.javas)

.PHONY : mer_analysis.classes
mer_analysis.classes : $(mer_analysis.classes)

clean_local : mer_analysis.clean
.PHONY : mer_analysis.clean
mer_analysis.clean :
	-echo $(mer_analysis.dirs) | xargs rm -rf 
	-echo $(mer_analysis.cs) mer_analysis_init.c | xargs rm -f
	-echo $(mer_analysis.mihs) | xargs rm -f
	-echo $(mer_analysis.all_ss) mer_analysis_init.s | xargs rm -f
	-echo $(mer_analysis.all_pic_ss) mer_analysis_init.s | xargs rm -f
	-echo $(mer_analysis.all_os) mer_analysis_init.$O | xargs rm -f
	-echo $(mer_analysis.all_pic_os) mer_analysis_init.pic_o | xargs rm -f
	-echo $(mer_analysis.c_dates) | xargs rm -f
	-echo $(mer_analysis.il_dates) | xargs rm -f
	-echo $(mer_analysis.java_dates) | xargs rm -f
	-echo $(mer_analysis.all_s_dates) | xargs rm -f
	-echo $(mer_analysis.all_pic_s_dates) | xargs rm -f
	-echo $(mer_analysis.useds) | xargs rm -f
	-echo $(mer_analysis.ils) | xargs rm -f
	-echo $(mer_analysis.javas) | xargs rm -f
	-echo $(mer_analysis.profs) | xargs rm -f
	-echo $(mer_analysis.errs) | xargs rm -f
	-echo $(mer_analysis.foreign_cs) | xargs rm -f

realclean_local : mer_analysis.realclean
.PHONY : mer_analysis.realclean
mer_analysis.realclean : mer_analysis.clean
	-echo $(mer_analysis.dates) | xargs rm -f
	-echo $(mer_analysis.date0s) | xargs rm -f
	-echo $(mer_analysis.date3s) | xargs rm -f
	-echo $(mer_analysis.optdates) | xargs rm -f
	-echo $(mer_analysis.trans_opt_dates) | xargs rm -f
	-echo $(mer_analysis.ints) | xargs rm -f
	-echo $(mer_analysis.all_int0s) | xargs rm -f
	-echo $(mer_analysis.int3s) | xargs rm -f
	-echo $(mer_analysis.opts) | xargs rm -f
	-echo $(mer_analysis.trans_opts) | xargs rm -f
	-echo $(mer_analysis.analysiss) | xargs rm -f
	-echo $(mer_analysis.requests) | xargs rm -f
	-echo $(mer_analysis.imdgs) | xargs rm -f
	-echo $(mer_analysis.ds) | xargs rm -f
	-echo $(mer_analysis.module_deps) | xargs rm -f
	-echo $(mer_analysis.all_mhs) | xargs rm -f
	-echo $(mer_analysis.all_mihs) | xargs rm -f
	-echo $(mer_analysis.dlls) | xargs rm -f
	-echo $(mer_analysis.foreign_dlls) | xargs rm -f
	-echo $(mer_analysis.classes) | xargs rm -f
	-rm -f mer_analysis$(EXT_FOR_EXE) mer_analysis.init libmer_analysis.$A libmer_analysis.$(EXT_FOR_SHARED_LIB) mer_analysis.jar mer_analysis.dep mer_analysis.dv

