:- module analysis.
:- interface.
:- import_module bool.
:- import_module io.
:- import_module list.
:- import_module maybe.
:- import_module set.
:- import_module unit.
:- type analysis_info.
:- type analysis_name == string.
:- type analysis_status
	--->	invalid 
	;	suboptimal 
	;	optimal .
:- type any_call
	--->	any_call .
:- type extra_info_key == string.
:- type fixpoint_type
	--->	least_fixpoint 
	;	greatest_fixpoint .
:- type func_id == string.
:- type module_id == string.
:- type analysis_type
	--->	some [Call, Answer] (analysis_type((unit.unit(Call)), (unit.unit(Answer))) => (analysis.analysis(Call, Answer))).
:- typeclass compiler(Compiler).
:- typeclass partial_order(T).
:- typeclass to_string(S).
:- typeclass analysis(Call, Answer) <= (analysis.call_pattern(Call), analysis.answer_pattern(Answer)).
:- typeclass answer_pattern(Answer) <= (analysis.partial_order(Answer), analysis.to_string(Answer)).
:- typeclass call_pattern(Call) <= (analysis.partial_order(Call), analysis.to_string(Call)).
:- typeclass extra_info(ExtraInfo) <= (analysis.to_string(ExtraInfo)).
:- instance (analysis.call_pattern((analysis.any_call))).
:- instance (analysis.partial_order((analysis.any_call))).
:- instance (analysis.to_string((analysis.any_call))).
:- implementation.
:- include_module (analysis.file).
