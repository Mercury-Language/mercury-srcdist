This is mercury_user_guide.info, produced by makeinfo version 4.11 from
user_guide.texi_pp.

INFO-DIR-SECTION The Mercury Programming Language
START-INFO-DIR-ENTRY
* Mercury User's Guide: (mercury_user_guide).  The Mercury User's Guide.
END-INFO-DIR-ENTRY

   This file documents the Mercury implementation, version
11.07-beta-2011-11-14.

   Copyright (C) 1995-2011 The University of Melbourne.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: mercury_user_guide.info,  Node: Low-level (LLDS -> LLDS) optimization options,  Next: Output-level (LLDS -> C) optimization options,  Prev: Erlang (HLDS -> ELDS) optimization options,  Up: Optimization options

9.10.6 Low-level (LLDS -> LLDS) optimization options
----------------------------------------------------

These optimizations are transformations that are applied to our
low-level intermediate code before emitting C code.

`--no-common-data'
     Disable optimization of common data structures.

`--no-layout-common-data'
     Disable optimization of common subsequences in layout structures.

`--no-llds-optimize'
     Disable the low-level optimization passes.


`--no-optimize-peep'
     Disable local peephole optimizations.


`--no-optimize-jumps'
     Disable elimination of jumps to jumps.


`--no-optimize-fulljumps'
     Disable elimination of jumps to ordinary code.


`--pessimize-tailcalls'
     Disable the optimization of tailcalls.


`--checked-nondet-tailcalls'
     Convert nondet calls into tail calls whenever possible, even when
     this requires a runtime check. This option tries to minimize stack
     consumption, possibly at the expense of speed.


`--no-use-local-vars'
     Disable the transformation to use local variables in C code blocks
     wherever possible.


`--no-optimize-labels'
     Disable elimination of dead labels and code.


`--optimize-dups'
     Enable elimination of duplicate code within procedures.


`--optimize-proc-dups'
     Enable elimination of duplicate procedures.


`--no-optimize-frames'
     Disable stack frame optimizations.


`--no-optimize-delay-slot'
     Disable branch delay slot optimizations.


`--optimize-reassign'
     Optimize away assignments to locations that already hold the
     assigned value.


`--optimize-repeat N'
     Iterate most optimizations at most N times (default: 3).


`--layout-compression-limit N'
     Attempt to compress the layout structures used by the debugger
     only as long as the arrays involved have at most N elements
     (default: 4000).



File: mercury_user_guide.info,  Node: Output-level (LLDS -> C) optimization options,  Prev: Low-level (LLDS -> LLDS) optimization options,  Up: Optimization options

9.10.7 Output-level (LLDS -> C) optimization options
----------------------------------------------------

These optimizations are applied during the process of generating C
intermediate code from our low-level data structure.

`--no-emit-c-loops'
     Use only gotos -- don't emit C loop constructs.


`--use-macro-for-redo-fail'
     Emit the fail or redo macro instead of a branch to the fail or
     redo code in the runtime system.


`--procs-per-c-function N'
     Don't put the code for more than N Mercury procedures in a single
     C function.  The default value of N is one.  Increasing N can
     produce slightly more efficient code, but makes compilation slower.
     Setting N to the special value zero has the effect of putting all
     the procedures in a single function, which produces the most
     efficient code but tends to severely stress the C compiler.


`--no-local-thread-engine-base'
     Don't copy the thread-local Mercury engine base address into local
     variables. This option only affects low-level parallel grades not
     using the global register variables extension.



File: mercury_user_guide.info,  Node: Build system options,  Next: Miscellaneous options,  Prev: Link options,  Up: Invocation

9.11 Build system options
=========================

`-m'
`--make'
     Treat the non-option arguments to `mmc' as files to make, rather
     than source files.  Create the specified files, if they are not
     already up-to-date.  (Note that this option also enables
     `--use-subdirs'.)


`-r'
`--rebuild'
     Same as `--make', but always rebuild the target files even if they
     are up to date.


`-k'
`--keep-going'
     With `--make' keep going as far as possible even if an error is
     detected.


`-j <n>'

`--jobs <n>'
     With `--make', attempt to perform up to `<n>' jobs concurrently
     for some tasks.

     In low-level C grades with parallelism support, the number of
     threads is also limited by the `-P' option in the
     `MERCURY_OPTIONS' environment variable (see *note Environment::).


`--track-flags'
     With `--make', keep track of the options used when compiling each
     module.  If an option for a module is added or removed, `mmc
     --make' will then know to recompile the module even if the
     timestamp on the file itself has not changed.  Warning, verbosity
     and build system options are not tracked.


`--pre-link-command COMMAND'
     Specify a command to run before linking with `mmc --make'.  This
     can be used to compile C source files which rely on header files
     generated by the Mercury compiler.  The command will be passed the
     names of all of the source files in the program or library, with
     the source file containing the main module given first.


`--extra-init-command COMMAND'
     Specify a command to produce extra entries in the `.init' file for
     a library.  The command will be passed the names of all of the
     source files in the program or library, with the source file
     containing the main module given first.


`--install-prefix DIR'
     Specify the directory under which to install Mercury libraries.


`--install-command COMMAND'
     Specify the command to use to install the files in Mercury
     libraries. The given command will be invoked as `COMMAND SOURCE
     TARGET' to install each file in a Mercury library.  The default
     command is `cp'.


`--install-command-dir-option OPTION'
     Specify the flag to pass to the install command to install a
     directory. The given command will be invoked as `COMMAND OPTION
     SOURCE TARGET' to install each directory. The default option is
     `-r'.


`--libgrade GRADE'
     Add GRADE to the list of compilation grades in which a library to
     be installed should be built.


`--no-libgrade'
     Clear the list of compilation grades in which a library to be
     installed should be built.  The main use of this is to avoid
     building and installing the default set of grades.


`--libgrades-include-component COMPONENT'
`--libgrades-include COMPONENT'
     Remove grades that do not contain the specified component from the
     set of library grades to be installed.  (This option does not work
     with Mmake, only `mmc --make'.)


`--libgrades-exclude-component COMPONENT'
`--libgrade-exclude COMPONENT'
     Remove grades that contain the specified component from the set of
     library grades to be installed.  (This option does not work with
     Mmake, only `mmc --make'.)


`--lib-linkage {shared,static}'
     Specify whether libraries should be installed for shared or static
     linking.  This option can be specified multiple times.  By default
     libraries will be installed for both shared and static linking.


`--flags FILE'
`--flags-file FILE'
     Take options from the specified file, and handle them as if they
     were specified on the command line.


`--options-file FILE'
     Add FILE to the list of options files to be processed.  If FILE is
     `-', an options file will be read from the standard input.  By
     default the file `Mercury.options' in the current directory will
     be read.  See *note Using Mmake:: for a description of the syntax
     of options files.

`--config-file FILE'
     Read the Mercury compiler's configuration information from FILE.
     If the `--config-file' option is not set, a default configuration
     will be used, unless `--no-mercury-stdlib-dir' is passed to `mmc'.
     The configuration file is just an options file (*note Using
     Mmake::).


`--options-search-directory DIR'
     Add DIR to the list of directories to be searched for options
     files.


`--mercury-configuration-directory DIR'
`--mercury-config-dir DIR'
     Search DIR for Mercury system's configuration files.


`-I DIR'
`--search-directory DIR'
     Append DIR to the list of directories to be searched for imported
     modules.


`--intermod-directory DIR'
     Append DIR to the list of directories to be searched for `.opt'
     files.


`--use-search-directories-for-intermod'
     Append the arguments of all -I options to the list of directories
     to be searched for `.opt' files.


`--no-libgrade-install-check'
     Do not check that libraries have been installed before attempting
     to use them.  (This option is only meaningful with `mmc -make'.)


`--use-subdirs'
     Create intermediate files in a `Mercury' subdirectory, rather than
     in the current directory.


`--use-grade-subdirs'
     Generate intermediate files in a `Mercury' subdirectory, laid out
     so that multiple grades can be built simultaneously.  Executables
     and libraries will be symlinked or copied into the current
     directory.  `--use-grade-subdirs' does not work with Mmake (it does
     work with `mmc --make').


`--order-make-by-timestamp'
     Make `mmc --make' compile more recently modified source files
     first.


`--show-make-times'
     Report run times for commands executed by `mmc --make'.


`--extra-library-header FILE'

`--extra-lib-header FILE'
     Install the specified C header file along with a Mercury library.
     (This option is only supported by `mmc --make')


`--restricted-command-line'
     Enable this option if your shell doesn't support long command
     lines.  This option uses temporary files to pass arguments to
     sub-commands.  (This option is only supported by `mmc --make')


`--env-type TYPE'
     Specify the environment type in which the compiler and generated
     programs will be invoked.  The environment type controls how the
     compiler and generated programs interact with the shell and other
     system tools.  The TYPE should be one of `posix', `cygwin', `msys',
     or `windows'.  This option is equivalent to setting both
     `--host-env-type' and `--target-env-type' to TYPE.


`--host-env-type TYPE'
     Specify the environment type in which the compiler will be invoked.
     (See above for a list of supported environment types.)


`--target-env-type TYPE'
     Specify the environment type in which generated programs will be
     invoked.  (See above for a list of supported environment types.)



File: mercury_user_guide.info,  Node: Miscellaneous options,  Prev: Build system options,  Up: Invocation

9.12 Miscellaneous options
==========================


`-?'
`-h'
`--help'
     Print a usage message.


`--filenames-from-stdin'
     Read then compile a newline terminated module name or file name
     from the standard input. Repeat this until EOF is reached. (This
     allows a program or user to interactively compile several modules
     without the overhead of process creation for each one.)


`--typecheck-ambiguity-warn-limit N'
     Set the number of type assignments required to generate a warning
     about highly ambiguous overloading to N.


`--typecheck-ambiguity-error-limit N'
     Set the number of type assignments required to generate an error
     excessively ambiguous overloading to N.  If this limit is reached,
     the typechecker will not process the predicate or function any
     further.


`--control-granularity'
     Don't try to generate more parallelism than the machine can handle,
     which may be specified at runtime or detected automatically.  (see
     the `-P' option in the `MERCURY_OPTIONS' environment variable.)


`--distance-granularity DISTANCE_VALUE'
     Control the granularity of parallel execution using the specified
     distance value.


`--implicit-parallelism'
     Introduce parallel conjunctions where it could be worthwhile
     (implicit parallelism) using deep profiling feedback information
     generated by mdprof_feedback. The profiling feedback file can be
     specified using the -feedback-file option.


`--feedback-file'
     Use the specified profiling feedback file which may currently only
     be processed for implicit parallelism.



File: mercury_user_guide.info,  Node: Target code compilation options,  Next: Link options,  Prev: Optimization options,  Up: Invocation

9.13 Target code compilation options
====================================

If you are using Mmake, you need to pass these options to the target
code compiler (e.g. `mgnuc') rather than to `mmc'.


``--target-debug''
     Enable debugging of the generated target code.  If the target
     language is C, this has the same effect as `--c-debug' (see below).
     If the target language is IL or C#, this causes the compiler to
     pass `/debug' to the IL assembler or C# compiler.


`--cc COMPILER-NAME'
     Specify which C compiler to use.


`--c-include-directory DIR'

`--c-include-dir DIR'
     Append DIR to the list of directories to be searched for C header
     files.  Note that if you want to override this list, rather than
     append to it, then you can set the `MERCURY_MC_ALL_C_INCL_DIRS'
     environment variable to a sequence of `--c-include-directory'
     options.


``--c-debug''
     Pass the `-g' flag to the C compiler, to enable debugging of the
     generated C code, and also disable stripping of C debugging
     information from the executable.  Since the generated C code is
     very low-level, this option is not likely to be useful to anyone
     except the Mercury implementors, except perhaps for debugging code
     that uses Mercury's C interface extensively.


`--no-c-optimize'
     Don't enable the C compiler's optimizations.


`--no-ansi-c'
     Don't specify to the C compiler that the ANSI dialect of C should
     be used.  Use the full contents of system headers, rather than the
     ANSI subset.


`--inline-alloc'
     Inline calls to `GC_malloc()'.  This can improve performance a
     fair bit, but may significantly increase code size.  This option
     has no effect if `--gc boehm' is not set or if the C compiler is
     not GNU C.


`--cflags OPTIONS'

`--cflag OPTION'
     Specify options to be passed to the C compiler.  `--cflag' should
     be used for single words which need to be quoted when passed to
     the shell.


`--javac COMPILER-NAME'

`--java-compiler COMPILER-NAME'
     Specify which Java compiler to use.  The default is `javac'.


`--java-interpreter INTERPRETER-NAME'
     Specify which Java interpreter to use.  The default is `java'.


`--java-flags OPTIONS'
`--java-flag OPTION'
     Specify options to be passed to the Java compiler.  `--java-flag'
     should be used for single words which need to be quoted when
     passed to the shell.


`--java-classpath DIR'
     Set the classpath for the Java compiler.


`--java-object-file-extension EXTENSION'
     Specify an extension for Java object (bytecode) files.  By default
     this is `.class'.


`--csharp-compiler COMPILER-NAME'
     Specify which C# compiler to use.  The default is `csc'.


`--csharp-flags OPTIONS'
`--csharp-flag OPTION'
     Specify options to be passed to the C# compiler.  `--csharp-flag'
     should be used for single words which need to be quoted when
     passed to the shell.


`--cil-interpreter INTERPRETER-NAME'
     Specify the program that implements the Common Language
     Infrastructure (CLI) execution environment, e.g. `mono'.


`--erlang-compiler COMPILER-NAME'
     Specify which Erlang compiler to use.  The default is `erlc'.


`--erlang-interpreter INTERPRETER-NAME'
     Specify which Erlang interpreter to use.  The default is `erl'.


`--erlang-flags OPTIONS'
`--erlang-flag OPTION'
     Specify options to be passed to the Erlang compiler.
     `--erlang-flag' should be used for single words which need to be
     quoted when passed to the shell.


`--erlang-include-directory DIR'
`--erlang-include-dir DIR'
     Append DIR to the list of directories to be searched for Erlang
     header files (.hrl).


`--erlang-native-code'
     Add `+native' to the start of flags passed to the Erlang compiler.
     Cancelled out by `--no-erlang-native-code' so it's useful when you
     wish to enable native code generation for all modules except for a
     select few.


`--no-erlang-inhibit-trivial-warnings'
     Do not add `+nowarn_unused_vars +nowarn_unused_function' to the
     list of flags passed to the Erlang compiler.



File: mercury_user_guide.info,  Node: Link options,  Next: Build system options,  Prev: Target code compilation options,  Up: Invocation

9.14 Link options
=================


`-o FILENAME'
`--output-file FILENAME'
     Specify the name of the final executable.  (The default executable
     name is the same as the name of the first module on the command
     line, but without the `.m' extension.)  This option is ignored by
     `mmc --make'.


`--ld-flags OPTIONS'

`--ld-flags OPTION'
     Specify options to be passed to the command invoked by `mmc' to
     link an executable.  Use `mmc --output-link-command' to find out
     which command is used.  `--ld-flag' should be used for single
     words which need to be quoted when passed to the shell.


`--ld-libflags OPTIONS'

`--ld-libflag OPTION'
     Specify options to be passed to the command invoked by `mmc' to
     link a shared library.  Use `mmc --output-shared-lib-link-command'
     to find out which command is used.  `--ld-libflag' should be used
     for single words which need to be quoted when passed to the shell.


`-L DIRECTORY'
`--library-directory DIRECTORY'
     Append DIRECTORY to the list of directories in which to search for
     libraries.


`-R DIRECTORY'
`--runtime-library-directory DIRECTORY'
     Append DIRECTORY to the list of directories in which to search for
     shared libraries at runtime.


`--shlib-linker-install-name-path DIRECTORY'
     Specify the path where a shared library will be installed.  This
     option is useful on systems where the runtime search path is
     obtained from the shared library and not via the -R option (such
     as Mac OS X).


`-l LIBRARY'
`--library LIBRARY'
     Link with the specified library.


`--link-object OBJECT'
     Link with the specified object file.


`--search-lib-files-dir DIRECTORY'
`--search-library-files-directory DIRECTORY'
     Search DIRECTORY for Mercury library files have not yet been
     installed.  Similar to adding DIRECTORY using all of the
     `--search-directory', `--intermod-directory',
     `--library-directory', `--init-file-directory',
     `--c-include-directory' and `--erlang-include-directory' options,
     but does the right thing when `--use-subdirs' or
     `--use-grade-subdirs' options are used.


`--mld DIRECTORY'
`--mercury-library-directory DIRECTORY'
     Append DIRECTORY to the list of directories to be searched for
     Mercury libraries.  This will add `--search-directory',
     `--library-directory', `--init-file-directory',
     `--c-include-directory' and `--erlang-include-directory' options
     as needed.  *Note Using installed libraries with mmc --make::.


`--ml LIBRARY'
`--mercury-library LIBRARY'
     Link with the specified Mercury library.    *Note Using installed
     libraries with mmc --make::.


`--mercury-standard-library-directory DIRECTORY'
`--mercury-stdlib-dir DIRECTORY'
     Search DIRECTORY for the Mercury standard library.  Implies
     `--mercury-library-directory DIRECTORY' and
     `--mercury-configuration-directory DIRECTORY'.


`--no-mercury-standard-library-directory'
`--no-mercury-stdlib-dir'
     Don't use the Mercury standard library.  Implies
     `--no-mercury-configuration-directory'.


`--init-file-directory DIRECTORY'
     Append DIRECTORY to the list of directories to be searched for
     `.init' files by `c2init'.


`--init-file FILE'
     Append FILE to the list of `.init' files to be passed to `c2init'.


`--trace-init-file FILE'
     Append FILE to the list of `.init' files to be passed to `c2init'
     when tracing is enabled.


`--linkage {shared,static}'
     Specify whether to use shared or static linking for executables.
     Shared libraries are always linked with `--linkage shared'.


`--mercury-linkage {shared,static}'
     Specify whether to use shared or static linking when linking an
     executable with Mercury libraries.  Shared libraries are always
     linked with `--mercury-linkage shared'.


`--no-strip'
     Don't strip executables.


`--no-demangle'
     Don't pipe link errors through the Mercury demangler.


`--no-main'
     Don't generate a C main() function.  The user's code must provide
     a main() function.


`--no-allow-undefined'
     Do not allow undefined symbols in shared libraries.


`--no-use-readline'
     Disable use of the readline library in the debugger.


`--runtime-flags FLAGS'
     Specify flags to pass to the Mercury runtime.


`--extra-initialization-functions'
`--extra-inits'
     Search `.c' files for extra initialization functions.  (This may
     be necessary if the C files contain hand-coded C code with `INIT'
     comments, rather than containing only C code that was
     automatically generated by the Mercury compiler.)


`--link-executable-command COMMAND'
     Specify the command used to invoke the linker when linking an
     executable.


`--link-shared-lib-command COMMAND'
     Specify the command used to invoke the linker when linking a
     shared library.


`--java-archive-command COMMAND'
     Specify the command used to produce Java archive (JAR) files.


`--framework FRAMEWORK'
     Build and link against the specified framework.  (Mac OS X only.)


`-F DIRECTORY'
`--framework-directory DIRECTORY'
     Append the specified directory to the framework search path.  (Mac
     OS X only.)



File: mercury_user_guide.info,  Node: Environment,  Next: C compilers,  Prev: Invocation,  Up: Top

10 Environment variables
************************

The shell scripts in the Mercury compilation environment will use the
following environment variables if they are set.  There should be
little need to use these, because the default values will generally
work fine.

`MERCURY_DEFAULT_GRADE'
     The default grade to use if no `--grade' option is specified.


`MERCURY_STDLIB_DIR'
     The directory containing the installed Mercury standard library.
     `--mercury-stdlib-dir' options passed to the `mmc', `ml', `mgnuc'
     and `c2init' scripts override the setting of the
     MERCURY_STDLIB_DIR environment variable.


`MERCURY_NONSHARED_LIB_DIR'
     For IRIX 5, this environment variable can be used to specify a
     directory containing a version of libgcc.a which has been compiled
     with `-mno-abicalls'.  See the file `README.IRIX-5' in the Mercury
     source distribution.


`MERCURY_OPTIONS'
     A list of options for the Mercury runtime system, which gets
     linked into every Mercury program.  The options given in this
     environment variable apply to every program; the options given in
     an environment variable whose name is of the form
     `MERCURY_OPTIONS_PROGNAME' apply only to programs named PROGNAME.
     Options may also be set for a particular executable at compile time
     by passing `--runtime-flags' options to the invocations of `ml'
     and `c2init' which create that executable.  These options are
     processed first, followed by those in `MERCURY_OPTIONS', with the
     options in `MERCURY_OPTIONS_PROGNAME' being processed last.

     The Mercury runtime system accepts the following options.


    `-C SIZE'
          Tells the runtime system to optimize the locations of the
          starts of the various data areas for a primary data cache of
          SIZE kilobytes.  The optimization consists of arranging the
          starts of the areas to differ as much as possible modulo this
          size.


    `-D DEBUGGER'
          Enables execution tracing of the program, via the internal
          debugger if DEBUGGER is `i' and via the external debugger if
          DEBUGGER is `e'.  (The mdb script works by including `-Di' in
          MERCURY_OPTIONS.)  The external debugger is not yet available.


    `-p'
          Disables profiling.  This only has an effect if the
          executable was built in a profiling grade.


    `-P NUM'
          Tells the runtime system to use NUM threads if the program
          was built in a parallel low-level C grade.  The Mercury
          runtime attempts to automatically determine this value if
          support is available from the operating system.  If it cannot
          or support is unavailable it defaults to `1'.


    `--max-contexts-per-thread NUM'
          Tells the runtime system to create at most NUM contexts per
          POSIX thread.  Each context created requires a set of stacks,
          setting this value too high can consume excess memory.  This
          only has an effect if the executable was built in a low-level
          C parallel grade.


    `--thread-pinning'
          Request that the runtime system attempts to pin Mercury
          engines (POSIX threads) to CPU cores/hardware threads.  This
          only has an effect if the executable was built in a parallel
          low-level C grade.  This is disabled by default but may be
          enabled by default in the future.


    `-T TIME-METHOD'
          If the executable was compiled in a grade that includes time
          profiling, this option specifies what time is counted in the
          profile.  TIME-METHOD must have one of the following values:


         ``r''
               Profile real (elapsed) time (using ITIMER_REAL).

         ``p''
               Profile user time plus system time (using ITIMER_PROF).
               This is the default.

         ``v''
               Profile user time (using ITIMER_VIRTUAL).


          Currently, only the `-Tr' option works on Cygwin; on that
          platform it is the default.


    `--heap-size SIZE'
          Sets the size of the heap to SIZE kilobytes.


    `--heap-size-kwords SIZE'
          Sets the size of the heap to SIZE kilobytes multiplied by the
          word size in bytes.


    `--detstack-size SIZE'
          Sets the size of the det stack to SIZE kilobytes.


    `--detstack-size-kwords SIZE'
          Sets the size of the det stack to SIZE kilobytes multiplied
          by the word size in bytes.


    `--nondetstack-size SIZE'
          Sets the size of the nondet stack to SIZE kilobytes.


    `--nondetstack-size-kwords SIZE'
          Sets the size of the nondet stack to SIZE kilobytes
          multiplied by the word size in bytes.


    `--small-detstack-size SIZE'
          Sets the size of the det stack used for executing parallel
          conjunctions to SIZE kilobytes.  The regular det stack size
          must be equal or greater.


    `--small-detstack-size-kwords SIZE'
          Sets the size of the det stack used for executing parallel
          conjunctions to SIZE kilobytes multiplied by the word size in
          bytes.  The regular det stack size must be equal or greater.


    `--small-nondetstack-size SIZE'
          Sets the size of the nondet stack for executing parallel
          computations to SIZE kilobytes.  The regular nondet stack
          size must be equal or greater.


    `--small-nondetstack-size-kwords SIZE'
          Sets the size of the nondet stack for executing parallel
          computations to SIZE kilobytes multiplied by the word size in
          bytes.  The regular nondet stack size must be equal or
          greater.


    `--solutions-heap-size SIZE'
          Sets the size of the solutions heap to SIZE kilobytes.


    `--solutions-heap-size-kwords SIZE'
          Sets the size of the solutions heap to SIZE kilobytes
          multiplied by the word size in bytes.


    `--trail-size SIZE'
          Sets the size of the trail to SIZE kilobytes.  This option is
          ignored in grades that use trail segments.


    `--trail-size-kwords SIZE'
          Sets the size of the trail to SIZE kilobytes multiplied by
          the word size in bytes.  This option is ignored in grades
          that use trail segments.


    `--trail-segment-size SIZE'
          Sets the size of each trail segment to be SIZE kilobytes.
          This option is ignored in grades that do not use trail
          segments.


    `--trail-segment-size-kwords SIZE'
          Set the size of each trail segment to be SIZE kilobytes
          multiplied by the words size in bytes.  This option is
          ignored in grades that do not use trail segments.


    `--genstack-size SIZE'
          Sets the size of the generator stack to SIZE kilobytes.


    `--genstack-size-kwords SIZE'
          Sets the size of the generator stack to SIZE kilobytes
          multiplied by the word size in bytes.


    `--cutstack-size SIZE'
          Sets the size of the cut stack to SIZE kilobytes.


    `--cutstack-size-kwords SIZE'
          Sets the size of the cut stack to SIZE kilobytes multiplied
          by the word size in bytes.


    `--pnegstack-size SIZE'
          Sets the size of the pneg stack to SIZE kilobytes.


    `--pnegstack-size-kwords SIZE'
          Sets the size of the pneg stack to SIZE kilobytes multiplied
          by the word size in bytes.


    `-i FILENAME'
    `--mdb-in FILENAME'
          Read debugger input from the file or device specified by
          FILENAME, rather than from standard input.


    `-o FILENAME'
    `--mdb-out FILENAME'
          Print debugger output to the file or device specified by
          FILENAME, rather than to standard output.


    `-e FILENAME'
    `--mdb-err FILENAME'
          Print debugger error messages to the file or device specified
          by FILENAME, rather than to standard error.


    `-m FILENAME'
    `--mdb-tty FILENAME'
          Redirect all three debugger I/O streams -- input, output, and
          error messages -- to the file or device specified by FILENAME.


    `--debug-threads'
          Output information to the standard error stream about the
          locking and unlocking occurring in each module which has been
          compiled with the C macro symbol `MR_DEBUG_THREADS' defined.


    `--tabling-statistics'
          Prints statistics about tabling when the program terminates.


    `--mem-usage-report PREFIX'
          Print a report about the memory usage of the program when the
          program terminates.  The report is printed to a new file
          named `.mem_usage_reportN' for the lowest value of N (up to
          99) which doesn't overwrite an existing file.  Note that this
          capability is not supported on all operating systems.


    `--trace-count'
          When the program terminates, generate a trace counts file
          listing all the debugger events the program executed, if the
          program actually executed any debugger events.  If
          MERCURY_OPTIONS includes the
          -trace-count-output-file=FILENAME option, then the trace
          counts are put into the file FILENAME.  If MERCURY_OPTIONS
          includes the -trace-count-summary-file=BASENAME option, then
          the trace counts are put either in the file BASENAME (if it
          does not exist), or in BASENAME.N for the lowest value of the
          integer N which doesn't overwrite an existing file.  (There
          is a limit on the value of N; see the option
          -trace-count-summary-max below.)  If neither option is
          specified, then the output will be written to a file with the
          prefix `.mercury_trace_counts' and a unique suffix.
          Specifying both options is an error.


    `--coverage-test'
          Act as the -trace-count option, except include _all_ debugger
          events in the output, even the ones that were not executed.


    `--trace-count-if-exec=PROG'
          Act as the -trace-count option, but only if the executable is
          named PROG.  This is to allow the collection of trace count
          information from only one Mercury program even if several
          Mercury programs are executed with the same setting of
          MERCURY_OPTIONS.


    `--coverage-test-if-exec=PROG'
          Act as the -coverage-test option, but only if the executable
          is named PROG.  This is to allow the collection of coverage
          test information from only one Mercury program even if
          several Mercury programs are executed with the same setting
          of MERCURY_OPTIONS.


    `--trace-count-output-file=FILENAME'
          Documented alongside the -trace-count option.


    `--trace-count-summary-file=BASENAME'
          Documented alongside the -trace-count option.


    `--trace-count-summary-max=N'
          If MERCURY_OPTIONS includes both the -trace-count option (or
          one of the other options that imply -trace-count) and the
          -trace-count-summary-file=BASENAME option, then the generated
          program will put the generated trace counts either in
          BASENAME (if it does not exist), or in BASENAME.N for the
          lowest value of the integer N which doesn't overwrite an
          existing file.  The -trace-count-summary-max option specifies
          the maximum value of this N.  When this maximum is reached,
          the program will invoke the `mtc_union' program to summarize
          BASENAME, BASENAME.1, ... BASENAME.N into a single file
          BASENAME, and delete the rest.  By imposing a limit on the
          total number (and hence indirectly on the total size) of
          these trace count files, this mechanism allows the gathering
          of trace count information from a large number of program
          runs.  The default maximum value of N is 20.


    `--boehm-gc-free-space-divisor=N'
          This option sets the value of the free space divisor in the
          Boehm garbage collector to N.  It is meaningful only when
          using the Boehm garbage collector.  The default value is 3.
          Increasing its value will reduce heap space but increase
          collection time.  See the Boehm GC documentation for details.


    `--boehm-gc-calc-time'
          This option enables code in the Boehm garbage collector to
          calculate the time spent doing garbage collection so far.
          Its only effect is to enable the `report_stats' predicate in
          the `benchmarking' module of the standard library to report
          this information.


    `--fp-rounding-mode MODE'
          Set the rounding mode for floating point operations to MODE.
          Recognised modes are `downward', `upward', `to_nearest' and
          `toward_zero'.  Exactly what modes are available and even if
          it is possible to set the rounding mode is system dependent.



`MERCURY_COMPILER'
     Filename of the Mercury Compiler.


`MERCURY_MKINIT'
     Filename of the program to create the `*_init.c' file.


`MERCURY_DEBUGGER_INIT'
     Name of a file that contains startup commands for the Mercury
     debugger.  This file should contain documentation for the debugger
     command set, and possibly a set of default aliases.



File: mercury_user_guide.info,  Node: C compilers,  Next: Foreign language interface,  Prev: Environment,  Up: Top

11 Using a different C compiler
*******************************

The Mercury compiler takes special advantage of certain extensions
provided by GNU C to generate much more efficient code.  We therefore
recommend that you use GNU C for compiling Mercury programs.  However,
if for some reason you wish to use another compiler, it is possible to
do so.  Here's what you need to do.

   * Create a new configuration for the Mercury system using the
     `mercury_config' script, specifying the different C compiler, e.g.
     `mercury_config --output-prefix=/usr/local/mercury-cc
     --with-cc=cc'.

   * Add the `bin' directory of the new configuration to the beginning
     of your PATH.

   * You must use a grade beginning with `none', `hlc' or `hl' (e.g.
     `hlc.gc').  You can specify the grade in one of three ways: by
     setting the `MERCURY_DEFAULT_GRADE' environment variable, by
     adding a line `GRADE=...' to your `Mmake' file, or by using the
     `--grade' option to `mmc'.  (You will also need to install those
     grades of the Mercury library, if you have not already done so.)

   * If your compiler is particularly strict in enforcing ANSI
     compliance, you may also need to compile the Mercury code with
     `--no-static-ground-terms'.



File: mercury_user_guide.info,  Node: Foreign language interface,  Next: Stand-alone Interfaces,  Prev: C compilers,  Up: Top

12 Foreign language interface
*****************************

The Mercury foreign language interfaces allows pragma foreign_proc to
specify multiple implementations (in different foreign programming
languages) for a procedure.

   If the compiler generates code for a procedure using a back-end for
which there are multiple applicable foreign languages, it will choose
the foreign language to use for each procedure according to a builtin
ordering.

   If the language specified in a foreign_proc is not available for a
particular backend, it will be ignored.

   If there are no suitable foreign_proc clauses for a particular
procedure but there are Mercury clauses, they will be used instead.

`C'
     This is the default foreign language on all backends which compile
     to C or assembler.  Only available on backends that compile to C
     or assembler.

`C#'
     Only available on backends that compile to IL or C#.  This is the
     second preferred foreign language for IL code generation.

`Erlang'
     This is the only foreign language for backends which compile to
     Erlang.

`IL'
     IL is the intermediate language of the .NET Common Language
     Runtime (sometimes also known as CIL or MSIL).  Only available on
     backends that compile to IL.  This is the preferred foreign
     language for IL code generation.

`Java'
     This is the only foreign language for backends which compile to
     Java.



File: mercury_user_guide.info,  Node: Stand-alone Interfaces,  Next: Index,  Prev: Foreign language interface,  Up: Top

13 Stand-alone Interfaces
*************************

Programs written in a language other than Mercury should not make calls
to foreign exported Mercury procedures unless the Mercury runtime has
been initialised.  (In the case where the Mercury runtime has not been
initialised the behaviour of these calls is undefined.)  Such programs
must also ensure that any module specific initialisation is performed
before calling foreign exported procedures in Mercury modules.
Likewise, module specific finalisation may need to be performed after
all calls to Mercury procedures have been made.

   A stand-alone interface provides a mechanism by which non-Mercury
programs may initialise (and shut down) the Mercury runtime plus a
specified set of Mercury libraries.

   A stand-alone interface is created by invoking the compiler with the
`--generate-standalone-interface' option.  The set of Mercury libraries
to be included in the stand-alone interface is given via one of the
usual mechanisms for specifying what libraries to link against, e.g.
the `--ml' and `--mld' options.  (*note Libraries::).  The Mercury
standard library is always included in this set.

   In C grades the `--generate-standalone-interface' option causes the
compiler to generate an object file that should be linked into the
executable.  This object file contains two functions: `mercury_init()'
and `mercury_terminate()'.  The compiler also generates a C header file
that contains the prototypes of these functions.  (This header file may
be included in C++ programs.)  The roles of the two functions are
described below.

* `mercury_init()'
     Prototype:
          void mercury_init(int ARGC, char **ARGV, void *STACKBOTTOM);

     Initialise the Mercury runtime, standard library and any other
     Mercury libraries that were specified when the stand-alone
     interface was generated.  ARGC and ARGV are the argument count and
     argument vector, as would be passed to the function `main()' in a
     C program.  STACKBOTTOM is the address of the base of the stack.
     In grades that use conservative garbage collection this is used to
     tell the collector where to begin tracing.  This function must be
     called before any Mercury procedures and must only be called once.
     It is recommended that the value of STACKBOTTOM be set by passing
     the address of a local variable in the `main()' function of a
     program, for example:
              int main(int argc, char **argv) {
                  void *dummy;
                  mercury_init(argc, argv, &dummy);
                  ...
              }
     Note that the address of the stack base should be word aligned as
     some garbage collectors rely upon this.  (This is why the type of
     the dummy variable in the above example is `void *'.)  Note that
     modifying the argument vector, ARGV, after the Mercury runtime has
     been initialised will result in undefined behaviour since the
     runtime maintains a reference into ARGV.


* `mercury_terminate()'
     Prototype:
          int mercury_terminate(void);

     Shut down the Mercury runtime.  The value returned by this
     function is Mercury's exit status (as set by the predicate
     io.set_exit_status/3).  This function will also invoke any
     finalisers contained in the set of libraries for which the
     stand-alone interface was generated.

   The basename of the object and header file are provided as the
argument of `--generate-standalone-interface' option.

   Stand-alone interfaces are not currently supported for target
languages other than C.  For an example of using a stand-alone
interface see the `samples/c_interface/standalone_c' directory in the
Mercury distribution.


File: mercury_user_guide.info,  Node: Index,  Prev: Stand-alone Interfaces,  Up: Top

Index
*****

 [index ]
* Menu:

* ---ite-instead-of-switch:              Warning options.     (line 191)
* --allow-stubs:                         Language semantics options.
                                                              (line  24)
* --analyse-exceptions:                  High-level (HLDS -> HLDS) optimization options.
                                                              (line 192)
* --analyse-mm-tabling:                  High-level (HLDS -> HLDS) optimization options.
                                                              (line 203)
* --analyse-trail-usage:                 High-level (HLDS -> HLDS) optimization options.
                                                              (line 197)
* --analysis-repeat:                     Overall optimization options.
                                                              (line  79)
* --asm-labels <1>:                      LLDS back-end compilation model options.
                                                              (line  23)
* --asm-labels:                          Grades and grade components.
                                                              (line  63)
* --assume-gmake:                        Auxiliary output options.
                                                              (line  14)
* --auto-comments:                       Auxiliary output options.
                                                              (line  47)
* --benchmark-modes:                     Auxiliary output options.
                                                              (line 168)
* --benchmark-modes-repeat NUM:          Auxiliary output options.
                                                              (line 173)
* --binary-switch-size:                  Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  64)
* --boehm-gc-calc-time:                  Environment.         (line 336)
* --boehm-gc-free-space-divisor=N:       Environment.         (line 328)
* --c-debug:                             Target code compilation options.
                                                              (line  11)
* --c-include-dir:                       Target code compilation options.
                                                              (line  24)
* --c-include-directory:                 Target code compilation options.
                                                              (line  24)
* --cc <1>:                              C compilers.         (line   6)
* --cc:                                  Target code compilation options.
                                                              (line  18)
* --cflag:                               Target code compilation options.
                                                              (line  60)
* --cflags:                              Target code compilation options.
                                                              (line  60)
* --check-term:                          Termination analysis options.
                                                              (line  23)
* --check-termination:                   Termination analysis options.
                                                              (line  23)
* --checked-nondet-tailcalls:            Low-level (LLDS -> LLDS) optimization options.
                                                              (line  36)
* --chk-term:                            Termination analysis options.
                                                              (line  23)
* --cil-interpreter:                     Target code compilation options.
                                                              (line 103)
* --common-data:                         Low-level (LLDS -> LLDS) optimization options.
                                                              (line  10)
* --common-layout-data:                  Low-level (LLDS -> LLDS) optimization options.
                                                              (line  13)
* --common-struct:                       High-level (HLDS -> HLDS) optimization options.
                                                              (line  52)
* --compare-specialization N:            Code generation options.
                                                              (line  50)
* --compile-only:                        Output options.      (line 126)
* --compile-to-c:                        Target options.      (line  23)
* --config-file:                         Build system options.
                                                              (line 123)
* --constraint-propagation:              High-level (HLDS -> HLDS) optimization options.
                                                              (line  55)
* --control-granularity:                 Miscellaneous options.
                                                              (line  33)
* --convert-to-mercury:                  Output options.      (line  97)
* --coverage-profiling:                  Optional features compilation model options.
                                                              (line  43)
* --coverage-test:                       Environment.         (line 281)
* --coverage-test-if-exec=PROG:          Environment.         (line 294)
* --csharp:                              Grades and grade components.
                                                              (line  63)
* --csharp-compiler:                     Target code compilation options.
                                                              (line  92)
* --csharp-flag:                         Target code compilation options.
                                                              (line  97)
* --csharp-flags:                        Target code compilation options.
                                                              (line  97)
* --csharp-only:                         Target options.      (line  29)
* --cutstack-size:                       Environment.         (line 203)
* --cutstack-size-kwords:                Environment.         (line 207)
* --debug <1>:                           Optional features compilation model options.
                                                              (line   8)
* --debug:                               Quick overview.      (line  15)
* --debug-det:                           Verbosity options.   (line  84)
* --debug-determinism:                   Verbosity options.   (line  84)
* --debug-indirect-reuse:                Verbosity options.   (line 123)
* --debug-intermodule-analysis:          Verbosity options.   (line 118)
* --debug-liveness:                      Verbosity options.   (line 109)
* --debug-make:                          Verbosity options.   (line 114)
* --debug-modes:                         Verbosity options.   (line  70)
* --debug-modes-pred-id:                 Verbosity options.   (line  78)
* --debug-modes-verbose:                 Verbosity options.   (line  74)
* --debug-opt:                           Verbosity options.   (line  88)
* --debug-opt-pred-id:                   Verbosity options.   (line  92)
* --debug-opt-pred-name:                 Verbosity options.   (line  98)
* --debug-pd:                            Verbosity options.   (line 104)
* --debug-threads (runtime option):      Environment.         (line 245)
* --decl-debug:                          Optional features compilation model options.
                                                              (line  15)
* --deep-profiling <1>:                  Optional features compilation model options.
                                                              (line  37)
* --deep-profiling:                      Grades and grade components.
                                                              (line  63)
* --deforestation:                       High-level (HLDS -> HLDS) optimization options.
                                                              (line 167)
* --deforestation-depth-limit:           High-level (HLDS -> HLDS) optimization options.
                                                              (line 174)
* --deforestation-size-threshold:        High-level (HLDS -> HLDS) optimization options.
                                                              (line 186)
* --deforestation-vars-threshold:        High-level (HLDS -> HLDS) optimization options.
                                                              (line 180)
* --delay-constructs:                    High-level (HLDS -> HLDS) optimization options.
                                                              (line 157)
* --delay-death:                         Auxiliary output options.
                                                              (line  31)
* --demangle:                            Using mprof for time profiling.
                                                              (line   9)
* --dense-switch-req-density:            Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  22)
* --dense-switch-size:                   Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  27)
* --detstack-size:                       Running.             (line  17)
* --detstack-size (runtime option):      Environment.         (line 119)
* --detstack-size-kwords (runtime option): Environment.       (line 123)
* --distance-granularity:                Miscellaneous options.
                                                              (line  39)
* --dump-hlds:                           Auxiliary output options.
                                                              (line  78)
* --dump-hlds-file-suffix:               Auxiliary output options.
                                                              (line 127)
* --dump-hlds-options:                   Auxiliary output options.
                                                              (line  88)
* --dump-hlds-pred-id:                   Auxiliary output options.
                                                              (line 115)
* --dump-hlds-pred-name:                 Auxiliary output options.
                                                              (line 121)
* --dump-mlds:                           Auxiliary output options.
                                                              (line 137)
* --dump-same-hlds:                      Auxiliary output options.
                                                              (line 132)
* --eliminate-local-variables:           MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  22)
* --enable-term:                         Termination analysis options.
                                                              (line  12)
* --enable-termination:                  Termination analysis options.
                                                              (line  12)
* --env-type:                            Build system options.
                                                              (line 197)
* --erlang:                              Grades and grade components.
                                                              (line  63)
* --erlang-compiler:                     Target code compilation options.
                                                              (line 108)
* --erlang-flag:                         Target code compilation options.
                                                              (line 117)
* --erlang-flags:                        Target code compilation options.
                                                              (line 117)
* --erlang-include-dir:                  Target code compilation options.
                                                              (line 124)
* --erlang-include-directory:            Target code compilation options.
                                                              (line 124)
* --erlang-interpreter:                  Target code compilation options.
                                                              (line 112)
* --erlang-native-code:                  Target code compilation options.
                                                              (line 129)
* --erlang-only:                         Target options.      (line  41)
* --erlang-switch-on-strings-as-atoms:   Erlang (HLDS -> ELDS) optimization options.
                                                              (line   7)
* --errorcheck-only:                     Output options.      (line 113)
* --excess-assign:                       High-level (HLDS -> HLDS) optimization options.
                                                              (line 142)
* --experimental-complexity:             Optional features compilation model options.
                                                              (line  63)
* --extra-init-command:                  Build system options.
                                                              (line  54)
* --extra-initialization-functions:      Link options.        (line 152)
* --extra-inits:                         Link options.        (line 152)
* --extra-lib-header:                    Build system options.
                                                              (line 186)
* --extra-library-header:                Build system options.
                                                              (line 186)
* --fact-table-hash-percent-full:        Code generation options.
                                                              (line  73)
* --fact-table-max-array-size SIZE:      Code generation options.
                                                              (line  65)
* --feedback-file:                       Miscellaneous options.
                                                              (line  51)
* --filenames-from-stdin:                Miscellaneous options.
                                                              (line  14)
* --find-all-recompilation-reasons:      Verbosity options.   (line  38)
* --flags:                               Build system options.
                                                              (line 111)
* --flags-file:                          Build system options.
                                                              (line 111)
* --follow-code:                         High-level (HLDS -> HLDS) optimization options.
                                                              (line  66)
* --fp-rounding-mode  MODE:              Environment.         (line 344)
* --framework:                           Link options.        (line 173)
* --framework-directory:                 Link options.        (line 178)
* --garbage-collection:                  Optional features compilation model options.
                                                              (line  71)
* --gc <1>:                              Optional features compilation model options.
                                                              (line  71)
* --gc:                                  Grades and grade components.
                                                              (line  63)
* --gcc-global-registers <1>:            LLDS back-end compilation model options.
                                                              (line   9)
* --gcc-global-registers:                Grades and grade components.
                                                              (line  63)
* --gcc-non-local-gotos:                 LLDS back-end compilation model options.
                                                              (line  16)
* --gcc-nonlocal-gotos:                  Grades and grade components.
                                                              (line  63)
* --generate-bytecode:                   Auxiliary output options.
                                                              (line  43)
* --generate-dependencies:               Output options.      (line  23)
* --generate-dependency-file:            Output options.      (line  29)
* --generate-mmc-deps:                   Output options.      (line  46)
* --generate-mmc-make-module-dependencies: Output options.    (line  46)
* --generate-module-order:               Output options.      (line  33)
* --generate-source-file-mapping:        Output options.      (line  13)
* --generate-standalone-interface BASENAME: Output options.   (line  39)
* --generate-trail-ops-inline:           MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  26)
* --genstack-size:                       Environment.         (line 194)
* --genstack-size-kwords:                Environment.         (line 198)
* --grade:                               Grades and grade components.
                                                              (line   8)
* --halt-at-auto-parallel-failure:       Warning options.     (line  28)
* --halt-at-syntax-error:                Warning options.     (line  19)
* --halt-at-warn:                        Warning options.     (line  12)
* --have-delay-slot:                     Code generation target options.
                                                              (line  16)
* --heap-size (runtime option):          Environment.         (line 110)
* --heap-size-kwords (runtime option):   Environment.         (line 114)
* --help <1>:                            Miscellaneous options.
                                                              (line  10)
* --help:                                Invocation.          (line   8)
* --high-level-code <1>:                 MLDS back-end compilation model options.
                                                              (line   7)
* --high-level-code <2>:                 Grades and grade components.
                                                              (line  63)
* --high-level-code:                     Using mprof for time profiling.
                                                              (line   9)
* --high-level-data:                     MLDS back-end compilation model options.
                                                              (line  12)
* --higher-order-arg-limit:              High-level (HLDS -> HLDS) optimization options.
                                                              (line 119)
* --higher-order-size-limit:             High-level (HLDS -> HLDS) optimization options.
                                                              (line 112)
* --host-env-type:                       Build system options.
                                                              (line 206)
* --il:                                  Grades and grade components.
                                                              (line  63)
* --implicit-parallelism:                Miscellaneous options.
                                                              (line  44)
* --imports-graph:                       Auxiliary output options.
                                                              (line  71)
* --infer-all:                           Language semantics options.
                                                              (line  31)
* --infer-det:                           Language semantics options.
                                                              (line  46)
* --infer-determinism:                   Language semantics options.
                                                              (line  46)
* --infer-modes:                         Language semantics options.
                                                              (line  40)
* --infer-types:                         Language semantics options.
                                                              (line  35)
* --inhibit-accumulator-warnings:        Warning options.     (line  33)
* --inhibit-warnings:                    Warning options.     (line   8)
* --init-file <1>:                       Link options.        (line 106)
* --init-file:                           Using non-installed libraries with mmc --make.
                                                              (line   6)
* --init-file-directory:                 Link options.        (line 101)
* --inline-alloc:                        Target code compilation options.
                                                              (line  51)
* --inline-compound-threshold:           High-level (HLDS -> HLDS) optimization options.
                                                              (line  25)
* --inline-simple:                       High-level (HLDS -> HLDS) optimization options.
                                                              (line  13)
* --inline-simple-threshold:             High-level (HLDS -> HLDS) optimization options.
                                                              (line  30)
* --inline-single-use:                   High-level (HLDS -> HLDS) optimization options.
                                                              (line  22)
* --inline-vars-threshold:               High-level (HLDS -> HLDS) optimization options.
                                                              (line  40)
* --inlining:                            High-level (HLDS -> HLDS) optimization options.
                                                              (line  10)
* --install-command:                     Build system options.
                                                              (line  65)
* --install-command-dir-command:         Build system options.
                                                              (line  72)
* --install-prefix:                      Build system options.
                                                              (line  61)
* --intermod-directory:                  Build system options.
                                                              (line 147)
* --intermod-inline-simple-threshold:    High-level (HLDS -> HLDS) optimization options.
                                                              (line  33)
* --intermod-opt:                        Overall optimization options.
                                                              (line  44)
* --intermod-unused-args:                High-level (HLDS -> HLDS) optimization options.
                                                              (line  75)
* --intermodule-analysis:                Overall optimization options.
                                                              (line  74)
* --intermodule-optimization <1>:        Overall optimization options.
                                                              (line  44)
* --intermodule-optimization <2>:        Using libraries with Mmake.
                                                              (line  16)
* --intermodule-optimization:            Building libraries with Mmake.
                                                              (line  61)
* --introduce-accumulators:              High-level (HLDS -> HLDS) optimization options.
                                                              (line 128)
* --java:                                Grades and grade components.
                                                              (line  63)
* --java-archive-command:                Link options.        (line 169)
* --java-classpath:                      Target code compilation options.
                                                              (line  83)
* --java-compiler:                       Target code compilation options.
                                                              (line  68)
* --java-flag:                           Target code compilation options.
                                                              (line  77)
* --java-flags:                          Target code compilation options.
                                                              (line  77)
* --java-interpreter:                    Target code compilation options.
                                                              (line  72)
* --java-object-file-extension:          Target code compilation options.
                                                              (line  87)
* --java-only:                           Target options.      (line  35)
* --javac:                               Target code compilation options.
                                                              (line  68)
* --jobs:                                Build system options.
                                                              (line  29)
* --keep-going:                          Build system options.
                                                              (line  22)
* --layout-compression-limit:            Low-level (LLDS -> LLDS) optimization options.
                                                              (line  76)
* --ld-flag:                             Link options.        (line  18)
* --ld-flags:                            Link options.        (line  18)
* --ld-libflag:                          Link options.        (line  27)
* --ld-libflags:                         Link options.        (line  27)
* --lib-linkage:                         Build system options.
                                                              (line 104)
* --libgrade:                            Build system options.
                                                              (line  79)
* --libgrade-exclude:                    Build system options.
                                                              (line  98)
* --libgrade-include-component:          Build system options.
                                                              (line  91)
* --libgrades-exclude-component:         Build system options.
                                                              (line  98)
* --libgrades-include:                   Build system options.
                                                              (line  91)
* --library:                             Link options.        (line  54)
* --library-directory:                   Link options.        (line  35)
* --line-numbers:                        Auxiliary output options.
                                                              (line  56)
* --link-executable-command:             Link options.        (line 159)
* --link-object <1>:                     Link options.        (line  58)
* --link-object:                         Using non-installed libraries with mmc --make.
                                                              (line   6)
* --link-shared-lib-command:             Link options.        (line 164)
* --linkage:                             Link options.        (line 115)
* --llds-optimize <1>:                   Low-level (LLDS -> LLDS) optimization options.
                                                              (line  16)
* --llds-optimize:                       Auxiliary output options.
                                                              (line  51)
* --local-constraint-propagation:        High-level (HLDS -> HLDS) optimization options.
                                                              (line  60)
* --lookup-switch-req-density:           Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  32)
* --lookup-switch-size:                  Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  38)
* --loop-invariants:                     High-level (HLDS -> HLDS) optimization options.
                                                              (line  45)
* --low-level-debug:                     Code generation options.
                                                              (line   7)
* --make <1>:                            Build system options.
                                                              (line   8)
* --make <2>:                            Output options.      (line  46)
* --make <3>:                            Verbosity options.   (line  23)
* --make <4>:                            Warning options.     (line 132)
* --make:                                Using Mmake.         (line 308)
* --make-int <1>:                        Output options.      (line  54)
* --make-int <2>:                        Using mmc.           (line  64)
* --make-int:                            Filenames.           (line  27)
* --make-interface <1>:                  Output options.      (line  54)
* --make-interface:                      Filenames.           (line  27)
* --make-opt-int <1>:                    Output options.      (line  72)
* --make-opt-int:                        Using mmc.           (line  69)
* --make-optimization-interface <1>:     Output options.      (line  72)
* --make-optimization-interface:         Filenames.           (line  27)
* --make-priv-int <1>:                   Output options.      (line  66)
* --make-priv-int:                       Using mmc.           (line  64)
* --make-priv-interface:                 Filenames.           (line  27)
* --make-private-interface <1>:          Output options.      (line  66)
* --make-private-interface:              Filenames.           (line  27)
* --make-short-int <1>:                  Output options.      (line  60)
* --make-short-int <2>:                  Using mmc.           (line  64)
* --make-short-int:                      Filenames.           (line  27)
* --make-short-interface <1>:            Output options.      (line  60)
* --make-short-interface:                Filenames.           (line  27)
* --make-trans-opt <1>:                  Output options.      (line  78)
* --make-trans-opt:                      Using mmc.           (line  75)
* --make-trans-opt-int:                  Filenames.           (line  27)
* --make-transitive-optimization-interface <1>: Output options.
                                                              (line  78)
* --make-transitive-optimization-interface: Filenames.        (line  27)
* --make-xml-documentation:              Output options.      (line  89)
* --max-contexts-per-thread (runtime option): Environment.    (line  73)
* --max-error-line-width:                Auxiliary output options.
                                                              (line  62)
* --max-jump-table-size N:               Code generation options.
                                                              (line  41)
* --maybe-thread-safe:                   Optional features compilation model options.
                                                              (line 121)
* --mdb-err (runtime option):            Environment.         (line 234)
* --mdb-in (runtime option):             Environment.         (line 222)
* --mdb-in-window (mdb option):          Mercury debugger invocation.
                                                              (line  62)
* --mdb-out (runtime option):            Environment.         (line 229)
* --mdb-tty (runtime option):            Environment.         (line 240)
* --mem-usage-report PREFIX:             Environment.         (line 255)
* --memory-profiling <1>:                Optional features compilation model options.
                                                              (line  28)
* --memory-profiling:                    Grades and grade components.
                                                              (line  63)
* --mercury-config-dir:                  Build system options.
                                                              (line 137)
* --mercury-configuration-directory:     Build system options.
                                                              (line 137)
* --mercury-library <1>:                 Link options.        (line  83)
* --mercury-library:                     Using installed libraries with mmc --make.
                                                              (line   6)
* --mercury-library-directory <1>:       Link options.        (line  74)
* --mercury-library-directory:           Using installed libraries with mmc --make.
                                                              (line   6)
* --mercury-linkage:                     Link options.        (line 120)
* --mercury-standard-library-directory:  Link options.        (line  89)
* --mercury-stdlib-dir:                  Link options.        (line  89)
* --middle-rec:                          Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  74)
* --ml <1>:                              Link options.        (line  83)
* --ml:                                  Using installed libraries with mmc --make.
                                                              (line   6)
* --mld <1>:                             Link options.        (line  74)
* --mld:                                 Using installed libraries with mmc --make.
                                                              (line   6)
* --mlds-optimize:                       MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line   9)
* --mode-constraints:                    Auxiliary output options.
                                                              (line 153)
* --no-:                                 Invocation overview. (line  22)
* --no-allow-undefined:                  Link options.        (line 139)
* --no-ansi-c:                           Target code compilation options.
                                                              (line  45)
* --no-asm-labels <1>:                   LLDS back-end compilation model options.
                                                              (line  23)
* --no-asm-labels:                       Grades and grade components.
                                                              (line  63)
* --no-assume-gmake:                     Auxiliary output options.
                                                              (line  14)
* --no-c-optimize:                       Target code compilation options.
                                                              (line  41)
* --no-common-data:                      Low-level (LLDS -> LLDS) optimization options.
                                                              (line  10)
* --no-common-struct:                    High-level (HLDS -> HLDS) optimization options.
                                                              (line  52)
* --no-delay-death:                      Auxiliary output options.
                                                              (line  31)
* --no-demangle <1>:                     Link options.        (line 130)
* --no-demangle:                         Using mprof for time profiling.
                                                              (line   9)
* --no-eliminate-local-variables:        MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  22)
* --no-emit-c-loops:                     Output-level (LLDS -> C) optimization options.
                                                              (line  10)
* --no-erlang-inhibit-trivial-warnings:  Target code compilation options.
                                                              (line 136)
* --no-erlang-switch-on-strings-as-atoms: Erlang (HLDS -> ELDS) optimization options.
                                                              (line   7)
* --no-follow-code:                      High-level (HLDS -> HLDS) optimization options.
                                                              (line  66)
* --no-fully-strict:                     Language semantics options.
                                                              (line  19)
* --no-gcc-global-registers <1>:         LLDS back-end compilation model options.
                                                              (line   9)
* --no-gcc-global-registers:             Grades and grade components.
                                                              (line  63)
* --no-gcc-non-local-gotos:              LLDS back-end compilation model options.
                                                              (line  16)
* --no-gcc-nonlocal-gotos:               Grades and grade components.
                                                              (line  63)
* --no-generate-trail-ops-inline:        MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  26)
* --no-high-level-code:                  Grades and grade components.
                                                              (line  63)
* --no-infer-det:                        Language semantics options.
                                                              (line  46)
* --no-infer-determinism:                Language semantics options.
                                                              (line  46)
* --no-inform-inferred:                  Warning options.     (line 216)
* --no-inform-inferred-modes:            Warning options.     (line 224)
* --no-inform-inferred-types:            Warning options.     (line 220)
* --no-inline-builtins:                  High-level (HLDS -> HLDS) optimization options.
                                                              (line  17)
* --no-inline-simple:                    High-level (HLDS -> HLDS) optimization options.
                                                              (line  13)
* --no-inline-single-use:                High-level (HLDS -> HLDS) optimization options.
                                                              (line  22)
* --no-inlining:                         High-level (HLDS -> HLDS) optimization options.
                                                              (line  10)
* --no-layout-common-data:               Low-level (LLDS -> LLDS) optimization options.
                                                              (line  13)
* --no-libgrade:                         Build system options.
                                                              (line  84)
* --no-libgrade-install-check:           Build system options.
                                                              (line 157)
* --no-line-numbers:                     Auxiliary output options.
                                                              (line  56)
* --no-llds-optimize <1>:                Low-level (LLDS -> LLDS) optimization options.
                                                              (line  16)
* --no-llds-optimize:                    Auxiliary output options.
                                                              (line  51)
* --no-local-thread-engine-base:         Output-level (LLDS -> C) optimization options.
                                                              (line  28)
* --no-main:                             Link options.        (line 134)
* --no-mercury-standard-library-directory: Link options.      (line  96)
* --no-mercury-stdlib-dir:               Link options.        (line  96)
* --no-middle-rec:                       Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  74)
* --no-mlds-optimize:                    MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line   9)
* --no-optimize-delay-slot:              Low-level (LLDS -> LLDS) optimization options.
                                                              (line  63)
* --no-optimize-format-calls:            High-level (HLDS -> HLDS) optimization options.
                                                              (line 146)
* --no-optimize-frames:                  Low-level (LLDS -> LLDS) optimization options.
                                                              (line  59)
* --no-optimize-fulljumps:               Low-level (LLDS -> LLDS) optimization options.
                                                              (line  28)
* --no-optimize-initializations:         MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  17)
* --no-optimize-jumps:                   Low-level (LLDS -> LLDS) optimization options.
                                                              (line  24)
* --no-optimize-labels:                  Low-level (LLDS -> LLDS) optimization options.
                                                              (line  47)
* --no-optimize-peep:                    Low-level (LLDS -> LLDS) optimization options.
                                                              (line  20)
* --no-optimize-tailcalls:               MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  13)
* --no-read-opt-files-transitively:      Overall optimization options.
                                                              (line  60)
* --no-reclaim-heap-on-failure:          Code generation options.
                                                              (line  37)
* --no-reclaim-heap-on-nondet-failure:   Code generation options.
                                                              (line  29)
* --no-reclaim-heap-on-semidet-failure:  Code generation options.
                                                              (line  33)
* --no-reorder-conj:                     Language semantics options.
                                                              (line  10)
* --no-reorder-disj:                     Language semantics options.
                                                              (line  15)
* --no-should-pretest-equality:          Code generation options.
                                                              (line  59)
* --no-simple-neg:                       Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  78)
* --no-smart-indexing:                   Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  17)
* --no-static-ground-terms:              Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  10)
* --no-strip:                            Link options.        (line 126)
* --no-trad-passes <1>:                  Code generation options.
                                                              (line  22)
* --no-trad-passes:                      Verbosity options.   (line  60)
* --no-trail-segments:                   Grades and grade components.
                                                              (line  63)
* --no-type-layout:                      Developer compilation model options.
                                                              (line  43)
* --no-use-atomic-cells:                 Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  69)
* --no-use-readline:                     Link options.        (line 143)
* --no-verbose-make:                     Verbosity options.   (line  23)
* --no-warn-det-decls-too-lax:           Warning options.     (line  50)
* --no-warn-inferred-erroneous:          Warning options.     (line  55)
* --no-warn-insts-without-matching-type: Warning options.     (line  60)
* --no-warn-known-bad-format-calls:      Warning options.     (line 174)
* --no-warn-missing-det-decls:           Warning options.     (line  42)
* --no-warn-missing-module-name:         Warning options.     (line 118)
* --no-warn-non-contiguous-clauses:      Warning options.     (line  91)
* --no-warn-non-term-special-preds:      Warning options.     (line 167)
* --no-warn-nothing-exported:            Warning options.     (line  69)
* --no-warn-obsolete:                    Warning options.     (line 186)
* --no-warn-simple-code:                 Warning options.     (line 108)
* --no-warn-singleton-variables:         Warning options.     (line  38)
* --no-warn-smart-recompilation:         Warning options.     (line 128)
* --no-warn-state-var-shadowing:         Warning options.     (line 212)
* --no-warn-stubs:                       Warning options.     (line 152)
* --no-warn-table-with-inline:           Warning options.     (line 162)
* --no-warn-target-code:                 Warning options.     (line 142)
* --no-warn-undefined-options-variables: Warning options.     (line 132)
* --no-warn-unresolved-polymorphism:     Warning options.     (line 196)
* --no-warn-unused-imports:              Warning options.     (line  65)
* --no-warn-up-to-date:                  Warning options.     (line 147)
* --no-warn-wrong-module-name:           Warning options.     (line 123)
* --nondetstack-size:                    Running.             (line  17)
* --nondetstack-size (runtime option):   Environment.         (line 128)
* --nondetstack-size-kwords (runtime option): Environment.    (line 132)
* --num-real-f-regs:                     Code generation target options.
                                                              (line  26)
* --num-real-f-temps:                    Code generation target options.
                                                              (line  37)
* --num-real-r-regs:                     Code generation target options.
                                                              (line  21)
* --num-real-r-temps:                    Code generation target options.
                                                              (line  31)
* --num-tag-bits:                        Developer compilation model options.
                                                              (line  19)
* --opt-level:                           Overall optimization options.
                                                              (line   9)
* --opt-space:                           Overall optimization options.
                                                              (line  38)
* --optimization-level:                  Overall optimization options.
                                                              (line   9)
* --optimize-constant-propagation:       High-level (HLDS -> HLDS) optimization options.
                                                              (line 124)
* --optimize-constructor-last-call:      High-level (HLDS -> HLDS) optimization options.
                                                              (line 133)
* --optimize-dead-procs:                 High-level (HLDS -> HLDS) optimization options.
                                                              (line 138)
* --optimize-delay-slot:                 Low-level (LLDS -> LLDS) optimization options.
                                                              (line  63)
* --optimize-duplicate-calls:            High-level (HLDS -> HLDS) optimization options.
                                                              (line 152)
* --optimize-dups:                       Low-level (LLDS -> LLDS) optimization options.
                                                              (line  51)
* --optimize-frames:                     Low-level (LLDS -> LLDS) optimization options.
                                                              (line  59)
* --optimize-fulljumps:                  Low-level (LLDS -> LLDS) optimization options.
                                                              (line  28)
* --optimize-higher-order:               High-level (HLDS -> HLDS) optimization options.
                                                              (line  95)
* --optimize-initializations:            MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  17)
* --optimize-jumps:                      Low-level (LLDS -> LLDS) optimization options.
                                                              (line  24)
* --optimize-labels:                     Low-level (LLDS -> LLDS) optimization options.
                                                              (line  47)
* --optimize-peep:                       Low-level (LLDS -> LLDS) optimization options.
                                                              (line  20)
* --optimize-proc-dups:                  Low-level (LLDS -> LLDS) optimization options.
                                                              (line  55)
* --optimize-reassign:                   Low-level (LLDS -> LLDS) optimization options.
                                                              (line  67)
* --optimize-repeat:                     Low-level (LLDS -> LLDS) optimization options.
                                                              (line  72)
* --optimize-saved-vars:                 High-level (HLDS -> HLDS) optimization options.
                                                              (line 162)
* --optimize-space:                      Overall optimization options.
                                                              (line  38)
* --optimize-tailcalls:                  MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line  13)
* --optimize-unused-args:                High-level (HLDS -> HLDS) optimization options.
                                                              (line  70)
* --options-file:                        Build system options.
                                                              (line 116)
* --options-search-directory:            Build system options.
                                                              (line 131)
* --order-make-by-timestamp:             Build system options.
                                                              (line 175)
* --output-c-compiler-type:              Output options.      (line 155)
* --output-cc:                           Output options.      (line 150)
* --output-cc-type:                      Output options.      (line 155)
* --output-cflags:                       Output options.      (line 159)
* --output-compile-error-lines:          Verbosity options.   (line  43)
* --output-file:                         Link options.        (line   9)
* --output-grade-string:                 Output options.      (line 131)
* --output-libgrades:                    Output options.      (line 145)
* --output-library-link-flags:           Output options.      (line 164)
* --output-link-command:                 Output options.      (line 136)
* --output-shared-lib-link-command:      Output options.      (line 140)
* --parallel <1>:                        Optional features compilation model options.
                                                              (line  97)
* --parallel:                            Building profiled applications.
                                                              (line   6)
* --pessimize-tailcalls:                 Low-level (LLDS -> LLDS) optimization options.
                                                              (line  32)
* --pic:                                 Code generation options.
                                                              (line  16)
* --pic-reg:                             LLDS back-end compilation model options.
                                                              (line  29)
* --pnegstack-size:                      Environment.         (line 212)
* --pnegstack-size-kwords:               Environment.         (line 216)
* --pre-link-command:                    Build system options.
                                                              (line  46)
* --pretty-print:                        Output options.      (line  97)
* --proc-size-statistics:                Verbosity options.   (line  64)
* --procs-per-c-function:                Output-level (LLDS -> C) optimization options.
                                                              (line  19)
* --profile-for-implicit-parallelism:    Optional features compilation model options.
                                                              (line  49)
* --profile-optimized:                   Auxiliary output options.
                                                              (line  28)
* --profiling <1>:                       Optional features compilation model options.
                                                              (line  21)
* --profiling:                           Grades and grade components.
                                                              (line  63)
* --program-in-window (mdb option):      Mercury debugger invocation.
                                                              (line  67)
* --rebuild:                             Build system options.
                                                              (line  16)
* --reclaim-heap-on-failure:             Code generation options.
                                                              (line  37)
* --reclaim-heap-on-nondet-failure:      Code generation options.
                                                              (line  29)
* --reclaim-heap-on-semidet-failure:     Code generation options.
                                                              (line  33)
* --record-term-sizes-as-cells <1>:      Optional features compilation model options.
                                                              (line  59)
* --record-term-sizes-as-cells:          Grades and grade components.
                                                              (line  63)
* --record-term-sizes-as-words <1>:      Optional features compilation model options.
                                                              (line  55)
* --record-term-sizes-as-words:          Grades and grade components.
                                                              (line  63)
* --reorder-conj:                        Language semantics options.
                                                              (line  10)
* --reorder-disj:                        Language semantics options.
                                                              (line  15)
* --report-cmd-line-args:                Verbosity options.   (line  48)
* --report-cmd-line-args-in-doterr:      Verbosity options.   (line  52)
* --reserved-addresses:                  Developer compilation model options.
                                                              (line  26)
* --restricted-command-line:             Build system options.
                                                              (line 191)
* --runtime-flags:                       Link options.        (line 147)
* --runtime-library-directory:           Link options.        (line  41)
* --search-directory:                    Build system options.
                                                              (line 142)
* --search-lib-files-dir <1>:            Link options.        (line  63)
* --search-lib-files-dir:                Using non-installed libraries with mmc --make.
                                                              (line   6)
* --search-library-files-directory:      Link options.        (line  63)
* --shlib-linker-install-name-path:      Link options.        (line  46)
* --should-pretest-equality:             Code generation options.
                                                              (line  59)
* --show-dependency-graph:               Auxiliary output options.
                                                              (line  67)
* --show-make-times:                     Build system options.
                                                              (line 180)
* --simple-mode-constraints:             Auxiliary output options.
                                                              (line 160)
* --simple-neg:                          Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  78)
* --single-prec-float <1>:               Optional features compilation model options.
                                                              (line 130)
* --single-prec-float:                   Grades and grade components.
                                                              (line  63)
* --small-detstack-size (runtime option): Environment.        (line 137)
* --small-detstack-size-kwords (runtime option): Environment. (line 143)
* --small-nondetstack-size (runtime option): Environment.     (line 149)
* --small-nondetstack-size-kwords (runtime option): Environment.
                                                              (line 155)
* --smart-indexing:                      Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  17)
* --smart-recompilation <1>:             Auxiliary output options.
                                                              (line   7)
* --smart-recompilation:                 Filenames.           (line  50)
* --solutions-heap-size (runtime option): Environment.        (line 162)
* --solutions-heap-size-kwords (runtime option): Environment. (line 166)
* --stack-segments <1>:                  LLDS back-end compilation model options.
                                                              (line  38)
* --stack-segments:                      Grades and grade components.
                                                              (line  63)
* --stack-trace-higher-order:            Auxiliary output options.
                                                              (line  38)
* --static-ground-terms:                 Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  10)
* --statistics:                          Verbosity options.   (line  58)
* --string-switch-size:                  Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  44)
* --tabling-statistics:                  Environment.         (line 251)
* --tag-switch-size:                     Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  54)
* --tags:                                Developer compilation model options.
                                                              (line  13)
* --target:                              Grades and grade components.
                                                              (line  63)
* --target-code-only:                    Output options.      (line 118)
* --target-debug:                        Target code compilation options.
                                                              (line  11)
* --target-env-type:                     Build system options.
                                                              (line 211)
* --term-err-limit:                      Termination analysis options.
                                                              (line  59)
* --term-path-limit:                     Termination analysis options.
                                                              (line  64)
* --term-single-arg LIMIT:               Termination analysis options.
                                                              (line  42)
* --termination-error-limit:             Termination analysis options.
                                                              (line  59)
* --termination-norm:                    Termination analysis options.
                                                              (line  49)
* --termination-path-limit:              Termination analysis options.
                                                              (line  64)
* --termination-single-argument-analysis: Termination analysis options.
                                                              (line  42)
* --thread-pinning:                      Environment.         (line  81)
* --threadscope <1>:                     Optional features compilation model options.
                                                              (line 115)
* --threadscope:                         Building profiled applications.
                                                              (line   6)
* --time-profiling:                      Optional features compilation model options.
                                                              (line  21)
* --trace-count:                         Environment.         (line 263)
* --trace-count-if-exec=PROG:            Environment.         (line 286)
* --trace-count-output-file=FILENAME:    Environment.         (line 302)
* --trace-count-summary-file=BASENAME:   Environment.         (line 306)
* --trace-count-summary-max=N:           Environment.         (line 310)
* --trace-init-file:                     Link options.        (line 110)
* --trace-level LEVEL:                   Auxiliary output options.
                                                              (line  20)
* --trace-optimized:                     Auxiliary output options.
                                                              (line  25)
* --trad-passes <1>:                     Code generation options.
                                                              (line  22)
* --trad-passes:                         Verbosity options.   (line  60)
* --trail-segment-size:                  Environment.         (line 182)
* --trail-segment-size-kwords:           Environment.         (line 188)
* --trail-segments <1>:                  Optional features compilation model options.
                                                              (line  90)
* --trail-segments:                      Grades and grade components.
                                                              (line  63)
* --trail-size:                          Environment.         (line 171)
* --trail-size-kwords:                   Environment.         (line 176)
* --trans-intermod-opt <1>:              Overall optimization options.
                                                              (line  50)
* --trans-intermod-opt:                  Building libraries with Mmake.
                                                              (line  65)
* --transitive-intermodule-optimization <1>: Overall optimization options.
                                                              (line  50)
* --transitive-intermodule-optimization: Using mmc.           (line  72)
* --try-switch-size:                     Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  59)
* --tty (mdb option):                    Mercury debugger invocation.
                                                              (line  53)
* --type-inference-iteration-limit:      Language semantics options.
                                                              (line  51)
* --type-layout:                         Developer compilation model options.
                                                              (line  43)
* --type-specialization:                 High-level (HLDS -> HLDS) optimization options.
                                                              (line 100)
* --typecheck-only:                      Output options.      (line 104)
* --unneeded-code:                       High-level (HLDS -> HLDS) optimization options.
                                                              (line  81)
* --unneeded-code-copy-limit:            High-level (HLDS -> HLDS) optimization options.
                                                              (line  87)
* --use-atomic-cells:                    Medium-level (HLDS -> LLDS) optimization options.
                                                              (line  69)
* --use-grade-subdirs:                   Build system options.
                                                              (line 167)
* --use-local-vars:                      Low-level (LLDS -> LLDS) optimization options.
                                                              (line  42)
* --use-macro-for-redo-fail:             Output-level (LLDS -> C) optimization options.
                                                              (line  14)
* --use-opt-files:                       Overall optimization options.
                                                              (line  64)
* --use-search-directories-for-intermod: Build system options.
                                                              (line 152)
* --use-subdirs <1>:                     Build system options.
                                                              (line 162)
* --use-subdirs:                         Filenames.           (line  14)
* --use-trail <1>:                       Optional features compilation model options.
                                                              (line  85)
* --use-trail:                           Grades and grade components.
                                                              (line  63)
* --use-trans-opt-files:                 Overall optimization options.
                                                              (line  69)
* --user-guided-type-specialization:     High-level (HLDS -> HLDS) optimization options.
                                                              (line 105)
* --verb-check-term:                     Termination analysis options.
                                                              (line  36)
* --verb-chk-term:                       Termination analysis options.
                                                              (line  36)
* --verbose:                             Verbosity options.   (line   8)
* --verbose-check-termination:           Termination analysis options.
                                                              (line  36)
* --verbose-commands:                    Verbosity options.   (line  28)
* --verbose-dump-mlds:                   Auxiliary output options.
                                                              (line 147)
* --verbose-error-messages:              Verbosity options.   (line  18)
* --verbose-recompilation:               Verbosity options.   (line  33)
* --very-verbose:                        Verbosity options.   (line  13)
* --warn-dead-procs:                     Warning options.     (line 158)
* --warn-det-decls-too-lax:              Warning options.     (line  50)
* --warn-duplicate-calls:                Warning options.     (line 113)
* --warn-inferred-erroneous:             Warning options.     (line  55)
* --warn-insts-without-matching-type:    Warning options.     (line  60)
* --warn-interface-imports:              Warning options.     (line  78)
* --warn-missing-det-decls:              Warning options.     (line  42)
* --warn-missing-module-name:            Warning options.     (line 118)
* --warn-missing-opt-files:              Warning options.     (line  83)
* --warn-missing-trans-opt-files:        Warning options.     (line  87)
* --warn-non-contiguous-foreign-procs:   Warning options.     (line  96)
* --warn-non-stratification:             Warning options.     (line 101)
* --warn-non-tail-recursion:             Warning options.     (line 137)
* --warn-nothing-exported:               Warning options.     (line  69)
* --warn-simple-code:                    Warning options.     (line 108)
* --warn-singleton-variables:            Warning options.     (line  38)
* --warn-smart-recompilation:            Warning options.     (line 128)
* --warn-stubs:                          Warning options.     (line 152)
* --warn-suspicious-foreign-procs:       Warning options.     (line 200)
* --warn-unknown-format-calls:           Warning options.     (line 180)
* --warn-unused-args:                    Warning options.     (line  74)
* --warn-unused-imports:                 Warning options.     (line  65)
* --warn-up-to-date:                     Warning options.     (line 147)
* --warn-wrong-module-name:              Warning options.     (line 123)
* --window (mdb option):                 Mercury debugger invocation.
                                                              (line  62)
* --window-command (mdb option):         Mercury debugger invocation.
                                                              (line  75)
* -?:                                    Miscellaneous options.
                                                              (line  10)
* -c:                                    Output options.      (line 126)
* -C:                                    Output options.      (line 118)
* -c:                                    Using mmc.           (line  87)
* -C (runtime option):                   Environment.         (line  45)
* -d:                                    Auxiliary output options.
                                                              (line  78)
* -D (runtime option):                   Environment.         (line  53)
* -e:                                    Output options.      (line 113)
* -E:                                    Verbosity options.   (line  18)
* -e (runtime option):                   Environment.         (line 234)
* -F:                                    Link options.        (line 178)
* -fpic:                                 LLDS back-end compilation model options.
                                                              (line  29)
* -h:                                    Miscellaneous options.
                                                              (line  10)
* -H:                                    MLDS back-end compilation model options.
                                                              (line   7)
* -I:                                    Build system options.
                                                              (line 142)
* -i:                                    Output options.      (line  54)
* -i (runtime option):                   Environment.         (line 222)
* -j <n>:                                Build system options.
                                                              (line  29)
* -k:                                    Build system options.
                                                              (line  22)
* -l:                                    Link options.        (line  54)
* -L:                                    Link options.        (line  35)
* -m:                                    Build system options.
                                                              (line   8)
* -M:                                    Output options.      (line  23)
* -m (runtime option):                   Environment.         (line 240)
* -N:                                    Verbosity options.   (line  70)
* -n-:                                   Auxiliary output options.
                                                              (line  56)
* -o:                                    Link options.        (line   9)
* -O:                                    Overall optimization options.
                                                              (line   9)
* -o:                                    Using mmc.           (line  84)
* -o (runtime option):                   Environment.         (line 229)
* -P:                                    Output options.      (line  97)
* -P (runtime option):                   Environment.         (line  65)
* -p (runtime option):                   Environment.         (line  60)
* -R:                                    Link options.        (line  41)
* -r:                                    Build system options.
                                                              (line  16)
* -s:                                    Grades and grade components.
                                                              (line   8)
* -S:                                    Verbosity options.   (line  58)
* -T (runtime option):                   Environment.         (line  89)
* -track-flags:                          Build system options.
                                                              (line  38)
* -V:                                    Verbosity options.   (line  13)
* -v:                                    Verbosity options.   (line   8)
* -w:                                    Warning options.     (line   8)
* .agc (grade modifier):                 Grades and grade components.
                                                              (line  14)
* .beams directories:                    Libraries and the Erlang grade.
                                                              (line   6)
* .debug (grade modifier):               Grades and grade components.
                                                              (line  14)
* .decldebug (grade modifier):           Grades and grade components.
                                                              (line  14)
* .gc (grade modifier):                  Grades and grade components.
                                                              (line  14)
* .mdbrc:                                Mercury debugger invocation.
                                                              (line  41)
* .memprof (grade modifier):             Grades and grade components.
                                                              (line  14)
* .mps (grade modifier):                 Grades and grade components.
                                                              (line  14)
* .par (grade modifier):                 Grades and grade components.
                                                              (line  14)
* .prof (grade modifier):                Grades and grade components.
                                                              (line  14)
* .profdeep (grade modifier):            Grades and grade components.
                                                              (line  14)
* .spf (grade modifier):                 Grades and grade components.
                                                              (line  14)
* .stseg (grade modifier):               Grades and grade components.
                                                              (line  14)
* .threadscope (grade modifier):         Grades and grade components.
                                                              (line  14)
* .tr (grade modifier):                  Grades and grade components.
                                                              (line  14)
* .trseg (grade modifier):               Grades and grade components.
                                                              (line  14)
* /debug:                                Target code compilation options.
                                                              (line  11)
* ABI (Application Binary Interface):    Compilation model options.
                                                              (line   6)
* Accumulator introduction:              High-level (HLDS -> HLDS) optimization options.
                                                              (line 128)
* Accurate garbage collection:           Optional features compilation model options.
                                                              (line  71)
* Addresses, reserved:                   Developer compilation model options.
                                                              (line  26)
* agc (grade modifier):                  Grades and grade components.
                                                              (line  14)
* alias (mdb command):                   Parameter commands.  (line 282)
* all_class_decls (mdb command):         Developer commands.  (line 167)
* all_procedures (mdb command):          Developer commands.  (line 178)
* all_regs (mdb command):                Developer commands.  (line  69)
* all_type_ctors (mdb command):          Developer commands.  (line 141)
* Allocation profiling <1>:              Optional features compilation model options.
                                                              (line  28)
* Allocation profiling <2>:              Using mprof for profiling memory allocation.
                                                              (line   6)
* Allocation profiling <3>:              Creating profiles.   (line   6)
* Allocation profiling <4>:              Building profiled applications.
                                                              (line   6)
* Allocation profiling:                  Profiling.           (line   6)
* ambiguity (mdb command):               Developer commands.  (line 193)
* Application Binary Interface (ABI):    Compilation model options.
                                                              (line   6)
* AR:                                    Building libraries with Mmake.
                                                              (line  44)
* ARFLAGS:                               Building libraries with Mmake.
                                                              (line  44)
* asm_fast (compilation grade):          Grades and grade components.
                                                              (line  14)
* asm_jump (compilation grade):          Grades and grade components.
                                                              (line  14)
* Automatic garbage collection:          Optional features compilation model options.
                                                              (line  71)
* Backtrackable destructive update:      Optional features compilation model options.
                                                              (line  85)
* Boehm (et al) conservative garbage collector: Optional features compilation model options.
                                                              (line  71)
* break (mdb command):                   Breakpoint commands. (line   9)
* break points:                          Mercury debugger concepts.
                                                              (line  10)
* break_print (mdb command):             Breakpoint commands. (line 263)
* Breakpoints:                           Breakpoint commands. (line   7)
* browse (mdb command):                  Browsing commands.   (line  61)
* Building profiled applications:        Building profiled applications.
                                                              (line   6)
* Building programs:                     Using Mmake.         (line   6)
* C compiler:                            Target code compilation options.
                                                              (line  18)
* C compiler options:                    Target code compilation options.
                                                              (line  60)
* C compilers:                           C compilers.         (line   6)
* C debugging:                           Target code compilation options.
                                                              (line  32)
* C# compiler:                           Target code compilation options.
                                                              (line  92)
* C# compiler options:                   Target code compilation options.
                                                              (line  97)
* c2init:                                Using mmc.           (line  97)
* C2INITARGS:                            Using Mmake.         (line 221)
* C2INITFLAGS:                           Using Mmake.         (line 212)
* call (trace event):                    Tracing of Mercury programs.
                                                              (line  12)
* Call graph profile:                    Using mprof for time profiling.
                                                              (line  19)
* cc_query (mdb command):                Interactive query commands.
                                                              (line   9)
* CFLAGS:                                Using Mmake.         (line 163)
* CIL interpreter:                       Target code compilation options.
                                                              (line 103)
* class_decl (mdb command):              Developer commands.  (line 155)
* classpath:                             Target code compilation options.
                                                              (line  83)
* Clauses, procedures without:           Language semantics options.
                                                              (line  24)
* clear_histogram (mdb command):         Experimental commands.
                                                              (line  21)
* Code generation options:               Code generation options.
                                                              (line   6)
* Compilation grades:                    Compilation model options.
                                                              (line   6)
* Compilation model options:             Compilation model options.
                                                              (line   6)
* Compilation models:                    Compilation model options.
                                                              (line   6)
* Compilation speed:                     Overall optimization options.
                                                              (line   9)
* cond (trace event):                    Tracing of Mercury programs.
                                                              (line  70)
* condition (mdb command):               Breakpoint commands. (line 204)
* Conservative garbage collection:       Optional features compilation model options.
                                                              (line  71)
* Constraint solving:                    Optional features compilation model options.
                                                              (line  85)
* consumer (mdb command):                Developer commands.  (line  31)
* context (mdb command):                 Parameter commands.  (line  95)
* continue (mdb command):                Forward movement commands.
                                                              (line 146)
* control-C:                             Mercury debugger concepts.
                                                              (line  63)
* Coverage Profiling:                    Optional features compilation model options.
                                                              (line  43)
* Creating profiles:                     Creating profiles.   (line   6)
* Cross-compiling <1>:                   Code generation target options.
                                                              (line   6)
* Cross-compiling:                       Developer compilation model options.
                                                              (line   6)
* Cross-module optimization:             Overall optimization options.
                                                              (line   9)
* Cross-module optimization, transitive: Overall optimization options.
                                                              (line  50)
* csharp (compilation grade):            Grades and grade components.
                                                              (line  14)
* current (mdb command):                 Browsing commands.   (line 190)
* Cut stack size:                        Environment.         (line 203)
* cut_stack (mdb command):               Developer commands.  (line  39)
* Data representation <1>:               Developer compilation model options.
                                                              (line  13)
* Data representation:                   Optional features compilation model options.
                                                              (line 130)
* Dead function elimination:             High-level (HLDS -> HLDS) optimization options.
                                                              (line 138)
* Dead predicate elimination:            High-level (HLDS -> HLDS) optimization options.
                                                              (line 138)
* Dead procedure elimination:            High-level (HLDS -> HLDS) optimization options.
                                                              (line 138)
* debug (grade modifier):                Grades and grade components.
                                                              (line  14)
* debug_vars (mdb command):              Developer commands.  (line  72)
* debugger break points:                 Mercury debugger concepts.
                                                              (line  10)
* debugger interrupt:                    Mercury debugger concepts.
                                                              (line  63)
* debugger print level:                  Mercury debugger concepts.
                                                              (line  68)
* debugger procedure specification:      Mercury debugger concepts.
                                                              (line 148)
* debugger trace events:                 Tracing of Mercury programs.
                                                              (line  12)
* debugger trace level:                  Preparing a program for debugging.
                                                              (line  44)
* Debugging <1>:                         Optional features compilation model options.
                                                              (line   8)
* Debugging:                             Debugging.           (line   6)
* Debugging the generated C code:        Target code compilation options.
                                                              (line  32)
* Debugging Threads:                     Environment.         (line 245)
* decldebug (grade modifier):            Grades and grade components.
                                                              (line  14)
* Deep profiling <1>:                    Optional features compilation model options.
                                                              (line  37)
* Deep profiling <2>:                    Using mdprof.        (line   6)
* Deep profiling <3>:                    Creating profiles.   (line   6)
* Deep profiling <4>:                    Building profiled applications.
                                                              (line   6)
* Deep profiling:                        Profiling.           (line   6)
* deep tracing:                          Preparing a program for debugging.
                                                              (line  44)
* delete (mdb command):                  Breakpoint commands. (line 311)
* dependencies:                          Output options.      (line  23)
* depth (mdb command):                   Parameter commands.  (line 241)
* Destructive update, backtrackable:     Optional features compilation model options.
                                                              (line  85)
* Determinism inference:                 Language semantics options.
                                                              (line  46)
* dice (mdb command):                    Experimental commands.
                                                              (line  25)
* diff (mdb command):                    Browsing commands.   (line 250)
* Directories <1>:                       Environment.         (line   6)
* Directories <2>:                       Target code compilation options.
                                                              (line  24)
* Directories:                           Build system options.
                                                              (line 142)
* Directories for libraries:             Link options.        (line  35)
* disable (mdb command):                 Breakpoint commands. (line 289)
* disj (trace event):                    Tracing of Mercury programs.
                                                              (line  70)
* document (mdb command):                Help commands.       (line  17)
* document_category (mdb command):       Help commands.       (line   9)
* down (mdb command):                    Browsing commands.   (line 159)
* dump (mdb command):                    Browsing commands.   (line 261)
* Duplicate call optimization:           High-level (HLDS -> HLDS) optimization options.
                                                              (line 152)
* echo (mdb command):                    Parameter commands.  (line  86)
* Efficiency:                            Profiling introduction.
                                                              (line   6)
* ELDS:                                  Erlang (HLDS -> ELDS) optimization options.
                                                              (line   6)
* else (trace event):                    Tracing of Mercury programs.
                                                              (line  70)
* Emacs:                                 GNU Emacs interface. (line   6)
* enable (mdb command):                  Breakpoint commands. (line 304)
* Environment variables:                 Environment.         (line   6)
* erlang (compilation grade):            Grades and grade components.
                                                              (line  14)
* Erlang compiler:                       Target code compilation options.
                                                              (line 108)
* Erlang compiler options:               Target code compilation options.
                                                              (line 117)
* Erlang interpreter:                    Target code compilation options.
                                                              (line 112)
* Erlang libraries:                      Libraries and the Erlang grade.
                                                              (line   6)
* ERLANG_FLAGS:                          Using Mmake.         (line 169)
* exception (mdb command):               Forward movement commands.
                                                              (line  70)
* exit (trace event):                    Tracing of Mercury programs.
                                                              (line  12)
* EXTRA_C2INITARGS:                      Using Mmake.         (line 221)
* EXTRA_C2INITFLAGS:                     Using Mmake.         (line 212)
* EXTRA_CFLAGS:                          Using Mmake.         (line 163)
* EXTRA_ERLANG_FLAGS:                    Using Mmake.         (line 169)
* EXTRA_GRADEFLAGS:                      Using Mmake.         (line 147)
* EXTRA_JAVACFLAGS:                      Using Mmake.         (line 166)
* EXTRA_LD_LIBFLAGS:                     Using Mmake.         (line 197)
* EXTRA_LDFLAGS:                         Using Mmake.         (line 192)
* EXTRA_LIB_DIRS <1>:                    Using libraries with Mmake.
                                                              (line  15)
* EXTRA_LIB_DIRS:                        Using Mmake.         (line 236)
* EXTRA_LIBRARIES <1>:                   Using libraries with Mmake.
                                                              (line  15)
* EXTRA_LIBRARIES:                       Using Mmake.         (line 227)
* EXTRA_MC_MAKE_FLAGS:                   Using Mmake.         (line 343)
* EXTRA_MCFLAGS:                         Using Mmake.         (line 152)
* EXTRA_MGNUCFLAGS:                      Using Mmake.         (line 160)
* EXTRA_MLFLAGS:                         Using Mmake.         (line 187)
* EXTRA_MLLIBS:                          Using Mmake.         (line 203)
* EXTRA_MLOBJS:                          Using Mmake.         (line 208)
* Fact tables:                           Code generation options.
                                                              (line  65)
* fail (trace event):                    Tracing of Mercury programs.
                                                              (line  12)
* fail_trace_counts (mdb command):       Parameter commands.  (line 170)
* fast (compilation grade):              Grades and grade components.
                                                              (line  14)
* File extensions <1>:                   Target code compilation options.
                                                              (line  87)
* File extensions:                       Filenames.           (line   6)
* File names:                            Build system options.
                                                              (line 162)
* file names:                            Parameter commands.  (line  95)
* File names:                            Filenames.           (line   6)
* finish (mdb command):                  Forward movement commands.
                                                              (line  55)
* flag (mdb command):                    Developer commands.  (line  15)
* Flat profile:                          Using mprof for time profiling.
                                                              (line  26)
* format (mdb command):                  Parameter commands.  (line 230)
* format_param (mdb command):            Parameter commands.  (line 241)
* forward (mdb command):                 Forward movement commands.
                                                              (line 107)
* Garbage collection:                    Optional features compilation model options.
                                                              (line  71)
* Garbage collection, profiling:         Using mprof for time profiling.
                                                              (line  52)
* gc (grade modifier):                   Grades and grade components.
                                                              (line  14)
* gen_stack (mdb command):               Developer commands.  (line  35)
* Generator stack size:                  Environment.         (line 194)
* GNU C:                                 C compilers.         (line   6)
* GNU Emacs:                             GNU Emacs interface. (line   6)
* goal path:                             Tracing of Mercury programs.
                                                              (line 111)
* goal_path (mdb command):               Parameter commands.  (line  59)
* goto (mdb command):                    Forward movement commands.
                                                              (line  27)
* GRADEFLAGS <1>:                        Compilation model options.
                                                              (line  18)
* GRADEFLAGS:                            Using Mmake.         (line 147)
* Grades <1>:                            Build system options.
                                                              (line 167)
* Grades:                                Compilation model options.
                                                              (line   6)
* Grades and grade components:           Grades and grade components.
                                                              (line   6)
* Heap overflow:                         Running.             (line  27)
* Heap profiling <1>:                    Optional features compilation model options.
                                                              (line  28)
* Heap profiling <2>:                    Using mprof for profiling memory retention.
                                                              (line   6)
* Heap profiling <3>:                    Creating profiles.   (line   6)
* Heap profiling <4>:                    Building profiled applications.
                                                              (line   6)
* Heap profiling:                        Profiling.           (line   6)
* Heap size:                             Running.             (line  27)
* held variables (in mdb):               Mercury debugger concepts.
                                                              (line 117)
* held_vars (mdb command):               Browsing commands.   (line  13)
* help (mdb command):                    Help commands.       (line  25)
* Help option:                           Miscellaneous options.
                                                              (line  10)
* Higher-order specialization:           High-level (HLDS -> HLDS) optimization options.
                                                              (line  95)
* histogram_all (mdb command):           Experimental commands.
                                                              (line   9)
* histogram_exp (mdb command):           Experimental commands.
                                                              (line  15)
* hl (compilation grade):                Grades and grade components.
                                                              (line  14)
* hlc (compilation grade):               Grades and grade components.
                                                              (line  14)
* HLDS <1>:                              Medium-level (HLDS -> LLDS) optimization options.
                                                              (line   6)
* HLDS <2>:                              Erlang (HLDS -> ELDS) optimization options.
                                                              (line   6)
* HLDS:                                  High-level (HLDS -> HLDS) optimization options.
                                                              (line   6)
* hold (mdb command):                    Browsing commands.   (line 243)
* ignore (mdb command):                  Breakpoint commands. (line 239)
* il (compilation grade):                Grades and grade components.
                                                              (line  14)
* Implicit Parallelism:                  Optional features compilation model options.
                                                              (line  49)
* Include directories:                   Target code compilation options.
                                                              (line  24)
* Inference:                             Language semantics options.
                                                              (line  31)
* Inference of determinism:              Language semantics options.
                                                              (line  46)
* Inference of modes:                    Language semantics options.
                                                              (line  40)
* Inference of types:                    Language semantics options.
                                                              (line  35)
* Inlining <1>:                          High-level (HLDS -> HLDS) optimization options.
                                                              (line  10)
* Inlining:                              Overall optimization options.
                                                              (line  44)
* INSTALL <1>:                           Installing libraries with Mmake.
                                                              (line  37)
* INSTALL:                               Using Mmake.         (line  97)
* INSTALL_MKDIR <1>:                     Installing libraries with Mmake.
                                                              (line  41)
* INSTALL_MKDIR:                         Using Mmake.         (line  97)
* INSTALL_PREFIX <1>:                    Installing libraries with Mmake.
                                                              (line  17)
* INSTALL_PREFIX:                        Using Mmake.         (line 241)
* Intermodule optimization:              Overall optimization options.
                                                              (line   9)
* Intermodule optimization, transitive:  Overall optimization options.
                                                              (line  50)
* interrupt, in debugger:                Mercury debugger concepts.
                                                              (line  63)
* io_query (mdb command):                Interactive query commands.
                                                              (line   9)
* jar files:                             Libraries and the Java grade.
                                                              (line   6)
* java (compilation grade):              Grades and grade components.
                                                              (line  14)
* Java compiler:                         Target code compilation options.
                                                              (line  68)
* Java compiler options:                 Target code compilation options.
                                                              (line  77)
* Java interpreter:                      Target code compilation options.
                                                              (line  72)
* Java libraries:                        Libraries and the Java grade.
                                                              (line   6)
* JAVACFLAGS:                            Using Mmake.         (line 166)
* jump (compilation grade):              Grades and grade components.
                                                              (line  14)
* Language semantics options:            Language semantics options.
                                                              (line   6)
* Last call optimization:                High-level (HLDS -> HLDS) optimization options.
                                                              (line 128)
* LD_BIND_NOW:                           Profiling and shared libraries.
                                                              (line   6)
* LD_LIBFLAGS:                           Using Mmake.         (line 197)
* LDFLAGS:                               Using Mmake.         (line 192)
* level (mdb command):                   Browsing commands.   (line 174)
* LIB_LINKAGES:                          Using Mmake.         (line  97)
* LIBGRADES <1>:                         Installing libraries with Mmake.
                                                              (line  17)
* LIBGRADES:                             Using Mmake.         (line  97)
* Libraries:                             Libraries.           (line   6)
* Libraries, linking with <1>:           Link options.        (line  54)
* Libraries, linking with <2>:           Using libraries with Mmake.
                                                              (line   6)
* Libraries, linking with <3>:           Using non-installed libraries with mmc --make.
                                                              (line   6)
* Libraries, linking with:               Using installed libraries with mmc --make.
                                                              (line   6)
* line numbers:                          Parameter commands.  (line  95)
* lines (mdb command):                   Parameter commands.  (line 241)
* Link errors:                           Compilation model options.
                                                              (line   6)
* Link options:                          Link options.        (line   6)
* LINKAGE:                               Using Mmake.         (line 175)
* Linker options:                        Link options.        (line   6)
* list (mdb command):                    Browsing commands.   (line 296)
* list_context_lines (mdb command):      Parameter commands.  (line 145)
* list_path (mdb command):               Parameter commands.  (line 153)
* LLDS <1>:                              Low-level (LLDS -> LLDS) optimization options.
                                                              (line   6)
* LLDS:                                  Medium-level (HLDS -> LLDS) optimization options.
                                                              (line   6)
* LLDS back-end compilation model options: LLDS back-end compilation model options.
                                                              (line   6)
* Mac OS X, Darwin, Install name:        Link options.        (line  46)
* Mac OS X, Using Frameworks:            Link options.        (line 173)
* MAIN_TARGET:                           Using Mmake.         (line 140)
* make --- see Mmake:                    Using Mmake.         (line   6)
* max_io_actions (mdb command):          Parameter commands.  (line 194)
* maxdepth (mdb command):                Forward movement commands.
                                                              (line 133)
* MC:                                    Using Mmake.         (line 144)
* MC_BUILD_FILES:                        Using Mmake.         (line 338)
* MC_MAKE_FLAGS:                         Using Mmake.         (line 343)
* MCFLAGS <1>:                           Compilation model options.
                                                              (line  18)
* MCFLAGS:                               Using Mmake.         (line 152)
* mdb <1>:                               Quick overview.      (line  20)
* mdb:                                   Debugging.           (line   6)
* mdbrc:                                 Mercury debugger invocation.
                                                              (line  41)
* mdprof <1>:                            Using mdprof.        (line   6)
* mdprof <2>:                            Creating profiles.   (line   6)
* mdprof <3>:                            Building profiled applications.
                                                              (line   6)
* mdprof:                                Profiling.           (line   6)
* Measuring performance:                 Profiling introduction.
                                                              (line   6)
* Memory attribution:                    Using mprof for profiling memory retention.
                                                              (line   6)
* Memory Pool System conservative garbage collector: Optional features compilation model options.
                                                              (line  71)
* Memory profiling <1>:                  Optional features compilation model options.
                                                              (line  28)
* Memory profiling <2>:                  Using mprof for profiling memory allocation.
                                                              (line   6)
* Memory profiling <3>:                  Creating profiles.   (line   6)
* Memory profiling <4>:                  Building profiled applications.
                                                              (line   6)
* Memory profiling:                      Profiling.           (line   6)
* Memory retention:                      Using mprof for profiling memory retention.
                                                              (line   6)
* memprof (grade modifier):              Grades and grade components.
                                                              (line  14)
* Mercury subdirectory:                  Build system options.
                                                              (line 162)
* Mercury.options <1>:                   Build system options.
                                                              (line 116)
* Mercury.options:                       Using Mmake.         (line 316)
* MERCURY_COMPILER:                      Environment.         (line 352)
* MERCURY_DEBUGGER_INIT <1>:             Environment.         (line 360)
* MERCURY_DEBUGGER_INIT:                 Mercury debugger invocation.
                                                              (line  31)
* MERCURY_DEFAULT_GRADE <1>:             C compilers.         (line  23)
* MERCURY_DEFAULT_GRADE <2>:             Environment.         (line  12)
* MERCURY_DEFAULT_GRADE:                 Grades and grade components.
                                                              (line  51)
* MERCURY_LINKAGE:                       Using Mmake.         (line 180)
* MERCURY_MAIN_MODULES:                  Using Mmake.         (line 332)
* MERCURY_MKINIT:                        Environment.         (line 356)
* MERCURY_NONSHARED_LIB_DIR:             Environment.         (line  23)
* MERCURY_OPTIONS <1>:                   Environment.         (line  30)
* MERCURY_OPTIONS:                       Running.             (line   9)
* MERCURY_STDLIB_DIR:                    Environment.         (line  16)
* MGNUC:                                 Using Mmake.         (line 157)
* mgnuc:                                 Using mmc.           (line  97)
* MGNUCFLAGS <1>:                        Compilation model options.
                                                              (line  18)
* MGNUCFLAGS:                            Using Mmake.         (line 160)
* mindepth (mdb command):                Forward movement commands.
                                                              (line 120)
* ML <1>:                                Building libraries with Mmake.
                                                              (line  44)
* ML:                                    Using Mmake.         (line 172)
* ml:                                    Using mmc.           (line 108)
* MLDS:                                  MLDS backend (MLDS -> MLDS) optimization options.
                                                              (line   6)
* MLDS back-end compilation model options: MLDS back-end compilation model options.
                                                              (line   6)
* MLFLAGS <1>:                           Compilation model options.
                                                              (line  18)
* MLFLAGS <2>:                           Building libraries with Mmake.
                                                              (line  44)
* MLFLAGS:                               Using Mmake.         (line 187)
* MLLIBS <1>:                            Building libraries with Mmake.
                                                              (line  44)
* MLLIBS:                                Using Mmake.         (line 203)
* MLOBJS <1>:                            Building libraries with Mmake.
                                                              (line  44)
* MLOBJS:                                Using Mmake.         (line 208)
* MLPICOBJS:                             Building libraries with Mmake.
                                                              (line  44)
* mm_stacks (mdb command):               Developer commands.  (line  48)
* mmake:                                 Using Mmake.         (line   6)
* Mmake variables:                       Using Mmake.         (line 134)
* mmc:                                   Using mmc.           (line   7)
* mmc_options (mdb command):             Parameter commands.  (line   9)
* Mode inference:                        Language semantics options.
                                                              (line  55)
* modules (mdb command):                 Breakpoint commands. (line 322)
* mprof <1>:                             Profiling and shared libraries.
                                                              (line   6)
* mprof <2>:                             Using mprof for profiling memory retention.
                                                              (line   6)
* mprof <3>:                             Using mprof for profiling memory allocation.
                                                              (line   6)
* mprof <4>:                             Using mprof for time profiling.
                                                              (line   6)
* mprof <5>:                             Creating profiles.   (line   6)
* mprof <6>:                             Building profiled applications.
                                                              (line   6)
* mprof:                                 Profiling.           (line   6)
* MPS conservative garbage collector:    Optional features compilation model options.
                                                              (line  71)
* neg_enter (trace event):               Tracing of Mercury programs.
                                                              (line  70)
* neg_fail (trace event):                Tracing of Mercury programs.
                                                              (line  70)
* neg_success (trace event):             Tracing of Mercury programs.
                                                              (line  70)
* next (mdb command):                    Forward movement commands.
                                                              (line  40)
* No clauses, procedures with:           Language semantics options.
                                                              (line  24)
* nondet_stack (mdb command):            Developer commands.  (line  53)
* none (compilation grade):              Grades and grade components.
                                                              (line  14)
* Object files, linking with:            Link options.        (line  58)
* Objects, reserved:                     Developer compilation model options.
                                                              (line  33)
* Optimization <1>:                      Language semantics options.
                                                              (line   6)
* Optimization:                          Profiling introduction.
                                                              (line   6)
* Optimization levels:                   Overall optimization options.
                                                              (line   9)
* Optimization options:                  Optimization options.
                                                              (line   6)
* Optimizing code size:                  Overall optimization options.
                                                              (line  38)
* Optimizing space:                      Overall optimization options.
                                                              (line  38)
* Optional features compilation model options: Optional features compilation model options.
                                                              (line   6)
* Options files <1>:                     Build system options.
                                                              (line 116)
* Options files:                         Using Mmake.         (line 316)
* Order of execution:                    Language semantics options.
                                                              (line   6)
* par (grade modifier):                  Grades and grade components.
                                                              (line  14)
* Parallel execution:                    Optional features compilation model options.
                                                              (line  97)
* Parallel execution profiling:          Using threadscope.   (line   6)
* Parallel performance:                  Profiling introduction.
                                                              (line   6)
* Parallel runtime profiling:            Building profiled applications.
                                                              (line   6)
* pass_trace_counts (mdb command):       Parameter commands.  (line 182)
* path:                                  Tracing of Mercury programs.
                                                              (line 111)
* paths in terms:                        Mercury debugger concepts.
                                                              (line 100)
* PIC (position independent code) <1>:   Code generation options.
                                                              (line  16)
* PIC (position independent code) <2>:   LLDS back-end compilation model options.
                                                              (line  29)
* PIC (position independent code):       Building libraries with Mmake.
                                                              (line   6)
* Pneg stack size:                       Environment.         (line 212)
* pneg_stack (mdb command):              Developer commands.  (line  43)
* pop_list_dir (mdb command):            Parameter commands.  (line 166)
* Position independent code <1>:         Code generation options.
                                                              (line  16)
* Position independent code <2>:         LLDS back-end compilation model options.
                                                              (line  29)
* Position independent code:             Building libraries with Mmake.
                                                              (line   6)
* pragma fact_table:                     Code generation options.
                                                              (line  65)
* print (mdb command):                   Browsing commands.   (line  17)
* print level:                           Mercury debugger concepts.
                                                              (line  68)
* print_optionals (mdb command):         Developer commands.  (line  94)
* printlevel (mdb command):              Parameter commands.  (line  16)
* procedure specification (in mdb):      Mercury debugger concepts.
                                                              (line 148)
* procedures (mdb command):              Breakpoint commands. (line 326)
* Procedures with no clauses:            Language semantics options.
                                                              (line  24)
* prof (grade modifier):                 Grades and grade components.
                                                              (line  14)
* profdeep (grade modifier):             Grades and grade components.
                                                              (line  14)
* Profiling <1>:                         Optional features compilation model options.
                                                              (line  21)
* Profiling <2>:                         Creating profiles.   (line   6)
* Profiling <3>:                         Profiling introduction.
                                                              (line   6)
* Profiling:                             Profiling.           (line   6)
* Profiling and shared libraries:        Profiling and shared libraries.
                                                              (line   6)
* Profiling interrupts:                  Using mprof for time profiling.
                                                              (line  35)
* Profiling memory allocation <1>:       Using mprof for profiling memory allocation.
                                                              (line   6)
* Profiling memory allocation:           Profiling.           (line   6)
* push_list_dir (mdb command):           Parameter commands.  (line 162)
* query (mdb command):                   Interactive query commands.
                                                              (line   9)
* quit (mdb command):                    Miscellaneous commands.
                                                              (line  32)
* RANLIB:                                Building libraries with Mmake.
                                                              (line  44)
* RANLIBFLAGS:                           Building libraries with Mmake.
                                                              (line  44)
* Recompiling:                           Using Mmake.         (line   6)
* redo (trace event):                    Tracing of Mercury programs.
                                                              (line  12)
* reg (compilation grade):               Grades and grade components.
                                                              (line  14)
* register (mdb command):                Breakpoint commands. (line 329)
* Reordering:                            Language semantics options.
                                                              (line   6)
* Reserved addresses:                    Developer compilation model options.
                                                              (line  26)
* Reserved objects:                      Developer compilation model options.
                                                              (line  33)
* retry (mdb command):                   Backward movement commands.
                                                              (line   9)
* return (mdb command):                  Forward movement commands.
                                                              (line  83)
* save (mdb command):                    Miscellaneous commands.
                                                              (line  22)
* scope (mdb command):                   Parameter commands.  (line  68)
* scroll (mdb command):                  Parameter commands.  (line  28)
* Search path <1>:                       Environment.         (line   6)
* Search path:                           Build system options.
                                                              (line 142)
* Search path for libraries:             Link options.        (line  35)
* Semantics options:                     Language semantics options.
                                                              (line   6)
* shallow tracing:                       Preparing a program for debugging.
                                                              (line  44)
* Shared libraries <1>:                  LLDS back-end compilation model options.
                                                              (line  29)
* Shared libraries:                      Building libraries with Mmake.
                                                              (line   6)
* Shared libraries and profiling:        Profiling and shared libraries.
                                                              (line   6)
* Shared objects:                        Building libraries with Mmake.
                                                              (line   6)
* show-ghc-events:                       Using threadscope.   (line   6)
* size (mdb command):                    Parameter commands.  (line 241)
* source (mdb command):                  Miscellaneous commands.
                                                              (line   9)
* Specialization of higher-order calls:  High-level (HLDS -> HLDS) optimization options.
                                                              (line  95)
* spf (grade modifier):                  Grades and grade components.
                                                              (line  14)
* spy points:                            Mercury debugger concepts.
                                                              (line  10)
* stack (mdb command):                   Browsing commands.   (line 121)
* Stack overflow:                        Running.             (line  21)
* Stack segments:                        LLDS back-end compilation model options.
                                                              (line  38)
* Stack size:                            Running.             (line  21)
* stack_default_limit (mdb command):     Parameter commands.  (line  54)
* stack_regs (mdb command):              Developer commands.  (line  65)
* Static libraries:                      Building libraries with Mmake.
                                                              (line   6)
* stats (mdb command):                   Developer commands.  (line  76)
* step (mdb command):                    Forward movement commands.
                                                              (line   9)
* strict debugger commands:              Mercury debugger concepts.
                                                              (line  54)
* stseg (grade modifier):                Grades and grade components.
                                                              (line  14)
* Stubs:                                 Language semantics options.
                                                              (line  24)
* Subdirectories:                        Build system options.
                                                              (line 162)
* subgoal (mdb command):                 Developer commands.  (line  27)
* switch (trace event):                  Tracing of Mercury programs.
                                                              (line  70)
* table (mdb command):                   Developer commands.  (line 115)
* table_io (mdb command):                I/O tabling commands.
                                                              (line   9)
* Tags:                                  Developer compilation model options.
                                                              (line  13)
* Tail recursion optimization:           High-level (HLDS -> HLDS) optimization options.
                                                              (line 128)
* Target code compilation options:       Target code compilation options.
                                                              (line   6)
* Target options <1>:                    Code generation target options.
                                                              (line   6)
* Target options:                        Target options.      (line   6)
* term navigation:                       Mercury debugger concepts.
                                                              (line 100)
* Termination analysis:                  Overall optimization options.
                                                              (line  50)
* Termination analysis options:          Termination analysis options.
                                                              (line   6)
* then (trace event):                    Tracing of Mercury programs.
                                                              (line  70)
* Threads, Debugging:                    Environment.         (line 245)
* threadscope <1>:                       Using threadscope.   (line   6)
* threadscope:                           Building profiled applications.
                                                              (line   6)
* threadscope (grade modifier):          Grades and grade components.
                                                              (line  14)
* Threadscope profiling:                 Optional features compilation model options.
                                                              (line 115)
* ThreadScope profiling:                 Using threadscope.   (line   6)
* Threadscope profiling:                 Building profiled applications.
                                                              (line   6)
* Time profiling <1>:                    Optional features compilation model options.
                                                              (line  21)
* Time profiling <2>:                    Using mprof for time profiling.
                                                              (line   6)
* Time profiling <3>:                    Creating profiles.   (line   6)
* Time profiling <4>:                    Building profiled applications.
                                                              (line   6)
* Time profiling:                        Profiling.           (line   6)
* tr (grade modifier):                   Grades and grade components.
                                                              (line  14)
* trace events:                          Tracing of Mercury programs.
                                                              (line  12)
* trace level:                           Preparing a program for debugging.
                                                              (line  44)
* Tracing <1>:                           Tracing of Mercury programs.
                                                              (line   6)
* Tracing:                               Debugging.           (line   6)
* track (mdb command):                   Backward movement commands.
                                                              (line  39)
* Trail size:                            Environment.         (line 171)
* trail_details (mdb command):           Developer commands.  (line 220)
* Trailing:                              Optional features compilation model options.
                                                              (line  85)
* Transitive intermodule optimization:   Overall optimization options.
                                                              (line  50)
* trseg (grade modifier):                Grades and grade components.
                                                              (line  14)
* trust (mdb command):                   Declarative debugging mdb commands.
                                                              (line  58)
* trusted (mdb command):                 Declarative debugging mdb commands.
                                                              (line  74)
* Type inference:                        Language semantics options.
                                                              (line  51)
* Type specialization:                   High-level (HLDS -> HLDS) optimization options.
                                                              (line 100)
* Type specialization, user guided:      High-level (HLDS -> HLDS) optimization options.
                                                              (line 105)
* type_ctor (mdb command):               Developer commands.  (line 127)
* typecheck-ambiguity-error-limit:       Miscellaneous options.
                                                              (line  26)
* typecheck-ambiguity-warn-limit:        Miscellaneous options.
                                                              (line  21)
* unalias (mdb command):                 Parameter commands.  (line 296)
* Undefined symbol:                      Compilation model options.
                                                              (line   6)
* unhide_events (mdb command):           Developer commands.  (line 105)
* untrust (mdb command):                 Declarative debugging mdb commands.
                                                              (line  78)
* Unused arguments:                      High-level (HLDS -> HLDS) optimization options.
                                                              (line  70)
* Unused outputs:                        High-level (HLDS -> HLDS) optimization options.
                                                              (line  81)
* Unused procedure elimination:          High-level (HLDS -> HLDS) optimization options.
                                                              (line 138)
* up (mdb command):                      Browsing commands.   (line 141)
* user defined event attributes (in mdb): Mercury debugger concepts.
                                                              (line 139)
* user defined events (in mdb):          Mercury debugger concepts.
                                                              (line 127)
* user_event_context (mdb command):      Parameter commands.  (line 126)
* Using a different C compiler:          C compilers.         (line   6)
* var_details (mdb command):             Developer commands.  (line  11)
* Variables, environment:                Environment.         (line   6)
* Variables, Mmake:                      Using Mmake.         (line 134)
* vars (mdb command):                    Browsing commands.   (line   9)
* Verbosity options:                     Verbosity options.   (line   6)
* view (mdb command):                    Browsing commands.   (line 196)
* Warning options:                       Warning options.     (line   6)
* width (mdb command):                   Parameter commands.  (line 241)
* xml_browser_cmd (mdb command):         Parameter commands.  (line 202)
* xml_tmp_filename (mdb command):        Parameter commands.  (line 221)


