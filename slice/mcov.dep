# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `mcov' in source file `mcov.m'.
# Generated by Mercury compiler version rotd-2024-10-23
# configured for x86_64-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: mcov
mcov : mcov$(EXT_FOR_EXE)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
mcov : $(mcov.classes)

else

# RULE executable_non_java
mcov$(EXT_FOR_EXE) : \
		$(mcov.all_os) \
		mcov_init.$O \
		$(foreach @,mcov,$(ALL_MLOBJS)) \
		$(foreach @,mcov,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mcov$(EXT_FOR_EXE) mcov_init.$O \
		$(mcov.all_os) \
		$(foreach @,mcov,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libmcov
libmcov : \
		mcov.jar \
		$(mcov.ints) \
		$(mcov.int3s) \
		mcov.init

else

# RULE lib_target_non_java
.PHONY: libmcov
libmcov : \
		libmcov.$A \
		libmcov.$(EXT_FOR_SHARED_LIB) \
		$(mcov.ints) \
		$(mcov.int3s) \
		mcov.init

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libmcov.$(EXT_FOR_SHARED_LIB) : \
		$(mcov.all_pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mcov,$(ALL_MLOBJS))) \
		$(foreach @,mcov,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmcov.$(EXT_FOR_SHARED_LIB) \
		$(mcov.all_pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mcov,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

# RULE lib
libmcov.$A : \
		$(mcov.all_os) \
		$(foreach @,mcov,$(ALL_MLOBJS))
	rm -f libmcov.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmcov.$A $(mcov.all_os) \
		$(foreach @,mcov,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmcov.$A

# RULE jar
mcov.jar : $(mcov.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mcov.jar $(mcov.classes)

# RULE init_file
mcov.init : \
		mcov.dep \
		$(mcov.all_cs)
	echo > mcov.init
	$(MKLIBINIT) $(mcov.all_cs) >> mcov.init
	$(EXTRA_INIT_COMMAND) >> mcov.init

# RULE force_init_c_file
force-mcov_init :

# RULE init_c_file
mcov_init.c : \
		force-mcov_init \
		$(mcov.all_cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mcov_init.c.tmp $(mcov.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mcov_init.c

# RULE lib_install_ints
.PHONY: libmcov.install_ints
libmcov.install_ints : \
		$(mcov.ints) \
		$(mcov.int3s) \
		$(mcov.int0s) \
		install_lib_dirs
	files="$(mcov.ints) $(mcov.int3s) $(mcov.int0s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in mh int int2 int3 int0; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ test -d "$$dir" || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

# RULE lib_install_opts
.PHONY: libmcov.install_opts
libmcov.install_opts :
	@:

ifeq ($(mcov.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libmcov.install_hdrs
libmcov.install_hdrs : \
		$(mcov.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libmcov.install_hdrs
libmcov.install_hdrs : \
		$(mcov.mhs) \
		install_lib_dirs
	for hdr in $(mcov.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq ($(mcov.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libmcov.install_grade_hdrs
libmcov.install_grade_hdrs : \
		$(mcov.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libmcov.install_grade_hdrs
libmcov.install_grade_hdrs : \
		$(mcov.mihs) \
		install_grade_dirs
	for hdr in $(mcov.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ test -d $(INSTALL_GRADE_INC_SUBDIR) || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ test -d $(INSTALL_INT_DIR)/Mercury/mihs || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

# RULE install__all_files
.PHONY: libmcov.install_all_files
libmcov.install_all_files : libmcov.install_ngs_pgs_files
	rm -rf tmp_dir && \
	mkdir tmp_dir && \
	rm -rf tmp_dir && \
	mkdir tmp_dir && \
	grade_files="$(foreach e,$(GRADE_SUBDIR_MVEXTS),$(mcov.$(e)))" && \
	for file in x $$grade_files; do \
		if test "$$file" != x; then \
			mv -f $$file tmp_dir > /dev/null 2>&1; \
			true; \
		fi; \
	done && \
	{ mv -f $(deps_subdir)$*.dep $(deps_subdir)$*.dv \
		*.$A *.$(EXT_FOR_SHARED_LIB) tmp_dir || \
		true; } && \
	for grade in $(ALL_LIBGRADES); do \
		if test "$$grade" != "$(GRADE)"; then \
			if mmake_grade_test c "$$grade"; then \
				$(MMAKE) GRADE=$$grade \
					mcov.depend || exit 1; \
				$(MMAKE) GRADE=$$grade \
					libmcov.install_gs_gas_files_c || \
					exit 1; \
			else \
				mmc --make --grade=$$grade \
					--install-prefix $(INSTALL_PREFIX) \
					libmcov.install_gs_gas || \
					exit 1; \
			fi; \
			for file in x $$grade_files; do \
				if test "$$file" != x; then \
					rm -f $$file; \
				fi; \
			done; \
			rm -f $(deps_subdir)$*.dep $(deps_subdir)$*.dv \
				*.$A *.$(EXT_FOR_SHARED_LIB) \
				*.jar *.dll *.err *.dep_err; \
		fi; \
	done && \
	for file in x $$grade_files; do \
		if test "$$file" != x; then \
			mv -f tmp_dir/`basename $$file` $$file \
				> /dev/null 2>&1; \
			true; \
		fi; \
	done && \
	{ mv -f tmp_dir/*.dep tmp_dir/*.dv $(deps_subdir).; \
		mv -f tmp_dir/* .; rmdir tmp_dir; true; }

# RULE install_ngs_pgs_files
.PHONY: libmcov.install_ngs_pgs_files
libmcov.install_ngs_pgs_files : \
		$(mcov.int0s) \
		$(mcov.ints) \
		$(mcov.int3s) \
		$(mcov.mhs)
	$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/int0s && \
	$(INSTALL) $(mcov.int0s) $(INSTALL_PREFIX)/MercurySystem/int0s
	$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/ints && \
	$(INSTALL) $(mcov.ints) $(INSTALL_PREFIX)/MercurySystem/ints
	$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/int3s && \
	$(INSTALL) $(mcov.int3s) $(INSTALL_PREFIX)/MercurySystem/int3s
	$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/mhs && \
	$(INSTALL) $(mcov.mhs) $(INSTALL_PREFIX)/MercurySystem/mhs

# RULE install_gs_gas_files
.PHONY: libmcov.install_gs_gas_files_c
libmcov.install_gs_gas_files_c : \
		$(mcov.mihs) \
		mcov.init \
		libmcov.$A \
		libmcov.$(EXT_FOR_SHARED_LIB)
	if mmake_grade_test hlc $(GRADE); then \
		$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/mihs/$(GRADESTRING) && \
		$(INSTALL) $(mcov.mihs) $(INSTALL_PREFIX)/MercurySystem/mihs/$(GRADESTRING) ; \
	fi
	if mmake_grade_test hlc $(GRADE); then \
		$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/inits/$(GRADESTRING) && \
		$(INSTALL) mcov.init $(INSTALL_PREFIX)/MercurySystem/inits/$(GRADESTRING) ; \
	fi
	if mmake_grade_test c $(GRADE); then \
		$(INSTALL_MKDIR) $(INSTALL_PREFIX)/MercurySystem/lib/$(GRADESTRING)/$(FULLARCH) && \
		$(INSTALL) libmcov.$A libmcov.$(EXT_FOR_SHARED_LIB) $(INSTALL_PREFIX)/MercurySystem/lib/$(GRADESTRING)/$(FULLARCH) ; \
	fi

# RULE collective_target_.check.errs
.PHONY: mcov.check
mcov.check : $(mcov.errs)

# RULE collective_target_.ints.dates
.PHONY: mcov.ints
mcov.ints : $(mcov.dates)

# RULE collective_target_.int3s.date3s
.PHONY: mcov.int3s
mcov.int3s : $(mcov.date3s)

# RULE collective_target_.opts.optdates
.PHONY: mcov.opts
mcov.opts : $(mcov.optdates)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: mcov.trans_opts
mcov.trans_opts : $(mcov.trans_opt_dates)

# RULE collective_target_.javas.all_javas
.PHONY: mcov.javas
mcov.javas : $(mcov.all_javas)

# RULE collective_target_.classes.classes
.PHONY: mcov.classes
mcov.classes : $(mcov.classes)

# RULE collective_target_.all_ints.dates
.PHONY: mcov.all_ints
mcov.all_ints : $(mcov.dates)

# RULE collective_target_.all_int3s.date3s
.PHONY: mcov.all_int3s
mcov.all_int3s : $(mcov.date3s)

# RULE collective_target_.all_opts.optdates
.PHONY: mcov.all_opts
mcov.all_opts : $(mcov.optdates)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: mcov.all_trans_opts
mcov.all_trans_opts : $(mcov.trans_opt_dates)

# RULE clean_local
clean_local : mcov.clean

# RULE clean_target
.PHONY: mcov.clean
mcov.clean :
	-echo $(mcov.dirs) | xargs rm -f
	-echo $(mcov.all_cs) | xargs rm -f
	-echo $(mcov.mihs) | xargs rm -f
	-echo $(mcov.all_os) | xargs rm -f
	-echo $(mcov.all_pic_os) | xargs rm -f
	-echo $(mcov.c_dates) | xargs rm -f
	-echo $(mcov.java_dates) | xargs rm -f
	-echo $(mcov.useds) | xargs rm -f
	-echo $(mcov.all_javas) | xargs rm -f
	-echo $(mcov.profs) | xargs rm -f
	-echo $(mcov.dep_errs) | xargs rm -f
	-echo $(mcov.errs) | xargs rm -f
	-echo $(mcov.foreign_cs) | xargs rm -f
	-rm -f mcov_init.c mcov_init.$O mcov_init.pic_o

# RULE realclean_local
realclean_local : mcov.realclean

# RULE realclean_target
.PHONY: mcov.realclean
mcov.realclean : mcov.clean
	-echo $(mcov.dates) | xargs rm -f
	-echo $(mcov.date0s) | xargs rm -f
	-echo $(mcov.date3s) | xargs rm -f
	-echo $(mcov.optdates) | xargs rm -f
	-echo $(mcov.trans_opt_dates) | xargs rm -f
	-echo $(mcov.ints) | xargs rm -f
	-echo $(mcov.int0s_to_clean) | xargs rm -f
	-echo $(mcov.int3s) | xargs rm -f
	-echo $(mcov.opts) | xargs rm -f
	-echo $(mcov.trans_opts) | xargs rm -f
	-echo $(mcov.analyses) | xargs rm -f
	-echo $(mcov.requests) | xargs rm -f
	-echo $(mcov.imdgs) | xargs rm -f
	-echo $(mcov.ds) | xargs rm -f
	-echo $(mcov.module_deps) | xargs rm -f
	-echo $(mcov.mhs_to_clean) | xargs rm -f
	-echo $(mcov.mihs_to_clean) | xargs rm -f
	-echo $(mcov.dlls) | xargs rm -f
	-echo $(mcov.foreign_dlls) | xargs rm -f
	-echo $(mcov.classes) | xargs rm -f
	-rm -f mcov$(EXT_FOR_EXE)  mcov.init libmcov.$A libmcov.$(EXT_FOR_SHARED_LIB) mcov.jar mcov.dep mcov.dv

