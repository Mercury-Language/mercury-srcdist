# Automatically generated dependencies for module `mslice'
# generated from source file `mslice.m'
# Generated by the Mercury compiler, version rotd-2016-10-04
# configured for x86_64-apple-darwin13.4.0.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mslice
mslice : mslice$(EXT_FOR_EXE)
endif
ifeq ($(findstring java,$(GRADE)),java)
mslice : $(mslice.classes)
else
mslice$(EXT_FOR_EXE) : $(mslice.cs_or_ss) $(mslice.os) mslice_init.$O \
		$(foreach @,mslice,$(ALL_MLOBJS)) \
		$(foreach @,mslice,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mslice$(EXT_FOR_EXE) mslice_init.$O \
		$(mslice.os) \
		$(foreach @,mslice,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif
.PHONY : libmslice
ifeq ($(findstring java,$(GRADE)),java)
libmslice : mslice.jar \
		$(mslice.ints) $(mslice.int3s) mslice.init

else
libmslice : libmslice.$A libmslice.$(EXT_FOR_SHARED_LIB) \
		$(mslice.ints) $(mslice.int3s) mslice.init

endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmslice.$(EXT_FOR_SHARED_LIB) : $(mslice.cs_or_ss) $(mslice.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mslice,$(ALL_MLOBJS))) \
		$(foreach @,mslice,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- -install_name /usr/local/mercury-rotd-2016-10-04/lib/mercury/lib/hlc.gc.pregen/libmslice.$(EXT_FOR_SHARED_LIB) $(ALL_LD_LIBFLAGS) -o libmslice.$(EXT_FOR_SHARED_LIB) \
		$(mslice.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mslice,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmslice.$A : $(mslice.cs_or_ss) $(mslice.os) \
		$(foreach @,mslice,$(ALL_MLOBJS))
	rm -f libmslice.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmslice.$A $(mslice.os) \
		$(foreach @,mslice,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmslice.$A

mslice.jar : $(mslice.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mslice.jar $(mslice.classes)

mslice.init : mslice.dep $(mslice.cs)
	echo > mslice.init
	$(MKLIBINIT) $(mslice.cs) >> mslice.init
	$(EXTRA_INIT_COMMAND) >> mslice.init
force-mslice_init :

mslice_init.c : force-mslice_init $(mslice.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mslice_init.c.tmp $(mslice.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mslice_init.c

.PHONY : libmslice.install_ints
libmslice.install_ints : $(mslice.ints) $(mslice.int3s)  install_lib_dirs
	files="$(mslice.ints) $(mslice.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmslice.install_opts
libmslice.install_opts : 
	@:

.PHONY : libmslice.install_hdrs
libmslice.install_hdrs : $(mslice.mhs) install_lib_dirs
ifeq ($(mslice.mhs),)
	@:
else
	for hdr in $(mslice.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmslice.install_grade_hdrs
libmslice.install_grade_hdrs : $(mslice.mihs) install_grade_dirs
ifeq ($(mslice.mihs),)
	@:
else
	for hdr in $(mslice.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mslice.check
mslice.check : $(mslice.errs)

.PHONY : mslice.ints
mslice.ints : $(mslice.dates)

.PHONY : mslice.int3s
mslice.int3s : $(mslice.date3s)

.PHONY : mslice.opts
mslice.opts : $(mslice.optdates)

.PHONY : mslice.trans_opts
mslice.trans_opts : $(mslice.trans_opt_dates)

.PHONY : mslice.javas
mslice.javas : $(mslice.javas)

.PHONY : mslice.classes
mslice.classes : $(mslice.classes)

.PHONY : mslice.all_ints
mslice.all_ints : $(mslice.dates)

.PHONY : mslice.all_int3s
mslice.all_int3s : $(mslice.date3s)

.PHONY : mslice.all_opts
mslice.all_opts : $(mslice.optdates)

.PHONY : mslice.all_trans_opts
mslice.all_trans_opts : $(mslice.trans_opt_dates)

clean_local : mslice.clean
.PHONY : mslice.clean
mslice.clean :
	-echo $(mslice.dirs) | xargs rm -rf 
	-echo $(mslice.cs) mslice_init.c | xargs rm -f
	-echo $(mslice.mihs) | xargs rm -f
	-echo $(mslice.all_os) mslice_init.$O | xargs rm -f
	-echo $(mslice.all_pic_os) mslice_init.pic_o | xargs rm -f
	-echo $(mslice.c_dates) | xargs rm -f
	-echo $(mslice.java_dates) | xargs rm -f
	-echo $(mslice.useds) | xargs rm -f
	-echo $(mslice.javas) | xargs rm -f
	-echo $(mslice.profs) | xargs rm -f
	-echo $(mslice.errs) | xargs rm -f
	-echo $(mslice.foreign_cs) | xargs rm -f

realclean_local : mslice.realclean
.PHONY : mslice.realclean
mslice.realclean : mslice.clean
	-echo $(mslice.dates) | xargs rm -f
	-echo $(mslice.date0s) | xargs rm -f
	-echo $(mslice.date3s) | xargs rm -f
	-echo $(mslice.optdates) | xargs rm -f
	-echo $(mslice.trans_opt_dates) | xargs rm -f
	-echo $(mslice.ints) | xargs rm -f
	-echo $(mslice.all_int0s) | xargs rm -f
	-echo $(mslice.int3s) | xargs rm -f
	-echo $(mslice.opts) | xargs rm -f
	-echo $(mslice.trans_opts) | xargs rm -f
	-echo $(mslice.analysiss) | xargs rm -f
	-echo $(mslice.requests) | xargs rm -f
	-echo $(mslice.imdgs) | xargs rm -f
	-echo $(mslice.ds) | xargs rm -f
	-echo $(mslice.module_deps) | xargs rm -f
	-echo $(mslice.all_mhs) | xargs rm -f
	-echo $(mslice.all_mihs) | xargs rm -f
	-echo $(mslice.dlls) | xargs rm -f
	-echo $(mslice.foreign_dlls) | xargs rm -f
	-echo $(mslice.classes) | xargs rm -f
	-rm -f mslice$(EXT_FOR_EXE) mslice.init libmslice.$A libmslice.$(EXT_FOR_SHARED_LIB) mslice.jar mslice.dep mslice.dv

