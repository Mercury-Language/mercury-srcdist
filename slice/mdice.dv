ifeq (x,y)

# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated dependency variables for module `mdice'
# generated from source file `mdice.m'
# Generated by the Mercury compiler, version rotd-2017-07-15,
# configured for x86_64-apple-darwin13.4.0.


endif # ifeq(x,y)

# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated dependency variables for
# module `mdice' in source file `mdice.m'.
# Generated by Mercury compiler version rotd-2017-07-15
# configured for x86_64-apple-darwin13.4.0.

ifeq (x,y)

mdice.ms = \
	builtin_modules.m \
	feedback.m \
	feedback.automatic_parallelism.m \
	mdbcomp.m \
	mdbcomp.goal_path.m \
	mdice.m \
	prim_data.m \
	program_representation.m \
	rtti_access.m \
	shared_utilities.m \
	slice_and_dice.m \
	sym_name.m \
	trace_counts.m

endif # ifeq(x,y)

mdice.ms = \
	builtin_modules.m \
	feedback.m \
	feedback.automatic_parallelism.m \
	mdbcomp.m \
	mdbcomp.goal_path.m \
	mdice.m \
	prim_data.m \
	program_representation.m \
	rtti_access.m \
	shared_utilities.m \
	slice_and_dice.m \
	sym_name.m \
	trace_counts.m

ifeq (x,y)

mdice.errs = \
	builtin_modules.err \
	feedback.err \
	feedback.automatic_parallelism.err \
	mdbcomp.err \
	mdbcomp.goal_path.err \
	mdice.err \
	prim_data.err \
	program_representation.err \
	rtti_access.err \
	shared_utilities.err \
	slice_and_dice.err \
	sym_name.err \
	trace_counts.err

endif # ifeq(x,y)

mdice.errs = \
	builtin_modules.err \
	feedback.err \
	feedback.automatic_parallelism.err \
	mdbcomp.err \
	mdbcomp.goal_path.err \
	mdice.err \
	prim_data.err \
	program_representation.err \
	rtti_access.err \
	shared_utilities.err \
	slice_and_dice.err \
	sym_name.err \
	trace_counts.err

ifeq (x,y)

mdice.mods = \
	mdbcomp \
	mdbcomp.builtin_modules \
	mdbcomp.feedback \
	mdbcomp.feedback.automatic_parallelism \
	mdbcomp.goal_path \
	mdbcomp.prim_data \
	mdbcomp.program_representation \
	mdbcomp.rtti_access \
	mdbcomp.shared_utilities \
	mdbcomp.slice_and_dice \
	mdbcomp.sym_name \
	mdbcomp.trace_counts \
	mdice

endif # ifeq(x,y)

mdice.mods = \
	mdbcomp \
	mdbcomp.builtin_modules \
	mdbcomp.feedback \
	mdbcomp.feedback.automatic_parallelism \
	mdbcomp.goal_path \
	mdbcomp.prim_data \
	mdbcomp.program_representation \
	mdbcomp.rtti_access \
	mdbcomp.shared_utilities \
	mdbcomp.slice_and_dice \
	mdbcomp.sym_name \
	mdbcomp.trace_counts \
	mdice

ifeq (x,y)

mdice.parent_mods = \
	mdbcomp \
	mdbcomp.feedback

endif # ifeq(x,y)

mdice.parent_mods = \
	mdbcomp \
	mdbcomp.feedback

ifeq (x,y)

mdice.foreign =


endif # ifeq(x,y)

mdice.foreign =

ifeq (x,y)

mdice.foreign_cs = 

endif # ifeq(x,y)

mdice.foreign_cs =

ifeq (x,y)

mdice.foreign_dlls = $(mdice.foreign:%=$(dlls_subdir)%.dll)

endif # ifeq(x,y)

mdice.foreign_dlls = $(mdice.foreign:%=$(dlls_subdir)%.dll)

ifeq (x,y)

mdice.init_cs = $(mdice.mods:%=$(cs_subdir)%.c)

endif # ifeq(x,y)

mdice.init_cs = $(mdice.mods:%=$(cs_subdir)%.c)

ifeq (x,y)

mdice.cs = $(mdice.init_cs) 

endif # ifeq(x,y)

mdice.cs = $(mdice.init_cs)

ifeq (x,y)

mdice.dlls = $(mdice.mods:%=$(dlls_subdir)%.dll)

endif # ifeq(x,y)

mdice.dlls = $(mdice.mods:%=$(dlls_subdir)%.dll)

ifeq (x,y)

mdice.all_os = $(mdice.mods:%=$(os_subdir)%.$O)

endif # ifeq(x,y)

mdice.all_os = $(mdice.mods:%=$(os_subdir)%.$O)

ifeq (x,y)

mdice.all_pic_os = $(mdice.mods:%=$(os_subdir)%.$(EXT_FOR_PIC_OBJECTS))

endif # ifeq(x,y)

mdice.all_pic_os = $(mdice.mods:%=$(os_subdir)%.$(EXT_FOR_PIC_OBJECTS))

ifeq (x,y)

mdice.os = $(mdice.all_os)

endif # ifeq(x,y)

mdice.os = $(mdice.all_os)

ifeq (x,y)

mdice.pic_os = $(mdice.all_pic_os)

endif # ifeq(x,y)

mdice.pic_os = $(mdice.all_pic_os)

ifeq (x,y)

mdice.useds = $(mdice.mods:%=$(useds_subdir)%.used)

endif # ifeq(x,y)

mdice.useds = $(mdice.mods:%=$(used_subdir)%.used)

ifeq (x,y)

mdice.javas = $(mdice.mods:%=$(javas_subdir)%.java)

endif # ifeq(x,y)

mdice.javas = $(mdice.mods:%=$(javas_subdir)%.java)

ifeq (x,y)

mdice.classes = $(mdice.mods:%=$(classes_subdir)%.class) $(wildcard $(mdice.mods:%=$(classes_subdir)%\$$*.class))

endif # ifeq(x,y)

mdice.classes = \
	$(mdice.mods:%=$(classes_subdir)%.class) \
	$(wildcard $(mdice.mods:%=$(classes_subdir)%\$$*.class))

ifeq (x,y)

mdice.dirs = $(mdice.mods:%=$(dirs_subdir)%.dir)

endif # ifeq(x,y)

mdice.dirs = $(mdice.mods:%=$(dirs_subdir)%.dir)

ifeq (x,y)

mdice.dir_os = $(mdice.mods:%=$(dirs_subdir)%.dir/*.$O)

endif # ifeq(x,y)

mdice.dir_os = $(mdice.mods:%=$(dirs_subdir)%.dir/*.$O)

ifeq (x,y)

mdice.dates = $(mdice.mods:%=$(dates_subdir)%.date)

endif # ifeq(x,y)

mdice.dates = $(mdice.mods:%=$(dates_subdir)%.date)

ifeq (x,y)

mdice.date0s = $(mdice.mods:%=$(date0s_subdir)%.date0)

endif # ifeq(x,y)

mdice.date0s = $(mdice.mods:%=$(date0s_subdir)%.date0)

ifeq (x,y)

mdice.date3s = $(mdice.mods:%=$(date3s_subdir)%.date3)

endif # ifeq(x,y)

mdice.date3s = $(mdice.mods:%=$(date3s_subdir)%.date3)

ifeq (x,y)

mdice.optdates = $(mdice.mods:%=$(optdates_subdir)%.optdate)

endif # ifeq(x,y)

mdice.optdates = $(mdice.mods:%=$(optdates_subdir)%.optdate)

ifeq (x,y)

mdice.trans_opt_dates = $(mdice.mods:%=$(trans_opt_dates_subdir)%.trans_opt_date)

endif # ifeq(x,y)

mdice.trans_opt_dates = $(mdice.mods:%=$(trans_opt_dates_subdir)%.trans_opt_date)

ifeq (x,y)

mdice.c_dates = $(mdice.mods:%=$(c_dates_subdir)%.c_date)

endif # ifeq(x,y)

mdice.c_dates = $(mdice.mods:%=$(c_dates_subdir)%.c_date)

ifeq (x,y)

mdice.java_dates = $(mdice.mods:%=$(java_dates_subdir)%.java_date)

endif # ifeq(x,y)

mdice.java_dates = $(mdice.mods:%=$(java_dates_subdir)%.java_date)

ifeq (x,y)

mdice.ds = $(mdice.mods:%=$(ds_subdir)%.d)

endif # ifeq(x,y)

mdice.ds = $(mdice.mods:%=$(ds_subdir)%.d)

ifeq (x,y)

mdice.module_deps = $(mdice.mods:%=$(module_deps_subdir)%.module_dep)

endif # ifeq(x,y)

mdice.module_deps = $(mdice.mods:%=$(module_deps_subdir)%.module_dep)

ifeq (x,y)

mdice.mihs = $(mdice.mods:%=$(mihs_subdir)%.mih)

endif # ifeq(x,y)

mdice.mihs = $(mdice.mods:%=$(mihs_subdir)%.mih)

ifeq (x,y)

mdice.mhs = $(mdice.mods:%=%.mh)

endif # ifeq(x,y)

mdice.mhs = $(mdice.mods:%=%.mh)

ifeq (x,y)

mdice.all_mihs = $(mdice.mods:%=$(mihs_subdir)%.mih)

endif # ifeq(x,y)

mdice.all_mihs = $(mdice.mods:%=$(mihs_subdir)%.mih)

ifeq (x,y)

mdice.all_mhs = $(mdice.mods:%=%.mh)

endif # ifeq(x,y)

mdice.all_mhs = $(mdice.mods:%=%.mh)

ifeq (x,y)

mdice.ints = $(mdice.mods:%=$(ints_subdir)%.int) $(mdice.mods:%=$(int2s_subdir)%.int2)

endif # ifeq(x,y)

mdice.ints = \
	$(mdice.mods:%=$(ints_subdir)%.int) \
	$(mdice.mods:%=$(int2s_subdir)%.int2)

ifeq (x,y)

mdice.int0s = $(mdice.parent_mods:%=$(int0s_subdir)%.int0)

endif # ifeq(x,y)

mdice.int0s = $(mdice.parent_mods:%=$(int0s_subdir)%.int0)

ifeq (x,y)

mdice.all_int0s = $(mdice.mods:%=$(int0s_subdir)%.int0)

endif # ifeq(x,y)

mdice.all_int0s = $(mdice.mods:%=$(int0s_subdir)%.int0)

ifeq (x,y)

mdice.int3s = $(mdice.mods:%=$(int3s_subdir)%.int3)

endif # ifeq(x,y)

mdice.int3s = $(mdice.mods:%=$(int3s_subdir)%.int3)

ifeq (x,y)

mdice.opts = $(mdice.mods:%=$(opts_subdir)%.opt)

endif # ifeq(x,y)

mdice.opts = $(mdice.mods:%=$(opts_subdir)%.opt)

ifeq (x,y)

mdice.trans_opts = $(mdice.mods:%=$(trans_opts_subdir)%.trans_opt)

endif # ifeq(x,y)

mdice.trans_opts = $(mdice.mods:%=$(trans_opts_subdir)%.trans_opt)

ifeq (x,y)

mdice.analysiss = $(mdice.mods:%=$(analysiss_subdir)%.analysis)

endif # ifeq(x,y)

mdice.analysiss = $(mdice.mods:%=$(analysiss_subdir)%.analysis)

ifeq (x,y)

mdice.requests = $(mdice.mods:%=$(requests_subdir)%.request)

endif # ifeq(x,y)

mdice.requests = $(mdice.mods:%=$(requests_subdir)%.request)

ifeq (x,y)

mdice.imdgs = $(mdice.mods:%=$(imdgs_subdir)%.imdg)

endif # ifeq(x,y)

mdice.imdgs = $(mdice.mods:%=$(imdgs_subdir)%.imdg)

ifeq (x,y)

mdice.profs = $(mdice.mods:%=%.prof)


endif # ifeq(x,y)

mdice.profs = $(mdice.mods:%=%.prof)

ifeq (x,y)


endif # ifeq(x,y)

