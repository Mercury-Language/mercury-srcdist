:- module (hlds.hlds_rtti).
:- interface.
:- type instance_method_constraints
    --->    instance_method_constraints(parse_tree.prog_data.class_id, list.list(parse_tree.prog_data.mer_type), list.list(parse_tree.prog_data.prog_constraint), parse_tree.prog_data.prog_constraints).
:- type prog_var_name == string.
:- type rtti_proc_label
    --->    rtti_proc_label(((hlds.hlds_rtti).rpl_pred_or_func) :: mdbcomp.prim_data.pred_or_func, ((hlds.hlds_rtti).rpl_this_module) :: mdbcomp.sym_name.module_name, ((hlds.hlds_rtti).rpl_proc_module) :: mdbcomp.sym_name.module_name, ((hlds.hlds_rtti).rpl_proc_name) :: string, ((hlds.hlds_rtti).rpl_proc_arity) :: parse_tree.prog_data.arity, ((hlds.hlds_rtti).rpl_proc_arg_types) :: list.list(parse_tree.prog_data.mer_type), ((hlds.hlds_rtti).rpl_pred_id) :: hlds.hlds_pred.pred_id, ((hlds.hlds_rtti).rpl_proc_id) :: hlds.hlds_pred.proc_id, ((hlds.hlds_rtti).rpl_proc_headvars) :: assoc_list.assoc_list(parse_tree.prog_data.prog_var, hlds.hlds_rtti.prog_var_name), ((hlds.hlds_rtti).rpl_proc_top_modes) :: list.list(hlds.hlds_pred.top_functor_mode), ((hlds.hlds_rtti).rpl_proc_interface_detism) :: parse_tree.prog_data.determinism, ((hlds.hlds_rtti).rpl_pred_is_imported) :: bool.bool, ((hlds.hlds_rtti).rpl_pred_is_pseudo_imported) :: bool.bool, ((hlds.hlds_rtti).rpl_pred_info_origin) :: hlds.hlds_pred.pred_origin, ((hlds.hlds_rtti).rpl_proc_is_exported) :: bool.bool, ((hlds.hlds_rtti).rpl_proc_is_imported) :: bool.bool).
:- type rtti_var_info
    --->    type_info_var(parse_tree.prog_data.mer_type)
    ;       typeclass_info_var(parse_tree.prog_data.prog_constraint)
    ;       non_rtti_var .
:- type rtti_varmaps.
:- type type_info_locn
    --->    type_info(parse_tree.prog_data.prog_var)
    ;       typeclass_info(parse_tree.prog_data.prog_var, int).
:- type_representation(instance_method_constraints, is_word_aligned_ptr).
:- type_representation(prog_var_name, is_eqv_to(string)).
:- type_representation(rtti_proc_label, is_word_aligned_ptr).
:- type_representation(rtti_varmaps, is_word_aligned_ptr).
:- type_representation(type_info_type_map, is_eqv_to(map.map(parse_tree.prog_data.prog_var, parse_tree.prog_data.mer_type))).
:- type_representation(type_info_varmap, is_eqv_to(map.map(parse_tree.prog_data.tvar, hlds.hlds_rtti.type_info_locn))).
:- type_representation(typeclass_info_constraint_map, is_eqv_to(map.map(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_constraint))).
:- type_representation(typeclass_info_varmap, is_eqv_to(map.map(parse_tree.prog_data.prog_constraint, parse_tree.prog_data.prog_var))).
