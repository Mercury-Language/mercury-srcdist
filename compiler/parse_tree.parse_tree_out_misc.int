:- module (parse_tree.parse_tree_out_misc).
:- interface.
:- use_module io.
:- use_module libs.
:- use_module list.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module term.
:- use_module varset.
:- use_module (libs.globals).
:- use_module (mdbcomp.prim_data).
:- use_module (parse_tree.parse_tree_out_info).
:- use_module (parse_tree.prog_data).
:- use_module (parse_tree.prog_data_pragma).
:- func arg_tabling_method_to_string(parse_tree.prog_data_pragma.arg_tabling_method) = string.
:- func can_fail_to_string(parse_tree.prog_data.can_fail) = string.
:- pred context_to_string(parse_tree.prog_data.prog_context, string).
:- mode context_to_string((builtin.in), (builtin.out)) is det.
:- func determinism_to_string(parse_tree.prog_data.determinism) = string.
:- func eval_method_to_string(parse_tree.prog_data_pragma.eval_method) = string.
:- func goal_warning_to_string(parse_tree.prog_data.goal_warning) = string.
:- func maybe_arg_tabling_method_to_string(maybe.maybe(parse_tree.prog_data_pragma.arg_tabling_method)) = string.
:- func mercury_det_to_string(parse_tree.prog_data.determinism) = string.
:- func mercury_foreign_language_to_string(libs.globals.foreign_language) = string.
:- pred mercury_format_foreign_language_string(libs.globals.foreign_language, S, U, U) <= ((parse_tree.parse_tree_out_info).pt_output(S, U)).
:- mode mercury_format_foreign_language_string((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred mercury_format_quantifier(parse_tree.prog_data.tvarset, parse_tree.prog_data.var_name_print, parse_tree.prog_data.existq_tvars, S, U, U) <= ((parse_tree.parse_tree_out_info).pt_output(S, U)).
:- mode mercury_format_quantifier((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred mercury_format_tabs(int, S, U, U) <= ((parse_tree.parse_tree_out_info).pt_output(S, U)).
:- mode mercury_format_tabs((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred mercury_output_foreign_language_string(libs.globals.foreign_language, io.text_output_stream, io.io, io.io).
:- mode mercury_output_foreign_language_string((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred mercury_output_newline(int, io.text_output_stream, io.io, io.io).
:- mode mercury_output_newline((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred mercury_output_quantifier(parse_tree.prog_data.tvarset, parse_tree.prog_data.var_name_print, parse_tree.prog_data.existq_tvars, io.text_output_stream, io.io, io.io).
:- mode mercury_output_quantifier((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred mercury_output_state_vars(varset.varset(T), parse_tree.prog_data.var_name_print, list.list(term.var(T)), io.text_output_stream, io.io, io.io).
:- mode mercury_output_state_vars((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- func mercury_quantifier_to_string(parse_tree.prog_data.tvarset, parse_tree.prog_data.var_name_print, parse_tree.prog_data.existq_tvars) = string.
:- func pred_or_func_to_full_str(mdbcomp.prim_data.pred_or_func) = string.
:- func pred_or_func_to_str(mdbcomp.prim_data.pred_or_func) = string.
:- func promise_to_string(parse_tree.prog_data.promise_type) = string.
:- mode promise_to_string((builtin.in)) = (builtin.out) is det.
:- mode promise_to_string((builtin.out)) = (builtin.in) is semidet.
:- mode promise_to_string((builtin.out)) = (builtin.out) is multi.
:- pred purity_name(parse_tree.prog_data.purity, string).
:- mode purity_name((builtin.in), (builtin.out)) is det.
:- mode purity_name((builtin.out), (builtin.in)) is semidet.
:- func purity_prefix_to_string(parse_tree.prog_data.purity) = string.
:- func tabled_eval_method_to_pragma_name(parse_tree.prog_data_pragma.tabled_eval_method) = string.
:- func tabled_eval_method_to_string(parse_tree.prog_data_pragma.tabled_eval_method) = string.
:- pred write_context(io.text_output_stream, parse_tree.prog_data.prog_context, io.io, io.io).
:- mode write_context((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
