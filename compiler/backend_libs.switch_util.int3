:- module (backend_libs.switch_util).
:- interface.
:- type case_consts(Key, Rval, SeveralInfo).
:- type case_consts_several_llds.
:- type case_id_ptags_map.
:- type int_switch_info(T).
:- type may_use_smart_indexing
	where	type_is_abstract_enum(1).
:- type maybe_int_switch_info.
:- type need_bit_vec_check
	where	type_is_abstract_enum(1).
:- type need_range_check
	where	type_is_abstract_enum(1).
:- type ptag_case(CaseRep).
:- type ptag_case_entry(CaseRep).
:- type ptag_case_group_entry(CaseRep).
:- type ptag_case_group_list(CaseRep).
:- type ptag_case_list(CaseRep).
:- type ptag_case_map(CaseRep).
:- type ptag_count_map.
:- type soln_consts(Rval).
:- type stag_goal_list(CaseRep).
:- type stag_goal_map(CaseRep).
:- type string_hash_slot(CaseRep).
:- type switch_category
	where	type_is_abstract_enum(3).
:- type table_size_upgrade
	where	type_is_abstract_enum(1).
:- type_representation(case_consts_several_llds, is_word_aligned_ptr).
:- type_representation(case_id_ptags_map, is_eqv_to(map(case_id, set(ptag)))).
:- type_representation(may_use_smart_indexing, du_repn(enum("may_not_use_smart_indexing", "may_use_smart_indexing", [],  no_c_j_cs))).
:- type_representation(need_bit_vec_check, du_repn(enum("need_bit_vec_check", "dont_need_bit_vec_check", [],  no_c_j_cs))).
:- type_representation(need_range_check, du_repn(enum("need_range_check", "dont_need_range_check", [],  no_c_j_cs))).
:- type_representation(ptag_case_group_list(V_1), is_eqv_to(list(backend_libs.switch_util.ptag_case_group_entry(V_1)))).
:- type_representation(ptag_case_list(V_1), is_eqv_to(list(backend_libs.switch_util.ptag_case_entry(V_1)))).
:- type_representation(ptag_case_map(V_1), is_eqv_to(map(ptag, backend_libs.switch_util.ptag_case(V_1)))).
:- type_representation(ptag_case_rev_map(V_1), is_eqv_to(map(backend_libs.switch_util.ptag_case(V_1), ptag_case_rev_map_entry(V_1)))).
:- type_representation(ptag_count_map, is_eqv_to(map(ptag, pair(sectag_locn, int)))).
:- type_representation(stag_goal_list(V_1), is_eqv_to(assoc_list(int, V_1))).
:- type_representation(stag_goal_map(V_1), is_eqv_to(map(int, V_1))).
:- type_representation(switch_category, du_repn(enum("atomic_switch", "int64_switch", ["string_switch", "tag_switch", "float_switch"],  no_c_j_cs))).
:- type_representation(table_size_upgrade, du_repn(enum("keep_first_size", "allow_doubling", [],  no_c_j_cs))).
