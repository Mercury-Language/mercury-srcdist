:- module (transform_hlds.dead_proc_elim).
:- interface.
:- use_module map.
:- type entity
    --->    entity_proc(hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id)
    ;       entity_table_struct(hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id)
    ;       entity_type_ctor(mdbcomp.sym_name.module_name, string, int)
    ;       entity_const_struct(int)
    ;       entity_mutable(mdbcomp.sym_name.module_name, string, parse_tree.prog_data.mutable_pred_kind).
:- type maybe_elim_opt_imported
    --->    elim_opt_imported 
    ;       do_not_elim_opt_imported .
:- type maybe_needed
    --->    not_eliminable 
    ;       maybe_eliminable(((transform_hlds.dead_proc_elim).num_references) :: int).
:- type needed_map == map.map(transform_hlds.dead_proc_elim.entity, transform_hlds.dead_proc_elim.maybe_needed).
:- type_representation(entity_queue, is_eqv_to(queue.queue(transform_hlds.dead_proc_elim.entity))).
:- type_representation(examined_set, is_eqv_to(set_tree234.set_tree234(transform_hlds.dead_proc_elim.entity))).
:- type_representation(maybe_elim_opt_imported, du_repn(enum("elim_opt_imported", "do_not_elim_opt_imported", [],  no_c_j_cs_e))).
:- type_representation(needed_map, is_eqv_to(map.map(transform_hlds.dead_proc_elim.entity, transform_hlds.dead_proc_elim.maybe_needed))).
