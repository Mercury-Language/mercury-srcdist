:- module (hlds.const_struct).
:- interface.
:- use_module map.
:- type const_instance_id
    --->    ciid(int, parse_tree.prog_data.prog_constraint, list.list(parse_tree.prog_data.prog_constraint)).
:- type const_instance_map == map.map(hlds.const_struct.const_instance_id, int).
:- type const_struct
    --->    const_struct(((hlds.const_struct).cs_cons_id) :: parse_tree.prog_data.cons_id, ((hlds.const_struct).cs_args) :: list.list(hlds.const_struct.const_struct_arg), ((hlds.const_struct).cs_term_type) :: parse_tree.prog_data.mer_type, ((hlds.const_struct).cs_term_inst) :: parse_tree.prog_data.mer_inst, ((hlds.const_struct).cs_defined_where) :: hlds.const_struct.defined_where).
:- type const_struct_arg
    --->    csa_const_struct(int)
    ;       csa_constant(parse_tree.prog_data.cons_id, parse_tree.prog_data.mer_type).
:- type const_struct_db.
:- type defined_where
    --->    defined_in_this_module 
    ;       defined_in_other_module .
:- type_representation(const_instance_id, is_word_aligned_ptr).
:- type_representation(const_instance_map, is_eqv_to(map.map(hlds.const_struct.const_instance_id, int))).
:- type_representation(const_struct, is_word_aligned_ptr).
:- type_representation(const_struct_db, is_word_aligned_ptr).
:- type_representation(defined_where, du_repn(enum("defined_in_this_module", "defined_in_other_module", [],  no_c_j_cs))).
