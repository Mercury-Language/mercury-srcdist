:- module (parse_tree.prog_data_foreign).
:- interface.
:- import_module bool.
:- import_module cord.
:- import_module libs.
:- import_module list.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module set.
:- import_module (libs.globals).
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_data_pragma).
:- type box_policy
    --->    bp_native_if_possible 
    ;       bp_always_boxed .
:- type export_enum_attributes
    --->    export_enum_attributes(((parse_tree.prog_data_foreign).ee_attr_prefix) :: maybe.maybe(string), ((parse_tree.prog_data_foreign).ee_attr_upper) :: parse_tree.prog_data_foreign.uppercase_export_enum).
:- type foreign_arg_name_mode
    --->    foreign_arg_name_mode(string, parse_tree.prog_data.mer_mode).
:- type foreign_arg_name_mode_box
    --->    foreign_arg_name_mode_box(maybe.maybe(parse_tree.prog_data_foreign.foreign_arg_name_mode), parse_tree.prog_data_foreign.box_policy).
:- type foreign_decl_is_local
    --->    foreign_decl_is_local 
    ;       foreign_decl_is_exported .
:- type foreign_import_module_info
    --->    foreign_import_module_info(libs.globals.foreign_language, mdbcomp.sym_name.module_name).
:- type foreign_import_modules
    --->    foreign_import_modules(((parse_tree.prog_data_foreign).fim_c) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.prog_data_foreign).fim_csharp) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.prog_data_foreign).fim_java) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.prog_data_foreign).fim_erlang) :: set.set(mdbcomp.sym_name.module_name)).
:- type foreign_include_file_info
    --->    foreign_include_file_info(((parse_tree.prog_data_foreign).fifi_lang) :: libs.globals.foreign_language, ((parse_tree.prog_data_foreign).fifi_filename) :: string).
:- type foreign_include_file_infos == cord.cord(parse_tree.prog_data_foreign.foreign_include_file_info).
:- type foreign_literal_or_include
    --->    floi_literal(string)
    ;       floi_include_file(string).
:- type foreign_proc_shared_code_treatment
    --->    shared_code_duplicate 
    ;       shared_code_share 
    ;       shared_code_automatic .
:- type pragma_foreign_proc_attributes.
:- type pragma_foreign_proc_extra_attribute
    --->    refers_to_llds_stack 
    ;       backend(libs.globals.backend)
    ;       needs_call_standard_output_registers .
:- type pragma_foreign_proc_extra_attributes == list.list(parse_tree.prog_data_foreign.pragma_foreign_proc_extra_attribute).
:- type pragma_foreign_proc_impl
    --->    fp_impl_ordinary(string, maybe.maybe(parse_tree.prog_data.prog_context)).
:- type pragma_var
    --->    pragma_var(parse_tree.prog_data.prog_var, string, parse_tree.prog_data.mer_mode, parse_tree.prog_data_foreign.box_policy).
:- type proc_affects_liveness
    --->    proc_affects_liveness 
    ;       proc_does_not_affect_liveness 
    ;       proc_default_affects_liveness .
:- type proc_allocates_memory
    --->    proc_does_not_allocate_memory 
    ;       proc_allocates_bounded_memory 
    ;       proc_allocates_unbounded_memory 
    ;       proc_default_allocates_memory .
:- type proc_may_call_mercury
    --->    proc_may_call_mercury 
    ;       proc_will_not_call_mercury .
:- type proc_may_call_mm_tabled
    --->    proc_may_call_mm_tabled 
    ;       proc_will_not_call_mm_tabled 
    ;       proc_default_calls_mm_tabled .
:- type proc_may_duplicate
    --->    proc_may_duplicate 
    ;       proc_may_not_duplicate .
:- type proc_may_modify_trail
    --->    proc_may_modify_trail 
    ;       proc_will_not_modify_trail .
:- type proc_may_throw_exception
    --->    proc_will_not_throw_exception 
    ;       default_exception_behaviour .
:- type proc_registers_roots
    --->    proc_registers_roots 
    ;       proc_does_not_register_roots 
    ;       proc_does_not_have_roots 
    ;       proc_default_registers_roots .
:- type proc_tabled_for_io
    --->    proc_not_tabled_for_io 
    ;       proc_tabled_for_io 
    ;       proc_tabled_for_io_unitize 
    ;       proc_tabled_for_descendant_io .
:- type proc_terminates
    --->    proc_terminates 
    ;       proc_does_not_terminate 
    ;       depends_on_mercury_calls .
:- type proc_thread_safe
    --->    proc_not_thread_safe 
    ;       proc_thread_safe 
    ;       proc_maybe_thread_safe .
:- type uppercase_export_enum
    --->    uppercase_export_enum 
    ;       do_not_uppercase_export_enum .
