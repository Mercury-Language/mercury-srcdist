:- module (parse_tree.prog_data_foreign).
:- interface.
:- use_module cord.
:- use_module list.
:- type box_policy
    --->    bp_native_if_possible 
    ;       bp_always_boxed .
:- type c_j_cs_fims
    --->    c_j_cs_fims(((parse_tree.prog_data_foreign).fim_c) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.prog_data_foreign).fim_java) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.prog_data_foreign).fim_csharp) :: set.set(mdbcomp.sym_name.module_name)).
:- type export_enum_attributes
    --->    export_enum_attributes(((parse_tree.prog_data_foreign).ee_attr_prefix) :: maybe.maybe(string), ((parse_tree.prog_data_foreign).ee_attr_upper) :: parse_tree.prog_data_foreign.uppercase_export_enum).
:- type fim_spec
    --->    fim_spec(((parse_tree.prog_data_foreign).fimspec_lang) :: libs.globals.foreign_language, ((parse_tree.prog_data_foreign).fimspec_module_name) :: mdbcomp.sym_name.module_name).
:- type foreign_arg_name_mode
    --->    foreign_arg_name_mode(string, parse_tree.prog_data.mer_mode).
:- type foreign_arg_name_mode_box
    --->    foreign_arg_name_mode_box(maybe.maybe(parse_tree.prog_data_foreign.foreign_arg_name_mode), parse_tree.prog_data_foreign.box_policy).
:- type foreign_decl_is_local
    --->    foreign_decl_is_local 
    ;       foreign_decl_is_exported .
:- type foreign_include_file_info
    --->    foreign_include_file_info(((parse_tree.prog_data_foreign).fifi_lang) :: libs.globals.foreign_language, ((parse_tree.prog_data_foreign).fifi_filename) :: string).
:- type foreign_include_file_infos == cord.cord(parse_tree.prog_data_foreign.foreign_include_file_info).
:- type foreign_literal_or_include
    --->    floi_literal(string)
    ;       floi_include_file(string).
:- type foreign_proc_shared_code_treatment
    --->    shared_code_duplicate 
    ;       shared_code_share 
    ;       shared_code_automatic .
:- type pragma_foreign_proc_attributes.
:- type pragma_foreign_proc_extra_attribute
    --->    refers_to_llds_stack 
    ;       backend(libs.globals.backend)
    ;       needs_call_standard_output_registers .
:- type pragma_foreign_proc_extra_attributes == list.list(parse_tree.prog_data_foreign.pragma_foreign_proc_extra_attribute).
:- type pragma_foreign_proc_impl
    --->    fp_impl_ordinary(string, maybe.maybe(parse_tree.prog_data.prog_context)).
:- type pragma_var
    --->    pragma_var(parse_tree.prog_data.prog_var, string, parse_tree.prog_data.mer_mode, parse_tree.prog_data_foreign.box_policy).
:- type proc_affects_liveness
    --->    proc_affects_liveness 
    ;       proc_does_not_affect_liveness 
    ;       proc_default_affects_liveness .
:- type proc_allocates_memory
    --->    proc_does_not_allocate_memory 
    ;       proc_allocates_bounded_memory 
    ;       proc_allocates_unbounded_memory 
    ;       proc_default_allocates_memory .
:- type proc_may_call_mercury
    --->    proc_may_call_mercury 
    ;       proc_will_not_call_mercury .
:- type proc_may_call_mm_tabled
    --->    proc_may_call_mm_tabled 
    ;       proc_will_not_call_mm_tabled 
    ;       proc_default_calls_mm_tabled .
:- type proc_may_duplicate
    --->    proc_may_duplicate 
    ;       proc_may_not_duplicate .
:- type proc_may_modify_trail
    --->    proc_may_modify_trail 
    ;       proc_will_not_modify_trail .
:- type proc_may_throw_exception
    --->    proc_will_not_throw_exception 
    ;       default_exception_behaviour .
:- type proc_registers_roots
    --->    proc_registers_roots 
    ;       proc_does_not_register_roots 
    ;       proc_does_not_have_roots 
    ;       proc_default_registers_roots .
:- type proc_tabled_for_io
    --->    proc_not_tabled_for_io 
    ;       proc_tabled_for_io 
    ;       proc_tabled_for_io_unitize 
    ;       proc_tabled_for_descendant_io .
:- type proc_terminates
    --->    proc_terminates 
    ;       proc_does_not_terminate 
    ;       depends_on_mercury_calls .
:- type proc_thread_safe
    --->    proc_not_thread_safe 
    ;       proc_thread_safe 
    ;       proc_maybe_thread_safe .
:- type uppercase_export_enum
    --->    uppercase_export_enum 
    ;       do_not_uppercase_export_enum .
:- type_representation(box_policy, du_repn(enum("bp_native_if_possible", "bp_always_boxed", [],  no_c_j_cs))).
:- type_representation(c_j_cs_fims, is_word_aligned_ptr).
:- type_representation(export_enum_attributes, is_word_aligned_ptr).
:- type_representation(fim_spec, is_word_aligned_ptr).
:- type_representation(foreign_arg_name_mode, is_word_aligned_ptr).
:- type_representation(foreign_arg_name_mode_box, is_word_aligned_ptr).
:- type_representation(foreign_decl_is_local, du_repn(enum("foreign_decl_is_local", "foreign_decl_is_exported", [],  no_c_j_cs))).
:- type_representation(foreign_include_file_info, is_word_aligned_ptr).
:- type_representation(foreign_include_file_infos, is_eqv_to(cord.cord(parse_tree.prog_data_foreign.foreign_include_file_info))).
:- type_representation(foreign_proc_shared_code_treatment, du_repn(enum("shared_code_duplicate", "shared_code_share", ["shared_code_automatic"],  no_c_j_cs))).
:- type_representation(pragma_foreign_proc_attributes, is_word_aligned_ptr).
:- type_representation(pragma_foreign_proc_extra_attributes, is_eqv_to(list.list(parse_tree.prog_data_foreign.pragma_foreign_proc_extra_attribute))).
:- type_representation(pragma_foreign_proc_impl, is_word_aligned_ptr).
:- type_representation(pragma_var, is_word_aligned_ptr).
:- type_representation(proc_affects_liveness, du_repn(enum("proc_affects_liveness", "proc_does_not_affect_liveness", ["proc_default_affects_liveness"],  no_c_j_cs))).
:- type_representation(proc_allocates_memory, du_repn(enum("proc_does_not_allocate_memory", "proc_allocates_bounded_memory", ["proc_allocates_unbounded_memory", "proc_default_allocates_memory"],  no_c_j_cs))).
:- type_representation(proc_may_call_mercury, du_repn(enum("proc_may_call_mercury", "proc_will_not_call_mercury", [],  no_c_j_cs))).
:- type_representation(proc_may_call_mm_tabled, du_repn(enum("proc_may_call_mm_tabled", "proc_will_not_call_mm_tabled", ["proc_default_calls_mm_tabled"],  no_c_j_cs))).
:- type_representation(proc_may_duplicate, du_repn(enum("proc_may_duplicate", "proc_may_not_duplicate", [],  no_c_j_cs))).
:- type_representation(proc_may_modify_trail, du_repn(enum("proc_may_modify_trail", "proc_will_not_modify_trail", [],  no_c_j_cs))).
:- type_representation(proc_may_throw_exception, du_repn(enum("proc_will_not_throw_exception", "default_exception_behaviour", [],  no_c_j_cs))).
:- type_representation(proc_registers_roots, du_repn(enum("proc_registers_roots", "proc_does_not_register_roots", ["proc_does_not_have_roots", "proc_default_registers_roots"],  no_c_j_cs))).
:- type_representation(proc_tabled_for_io, du_repn(enum("proc_not_tabled_for_io", "proc_tabled_for_io", ["proc_tabled_for_io_unitize", "proc_tabled_for_descendant_io"],  no_c_j_cs))).
:- type_representation(proc_terminates, du_repn(enum("proc_terminates", "proc_does_not_terminate", ["depends_on_mercury_calls"],  no_c_j_cs))).
:- type_representation(proc_thread_safe, du_repn(enum("proc_not_thread_safe", "proc_thread_safe", ["proc_maybe_thread_safe"],  no_c_j_cs))).
:- type_representation(uppercase_export_enum, du_repn(enum("uppercase_export_enum", "do_not_uppercase_export_enum", [],  no_c_j_cs))).
