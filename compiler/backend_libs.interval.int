:- module (backend_libs.interval).
:- interface.
:- import_module bool.
:- import_module counter.
:- import_module hlds.
:- import_module io.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module set.
:- import_module (hlds.hlds_goal).
:- import_module (hlds.hlds_module).
:- import_module (mdbcomp.program_representation).
:- import_module (parse_tree.prog_data).
:- type anchor
	--->	anchor_proc_start 
	;	anchor_proc_end 
	;	anchor_branch_start(((backend_libs.interval).branch_construct), ((mdbcomp.program_representation).goal_path))
	;	anchor_cond_then(((mdbcomp.program_representation).goal_path))
	;	anchor_branch_end(((backend_libs.interval).branch_construct), ((mdbcomp.program_representation).goal_path))
	;	anchor_call_site(((mdbcomp.program_representation).goal_path)).
:- type anchor_follow_info
	--->	anchor_follow_info((set.set(((parse_tree.prog_data).prog_var))), (set.set(((backend_libs.interval).interval_id)))).
:- type branch_construct
	--->	branch_ite 
	;	branch_disj 
	;	branch_switch 
	;	branch_neg 
	;	branch_par_conj .
:- type branch_end_info
	--->	branch_end_info(((backend_libs.interval).flushed_after_branch) :: (set.set(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).accessed_after_branch) :: (set.set(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).interval_after_branch) :: ((backend_libs.interval).interval_id)).
:- type insert_map == (map.map(((backend_libs.interval).anchor), (list.list(((backend_libs.interval).insert_spec))))).
:- type insert_spec
	--->	insert_spec(((hlds.hlds_goal).hlds_goal), (set.set(((parse_tree.prog_data).prog_var)))).
:- type interval_id
	--->	interval_id(int).
:- type interval_info
	--->	interval_info(((backend_libs.interval).interval_params) :: ((backend_libs.interval).interval_params), ((backend_libs.interval).flushed_later) :: (set.set(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).accessed_later) :: (set.set(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).branch_resume_map) :: (map.map(((mdbcomp.program_representation).goal_path), ((backend_libs.interval).resume_save_status))), ((backend_libs.interval).branch_end_map) :: (map.map(((mdbcomp.program_representation).goal_path), ((backend_libs.interval).branch_end_info))), ((backend_libs.interval).cond_end_map) :: (map.map(((mdbcomp.program_representation).goal_path), ((backend_libs.interval).interval_id))), ((backend_libs.interval).cur_interval) :: ((backend_libs.interval).interval_id), ((backend_libs.interval).interval_counter) :: (counter.counter), ((backend_libs.interval).open_intervals) :: (set.set(((backend_libs.interval).interval_id))), ((backend_libs.interval).anchor_follow_map) :: (map.map(((backend_libs.interval).anchor), ((backend_libs.interval).anchor_follow_info))), ((backend_libs.interval).model_non_anchors) :: (set.set(((backend_libs.interval).anchor))), ((backend_libs.interval).interval_start) :: (map.map(((backend_libs.interval).interval_id), ((backend_libs.interval).anchor))), ((backend_libs.interval).interval_end) :: (map.map(((backend_libs.interval).interval_id), ((backend_libs.interval).anchor))), ((backend_libs.interval).interval_succ) :: (map.map(((backend_libs.interval).interval_id), (list.list(((backend_libs.interval).interval_id))))), ((backend_libs.interval).interval_vars) :: (map.map(((backend_libs.interval).interval_id), (set.set(((parse_tree.prog_data).prog_var))))), ((backend_libs.interval).interval_delvars) :: (map.map(((backend_libs.interval).interval_id), (list.list((set.set(((parse_tree.prog_data).prog_var)))))))).
:- type interval_params
	--->	interval_params(((backend_libs.interval).module_info) :: ((hlds.hlds_module).module_info), ((backend_libs.interval).var_types) :: ((parse_tree.prog_data).vartypes), ((backend_libs.interval).at_most_zero_calls) :: (bool.bool)).
:- type maybe_needs_flush
	--->	needs_flush 
	;	doesnt_need_flush .
:- type rename_map == (map.map(((parse_tree.prog_data).prog_var), ((parse_tree.prog_data).prog_var))).
:- type resume_save_status
	--->	has_resume_save 
	;	has_no_resume_save .
:- type save_point
	--->	save_point(((backend_libs.interval).save_point_type), ((mdbcomp.program_representation).goal_path)).
:- type save_point_type
	--->	save_point_call_site 
	;	save_point_resume_point .
:- typeclass build_interval_info_acc(T) where [
	pred use_cell(((parse_tree.prog_data).prog_var), (list.list(((parse_tree.prog_data).prog_var))), ((parse_tree.prog_data).cons_id), ((hlds.hlds_goal).hlds_goal), ((backend_libs.interval).interval_info), ((backend_libs.interval).interval_info), T, T),
	mode use_cell((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det
].
:- pred apply_headvar_correction((set.set(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).rename_map), ((hlds.hlds_goal).hlds_goal), ((hlds.hlds_goal).hlds_goal)).
:- mode apply_headvar_correction((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred build_interval_info_in_goal(((hlds.hlds_goal).hlds_goal), ((backend_libs.interval).interval_info), ((backend_libs.interval).interval_info), T, T) <= ((backend_libs.interval).build_interval_info_acc(T)).
:- mode build_interval_info_in_goal((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred delete_interval_vars(((backend_libs.interval).interval_id), (set.set(((parse_tree.prog_data).prog_var))), (set.set(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).interval_info), ((backend_libs.interval).interval_info)).
:- mode delete_interval_vars((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred dump_interval_info(((backend_libs.interval).interval_info), (io.io), (io.io)).
:- mode dump_interval_info((builtin.in), (builtin.di), (builtin.uo)) is det.
:- func interval_id_to_int(((backend_libs.interval).interval_id)) = int.
:- pred make_inserted_goal(((parse_tree.prog_data).prog_varset), ((parse_tree.prog_data).prog_varset), ((parse_tree.prog_data).vartypes), ((parse_tree.prog_data).vartypes), ((backend_libs.interval).rename_map), ((backend_libs.interval).rename_map), ((backend_libs.interval).insert_spec), (maybe.maybe(((hlds.hlds_goal).goal_feature))), ((hlds.hlds_goal).hlds_goal)).
:- mode make_inserted_goal((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred record_decisions_in_goal(((hlds.hlds_goal).hlds_goal), ((hlds.hlds_goal).hlds_goal), ((parse_tree.prog_data).prog_varset), ((parse_tree.prog_data).prog_varset), ((parse_tree.prog_data).vartypes), ((parse_tree.prog_data).vartypes), ((backend_libs.interval).rename_map), ((backend_libs.interval).rename_map), ((backend_libs.interval).insert_map), (maybe.maybe(((hlds.hlds_goal).goal_feature)))).
:- mode record_decisions_in_goal((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.in)) is det.
:- pred record_interval_vars(((backend_libs.interval).interval_id), (list.list(((parse_tree.prog_data).prog_var))), ((backend_libs.interval).interval_info), ((backend_libs.interval).interval_info)).
:- mode record_interval_vars((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred write_int_list((list.list(int)), (io.io), (io.io)).
:- mode write_int_list((builtin.in), (builtin.di), (builtin.uo)) is det.
