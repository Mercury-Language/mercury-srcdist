:- module (hlds.hlds_cons).
:- interface.
:- import_module assoc_list.
:- import_module list.
:- import_module map.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module (hlds.status).
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.prog_data).
:- type cons_table.
:- type ctor_field_table == map.map(mdbcomp.sym_name.sym_name, list.list(hlds.hlds_cons.hlds_ctor_field_defn)).
:- type field_access_type
    --->    get 
    ;       set .
:- type hlds_cons_defn
    --->    hlds_cons_defn(((hlds.hlds_cons).cons_type_ctor) :: parse_tree.prog_data.type_ctor, ((hlds.hlds_cons).cons_type_tvarset) :: parse_tree.prog_data.tvarset, ((hlds.hlds_cons).cons_type_params) :: list.list(parse_tree.prog_data.type_param), ((hlds.hlds_cons).cons_type_kinds) :: parse_tree.prog_data.tvar_kind_map, ((hlds.hlds_cons).cons_maybe_exist) :: parse_tree.prog_data.maybe_cons_exist_constraints, ((hlds.hlds_cons).cons_args) :: list.list(parse_tree.prog_data.constructor_arg), ((hlds.hlds_cons).cons_context) :: parse_tree.prog_data.prog_context).
:- type hlds_ctor_field_defn
    --->    hlds_ctor_field_defn(((hlds.hlds_cons).field_context) :: parse_tree.prog_data.prog_context, ((hlds.hlds_cons).field_status) :: hlds.status.type_status, ((hlds.hlds_cons).field_type_ctor) :: parse_tree.prog_data.type_ctor, ((hlds.hlds_cons).field_cons_id) :: parse_tree.prog_data.cons_id, ((hlds.hlds_cons).field_arg_num) :: int).
:- pred cons_table_optimize(hlds.hlds_cons.cons_table, hlds.hlds_cons.cons_table).
:- mode cons_table_optimize((builtin.in), (builtin.out)) is det.
:- pred get_all_cons_defns(hlds.hlds_cons.cons_table, assoc_list.assoc_list(parse_tree.prog_data.cons_id, hlds.hlds_cons.hlds_cons_defn)).
:- mode get_all_cons_defns((builtin.in), (builtin.out)) is det.
:- func init_cons_table = hlds.hlds_cons.cons_table.
:- pred insert_into_cons_table(parse_tree.prog_data.cons_id, list.list(parse_tree.prog_data.cons_id), hlds.hlds_cons.hlds_cons_defn, hlds.hlds_cons.cons_table, hlds.hlds_cons.cons_table).
:- mode insert_into_cons_table((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_cons_table_of_type_ctor(hlds.hlds_cons.cons_table, parse_tree.prog_data.type_ctor, parse_tree.prog_data.cons_id, hlds.hlds_cons.hlds_cons_defn).
:- mode lookup_cons_table_of_type_ctor((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred replace_cons_defns_in_cons_table(pred(hlds.hlds_cons.hlds_cons_defn, hlds.hlds_cons.hlds_cons_defn), hlds.hlds_cons.cons_table, hlds.hlds_cons.cons_table).
:- mode replace_cons_defns_in_cons_table(builtin.in((pred((builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)) is det.
:- pred return_cons_arities(hlds.hlds_cons.cons_table, mdbcomp.sym_name.sym_name, list.list(int)).
:- mode return_cons_arities((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred search_cons_table(hlds.hlds_cons.cons_table, parse_tree.prog_data.cons_id, list.list(hlds.hlds_cons.hlds_cons_defn)).
:- mode search_cons_table((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred search_cons_table_of_type_ctor(hlds.hlds_cons.cons_table, parse_tree.prog_data.type_ctor, parse_tree.prog_data.cons_id, hlds.hlds_cons.hlds_cons_defn).
:- mode search_cons_table_of_type_ctor((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- implementation.
:- type cons_table == map.map(string, hlds.hlds_cons.inner_cons_table).
:- type inner_cons_entry.
:- type inner_cons_table == list.list(hlds.hlds_cons.inner_cons_entry).
