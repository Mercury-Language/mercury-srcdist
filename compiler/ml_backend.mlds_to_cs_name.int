:- module (ml_backend.mlds_to_cs_name).
:- interface.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module (mdbcomp.sym_name).
:- use_module (ml_backend.mlds).
:- use_module (ml_backend.mlds_to_cs_util).
:- use_module (parse_tree.prog_data).
:- func field_var_name_to_ll_string_for_csharp(ml_backend.mlds.mlds_field_var_name) = string.
:- func field_var_name_to_nll_string_for_csharp(ml_backend.mlds.mlds_field_var_name) = string.
:- func function_name_to_ll_string_for_csharp(ml_backend.mlds.mlds_function_name) = string.
:- func function_name_to_nll_string_for_csharp(ml_backend.mlds.mlds_function_name) = string.
:- func global_var_name_to_ll_string_for_csharp(ml_backend.mlds.mlds_global_var_name) = string.
:- func global_var_name_to_nll_string_for_csharp(ml_backend.mlds.mlds_global_var_name) = string.
:- func limit_identifier_length(string) = string.
:- func local_var_name_to_ll_string_for_csharp(ml_backend.mlds.mlds_local_var_name) = string.
:- func local_var_name_to_nll_string_for_csharp(ml_backend.mlds.mlds_local_var_name) = string.
:- func maybe_qualified_function_name_to_ll_string_for_csharp(ml_backend.mlds_to_cs_util.csharp_out_info, ml_backend.mlds.qual_function_name) = string.
:- func maybe_qualified_global_var_name_to_string_for_csharp(ml_backend.mlds_to_cs_util.csharp_out_info, ml_backend.mlds.qual_global_var_name) = string.
:- func proc_label_to_ll_string_for_csharp(string, ml_backend.mlds.mlds_proc_label) = string.
:- func proc_label_to_nll_string_for_csharp(string, ml_backend.mlds.mlds_proc_label) = string.
:- func qual_class_name_to_ll_string_for_csharp(ml_backend.mlds.qual_class_name, parse_tree.prog_data.arity) = string.
:- func qual_class_name_to_nll_string_for_csharp(ml_backend.mlds.qual_class_name, parse_tree.prog_data.arity) = string.
:- func qualifier_to_nll_string_for_csharp(ml_backend.mlds.mlds_module_name, ml_backend.mlds.mlds_qual_kind) = string.
:- func strip_mercury_and_mangle_sym_name_for_csharp(mdbcomp.sym_name.sym_name) = string.
:- func unqual_class_name_to_ll_string_for_csharp(ml_backend.mlds.mlds_class_name, parse_tree.prog_data.arity) = string.
:- func unqual_class_name_to_nll_string_for_csharp(ml_backend.mlds.mlds_class_name, parse_tree.prog_data.arity) = string.
