:- module (((check_hlds.simplify).format_call).parse_string_format).
:- interface.
:- type abstract_poly_type
    --->    apt_f(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_i(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_i8(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_i16(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_i32(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_i64(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_u(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_u8(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_u16(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_u32(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_u64(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_s(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context)
    ;       apt_c(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_context).
:- type compiler_format_maybe_prec
    --->    compiler_no_specified_prec 
    ;       compiler_manifest_prec(int)
    ;       compiler_var_prec(parse_tree.prog_data.prog_var).
:- type compiler_format_maybe_width
    --->    compiler_no_specified_width 
    ;       compiler_manifest_width(int)
    ;       compiler_var_width(parse_tree.prog_data.prog_var).
:- type compiler_format_spec
    --->    compiler_const_string(parse_tree.prog_data.prog_context, string)
    ;       compiler_spec_char(parse_tree.prog_data.prog_context, string.parse_util.string_format_flags, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_width, parse_tree.prog_data.prog_var)
    ;       compiler_spec_string(parse_tree.prog_data.prog_context, string.parse_util.string_format_flags, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_width, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_prec, parse_tree.prog_data.prog_var)
    ;       compiler_spec_signed_int(parse_tree.prog_data.prog_context, string.parse_util.string_format_flags, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_width, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_prec, check_hlds.simplify.format_call.parse_string_format.int_size, parse_tree.prog_data.prog_var)
    ;       compiler_spec_unsigned_int(parse_tree.prog_data.prog_context, string.parse_util.string_format_flags, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_width, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_prec, string.parse_util.string_format_int_base, check_hlds.simplify.format_call.parse_string_format.int_size, parse_tree.prog_data.prog_var)
    ;       compiler_spec_uint(parse_tree.prog_data.prog_context, string.parse_util.string_format_flags, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_width, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_prec, string.parse_util.string_format_int_base, check_hlds.simplify.format_call.parse_string_format.uint_size, parse_tree.prog_data.prog_var)
    ;       compiler_spec_float(parse_tree.prog_data.prog_context, string.parse_util.string_format_flags, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_width, check_hlds.simplify.format_call.parse_string_format.compiler_format_maybe_prec, string.parse_util.string_format_float_kind, parse_tree.prog_data.prog_var).
:- type int_size
    --->    int_size_word 
    ;       int_size_8 
    ;       int_size_16 
    ;       int_size_32 
    ;       int_size_64 .
:- type uint_size
    --->    uint_size_word 
    ;       uint_size_8 
    ;       uint_size_16 
    ;       uint_size_32 
    ;       uint_size_64 .
:- type_representation(int_size, du_repn(enum("int_size_word", "int_size_8", ["int_size_16", "int_size_32", "int_size_64"],  no_c_j_cs))).
:- type_representation(uint_size, du_repn(enum("uint_size_word", "uint_size_8", ["uint_size_16", "uint_size_32", "uint_size_64"],  no_c_j_cs))).
