:- module (ml_backend.mlds_to_target_util).
:- interface.
:- import_module backend_libs.
:- import_module bool.
:- import_module digraph.
:- import_module hlds.
:- import_module io.
:- import_module list.
:- import_module map.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module set.
:- import_module (backend_libs.rtti).
:- import_module (hlds.hlds_pred).
:- import_module (mdbcomp.sym_name).
:- import_module (ml_backend.mlds).
:- import_module (parse_tree.java_names).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_type).
:- type exit_method
    --->    can_break 
    ;       can_continue 
    ;       can_return 
    ;       can_throw 
    ;       can_fall_through .
:- type exit_methods == set.set(ml_backend.mlds_to_target_util.exit_method).
:- type func_info_csj
    --->    func_info_csj(((ml_backend.mlds_to_target_util).func_info_params) :: ml_backend.mlds.mlds_func_params).
:- type indent == int.
:- type output_aux
    --->    oa_none 
    ;       oa_cname(ml_backend.mlds.mlds_type_name)
    ;       oa_alloc_only 
    ;       oa_force_init .
:- type output_generics
    --->    do_output_generics 
    ;       do_not_output_generics .
