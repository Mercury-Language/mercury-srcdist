# Automatically generated dependencies for module `mlds_to_gcc'
# generated from source file `mlds_to_gcc.m'
# Generated by the Mercury compiler, version rotd-2012-02-09, configured for x86_64-unknown-linux-gnu.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mlds_to_gcc
mlds_to_gcc : mlds_to_gcc$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mlds_to_gcc : mlds_to_gcc.exe
mlds_to_gcc.exe : $(mlds_to_gcc.dlls) $(mlds_to_gcc.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mlds_to_gcc : $(mlds_to_gcc.classes)
 else
mlds_to_gcc$(EXT_FOR_EXE) : $(mlds_to_gcc.cs_or_ss) $(mlds_to_gcc.os) mlds_to_gcc_init.$O \
		$(foreach @,mlds_to_gcc,$(ALL_MLOBJS)) \
		$(foreach @,mlds_to_gcc,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mlds_to_gcc$(EXT_FOR_EXE) mlds_to_gcc_init.$O \
		$(mlds_to_gcc.os) \
		$(foreach @,mlds_to_gcc,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmlds_to_gcc
ifeq ($(findstring il,$(GRADE)),il)
libmlds_to_gcc : $(mlds_to_gcc.dlls) $(mlds_to_gcc.foreign_dlls) \
		$(mlds_to_gcc.ints) $(mlds_to_gcc.int3s) mlds_to_gcc.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmlds_to_gcc : mlds_to_gcc.jar \
		$(mlds_to_gcc.ints) $(mlds_to_gcc.int3s) mlds_to_gcc.init

 else
libmlds_to_gcc : libmlds_to_gcc.$A libmlds_to_gcc.$(EXT_FOR_SHARED_LIB) \
		$(mlds_to_gcc.ints) $(mlds_to_gcc.int3s) mlds_to_gcc.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmlds_to_gcc.$(EXT_FOR_SHARED_LIB) : $(mlds_to_gcc.cs_or_ss) $(mlds_to_gcc.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mlds_to_gcc,$(ALL_MLOBJS))) \
		$(foreach @,mlds_to_gcc,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmlds_to_gcc.$(EXT_FOR_SHARED_LIB) \
		$(mlds_to_gcc.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mlds_to_gcc,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmlds_to_gcc.$A : $(mlds_to_gcc.cs_or_ss) $(mlds_to_gcc.os) \
		$(foreach @,mlds_to_gcc,$(ALL_MLOBJS))
	rm -f libmlds_to_gcc.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmlds_to_gcc.$A $(mlds_to_gcc.os) \
		$(foreach @,mlds_to_gcc,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmlds_to_gcc.$A

mlds_to_gcc.jar : $(mlds_to_gcc.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mlds_to_gcc.jar $(mlds_to_gcc.classes)

mlds_to_gcc.init : mlds_to_gcc.dep $(mlds_to_gcc.cs)
	echo > mlds_to_gcc.init
	$(MKLIBINIT) $(mlds_to_gcc.cs) >> mlds_to_gcc.init
	$(EXTRA_INIT_COMMAND) >> mlds_to_gcc.init
force-mlds_to_gcc_init :

mlds_to_gcc_init.c : force-mlds_to_gcc_init $(mlds_to_gcc.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mlds_to_gcc_init.c.tmp $(mlds_to_gcc.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mlds_to_gcc_init.c

.PHONY : libmlds_to_gcc.install_ints
libmlds_to_gcc.install_ints : $(mlds_to_gcc.ints) $(mlds_to_gcc.int3s)  install_lib_dirs
	files="$(mlds_to_gcc.ints) $(mlds_to_gcc.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmlds_to_gcc.install_opts
libmlds_to_gcc.install_opts : 
	@:

.PHONY : libmlds_to_gcc.install_hdrs
libmlds_to_gcc.install_hdrs : $(mlds_to_gcc.mhs) install_lib_dirs
ifeq ($(mlds_to_gcc.mhs),)
	@:
else
	for hdr in $(mlds_to_gcc.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmlds_to_gcc.install_grade_hdrs
libmlds_to_gcc.install_grade_hdrs : $(mlds_to_gcc.mihs) install_grade_dirs
ifeq ($(mlds_to_gcc.mihs),)
	@:
else
	for hdr in $(mlds_to_gcc.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mlds_to_gcc.check
mlds_to_gcc.check : $(mlds_to_gcc.errs)

.PHONY : mlds_to_gcc.ints
mlds_to_gcc.ints : $(mlds_to_gcc.dates)

.PHONY : mlds_to_gcc.int3s
mlds_to_gcc.int3s : $(mlds_to_gcc.date3s)

.PHONY : mlds_to_gcc.opts
mlds_to_gcc.opts : $(mlds_to_gcc.optdates)

.PHONY : mlds_to_gcc.trans_opts
mlds_to_gcc.trans_opts : $(mlds_to_gcc.trans_opt_dates)

.PHONY : mlds_to_gcc.ss
mlds_to_gcc.ss : $(mlds_to_gcc.ss)

.PHONY : mlds_to_gcc.pic_ss
mlds_to_gcc.pic_ss : $(mlds_to_gcc.pic_ss)

.PHONY : mlds_to_gcc.ils
mlds_to_gcc.ils : $(mlds_to_gcc.ils)

.PHONY : mlds_to_gcc.javas
mlds_to_gcc.javas : $(mlds_to_gcc.javas)

.PHONY : mlds_to_gcc.classes
mlds_to_gcc.classes : $(mlds_to_gcc.classes)

.PHONY : mlds_to_gcc.all_ints
mlds_to_gcc.all_ints : $(mlds_to_gcc.dates)

.PHONY : mlds_to_gcc.all_int3s
mlds_to_gcc.all_int3s : $(mlds_to_gcc.date3s)

.PHONY : mlds_to_gcc.all_opts
mlds_to_gcc.all_opts : $(mlds_to_gcc.optdates)

.PHONY : mlds_to_gcc.all_trans_opts
mlds_to_gcc.all_trans_opts : $(mlds_to_gcc.trans_opt_dates)

.PHONY : mlds_to_gcc.all_ss
mlds_to_gcc.all_ss : $(mlds_to_gcc.ss)

.PHONY : mlds_to_gcc.all_pic_ss
mlds_to_gcc.all_pic_ss : $(mlds_to_gcc.pic_ss)

clean_local : mlds_to_gcc.clean
.PHONY : mlds_to_gcc.clean
mlds_to_gcc.clean :
	-echo $(mlds_to_gcc.dirs) | xargs rm -rf 
	-echo $(mlds_to_gcc.cs) mlds_to_gcc_init.c | xargs rm -f
	-echo $(mlds_to_gcc.mihs) | xargs rm -f
	-echo $(mlds_to_gcc.all_ss) mlds_to_gcc_init.s | xargs rm -f
	-echo $(mlds_to_gcc.all_pic_ss) mlds_to_gcc_init.s | xargs rm -f
	-echo $(mlds_to_gcc.all_os) mlds_to_gcc_init.$O | xargs rm -f
	-echo $(mlds_to_gcc.all_pic_os) mlds_to_gcc_init.pic_o | xargs rm -f
	-echo $(mlds_to_gcc.c_dates) | xargs rm -f
	-echo $(mlds_to_gcc.il_dates) | xargs rm -f
	-echo $(mlds_to_gcc.java_dates) | xargs rm -f
	-echo $(mlds_to_gcc.all_s_dates) | xargs rm -f
	-echo $(mlds_to_gcc.all_pic_s_dates) | xargs rm -f
	-echo $(mlds_to_gcc.useds) | xargs rm -f
	-echo $(mlds_to_gcc.ils) | xargs rm -f
	-echo $(mlds_to_gcc.javas) | xargs rm -f
	-echo $(mlds_to_gcc.profs) | xargs rm -f
	-echo $(mlds_to_gcc.errs) | xargs rm -f
	-echo $(mlds_to_gcc.foreign_cs) | xargs rm -f

realclean_local : mlds_to_gcc.realclean
.PHONY : mlds_to_gcc.realclean
mlds_to_gcc.realclean : mlds_to_gcc.clean
	-echo $(mlds_to_gcc.dates) | xargs rm -f
	-echo $(mlds_to_gcc.date0s) | xargs rm -f
	-echo $(mlds_to_gcc.date3s) | xargs rm -f
	-echo $(mlds_to_gcc.optdates) | xargs rm -f
	-echo $(mlds_to_gcc.trans_opt_dates) | xargs rm -f
	-echo $(mlds_to_gcc.ints) | xargs rm -f
	-echo $(mlds_to_gcc.all_int0s) | xargs rm -f
	-echo $(mlds_to_gcc.int3s) | xargs rm -f
	-echo $(mlds_to_gcc.opts) | xargs rm -f
	-echo $(mlds_to_gcc.trans_opts) | xargs rm -f
	-echo $(mlds_to_gcc.analysiss) | xargs rm -f
	-echo $(mlds_to_gcc.requests) | xargs rm -f
	-echo $(mlds_to_gcc.imdgs) | xargs rm -f
	-echo $(mlds_to_gcc.ds) | xargs rm -f
	-echo $(mlds_to_gcc.module_deps) | xargs rm -f
	-echo $(mlds_to_gcc.all_mhs) | xargs rm -f
	-echo $(mlds_to_gcc.all_mihs) | xargs rm -f
	-echo $(mlds_to_gcc.dlls) | xargs rm -f
	-echo $(mlds_to_gcc.foreign_dlls) | xargs rm -f
	-echo $(mlds_to_gcc.classes) | xargs rm -f
	-rm -f mlds_to_gcc$(EXT_FOR_EXE) mlds_to_gcc.init libmlds_to_gcc.$A libmlds_to_gcc.$(EXT_FOR_SHARED_LIB) mlds_to_gcc.jar mlds_to_gcc.dep mlds_to_gcc.dv

