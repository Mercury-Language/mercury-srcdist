:- module (erl_backend.elds).
:- interface.
:- use_module backend_libs.
:- use_module bool.
:- use_module char.
:- use_module hlds.
:- use_module list.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module set.
:- use_module (backend_libs.rtti).
:- use_module (hlds.hlds_pred).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.prog_data).
:- use_module (parse_tree.prog_foreign).
:- type elds
    --->    elds(((erl_backend.elds).elds_name) :: mdbcomp.sym_name.module_name, ((erl_backend.elds).elds_imports) :: set.set(mdbcomp.sym_name.module_name), ((erl_backend.elds).elds_foreign_decls) :: list.list(parse_tree.prog_foreign.foreign_decl_code), ((erl_backend.elds).elds_foreign_bodies) :: list.list(parse_tree.prog_foreign.foreign_body_code), ((erl_backend.elds).elds_funcs) :: list.list(erl_backend.elds.elds_defn), ((erl_backend.elds).elds_fe_funcs) :: list.list(erl_backend.elds.elds_foreign_export_defn), ((erl_backend.elds).elds_rtti_funcs) :: list.list(erl_backend.elds.elds_rtti_defn), ((erl_backend.elds).elds_init_preds) :: list.list(hlds.hlds_pred.pred_proc_id), ((erl_backend.elds).elds_final_preds) :: list.list(hlds.hlds_pred.pred_proc_id)).
:- type elds_binop
    --->    mul 
    ;       float_div 
    ;       int_div 
    ;       (rem) 
    ;       band 
    ;       add 
    ;       sub 
    ;       bor 
    ;       bxor 
    ;       bsl 
    ;       bsr 
    ;       (=<) 
    ;       (<) 
    ;       (>=) 
    ;       (>) 
    ;       (=:=) 
    ;       =/= 
    ;       andalso 
    ;       orelse 
    ;       erl_unsigned_lt 
    ;       erl_unsigned_le .
:- type elds_body
    --->    body_defined_here(erl_backend.elds.elds_clause)
    ;       body_external(parse_tree.prog_data.arity).
:- type elds_call_target
    --->    elds_call_plain(hlds.hlds_pred.pred_proc_id)
    ;       elds_call_ho(erl_backend.elds.elds_expr)
    ;       elds_call_builtin(string).
:- type elds_case
    --->    elds_case(erl_backend.elds.elds_term, erl_backend.elds.elds_expr).
:- type elds_catch
    --->    elds_catch(erl_backend.elds.elds_term, erl_backend.elds.elds_term, erl_backend.elds.elds_expr).
:- type elds_clause
    --->    elds_clause(((erl_backend.elds).clause_pattern) :: list.list(erl_backend.elds.elds_term), ((erl_backend.elds).clause_expr) :: erl_backend.elds.elds_expr).
:- type elds_defn
    --->    elds_defn(((erl_backend.elds).defn_proc_id) :: hlds.hlds_pred.pred_proc_id, ((erl_backend.elds).defn_varset) :: parse_tree.prog_data.prog_varset, ((erl_backend.elds).defn_body) :: erl_backend.elds.elds_body, ((erl_backend.elds).defn_env_vars) :: set.set(string)).
:- type elds_expr
    --->    elds_block(list.list(erl_backend.elds.elds_expr))
    ;       elds_term(erl_backend.elds.elds_term)
    ;       elds_eq(erl_backend.elds.elds_expr, erl_backend.elds.elds_expr)
    ;       elds_unop(erl_backend.elds.elds_unop, erl_backend.elds.elds_expr)
    ;       elds_binop(erl_backend.elds.elds_binop, erl_backend.elds.elds_expr, erl_backend.elds.elds_expr)
    ;       elds_call(erl_backend.elds.elds_call_target, list.list(erl_backend.elds.elds_expr))
    ;       elds_rtti_ref(erl_backend.elds.elds_rtti_id)
    ;       elds_fun(erl_backend.elds.elds_clause)
    ;       elds_case_expr(erl_backend.elds.elds_expr, list.list(erl_backend.elds.elds_case))
    ;       elds_try(((erl_backend.elds).try_expr) :: erl_backend.elds.elds_expr, ((erl_backend.elds).try_cases) :: list.list(erl_backend.elds.elds_case), ((erl_backend.elds).try_catch) :: maybe.maybe(erl_backend.elds.elds_catch), ((erl_backend.elds).try_after) :: maybe.maybe(erl_backend.elds.elds_expr))
    ;       elds_throw(erl_backend.elds.elds_expr)
    ;       elds_foreign_code(string, parse_tree.prog_data.prog_context)
    ;       elds_send(erl_backend.elds.elds_expr, erl_backend.elds.elds_expr)
    ;       elds_receive(list.list(erl_backend.elds.elds_case)).
:- type elds_foreign_export_defn
    --->    elds_foreign_export_defn(((erl_backend.elds).fe_defn_name) :: string, ((erl_backend.elds).fe_defn_varset) :: parse_tree.prog_data.prog_varset, ((erl_backend.elds).fe_defn_clause) :: erl_backend.elds.elds_clause).
:- type elds_rtti_defn
    --->    elds_rtti_defn(((erl_backend.elds).rtti_defn_id) :: erl_backend.elds.elds_rtti_id, ((erl_backend.elds).rtti_defn_exported) :: bool.bool, ((erl_backend.elds).rtti_defn_varset) :: parse_tree.prog_data.prog_varset, ((erl_backend.elds).rtti_defn_clause) :: erl_backend.elds.elds_clause).
:- type elds_rtti_id
    --->    elds_rtti_type_ctor_id(backend_libs.rtti.rtti_type_ctor)
    ;       elds_rtti_type_info_id(backend_libs.rtti.rtti_type_info)
    ;       elds_rtti_pseudo_type_info_id(backend_libs.rtti.rtti_pseudo_type_info)
    ;       elds_rtti_base_typeclass_id(backend_libs.rtti.tc_name, mdbcomp.sym_name.module_name, string).
:- type elds_term
    --->    elds_char(char.char)
    ;       elds_int(int)
    ;       elds_uint(uint)
    ;       elds_int8(int8)
    ;       elds_uint8(uint8)
    ;       elds_int16(int16)
    ;       elds_uint16(uint16)
    ;       elds_int32(int32)
    ;       elds_uint32(uint32)
    ;       elds_int64(int64)
    ;       elds_uint64(uint64)
    ;       elds_float(float)
    ;       elds_binary(string)
    ;       elds_list_of_ints(string)
    ;       elds_atom_raw(string)
    ;       elds_atom(mdbcomp.sym_name.sym_name)
    ;       elds_tuple(list.list(erl_backend.elds.elds_expr))
    ;       elds_var(parse_tree.prog_data.prog_var)
    ;       elds_anon_var 
    ;       elds_fixed_name_var(string).
:- type elds_unop
    --->    plus 
    ;       minus 
    ;       bnot 
    ;       logical_not .
:- func det_expr(maybe.maybe(erl_backend.elds.elds_expr)) = erl_backend.elds.elds_expr.
:- func elds_body_arity(erl_backend.elds.elds_body) = parse_tree.prog_data.arity.
:- func elds_call_builtin(string, list.list(erl_backend.elds.elds_expr)) = erl_backend.elds.elds_expr.
:- func elds_call_element(parse_tree.prog_data.prog_var, int) = erl_backend.elds.elds_expr.
:- func elds_call_self = erl_backend.elds.elds_expr.
:- func elds_clause_arity(erl_backend.elds.elds_clause) = parse_tree.prog_data.arity.
:- func elds_commit_marker = erl_backend.elds.elds_expr.
:- func elds_empty_tuple = erl_backend.elds.elds_term.
:- func elds_fail = erl_backend.elds.elds_term.
:- func elds_false = erl_backend.elds.elds_term.
:- func elds_throw_atom = erl_backend.elds.elds_term.
:- func elds_true = erl_backend.elds.elds_term.
:- func expr_from_var(parse_tree.prog_data.prog_var) = erl_backend.elds.elds_expr.
:- func expr_or_void(maybe.maybe(erl_backend.elds.elds_expr)) = erl_backend.elds.elds_expr.
:- func expr_to_term(erl_backend.elds.elds_expr) = erl_backend.elds.elds_term.
:- func exprs_from_fixed_vars(list.list(string)) = list.list(erl_backend.elds.elds_expr).
:- func exprs_from_vars(parse_tree.prog_data.prog_vars) = list.list(erl_backend.elds.elds_expr).
:- func join_exprs(erl_backend.elds.elds_expr, erl_backend.elds.elds_expr) = erl_backend.elds.elds_expr.
:- func make_enum_alternative(string) = erl_backend.elds.elds_term.
:- func maybe_join_exprs(erl_backend.elds.elds_expr, maybe.maybe(erl_backend.elds.elds_expr)) = erl_backend.elds.elds_expr.
:- func maybe_join_exprs1(maybe.maybe(erl_backend.elds.elds_expr), erl_backend.elds.elds_expr) = erl_backend.elds.elds_expr.
:- func term_from_var(parse_tree.prog_data.prog_var) = erl_backend.elds.elds_term.
:- func terms_from_fixed_vars(list.list(string)) = list.list(erl_backend.elds.elds_term).
:- func terms_from_vars(parse_tree.prog_data.prog_vars) = list.list(erl_backend.elds.elds_term).
:- func tuple_or_single_expr(list.list(erl_backend.elds.elds_expr)) = erl_backend.elds.elds_expr.
:- func var_eq_false(parse_tree.prog_data.prog_var) = erl_backend.elds.elds_expr.
