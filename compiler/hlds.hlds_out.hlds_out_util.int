:- module ((hlds.hlds_out).hlds_out_util).
:- interface.
:- import_module io.
:- import_module libs.
:- import_module list.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module pair.
:- import_module parse_tree.
:- import_module term.
:- import_module (hlds.hlds_class).
:- import_module (hlds.hlds_goal).
:- import_module (hlds.hlds_module).
:- import_module (hlds.hlds_pred).
:- import_module (hlds.status).
:- import_module (libs.globals).
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.error_util).
:- import_module (parse_tree.parse_tree_out_info).
:- import_module (parse_tree.parse_tree_out_term).
:- import_module (parse_tree.prog_data).
:- type hlds_out_info
    --->    hlds_out_info((((hlds.hlds_out).hlds_out_util).hoi_dump_hlds_options) :: string, (((hlds.hlds_out).hlds_out_util).hoi_dump_hlds_options_backup) :: string, (((hlds.hlds_out).hlds_out_util).hoi_dump_hlds_pred_ids) :: list.list(string), (((hlds.hlds_out).hlds_out_util).hoi_dump_hlds_pred_names) :: list.list(string), (((hlds.hlds_out).hlds_out_util).hoi_mercury_to_mercury) :: parse_tree.parse_tree_out_info.merc_out_info).
:- type is_first
    --->    is_first 
    ;       is_not_first .
:- type is_last
    --->    is_last 
    ;       is_not_last .
:- type maybe_qualify_cons_id
    --->    qualify_cons_id 
    ;       do_not_qualify_cons_id .
:- func call_arg_id_to_string(hlds.hlds_pred.call_id, int, hlds.hlds_pred.pred_markers) = string.
:- func call_id_to_string(hlds.hlds_pred.call_id) = string.
:- func cast_type_to_string(hlds.hlds_goal.cast_kind) = string.
:- func cons_id_and_vars_or_arity_to_string(parse_tree.prog_data.prog_varset, hlds.hlds_out.hlds_out_util.maybe_qualify_cons_id, parse_tree.prog_data.cons_id, maybe.maybe(list.list(parse_tree.prog_data.prog_var))) = string.
:- func functor_cons_id_to_string(hlds.hlds_module.module_info, parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, parse_tree.prog_data.cons_id, list.list(parse_tree.prog_data.prog_var)) = string.
:- func functor_to_string(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, term.const, list.list(parse_tree.prog_data.prog_var)) = string.
:- func functor_to_string_maybe_needs_quotes(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, parse_tree.parse_tree_out_term.needs_quotes, term.const, list.list(parse_tree.prog_data.prog_var)) = string.
:- func generic_call_id_to_string(hlds.hlds_pred.generic_call_id) = string.
:- func indent_string(int) = string.
:- func init_hlds_out_info(libs.globals.globals, parse_tree.parse_tree_out_info.output_lang) = hlds.hlds_out.hlds_out_util.hlds_out_info.
:- func inst_import_status_to_string(hlds.status.inst_status) = string.
:- func instance_import_status_to_string(hlds.status.instance_status) = string.
:- func mode_import_status_to_string(hlds.status.mode_status) = string.
:- func pred_id_to_string(hlds.hlds_module.module_info, hlds.hlds_pred.pred_id) = string.
:- func pred_import_status_to_string(hlds.status.pred_status) = string.
:- func pred_info_id_to_string(hlds.hlds_pred.pred_info) = string.
:- func pred_proc_id_pair_to_string(hlds.hlds_module.module_info, hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id) = string.
:- func pred_proc_id_to_string(hlds.hlds_module.module_info, hlds.hlds_pred.pred_proc_id) = string.
:- func qualified_functor_to_string(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, mdbcomp.sym_name.module_name, term.const, list.list(parse_tree.prog_data.prog_var)) = string.
:- func qualified_functor_with_term_args_to_string(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, mdbcomp.sym_name.module_name, term.const, list.list(parse_tree.prog_data.prog_term)) = string.
:- func type_import_status_to_string(hlds.status.type_status) = string.
:- func typeclass_import_status_to_string(hlds.status.typeclass_status) = string.
:- pred unify_context_first_to_pieces(hlds.hlds_out.hlds_out_util.is_first, hlds.hlds_out.hlds_out_util.is_first, hlds.hlds_goal.unify_context, list.list(parse_tree.error_util.format_component), list.list(parse_tree.error_util.format_component)).
:- mode unify_context_first_to_pieces((builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred unify_context_to_pieces(hlds.hlds_goal.unify_context, list.list(parse_tree.error_util.format_component), list.list(parse_tree.error_util.format_component)).
:- mode unify_context_to_pieces((builtin.in), (builtin.in), (builtin.out)) is det.
:- func var_mode_to_string(parse_tree.prog_data.prog_varset, parse_tree.prog_data.inst_varset, parse_tree.prog_data.var_name_print, pair.pair(parse_tree.prog_data.prog_var, parse_tree.prog_data.mer_mode)) = string.
:- func var_modes_to_string(parse_tree.prog_data.prog_varset, parse_tree.prog_data.inst_varset, parse_tree.prog_data.var_name_print, list.list(parse_tree.prog_data.prog_var), list.list(parse_tree.prog_data.mer_mode)) = string.
:- pred write_cons_id_and_vars_or_arity(parse_tree.prog_data.prog_varset, hlds.hlds_out.hlds_out_util.maybe_qualify_cons_id, parse_tree.prog_data.cons_id, maybe.maybe(list.list(parse_tree.prog_data.prog_var)), io.io, io.io).
:- mode write_cons_id_and_vars_or_arity((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_constraint_proof_map(parse_tree.prog_data.tvarset, parse_tree.prog_data.var_name_print, int, hlds.hlds_class.constraint_proof_map, io.io, io.io).
:- mode write_constraint_proof_map((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_functor(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, term.const, list.list(parse_tree.prog_data.prog_var), io.io, io.io).
:- mode write_functor((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_functor_cons_id(hlds.hlds_module.module_info, parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, parse_tree.prog_data.cons_id, list.list(parse_tree.prog_data.prog_var), io.io, io.io).
:- mode write_functor_cons_id((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_functor_maybe_needs_quotes(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, parse_tree.parse_tree_out_term.needs_quotes, term.const, list.list(parse_tree.prog_data.prog_var), io.io, io.io).
:- mode write_functor_maybe_needs_quotes((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_indent(int, io.io, io.io).
:- mode write_indent((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_intlist(list.list(int), io.io, io.io).
:- mode write_intlist((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_pred_id(hlds.hlds_module.module_info, hlds.hlds_pred.pred_id, io.io, io.io).
:- mode write_pred_id((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_pred_proc_id(hlds.hlds_module.module_info, hlds.hlds_pred.pred_proc_id, io.io, io.io).
:- mode write_pred_proc_id((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_pred_proc_id_pair(hlds.hlds_module.module_info, hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id, io.io, io.io).
:- mode write_pred_proc_id_pair((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_qualified_functor(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, mdbcomp.sym_name.module_name, term.const, list.list(parse_tree.prog_data.prog_var), io.io, io.io).
:- mode write_qualified_functor((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_qualified_functor_with_term_args(parse_tree.prog_data.prog_varset, parse_tree.prog_data.var_name_print, mdbcomp.sym_name.module_name, term.const, list.list(parse_tree.prog_data.prog_term), io.io, io.io).
:- mode write_qualified_functor_with_term_args((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_var_mode(parse_tree.prog_data.prog_varset, parse_tree.prog_data.inst_varset, parse_tree.prog_data.var_name_print, pair.pair(parse_tree.prog_data.prog_var, parse_tree.prog_data.mer_mode), io.io, io.io).
:- mode write_var_mode((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_var_modes(parse_tree.prog_data.prog_varset, parse_tree.prog_data.inst_varset, parse_tree.prog_data.var_name_print, list.list(parse_tree.prog_data.prog_var), list.list(parse_tree.prog_data.mer_mode), io.io, io.io).
:- mode write_var_modes((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
