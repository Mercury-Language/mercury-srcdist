:- module (ml_backend.mlds_to_target_util).
:- interface.
:- type break_context
	where	type_is_abstract_enum(2).
:- type code_addrs_in_consts.
:- type exit_method
	where	type_is_abstract_enum(3).
:- type exit_methods.
:- type func_info_csj.
:- type indent.
:- type output_aux.
:- type output_generics
	where	type_is_abstract_enum(1).
:- type_representation((ml_backend.mlds_to_target_util).break_context, du_repn(enum("bc_none", "bc_switch", ["bc_loop"], []))).
:- type_representation((ml_backend.mlds_to_target_util).code_addrs_in_consts, is_word_aligned_ptr).
:- type_representation((ml_backend.mlds_to_target_util).exit_method, du_repn(enum("can_break", "can_continue", ["can_return", "can_throw", "can_fall_through"], []))).
:- type_representation((ml_backend.mlds_to_target_util).exit_methods, is_eqv_to(set.set(ml_backend.mlds_to_target_util.exit_method))).
:- type_representation((ml_backend.mlds_to_target_util).func_info_csj, du_repn(notag("func_info_csj", []))).
:- type_representation((ml_backend.mlds_to_target_util).indent, is_eqv_to(int)).
:- type_representation((ml_backend.mlds_to_target_util).output_generics, du_repn(enum("do_output_generics", "do_not_output_generics", [], []))).
