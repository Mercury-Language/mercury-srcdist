:- module (parse_tree.deps_map).
:- interface.
:- use_module io.
:- use_module libs.
:- use_module list.
:- use_module map.
:- use_module mdbcomp.
:- use_module (libs.globals).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.error_util).
:- use_module (parse_tree.file_names).
:- use_module (parse_tree.module_imports).
:- type deps
    --->    deps(parse_tree.deps_map.have_processed, parse_tree.module_imports.burdened_aug_comp_unit).
:- type deps_map == map.map(mdbcomp.sym_name.module_name, parse_tree.deps_map.deps).
:- type have_processed
    --->    not_yet_processed 
    ;       already_processed .
:- type submodule_kind
    --->    toplevel 
    ;       nested_submodule 
    ;       separate_submodule .
:- pred generate_deps_map(libs.globals.globals, parse_tree.file_names.maybe_search, mdbcomp.sym_name.module_name, parse_tree.deps_map.deps_map, parse_tree.deps_map.deps_map, list.list(parse_tree.error_util.error_spec), list.list(parse_tree.error_util.error_spec), io.io, io.io).
:- mode generate_deps_map((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- func get_submodule_kind(mdbcomp.sym_name.module_name, parse_tree.deps_map.deps_map) = parse_tree.deps_map.submodule_kind.
:- pred insert_into_deps_map(parse_tree.module_imports.burdened_aug_comp_unit, parse_tree.deps_map.deps_map, parse_tree.deps_map.deps_map).
:- mode insert_into_deps_map((builtin.in), (builtin.in), (builtin.out)) is det.
