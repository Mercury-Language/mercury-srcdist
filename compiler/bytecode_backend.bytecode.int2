:- module (bytecode_backend.bytecode).
:- interface.
:- import_module backend_libs.
:- import_module char.
:- import_module cord.
:- import_module hlds.
:- import_module io.
:- import_module list.
:- import_module mdbcomp.
:- import_module pair.
:- import_module parse_tree.
:- import_module (backend_libs.builtin_ops).
:- import_module (hlds.hlds_data).
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.prog_data).
:- type byte_arg
    --->    byte_arg_var(bytecode_backend.bytecode.byte_var)
    ;       byte_arg_int_const(int)
    ;       byte_arg_float_const(float)
    ;       byte_arg_uint_const(uint)
    ;       byte_arg_int8_const(int8)
    ;       byte_arg_uint8_const(uint8)
    ;       byte_arg_int16_const(int16)
    ;       byte_arg_uint16_const(uint16)
    ;       byte_arg_int32_const(int32)
    ;       byte_arg_uint32_const(uint32)
    ;       byte_arg_int64_const(int64)
    ;       byte_arg_uint64_const(uint64).
:- type byte_code
    --->    byte_enter_pred(bytecode_backend.bytecode.byte_pred_id, int, bytecode_backend.bytecode.byte_is_func, int)
    ;       byte_endof_pred 
    ;       byte_enter_proc(bytecode_backend.bytecode.byte_proc_id, parse_tree.prog_data.determinism, int, int, int, list.list(bytecode_backend.bytecode.byte_var_info))
    ;       byte_endof_proc 
    ;       byte_label(bytecode_backend.bytecode.byte_label_id)
    ;       byte_enter_disjunction(bytecode_backend.bytecode.byte_label_id)
    ;       byte_endof_disjunction 
    ;       byte_enter_disjunct(bytecode_backend.bytecode.byte_label_id)
    ;       byte_endof_disjunct(bytecode_backend.bytecode.byte_label_id)
    ;       byte_enter_switch(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_label_id)
    ;       byte_endof_switch 
    ;       byte_enter_switch_arm(bytecode_backend.bytecode.byte_cons_id, list.list(bytecode_backend.bytecode.byte_cons_id), bytecode_backend.bytecode.byte_label_id)
    ;       byte_endof_switch_arm(bytecode_backend.bytecode.byte_label_id)
    ;       byte_enter_if(bytecode_backend.bytecode.byte_label_id, bytecode_backend.bytecode.byte_label_id, bytecode_backend.bytecode.byte_temp)
    ;       byte_enter_then(bytecode_backend.bytecode.byte_temp)
    ;       byte_endof_then(bytecode_backend.bytecode.byte_label_id)
    ;       byte_enter_else(bytecode_backend.bytecode.byte_temp)
    ;       byte_endof_if 
    ;       byte_enter_negation(bytecode_backend.bytecode.byte_temp, bytecode_backend.bytecode.byte_label_id)
    ;       byte_endof_negation_goal(bytecode_backend.bytecode.byte_temp)
    ;       byte_endof_negation 
    ;       byte_enter_commit(bytecode_backend.bytecode.byte_temp)
    ;       byte_endof_commit(bytecode_backend.bytecode.byte_temp)
    ;       byte_assign(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_var)
    ;       byte_test(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_test_id)
    ;       byte_construct(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_cons_id, list.list(bytecode_backend.bytecode.byte_var))
    ;       byte_deconstruct(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_cons_id, list.list(bytecode_backend.bytecode.byte_var))
    ;       byte_complex_construct(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_cons_id, list.list(pair.pair(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_dir)))
    ;       byte_complex_deconstruct(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_cons_id, list.list(pair.pair(bytecode_backend.bytecode.byte_var, bytecode_backend.bytecode.byte_dir)))
    ;       byte_place_arg(bytecode_backend.bytecode.byte_reg_type, int, bytecode_backend.bytecode.byte_var)
    ;       byte_pickup_arg(bytecode_backend.bytecode.byte_reg_type, int, bytecode_backend.bytecode.byte_var)
    ;       byte_call(bytecode_backend.bytecode.byte_module_id, bytecode_backend.bytecode.byte_pred_id, parse_tree.prog_data.arity, bytecode_backend.bytecode.byte_is_func, bytecode_backend.bytecode.byte_proc_id)
    ;       byte_higher_order_call(bytecode_backend.bytecode.byte_var, parse_tree.prog_data.arity, parse_tree.prog_data.arity, parse_tree.prog_data.determinism)
    ;       byte_builtin_binop(backend_libs.builtin_ops.binary_op, bytecode_backend.bytecode.byte_arg, bytecode_backend.bytecode.byte_arg, bytecode_backend.bytecode.byte_var)
    ;       byte_builtin_unop(backend_libs.builtin_ops.unary_op, bytecode_backend.bytecode.byte_arg, bytecode_backend.bytecode.byte_var)
    ;       byte_builtin_bintest(backend_libs.builtin_ops.binary_op, bytecode_backend.bytecode.byte_arg, bytecode_backend.bytecode.byte_arg)
    ;       byte_builtin_untest(backend_libs.builtin_ops.unary_op, bytecode_backend.bytecode.byte_arg)
    ;       byte_semidet_succeed 
    ;       byte_semidet_success_check 
    ;       byte_fail 
    ;       byte_context(int)
    ;       byte_not_supported .
:- type byte_cons_id
    --->    byte_cons(bytecode_backend.bytecode.byte_module_id, string, parse_tree.prog_data.arity, bytecode_backend.bytecode.byte_cons_tag)
    ;       byte_int_const(int)
    ;       byte_string_const(string)
    ;       byte_float_const(float)
    ;       byte_char_const(char.char)
    ;       byte_pred_const(bytecode_backend.bytecode.byte_module_id, bytecode_backend.bytecode.byte_pred_id, parse_tree.prog_data.arity, bytecode_backend.bytecode.byte_is_func, bytecode_backend.bytecode.byte_proc_id)
    ;       byte_type_ctor_info_const(bytecode_backend.bytecode.byte_module_id, string, int)
    ;       byte_base_typeclass_info_const(bytecode_backend.bytecode.byte_module_id, parse_tree.prog_data.class_id, string)
    ;       byte_type_info_cell_constructor 
    ;       byte_typeclass_info_cell_constructor .
:- type byte_cons_tag
    --->    byte_no_tag 
    ;       byte_unshared_tag(hlds.hlds_data.tag_bits)
    ;       byte_shared_remote_tag(hlds.hlds_data.tag_bits, int)
    ;       byte_shared_local_tag(hlds.hlds_data.tag_bits, int)
    ;       byte_enum_tag(int).
:- type byte_dir
    --->    to_arg 
    ;       to_var 
    ;       to_none .
:- type byte_is_func == int.
:- type byte_label_id == int.
:- type byte_module_id == mdbcomp.sym_name.module_name.
:- type byte_pred_id == string.
:- type byte_proc_id == int.
:- type byte_reg_type
    --->    byte_reg_r .
:- type byte_temp == int.
:- type byte_test_id
    --->    int_test 
    ;       char_test 
    ;       string_test 
    ;       float_test 
    ;       enum_test 
    ;       dummy_test .
:- type byte_tree == cord.cord(bytecode_backend.bytecode.byte_code).
:- type byte_var == int.
:- type byte_var_info
    --->    var_info(string, parse_tree.prog_data.mer_type).
