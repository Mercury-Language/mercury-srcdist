:- module recompilation.
:- interface.
:- include_module (recompilation.check).
:- include_module (recompilation.usage).
:- include_module (recompilation.used_file).
:- include_module (recompilation.version).
:- use_module libs.
:- use_module map.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module set.
:- use_module term.
:- use_module (libs.timestamp).
:- use_module (mdbcomp.prim_data).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.prog_data).
:- type eqv_expand_info
    --->    no_eqv_expand_info 
    ;       eqv_expand_info(mdbcomp.sym_name.module_name, set.set(recompilation.item_id)).
:- type item_id
    --->    item_id(recompilation.item_type, recompilation.item_name).
:- type item_name
    --->    item_name(mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- type item_name_version_map == map.map(recompilation.item_name, recompilation.version_number).
:- type item_type
    --->    type_name_item 
    ;       type_defn_item 
    ;       inst_item 
    ;       mode_item 
    ;       typeclass_item 
    ;       functor_item 
    ;       predicate_item 
    ;       function_item 
    ;       mutable_item 
    ;       foreign_proc_item .
:- type module_item_version_numbers
    --->    module_item_version_numbers((recompilation.mivn_type_names) :: recompilation.name_arity_version_map, (recompilation.mivn_type_defns) :: recompilation.name_arity_version_map, (recompilation.mivn_insts) :: recompilation.name_arity_version_map, (recompilation.mivn_modes) :: recompilation.name_arity_version_map, (recompilation.mivn_typeclasses) :: recompilation.name_arity_version_map, (recompilation.mivn_instances) :: recompilation.item_name_version_map, (recompilation.mivn_predicates) :: recompilation.name_arity_version_map, (recompilation.mivn_functions) :: recompilation.name_arity_version_map).
:- type module_item_version_numbers_map == map.map(mdbcomp.sym_name.module_name, recompilation.module_item_version_numbers).
:- type module_qualifier == mdbcomp.sym_name.module_name.
:- type name_arity_version_map == map.map(parse_tree.prog_data.name_arity, recompilation.version_number).
:- type recompilation_info
    --->    recompilation_info((recompilation.recomp_module_name) :: mdbcomp.sym_name.module_name, (recompilation.recomp_used_items) :: recompilation.used_items, (recompilation.recomp_dependencies) :: map.map(recompilation.item_id, set.set(recompilation.item_id)), (recompilation.recomp_version_numbers) :: recompilation.module_item_version_numbers_map).
:- type simple_item_set == map.map(parse_tree.prog_data.name_arity, map.map(recompilation.module_qualifier, mdbcomp.sym_name.module_name)).
:- type used_item_type
    --->    used_type_name 
    ;       used_type_defn 
    ;       used_inst 
    ;       used_mode 
    ;       used_typeclass 
    ;       used_functor 
    ;       used_predicate 
    ;       used_function .
:- type used_items
    --->    used_items((recompilation.used_type_names) :: recompilation.simple_item_set, (recompilation.used_type_defns) :: recompilation.simple_item_set, (recompilation.used_insts) :: recompilation.simple_item_set, (recompilation.used_modes) :: recompilation.simple_item_set, (recompilation.used_typeclasses) :: recompilation.simple_item_set, (recompilation.used_functors) :: recompilation.simple_item_set, (recompilation.used_predicates) :: recompilation.simple_item_set, (recompilation.used_functions) :: recompilation.simple_item_set).
:- type version_number == libs.timestamp.timestamp.
:- inst (pred_or_func_item) for recompilation.item_type/0 == bound(function_item ; predicate_item).
:- inst (simple_item) for recompilation.item_type/0 == bound(inst_item ; mode_item ; type_defn_item ; type_name_item ; typeclass_item).
