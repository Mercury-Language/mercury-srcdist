:- module (transform_hlds.complexity).
:- interface.
:- use_module hlds.
:- use_module io.
:- use_module maybe.
:- use_module pair.
:- use_module (hlds.hlds_module).
:- use_module (hlds.hlds_pred).
:- func complexity_proc_name(hlds.hlds_module.module_info, hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id) = string.
:- pred complexity_process_proc_msg(int, hlds.hlds_module.complexity_proc_map, hlds.hlds_pred.pred_proc_id, hlds.hlds_pred.proc_info, hlds.hlds_pred.proc_info, hlds.hlds_module.module_info, hlds.hlds_module.module_info).
:- mode complexity_process_proc_msg((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- func is_in_complexity_proc_map(hlds.hlds_module.complexity_proc_map, hlds.hlds_module.module_info, hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id) = maybe.maybe(int).
:- pred read_spec_file(string, maybe.maybe_error(pair.pair(int, hlds.hlds_module.complexity_proc_map)), io.io, io.io).
:- mode read_spec_file((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
