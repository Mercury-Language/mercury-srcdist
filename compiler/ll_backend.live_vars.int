:- module (ll_backend.live_vars).
:- interface.
:- import_module bool.
:- import_module set.
:- import_module (hlds.hlds_goal).
:- import_module (hlds.hlds_llds).
:- import_module (hlds.hlds_module).
:- import_module (hlds.hlds_pred).
:- import_module (parse_tree.prog_data).
:- type alloc_data
	--->	alloc_data(((ll_backend.live_vars).module_info) :: ((hlds.hlds_module).module_info), ((ll_backend.live_vars).proc_info) :: ((hlds.hlds_pred).proc_info), ((ll_backend.live_vars).typeinfo_liveness) :: (bool.bool), ((ll_backend.live_vars).opt_no_return_calls) :: (bool.bool)).
:- typeclass stack_alloc_info(T) where [
	pred at_call_site(((hlds.hlds_llds).need_across_call), ((hlds.hlds_goal).hlds_goal_info), T, T),
	mode at_call_site((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det,
	pred at_resume_site(((hlds.hlds_llds).need_in_resume), ((hlds.hlds_goal).hlds_goal_info), T, T),
	mode at_resume_site((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det,
	pred at_par_conj(((hlds.hlds_llds).need_in_par_conj), ((hlds.hlds_goal).hlds_goal_info), T, T),
	mode at_par_conj((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det
].
:- pred build_live_sets_in_goal_no_par_stack(((hlds.hlds_goal).hlds_goal), ((hlds.hlds_goal).hlds_goal), (set.set(((parse_tree.prog_data).prog_var))), ((ll_backend.live_vars).alloc_data), T, T, (set.set(((parse_tree.prog_data).prog_var))), (set.set(((parse_tree.prog_data).prog_var))), (set.set(((parse_tree.prog_data).prog_var))), (set.set(((parse_tree.prog_data).prog_var)))) <= ((ll_backend.live_vars).stack_alloc_info(T)).
:- mode build_live_sets_in_goal_no_par_stack((builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
