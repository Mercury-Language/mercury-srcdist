:- module (ll_backend.basic_block).
:- interface.
:- use_module map.
:- use_module (ll_backend.llds).
:- type block_info
    --->    block_info(((ll_backend.basic_block).bi_starting_label) :: ll_backend.llds.label, ((ll_backend.basic_block).bi_label_instr) :: ll_backend.llds.instruction, ((ll_backend.basic_block).bi_later_instrs) :: list.list(ll_backend.llds.instruction), ((ll_backend.basic_block).bi_num_later_instrs) :: int, ((ll_backend.basic_block).bi_fallen_into) :: bool.bool, ((ll_backend.basic_block).bi_jump_dests) :: list.list(ll_backend.llds.label), ((ll_backend.basic_block).bi_fall_dest) :: maybe.maybe(ll_backend.llds.label)).
:- type block_map == map.map(ll_backend.llds.label, ll_backend.basic_block.block_info).
:- type_representation(block_info, is_word_aligned_ptr).
:- type_representation(block_map, is_eqv_to(map.map(ll_backend.llds.label, ll_backend.basic_block.block_info))).
