:- module (libs.process_util).
:- interface.
:- import_module bool.
:- import_module io.
:- import_module maybe.
:- type io_pred == pred(bool.bool, io.io, io.io).
:- type pid == int.
:- type build0(Info) == pred(bool.bool, Info, Info, io.io, io.io).
:- type post_signal_cleanup(Info) == pred(Info, Info, io.io, io.io).
:- inst (build0) == (pred((builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (io_pred) == (pred((builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (post_signal_cleanup) == (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- implementation.
:- type signal_action
	--->	signal_action .
:- pragma foreign_type(c, signal_action, "MR_signal_action").
:- pragma foreign_import_module("C", (libs.process_util)).
:- pragma foreign_import_module("C", (libs.process_util)).
