:- module (libs.process_util).
:- interface.
:- use_module io.
:- use_module (libs.maybe_util).
:- type io_pred == pred(libs.maybe_util.maybe_succeeded, io.io, io.io).
:- type pid == int.
:- type post_signal_cleanup(Info) == pred(Info, Info, io.io, io.io).
:- type signal_action.
:- inst io_pred == (pred((builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst post_signal_cleanup == (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- implementation.
:- pragma foreign_import_module("C", (libs.process_util)).
:- type signal_action
    --->    signal_action .
:- pragma foreign_type(c, signal_action, "MR_signal_action").
