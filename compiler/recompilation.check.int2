:- module (recompilation.check).
:- interface.
:- use_module io.
:- use_module list.
:- use_module (libs.file_util).
:- use_module (mdbcomp.sym_name).
:- type find_target_file_names == pred(mdbcomp.sym_name.module_name, list.list(libs.file_util.file_name), io.io, io.io).
:- type find_timestamp_file_names == pred(mdbcomp.sym_name.module_name, list.list(libs.file_util.file_name), io.io, io.io).
:- type modules_to_recompile
    --->    all_modules 
    ;       some_modules(list.list(mdbcomp.sym_name.module_name)).
:- inst (find_target_file_names) == (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (find_timestamp_file_names) == (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- type_representation((recompilation.check).find_target_file_names, is_eqv_to(pred(mdbcomp.sym_name.module_name, list.list(libs.file_util.file_name), io.io, io.io))).
:- type_representation((recompilation.check).find_timestamp_file_names, is_eqv_to(pred(mdbcomp.sym_name.module_name, list.list(libs.file_util.file_name), io.io, io.io))).
:- type_representation((recompilation.check).parse_resolved_item_matches(V_1), is_eqv_to(pred(recompilation.check.recompilation_check_info, term.term, recompilation.usage.resolved_item_map(V_1), recompilation.usage.resolved_item_map(V_1)))).
