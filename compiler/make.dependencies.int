:- module (make.dependencies).
:- interface.
:- import_module enum.
:- type cached_direct_imports.
:- type cached_foreign_imports.
:- type cached_transitive_dependencies.
:- type dependencies_result
	--->	deps_up_to_date 
	;	deps_out_of_date 
	;	deps_error .
:- type dependency_file
	--->	dep_target(make.target_file)
	;	dep_file(libs.file_util.file_name, maybe.maybe(libs.options.option)).
:- type dependency_file_index.
:- type module_index.
:- type deps_set(T) == sparse_bitset.sparse_bitset(T).
:- type find_module_deps(T) == pred(make.dependencies.module_index, bool.bool, make.dependencies.deps_set(T), make.make_info, make.make_info, io.io, io.io).
:- type find_module_deps_plain_set(T) == pred(make.dependencies.module_index, bool.bool, set.set(T), make.make_info, make.make_info, io.io, io.io).
:- inst (find_module_deps) == (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (find_module_deps_plain_set) == (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- instance (enum.enum(make.dependencies.dependency_file_index)).
:- instance (enum.enum(make.dependencies.module_index)).
:- pred check_dependencies(libs.file_util.file_name, maybe.maybe_error(libs.timestamp.timestamp), bool.bool, list.list(make.dependencies.dependency_file), make.dependencies.dependencies_result, make.make_info, make.make_info, io.io, io.io).
:- mode check_dependencies((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred check_dependency_timestamps(libs.file_util.file_name, maybe.maybe_error(libs.timestamp.timestamp), bool.bool, list.list(File), pred(File, io.io, io.io), list.list(maybe.maybe_error(libs.timestamp.timestamp)), make.dependencies.dependencies_result, io.io, io.io).
:- mode check_dependency_timestamps((builtin.in), (builtin.in), (builtin.in), (builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred dependency_file_index_set_to_plain_set(make.make_info, make.dependencies.deps_set(make.dependencies.dependency_file_index), set.set(make.dependencies.dependency_file)).
:- mode dependency_file_index_set_to_plain_set((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred dependency_status(make.dependencies.dependency_file, make.dependency_status, make.make_info, make.make_info, io.io, io.io).
:- mode dependency_status((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred deps_set_foldl3_maybe_stop_at_error(bool.bool, make.util.foldl3_pred_with_status(T, Acc, Info, IO), make.dependencies.deps_set(T), bool.bool, Acc, Acc, Info, Info, IO, IO) <= (enum.enum(T)).
:- mode deps_set_foldl3_maybe_stop_at_error((builtin.in), builtin.in(((make.util).foldl3_pred_with_status)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred find_reachable_local_modules(mdbcomp.prim_data.module_name, bool.bool, set.set(mdbcomp.prim_data.module_name), make.make_info, make.make_info, io.io, io.io).
:- mode find_reachable_local_modules((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- func init_cached_direct_imports = make.dependencies.cached_direct_imports.
:- func init_cached_foreign_imports = make.dependencies.cached_foreign_imports.
:- func init_cached_transitive_dependencies = make.dependencies.cached_transitive_dependencies.
:- pred make_local_module_id_options(mdbcomp.prim_data.module_name, bool.bool, list.list(string), make.make_info, make.make_info, io.io, io.io).
:- mode make_local_module_id_options((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred module_index_set_to_plain_set(make.make_info, make.dependencies.deps_set(make.dependencies.module_index), set.set(mdbcomp.prim_data.module_name)).
:- mode module_index_set_to_plain_set((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_names_to_index_set(list.list(mdbcomp.prim_data.module_name), make.dependencies.deps_set(make.dependencies.module_index), make.make_info, make.make_info).
:- mode module_names_to_index_set((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- func target_dependencies(libs.globals.globals, make.module_target_type) = make.dependencies.find_module_deps(make.dependencies.dependency_file_index).
:- mode target_dependencies((builtin.in), (builtin.in)) = builtin.out(((make.dependencies).find_module_deps)) is det.
:- pred union_deps(make.dependencies.find_module_deps(T), make.dependencies.module_index, bool.bool, make.dependencies.deps_set(T), make.dependencies.deps_set(T), make.make_info, make.make_info, io.io, io.io).
:- mode union_deps(builtin.in(((make.dependencies).find_module_deps)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred union_deps_plain_set(make.dependencies.find_module_deps_plain_set(T), make.dependencies.module_index, bool.bool, set.set(T), set.set(T), make.make_info, make.make_info, io.io, io.io).
:- mode union_deps_plain_set(builtin.in(((make.dependencies).find_module_deps_plain_set)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- implementation.
:- type cached_direct_imports == map.map(make.dependencies.module_index, make.dependencies.module_deps_result).
:- type cached_foreign_imports == map.map(make.dependencies.module_index, make.dependencies.module_deps_result).
:- type cached_transitive_dependencies == map.map(make.dependencies.transitive_dependencies_root, make.dependencies.deps_result(make.dependencies.module_index)).
:- type module_deps_result == make.dependencies.deps_result(make.dependencies.module_index).
:- type transitive_dependencies_root.
:- type deps_result(T).
