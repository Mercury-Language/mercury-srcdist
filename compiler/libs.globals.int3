:- module (libs.globals).
:- interface.
:- type backend
	where	type_is_abstract_enum(1).
:- type c_compiler_type.
:- type clang_version.
:- type compilation_target
	where	type_is_abstract_enum(2).
:- type csharp_compiler_type
	where	type_is_abstract_enum(2).
:- type env_type
	where	type_is_abstract_enum(3).
:- type file_install_cmd.
:- type foreign_language
	where	type_is_abstract_enum(2).
:- type gc_method
	where	type_is_abstract_enum(3).
:- type globals.
:- type limit_error_contexts_map.
:- type line_number_range.
:- type may_be_thread_safe.
:- type reuse_strategy.
:- type source_file_map.
:- type ssdb_trace_level
	where	type_is_abstract_enum(2).
:- type tags_method
	where	type_is_abstract_enum(1).
:- type termination_norm
	where	type_is_abstract_enum(2).
:- type_representation((libs.globals).backend, du_repn(enum("high_level_backend", "low_level_backend", [], []))).
:- type_representation((libs.globals).clang_version, is_word_aligned_ptr).
:- type_representation((libs.globals).compilation_target, du_repn(enum("target_c", "target_csharp", ["target_java", "target_erlang"], []))).
:- type_representation((libs.globals).csharp_compiler_type, du_repn(enum("csharp_microsoft", "csharp_mono", ["csharp_unknown"], []))).
:- type_representation((libs.globals).env_type, du_repn(enum("env_type_posix", "env_type_cygwin", ["env_type_msys", "env_type_win_cmd", "env_type_powershell"], []))).
:- type_representation((libs.globals).foreign_language, du_repn(enum("lang_c", "lang_csharp", ["lang_java", "lang_erlang"], []))).
:- type_representation((libs.globals).gc_method, du_repn(enum("gc_automatic", "gc_none", ["gc_boehm", "gc_boehm_debug", "gc_hgc", "gc_accurate"], []))).
:- type_representation((libs.globals).globals, is_word_aligned_ptr).
:- type_representation((libs.globals).limit_error_contexts_map, is_eqv_to(map(string, list(libs.globals.line_number_range)))).
:- type_representation((libs.globals).line_number_range, is_word_aligned_ptr).
:- type_representation((libs.globals).may_be_thread_safe, is_eqv_to(bool)).
:- type_representation((libs.globals).source_file_map, is_eqv_to(bimap(module_name, string))).
:- type_representation((libs.globals).ssdb_trace_level, du_repn(enum("none", "shallow", ["deep"], []))).
:- type_representation((libs.globals).tags_method, du_repn(enum("tags_none", "tags_low", [], []))).
:- type_representation((libs.globals).termination_norm, du_repn(enum("norm_simple", "norm_total", ["norm_num_data_elems", "norm_size_data_elems"], []))).
