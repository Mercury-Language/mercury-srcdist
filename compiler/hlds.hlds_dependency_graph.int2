:- module (hlds.hlds_dependency_graph).
:- interface.
:- use_module (hlds.hlds_pred).
:- use_module (libs.dependency_graph).
:- type hlds_bottom_up_dependency_sccs == libs.dependency_graph.bottom_up_dependency_sccs(hlds.hlds_pred.pred_proc_id).
:- type hlds_dependency_graph == libs.dependency_graph.dependency_graph(hlds.hlds_pred.pred_proc_id).
:- type hlds_dependency_graph_key == libs.dependency_graph.dependency_graph_key(hlds.hlds_pred.pred_proc_id).
:- type hlds_dependency_info == libs.dependency_graph.dependency_info(hlds.hlds_pred.pred_proc_id).
:- type include_imported
    --->    include_imported 
    ;       do_not_include_imported .
:- type scc_with_entry_points
    --->    scc_with_entry_points(((hlds.hlds_dependency_graph).swep_scc_procs) :: set.set(hlds.hlds_pred.pred_proc_id), ((hlds.hlds_dependency_graph).swep_called_from_higher_sccs) :: set.set(hlds.hlds_pred.pred_proc_id), ((hlds.hlds_dependency_graph).swep_exported_procs) :: set.set(hlds.hlds_pred.pred_proc_id)).
:- type what_dependency_edges
    --->    only_tail_calls 
    ;       only_all_calls 
    ;       all_calls_and_unifies .
:- type_representation((hlds.hlds_dependency_graph).dep_arcs(V_1), is_eqv_to(assoc_list.assoc_list(libs.dependency_graph.dependency_graph_key(V_1)))).
:- type_representation((hlds.hlds_dependency_graph).hlds_bottom_up_dependency_sccs, is_eqv_to(libs.dependency_graph.bottom_up_dependency_sccs(hlds.hlds_pred.pred_proc_id))).
:- type_representation((hlds.hlds_dependency_graph).hlds_dependency_graph, is_eqv_to(libs.dependency_graph.dependency_graph(hlds.hlds_pred.pred_proc_id))).
:- type_representation((hlds.hlds_dependency_graph).hlds_dependency_graph_key, is_eqv_to(libs.dependency_graph.dependency_graph_key(hlds.hlds_pred.pred_proc_id))).
:- type_representation((hlds.hlds_dependency_graph).hlds_dependency_info, is_eqv_to(libs.dependency_graph.dependency_info(hlds.hlds_pred.pred_proc_id))).
:- type_representation((hlds.hlds_dependency_graph).include_imported, du_repn(enum("include_imported", "do_not_include_imported", [], []))).
:- type_representation((hlds.hlds_dependency_graph).scc_id, is_eqv_to(int)).
:- type_representation((hlds.hlds_dependency_graph).scc_with_entry_points, is_word_aligned_ptr).
:- type_representation((hlds.hlds_dependency_graph).what_dependency_edges, du_repn(enum("only_tail_calls", "only_all_calls", ["all_calls_and_unifies"], []))).
