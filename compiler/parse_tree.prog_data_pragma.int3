:- module (parse_tree.prog_data_pragma).
:- interface.
:- type arg_size_constr.
:- type arg_size_term.
:- type arg_tabling_method
	where	type_is_abstract_enum(2).
:- type call_table_strictness.
:- type datastruct.
:- type dead_datastruct.
:- type dead_datastructs.
:- type dead_var.
:- type dead_vars.
:- type eval_method.
:- type eval_minimal_method
	where	type_is_abstract_enum(2).
:- type exception_status.
:- type exception_type
	where	type_is_abstract_enum(1).
:- type generic_arg_size_info(ErrorInfo).
:- type generic_termination_info(TermInfo, ErrorInfo).
:- type hidden_arg_tabling_method
	where	type_is_abstract_enum(1).
:- type live_datastruct.
:- type live_datastructs.
:- type live_var.
:- type live_vars.
:- type mode_num.
:- type pragma_arg_size_info.
:- type pragma_constr_arg_size_info.
:- type pragma_termination_info.
:- type require_tail_recursion.
:- type require_tail_recursion_type
	where	type_is_abstract_enum(1).
:- type required_feature
	where	type_is_abstract_enum(3).
:- type selector.
:- type set_of_live_var.
:- type structure_reuse_condition.
:- type structure_reuse_conditions.
:- type structure_reuse_domain.
:- type structure_sharing.
:- type structure_sharing_domain.
:- type structure_sharing_pair.
:- type table_attr_allow_reset
	where	type_is_abstract_enum(1).
:- type table_attr_backend_warning
	where	type_is_abstract_enum(1).
:- type table_attr_statistics
	where	type_is_abstract_enum(1).
:- type table_attributes.
:- type table_io_entry_kind
	where	type_is_abstract_enum(2).
:- type table_io_is_unitize
	where	type_is_abstract_enum(1).
:- type top_feedback.
:- type type_subst.
:- type unit_selector.
:- type user_annotated_sharing.
:- type user_sharing_type_information.
:- type_representation(arg_size_term, is_word_aligned_ptr).
:- type_representation(arg_tabling_method, du_repn(enum("arg_value", "arg_addr", ["arg_promise_implied"],  no_c_j_cs))).
:- type_representation(datastruct, is_word_aligned_ptr).
:- type_representation(dead_datastruct, is_eqv_to(parse_tree.prog_data_pragma.datastruct)).
:- type_representation(dead_datastructs, is_eqv_to(set(parse_tree.prog_data_pragma.dead_datastruct))).
:- type_representation(dead_var, is_eqv_to(prog_var)).
:- type_representation(dead_vars, is_eqv_to(list(parse_tree.prog_data_pragma.dead_var))).
:- type_representation(eval_minimal_method, du_repn(enum("stack_copy", "own_stacks_consumer", ["own_stacks_generator"],  no_c_j_cs))).
:- type_representation(exception_type, du_repn(enum("user_exception", "type_exception", [],  no_c_j_cs))).
:- type_representation(hidden_arg_tabling_method, du_repn(enum("table_hidden_arg_value", "table_hidden_arg_addr", [],  no_c_j_cs))).
:- type_representation(live_datastruct, is_eqv_to(parse_tree.prog_data_pragma.datastruct)).
:- type_representation(live_datastructs, is_eqv_to(list(parse_tree.prog_data_pragma.live_datastruct))).
:- type_representation(live_var, is_eqv_to(prog_var)).
:- type_representation(live_vars, is_eqv_to(list(prog_var))).
:- type_representation(mode_num, is_eqv_to(int)).
:- type_representation(pragma_arg_size_info, is_eqv_to(parse_tree.prog_data_pragma.generic_arg_size_info(unit))).
:- type_representation(pragma_constr_arg_size_info, is_eqv_to(list(parse_tree.prog_data_pragma.arg_size_constr))).
:- type_representation(pragma_termination_info, is_eqv_to(parse_tree.prog_data_pragma.generic_termination_info(unit, unit))).
:- type_representation(require_tail_recursion_type, du_repn(enum("only_self_recursion_must_be_tail", "both_self_and_mutual_recursion_must_be_tail", [],  no_c_j_cs))).
:- type_representation(required_feature, du_repn(enum("reqf_concurrency", "reqf_single_prec_float", ["reqf_double_prec_float", "reqf_memo", "reqf_parallel_conj", "reqf_trailing", "reqf_strict_sequential", "reqf_conservative_gc"],  no_c_j_cs))).
:- type_representation(selector, is_eqv_to(list(parse_tree.prog_data_pragma.unit_selector))).
:- type_representation(set_of_live_var, is_eqv_to(set_of_progvar)).
:- type_representation(structure_reuse_condition, is_word_aligned_ptr).
:- type_representation(structure_reuse_conditions, is_eqv_to(list(parse_tree.prog_data_pragma.structure_reuse_condition))).
:- type_representation(structure_sharing, is_eqv_to(list(parse_tree.prog_data_pragma.structure_sharing_pair))).
:- type_representation(structure_sharing_pair, is_eqv_to(pair(parse_tree.prog_data_pragma.datastruct))).
:- type_representation(table_attr_allow_reset, du_repn(enum("table_allow_reset", "table_dont_allow_reset", [],  no_c_j_cs))).
:- type_representation(table_attr_backend_warning, du_repn(enum("table_attr_ignore_with_warning", "table_attr_ignore_without_warning", [],  no_c_j_cs))).
:- type_representation(table_attr_statistics, du_repn(enum("table_gather_statistics", "table_dont_gather_statistics", [],  no_c_j_cs))).
:- type_representation(table_attributes, is_word_aligned_ptr).
:- type_representation(table_io_entry_kind, du_repn(enum("entry_stores_outputs", "entry_stores_procid_outputs", ["entry_stores_procid_inputs_outputs"],  no_c_j_cs))).
:- type_representation(table_io_is_unitize, du_repn(enum("table_io_unitize", "table_io_alone", [],  no_c_j_cs))).
:- type_representation(type_subst, is_eqv_to(assoc_list(tvar, mer_type))).
:- type_representation(user_sharing_type_information, is_word_aligned_ptr).
