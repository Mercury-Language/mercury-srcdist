:- module (parse_tree.parse_util).
:- interface.
:- use_module cord.
:- use_module list.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module one_or_more.
:- use_module pair.
:- use_module term.
:- use_module varset.
:- use_module (mdbcomp.prim_data).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.error_util).
:- use_module (parse_tree.maybe_error).
:- use_module (parse_tree.prog_data).
:- type conflict(T)
    --->    conflict(T, T, string).
:- type maybe_pred_or_func(T) == parse_tree.maybe_error.maybe2(mdbcomp.sym_name.sym_name, pair.pair(list.list(T), maybe.maybe(T))).
:- type parser(T) == pred(term.term, parse_tree.maybe_error.maybe1(T)).
:- mode (parser) == (pred((builtin.in), (builtin.out)) is det).
:- pred conjunction_to_list(term.term(T), list.list(term.term(T))).
:- mode conjunction_to_list((builtin.in), (builtin.out)) is det.
:- pred conjunction_to_one_or_more(term.term(T), one_or_more.one_or_more(term.term(T))).
:- mode conjunction_to_one_or_more((builtin.in), (builtin.out)) is det.
:- pred disjunction_to_list(term.term(T), list.list(term.term(T))).
:- mode disjunction_to_list((builtin.in), (builtin.out)) is det.
:- pred disjunction_to_one_or_more(term.term(T), one_or_more.one_or_more(term.term(T))).
:- mode disjunction_to_one_or_more((builtin.in), (builtin.out)) is det.
:- pred list_term_to_term_list(term.term, list.list(term.term)).
:- mode list_term_to_term_list((builtin.in), (builtin.out)) is semidet.
:- pred map_parser(parse_tree.parse_util.parser(T), list.list(term.term), parse_tree.maybe_error.maybe1(list.list(T))).
:- mode map_parser(((parse_tree.parse_util).parser), (builtin.in), (builtin.out)) is det.
:- pred one_or_more_to_conjunction(parse_tree.prog_data.prog_context, one_or_more.one_or_more(term.term(T)), term.term(T)).
:- mode one_or_more_to_conjunction((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred parse_implicitly_qualified_name_and_arity(mdbcomp.sym_name.module_name, term.term(T), mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- mode parse_implicitly_qualified_name_and_arity((builtin.in), (builtin.in), (builtin.out), (builtin.out)) is semidet.
:- pred parse_list(parse_tree.parse_util.parser(T), term.term, parse_tree.maybe_error.maybe1(list.list(T))).
:- mode parse_list(((parse_tree.parse_util).parser), (builtin.in), (builtin.out)) is det.
:- pred parse_one_or_more(parse_tree.parse_util.parser(T), term.term, parse_tree.maybe_error.maybe1(one_or_more.one_or_more(T))).
:- mode parse_one_or_more(((parse_tree.parse_util).parser), (builtin.in), (builtin.out)) is det.
:- pred parse_pred_or_func_and_args(term.term(T), mdbcomp.prim_data.pred_or_func, mdbcomp.sym_name.sym_name, list.list(term.term(T))).
:- mode parse_pred_or_func_and_args((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is semidet.
:- pred parse_pred_or_func_and_args_general(maybe.maybe(mdbcomp.sym_name.module_name), term.term(T), varset.varset(T), cord.cord(parse_tree.error_util.format_component), parse_tree.parse_util.maybe_pred_or_func(term.term(T))).
:- mode parse_pred_or_func_and_args_general((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred parse_pred_or_func_name_and_arity(term.term(T), mdbcomp.prim_data.pred_or_func, mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- mode parse_pred_or_func_name_and_arity((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is semidet.
:- pred parse_unqualified_name_and_arity(term.term(T), mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- mode parse_unqualified_name_and_arity((builtin.in), (builtin.out), (builtin.out)) is semidet.
:- pred report_any_conflicts(parse_tree.prog_data.prog_context, string, list.list(parse_tree.parse_util.conflict(T)), list.list(T), list.list(parse_tree.error_util.error_spec)).
:- mode report_any_conflicts((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred sum_to_list(term.term(T), list.list(term.term(T))).
:- mode sum_to_list((builtin.in), (builtin.out)) is det.
:- pred sum_to_one_or_more(term.term(T), one_or_more.one_or_more(term.term(T))).
:- mode sum_to_one_or_more((builtin.in), (builtin.out)) is det.
