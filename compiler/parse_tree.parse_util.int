:- module parse_tree.parse_util.
:- interface.
:- use_module cord.
:- use_module integer.
:- use_module list.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module one_or_more.
:- use_module term.
:- use_module varset.
:- use_module mdbcomp.prim_data.
:- use_module mdbcomp.sym_name.
:- use_module parse_tree.error_spec.
:- use_module parse_tree.maybe_error.
:- use_module parse_tree.prog_data.
:- use_module parse_tree.prog_item.
:- type conflict(T)
    --->    conflict(T, T, list.list(parse_tree.error_spec.format_piece)).
:- type maybe_pred_or_func(T) == parse_tree.maybe_error.maybe3(mdbcomp.sym_name.sym_name, list.list(T), maybe.maybe(T)).
:- type maybe_pred_or_func_modes == parse_tree.maybe_error.maybe3(mdbcomp.sym_name.sym_name, mdbcomp.prim_data.pred_or_func, list.list(parse_tree.prog_data.mer_mode)).
:- type parser(T) == pred(term.term, parse_tree.maybe_error.maybe1(T)).
:- mode (parser) == builtin.in((pred(builtin.in, builtin.out) is det)).
:- pred conjunction_to_list(term.term(T), list.list(term.term(T))).
:- mode conjunction_to_list(builtin.in, builtin.out) is det.
:- pred conjunction_to_one_or_more(term.term(T), one_or_more.one_or_more(term.term(T))).
:- mode conjunction_to_one_or_more(builtin.in, builtin.out) is det.
:- pred disjunction_to_list(term.term(T), list.list(term.term(T))).
:- mode disjunction_to_list(builtin.in, builtin.out) is det.
:- pred disjunction_to_one_or_more(term.term(T), one_or_more.one_or_more(term.term(T))).
:- mode disjunction_to_one_or_more(builtin.in, builtin.out) is det.
:- pred list_term_to_term_list(term.term, list.list(term.term)).
:- mode list_term_to_term_list(builtin.in, builtin.out) is semidet.
:- pred map_parser(parse_tree.parse_util.parser(T), list.list(term.term), parse_tree.maybe_error.maybe1(list.list(T))).
:- mode map_parser((parse_tree.parse_util).parser, builtin.in, builtin.out) is det.
:- pred one_or_more_to_conjunction(parse_tree.prog_data.prog_context, one_or_more.one_or_more(term.term(T)), term.term(T)).
:- mode one_or_more_to_conjunction(builtin.in, builtin.in, builtin.out) is det.
:- pred parse_comma_separated_list(parse_tree.parse_util.parser(T), term.term, parse_tree.maybe_error.maybe1(list.list(T))).
:- mode parse_comma_separated_list((parse_tree.parse_util).parser, builtin.in, builtin.out) is det.
:- pred parse_comma_separated_one_or_more(parse_tree.parse_util.parser(T), term.term, parse_tree.maybe_error.maybe1(one_or_more.one_or_more(T))).
:- mode parse_comma_separated_one_or_more((parse_tree.parse_util).parser, builtin.in, builtin.out) is det.
:- pred parse_decimal_int(cord.cord(parse_tree.error_spec.format_piece), varset.varset, term.term, parse_tree.maybe_error.maybe1(int)).
:- mode parse_decimal_int(builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_integer_cons_id(term.integer_base, integer.integer, term.signedness, term.integer_size, term.context, parse_tree.maybe_error.maybe1(parse_tree.prog_data.cons_id)).
:- mode parse_integer_cons_id(builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_list_elements(string, pred(varset.varset, term.term, parse_tree.maybe_error.maybe1(T)), varset.varset, term.term, parse_tree.maybe_error.maybe1(list.list(T))).
:- mode parse_list_elements(builtin.in, builtin.in((pred(builtin.in, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out) is det.
:- pred parse_pred_or_func_and_arg_modes(maybe.maybe(mdbcomp.sym_name.module_name), cord.cord(parse_tree.error_spec.format_piece), varset.varset, term.term, parse_tree.parse_util.maybe_pred_or_func_modes).
:- mode parse_pred_or_func_and_arg_modes(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_pred_or_func_and_args(term.term(T), mdbcomp.prim_data.pred_or_func, mdbcomp.sym_name.sym_name, list.list(term.term(T))).
:- mode parse_pred_or_func_and_args(builtin.in, builtin.out, builtin.out, builtin.out) is semidet.
:- pred parse_pred_or_func_and_args_general(maybe.maybe(mdbcomp.sym_name.module_name), term.term(T), varset.varset(T), cord.cord(parse_tree.error_spec.format_piece), parse_tree.parse_util.maybe_pred_or_func(term.term(T))).
:- mode parse_pred_or_func_and_args_general(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_pred_or_func_name_and_arity(term.term(T), mdbcomp.prim_data.pred_or_func, mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- mode parse_pred_or_func_name_and_arity(builtin.in, builtin.out, builtin.out, builtin.out) is semidet.
:- pred parse_pred_pf_name_arity(mdbcomp.sym_name.module_name, string, varset.varset, term.term, parse_tree.maybe_error.maybe1(parse_tree.prog_data.pred_pf_name_arity)).
:- mode parse_pred_pf_name_arity(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_pred_pfu_name_arity(mdbcomp.sym_name.module_name, string, varset.varset, term.term, parse_tree.maybe_error.maybe1(parse_tree.prog_item.pred_pfu_name_arity)).
:- mode parse_pred_pfu_name_arity(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_pred_pfu_name_arity_maybe_modes(mdbcomp.sym_name.module_name, cord.cord(parse_tree.error_spec.format_piece), varset.varset, term.term, parse_tree.maybe_error.maybe1(parse_tree.prog_item.pred_or_proc_pfumm_name)).
:- mode parse_pred_pfu_name_arity_maybe_modes(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred parse_sym_name_and_arity(term.term(T), mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- mode parse_sym_name_and_arity(builtin.in, builtin.out, builtin.out) is semidet.
:- pred report_any_conflicts(parse_tree.prog_data.prog_context, string, list.list(parse_tree.parse_util.conflict(T)), list.list(T), list.list(parse_tree.error_spec.error_spec)).
:- mode report_any_conflicts(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred sum_to_list(term.term(T), list.list(term.term(T))).
:- mode sum_to_list(builtin.in, builtin.out) is det.
:- pred sum_to_one_or_more(term.term(T), one_or_more.one_or_more(term.term(T))).
:- mode sum_to_one_or_more(builtin.in, builtin.out) is det.
:- pred terms_to_distinct_vars(varset.varset(T), string, string, list.list(term.term(T)), parse_tree.maybe_error.maybe1(list.list(term.var(T)))).
:- mode terms_to_distinct_vars(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
