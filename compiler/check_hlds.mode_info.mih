/*
** Automatically generated from `mode_info.m'
** by the Mercury compiler,
** version rotd-2019-07-05
** configured for x86_64-pc-linux-gnu.
** Do not edit.
**
** The autoconfigured grade settings governing
** the generation of this C file were
**
** TAG_BITS=2
** UNBOXED_FLOAT=no
** UNBOXED_INT64S=no
** PREGENERATED_DIST=yes
** HIGHLEVEL_CODE=yes
**
** END_OF_C_GRADE_INFO
*/


// :- module check_hlds.mode_info.
// :- interface.

#ifndef MR_HEADER_GUARD_check_hlds__mode_info
#define MR_HEADER_GUARD_check_hlds__mode_info

#ifdef __cplusplus
extern "C" {
#endif

#include "mercury.h"


#ifndef CHECK_HLDS__MODE_INFO_DECL_GUARD
#define CHECK_HLDS__MODE_INFO_DECL_GUARD
#include "check_hlds.mih"

#endif




extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_call_context_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_debug_flags_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_had_from_ground_term_scope_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_how_to_check_goal_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_in_dupl_for_switch_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_in_from_ground_term_scope_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_in_promise_purity_scope_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_locked_vars_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_make_ground_terms_unique_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_may_change_called_proc_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_mode_call_id_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_mode_context_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_mode_info_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_mode_sub_info_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_par_conj_mode_check_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_par_conj_mode_check_stack_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_pred_var_multimode_map_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_side_0;

extern const MR_TypeCtorInfo_Struct check_hlds__mode_info__check_hlds__mode_info__type_ctor_info_var_lock_reason_0;

void MR_CALL 
check_hlds__mode_info__mode_info_add_error_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_add_live_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_add_warning_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_error_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

void MR_CALL 
check_hlds__mode_info__mode_info_get_changed_flag_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_checking_extra_goals_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_context_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_debug_modes_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_delay_info_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_errors_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_had_from_ground_term_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_head_inst_vars_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_how_to_check_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_in_dupl_for_switch_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_in_from_ground_term_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_in_promise_purity_scope_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_initial_instmap_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_instmap_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_insts_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_instvarset_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_last_checkpoint_insts_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_live_vars_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_liveness_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_locked_vars_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_make_ground_terms_unique_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_may_change_called_proc_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_mode_context_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_modes_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_module_info_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_need_to_requantify_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_nondet_live_vars_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_num_errors_2_p_0(
  MR_Word param_1,
  MR_Integer * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_parallel_vars_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_pred_id_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_pred_var_multimode_map_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_preds_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_proc_id_2_p_0(
  MR_Word param_1,
  MR_Integer * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_simple_call_id_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_get_types_of_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_get_var_types_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_varset_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_get_warnings_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_init_10_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Integer param_3,
  MR_Word param_4,
  MR_Word param_5,
  MR_Word param_6,
  MR_Word param_7,
  MR_Word param_8,
  MR_Word param_9,
  MR_Word * param_10);

void MR_CALL 
check_hlds__mode_info__mode_info_lock_vars_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

void MR_CALL 
check_hlds__mode_info__mode_info_need_to_requantify_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_remove_live_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_call_arg_context_3_p_0(
  MR_Integer param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_call_context_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_changed_flag_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_checking_extra_goals_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_context_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_delay_info_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_errors_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_had_from_ground_term_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_how_to_check_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_in_dupl_for_switch_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_in_from_ground_term_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_in_promise_purity_scope_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_instmap_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_instvarset_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_last_checkpoint_insts_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_live_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_locked_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_make_ground_terms_unique_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_may_change_called_proc_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_mode_context_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_module_info_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_need_to_requantify_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_nondet_live_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_parallel_vars_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_pred_id_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_pred_var_multimode_map_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_proc_id_3_p_0(
  MR_Integer param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_var_types_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_varset_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_set_warnings_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_unlock_vars_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

void MR_CALL 
check_hlds__mode_info__mode_info_unset_call_context_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
check_hlds__mode_info__mode_info_var_is_live_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

MR_bool MR_CALL 
check_hlds__mode_info__mode_info_var_is_locked_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_var_is_nondet_live_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_var_list_is_live_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info__mode_info_warning_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
check_hlds__mode_info____Compare____call_context_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____debug_flags_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____had_from_ground_term_scope_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____how_to_check_goal_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____in_dupl_for_switch_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____in_from_ground_term_scope_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____in_promise_purity_scope_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____locked_vars_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____make_ground_terms_unique_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____may_change_called_proc_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____mode_call_id_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____mode_context_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____mode_info_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____par_conj_mode_check_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____par_conj_mode_check_stack_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____pred_var_multimode_map_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____side_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
check_hlds__mode_info____Compare____var_lock_reason_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____call_context_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____debug_flags_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____had_from_ground_term_scope_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____how_to_check_goal_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____in_dupl_for_switch_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____in_from_ground_term_scope_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____in_promise_purity_scope_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____locked_vars_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____make_ground_terms_unique_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____may_change_called_proc_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____mode_call_id_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____mode_context_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____mode_info_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____par_conj_mode_check_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____par_conj_mode_check_stack_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____pred_var_multimode_map_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____side_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
check_hlds__mode_info____Unify____var_lock_reason_0_0(
  MR_Word param_1,
  MR_Word param_2);

void mercury__check_hlds__mode_info__init(void);
void mercury__check_hlds__mode_info__init_type_tables(void);
void mercury__check_hlds__mode_info__init_debugger(void);
const char *mercury__check_hlds__mode_info__grade_check(void);

#ifdef __cplusplus
}
#endif

#endif // MR_HEADER_GUARD_check_hlds.mode_info

// :- end_interface check_hlds.mode_info.
