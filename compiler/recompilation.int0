:- module recompilation.
:- interface.
:- include_module (recompilation.check).
:- include_module (recompilation.usage).
:- include_module (recompilation.used_file).
:- include_module (recompilation.version).
:- import_module libs.
:- import_module map.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module set.
:- import_module term.
:- import_module (libs.timestamp).
:- import_module (mdbcomp.prim_data).
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.prog_data).
:- type eqv_expand_info
    --->    no_eqv_expand_info 
    ;       eqv_expand_info(mdbcomp.sym_name.module_name, set.set(recompilation.item_id)).
:- type item_id
    --->    item_id(recompilation.item_type, recompilation.item_name).
:- type item_name
    --->    item_name(mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- type item_name_version_map == map.map(recompilation.item_name, recompilation.version_number).
:- type item_type
    --->    type_name_item 
    ;       type_defn_item 
    ;       inst_item 
    ;       mode_item 
    ;       typeclass_item 
    ;       functor_item 
    ;       predicate_item 
    ;       function_item 
    ;       mutable_item 
    ;       foreign_proc_item .
:- type module_item_version_numbers
    --->    module_item_version_numbers((recompilation.mivn_type_names) :: recompilation.name_arity_version_map, (recompilation.mivn_type_defns) :: recompilation.name_arity_version_map, (recompilation.mivn_insts) :: recompilation.name_arity_version_map, (recompilation.mivn_modes) :: recompilation.name_arity_version_map, (recompilation.mivn_typeclasses) :: recompilation.name_arity_version_map, (recompilation.mivn_instances) :: recompilation.item_name_version_map, (recompilation.mivn_predicates) :: recompilation.name_arity_version_map, (recompilation.mivn_functions) :: recompilation.name_arity_version_map).
:- type module_item_version_numbers_map == map.map(mdbcomp.sym_name.module_name, recompilation.module_item_version_numbers).
:- type module_qualifier == mdbcomp.sym_name.module_name.
:- type name_arity_version_map == map.map(parse_tree.prog_data.name_arity, recompilation.version_number).
:- type recompilation_info
    --->    recompilation_info((recompilation.recomp_module_name) :: mdbcomp.sym_name.module_name, (recompilation.recomp_used_items) :: recompilation.used_items, (recompilation.recomp_dependencies) :: map.map(recompilation.item_id, set.set(recompilation.item_id)), (recompilation.recomp_version_numbers) :: recompilation.module_item_version_numbers_map).
:- type simple_item_set == map.map(parse_tree.prog_data.name_arity, map.map(recompilation.module_qualifier, mdbcomp.sym_name.module_name)).
:- type used_item_type
    --->    used_type_name 
    ;       used_type_defn 
    ;       used_inst 
    ;       used_mode 
    ;       used_typeclass 
    ;       used_functor 
    ;       used_predicate 
    ;       used_function .
:- type used_items
    --->    used_items((recompilation.used_type_names) :: recompilation.simple_item_set, (recompilation.used_type_defns) :: recompilation.simple_item_set, (recompilation.used_insts) :: recompilation.simple_item_set, (recompilation.used_modes) :: recompilation.simple_item_set, (recompilation.used_typeclasses) :: recompilation.simple_item_set, (recompilation.used_functors) :: recompilation.simple_item_set, (recompilation.used_predicates) :: recompilation.simple_item_set, (recompilation.used_functions) :: recompilation.simple_item_set).
:- type version_number == libs.timestamp.timestamp.
:- inst pred_or_func_item for recompilation.item_type/0
    --->    function_item
    ;       predicate_item.
:- inst simple_item for recompilation.item_type/0
    --->    inst_item
    ;       mode_item
    ;       type_defn_item
    ;       type_name_item
    ;       typeclass_item.
:- func find_module_qualifier(mdbcomp.sym_name.sym_name) = recompilation.module_qualifier.
:- pred finish_recording_expanded_items(recompilation.item_id, recompilation.eqv_expand_info, maybe.maybe(recompilation.recompilation_info), maybe.maybe(recompilation.recompilation_info)).
:- mode finish_recording_expanded_items((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func init_module_item_version_numbers = recompilation.module_item_version_numbers.
:- func init_recompilation_info(mdbcomp.sym_name.module_name) = recompilation.recompilation_info.
:- func init_used_items = recompilation.used_items.
:- func inst_ctor_to_item_name(parse_tree.prog_data.inst_ctor) = recompilation.item_name.
:- func item_name_to_inst_ctor(recompilation.item_name) = parse_tree.prog_data.inst_ctor.
:- func item_name_to_mode_ctor(recompilation.item_name) = parse_tree.prog_data.mode_ctor.
:- func item_name_to_type_ctor(recompilation.item_name) = parse_tree.prog_data.type_ctor.
:- pred maybe_start_recording_expanded_items(mdbcomp.sym_name.module_name, mdbcomp.sym_name.sym_name, maybe.maybe(recompilation.recompilation_info), recompilation.eqv_expand_info).
:- mode maybe_start_recording_expanded_items((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func mode_ctor_to_item_name(parse_tree.prog_data.mode_ctor) = recompilation.item_name.
:- func module_qualify_name(recompilation.module_qualifier, string) = mdbcomp.sym_name.sym_name.
:- pred parse_timestamp_term(term.term(T), libs.timestamp.timestamp).
:- mode parse_timestamp_term((builtin.in), (builtin.out)) is semidet.
:- pred parse_version_number_term(term.term(T), recompilation.version_number).
:- mode parse_version_number_term((builtin.in), (builtin.out)) is semidet.
:- func pred_or_func_to_item_type(mdbcomp.prim_data.pred_or_func) = recompilation.item_type.
:- mode pred_or_func_to_item_type((builtin.in)) = builtin.out((recompilation.pred_or_func_item)) is det.
:- pred record_expanded_item(recompilation.item_id, recompilation.eqv_expand_info, recompilation.eqv_expand_info).
:- mode record_expanded_item((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred record_expanded_items(recompilation.item_id, set.set(recompilation.item_id), recompilation.recompilation_info, recompilation.recompilation_info).
:- mode record_expanded_items((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred record_used_item(recompilation.used_item_type, recompilation.item_name, recompilation.item_name, recompilation.recompilation_info, recompilation.recompilation_info).
:- mode record_used_item((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred string_to_item_type(string, recompilation.item_type).
:- mode string_to_item_type((builtin.in), (builtin.out)) is semidet.
:- mode string_to_item_type((builtin.out), (builtin.in)) is det.
:- func type_ctor_to_item_name(parse_tree.prog_data.type_ctor) = recompilation.item_name.
:- func version_number_to_string(recompilation.version_number) = string.
:- implementation.
:- import_module list.
:- import_module require.
:- import_module string.
:- type maybe_ignore
    --->    do_not_ignore 
    ;       ignore .
:- func get_used_item_ids(recompilation.used_items, recompilation.used_item_type) = recompilation.simple_item_set.
:- func ignore_unqual_item_for_item_type(recompilation.used_item_type) = recompilation.maybe_ignore.
:- pred set_used_item_ids(recompilation.used_item_type, recompilation.simple_item_set, recompilation.used_items, recompilation.used_items).
:- mode set_used_item_ids((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
