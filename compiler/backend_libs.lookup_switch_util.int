:- module backend_libs.lookup_switch_util.
:- interface.
:- use_module assoc_list.
:- use_module bool.
:- use_module hlds.
:- use_module list.
:- use_module map.
:- use_module parse_tree.
:- use_module hlds.code_model.
:- use_module hlds.hlds_data.
:- use_module hlds.hlds_goal.
:- use_module hlds.hlds_module.
:- use_module parse_tree.prog_data.
:- use_module parse_tree.prog_type.
:- use_module parse_tree.set_of_var.
:- type case_consts(Key, Rval, SeveralInfo)
    --->    all_one_soln(map.map(Key, list.list(Rval)))
    ;       some_several_solns(map.map(Key, backend_libs.lookup_switch_util.soln_consts(Rval)), SeveralInfo).
:- type case_consts_several_llds
    --->    case_consts_several_llds(parse_tree.set_of_var.set_of_progvar, bool.bool).
:- type need_bit_vec_check
    --->    need_bit_vec_check 
    ;       dont_need_bit_vec_check_no_gaps 
    ;       dont_need_bit_vec_check_with_gaps .
:- type need_range_check
    --->    need_range_check 
    ;       dont_need_range_check .
:- type soln_consts(Rval)
    --->    one_soln(list.list(Rval))
    ;       several_solns(list.list(Rval), list.list(list.list(Rval))).
:- pred filter_out_failing_cases_if_needed(hlds.code_model.code_model, list.list(hlds.hlds_goal.tagged_case), list.list(hlds.hlds_goal.tagged_case), parse_tree.prog_data.can_fail, parse_tree.prog_data.can_fail).
:- mode filter_out_failing_cases_if_needed(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is det.
:- pred find_int_lookup_switch_params(hlds.hlds_module.module_info, parse_tree.prog_data.mer_type, parse_tree.prog_data.can_fail, int, int, int, int, backend_libs.lookup_switch_util.need_bit_vec_check, backend_libs.lookup_switch_util.need_range_check, int, int).
:- mode find_int_lookup_switch_params(builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.out, builtin.out, builtin.out, builtin.out) is semidet.
:- func get_int_tag(hlds.hlds_data.cons_tag) = int.
:- func get_string_tag(hlds.hlds_data.cons_tag) = string.
:- pred project_all_to_one_solution(map.map(Key, backend_libs.lookup_switch_util.soln_consts(Rval)), map.map(Key, list.list(Rval))).
:- mode project_all_to_one_solution(builtin.in, builtin.out) is semidet.
:- pred project_solns_to_rval_lists(assoc_list.assoc_list(T, backend_libs.lookup_switch_util.soln_consts(Rval)), list.list(list.list(Rval)), list.list(list.list(Rval))).
:- mode project_solns_to_rval_lists(builtin.in, builtin.in, builtin.out) is det.
:- func switch_density(int, int) = int.
:- pred type_range(hlds.hlds_module.module_info, parse_tree.prog_type.type_ctor_category, parse_tree.prog_data.mer_type, int, int, int).
:- mode type_range(builtin.in, builtin.in, builtin.in, builtin.out, builtin.out, builtin.out) is semidet.
