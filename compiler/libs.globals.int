:- module (libs.globals).
:- interface.
:- use_module bool.
:- use_module getopt.
:- use_module io.
:- use_module list.
:- use_module map.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module (libs.op_mode).
:- use_module (libs.optimization_options).
:- use_module (libs.options).
:- use_module (libs.trace_params).
:- use_module (mdbcomp.feedback).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.prog_data_pragma).
:- type backend
    --->    high_level_backend 
    ;       low_level_backend .
:- type c_compiler_type
    --->    cc_gcc(((libs.globals).gcc_major_ver) :: maybe.maybe(int), ((libs.globals).gcc_minor_ver) :: maybe.maybe(int), ((libs.globals).gcc_patch_level) :: maybe.maybe(int))
    ;       cc_clang(maybe.maybe(libs.globals.clang_version))
    ;       cc_cl_x86(maybe.maybe(int))
    ;       cc_cl_x64(maybe.maybe(int))
    ;       cc_unknown .
:- type clang_version
    --->    clang_version(int, int, int).
:- type compilation_target
    --->    target_c 
    ;       target_csharp 
    ;       target_java .
:- type csharp_compiler_type
    --->    csharp_microsoft 
    ;       csharp_mono 
    ;       csharp_unknown .
:- type env_type
    --->    env_type_posix 
    ;       env_type_cygwin 
    ;       env_type_msys 
    ;       env_type_win_cmd 
    ;       env_type_powershell .
:- type file_install_cmd
    --->    install_cmd_user(string, string)
    ;       install_cmd_cp .
:- type foreign_language
    --->    lang_c 
    ;       lang_csharp 
    ;       lang_java .
:- type gc_method
    --->    gc_automatic 
    ;       gc_none 
    ;       gc_boehm 
    ;       gc_boehm_debug 
    ;       gc_hgc 
    ;       gc_accurate .
:- type globals.
:- type limit_error_contexts_map == map.map(string, list.list(libs.globals.line_number_range)).
:- type line_number_range
    --->    line_number_range(maybe.maybe(int), maybe.maybe(int)).
:- type may_be_thread_safe == bool.bool.
:- type maybe_item_version_numbers
    --->    do_not_disable_item_version_numbers 
    ;       disable_item_version_numbers .
:- type maybe_smart_recompilation
    --->    do_not_disable_smart_recompilation 
    ;       disable_smart_recompilation .
:- type reuse_strategy
    --->    same_cons_id 
    ;       within_n_cells_difference(int).
:- type ssdb_trace_level
    --->    ssdb_none 
    ;       ssdb_shallow 
    ;       ssdb_deep .
:- type termination_norm
    --->    norm_simple 
    ;       norm_total 
    ;       norm_num_data_elems 
    ;       norm_size_data_elems .
:- type word_size
    --->    word_size_32 
    ;       word_size_64 .
:- func all_foreign_language_strings = list.list(string).
:- pred close_any_specific_compiler_streams(io.io, io.io).
:- mode close_any_specific_compiler_streams((builtin.di), (builtin.uo)) is det.
:- func compilation_target_high_level_data(libs.globals.compilation_target) = bool.bool.
:- func compilation_target_string(libs.globals.compilation_target) = string.
:- pred convert_c_compiler_type(string, libs.globals.c_compiler_type).
:- mode convert_c_compiler_type((builtin.in), (builtin.out)) is semidet.
:- pred convert_csharp_compiler_type(string, libs.globals.csharp_compiler_type).
:- mode convert_csharp_compiler_type((builtin.in), (builtin.out)) is semidet.
:- pred convert_env_type(string, libs.globals.env_type).
:- mode convert_env_type((builtin.in), (builtin.out)) is semidet.
:- pred convert_foreign_language(string, libs.globals.foreign_language).
:- mode convert_foreign_language((builtin.in), (builtin.out)) is semidet.
:- pred convert_gc_method(string, libs.globals.gc_method).
:- mode convert_gc_method((builtin.in), (builtin.out)) is semidet.
:- pred convert_limit_error_contexts(list.list(string), list.list(string), libs.globals.limit_error_contexts_map).
:- mode convert_limit_error_contexts((builtin.in), (builtin.out), (builtin.out)) is det.
:- pred convert_maybe_thread_safe(string, libs.globals.may_be_thread_safe).
:- mode convert_maybe_thread_safe((builtin.in), (builtin.out)) is semidet.
:- pred convert_reuse_strategy(string, int, libs.globals.reuse_strategy).
:- mode convert_reuse_strategy((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred convert_ssdb_trace_level(string, bool.bool, libs.globals.ssdb_trace_level).
:- mode convert_ssdb_trace_level((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred convert_target(string, libs.globals.compilation_target).
:- mode convert_target((builtin.in), (builtin.out)) is semidet.
:- pred convert_termination_norm(string, libs.globals.termination_norm).
:- mode convert_termination_norm((builtin.in), (builtin.out)) is semidet.
:- pred current_grade_supports_concurrency(libs.globals.globals, bool.bool).
:- mode current_grade_supports_concurrency((builtin.in), (builtin.out)) is det.
:- pred current_grade_supports_par_conj(libs.globals.globals, bool.bool).
:- mode current_grade_supports_par_conj((builtin.in), (builtin.out)) is det.
:- pred current_grade_supports_tabling(libs.globals.globals, parse_tree.prog_data_pragma.tabled_eval_method, bool.bool).
:- mode current_grade_supports_tabling((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred double_width_floats_on_det_stack(libs.globals.globals, bool.bool).
:- mode double_width_floats_on_det_stack((builtin.in), (builtin.out)) is det.
:- func foreign_language_string(libs.globals.foreign_language) = string.
:- func gc_is_conservative(libs.globals.gc_method) = bool.bool.
:- pred get_any_intermod(libs.globals.globals, bool.bool).
:- mode get_any_intermod((builtin.in), (builtin.out)) is det.
:- pred get_backend_foreign_languages(libs.globals.globals, list.list(libs.globals.foreign_language)).
:- mode get_backend_foreign_languages((builtin.in), (builtin.out)) is det.
:- pred get_c_compiler_type(libs.globals.globals, libs.globals.c_compiler_type).
:- mode get_c_compiler_type((builtin.in), (builtin.out)) is det.
:- pred get_csharp_compiler_type(libs.globals.globals, libs.globals.csharp_compiler_type).
:- mode get_csharp_compiler_type((builtin.in), (builtin.out)) is det.
:- pred get_debug_output_stream(libs.globals.globals, mdbcomp.sym_name.module_name, io.text_output_stream, io.io, io.io).
:- mode get_debug_output_stream((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred get_error_output_stream(libs.globals.globals, mdbcomp.sym_name.module_name, io.text_output_stream, io.io, io.io).
:- mode get_error_output_stream((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred get_file_install_cmd(libs.globals.globals, libs.globals.file_install_cmd).
:- mode get_file_install_cmd((builtin.in), (builtin.out)) is det.
:- pred get_gc_method(libs.globals.globals, libs.globals.gc_method).
:- mode get_gc_method((builtin.in), (builtin.out)) is det.
:- pred get_host_env_type(libs.globals.globals, libs.globals.env_type).
:- mode get_host_env_type((builtin.in), (builtin.out)) is det.
:- pred get_inference_output_stream(libs.globals.globals, mdbcomp.sym_name.module_name, io.text_output_stream, io.io, io.io).
:- mode get_inference_output_stream((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred get_limit_error_contexts_map(libs.globals.globals, libs.globals.limit_error_contexts_map).
:- mode get_limit_error_contexts_map((builtin.in), (builtin.out)) is det.
:- pred get_maybe_feedback_info(libs.globals.globals, maybe.maybe(mdbcomp.feedback.feedback_info)).
:- mode get_maybe_feedback_info((builtin.in), (builtin.out)) is det.
:- func get_maybe_from_ground_term_threshold = maybe.maybe(int).
:- pred get_maybe_thread_safe(libs.globals.globals, libs.globals.may_be_thread_safe).
:- mode get_maybe_thread_safe((builtin.in), (builtin.out)) is det.
:- pred get_op_mode(libs.globals.globals, libs.op_mode.op_mode).
:- mode get_op_mode((builtin.in), (builtin.out)) is det.
:- pred get_opt_tuple(libs.globals.globals, libs.optimization_options.opt_tuple).
:- mode get_opt_tuple((builtin.in), (builtin.out)) is det.
:- pred get_options(libs.globals.globals, libs.options.option_table).
:- mode get_options((builtin.in), (builtin.out)) is det.
:- pred get_progress_output_stream(libs.globals.globals, mdbcomp.sym_name.module_name, io.text_output_stream, io.io, io.io).
:- mode get_progress_output_stream((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred get_recompile_output_stream(libs.globals.globals, mdbcomp.sym_name.module_name, io.text_output_stream, io.io, io.io).
:- mode get_recompile_output_stream((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred get_reuse_strategy(libs.globals.globals, libs.globals.reuse_strategy).
:- mode get_reuse_strategy((builtin.in), (builtin.out)) is det.
:- pred get_ssdb_trace_level(libs.globals.globals, libs.globals.ssdb_trace_level).
:- mode get_ssdb_trace_level((builtin.in), (builtin.out)) is det.
:- pred get_system_env_type(libs.globals.globals, libs.globals.env_type).
:- mode get_system_env_type((builtin.in), (builtin.out)) is det.
:- pred get_target(libs.globals.globals, libs.globals.compilation_target).
:- mode get_target((builtin.in), (builtin.out)) is det.
:- pred get_target_env_type(libs.globals.globals, libs.globals.env_type).
:- mode get_target_env_type((builtin.in), (builtin.out)) is det.
:- pred get_termination2_norm(libs.globals.globals, libs.globals.termination_norm).
:- mode get_termination2_norm((builtin.in), (builtin.out)) is det.
:- pred get_termination_norm(libs.globals.globals, libs.globals.termination_norm).
:- mode get_termination_norm((builtin.in), (builtin.out)) is det.
:- pred get_trace_level(libs.globals.globals, libs.trace_params.trace_level).
:- mode get_trace_level((builtin.in), (builtin.out)) is det.
:- pred get_trace_suppress(libs.globals.globals, libs.trace_params.trace_suppress_items).
:- mode get_trace_suppress((builtin.in), (builtin.out)) is det.
:- pred get_word_size(libs.globals.globals, libs.globals.word_size).
:- mode get_word_size((builtin.in), (builtin.out)) is det.
:- pred globals_init(libs.options.option_table, libs.optimization_options.opt_tuple, libs.op_mode.op_mode, libs.globals.compilation_target, libs.globals.word_size, libs.globals.gc_method, libs.globals.termination_norm, libs.globals.termination_norm, libs.trace_params.trace_level, libs.trace_params.trace_suppress_items, libs.globals.ssdb_trace_level, libs.globals.may_be_thread_safe, libs.globals.c_compiler_type, libs.globals.csharp_compiler_type, libs.globals.reuse_strategy, maybe.maybe(mdbcomp.feedback.feedback_info), libs.globals.env_type, libs.globals.env_type, libs.globals.env_type, libs.globals.file_install_cmd, libs.globals.limit_error_contexts_map, libs.globals.globals).
:- mode globals_init((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred globals_init_mutables(libs.globals.globals, io.io, io.io).
:- mode globals_init_mutables((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred io_get_disable_generate_item_version_numbers(libs.globals.maybe_item_version_numbers, io.io, io.io).
:- mode io_get_disable_generate_item_version_numbers((builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred io_get_disable_smart_recompilation(libs.globals.maybe_smart_recompilation, io.io, io.io).
:- mode io_get_disable_smart_recompilation((builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred io_set_disable_generate_item_version_numbers(libs.globals.maybe_item_version_numbers, io.io, io.io).
:- mode io_set_disable_generate_item_version_numbers((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred io_set_disable_smart_recompilation(libs.globals.maybe_smart_recompilation, io.io, io.io).
:- mode io_set_disable_smart_recompilation((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred lookup_accumulating_option(libs.globals.globals, libs.options.option, list.list(string)).
:- mode lookup_accumulating_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_bool_option(libs.globals.globals, libs.options.option, bool.bool).
:- mode lookup_bool_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- mode lookup_bool_option((builtin.in), (builtin.in), (builtin.in)) is semidet.
:- func lookup_current_backend(libs.globals.globals) = libs.globals.backend.
:- pred lookup_int_option(libs.globals.globals, libs.options.option, int).
:- mode lookup_int_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_maybe_int_option(libs.globals.globals, libs.options.option, maybe.maybe(int)).
:- mode lookup_maybe_int_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_maybe_string_option(libs.globals.globals, libs.options.option, maybe.maybe(string)).
:- mode lookup_maybe_string_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_option(libs.globals.globals, libs.options.option, getopt.option_data).
:- mode lookup_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_string_option(libs.globals.globals, libs.options.option, string).
:- mode lookup_string_option((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_file_install_cmd(libs.globals.file_install_cmd, libs.globals.globals, libs.globals.globals).
:- mode set_file_install_cmd((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_gc_method(libs.globals.gc_method, libs.globals.globals, libs.globals.globals).
:- mode set_gc_method((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_maybe_feedback_info(maybe.maybe(mdbcomp.feedback.feedback_info), libs.globals.globals, libs.globals.globals).
:- mode set_maybe_feedback_info((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_op_mode(libs.op_mode.op_mode, libs.globals.globals, libs.globals.globals).
:- mode set_op_mode((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_opt_tuple(libs.optimization_options.opt_tuple, libs.globals.globals, libs.globals.globals).
:- mode set_opt_tuple((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_option(libs.options.option, getopt.option_data, libs.globals.globals, libs.globals.globals).
:- mode set_option((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_options(libs.options.option_table, libs.globals.globals, libs.globals.globals).
:- mode set_options((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_ssdb_trace_level(libs.globals.ssdb_trace_level, libs.globals.globals, libs.globals.globals).
:- mode set_ssdb_trace_level((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_trace_level(libs.trace_params.trace_level, libs.globals.globals, libs.globals.globals).
:- mode set_trace_level((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_trace_level_none(libs.globals.globals, libs.globals.globals).
:- mode set_trace_level_none((builtin.in), (builtin.out)) is det.
:- pred set_word_size(libs.globals.word_size, libs.globals.globals, libs.globals.globals).
:- mode set_word_size((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred simple_foreign_language_string(libs.globals.foreign_language, string).
:- mode simple_foreign_language_string((builtin.in), (builtin.out)) is det.
:- mode simple_foreign_language_string((builtin.out), (builtin.in)) is semidet.
:- func simple_foreign_language_string(libs.globals.foreign_language) = string.
:- func target_lang_to_foreign_export_lang(libs.globals.compilation_target) = libs.globals.foreign_language.
:- pred want_return_var_layouts(libs.globals.globals, libs.trace_params.eff_trace_level, bool.bool).
:- mode want_return_var_layouts((builtin.in), (builtin.in), (builtin.out)) is det.
