:- module ml_backend.ml_util.
:- interface.
:- use_module backend_libs.
:- use_module bool.
:- use_module libs.
:- use_module list.
:- use_module maybe.
:- use_module parse_tree.
:- use_module backend_libs.rtti.
:- use_module libs.globals.
:- use_module ml_backend.mlds.
:- use_module parse_tree.prog_data.
:- pred code_address_is_for_this_function(ml_backend.mlds.mlds_code_addr, ml_backend.mlds.mlds_module_name, ml_backend.mlds.mlds_function_name).
:- mode code_address_is_for_this_function(builtin.in, builtin.in, builtin.in) is semidet.
:- pred func_defns_contain_main(list.list(ml_backend.mlds.mlds_function_defn)).
:- mode func_defns_contain_main(builtin.in) is semidet.
:- func function_defn_contains_var(ml_backend.mlds.mlds_function_defn, ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func function_defns_contains_var(list.list(ml_backend.mlds.mlds_function_defn), ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func gen_init_array(((func T) = ml_backend.mlds.mlds_initializer), list.list(T)) = ml_backend.mlds.mlds_initializer.
:- func gen_init_bool(bool.bool) = ml_backend.mlds.mlds_initializer.
:- func gen_init_boxed_int(int) = ml_backend.mlds.mlds_initializer.
:- func gen_init_builtin_const(backend_libs.rtti.target_prefixes, string) = ml_backend.mlds.mlds_initializer.
:- func gen_init_foreign(libs.globals.foreign_language, string) = ml_backend.mlds.mlds_initializer.
:- func gen_init_int(int) = ml_backend.mlds.mlds_initializer.
:- func gen_init_int16(int16) = ml_backend.mlds.mlds_initializer.
:- func gen_init_int32(int32) = ml_backend.mlds.mlds_initializer.
:- func gen_init_int8(int8) = ml_backend.mlds.mlds_initializer.
:- func gen_init_maybe(ml_backend.mlds.mlds_type, ((func T) = ml_backend.mlds.mlds_initializer), maybe.maybe(T)) = ml_backend.mlds.mlds_initializer.
:- func gen_init_null_pointer(ml_backend.mlds.mlds_type) = ml_backend.mlds.mlds_initializer.
:- func gen_init_string(string) = ml_backend.mlds.mlds_initializer.
:- func gen_init_uint(uint) = ml_backend.mlds.mlds_initializer.
:- func gen_init_uint16(uint16) = ml_backend.mlds.mlds_initializer.
:- func gen_init_uint32(uint32) = ml_backend.mlds.mlds_initializer.
:- func gen_init_uint8(uint8) = ml_backend.mlds.mlds_initializer.
:- func get_mlds_stmt_context(ml_backend.mlds.mlds_stmt) = parse_tree.prog_data.prog_context.
:- pred has_foreign_languages(ml_backend.mlds.mlds_stmt, list.list(libs.globals.foreign_language)).
:- mode has_foreign_languages(builtin.in, builtin.out) is det.
:- func initializer_contains_var(ml_backend.mlds.mlds_initializer, ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func local_var_defn_contains_var(ml_backend.mlds.mlds_local_var_defn, ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func local_var_defns_contains_var(list.list(ml_backend.mlds.mlds_local_var_defn), ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func lval_contains_var(ml_backend.mlds.mlds_lval, ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func lvals_contains_var(list.list(ml_backend.mlds.mlds_lval), ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func maybe_rval_contains_var(maybe.maybe(ml_backend.mlds.mlds_rval), ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func mlds_maybe_aux_func_id_to_suffix(ml_backend.mlds.mlds_maybe_aux_func_id) = string.
:- func mlds_target_high_level_data(ml_backend.mlds.mlds_target_lang) = bool.bool.
:- func project_mlds_argument_name(ml_backend.mlds.mlds_argument) = ml_backend.mlds.mlds_local_var_name.
:- func rval_contains_var(ml_backend.mlds.mlds_rval, ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func rvals_contains_var(list.list(ml_backend.mlds.mlds_rval), ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- func statement_contains_var(ml_backend.mlds.mlds_stmt, ml_backend.mlds.mlds_local_var_name) = bool.bool.
:- pred statement_is_or_contains_statement(ml_backend.mlds.mlds_stmt, ml_backend.mlds.mlds_stmt).
:- mode statement_is_or_contains_statement(builtin.in, builtin.out) is multi.
:- pred stmt_contains_statement(ml_backend.mlds.mlds_stmt, ml_backend.mlds.mlds_stmt).
:- mode stmt_contains_statement(builtin.in, builtin.out) is nondet.
:- func wrap_init_obj(ml_backend.mlds.mlds_rval) = ml_backend.mlds.mlds_initializer.
