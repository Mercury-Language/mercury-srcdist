/*
** Automatically generated from `assertion.m'
** by the Mercury compiler,
** version rotd-2019-07-28
** configured for x86_64-pc-linux-gnu.
** Do not edit.
**
** The autoconfigured grade settings governing
** the generation of this C file were
**
** TAG_BITS=2
** UNBOXED_FLOAT=no
** UNBOXED_INT64S=no
** PREGENERATED_DIST=yes
** HIGHLEVEL_CODE=yes
**
** END_OF_C_GRADE_INFO
*/


// :- module hlds.assertion.
// :- interface.

#ifndef MR_HEADER_GUARD_hlds__assertion
#define MR_HEADER_GUARD_hlds__assertion

#ifdef __cplusplus
extern "C" {
#endif

#include "mercury.h"


#ifndef HLDS__ASSERTION_DECL_GUARD
#define HLDS__ASSERTION_DECL_GUARD
#include "hlds.mih"

#endif




extern const MR_TypeCtorInfo_Struct hlds__assertion__hlds__assertion__type_ctor_info_associative_vars_output_var_0;

extern const MR_TypeCtorInfo_Struct hlds__assertion__hlds__assertion__type_ctor_info_state_update_vars_0;

extern const MR_TypeCtorInfo_Struct hlds__assertion__hlds__assertion__type_ctor_info_subst_0;

MR_bool MR_CALL 
hlds__assertion__f_85_110_117_115_101_100_65_114_103_115_95_95_112_114_101_100_95_95_105_115_95_117_112_100_97_116_101_95_97_115_115_101_114_116_105_111_110_95_95_91_51_93_95_48_5_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

MR_bool MR_CALL 
hlds__assertion__f_85_110_117_115_101_100_65_114_103_115_95_95_112_114_101_100_95_95_105_115_95_117_112_100_97_116_101_95_97_115_115_101_114_116_105_111_110_95_103_111_97_108_95_95_91_50_93_95_48_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
hlds__assertion__assert_id_goal_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

MR_bool MR_CALL 
hlds__assertion__is_associativity_assertion_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

MR_bool MR_CALL 
hlds__assertion__is_associativity_assertion_goal_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

MR_bool MR_CALL 
hlds__assertion__is_commutativity_assertion_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

MR_bool MR_CALL 
hlds__assertion__is_commutativity_assertion_goal_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

MR_bool MR_CALL 
hlds__assertion__is_construction_equivalence_assertion_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word param_4);

MR_bool MR_CALL 
hlds__assertion__is_construction_equivalence_assertion_goal_3_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
hlds__assertion__is_update_assertion_5_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word param_4,
  MR_Word * param_5);

MR_bool MR_CALL 
hlds__assertion__is_update_assertion_goal_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

void MR_CALL 
hlds__assertion__normalise_goal_2_p_0(
  MR_Word param_1,
  MR_Word * param_2);

void MR_CALL 
hlds__assertion__record_preds_used_in_4_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word * param_4);

void MR_CALL 
hlds__assertion____Compare____associative_vars_output_var_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
hlds__assertion____Compare____state_update_vars_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
hlds__assertion____Unify____associative_vars_output_var_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
hlds__assertion____Unify____state_update_vars_0_0(
  MR_Word param_1,
  MR_Word param_2);

void mercury__hlds__assertion__init(void);
void mercury__hlds__assertion__init_type_tables(void);
void mercury__hlds__assertion__init_debugger(void);
const char *mercury__hlds__assertion__grade_check(void);

#ifdef __cplusplus
}
#endif

#endif // MR_HEADER_GUARD_hlds.assertion

// :- end_interface hlds.assertion.
