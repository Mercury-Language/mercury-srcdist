# Automatically generated dependencies for module `top_level'
# generated from source file `top_level.m'
# Generated by the Mercury compiler, version rotd-2007-08-16, configured for i686-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)
.PHONY : top_level
top_level : top_level$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
top_level : top_level.exe
top_level.exe : $(top_level.dlls) $(top_level.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
top_level : $(top_level.classes)
 else
top_level$(EXT_FOR_EXE) : $(top_level.cs_or_ss) $(top_level.os) top_level_init.$O \
		$(foreach @,top_level,$(ALL_MLOBJS)) \
		$(foreach @,top_level,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) -o top_level$(EXT_FOR_EXE) top_level_init.$O \
		$(top_level.os) \
		$(foreach @,top_level,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libtop_level
ifeq ($(findstring il,$(GRADE)),il)
libtop_level : $(top_level.dlls) $(top_level.foreign_dlls) \
		$(top_level.ints) $(top_level.int3s) top_level.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libtop_level : top_level.jar \
		$(top_level.ints) $(top_level.int3s) top_level.init

 else
libtop_level : libtop_level.$A libtop_level.$(EXT_FOR_SHARED_LIB) \
		$(top_level.ints) $(top_level.int3s) top_level.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libtop_level.$(EXT_FOR_SHARED_LIB) : $(top_level.cs_or_ss) $(top_level.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,top_level,$(ALL_MLOBJS))) \
		$(foreach @,top_level,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libtop_level.$(EXT_FOR_SHARED_LIB) \
		$(top_level.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,top_level,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libtop_level.$A : $(top_level.cs_or_ss) $(top_level.os) \
		$(foreach @,top_level,$(ALL_MLOBJS))
	rm -f libtop_level.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libtop_level.$A $(top_level.os) \
		$(foreach @,top_level,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libtop_level.$A

top_level.jar : $(top_level.classes)
	$(JAR) $(JAR_CREATE_FLAGS) top_level.jar $(top_level.classes)

top_level.init : top_level.dep $(top_level.cs)
	echo > top_level.init
	$(MKLIBINIT) $(top_level.cs) >> top_level.init
	$(EXTRA_INIT_COMMAND) >> top_level.init
force-top_level_init :

top_level_init.c : force-top_level_init $(top_level.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file top_level_init.c.tmp $(top_level.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface top_level_init.c

.PHONY : libtop_level.install_ints
libtop_level.install_ints : $(top_level.ints) $(top_level.int3s)  install_lib_dirs
	files="$(top_level.ints) $(top_level.int3s) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libtop_level.install_opts
libtop_level.install_opts : 
	@:

.PHONY : libtop_level.install_hdrs
libtop_level.install_hdrs : $(top_level.mhs) install_lib_dirs
ifeq ($(top_level.mhs),)
	@:
else
	for hdr in $(top_level.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libtop_level.install_grade_hdrs
libtop_level.install_grade_hdrs : $(top_level.mihs) install_grade_dirs
ifeq ($(top_level.mihs),)
	@:
else
	for hdr in $(top_level.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : top_level.check
top_level.check : $(top_level.errs)

.PHONY : top_level.ints
top_level.ints : $(top_level.dates)

.PHONY : top_level.int3s
top_level.int3s : $(top_level.date3s)

.PHONY : top_level.opts
top_level.opts : $(top_level.optdates)

.PHONY : top_level.trans_opts
top_level.trans_opts : $(top_level.trans_opt_dates)

.PHONY : top_level.ss
top_level.ss : $(top_level.ss)

.PHONY : top_level.pic_ss
top_level.pic_ss : $(top_level.pic_ss)

.PHONY : top_level.ils
top_level.ils : $(top_level.ils)

.PHONY : top_level.javas
top_level.javas : $(top_level.javas)

.PHONY : top_level.classes
top_level.classes : $(top_level.classes)

clean_local : top_level.clean
.PHONY : top_level.clean
top_level.clean :
	-echo $(top_level.dirs) | xargs rm -rf 
	-echo $(top_level.cs) top_level_init.c | xargs rm -f
	-echo $(top_level.mihs) | xargs rm -f
	-echo $(top_level.all_ss) top_level_init.s | xargs rm -f
	-echo $(top_level.all_pic_ss) top_level_init.s | xargs rm -f
	-echo $(top_level.all_os) top_level_init.$O | xargs rm -f
	-echo $(top_level.all_pic_os) top_level_init.pic_o | xargs rm -f
	-echo $(top_level.c_dates) | xargs rm -f
	-echo $(top_level.il_dates) | xargs rm -f
	-echo $(top_level.java_dates) | xargs rm -f
	-echo $(top_level.all_s_dates) | xargs rm -f
	-echo $(top_level.all_pic_s_dates) | xargs rm -f
	-echo $(top_level.useds) | xargs rm -f
	-echo $(top_level.ils) | xargs rm -f
	-echo $(top_level.javas) | xargs rm -f
	-echo $(top_level.profs) | xargs rm -f
	-echo $(top_level.errs) | xargs rm -f
	-echo $(top_level.foreign_cs) | xargs rm -f

realclean_local : top_level.realclean
.PHONY : top_level.realclean
top_level.realclean : top_level.clean
	-echo $(top_level.dates) | xargs rm -f
	-echo $(top_level.date0s) | xargs rm -f
	-echo $(top_level.date3s) | xargs rm -f
	-echo $(top_level.optdates) | xargs rm -f
	-echo $(top_level.trans_opt_dates) | xargs rm -f
	-echo $(top_level.ints) | xargs rm -f
	-echo $(top_level.all_int0s) | xargs rm -f
	-echo $(top_level.int3s) | xargs rm -f
	-echo $(top_level.opts) | xargs rm -f
	-echo $(top_level.trans_opts) | xargs rm -f
	-echo $(top_level.analysiss) | xargs rm -f
	-echo $(top_level.requests) | xargs rm -f
	-echo $(top_level.imdgs) | xargs rm -f
	-echo $(top_level.ds) | xargs rm -f
	-echo $(top_level.module_deps) | xargs rm -f
	-echo $(top_level.all_mhs) | xargs rm -f
	-echo $(top_level.all_mihs) | xargs rm -f
	-echo $(top_level.dlls) | xargs rm -f
	-echo $(top_level.foreign_dlls) | xargs rm -f
	-echo $(top_level.classes) | xargs rm -f
	-rm -f top_level$(EXT_FOR_EXE) top_level.init libtop_level.$A libtop_level.$(EXT_FOR_SHARED_LIB) top_level.jar top_level.dep top_level.dv

