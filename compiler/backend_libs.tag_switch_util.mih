/*
** Automatically generated from `tag_switch_util.m'
** by the Mercury compiler,
** version rotd-2024-05-02
** configured for x86_64-pc-linux-gnu.
** Do not edit.
**
** The autoconfigured grade settings governing
** the generation of this C file were
**
** TAG_BITS=2
** UNBOXED_FLOAT=no
** UNBOXED_INT64S=no
** PREGENERATED_DIST=yes
** HIGHLEVEL_CODE=yes
**
** END_OF_C_GRADE_INFO
*/


// :- module backend_libs.tag_switch_util.
// :- interface.

#ifndef MR_HEADER_GUARD_backend_libs__tag_switch_util
#define MR_HEADER_GUARD_backend_libs__tag_switch_util

#ifdef __cplusplus
extern "C" {
#endif

#include "mercury.h"


#ifndef BACKEND_LIBS__TAG_SWITCH_UTIL_DECL_GUARD
#define BACKEND_LIBS__TAG_SWITCH_UTIL_DECL_GUARD
#include "backend_libs.mih"

#endif



extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_empty_ptag_list_0;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_is_switch_complete_0;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_ptag_case_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_ptag_case_entry_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_ptag_case_group_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_ptag_case_map_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_ptag_sectag_info_0;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_ptag_sectag_map_0;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_sectag_case_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_sectag_case_cord_map_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_sectag_case_list_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_sectag_case_map_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_sectag_goal_list_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_sectag_goal_map_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_shared_ptag_info_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_shared_sectag_locn_0;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_single_ptag_case_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_whole_ptag_info_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_whole_ptags_info_1;

extern const MR_TypeCtorInfo_Struct backend_libs__tag_switch_util__backend_libs__tag_switch_util__type_ctor_info_whole_ptags_map_1;

void MR_CALL 
backend_libs__tag_switch_util__group_cases_by_ptag_15_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3,
  MR_Word param_4,
  MR_Word param_5,
  MR_Word param_6,
  MR_Word param_7,
  MR_Word param_8,
  MR_Word param_9,
  MR_Box param_10,
  MR_Box * param_11,
  MR_Box param_12,
  MR_Box * param_13,
  MR_Box param_14,
  MR_Box * param_15,
  MR_Box param_16,
  MR_Box * param_17,
  MR_Word * param_18,
  MR_Integer * param_19,
  uint8_t * param_20);

void MR_CALL 
backend_libs__tag_switch_util__order_ptag_groups_by_count_2_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
backend_libs__tag_switch_util__order_ptag_specific_groups_by_value_2_p_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word * param_3);

void MR_CALL 
backend_libs__tag_switch_util____Compare____empty_ptag_list_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
backend_libs__tag_switch_util____Compare____is_switch_complete_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
backend_libs__tag_switch_util____Compare____ptag_case_group_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____sectag_case_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____sectag_case_list_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____sectag_case_map_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____sectag_goal_list_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____sectag_goal_map_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____shared_ptag_info_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____shared_sectag_locn_0_0(
  MR_Word * param_1,
  MR_Word param_2,
  MR_Word param_3);

void MR_CALL 
backend_libs__tag_switch_util____Compare____single_ptag_case_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____whole_ptag_info_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

void MR_CALL 
backend_libs__tag_switch_util____Compare____whole_ptags_info_1_0(
  MR_Word param_1,
  MR_Word * param_2,
  MR_Word param_3,
  MR_Word param_4);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____empty_ptag_list_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____is_switch_complete_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____ptag_case_group_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____sectag_case_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____sectag_case_list_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____sectag_case_map_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____sectag_goal_list_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____sectag_goal_map_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____shared_ptag_info_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____shared_sectag_locn_0_0(
  MR_Word param_1,
  MR_Word param_2);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____single_ptag_case_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____whole_ptag_info_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

MR_bool MR_CALL 
backend_libs__tag_switch_util____Unify____whole_ptags_info_1_0(
  MR_Word param_1,
  MR_Word param_2,
  MR_Word param_3);

void mercury__backend_libs__tag_switch_util__init(void);
void mercury__backend_libs__tag_switch_util__init_type_tables(void);
void mercury__backend_libs__tag_switch_util__init_debugger(void);
const char *mercury__backend_libs__tag_switch_util__grade_check(void);

#ifdef __cplusplus
}
#endif

#endif // MR_HEADER_GUARD_backend_libs.tag_switch_util

// :- end_interface backend_libs.tag_switch_util.
