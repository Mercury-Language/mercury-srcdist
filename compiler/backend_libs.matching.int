:- module (backend_libs.matching).
:- interface.
:- use_module bool.
:- use_module libs.
:- use_module list.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module set.
:- use_module (libs.globals).
:- use_module (libs.optimization_options).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.prog_data).
:- use_module (parse_tree.set_of_var).
:- type benefit_node.
:- type cost_node.
:- type matching_params
    --->    matching_params(((backend_libs.matching).cell_var_store_cost) :: int, ((backend_libs.matching).cell_var_load_cost) :: int, ((backend_libs.matching).field_var_store_cost) :: int, ((backend_libs.matching).field_var_load_cost) :: int, ((backend_libs.matching).one_path_op_ratio) :: int, ((backend_libs.matching).one_path_node_ratio) :: int, ((backend_libs.matching).include_all_candidates) :: libs.optimization_options.maybe_opt_svcell_all_candidates).
:- pred find_via_cell_vars(libs.globals.globals, mdbcomp.sym_name.module_name, backend_libs.matching.matching_params, parse_tree.prog_data.prog_var, parse_tree.set_of_var.set_of_progvar, bool.bool, parse_tree.set_of_var.set_of_progvar, list.list(parse_tree.set_of_var.set_of_progvar), set.set(backend_libs.matching.benefit_node), set.set(backend_libs.matching.cost_node), parse_tree.set_of_var.set_of_progvar).
:- mode find_via_cell_vars((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out)) is det.
