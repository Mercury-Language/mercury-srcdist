:- module (parse_tree.module_imports).
:- interface.
:- use_module io.
:- use_module libs.
:- use_module list.
:- use_module map.
:- use_module maybe.
:- use_module mdbcomp.
:- use_module set.
:- use_module (libs.file_util).
:- use_module (libs.globals).
:- use_module (libs.timestamp).
:- use_module (mdbcomp.sym_name).
:- use_module (parse_tree.error_util).
:- use_module (parse_tree.file_kind).
:- use_module (parse_tree.parse_error).
:- use_module (parse_tree.prog_data_foreign).
:- use_module (parse_tree.prog_item).
:- pragma foreign_import_module("C", (parse_tree.module_imports)).
:- pragma foreign_import_module("C#", (parse_tree.module_imports)).
:- pragma foreign_import_module("Java", (parse_tree.module_imports)).
:- type grabbed_file
    --->    gf_src(parse_tree.prog_item.parse_tree_module_src)
    ;       gf_int0(parse_tree.prog_item.parse_tree_int0, parse_tree.prog_item.read_why_int0)
    ;       gf_int1(parse_tree.prog_item.parse_tree_int1, parse_tree.prog_item.read_why_int1)
    ;       gf_int2(parse_tree.prog_item.parse_tree_int2, parse_tree.prog_item.read_why_int2)
    ;       gf_int3(parse_tree.prog_item.parse_tree_int3, parse_tree.prog_item.read_why_int3).
:- type grabbed_file_map == map.map(mdbcomp.sym_name.module_name, parse_tree.module_imports.grabbed_file).
:- type maybe_top_module
    --->    top_module(set.set(mdbcomp.sym_name.module_name))
    ;       not_top_module .
:- type module_and_imports.
:- type module_baggage
    --->    module_baggage(((parse_tree.module_imports).mb_source_file_name) :: libs.file_util.file_name, ((parse_tree.module_imports).mb_source_file_dir) :: libs.file_util.dir_name, ((parse_tree.module_imports).mb_source_file_module_name) :: mdbcomp.sym_name.module_name, ((parse_tree.module_imports).mb_maybe_top_module) :: parse_tree.module_imports.maybe_top_module, ((parse_tree.module_imports).mb_maybe_timestamp_map) :: maybe.maybe(parse_tree.module_imports.module_timestamp_map), ((parse_tree.module_imports).mb_grabbed_file_map) :: parse_tree.module_imports.grabbed_file_map, ((parse_tree.module_imports).mb_specs) :: list.list(parse_tree.error_util.error_spec), ((parse_tree.module_imports).mb_errors) :: parse_tree.parse_error.read_module_errors).
:- type module_dep_info
    --->    module_dep_info_imports(parse_tree.module_imports.module_imports_and_baggage)
    ;       module_dep_info_summary(parse_tree.module_imports.module_dep_summary).
:- type module_dep_summary
    --->    module_dep_summary(((parse_tree.module_imports).mds_source_file_name) :: string, ((parse_tree.module_imports).mds_source_file_dir) :: string, ((parse_tree.module_imports).mds_source_file_module_name) :: mdbcomp.sym_name.module_name, ((parse_tree.module_imports).mds_module_name) :: mdbcomp.sym_name.module_name, ((parse_tree.module_imports).mds_children) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.module_imports).mds_maybe_top_module) :: parse_tree.module_imports.maybe_top_module, ((parse_tree.module_imports).mds_int_deps) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.module_imports).mds_imp_deps) :: set.set(mdbcomp.sym_name.module_name), ((parse_tree.module_imports).mds_fact_table_file_names) :: set.set(string), ((parse_tree.module_imports).mds_fims) :: set.set(parse_tree.prog_data_foreign.fim_spec), ((parse_tree.module_imports).mds_foreign_include_files) :: set.set(parse_tree.prog_data_foreign.foreign_include_file_info), ((parse_tree.module_imports).mds_contains_foreign_code) :: parse_tree.prog_item.contains_foreign_code, ((parse_tree.module_imports).mds_contains_foreign_export) :: parse_tree.prog_item.contains_foreign_export).
:- type module_imports_and_baggage
    --->    module_imports_and_baggage(((parse_tree.module_imports).miab_baggage) :: parse_tree.module_imports.module_baggage, ((parse_tree.module_imports).miab_mai) :: parse_tree.module_imports.module_and_imports).
:- type module_timestamp
    --->    module_timestamp(((parse_tree.module_imports).mts_file_kind) :: parse_tree.file_kind.file_kind, ((parse_tree.module_imports).mts_timestamp) :: libs.timestamp.timestamp, ((parse_tree.module_imports).mts_avail_kind) :: parse_tree.module_imports.recomp_avail).
:- type module_timestamp_map == map.map(mdbcomp.sym_name.module_name, parse_tree.module_imports.module_timestamp).
:- type recomp_avail
    --->    recomp_avail_src 
    ;       recomp_avail_int_import 
    ;       recomp_avail_imp_import 
    ;       recomp_avail_int_use 
    ;       recomp_avail_imp_use 
    ;       recomp_avail_int_use_imp_import .
:- func get_nested_children_list_of_top_module(parse_tree.module_imports.maybe_top_module) = list.list(mdbcomp.sym_name.module_name).
:- func get_nested_children_of_top_module(parse_tree.module_imports.maybe_top_module) = set.set(mdbcomp.sym_name.module_name).
:- pred init_module_and_imports(parse_tree.prog_item.parse_tree_module_src, parse_tree.module_imports.module_and_imports).
:- mode init_module_and_imports((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_ancestor_int_spec(parse_tree.prog_item.ancestor_int_spec, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_ancestor_int_spec((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_direct_int_spec(parse_tree.prog_item.direct_int_spec, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_direct_int_spec((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_indirect_int_spec(parse_tree.prog_item.indirect_int_spec, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_indirect_int_spec((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_int_for_opt_spec(parse_tree.prog_item.int_for_opt_spec, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_int_for_opt_spec((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_plain_opt(parse_tree.prog_item.parse_tree_plain_opt, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_plain_opt((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_trans_opt(parse_tree.prog_item.parse_tree_trans_opt, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_trans_opt((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_add_type_repn_spec(parse_tree.prog_item.type_repn_spec, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_add_type_repn_spec((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_ancestor_int_specs(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.ancestor_int_spec)).
:- mode module_and_imports_get_ancestor_int_specs((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_aug_comp_unit(parse_tree.module_imports.module_and_imports, parse_tree.prog_item.aug_compilation_unit).
:- mode module_and_imports_get_aug_comp_unit((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_children(parse_tree.module_imports.module_and_imports, list.list(mdbcomp.sym_name.module_name)).
:- mode module_and_imports_get_children((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_children_set(parse_tree.module_imports.module_and_imports, set.set(mdbcomp.sym_name.module_name)).
:- mode module_and_imports_get_children_set((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_direct_int_specs(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.direct_int_spec)).
:- mode module_and_imports_get_direct_int_specs((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_fact_tables(parse_tree.module_imports.module_and_imports, set.set(string)).
:- mode module_and_imports_get_fact_tables((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_fim_specs(parse_tree.module_imports.module_and_imports, set.set(parse_tree.prog_data_foreign.fim_spec)).
:- mode module_and_imports_get_fim_specs((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_foreign_include_file_infos(parse_tree.module_imports.module_and_imports, set.set(parse_tree.prog_data_foreign.foreign_include_file_info)).
:- mode module_and_imports_get_foreign_include_file_infos((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_indirect_int_specs(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.indirect_int_spec)).
:- mode module_and_imports_get_indirect_int_specs((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_int_for_opt_specs(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.int_for_opt_spec)).
:- mode module_and_imports_get_int_for_opt_specs((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_int_imp_deps(parse_tree.module_imports.module_and_imports, set.set(mdbcomp.sym_name.module_name), set.set(mdbcomp.sym_name.module_name)).
:- mode module_and_imports_get_int_imp_deps((builtin.in), (builtin.out), (builtin.out)) is det.
:- pred module_and_imports_get_module_name(parse_tree.module_imports.module_and_imports, mdbcomp.sym_name.module_name).
:- mode module_and_imports_get_module_name((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_parse_tree_module_src(parse_tree.module_imports.module_and_imports, parse_tree.prog_item.parse_tree_module_src).
:- mode module_and_imports_get_parse_tree_module_src((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_plain_opts(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.parse_tree_plain_opt)).
:- mode module_and_imports_get_plain_opts((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_trans_opts(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.parse_tree_trans_opt)).
:- mode module_and_imports_get_trans_opts((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_get_type_repn_specs(parse_tree.module_imports.module_and_imports, map.map(mdbcomp.sym_name.module_name, parse_tree.prog_item.type_repn_spec)).
:- mode module_and_imports_get_type_repn_specs((builtin.in), (builtin.out)) is det.
:- pred module_and_imports_maybe_add_module_version_numbers(mdbcomp.sym_name.module_name, parse_tree.prog_item.maybe_version_numbers, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode module_and_imports_maybe_add_module_version_numbers((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_children(parse_tree.module_imports.module_dep_info, set.set(mdbcomp.sym_name.module_name)).
:- mode module_dep_info_get_children((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_fact_tables(parse_tree.module_imports.module_dep_info, set.set(string)).
:- mode module_dep_info_get_fact_tables((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_fims(parse_tree.module_imports.module_dep_info, set.set(parse_tree.prog_data_foreign.fim_spec)).
:- mode module_dep_info_get_fims((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_foreign_include_files(parse_tree.module_imports.module_dep_info, set.set(parse_tree.prog_data_foreign.foreign_include_file_info)).
:- mode module_dep_info_get_foreign_include_files((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_imp_deps(parse_tree.module_imports.module_dep_info, set.set(mdbcomp.sym_name.module_name)).
:- mode module_dep_info_get_imp_deps((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_int_deps(parse_tree.module_imports.module_dep_info, set.set(mdbcomp.sym_name.module_name)).
:- mode module_dep_info_get_int_deps((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_maybe_top_module(parse_tree.module_imports.module_dep_info, parse_tree.module_imports.maybe_top_module).
:- mode module_dep_info_get_maybe_top_module((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_module_name(parse_tree.module_imports.module_dep_info, mdbcomp.sym_name.module_name).
:- mode module_dep_info_get_module_name((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_source_file_dir(parse_tree.module_imports.module_dep_info, string).
:- mode module_dep_info_get_source_file_dir((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_source_file_module_name(parse_tree.module_imports.module_dep_info, mdbcomp.sym_name.module_name).
:- mode module_dep_info_get_source_file_module_name((builtin.in), (builtin.out)) is det.
:- pred module_dep_info_get_source_file_name(parse_tree.module_imports.module_dep_info, string).
:- mode module_dep_info_get_source_file_name((builtin.in), (builtin.out)) is det.
:- pred parse_tree_src_to_module_imports_and_baggage_list(libs.globals.globals, libs.file_util.file_name, parse_tree.prog_item.parse_tree_src, parse_tree.parse_error.read_module_errors, list.list(parse_tree.error_util.error_spec), list.list(parse_tree.error_util.error_spec), list.list(parse_tree.module_imports.module_imports_and_baggage)).
:- mode parse_tree_src_to_module_imports_and_baggage_list((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred rebuild_module_and_imports_for_dep_file(parse_tree.module_imports.module_baggage, parse_tree.module_imports.module_baggage, parse_tree.module_imports.module_and_imports, parse_tree.module_imports.module_and_imports).
:- mode rebuild_module_and_imports_for_dep_file((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred write_mai_stats(io.output_stream, io.io, io.io).
:- mode write_mai_stats((builtin.in), (builtin.di), (builtin.uo)) is det.
