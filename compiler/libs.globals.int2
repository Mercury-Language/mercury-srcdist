:- module (libs.globals).
:- interface.
:- use_module bimap.
:- use_module bool.
:- use_module list.
:- use_module map.
:- use_module (mdbcomp.sym_name).
:- type backend
    --->    high_level_backend 
    ;       low_level_backend .
:- type c_compiler_type
    --->    cc_gcc(((libs.globals).gcc_major_ver) :: maybe.maybe(int), ((libs.globals).gcc_minor_ver) :: maybe.maybe(int), ((libs.globals).gcc_patch_level) :: maybe.maybe(int))
    ;       cc_clang(maybe.maybe(libs.globals.clang_version))
    ;       cc_cl(maybe.maybe(int))
    ;       cc_unknown .
:- type clang_version
    --->    clang_version(int, int, int).
:- type compilation_target
    --->    target_c 
    ;       target_csharp 
    ;       target_java 
    ;       target_erlang .
:- type csharp_compiler_type
    --->    csharp_microsoft 
    ;       csharp_mono 
    ;       csharp_unknown .
:- type env_type
    --->    env_type_posix 
    ;       env_type_cygwin 
    ;       env_type_msys 
    ;       env_type_win_cmd 
    ;       env_type_powershell .
:- type file_install_cmd
    --->    install_cmd_user(string, string)
    ;       install_cmd_cp .
:- type foreign_language
    --->    lang_c 
    ;       lang_csharp 
    ;       lang_java 
    ;       lang_erlang .
:- type gc_method
    --->    gc_automatic 
    ;       gc_none 
    ;       gc_boehm 
    ;       gc_boehm_debug 
    ;       gc_hgc 
    ;       gc_accurate .
:- type globals.
:- type limit_error_contexts_map == map.map(string, list.list(libs.globals.line_number_range)).
:- type line_number_range
    --->    line_number_range(maybe.maybe(int), maybe.maybe(int)).
:- type may_be_thread_safe == bool.bool.
:- type reuse_strategy
    --->    same_cons_id 
    ;       within_n_cells_difference(int).
:- type source_file_map == bimap.bimap(mdbcomp.sym_name.module_name, string).
:- type ssdb_trace_level
    --->    none 
    ;       shallow 
    ;       deep .
:- type tags_method
    --->    tags_none 
    ;       tags_low .
:- type termination_norm
    --->    norm_simple 
    ;       norm_total 
    ;       norm_num_data_elems 
    ;       norm_size_data_elems .
:- type_representation((libs.globals).backend, du_repn(enum("high_level_backend", "low_level_backend", [], []))).
:- type_representation((libs.globals).clang_version, is_word_aligned_ptr).
:- type_representation((libs.globals).compilation_target, du_repn(enum("target_c", "target_csharp", ["target_java", "target_erlang"], []))).
:- type_representation((libs.globals).csharp_compiler_type, du_repn(enum("csharp_microsoft", "csharp_mono", ["csharp_unknown"], []))).
:- type_representation((libs.globals).env_type, du_repn(enum("env_type_posix", "env_type_cygwin", ["env_type_msys", "env_type_win_cmd", "env_type_powershell"], []))).
:- type_representation((libs.globals).foreign_language, du_repn(enum("lang_c", "lang_csharp", ["lang_java", "lang_erlang"], []))).
:- type_representation((libs.globals).gc_method, du_repn(enum("gc_automatic", "gc_none", ["gc_boehm", "gc_boehm_debug", "gc_hgc", "gc_accurate"], []))).
:- type_representation((libs.globals).globals, is_word_aligned_ptr).
:- type_representation((libs.globals).limit_error_contexts_map, is_eqv_to(map.map(string, list.list(libs.globals.line_number_range)))).
:- type_representation((libs.globals).line_number_range, is_word_aligned_ptr).
:- type_representation((libs.globals).may_be_thread_safe, is_eqv_to(bool.bool)).
:- type_representation((libs.globals).source_file_map, is_eqv_to(bimap.bimap(mdbcomp.sym_name.module_name, string))).
:- type_representation((libs.globals).ssdb_trace_level, du_repn(enum("none", "shallow", ["deep"], []))).
:- type_representation((libs.globals).tags_method, du_repn(enum("tags_none", "tags_low", [], []))).
:- type_representation((libs.globals).termination_norm, du_repn(enum("norm_simple", "norm_total", ["norm_num_data_elems", "norm_size_data_elems"], []))).
