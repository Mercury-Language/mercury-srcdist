:- module (hlds.instmap).
:- interface.
:- type arm_instmap
    --->    arm_instmap(parse_tree.prog_data.prog_context, hlds.instmap.instmap).
:- type instmap.
:- type instmap_delta.
:- type overlay_how
    --->    large_base 
    ;       large_overlay 
    ;       test_size .
:- type var_init_final_insts
    --->    var_init_final_insts(((hlds.instmap).vifi_var) :: parse_tree.prog_data.prog_var, ((hlds.instmap).vifi_init_inst) :: parse_tree.prog_data.mer_inst, ((hlds.instmap).vifi_final_inst) :: parse_tree.prog_data.mer_inst).
:- type_representation((hlds.instmap).arm_instmap, is_word_aligned_ptr).
:- type_representation((hlds.instmap).instmap_delta, is_eqv_to(hlds.instmap.instmap)).
:- type_representation((hlds.instmap).instmapping, is_eqv_to(map.map(parse_tree.prog_data.prog_var, parse_tree.prog_data.mer_inst))).
:- type_representation((hlds.instmap).overlay_how, du_repn(enum("large_base", "large_overlay", ["test_size"], []))).
:- type_representation((hlds.instmap).var_init_final_insts, is_word_aligned_ptr).
:- implementation.
:- type instmap_delta == hlds.instmap.instmap.
