:- module (ml_backend.ml_args_util).
:- interface.
:- use_module assoc_list.
:- use_module bool.
:- use_module hlds.
:- use_module list.
:- use_module map.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module (hlds.code_model).
:- use_module (hlds.hlds_module).
:- use_module (hlds.hlds_pred).
:- use_module (hlds.hlds_rtti).
:- use_module (mdbcomp.prim_data).
:- use_module (ml_backend.ml_gen_info).
:- use_module (ml_backend.mlds).
:- use_module (parse_tree.prog_data).
:- type copy_out_when
    --->    copy_out_never 
    ;       copy_out_only_last_arg 
    ;       copy_out_always .
:- type ml_call_arg
    --->    arg_not_for_closure_wrapper(parse_tree.prog_data.prog_var)
    ;       arg_for_closure_wrapper(ml_backend.mlds.mlds_local_var_name, ml_backend.mlds.mlds_lval, parse_tree.prog_data.mer_type).
:- type var_mvar_type_mode
    --->    var_mvar_type_mode(parse_tree.prog_data.prog_var, ml_backend.mlds.mlds_local_var_name, parse_tree.prog_data.mer_type, hlds.hlds_pred.top_functor_mode).
:- type what_params
    --->    input_params_only 
    ;       input_and_output_params .
:- inst (fcw) for (ml_backend.ml_args_util).ml_call_arg/0 == bound(arg_for_closure_wrapper(ground, ground, ground)).
:- inst (not_fcw) for (ml_backend.ml_args_util).ml_call_arg/0 == bound(arg_not_for_closure_wrapper(ground)).
:- type_representation(copy_out_when, du_repn(enum("copy_out_never", "copy_out_only_last_arg", ["copy_out_always"],  no_c_j_cs))).
:- type_representation(var_mvar_type_mode, is_word_aligned_ptr).
:- type_representation(what_params, du_repn(enum("input_params_only", "input_and_output_params", [],  no_c_j_cs))).
