:- module (make.build).
:- interface.
:- use_module (libs.globals).
:- type build(T) == make.build.build(T, make.make_info).
:- type build(T, Info) == make.build.build(T, Info, Info).
:- type build(T, Info1, Info2) == pred(libs.globals.globals, T, bool.bool, Info1, Info2, io.io, io.io).
:- type build2(T, U) == pred(libs.globals.globals, T, U, bool.bool, make.make_info, make.make_info, io.io, io.io).
:- type foldl2_pred_with_status(T, Info, IO) == pred(libs.globals.globals, T, bool.bool, Info, Info, IO, IO).
:- type foldl3_pred_with_status(T, Acc, Info, IO) == pred(libs.globals.globals, T, bool.bool, Acc, Acc, Info, Info, IO, IO).
:- type stdout_lock.
:- inst (build) == (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (build2) == (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (foldl2_pred_with_status) == (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- inst (foldl3_pred_with_status) == (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det).
:- implementation.
:- pragma foreign_import_module("C", (make.build)).
:- pragma foreign_import_module("C#", (make.build)).
:- pragma foreign_import_module("Java", (make.build)).
:- type job_ctl.
:- pragma foreign_type(c, job_ctl, "MC_JobCtl *").
:- pragma foreign_type(java, job_ctl, "java.lang.Object").
:- pragma foreign_type(csharp, job_ctl, "object").
:- type stdout_lock == make.build.job_ctl.
