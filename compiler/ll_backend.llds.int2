:- module (ll_backend.llds).
:- interface.
:- import_module assoc_list.
:- import_module bool.
:- import_module counter.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module set.
:- import_module term.
:- import_module (backend_libs.builtin_ops).
:- import_module (backend_libs.rtti).
:- import_module (hlds.code_model).
:- import_module (hlds.hlds_data).
:- import_module (hlds.hlds_llds).
:- import_module (hlds.hlds_pred).
:- import_module (libs.tree).
:- import_module (ll_backend.layout).
:- import_module (mdbcomp.prim_data).
:- import_module (mdbcomp.program_representation).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_foreign).
:- type add_region_ops
	--->	add_region_ops 
	;	do_not_add_region_ops .
:- type add_trail_ops
	--->	add_trail_ops 
	;	do_not_add_trail_ops .
:- type c_code_live_lvals
	--->	no_live_lvals_info 
	;	live_lvals_info((set.set(((ll_backend.llds).lval)))).
:- type c_file
	--->	c_file(((ll_backend.llds).cfile_modulename) :: ((mdbcomp.prim_data).module_name), ((ll_backend.llds).cfile_foreign_decl) :: ((parse_tree.prog_foreign).foreign_decl_info), ((ll_backend.llds).cfile_foreign_code) :: (list.list(((parse_tree.prog_foreign).user_foreign_code))), ((ll_backend.llds).cfile_foreign_export) :: (list.list(((parse_tree.prog_foreign).foreign_export))), ((ll_backend.llds).cfile_vars) :: (list.list(((ll_backend.llds).tabling_info_struct))), ((ll_backend.llds).cfile_scalar_common_data) :: (list.list(((ll_backend.llds).scalar_common_data_array))), ((ll_backend.llds).cfile_vector_common_data) :: (list.list(((ll_backend.llds).vector_common_data_array))), ((ll_backend.llds).cfile_rtti_data) :: (list.list(((backend_libs.rtti).rtti_data))), ((ll_backend.llds).cfile_layout_data) :: (list.list(((ll_backend.layout).layout_data))), ((ll_backend.llds).cfile_code) :: (list.list(((ll_backend.llds).comp_gen_c_module))), ((ll_backend.llds).cfile_user_init_c_names) :: (list.list(string)), ((ll_backend.llds).cfile_user_final_c_names) :: (list.list(string))).
:- type c_global_var_ref
	--->	env_var_ref(string).
:- type c_procedure
	--->	c_procedure(((ll_backend.llds).cproc_name) :: string, ((ll_backend.llds).cproc_orig_arity) :: int, ((ll_backend.llds).cproc_id) :: ((hlds.hlds_pred).pred_proc_id), ((ll_backend.llds).cproc_code_model) :: ((hlds.code_model).code_model), ((ll_backend.llds).cproc_code) :: (list.list(((ll_backend.llds).instruction))), ((ll_backend.llds).cproc_proc_label) :: ((mdbcomp.prim_data).proc_label), ((ll_backend.llds).cproc_label_nums) :: (counter.counter), ((ll_backend.llds).cproc_may_alter_rtti) :: ((ll_backend.llds).may_alter_rtti), ((ll_backend.llds).cproc_c_global_vars) :: (set.set(string))).
:- type call_model
	--->	call_model_det 
	;	call_model_semidet 
	;	call_model_nondet(((ll_backend.llds).nondet_tail_call)).
:- type can_branch_away
	--->	can_branch_away 
	;	cannot_branch_away .
:- type code_addr
	--->	code_label(((ll_backend.llds).label))
	;	code_imported_proc(((mdbcomp.prim_data).proc_label))
	;	code_succip 
	;	do_succeed((bool.bool))
	;	do_redo 
	;	do_fail 
	;	do_trace_redo_fail_shallow 
	;	do_trace_redo_fail_deep 
	;	do_call_closure(((ll_backend.llds).ho_call_variant))
	;	do_call_class_method(((ll_backend.llds).ho_call_variant))
	;	do_not_reached .
:- type code_tree == ((libs.tree).tree((list.list(((ll_backend.llds).instruction))))).
:- type common_cell_arg_group
	--->	common_cell_grouped_args(((ll_backend.llds).llds_type), int, (list.list(((ll_backend.llds).rval))))
	;	common_cell_ungrouped_arg(((ll_backend.llds).llds_type), ((ll_backend.llds).rval)).
:- type common_cell_type
	--->	plain_type((list.list(((ll_backend.llds).llds_type))))
	;	grouped_args_type((assoc_list.assoc_list(((ll_backend.llds).llds_type), int))).
:- type common_cell_value
	--->	plain_value((assoc_list.assoc_list(((ll_backend.llds).rval), ((ll_backend.llds).llds_type))))
	;	grouped_args_value((list.list(((ll_backend.llds).common_cell_arg_group)))).
:- type comp_gen_c_module
	--->	comp_gen_c_module(((ll_backend.llds).cgcm_name) :: string, ((ll_backend.llds).cgcm_procs) :: (list.list(((ll_backend.llds).c_procedure)))).
:- type data_addr
	--->	data_addr(((mdbcomp.prim_data).module_name), ((ll_backend.llds).data_name))
	;	rtti_addr(((backend_libs.rtti).rtti_id))
	;	layout_addr(((ll_backend.layout).layout_name)).
:- type data_name
	--->	scalar_common_ref(((ll_backend.llds).type_num), int)
	;	vector_common_ref(((ll_backend.llds).type_num), int)
	;	proc_tabling_ref(((mdbcomp.prim_data).proc_label), ((backend_libs.rtti).proc_tabling_struct_id)).
:- type embedded_stack_frame_id
	--->	embedded_stack_frame_id(((ll_backend.llds).main_stack), int, int).
:- type entry_label_type
	--->	entry_label_c_local 
	;	entry_label_local 
	;	entry_label_exported .
:- type foreign_interface_info
	--->	foreign_interface_info(((mdbcomp.prim_data).module_name), ((parse_tree.prog_foreign).foreign_decl_info), ((parse_tree.prog_data).foreign_import_module_info_list), ((parse_tree.prog_foreign).foreign_body_info), ((parse_tree.prog_foreign).foreign_export_decls), ((parse_tree.prog_foreign).foreign_export_defns)).
:- type foreign_proc_component
	--->	foreign_proc_inputs((list.list(((ll_backend.llds).foreign_proc_input))))
	;	foreign_proc_outputs((list.list(((ll_backend.llds).foreign_proc_output))))
	;	foreign_proc_user_code((maybe.maybe(((parse_tree.prog_data).prog_context))), ((parse_tree.prog_data).proc_affects_liveness), string)
	;	foreign_proc_raw_code(((ll_backend.llds).can_branch_away), ((parse_tree.prog_data).proc_affects_liveness), ((ll_backend.llds).c_code_live_lvals), string)
	;	foreign_proc_fail_to(((ll_backend.llds).label))
	;	foreign_proc_noop .
:- type foreign_proc_decl
	--->	foreign_proc_arg_decl(((parse_tree.prog_data).mer_type), string, string)
	;	foreign_proc_struct_ptr_decl(string, string).
:- type foreign_proc_input
	--->	foreign_proc_input(((ll_backend.llds).in_foreign_lang_var_name) :: string, ((ll_backend.llds).in_var_type) :: ((parse_tree.prog_data).mer_type), ((ll_backend.llds).in_var_type_is_dummy) :: (bool.bool), ((ll_backend.llds).in_original_type) :: ((parse_tree.prog_data).mer_type), ((ll_backend.llds).in_arg_value) :: ((ll_backend.llds).rval), ((ll_backend.llds).in_maybe_foreign_type) :: (maybe.maybe(((ll_backend.llds).foreign_proc_type))), ((ll_backend.llds).in_box_policy) :: ((parse_tree.prog_data).box_policy)).
:- type foreign_proc_output
	--->	foreign_proc_output(((ll_backend.llds).out_arg_dest) :: ((ll_backend.llds).lval), ((ll_backend.llds).out_var_type) :: ((parse_tree.prog_data).mer_type), ((ll_backend.llds).out_var_type_is_dummy) :: (bool.bool), ((ll_backend.llds).out_original_type) :: ((parse_tree.prog_data).mer_type), ((ll_backend.llds).out_var_name) :: string, ((ll_backend.llds).out_maybe_foreign_type) :: (maybe.maybe(((ll_backend.llds).foreign_proc_type))), ((ll_backend.llds).out_box_policy) :: ((parse_tree.prog_data).box_policy)).
:- type foreign_proc_struct
	--->	foreign_proc_struct(string, string, (maybe.maybe(((parse_tree.prog_data).prog_context)))).
:- type foreign_proc_type
	--->	foreign_proc_type(string, (list.list(((parse_tree.prog_data).foreign_type_assertion)))).
:- type ho_call_variant
	--->	generic 
	;	specialized_known(int).
:- type instr
	--->	comment(string)
	;	livevals((set.set(((ll_backend.llds).lval))))
	;	block(int, int, (list.list(((ll_backend.llds).instruction))))
	;	assign(((ll_backend.llds).lval), ((ll_backend.llds).rval))
	;	keep_assign(((ll_backend.llds).lval), ((ll_backend.llds).rval))
	;	llcall(((ll_backend.llds).code_addr), ((ll_backend.llds).code_addr), (list.list(((ll_backend.llds).liveinfo))), (term.context), ((mdbcomp.program_representation).goal_path), ((ll_backend.llds).call_model))
	;	mkframe(((ll_backend.llds).nondet_frame_info), (maybe.maybe(((ll_backend.llds).code_addr))))
	;	label(((ll_backend.llds).label))
	;	goto(((ll_backend.llds).code_addr))
	;	computed_goto(((ll_backend.llds).rval), (list.list(((ll_backend.llds).label))))
	;	arbitrary_c_code(((parse_tree.prog_data).proc_affects_liveness), ((ll_backend.llds).c_code_live_lvals), string)
	;	if_val(((ll_backend.llds).rval), ((ll_backend.llds).code_addr))
	;	save_maxfr(((ll_backend.llds).lval))
	;	restore_maxfr(((ll_backend.llds).lval))
	;	incr_hp(((ll_backend.llds).lval), (maybe.maybe(((ll_backend.llds).tag))), (maybe.maybe(int)), ((ll_backend.llds).rval), string, ((hlds.hlds_data).may_use_atomic_alloc), (maybe.maybe(((ll_backend.llds).rval))))
	;	mark_hp(((ll_backend.llds).lval))
	;	restore_hp(((ll_backend.llds).rval))
	;	free_heap(((ll_backend.llds).rval))
	;	push_region_frame(((ll_backend.llds).region_stack_id), ((ll_backend.llds).embedded_stack_frame_id))
	;	region_fill_frame(((ll_backend.llds).region_fill_frame_op), ((ll_backend.llds).embedded_stack_frame_id), ((ll_backend.llds).rval), ((ll_backend.llds).lval), ((ll_backend.llds).lval))
	;	region_set_fixed_slot(((ll_backend.llds).region_set_fixed_op), ((ll_backend.llds).embedded_stack_frame_id), ((ll_backend.llds).rval))
	;	use_and_maybe_pop_region_frame(((ll_backend.llds).region_use_frame_op), ((ll_backend.llds).embedded_stack_frame_id))
	;	store_ticket(((ll_backend.llds).lval))
	;	reset_ticket(((ll_backend.llds).rval), ((ll_backend.llds).reset_trail_reason))
	;	prune_ticket 
	;	discard_ticket 
	;	mark_ticket_stack(((ll_backend.llds).lval))
	;	prune_tickets_to(((ll_backend.llds).rval))
	;	incr_sp(int, string, ((ll_backend.llds).stack_incr_kind))
	;	decr_sp(int)
	;	decr_sp_and_return(int)
	;	foreign_proc_code(((ll_backend.llds).fproc_decls) :: (list.list(((ll_backend.llds).foreign_proc_decl))), ((ll_backend.llds).fproc_components) :: (list.list(((ll_backend.llds).foreign_proc_component))), ((ll_backend.llds).fproc_may_call_merc) :: ((parse_tree.prog_data).proc_may_call_mercury), ((ll_backend.llds).fproc_fix_nolayout) :: (maybe.maybe(((ll_backend.llds).label))), ((ll_backend.llds).fproc_fix_layout) :: (maybe.maybe(((ll_backend.llds).label))), ((ll_backend.llds).fproc_fix_onlylayout) :: (maybe.maybe(((ll_backend.llds).label))), ((ll_backend.llds).fproc_nofix) :: (maybe.maybe(((ll_backend.llds).label))), ((ll_backend.llds).fproc_stack_slot_ref) :: (bool.bool), ((ll_backend.llds).fproc_maybe_dupl) :: ((parse_tree.prog_data).proc_may_duplicate))
	;	init_sync_term(((ll_backend.llds).lval), int)
	;	fork(((ll_backend.llds).label))
	;	join_and_continue(((ll_backend.llds).lval), ((ll_backend.llds).label)).
:- type instruction
	--->	llds_instr(((ll_backend.llds).llds_inst) :: ((ll_backend.llds).instr), ((ll_backend.llds).llds_comment) :: string).
:- type label
	--->	internal_label(int, ((mdbcomp.prim_data).proc_label))
	;	entry_label(((ll_backend.llds).entry_label_type), ((mdbcomp.prim_data).proc_label)).
:- type layout_locn
	--->	locn_direct(((ll_backend.llds).lval))
	;	locn_indirect(((ll_backend.llds).lval), int).
:- type live_value_type
	--->	live_value_succip 
	;	live_value_curfr 
	;	live_value_maxfr 
	;	live_value_redoip 
	;	live_value_redofr 
	;	live_value_hp 
	;	live_value_trail_ptr 
	;	live_value_ticket 
	;	live_value_region_ite 
	;	live_value_region_disj 
	;	live_value_region_commit 
	;	live_value_var(((parse_tree.prog_data).prog_var), string, ((parse_tree.prog_data).mer_type), ((ll_backend.llds).llds_inst))
	;	live_value_unwanted .
:- type liveinfo
	--->	live_lvalue(((ll_backend.llds).layout_locn), ((ll_backend.llds).live_value_type), (map.map(((parse_tree.prog_data).tvar), (set.set(((ll_backend.llds).layout_locn)))))).
:- type llds_inst
	--->	llds_inst_ground 
	;	llds_inst_partial(((parse_tree.prog_data).mer_inst)).
:- type llds_proc_id == int.
:- type llds_type
	--->	bool 
	;	int_least8 
	;	uint_least8 
	;	int_least16 
	;	uint_least16 
	;	int_least32 
	;	uint_least32 
	;	integer 
	;	unsigned 
	;	float 
	;	string 
	;	data_ptr 
	;	code_ptr 
	;	word .
:- type lval
	--->	reg(((ll_backend.llds).reg_type), int)
	;	succip 
	;	maxfr 
	;	curfr 
	;	hp 
	;	sp 
	;	parent_sp 
	;	temp(((ll_backend.llds).reg_type), int)
	;	stackvar(int)
	;	parent_stackvar(int)
	;	framevar(int)
	;	succip_slot(((ll_backend.llds).rval))
	;	succfr_slot(((ll_backend.llds).rval))
	;	redoip_slot(((ll_backend.llds).rval))
	;	redofr_slot(((ll_backend.llds).rval))
	;	prevfr_slot(((ll_backend.llds).rval))
	;	field((maybe.maybe(((ll_backend.llds).tag))), ((ll_backend.llds).rval), ((ll_backend.llds).rval))
	;	mem_ref(((ll_backend.llds).rval))
	;	global_var_ref(((ll_backend.llds).c_global_var_ref))
	;	lvar(((parse_tree.prog_data).prog_var)).
:- type lval_or_any_reg
	--->	loa_lval(((ll_backend.llds).lval))
	;	loa_any_reg .
:- type main_stack
	--->	det_stack 
	;	nondet_stack .
:- type may_alter_rtti
	--->	may_alter_rtti 
	;	must_not_alter_rtti .
:- type mem_ref
	--->	stackvar_ref(((ll_backend.llds).rval))
	;	framevar_ref(((ll_backend.llds).rval))
	;	heap_ref(((ll_backend.llds).rval), int, ((ll_backend.llds).rval)).
:- type nondet_frame_info
	--->	temp_frame(((ll_backend.llds).temp_frame_type))
	;	ordinary_frame(string, int, (maybe.maybe(((ll_backend.llds).foreign_proc_struct)))).
:- type nondet_tail_call
	--->	no_tail_call 
	;	checked_tail_call 
	;	unchecked_tail_call .
:- type reg_type
	--->	reg_r 
	;	reg_f .
:- type region_fill_frame_op
	--->	region_fill_ite_protect 
	;	region_fill_ite_snapshot(((ll_backend.llds).removed_at_start_of_else))
	;	region_fill_disj_protect 
	;	region_fill_disj_snapshot 
	;	region_fill_commit .
:- type region_ite_kind
	--->	region_ite_semidet_cond 
	;	region_ite_nondet_cond .
:- type region_set_fixed_op
	--->	region_set_ite_num_protects 
	;	region_set_ite_num_snapshots 
	;	region_set_disj_num_protects 
	;	region_set_disj_num_snapshots 
	;	region_set_commit_num_entries .
:- type region_stack_id
	--->	region_stack_ite 
	;	region_stack_disj 
	;	region_stack_commit .
:- type region_use_frame_op
	--->	region_ite_then(((ll_backend.llds).region_ite_kind))
	;	region_ite_else(((ll_backend.llds).region_ite_kind))
	;	region_ite_nondet_cond_fail 
	;	region_disj_later 
	;	region_disj_last 
	;	region_commit_success 
	;	region_commit_failure .
:- type removed_at_start_of_else
	--->	removed_at_start_of_else 
	;	not_removed_at_start_of_else .
:- type reset_trail_reason
	--->	reset_reason_undo 
	;	reset_reason_commit 
	;	reset_reason_solve 
	;	reset_reason_exception 
	;	reset_reason_retry 
	;	reset_reason_gc .
:- type rval
	--->	lval(((ll_backend.llds).lval))
	;	var(((parse_tree.prog_data).prog_var))
	;	mkword(((ll_backend.llds).tag), ((ll_backend.llds).rval))
	;	const(((ll_backend.llds).rval_const))
	;	unop(((backend_libs.builtin_ops).unary_op), ((ll_backend.llds).rval))
	;	binop(((backend_libs.builtin_ops).binary_op), ((ll_backend.llds).rval), ((ll_backend.llds).rval))
	;	mem_addr(((ll_backend.llds).mem_ref)).
:- type rval_const
	--->	llconst_true 
	;	llconst_false 
	;	llconst_int(int)
	;	llconst_foreign(string, ((ll_backend.llds).llds_type))
	;	llconst_float(float)
	;	llconst_string(string)
	;	llconst_multi_string((list.list(string)))
	;	llconst_code_addr(((ll_backend.llds).code_addr))
	;	llconst_data_addr(((ll_backend.llds).data_addr), (maybe.maybe(int))).
:- type scalar_common_data_array
	--->	scalar_common_data_array(((ll_backend.llds).scda_module) :: ((mdbcomp.prim_data).module_name), ((ll_backend.llds).scda_rval_types) :: ((ll_backend.llds).common_cell_type), ((ll_backend.llds).scda_type_num) :: ((ll_backend.llds).type_num), ((ll_backend.llds).scda_values) :: (list.list(((ll_backend.llds).common_cell_value)))).
:- type stack_incr_kind
	--->	stack_incr_leaf 
	;	stack_incr_nonleaf .
:- type tabling_info_struct
	--->	tabling_info_struct(((ll_backend.llds).tis_module_name) :: ((mdbcomp.prim_data).module_name), ((ll_backend.llds).tis_proc_label) :: ((mdbcomp.prim_data).proc_label), ((ll_backend.llds).tis_eval_method) :: ((parse_tree.prog_data).eval_method), ((ll_backend.llds).tis_num_inputs) :: int, ((ll_backend.llds).tis_num_outputs) :: int, ((ll_backend.llds).tis_input_steps) :: (list.list(((hlds.hlds_pred).table_trie_step))), ((ll_backend.llds).tis_maybe_output_steps) :: (maybe.maybe((list.list(((hlds.hlds_pred).table_trie_step))))), ((ll_backend.llds).tis_ptis) :: ((ll_backend.llds).rval), ((ll_backend.llds).tis_type_params) :: ((ll_backend.llds).rval), ((ll_backend.llds).tis_size_limit) :: (maybe.maybe(int)), ((ll_backend.llds).tis_stats) :: ((parse_tree.prog_data).table_attr_statistics)).
:- type tag == int.
:- type temp_frame_type
	--->	det_stack_proc 
	;	nondet_stack_proc .
:- type type_num
	--->	type_num(int).
:- type vector_common_data_array
	--->	vector_common_data_array(((ll_backend.llds).vcda_module) :: ((mdbcomp.prim_data).module_name), ((ll_backend.llds).vcda_rval_types) :: ((ll_backend.llds).common_cell_type), ((ll_backend.llds).vcda_type_num) :: ((ll_backend.llds).type_num), ((ll_backend.llds).vcda_vector_num) :: int, ((ll_backend.llds).vcda_values) :: (list.list(((ll_backend.llds).common_cell_value)))).
