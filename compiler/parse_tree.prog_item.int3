:- module (parse_tree.prog_item).
:- interface.
:- type ancestor_int_spec.
:- type aug_compilation_unit.
:- type avail_import_info.
:- type avail_use_info.
:- type c_j_cs_e_defns.
:- type c_j_cs_e_enum_repn.
:- type c_j_cs_e_enums.
:- type c_j_cs_e_maybe_defn.
:- type c_j_cs_e_maybe_enum.
:- type c_j_cs_e_repn.
:- type c_java_csharp_erlang(T).
:- type c_repns(T).
:- type catch_any_expr.
:- type catch_expr.
:- type cell_local_sectag.
:- type cell_remote_sectag.
:- type class_decl.
:- type class_mode_info.
:- type class_pred_or_func_info.
:- type compiler_origin.
:- type constant_repn.
:- type contains_foreign_code.
:- type contains_foreign_export
	where	type_is_abstract_enum(1).
:- type decl_pragma.
:- type direct_dummy_repn.
:- type direct_int_spec.
:- type du_repn.
:- type enum_foreign_repn.
:- type enum_repn.
:- type fill_kind_size.
:- type foreign_enum_spec.
:- type foreign_name.
:- type foreign_type_lang_repn.
:- type foreign_type_repn.
:- type gen_du_functor_repn.
:- type gen_du_more_functors_repn.
:- type gen_du_only_functor_repn.
:- type generated_pragma.
:- type goal.
:- type impl_pragma.
:- type implicit_import_or_use
	where	type_is_abstract_enum(2).
:- type import_and_or_use_map.
:- type import_locn
	where	type_is_abstract_enum(3).
:- type import_or_use
	where	type_is_abstract_enum(1).
:- type imported_or_used
	where	type_is_abstract_enum(2).
:- type include_module_info.
:- type include_module_map.
:- type indirect_int_spec.
:- type inst_ctor_all_defns.
:- type inst_ctor_defn_map.
:- type int_for_opt_item_block.
:- type int_for_opt_module_section.
:- type int_for_opt_spec.
:- type int_item_block.
:- type int_module_section.
:- type item.
:- type item_avail.
:- type item_block(MS).
:- type item_clause_info.
:- type item_compiler_attributes.
:- type item_decl_pragma_info.
:- type item_exceptions.
:- type item_fim.
:- type item_finalise_info.
:- type item_foreign_enum_info.
:- type item_foreign_export_enum_info.
:- type item_foreign_proc.
:- type item_generated_pragma_info.
:- type item_impl_pragma_info.
:- type item_include.
:- type item_initialise_info.
:- type item_inst_defn_info.
:- type item_instance_info.
:- type item_maybe_attrs.
:- type item_mm_tabling.
:- type item_mode_decl_info.
:- type item_mode_defn_info.
:- type item_mutable_info.
:- type item_pragma_info(T).
:- type item_pred_decl_info.
:- type item_pred_marker.
:- type item_promise_info.
:- type item_struct_reuse.
:- type item_struct_sharing.
:- type item_tabled.
:- type item_termination.
:- type item_termination2.
:- type item_trailing.
:- type item_type_defn_info.
:- type item_type_defn_info_abstract.
:- type item_type_defn_info_du.
:- type item_type_defn_info_eqv.
:- type item_type_defn_info_foreign.
:- type item_type_defn_info_general(T).
:- type item_type_defn_info_solver.
:- type item_type_repn_info.
:- type item_type_repn_info_eqv.
:- type item_type_repn_info_general(T).
:- type item_type_spec.
:- type item_typeclass_info.
:- type item_unused_args.
:- type local_arg_repn.
:- type maybe_abstract_inst_defn.
:- type maybe_abstract_mode_defn.
:- type maybe_implicit_import_and_or_use.
:- type maybe_version_numbers.
:- type mode_ctor_all_defns.
:- type mode_ctor_defn_map.
:- type module_component.
:- type module_name_context.
:- type module_names_contexts.
:- type module_section
	where	type_is_abstract_enum(1).
:- type mutable_attach_to_io_state
	where	type_is_abstract_enum(1).
:- type mutable_constant
	where	type_is_abstract_enum(1).
:- type mutable_thread_local
	where	type_is_abstract_enum(1).
:- type mutable_trailed
	where	type_is_abstract_enum(1).
:- type mutable_var_attributes.
:- type nonconstant_repn.
:- type notag_repn.
:- type opt_item_block.
:- type opt_module_section.
:- type parse_tree_int.
:- type parse_tree_int0.
:- type parse_tree_int1.
:- type parse_tree_int2.
:- type parse_tree_int3.
:- type parse_tree_module_src.
:- type parse_tree_opt.
:- type parse_tree_plain_opt.
:- type parse_tree_src.
:- type parse_tree_trans_opt.
:- type plain_or_dot_var.
:- type pragma_info_exceptions.
:- type pragma_info_external_proc.
:- type pragma_info_fact_table.
:- type pragma_info_foreign_code.
:- type pragma_info_foreign_decl.
:- type pragma_info_foreign_proc.
:- type pragma_info_foreign_proc_export.
:- type pragma_info_mm_tabling_info.
:- type pragma_info_obsolete_pred.
:- type pragma_info_obsolete_proc.
:- type pragma_info_oisu.
:- type pragma_info_pred_marker.
:- type pragma_info_require_feature_set.
:- type pragma_info_require_tail_rec.
:- type pragma_info_structure_reuse.
:- type pragma_info_structure_sharing.
:- type pragma_info_tabled.
:- type pragma_info_termination2_info.
:- type pragma_info_termination_info.
:- type pragma_info_trailing_info.
:- type pragma_info_type_spec.
:- type pragma_info_unused_args.
:- type pred_marker_pragma_kind
	where	type_is_abstract_enum(3).
:- type pred_name_arity.
:- type pred_name_arity_mpf.
:- type pred_name_arity_mpf_mmode.
:- type pred_name_arity_pf.
:- type pred_name_arity_pf_mn.
:- type pred_name_modes_pf.
:- type quant_type
	where	type_is_abstract_enum(1).
:- type quant_vars_kind
	where	type_is_abstract_enum(1).
:- type raw_compilation_unit.
:- type raw_item_block.
:- type read_why_int0
	where	type_is_abstract_enum(1).
:- type read_why_int1
	where	type_is_abstract_enum(3).
:- type read_why_int2
	where	type_is_abstract_enum(2).
:- type read_why_int3
	where	type_is_abstract_enum(4).
:- type remote_arg_repn.
:- type sectag_word_or_size.
:- type section_import_and_or_use.
:- type section_import_and_or_use_map.
:- type src_item_block.
:- type src_module_section
	where	type_is_abstract_enum(2).
:- type type_ctor_all_defns.
:- type type_ctor_defn_map.
:- type type_ctor_foreign_enum_map.
:- type type_ctor_maybe_defn.
:- type type_ctor_repn_info.
:- type type_ctor_repn_map.
:- type_representation(ancestor_int_spec, is_word_aligned_ptr).
:- type_representation(aug_compilation_unit, is_word_aligned_ptr).
:- type_representation(avail_import_info, is_word_aligned_ptr).
:- type_representation(avail_use_info, is_word_aligned_ptr).
:- type_representation(c_j_cs_e_defns, is_eqv_to(parse_tree.prog_item.c_java_csharp_erlang(list(parse_tree.prog_item.item_type_defn_info_foreign)))).
:- type_representation(c_j_cs_e_enum_repn, is_eqv_to(parse_tree.prog_item.c_java_csharp_erlang(maybe(parse_tree.prog_item.enum_foreign_repn)))).
:- type_representation(c_j_cs_e_enums, is_eqv_to(parse_tree.prog_item.c_java_csharp_erlang(list(parse_tree.prog_item.item_foreign_enum_info)))).
:- type_representation(c_j_cs_e_maybe_defn, is_eqv_to(parse_tree.prog_item.c_java_csharp_erlang(maybe(parse_tree.prog_item.item_type_defn_info_foreign)))).
:- type_representation(c_j_cs_e_maybe_enum, is_eqv_to(parse_tree.prog_item.c_java_csharp_erlang(maybe(parse_tree.prog_item.item_foreign_enum_info)))).
:- type_representation(c_j_cs_e_repn, is_eqv_to(parse_tree.prog_item.c_java_csharp_erlang(maybe(parse_tree.prog_item.foreign_type_repn)))).
:- type_representation(catch_any_expr, is_word_aligned_ptr).
:- type_representation(catch_expr, is_word_aligned_ptr).
:- type_representation(class_mode_info, is_word_aligned_ptr).
:- type_representation(class_pred_or_func_info, is_word_aligned_ptr).
:- type_representation(constant_repn, is_word_aligned_ptr).
:- type_representation(contains_foreign_export, du_repn(enum("contains_foreign_export", "contains_no_foreign_export", [],  no_c_j_cs_e))).
:- type_representation(direct_dummy_repn, is_word_aligned_ptr).
:- type_representation(enum_repn, is_word_aligned_ptr).
:- type_representation(foreign_enum_spec, is_word_aligned_ptr).
:- type_representation(foreign_name, is_word_aligned_ptr).
:- type_representation(foreign_type_lang_repn, is_word_aligned_ptr).
:- type_representation(foreign_type_repn, is_word_aligned_ptr).
:- type_representation(gen_du_more_functors_repn, is_word_aligned_ptr).
:- type_representation(gen_du_only_functor_repn, is_word_aligned_ptr).
:- type_representation(implicit_import_or_use, du_repn(enum("implicit_int_import", "implicit_int_use", ["implicit_imp_use"],  no_c_j_cs_e))).
:- type_representation(import_and_or_use_map, is_eqv_to(map(module_name, parse_tree.prog_item.maybe_implicit_import_and_or_use))).
:- type_representation(import_locn, du_repn(enum("import_locn_implementation", "import_locn_interface", ["import_locn_import_by_ancestor", "import_locn_ancestor_int0_interface", "import_locn_ancestor_int0_implementation"],  no_c_j_cs_e))).
:- type_representation(import_or_use, du_repn(enum("import_decl", "use_decl", [],  no_c_j_cs_e))).
:- type_representation(imported_or_used, du_repn(enum("iou_imported", "iou_used", ["iou_used_and_imported"],  no_c_j_cs_e))).
:- type_representation(include_module_info, is_word_aligned_ptr).
:- type_representation(include_module_map, is_eqv_to(map(module_name, parse_tree.prog_item.include_module_info))).
:- type_representation(inst_ctor_all_defns, is_word_aligned_ptr).
:- type_representation(inst_ctor_defn_map, is_eqv_to(map(sym_name_arity, parse_tree.prog_item.inst_ctor_all_defns))).
:- type_representation(int_for_opt_item_block, is_eqv_to(parse_tree.prog_item.item_block(parse_tree.prog_item.int_for_opt_module_section))).
:- type_representation(int_for_opt_module_section, is_word_aligned_ptr).
:- type_representation(int_item_block, is_eqv_to(parse_tree.prog_item.item_block(parse_tree.prog_item.int_module_section))).
:- type_representation(item_clause_info, is_word_aligned_ptr).
:- type_representation(item_compiler_attributes, du_repn(notag("item_compiler_attributes", compiler_origin,  no_c_j_cs_e))).
:- type_representation(item_decl_pragma_info, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.decl_pragma))).
:- type_representation(item_exceptions, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_exceptions))).
:- type_representation(item_fim, is_word_aligned_ptr).
:- type_representation(item_finalise_info, is_word_aligned_ptr).
:- type_representation(item_foreign_enum_info, is_word_aligned_ptr).
:- type_representation(item_foreign_export_enum_info, is_word_aligned_ptr).
:- type_representation(item_foreign_proc, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_foreign_proc))).
:- type_representation(item_generated_pragma_info, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.generated_pragma))).
:- type_representation(item_impl_pragma_info, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.impl_pragma))).
:- type_representation(item_include, is_word_aligned_ptr).
:- type_representation(item_initialise_info, is_word_aligned_ptr).
:- type_representation(item_inst_defn_info, is_word_aligned_ptr).
:- type_representation(item_instance_info, is_word_aligned_ptr).
:- type_representation(item_mm_tabling, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_mm_tabling_info))).
:- type_representation(item_mode_decl_info, is_word_aligned_ptr).
:- type_representation(item_mode_defn_info, is_word_aligned_ptr).
:- type_representation(item_mutable_info, is_word_aligned_ptr).
:- type_representation(item_pred_decl_info, is_word_aligned_ptr).
:- type_representation(item_pred_marker, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_pred_marker))).
:- type_representation(item_promise_info, is_word_aligned_ptr).
:- type_representation(item_struct_reuse, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_structure_reuse))).
:- type_representation(item_struct_sharing, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_structure_sharing))).
:- type_representation(item_tabled, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_tabled))).
:- type_representation(item_termination, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_termination_info))).
:- type_representation(item_termination2, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_termination2_info))).
:- type_representation(item_trailing, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_trailing_info))).
:- type_representation(item_type_defn_info, is_eqv_to(parse_tree.prog_item.item_type_defn_info_general(type_defn))).
:- type_representation(item_type_defn_info_abstract, is_eqv_to(parse_tree.prog_item.item_type_defn_info_general(type_details_abstract))).
:- type_representation(item_type_defn_info_du, is_eqv_to(parse_tree.prog_item.item_type_defn_info_general(type_details_du))).
:- type_representation(item_type_defn_info_eqv, is_eqv_to(parse_tree.prog_item.item_type_defn_info_general(type_details_eqv))).
:- type_representation(item_type_defn_info_foreign, is_eqv_to(parse_tree.prog_item.item_type_defn_info_general(type_details_foreign_generic))).
:- type_representation(item_type_defn_info_solver, is_eqv_to(parse_tree.prog_item.item_type_defn_info_general(type_details_solver))).
:- type_representation(item_type_repn_info, is_eqv_to(parse_tree.prog_item.item_type_repn_info_general(parse_tree.prog_item.type_ctor_repn_info))).
:- type_representation(item_type_repn_info_eqv, is_eqv_to(parse_tree.prog_item.item_type_repn_info_general(mer_type))).
:- type_representation(item_type_spec, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_type_spec))).
:- type_representation(item_typeclass_info, is_word_aligned_ptr).
:- type_representation(item_unused_args, is_eqv_to(parse_tree.prog_item.item_pragma_info(parse_tree.prog_item.pragma_info_unused_args))).
:- type_representation(mode_ctor_all_defns, is_word_aligned_ptr).
:- type_representation(mode_ctor_defn_map, is_eqv_to(map(sym_name_arity, parse_tree.prog_item.mode_ctor_all_defns))).
:- type_representation(module_name_context, is_eqv_to(map(module_name, prog_context))).
:- type_representation(module_names_contexts, is_eqv_to(one_or_more_map(module_name, prog_context))).
:- type_representation(module_section, du_repn(enum("ms_interface", "ms_implementation", [],  no_c_j_cs_e))).
:- type_representation(mutable_attach_to_io_state, du_repn(enum("mutable_dont_attach_to_io_state", "mutable_attach_to_io_state", [],  no_c_j_cs_e))).
:- type_representation(mutable_constant, du_repn(enum("mutable_not_constant", "mutable_constant", [],  no_c_j_cs_e))).
:- type_representation(mutable_thread_local, du_repn(enum("mutable_not_thread_local", "mutable_thread_local", [],  no_c_j_cs_e))).
:- type_representation(mutable_trailed, du_repn(enum("mutable_untrailed", "mutable_trailed", [],  no_c_j_cs_e))).
:- type_representation(mutable_var_attributes, is_word_aligned_ptr).
:- type_representation(notag_repn, is_word_aligned_ptr).
:- type_representation(opt_item_block, is_eqv_to(parse_tree.prog_item.item_block(parse_tree.prog_item.opt_module_section))).
:- type_representation(opt_module_section, is_word_aligned_ptr).
:- type_representation(parse_tree_int, is_word_aligned_ptr).
:- type_representation(parse_tree_int0, is_word_aligned_ptr).
:- type_representation(parse_tree_int1, is_word_aligned_ptr).
:- type_representation(parse_tree_int2, is_word_aligned_ptr).
:- type_representation(parse_tree_int3, is_word_aligned_ptr).
:- type_representation(parse_tree_module_src, is_word_aligned_ptr).
:- type_representation(parse_tree_opt, is_word_aligned_ptr).
:- type_representation(parse_tree_plain_opt, is_word_aligned_ptr).
:- type_representation(parse_tree_src, is_word_aligned_ptr).
:- type_representation(parse_tree_trans_opt, is_word_aligned_ptr).
:- type_representation(pragma_info_exceptions, is_word_aligned_ptr).
:- type_representation(pragma_info_external_proc, is_word_aligned_ptr).
:- type_representation(pragma_info_fact_table, is_word_aligned_ptr).
:- type_representation(pragma_info_foreign_code, is_word_aligned_ptr).
:- type_representation(pragma_info_foreign_decl, is_word_aligned_ptr).
:- type_representation(pragma_info_foreign_proc, is_word_aligned_ptr).
:- type_representation(pragma_info_foreign_proc_export, is_word_aligned_ptr).
:- type_representation(pragma_info_mm_tabling_info, is_word_aligned_ptr).
:- type_representation(pragma_info_obsolete_pred, is_word_aligned_ptr).
:- type_representation(pragma_info_obsolete_proc, is_word_aligned_ptr).
:- type_representation(pragma_info_oisu, is_word_aligned_ptr).
:- type_representation(pragma_info_pred_marker, is_word_aligned_ptr).
:- type_representation(pragma_info_require_feature_set, du_repn(notag("pragma_info_require_feature_set", set(required_feature),  no_c_j_cs_e))).
:- type_representation(pragma_info_require_tail_rec, is_word_aligned_ptr).
:- type_representation(pragma_info_structure_reuse, is_word_aligned_ptr).
:- type_representation(pragma_info_structure_sharing, is_word_aligned_ptr).
:- type_representation(pragma_info_tabled, is_word_aligned_ptr).
:- type_representation(pragma_info_termination2_info, is_word_aligned_ptr).
:- type_representation(pragma_info_termination_info, is_word_aligned_ptr).
:- type_representation(pragma_info_trailing_info, is_word_aligned_ptr).
:- type_representation(pragma_info_type_spec, is_word_aligned_ptr).
:- type_representation(pragma_info_unused_args, is_word_aligned_ptr).
:- type_representation(pred_marker_pragma_kind, du_repn(enum("pmpk_inline", "pmpk_noinline", ["pmpk_promise_pure", "pmpk_promise_semipure", "pmpk_promise_eqv_clauses", "pmpk_terminates", "pmpk_does_not_terminate", "pmpk_mode_check_clauses"],  no_c_j_cs_e))).
:- type_representation(pred_name_arity, is_word_aligned_ptr).
:- type_representation(pred_name_arity_mpf, is_word_aligned_ptr).
:- type_representation(pred_name_arity_mpf_mmode, is_word_aligned_ptr).
:- type_representation(pred_name_arity_pf, is_word_aligned_ptr).
:- type_representation(pred_name_arity_pf_mn, is_word_aligned_ptr).
:- type_representation(pred_name_modes_pf, is_word_aligned_ptr).
:- type_representation(quant_type, du_repn(enum("quant_some", "quant_all", [],  no_c_j_cs_e))).
:- type_representation(quant_vars_kind, du_repn(enum("quant_ordinary_vars", "quant_state_vars", [],  no_c_j_cs_e))).
:- type_representation(raw_compilation_unit, is_word_aligned_ptr).
:- type_representation(raw_item_block, is_eqv_to(parse_tree.prog_item.item_block(parse_tree.prog_item.module_section))).
:- type_representation(read_why_int0, du_repn(enum("rwi0_section", "rwi0_opt", [],  no_c_j_cs_e))).
:- type_representation(read_why_int1, du_repn(enum("rwi1_int_import", "rwi1_int_use", ["rwi1_imp_import", "rwi1_imp_use", "rwi1_int_use_imp_import", "rwi1_opt"],  no_c_j_cs_e))).
:- type_representation(read_why_int2, du_repn(enum("rwi2_int_use", "rwi2_imp_use", ["rwi2_abstract", "rwi2_opt"],  no_c_j_cs_e))).
:- type_representation(read_why_int3, du_repn(enum("rwi3_direct_ancestor_import", "rwi3_direct_int_import", ["rwi3_direct_imp_import", "rwi3_direct_ancestor_use", "rwi3_direct_int_use", "rwi3_direct_imp_use", "rwi3_direct_int_use_imp_import", "rwi3_indirect_int_use", "rwi3_indirect_imp_use"],  no_c_j_cs_e))).
:- type_representation(section_import_and_or_use_map, is_eqv_to(map(module_name, parse_tree.prog_item.section_import_and_or_use))).
:- type_representation(src_item_block, is_eqv_to(parse_tree.prog_item.item_block(parse_tree.prog_item.src_module_section))).
:- type_representation(src_module_section, du_repn(enum("sms_interface", "sms_implementation", ["sms_impl_but_exported_to_submodules"],  no_c_j_cs_e))).
:- type_representation(type_ctor_all_defns, is_word_aligned_ptr).
:- type_representation(type_ctor_defn_map, is_eqv_to(map(type_ctor, parse_tree.prog_item.type_ctor_all_defns))).
:- type_representation(type_ctor_foreign_enum_map, is_eqv_to(map(type_ctor, parse_tree.prog_item.c_j_cs_e_enums))).
:- type_representation(type_ctor_maybe_defn, is_word_aligned_ptr).
:- type_representation(type_ctor_repn_map, is_eqv_to(map(type_ctor, parse_tree.prog_item.item_type_repn_info))).
