:- module (parse_tree.prog_data).
:- interface.
:- type any_inst_info.
:- type arg_mask.
:- type arg_num_bits.
:- type arg_only_offset.
:- type arg_pos_width.
:- type arg_reg_type_info.
:- type arg_shift.
:- type arg_width
	where	type_is_abstract_enum(2).
:- type arity.
:- type atomic_component_state.
:- type bound_inst.
:- type builtin_type.
:- type c_foreign_type.
:- type can_fail
	where	type_is_abstract_enum(1).
:- type cell_offset.
:- type class_id.
:- type class_interface.
:- type class_name.
:- type comparison_pred.
:- type cons_exist_constraints.
:- type cons_id.
:- type constructor.
:- type constructor_arg.
:- type csharp_foreign_type.
:- type ctor_field_name.
:- type determinism
	where	type_is_abstract_enum(3).
:- type double_word_kind
	where	type_is_abstract_enum(2).
:- type equality_pred.
:- type erlang_foreign_type.
:- type existq_tvars.
:- type fill_kind
	where	type_is_abstract_enum(3).
:- type foreign_type_assertion
	where	type_is_abstract_enum(2).
:- type foreign_type_assertions.
:- type from_to_insts.
:- type generic_language_foreign_type.
:- type goal_warning
	where	type_is_abstract_enum(2).
:- type ground_inst_info.
:- type has_main
	where	type_is_abstract_enum(1).
:- type head_inst_vars.
:- type ho_arg_reg
	where	type_is_abstract_enum(1).
:- type ho_groundness
	where	type_is_abstract_enum(1).
:- type ho_inst_info.
:- type init_pred.
:- type inst_ctor.
:- type inst_defn.
:- type inst_name.
:- type inst_result_contains_any
	where	type_is_abstract_enum(2).
:- type inst_result_contains_inst_names.
:- type inst_result_contains_inst_vars.
:- type inst_result_contains_types.
:- type inst_result_groundness
	where	type_is_abstract_enum(2).
:- type inst_result_type_ctor_propagated.
:- type inst_term.
:- type inst_test_results.
:- type inst_var.
:- type inst_var_sub.
:- type inst_var_type.
:- type inst_varset.
:- type instance_body.
:- type instance_method.
:- type instance_proc_def.
:- type int_type
	where	type_is_abstract_enum(4).
:- type is_live
	where	type_is_abstract_enum(1).
:- type is_solver_type
	where	type_is_abstract_enum(1).
:- type java_foreign_type.
:- type kind.
:- type kvar.
:- type kvar_type.
:- type lambda_eval_method.
:- type maybe_canonical.
:- type maybe_class_method
	where	type_is_abstract_enum(1).
:- type maybe_cons_exist_constraints.
:- type mer_inst.
:- type mer_mode.
:- type mer_type.
:- type merge_inst_info.
:- type mm_tabling_status
	where	type_is_abstract_enum(2).
:- type mode_ctor.
:- type mode_defn.
:- type mutable_pred_kind
	where	type_is_abstract_enum(4).
:- type need_qualifier
	where	type_is_abstract_enum(1).
:- type noncanonical.
:- type pf_sym_name_arity.
:- type pred_inst_info.
:- type prog_constraint.
:- type prog_constraints.
:- type prog_context.
:- type prog_fundep.
:- type prog_substitution.
:- type prog_term.
:- type prog_var.
:- type prog_var_renaming.
:- type prog_var_type.
:- type prog_vars.
:- type prog_varset.
:- type promise_type
	where	type_is_abstract_enum(2).
:- type purity
	where	type_is_abstract_enum(2).
:- type shrouded_pred_id.
:- type shrouded_pred_proc_id.
:- type shrouded_proc_id.
:- type soln_count
	where	type_is_abstract_enum(2).
:- type solver_type_details.
:- type solver_type_pred_kind
	where	type_is_abstract_enum(2).
:- type sym_name_arity.
:- type sym_name_specifier.
:- type tabling_aux_pred_kind
	where	type_is_abstract_enum(1).
:- type trace_compiletime.
:- type trace_expr(Base).
:- type trace_grade
	where	type_is_abstract_enum(4).
:- type trace_mutable_var.
:- type trace_op
	where	type_is_abstract_enum(1).
:- type trace_runtime.
:- type trace_trace_level
	where	type_is_abstract_enum(1).
:- type trailing_status
	where	type_is_abstract_enum(2).
:- type tsubst.
:- type tvar.
:- type tvar_kind_map.
:- type tvar_name_map.
:- type tvar_renaming.
:- type tvar_type.
:- type tvarset.
:- type type_and_mode.
:- type type_ctor.
:- type type_defn.
:- type type_details_abstract.
:- type type_details_du.
:- type type_details_eqv.
:- type type_details_foreign(LangType).
:- type type_details_foreign_generic.
:- type type_details_solver.
:- type type_param.
:- type type_term.
:- type unify_inst_info.
:- type unify_is_real
	where	type_is_abstract_enum(1).
:- type uniqueness
	where	type_is_abstract_enum(3).
:- type var_name_print
	where	type_is_abstract_enum(2).
:- abstract_inst((mer_inst_is_bound)).
:- type_representation((parse_tree.prog_data).any_inst_info, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).arg_mask, du_repn(notag("arg_mask", []))).
:- type_representation((parse_tree.prog_data).arg_num_bits, du_repn(notag("arg_num_bits", []))).
:- type_representation((parse_tree.prog_data).arg_only_offset, du_repn(notag("arg_only_offset", []))).
:- type_representation((parse_tree.prog_data).arg_shift, du_repn(notag("arg_shift", []))).
:- type_representation((parse_tree.prog_data).arg_width, du_repn(enum("aw_none", "aw_partial_word", ["aw_full_word", "aw_double_word"], []))).
:- type_representation((parse_tree.prog_data).arity, is_eqv_to(int)).
:- type_representation((parse_tree.prog_data).bound_inst, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).c_foreign_type, du_repn(notag("c_type", []))).
:- type_representation((parse_tree.prog_data).can_fail, du_repn(enum("can_fail", "cannot_fail", [], []))).
:- type_representation((parse_tree.prog_data).cell_offset, du_repn(notag("cell_offset", []))).
:- type_representation((parse_tree.prog_data).class_id, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).class_name, is_eqv_to(sym_name)).
:- type_representation((parse_tree.prog_data).comparison_pred, is_eqv_to(sym_name)).
:- type_representation((parse_tree.prog_data).cons_exist_constraints, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).constructor, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).constructor_arg, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).csharp_foreign_type, du_repn(notag("csharp_type", []))).
:- type_representation((parse_tree.prog_data).ctor_field_name, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).determinism, du_repn(enum("detism_det", "detism_semi", ["detism_multi", "detism_non", "detism_cc_multi", "detism_cc_non", "detism_erroneous", "detism_failure"], []))).
:- type_representation((parse_tree.prog_data).double_word_kind, du_repn(enum("dw_float", "dw_int64", ["dw_uint64"], []))).
:- type_representation((parse_tree.prog_data).equality_pred, is_eqv_to(sym_name)).
:- type_representation((parse_tree.prog_data).erlang_foreign_type, du_repn(direct_dummy("erlang_type", []))).
:- type_representation((parse_tree.prog_data).existq_tvars, is_eqv_to(list(parse_tree.prog_data.tvar))).
:- type_representation((parse_tree.prog_data).fill_kind, du_repn(enum("fill_enum", "fill_int8", ["fill_int16", "fill_int32", "fill_uint8", "fill_uint16", "fill_uint32", "fill_char21"], []))).
:- type_representation((parse_tree.prog_data).foreign_type_assertion, du_repn(enum("foreign_type_can_pass_as_mercury_type", "foreign_type_stable", ["foreign_type_word_aligned_pointer"], []))).
:- type_representation((parse_tree.prog_data).foreign_type_assertions, du_repn(notag("foreign_type_assertions", []))).
:- type_representation((parse_tree.prog_data).from_to_insts, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).goal_warning, du_repn(enum("goal_warning_singleton_vars", "goal_warning_occurs_check", ["goal_warning_non_tail_recursive_calls", "goal_warning_suspicious_recursion"], []))).
:- type_representation((parse_tree.prog_data).ground_inst_info, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).has_main, du_repn(enum("has_main", "no_main", [], []))).
:- type_representation((parse_tree.prog_data).head_inst_vars, is_eqv_to(map(parse_tree.prog_data.inst_var, parse_tree.prog_data.mer_inst))).
:- type_representation((parse_tree.prog_data).ho_arg_reg, du_repn(enum("ho_arg_reg_r", "ho_arg_reg_f", [], []))).
:- type_representation((parse_tree.prog_data).ho_groundness, du_repn(enum("ho_ground", "ho_any", [], []))).
:- type_representation((parse_tree.prog_data).init_pred, is_eqv_to(sym_name)).
:- type_representation((parse_tree.prog_data).inst_ctor, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).inst_defn, du_repn(notag("eqv_inst", []))).
:- type_representation((parse_tree.prog_data).inst_result_contains_any, du_repn(enum("inst_result_does_not_contain_any", "inst_result_does_contain_any", ["inst_result_contains_any_unknown"], []))).
:- type_representation((parse_tree.prog_data).inst_result_groundness, du_repn(enum("inst_result_is_not_ground", "inst_result_is_ground", ["inst_result_groundness_unknown"], []))).
:- type_representation((parse_tree.prog_data).inst_term, is_eqv_to(term(parse_tree.prog_data.inst_var_type))).
:- type_representation((parse_tree.prog_data).inst_var, is_eqv_to(var(parse_tree.prog_data.inst_var_type))).
:- type_representation((parse_tree.prog_data).inst_var_sub, is_eqv_to(map(parse_tree.prog_data.inst_var, parse_tree.prog_data.mer_inst))).
:- type_representation((parse_tree.prog_data).inst_var_type, du_repn(direct_dummy("inst_var_type", []))).
:- type_representation((parse_tree.prog_data).inst_varset, is_eqv_to(varset(parse_tree.prog_data.inst_var_type))).
:- type_representation((parse_tree.prog_data).instance_method, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).int_type, du_repn(enum("int_type_int", "int_type_uint", ["int_type_int8", "int_type_uint8", "int_type_int16", "int_type_uint16", "int_type_int32", "int_type_uint32", "int_type_int64", "int_type_uint64"], []))).
:- type_representation((parse_tree.prog_data).is_live, du_repn(enum("is_live", "is_dead", [], []))).
:- type_representation((parse_tree.prog_data).is_solver_type, du_repn(enum("non_solver_type", "solver_type", [], []))).
:- type_representation((parse_tree.prog_data).java_foreign_type, du_repn(notag("java_type", []))).
:- type_representation((parse_tree.prog_data).kvar, is_eqv_to(var(parse_tree.prog_data.kvar_type))).
:- type_representation((parse_tree.prog_data).kvar_type, du_repn(direct_dummy("kind_var", []))).
:- type_representation((parse_tree.prog_data).lambda_eval_method, du_repn(direct_dummy("lambda_normal", []))).
:- type_representation((parse_tree.prog_data).maybe_class_method, du_repn(enum("is_not_a_class_method", "is_a_class_method", [], []))).
:- type_representation((parse_tree.prog_data).merge_inst_info, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).mm_tabling_status, du_repn(enum("mm_tabled_may_call", "mm_tabled_will_not_call", ["mm_tabled_conditional"], []))).
:- type_representation((parse_tree.prog_data).mode_ctor, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).mode_defn, du_repn(notag("eqv_mode", []))).
:- type_representation((parse_tree.prog_data).mutable_pred_kind, du_repn(enum("mutable_pred_std_get", "mutable_pred_std_set", ["mutable_pred_io_get", "mutable_pred_io_set", "mutable_pred_constant_get", "mutable_pred_constant_secret_set", "mutable_pred_unsafe_get", "mutable_pred_unsafe_set", "mutable_pred_lock", "mutable_pred_unlock", "mutable_pred_pre_init", "mutable_pred_init"], []))).
:- type_representation((parse_tree.prog_data).need_qualifier, du_repn(enum("must_be_qualified", "may_be_unqualified", [], []))).
:- type_representation((parse_tree.prog_data).pf_sym_name_arity, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).pred_inst_info, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).prog_constraint, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).prog_constraints, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).prog_context, is_eqv_to(term.context)).
:- type_representation((parse_tree.prog_data).prog_fundep, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).prog_substitution, is_eqv_to(substitution(parse_tree.prog_data.prog_var_type))).
:- type_representation((parse_tree.prog_data).prog_term, is_eqv_to(term(parse_tree.prog_data.prog_var_type))).
:- type_representation((parse_tree.prog_data).prog_var, is_eqv_to(var(parse_tree.prog_data.prog_var_type))).
:- type_representation((parse_tree.prog_data).prog_var_renaming, is_eqv_to(map(parse_tree.prog_data.prog_var, parse_tree.prog_data.prog_var))).
:- type_representation((parse_tree.prog_data).prog_var_type, du_repn(direct_dummy("prog_var_type", []))).
:- type_representation((parse_tree.prog_data).prog_vars, is_eqv_to(list(parse_tree.prog_data.prog_var))).
:- type_representation((parse_tree.prog_data).prog_varset, is_eqv_to(varset(parse_tree.prog_data.prog_var_type))).
:- type_representation((parse_tree.prog_data).promise_type, du_repn(enum("promise_type_exclusive", "promise_type_exhaustive", ["promise_type_exclusive_exhaustive", "promise_type_true"], []))).
:- type_representation((parse_tree.prog_data).purity, du_repn(enum("purity_pure", "purity_semipure", ["purity_impure"], []))).
:- type_representation((parse_tree.prog_data).shrouded_pred_id, du_repn(notag("shrouded_pred_id", []))).
:- type_representation((parse_tree.prog_data).shrouded_pred_proc_id, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).shrouded_proc_id, du_repn(notag("shrouded_proc_id", []))).
:- type_representation((parse_tree.prog_data).soln_count, du_repn(enum("at_most_zero", "at_most_one", ["at_most_many_cc", "at_most_many"], []))).
:- type_representation((parse_tree.prog_data).solver_type_details, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).solver_type_pred_kind, du_repn(enum("solver_type_to_ground_pred", "solver_type_to_any_pred", ["solver_type_from_ground_pred", "solver_type_from_any_pred"], []))).
:- type_representation((parse_tree.prog_data).sym_name_arity, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).tabling_aux_pred_kind, du_repn(enum("tabling_aux_pred_stats", "tabling_aux_pred_reset", [], []))).
:- type_representation((parse_tree.prog_data).trace_grade, du_repn(enum("trace_grade_debug", "trace_grade_ssdebug", ["trace_grade_prof", "trace_grade_profdeep", "trace_grade_par", "trace_grade_trail", "trace_grade_rbmm", "trace_grade_llds", "trace_grade_mlds", "trace_grade_c", "trace_grade_csharp", "trace_grade_java", "trace_grade_erlang"], []))).
:- type_representation((parse_tree.prog_data).trace_mutable_var, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).trace_op, du_repn(enum("trace_or", "trace_and", [], []))).
:- type_representation((parse_tree.prog_data).trace_runtime, du_repn(notag("trace_envvar", []))).
:- type_representation((parse_tree.prog_data).trace_trace_level, du_repn(enum("trace_level_shallow", "trace_level_deep", [], []))).
:- type_representation((parse_tree.prog_data).trailing_status, du_repn(enum("trail_may_modify", "trail_will_not_modify", ["trail_conditional"], []))).
:- type_representation((parse_tree.prog_data).tsubst, is_eqv_to(map(parse_tree.prog_data.tvar, parse_tree.prog_data.mer_type))).
:- type_representation((parse_tree.prog_data).tvar, is_eqv_to(var(parse_tree.prog_data.tvar_type))).
:- type_representation((parse_tree.prog_data).tvar_kind_map, is_eqv_to(map(parse_tree.prog_data.tvar, parse_tree.prog_data.kind))).
:- type_representation((parse_tree.prog_data).tvar_name_map, is_eqv_to(map(string, parse_tree.prog_data.tvar))).
:- type_representation((parse_tree.prog_data).tvar_renaming, is_eqv_to(map(parse_tree.prog_data.tvar, parse_tree.prog_data.tvar))).
:- type_representation((parse_tree.prog_data).tvar_type, du_repn(direct_dummy("type_var", []))).
:- type_representation((parse_tree.prog_data).tvarset, is_eqv_to(varset(parse_tree.prog_data.tvar_type))).
:- type_representation((parse_tree.prog_data).type_ctor, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).type_details_du, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).type_details_eqv, du_repn(notag("type_details_eqv", []))).
:- type_representation((parse_tree.prog_data).type_details_foreign_generic, is_eqv_to(parse_tree.prog_data.type_details_foreign(parse_tree.prog_data.generic_language_foreign_type))).
:- type_representation((parse_tree.prog_data).type_details_solver, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).type_param, is_eqv_to(parse_tree.prog_data.tvar)).
:- type_representation((parse_tree.prog_data).type_term, is_eqv_to(term(parse_tree.prog_data.tvar_type))).
:- type_representation((parse_tree.prog_data).unify_inst_info, is_word_aligned_ptr).
:- type_representation((parse_tree.prog_data).unify_is_real, du_repn(enum("real_unify", "fake_unify", [], []))).
:- type_representation((parse_tree.prog_data).uniqueness, du_repn(enum("shared", "unique", ["mostly_unique", "clobbered", "mostly_clobbered"], []))).
:- type_representation((parse_tree.prog_data).var_name_print, du_repn(enum("print_name_only", "print_name_and_num", ["print_num_only"], []))).
