:- module (check_hlds.typecheck_errors).
:- interface.
:- type actual_expected_types
    --->    actual_expected_types(((check_hlds.typecheck_errors).actual_type) :: list.list(parse_tree.error_util.format_component), ((check_hlds.typecheck_errors).expected_type) :: list.list(parse_tree.error_util.format_component)).
:- type arg_vector_kind
    --->    arg_vector_clause_head 
    ;       arg_vector_plain_call_pred_id(hlds.hlds_pred.pred_id)
    ;       arg_vector_plain_pred_call(parse_tree.prog_data.sym_name_pred_form_arity)
    ;       arg_vector_generic_call(hlds.hlds_pred.generic_call_id)
    ;       arg_vector_foreign_proc_call(hlds.hlds_pred.pred_id)
    ;       arg_vector_event(string).
:- type arg_vector_type_error
    --->    arg_vector_type_error(int, parse_tree.prog_data.prog_var, check_hlds.typecheck_errors.actual_expected_types).
:- type cons_error
    --->    foreign_type_constructor(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn)
    ;       abstract_imported_type 
    ;       invalid_field_update(mdbcomp.sym_name.sym_name, hlds.hlds_cons.hlds_ctor_field_defn, parse_tree.prog_data.tvarset, list.list(parse_tree.prog_data.tvar))
    ;       new_on_non_existential_type(parse_tree.prog_data.type_ctor).
:- type spec_and_maybe_actual_expected
    --->    spec_and_maybe_actual_expected(parse_tree.error_util.error_spec, maybe.maybe(check_hlds.typecheck_errors.actual_expected_types)).
:- type type_error_goal_context
    --->    type_error_in_var_vector(((check_hlds.typecheck_errors).teiav_kind) :: check_hlds.typecheck_errors.var_vector_kind, ((check_hlds.typecheck_errors).teiav_arg_num) :: int)
    ;       type_error_in_unify(((check_hlds.typecheck_errors).teiu_unify_context) :: hlds.hlds_goal.unify_context)
    ;       type_error_in_atomic_inner .
:- type var_vector_kind
    --->    var_vector_args(check_hlds.typecheck_errors.arg_vector_kind)
    ;       var_vector_cond_quant 
    ;       var_vector_exist_quant 
    ;       var_vector_promise_solutions 
    ;       var_vector_loop_control 
    ;       var_vector_try_io 
    ;       var_vector_atomic_output 
    ;       var_vector_atomic_outer .
