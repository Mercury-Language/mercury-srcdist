:- module (ml_backend.mlds_to_c_util).
:- interface.
:- import_module bool.
:- import_module io.
:- import_module libs.
:- import_module parse_tree.
:- import_module (libs.globals).
:- import_module (ml_backend.mlds).
:- import_module (ml_backend.mlds_to_target_util).
:- import_module (parse_tree.prog_data).
:- type decl_or_defn
    --->    forward_decl 
    ;       definition .
:- type mlds_to_c_opts
    --->    mlds_to_c_opts(((ml_backend.mlds_to_c_util).m2co_all_globals) :: libs.globals.globals, ((ml_backend.mlds_to_c_util).m2co_source_filename) :: string, ((ml_backend.mlds_to_c_util).m2co_line_numbers) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_foreign_line_numbers) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_auto_comments) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_highlevel_data) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_single_prec_float) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_profile_calls) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_profile_memory) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_profile_time) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_need_to_init) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_target) :: libs.globals.compilation_target, ((ml_backend.mlds_to_c_util).m2co_gc_method) :: libs.globals.gc_method, ((ml_backend.mlds_to_c_util).m2co_std_func_decl) :: bool.bool, ((ml_backend.mlds_to_c_util).m2co_break_context) :: ml_backend.mlds_to_target_util.break_context).
