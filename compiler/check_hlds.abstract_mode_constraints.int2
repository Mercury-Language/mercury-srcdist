:- module (check_hlds.abstract_mode_constraints).
:- interface.
:- import_module bool.
:- import_module hlds.
:- import_module io.
:- import_module libs.
:- import_module list.
:- import_module map.
:- import_module multi_map.
:- import_module parse_tree.
:- import_module set.
:- import_module term.
:- import_module varset.
:- import_module (hlds.hlds_pred).
:- import_module (libs.globals).
:- import_module (parse_tree.prog_data).
:- type mc_ann_constraint
    --->    mc_ann_constraint(check_hlds.abstract_mode_constraints.mc_constraint, check_hlds.abstract_mode_constraints.mc_annotation).
:- type mc_annotation
    --->    mc_annotation(((check_hlds.abstract_mode_constraints).context) :: parse_tree.prog_data.prog_context).
:- type mc_bindings == map.map(check_hlds.abstract_mode_constraints.mc_var, bool.bool).
:- type mc_constraint
    --->    mc_atomic(check_hlds.abstract_mode_constraints.var_constraint)
    ;       mc_disj(list.list(check_hlds.abstract_mode_constraints.mc_constraint))
    ;       mc_conj(list.list(check_hlds.abstract_mode_constraints.mc_constraint)).
:- type mc_type.
:- type mc_var == term.var(check_hlds.abstract_mode_constraints.mc_type).
:- type mc_varset == varset.varset(check_hlds.abstract_mode_constraints.mc_type).
:- type pred_p_c_constraints
    --->    pred_p_c_constraints(((check_hlds.abstract_mode_constraints).ppcc_procspec_constraints) :: multi_map.multi_map(hlds.hlds_pred.proc_id, check_hlds.abstract_mode_constraints.mc_ann_constraint), ((check_hlds.abstract_mode_constraints).ppcc_allproc_constraints) :: list.list(check_hlds.abstract_mode_constraints.mc_ann_constraint), ((check_hlds.abstract_mode_constraints).ppcc_mode_infer_callees) :: set.set(hlds.hlds_pred.pred_id)).
:- type var_constraint == check_hlds.abstract_mode_constraints.var_constraint(check_hlds.abstract_mode_constraints.mc_type).
:- type var_constraint(T)
    --->    equiv_bool(term.var(T), bool.bool)
    ;       equivalent(list.list(term.var(T)))
    ;       implies(term.var(T), term.var(T))
    ;       equiv_disj(term.var(T), list.list(term.var(T)))
    ;       at_most_one(list.list(term.var(T)))
    ;       exactly_one(list.list(term.var(T))).
:- implementation.
:- type mc_type
    --->    mc_type .
