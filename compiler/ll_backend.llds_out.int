:- module (ll_backend.llds_out).
:- interface.
:- import_module bool.
:- import_module io.
:- import_module list.
:- import_module map.
:- import_module (hlds.hlds_llds).
:- import_module (libs.globals).
:- import_module (libs.trace_params).
:- import_module (ll_backend.layout).
:- import_module (ll_backend.llds).
:- import_module (mdbcomp.prim_data).
:- import_module (parse_tree.prog_data).
:- type decl_id
	--->	decl_common_type(ll_backend.llds.type_num)
	;	decl_scalar_common_array(ll_backend.llds.type_num)
	;	decl_float_label(string)
	;	decl_code_addr(ll_backend.llds.code_addr)
	;	decl_data_addr(ll_backend.llds.data_addr)
	;	decl_foreign_proc_struct(string)
	;	decl_c_global_var(ll_backend.llds.c_global_var_ref)
	;	decl_type_info_like_struct(int)
	;	decl_typeclass_constraint_struct(int).
:- type decl_set.
:- type linkage
	--->	extern 
	;	static .
:- type llds_out_info
	--->	llds_out_info(((ll_backend.llds_out).lout_mangled_module_name) :: string, ((ll_backend.llds_out).lout_internal_label_to_layout) :: map.map(ll_backend.llds.label, ll_backend.layout.layout_slot_name), ((ll_backend.llds_out).lout_entry_label_to_layout) :: map.map(ll_backend.llds.label, ll_backend.llds.data_addr), ((ll_backend.llds_out).lout_auto_comments) :: bool.bool, ((ll_backend.llds_out).lout_line_numbers) :: bool.bool, ((ll_backend.llds_out).lout_emit_c_loops) :: bool.bool, ((ll_backend.llds_out).lout_generate_bytecode) :: bool.bool, ((ll_backend.llds_out).lout_local_thread_engine_base) :: bool.bool, ((ll_backend.llds_out).lout_profile_calls) :: bool.bool, ((ll_backend.llds_out).lout_profile_time) :: bool.bool, ((ll_backend.llds_out).lout_profile_memory) :: bool.bool, ((ll_backend.llds_out).lout_profile_deep) :: bool.bool, ((ll_backend.llds_out).lout_unboxed_float) :: bool.bool, ((ll_backend.llds_out).lout_static_ground_floats) :: bool.bool, ((ll_backend.llds_out).lout_use_macro_for_redo_fail) :: bool.bool, ((ll_backend.llds_out).lout_trace_level) :: libs.trace_params.trace_level, ((ll_backend.llds_out).lout_globals) :: libs.globals.globals).
:- func c_data_const_string(libs.globals.globals, bool.bool) = string.
:- func c_data_linkage_string(ll_backend.llds_out.linkage, bool.bool) = string.
:- pred decl_set_init(ll_backend.llds_out.decl_set).
:- mode decl_set_init((builtin.out)) is det.
:- pred decl_set_insert(ll_backend.llds_out.decl_id, ll_backend.llds_out.decl_set, ll_backend.llds_out.decl_set).
:- mode decl_set_insert((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred decl_set_is_member(ll_backend.llds_out.decl_id, ll_backend.llds_out.decl_set).
:- mode decl_set_is_member((builtin.in), (builtin.in)) is semidet.
:- func explain_stack_slots(hlds.hlds_llds.stack_slots, parse_tree.prog_data.prog_varset) = string.
:- func ho_call_variant_to_string(ll_backend.llds.ho_call_variant) = string.
:- func label_to_c_string(ll_backend.llds.label, bool.bool) = string.
:- func lval_to_string(ll_backend.llds.lval) = string is semidet.
:- pred output_code_addr(ll_backend.llds.code_addr, io.io, io.io).
:- mode output_code_addr((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_data_addr(ll_backend.llds.data_addr, io.io, io.io).
:- mode output_data_addr((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_debug_instruction(ll_backend.llds_out.llds_out_info, ll_backend.llds.instr, io.io, io.io).
:- mode output_debug_instruction((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_debug_instruction_and_comment(ll_backend.llds_out.llds_out_info, ll_backend.llds.instr, string, io.io, io.io).
:- mode output_debug_instruction_and_comment((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_label(ll_backend.llds.label, io.io, io.io).
:- mode output_label((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_label(ll_backend.llds.label, bool.bool, io.io, io.io).
:- mode output_label((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_llds(libs.globals.globals, ll_backend.llds.c_file, io.io, io.io).
:- mode output_llds((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_record_code_addr_decls(ll_backend.llds_out.llds_out_info, ll_backend.llds.code_addr, ll_backend.llds_out.decl_set, ll_backend.llds_out.decl_set, io.io, io.io).
:- mode output_record_code_addr_decls((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred output_record_data_addr_decls(ll_backend.llds_out.llds_out_info, ll_backend.llds.data_addr, ll_backend.llds_out.decl_set, ll_backend.llds_out.decl_set, io.io, io.io).
:- mode output_record_data_addr_decls((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred output_record_data_addr_decls_format(ll_backend.llds_out.llds_out_info, ll_backend.llds.data_addr, string, string, int, int, ll_backend.llds_out.decl_set, ll_backend.llds_out.decl_set, io.io, io.io).
:- mode output_record_data_addr_decls_format((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred output_record_data_addrs_decls(ll_backend.llds_out.llds_out_info, list.list(ll_backend.llds.data_addr), string, string, int, int, ll_backend.llds_out.decl_set, ll_backend.llds_out.decl_set, io.io, io.io).
:- mode output_record_data_addrs_decls((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred output_record_rval_decls(ll_backend.llds_out.llds_out_info, ll_backend.llds.rval, ll_backend.llds_out.decl_set, ll_backend.llds_out.decl_set, io.io, io.io).
:- mode output_record_rval_decls((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred output_rval(ll_backend.llds_out.llds_out_info, ll_backend.llds.rval, io.io, io.io).
:- mode output_rval((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- func proc_tabling_info_var_name(mdbcomp.prim_data.proc_label) = string.
:- func reg_to_string(ll_backend.llds.reg_type, int) = string.
:- implementation.
:- import_module set_tree234.
:- type decl_set == set_tree234.set_tree234(ll_backend.llds_out.decl_id).
