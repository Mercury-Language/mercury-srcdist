:- module (parse_tree.equiv_type).
:- interface.
:- use_module bool.
:- use_module list.
:- use_module map.
:- use_module maybe.
:- use_module one_or_more.
:- use_module recompilation.
:- use_module (parse_tree.error_util).
:- use_module (parse_tree.prog_data).
:- use_module (parse_tree.prog_data_event).
:- use_module (parse_tree.prog_data_used_modules).
:- use_module (parse_tree.prog_item).
:- type eqv_type_body
    --->    eqv_type_body(parse_tree.prog_data.tvarset, list.list(parse_tree.prog_data.type_param), parse_tree.prog_data.mer_type).
:- type type_eqv_map == map.map(parse_tree.prog_data.type_ctor, parse_tree.equiv_type.eqv_type_body).
:- pred expand_eqv_types_insts(parse_tree.prog_item.aug_compilation_unit, parse_tree.prog_item.aug_compilation_unit, parse_tree.prog_data_event.event_spec_map, parse_tree.prog_data_event.event_spec_map, parse_tree.equiv_type.type_eqv_map, parse_tree.prog_data_used_modules.used_modules, maybe.maybe(recompilation.recompilation_info), maybe.maybe(recompilation.recompilation_info), list.list(parse_tree.error_util.error_spec)).
:- mode expand_eqv_types_insts((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred replace_in_ctors(parse_tree.equiv_type.type_eqv_map, one_or_more.one_or_more(parse_tree.prog_data.constructor), one_or_more.one_or_more(parse_tree.prog_data.constructor), parse_tree.prog_data.tvarset, parse_tree.prog_data.tvarset, recompilation.eqv_expanded_info, recompilation.eqv_expanded_info).
:- mode replace_in_ctors((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred replace_in_prog_constraint_list(parse_tree.equiv_type.type_eqv_map, list.list(parse_tree.prog_data.prog_constraint), list.list(parse_tree.prog_data.prog_constraint), parse_tree.prog_data.tvarset, parse_tree.prog_data.tvarset, recompilation.eqv_expanded_info, recompilation.eqv_expanded_info).
:- mode replace_in_prog_constraint_list((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred replace_in_prog_constraints(parse_tree.equiv_type.type_eqv_map, parse_tree.prog_data.prog_constraints, parse_tree.prog_data.prog_constraints, parse_tree.prog_data.tvarset, parse_tree.prog_data.tvarset, recompilation.eqv_expanded_info, recompilation.eqv_expanded_info).
:- mode replace_in_prog_constraints((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred replace_in_type(parse_tree.equiv_type.type_eqv_map, parse_tree.prog_data.mer_type, parse_tree.prog_data.mer_type, bool.bool, parse_tree.prog_data.tvarset, parse_tree.prog_data.tvarset, recompilation.eqv_expanded_info, recompilation.eqv_expanded_info).
:- mode replace_in_type((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred replace_in_type_list(parse_tree.equiv_type.type_eqv_map, list.list(parse_tree.prog_data.mer_type), list.list(parse_tree.prog_data.mer_type), bool.bool, parse_tree.prog_data.tvarset, parse_tree.prog_data.tvarset, recompilation.eqv_expanded_info, recompilation.eqv_expanded_info).
:- mode replace_in_type_list((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
