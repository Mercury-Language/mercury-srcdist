:- module (ml_backend.mlds).
:- interface.
:- import_module bool.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module pair.
:- import_module set.
:- import_module (backend_libs.builtin_ops).
:- import_module (backend_libs.foreign).
:- import_module (backend_libs.rtti).
:- import_module (hlds.code_model).
:- import_module (hlds.hlds_data).
:- import_module (hlds.hlds_module).
:- import_module (hlds.hlds_pred).
:- import_module (libs.globals).
:- import_module (mdbcomp.prim_data).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_foreign).
:- import_module (parse_tree.prog_type).
:- type abstractness
	--->	concrete 
	;	abstract .
:- type access
	--->	public 
	;	protected 
	;	private 
	;	default 
	;	local .
:- type call_kind
	--->	no_return_call 
	;	tail_call 
	;	ordinary_call .
:- type constness
	--->	modifiable 
	;	const .
:- type ctor_name == ((ml_backend.mlds).mlds_qualified_ctor_id).
:- type finality
	--->	overridable 
	;	final .
:- type foreign_import_name
	--->	il_assembly_name(((ml_backend.mlds).mlds_module_name)).
:- type global_var_ref
	--->	env_var_ref(string).
:- type mercury_mlds_import_type
	--->	user_visible_interface 
	;	compiler_visible_interface .
:- type mercury_module_name == ((mdbcomp.prim_data).module_name).
:- type mlds
	--->	mlds(((ml_backend.mlds).name) :: ((ml_backend.mlds).mercury_module_name), ((ml_backend.mlds).foreign_code_map) :: (map.map(((libs.globals).foreign_language), ((ml_backend.mlds).mlds_foreign_code))), ((ml_backend.mlds).toplevel_imports) :: ((ml_backend.mlds).mlds_imports), ((ml_backend.mlds).defns) :: ((ml_backend.mlds).mlds_defns), ((ml_backend.mlds).init_preds) :: (list.list(string)), ((ml_backend.mlds).final_preds) :: (list.list(string))).
:- type mlds_arg_types == (list.list(((ml_backend.mlds).mlds_type))).
:- type mlds_argument
	--->	mlds_argument(((ml_backend.mlds).mlds_entity_name), ((ml_backend.mlds).mlds_type), ((ml_backend.mlds).mlds_gc_statement)).
:- type mlds_arguments == (list.list(((ml_backend.mlds).mlds_argument))).
:- type mlds_atomic_statement
	--->	comment(string)
	;	assign(((ml_backend.mlds).mlds_lval), ((ml_backend.mlds).mlds_rval))
	;	delete_object(((ml_backend.mlds).mlds_lval))
	;	new_object(((ml_backend.mlds).mlds_lval), (maybe.maybe(((ml_backend.mlds).mlds_tag))), (bool.bool), ((ml_backend.mlds).mlds_type), (maybe.maybe(((ml_backend.mlds).mlds_rval))), (maybe.maybe(((ml_backend.mlds).ctor_name))), (list.list(((ml_backend.mlds).mlds_rval))), (list.list(((ml_backend.mlds).mlds_type))), ((hlds.hlds_data).may_use_atomic_alloc))
	;	gc_check 
	;	mark_hp(((ml_backend.mlds).mlds_lval))
	;	restore_hp(((ml_backend.mlds).mlds_rval))
	;	trail_op(((ml_backend.mlds).trail_op))
	;	inline_target_code(((ml_backend.mlds).mlds_target_lang), (list.list(((ml_backend.mlds).target_code_component))))
	;	outline_foreign_proc(((libs.globals).foreign_language), (list.list(((ml_backend.mlds).outline_arg))), (list.list(((ml_backend.mlds).mlds_lval))), string).
:- type mlds_attribute
	--->	custom(((ml_backend.mlds).mlds_type)).
:- type mlds_case_match_cond
	--->	match_value(((ml_backend.mlds).mlds_rval))
	;	match_range(((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).mlds_rval)).
:- type mlds_case_match_conds == (list.list(((ml_backend.mlds).mlds_case_match_cond))).
:- type mlds_class == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_class_name))).
:- type mlds_class_defn
	--->	mlds_class_defn(((ml_backend.mlds).kind) :: ((ml_backend.mlds).mlds_class_kind), ((ml_backend.mlds).imports) :: ((ml_backend.mlds).mlds_imports), ((ml_backend.mlds).inherits) :: (list.list(((ml_backend.mlds).mlds_class_id))), ((ml_backend.mlds).implements) :: (list.list(((ml_backend.mlds).mlds_interface_id))), ((ml_backend.mlds).ctors) :: ((ml_backend.mlds).mlds_defns), ((ml_backend.mlds).members) :: ((ml_backend.mlds).mlds_defns)).
:- type mlds_class_id == ((ml_backend.mlds).mlds_type).
:- type mlds_class_kind
	--->	mlds_class 
	;	mlds_package 
	;	mlds_interface 
	;	mlds_struct 
	;	mlds_enum .
:- type mlds_class_name == string.
:- type mlds_code_addr
	--->	code_addr_proc(((ml_backend.mlds).mlds_qualified_proc_label), ((ml_backend.mlds).mlds_func_signature))
	;	code_addr_internal(((ml_backend.mlds).mlds_qualified_proc_label), ((ml_backend.mlds).mlds_func_sequence_num), ((ml_backend.mlds).mlds_func_signature)).
:- type mlds_context.
:- type mlds_ctor_id
	--->	ctor_id(((ml_backend.mlds).mlds_class_name), ((parse_tree.prog_data).arity)).
:- type mlds_data == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_data_name))).
:- type mlds_data_addr
	--->	data_addr(((ml_backend.mlds).mlds_module_name), ((ml_backend.mlds).mlds_data_name)).
:- type mlds_data_name
	--->	var(((ml_backend.mlds).mlds_var_name))
	;	mlds_common(int)
	;	mlds_rtti(((backend_libs.rtti).rtti_id))
	;	mlds_module_layout 
	;	mlds_proc_layout(((ml_backend.mlds).mlds_proc_label))
	;	mlds_internal_layout(((ml_backend.mlds).mlds_proc_label), ((ml_backend.mlds).mlds_func_sequence_num))
	;	mlds_tabling_ref(((ml_backend.mlds).mlds_proc_label), ((backend_libs.rtti).proc_tabling_struct_id)).
:- type mlds_decl_flags.
:- type mlds_defn
	--->	mlds_defn(((ml_backend.mlds).mlds_entity_name) :: ((ml_backend.mlds).mlds_entity_name), ((ml_backend.mlds).mlds_context) :: ((ml_backend.mlds).mlds_context), ((ml_backend.mlds).mlds_decl_flags) :: ((ml_backend.mlds).mlds_decl_flags), ((ml_backend.mlds).mlds_entity_defn) :: ((ml_backend.mlds).mlds_entity_defn)).
:- type mlds_defns == (list.list(((ml_backend.mlds).mlds_defn))).
:- type mlds_entity_defn
	--->	mlds_data(((ml_backend.mlds).mlds_type), ((ml_backend.mlds).mlds_initializer), ((ml_backend.mlds).mlds_gc_statement))
	;	mlds_function((maybe.maybe(((hlds.hlds_pred).pred_proc_id))), ((ml_backend.mlds).mlds_func_params), ((ml_backend.mlds).mlds_function_body), (list.list(((ml_backend.mlds).mlds_attribute))), (set.set(string)))
	;	mlds_class(((ml_backend.mlds).mlds_class_defn)).
:- type mlds_entity_name
	--->	entity_type(((ml_backend.mlds).mlds_class_name), ((parse_tree.prog_data).arity))
	;	entity_data(((ml_backend.mlds).mlds_data_name))
	;	entity_function(((ml_backend.mlds).ef_pred_label) :: ((ml_backend.mlds).mlds_pred_label), ((ml_backend.mlds).ef_proc_id) :: ((hlds.hlds_pred).proc_id), ((ml_backend.mlds).ef_maybe_func_seq) :: (maybe.maybe(((ml_backend.mlds).mlds_func_sequence_num))), ((ml_backend.mlds).ef_pred_id) :: ((hlds.hlds_pred).pred_id))
	;	entity_export(string).
:- type mlds_exception_handler
	--->	handler((maybe.maybe(((ml_backend.mlds).mlds_type))), (maybe.maybe(string))).
:- type mlds_field_id
	--->	offset(((ml_backend.mlds).mlds_rval))
	;	named_field(((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_field_name))), ((ml_backend.mlds).mlds_type)).
:- type mlds_field_name == string.
:- type mlds_foreign_code
	--->	mlds_foreign_code(((parse_tree.prog_foreign).foreign_decl_info), ((parse_tree.prog_data).foreign_import_module_info_list), (list.list(((parse_tree.prog_foreign).user_foreign_code))), (list.list(((ml_backend.mlds).mlds_pragma_export)))).
:- type mlds_func_params
	--->	mlds_func_params(((ml_backend.mlds).mlds_arguments), ((ml_backend.mlds).mlds_return_types)).
:- type mlds_func_sequence_num == int.
:- type mlds_func_signature
	--->	mlds_func_signature(((ml_backend.mlds).mlds_arg_types), ((ml_backend.mlds).mlds_return_types)).
:- type mlds_function_body
	--->	body_defined_here(((ml_backend.mlds).statement))
	;	body_external .
:- type mlds_gc_statement
	--->	gc_trace_code(((ml_backend.mlds).statement))
	;	gc_initialiser(((ml_backend.mlds).statement))
	;	gc_no_stmt .
:- type mlds_goto_target
	--->	label(((ml_backend.mlds).mlds_label))
	;	break 
	;	continue .
:- type mlds_import
	--->	mercury_import(((ml_backend.mlds).mercury_mlds_import_type) :: ((ml_backend.mlds).mercury_mlds_import_type), ((ml_backend.mlds).import_name) :: ((ml_backend.mlds).mlds_module_name))
	;	foreign_import(((ml_backend.mlds).foreign_import_name) :: ((ml_backend.mlds).foreign_import_name)).
:- type mlds_imports == (list.list(((ml_backend.mlds).mlds_import))).
:- type mlds_initializer
	--->	init_obj(((ml_backend.mlds).mlds_rval))
	;	init_struct(((ml_backend.mlds).mlds_type), (list.list(((ml_backend.mlds).mlds_initializer))))
	;	init_array((list.list(((ml_backend.mlds).mlds_initializer))))
	;	no_initializer .
:- type mlds_interface_id == ((ml_backend.mlds).mlds_type).
:- type mlds_label == string.
:- type mlds_lval
	--->	field(((ml_backend.mlds).field_tag) :: (maybe.maybe(((ml_backend.mlds).mlds_tag))), ((ml_backend.mlds).field_addr) :: ((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).field_field_id) :: ((ml_backend.mlds).mlds_field_id), ((ml_backend.mlds).field_type) :: ((ml_backend.mlds).mlds_type), ((ml_backend.mlds).field_ptr_type) :: ((ml_backend.mlds).mlds_type))
	;	mem_ref(((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).mlds_type))
	;	global_var_ref(((ml_backend.mlds).global_var_ref))
	;	var(((ml_backend.mlds).mlds_var), ((ml_backend.mlds).mlds_type)).
:- type mlds_module_name.
:- type mlds_package_name == ((ml_backend.mlds).mlds_module_name).
:- type mlds_pragma_export
	--->	ml_pragma_export(((libs.globals).foreign_language), string, ((ml_backend.mlds).mlds_qualified_entity_name), ((ml_backend.mlds).mlds_func_params), ((ml_backend.mlds).mlds_context)).
:- type mlds_pred_label
	--->	mlds_user_pred_label(((mdbcomp.prim_data).pred_or_func), (maybe.maybe(((ml_backend.mlds).mercury_module_name))), string, ((parse_tree.prog_data).arity), ((hlds.code_model).code_model), (bool.bool))
	;	mlds_special_pred_label(string, (maybe.maybe(((ml_backend.mlds).mercury_module_name))), string, ((parse_tree.prog_data).arity)).
:- type mlds_proc_label
	--->	mlds_proc_label(((ml_backend.mlds).mlds_pred_label), ((hlds.hlds_pred).proc_id)).
:- type mlds_qual_kind
	--->	module_qual 
	;	type_qual .
:- type mlds_qualified_ctor_id == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_ctor_id))).
:- type mlds_qualified_entity_name == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_entity_name))).
:- type mlds_qualified_pred_label == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_pred_label))).
:- type mlds_qualified_proc_label == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_proc_label))).
:- type mlds_reset_trail_reason
	--->	undo 
	;	commit 
	;	solve 
	;	exception 
	;	gc .
:- type mlds_return_types == (list.list(((ml_backend.mlds).mlds_type))).
:- type mlds_rval
	--->	lval(((ml_backend.mlds).mlds_lval))
	;	mkword(((ml_backend.mlds).mlds_tag), ((ml_backend.mlds).mlds_rval))
	;	const(((ml_backend.mlds).mlds_rval_const))
	;	unop(((ml_backend.mlds).mlds_unary_op), ((ml_backend.mlds).mlds_rval))
	;	binop(((backend_libs.builtin_ops).binary_op), ((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).mlds_rval))
	;	mem_addr(((ml_backend.mlds).mlds_lval))
	;	self(((ml_backend.mlds).mlds_type)).
:- type mlds_rval_const
	--->	mlconst_true 
	;	mlconst_false 
	;	mlconst_int(int)
	;	mlconst_float(float)
	;	mlconst_string(string)
	;	mlconst_multi_string((list.list(string)))
	;	mlconst_code_addr(((ml_backend.mlds).mlds_code_addr))
	;	mlconst_data_addr(((ml_backend.mlds).mlds_data_addr))
	;	mlconst_null(((ml_backend.mlds).mlds_type)).
:- type mlds_stmt
	--->	block(((ml_backend.mlds).mlds_defns), (list.list(((ml_backend.mlds).statement))))
	;	while(((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).statement), (bool.bool))
	;	if_then_else(((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).statement), (maybe.maybe(((ml_backend.mlds).statement))))
	;	switch(((ml_backend.mlds).mlds_type), ((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).mlds_switch_range), ((ml_backend.mlds).mlds_switch_cases), ((ml_backend.mlds).mlds_switch_default))
	;	label(((ml_backend.mlds).mlds_label))
	;	goto(((ml_backend.mlds).mlds_goto_target))
	;	computed_goto(((ml_backend.mlds).mlds_rval), (list.list(((ml_backend.mlds).mlds_label))))
	;	mlcall(((ml_backend.mlds).mlds_func_signature), ((ml_backend.mlds).mlds_rval), (maybe.maybe(((ml_backend.mlds).mlds_rval))), (list.list(((ml_backend.mlds).mlds_rval))), (list.list(((ml_backend.mlds).mlds_lval))), ((ml_backend.mlds).call_kind))
	;	return((list.list(((ml_backend.mlds).mlds_rval))))
	;	try_commit(((ml_backend.mlds).mlds_lval), ((ml_backend.mlds).statement), ((ml_backend.mlds).statement))
	;	do_commit(((ml_backend.mlds).mlds_rval))
	;	atomic(((ml_backend.mlds).mlds_atomic_statement)).
:- type mlds_switch_case == (pair.pair(((ml_backend.mlds).mlds_case_match_conds), ((ml_backend.mlds).statement))).
:- type mlds_switch_cases == (list.list(((ml_backend.mlds).mlds_switch_case))).
:- type mlds_switch_default
	--->	default_is_unreachable 
	;	default_do_nothing 
	;	default_case(((ml_backend.mlds).statement)).
:- type mlds_switch_range
	--->	range_unknown 
	;	range(((ml_backend.mlds).range_min) :: int, ((ml_backend.mlds).range_max) :: int).
:- type mlds_tag == int.
:- type mlds_target_lang
	--->	ml_target_c 
	;	ml_target_gnu_c 
	;	ml_target_asm 
	;	ml_target_il 
	;	ml_target_java .
:- type mlds_type
	--->	mercury_type(((parse_tree.prog_data).mer_type), ((parse_tree.prog_type).type_category), ((backend_libs.foreign).exported_type))
	;	mlds_mercury_array_type(((ml_backend.mlds).mlds_type))
	;	mlds_cont_type(((ml_backend.mlds).mlds_return_types))
	;	mlds_commit_type 
	;	mlds_native_bool_type 
	;	mlds_native_int_type 
	;	mlds_native_float_type 
	;	mlds_native_char_type 
	;	mlds_foreign_type(((parse_tree.prog_data).foreign_language_type))
	;	mlds_class_type(((ml_backend.mlds).mlds_class), ((parse_tree.prog_data).arity), ((ml_backend.mlds).mlds_class_kind))
	;	mlds_array_type(((ml_backend.mlds).mlds_type))
	;	mlds_ptr_type(((ml_backend.mlds).mlds_type))
	;	mlds_func_type(((ml_backend.mlds).mlds_func_params))
	;	mlds_generic_type 
	;	mlds_generic_env_ptr_type 
	;	mlds_type_info_type 
	;	mlds_pseudo_type_info_type 
	;	mlds_rtti_type(((backend_libs.rtti).rtti_id_maybe_element))
	;	mlds_tabling_type(((backend_libs.rtti).proc_tabling_struct_id))
	;	mlds_unknown_type .
:- type mlds_unary_op
	--->	box(((ml_backend.mlds).mlds_type))
	;	unbox(((ml_backend.mlds).mlds_type))
	;	cast(((ml_backend.mlds).mlds_type))
	;	std_unop(((backend_libs.builtin_ops).unary_op)).
:- type mlds_var == ((ml_backend.mlds).mlds_fully_qualified_name(((ml_backend.mlds).mlds_var_name))).
:- type mlds_var_name
	--->	mlds_var_name(string, (maybe.maybe(int))).
:- type outline_arg
	--->	in(((ml_backend.mlds).mlds_type), string, ((ml_backend.mlds).mlds_rval))
	;	out(((ml_backend.mlds).mlds_type), string, ((ml_backend.mlds).mlds_lval))
	;	unused .
:- type per_instance
	--->	one_copy 
	;	per_instance .
:- type statement
	--->	statement(((ml_backend.mlds).mlds_stmt), ((ml_backend.mlds).mlds_context)).
:- type statements == (list.list(((ml_backend.mlds).statement))).
:- type target_code_attribute
	--->	max_stack_size(int).
:- type target_code_attributes == (list.list(((ml_backend.mlds).target_code_attribute))).
:- type target_code_component
	--->	user_target_code(string, (maybe.maybe(((parse_tree.prog_data).prog_context))), ((ml_backend.mlds).target_code_attributes))
	;	raw_target_code(string, ((ml_backend.mlds).target_code_attributes))
	;	target_code_input(((ml_backend.mlds).mlds_rval))
	;	target_code_output(((ml_backend.mlds).mlds_lval))
	;	name(((ml_backend.mlds).mlds_qualified_entity_name)).
:- type trail_op
	--->	store_ticket(((ml_backend.mlds).mlds_lval))
	;	reset_ticket(((ml_backend.mlds).mlds_rval), ((ml_backend.mlds).mlds_reset_trail_reason))
	;	discard_ticket 
	;	prune_ticket 
	;	mark_ticket_stack(((ml_backend.mlds).mlds_lval))
	;	prune_tickets_to(((ml_backend.mlds).mlds_rval)).
:- type virtuality
	--->	non_virtual 
	;	virtual .
:- type mlds_fully_qualified_name(T)
	--->	qual(((ml_backend.mlds).mlds_module_name), ((ml_backend.mlds).mlds_qual_kind), T).
:- implementation.
:- type mlds_decl_flags == int.
