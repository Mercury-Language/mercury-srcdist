:- module (ml_backend.mlds_to_cs_util).
:- interface.
:- import_module bool.
:- import_module hlds.
:- import_module io.
:- import_module list.
:- import_module map.
:- import_module parse_tree.
:- import_module (hlds.hlds_module).
:- import_module (ml_backend.mlds).
:- import_module (ml_backend.mlds_to_target_util).
:- import_module (parse_tree.prog_data).
:- type csharp_out_info
    --->    csharp_out_info(((ml_backend.mlds_to_cs_util).csoi_module_info) :: hlds.hlds_module.module_info, ((ml_backend.mlds_to_cs_util).csoi_auto_comments) :: bool.bool, ((ml_backend.mlds_to_cs_util).csoi_line_numbers) :: bool.bool, ((ml_backend.mlds_to_cs_util).csoi_foreign_line_numbers) :: bool.bool, ((ml_backend.mlds_to_cs_util).csoi_module_name) :: ml_backend.mlds.mlds_module_name, ((ml_backend.mlds_to_cs_util).csoi_source_filename) :: string, ((ml_backend.mlds_to_cs_util).csoi_code_addrs) :: map.map(ml_backend.mlds.mlds_code_addr, string), ((ml_backend.mlds_to_cs_util).csoi_output_generics) :: ml_backend.mlds_to_target_util.output_generics, ((ml_backend.mlds_to_cs_util).csoi_break_context) :: ml_backend.mlds_to_target_util.break_context, ((ml_backend.mlds_to_cs_util).csoi_univ_tvars) :: list.list(parse_tree.prog_data.tvar)).
:- pred cs_output_context(bool.bool, parse_tree.prog_data.prog_context, io.io, io.io).
:- mode cs_output_context((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred cs_output_default_context(bool.bool, io.io, io.io).
:- mode cs_output_default_context((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred indent_line_after_context(bool.bool, parse_tree.prog_data.prog_context, ml_backend.mlds_to_target_util.indent, io.io, io.io).
:- mode indent_line_after_context((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- func init_csharp_out_info(hlds.hlds_module.module_info, string, map.map(ml_backend.mlds.mlds_code_addr, string)) = ml_backend.mlds_to_cs_util.csharp_out_info.
:- pred maybe_output_comment_for_csharp(ml_backend.mlds_to_cs_util.csharp_out_info, string, io.io, io.io).
:- mode maybe_output_comment_for_csharp((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred output_pragma_warning_disable(io.io, io.io).
:- mode output_pragma_warning_disable((builtin.di), (builtin.uo)) is det.
:- pred output_pragma_warning_restore(io.io, io.io).
:- mode output_pragma_warning_restore((builtin.di), (builtin.uo)) is det.
