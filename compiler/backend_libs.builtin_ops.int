:- module backend_libs.builtin_ops.
:- interface.
:- use_module hlds.
:- use_module list.
:- use_module mdbcomp.
:- use_module parse_tree.
:- use_module hlds.hlds_pred.
:- use_module mdbcomp.sym_name.
:- use_module parse_tree.prog_data.
:- type arith_op
    --->    ao_add 
    ;       ao_sub 
    ;       ao_mul 
    ;       ao_div 
    ;       ao_rem .
:- type array_elem_type
    --->    array_elem_scalar(backend_libs.builtin_ops.scalar_array_elem_type)
    ;       array_elem_struct(list.list(backend_libs.builtin_ops.scalar_array_elem_type)).
:- type binary_op
    --->    int_arith(parse_tree.prog_data.int_type, backend_libs.builtin_ops.arith_op)
    ;       unchecked_left_shift(parse_tree.prog_data.int_type, backend_libs.builtin_ops.shift_by_type)
    ;       unchecked_right_shift(parse_tree.prog_data.int_type, backend_libs.builtin_ops.shift_by_type)
    ;       bitwise_and(parse_tree.prog_data.int_type)
    ;       bitwise_or(parse_tree.prog_data.int_type)
    ;       bitwise_xor(parse_tree.prog_data.int_type)
    ;       logical_and 
    ;       logical_or 
    ;       int_cmp(parse_tree.prog_data.int_type, backend_libs.builtin_ops.cmp_op)
    ;       body 
    ;       array_index(backend_libs.builtin_ops.array_elem_type)
    ;       string_unsafe_index_code_unit 
    ;       str_cmp(backend_libs.builtin_ops.cmp_op)
    ;       str_nzp 
    ;       offset_str_eq(int, backend_libs.builtin_ops.maybe_size)
    ;       int_as_uint_cmp(backend_libs.builtin_ops.int_as_uint_cmp_op)
    ;       float_arith(backend_libs.builtin_ops.float_arith_op)
    ;       float_cmp(backend_libs.builtin_ops.cmp_op)
    ;       float_from_dword 
    ;       int64_from_dword 
    ;       uint64_from_dword 
    ;       pointer_equal_conservative 
    ;       compound_eq 
    ;       compound_lt .
:- type cmp_op
    --->    eq 
    ;       ne 
    ;       lt 
    ;       le 
    ;       gt 
    ;       ge .
:- type float_arith_op =< backend_libs.builtin_ops.arith_op
    --->    ao_add 
    ;       ao_sub 
    ;       ao_mul 
    ;       ao_div .
:- type int_as_uint_cmp_op =< backend_libs.builtin_ops.cmp_op
    --->    lt 
    ;       le .
:- type maybe_size
    --->    no_size 
    ;       size(int).
:- type scalar_array_elem_type
    --->    scalar_elem_string 
    ;       scalar_elem_int 
    ;       scalar_elem_generic .
:- type shift_by_type
    --->    shift_by_int 
    ;       shift_by_uint .
:- type simple_assigned_expr(T)
    --->    assign_copy(T)
    ;       assign_const(backend_libs.builtin_ops.simple_const)
    ;       assign_binary(backend_libs.builtin_ops.binary_op, T, T)
    ;       assign_binary_lc(backend_libs.builtin_ops.binary_op, backend_libs.builtin_ops.simple_const, T)
    ;       assign_unary(backend_libs.builtin_ops.unary_op, T).
:- type simple_code(T)
    --->    assign(T, backend_libs.builtin_ops.simple_assigned_expr(T))
    ;       ref_assign(T, T)
    ;       test(backend_libs.builtin_ops.simple_test_expr(T))
    ;       noop(list.list(T)).
:- type simple_const
    --->    int_const(int)
    ;       uint_const(uint)
    ;       int8_const(int8)
    ;       uint8_const(uint8)
    ;       int16_const(int16)
    ;       uint16_const(uint16)
    ;       int32_const(int32)
    ;       uint32_const(uint32)
    ;       int64_const(int64)
    ;       uint64_const(uint64)
    ;       float_const(float).
:- type simple_test_expr(T)
    --->    binary_test(backend_libs.builtin_ops.binary_op, T, T).
:- type unary_op
    --->    tag 
    ;       strip_tag 
    ;       mkbody 
    ;       unmkbody 
    ;       bitwise_complement(parse_tree.prog_data.int_type)
    ;       logical_not 
    ;       hash_string 
    ;       hash_string2 
    ;       hash_string3 
    ;       hash_string4 
    ;       hash_string5 
    ;       hash_string6 
    ;       dword_float_get_word0 
    ;       dword_float_get_word1 
    ;       dword_int64_get_word0 
    ;       dword_int64_get_word1 
    ;       dword_uint64_get_word0 
    ;       dword_uint64_get_word1 .
:- inst int_misc_binary_op for (backend_libs.builtin_ops).binary_op/0
    --->    bitwise_and(ground)
    ;       bitwise_or(ground)
    ;       bitwise_xor(ground)
    ;       unchecked_left_shift(ground, ground)
    ;       unchecked_right_shift(ground, ground).
:- func arith_op_c_operator(backend_libs.builtin_ops.arith_op) = string.
:- func cmp_op_c_operator(backend_libs.builtin_ops.cmp_op) = string.
:- func dump_arith_op(backend_libs.builtin_ops.arith_op) = string.
:- func dump_cmp_op(backend_libs.builtin_ops.cmp_op) = string.
:- func negate_cmp_op(backend_libs.builtin_ops.cmp_op) = backend_libs.builtin_ops.cmp_op.
:- pred test_if_builtin(mdbcomp.sym_name.module_name, string, int).
:- mode test_if_builtin(builtin.in, builtin.in, builtin.in) is semidet.
:- pred translate_builtin(mdbcomp.sym_name.module_name, string, hlds.hlds_pred.proc_id, list.list(T), backend_libs.builtin_ops.simple_code(T)).
:- mode translate_builtin(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
