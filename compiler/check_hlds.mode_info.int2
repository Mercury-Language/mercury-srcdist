:- module (check_hlds.mode_info).
:- interface.
:- import_module assoc_list.
:- import_module bag.
:- import_module bool.
:- import_module hlds.
:- import_module list.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module set.
:- import_module (check_hlds.delay_info).
:- import_module (check_hlds.mode_errors).
:- import_module (hlds.hlds_data).
:- import_module (hlds.hlds_goal).
:- import_module (hlds.hlds_module).
:- import_module (hlds.hlds_pred).
:- import_module (hlds.instmap).
:- import_module (hlds.pred_table).
:- import_module (mdbcomp.prim_data).
:- import_module (parse_tree.prog_data).
:- type call_context
	--->	call_context_unify(((hlds.hlds_goal).unify_context))
	;	call_context_call(((hlds.hlds_pred).call_id)).
:- type debug_flags
	--->	debug_flags(((check_hlds.mode_info).verbose) :: (bool.bool), ((check_hlds.mode_info).minimal) :: (bool.bool), ((check_hlds.mode_info).statistics) :: (bool.bool)).
:- type how_to_check_goal
	--->	check_modes 
	;	check_unique_modes .
:- type in_dupl_for_switch
	--->	in_dupl_for_switch 
	;	not_in_dupl_for_switch .
:- type in_from_ground_term
	--->	in_from_ground_term 
	;	not_in_from_ground_term .
:- type in_promise_purity_scope
	--->	in_promise_purity_scope 
	;	not_in_promise_purity_scope .
:- type locked_vars == (assoc_list.assoc_list(((check_hlds.mode_info).var_lock_reason), (set.set(((parse_tree.prog_data).prog_var))))).
:- type may_change_called_proc
	--->	may_change_called_proc 
	;	may_not_change_called_proc .
:- type may_init_solver_vars
	--->	may_init_solver_vars 
	;	may_not_init_solver_vars .
:- type mode_context
	--->	mode_context_call(((hlds.hlds_pred).call_id), int)
	;	mode_context_unify(((hlds.hlds_goal).unify_context), ((check_hlds.mode_info).side))
	;	mode_context_uninitialized .
:- type mode_info.
:- type need_to_requantify
	--->	need_to_requantify 
	;	do_not_need_to_requantify .
:- type par_conj_mode_check
	--->	par_conj_mode_check(((check_hlds.mode_info).par_conj_nonlocals) :: (set.set(((parse_tree.prog_data).prog_var))), ((check_hlds.mode_info).par_conj_bound) :: (set.set(((parse_tree.prog_data).prog_var)))).
:- type par_conj_mode_check_stack == (list.list(((check_hlds.mode_info).par_conj_mode_check))).
:- type side
	--->	left 
	;	right .
:- type var_lock_reason
	--->	var_lock_negation 
	;	var_lock_if_then_else 
	;	var_lock_lambda(((mdbcomp.prim_data).pred_or_func))
	;	var_lock_trace_goal 
	;	var_lock_par_conj .
