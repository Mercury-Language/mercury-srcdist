:- module analysis.
:- interface.
:- import_module bool.
:- import_module hlds.
:- import_module io.
:- import_module libs.
:- import_module list.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module set.
:- import_module term.
:- import_module unit.
:- import_module (hlds.hlds_module).
:- import_module (hlds.hlds_pred).
:- import_module (libs.globals).
:- import_module (mdbcomp.prim_data).
:- type analysis_info.
:- type analysis_name.
:- type analysis_status
	where	type_is_abstract_enum(2).
:- type any_call.
:- type fixpoint_type
	where	type_is_abstract_enum(1).
:- type func_id.
:- type no_func_info.
:- type analysis_result(Call, Answer).
:- type analysis_type.
:- typeclass compiler(Compiler).
:- typeclass to_term(S).
:- typeclass partial_order(FuncInfo, T) <= ((T -> FuncInfo)).
:- typeclass analysis(FuncInfo, Call, Answer) <= (analysis.call_pattern(FuncInfo, Call), analysis.answer_pattern(FuncInfo, Answer)).
:- typeclass answer_pattern(FuncInfo, Answer) <= (analysis.partial_order(FuncInfo, Answer), analysis.to_term(Answer)).
:- typeclass call_pattern(FuncInfo, Call) <= (analysis.partial_order(FuncInfo, Call), analysis.to_term(Call)).
:- instance (analysis.call_pattern(analysis.no_func_info, analysis.any_call)).
:- instance (analysis.partial_order(analysis.no_func_info, analysis.any_call)).
:- instance (analysis.to_term(analysis.any_call)).
