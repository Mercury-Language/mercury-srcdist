:- module (ml_backend.ml_unify_gen_util).
:- interface.
:- use_module (hlds.const_struct).
:- use_module (parse_tree.prog_data).
:- type arg_const_type_and_width == ml_backend.ml_unify_gen_util.arg_type_and_width(hlds.const_struct.const_struct_arg).
:- type arg_to_type(Arg) == ((func Arg) = parse_tree.prog_data.mer_type).
:- type arg_type_and_width(Arg)
    --->    arg_type_and_width(Arg, parse_tree.prog_data.mer_type, parse_tree.prog_data.arg_pos_width).
:- type arg_var_type_and_width == ml_backend.ml_unify_gen_util.arg_type_and_width(parse_tree.prog_data.prog_var).
:- type assign_dir
    --->    assign_nondummy_left 
    ;       assign_nondummy_right 
    ;       assign_nondummy_unused 
    ;       assign_dummy .
:- type field_gen
    --->    field_gen(maybe.maybe(parse_tree.prog_data.ptag), ml_backend.mlds.mlds_rval, ml_backend.mlds.mlds_type, ml_backend.ml_unify_gen_util.field_via).
:- type field_via
    --->    field_via_offset 
    ;       field_via_name(ml_backend.mlds.mlds_module_name, ml_backend.mlds.mlds_type).
:- type may_have_extra_args
    --->    may_not_have_extra_args 
    ;       may_have_extra_args .
:- type ml_maybe_zero_const
    --->    ml_is_not_zero_const 
    ;       ml_is_zero_const .
:- type_representation(arg_const_type_and_width, is_eqv_to(ml_backend.ml_unify_gen_util.arg_type_and_width(hlds.const_struct.const_struct_arg))).
:- type_representation(arg_to_type(V_1), is_eqv_to(((func V_1) = parse_tree.prog_data.mer_type))).
:- type_representation(arg_var_type_and_width, is_eqv_to(ml_backend.ml_unify_gen_util.arg_type_and_width(parse_tree.prog_data.prog_var))).
:- type_representation(assign_dir, du_repn(enum("assign_nondummy_left", "assign_nondummy_right", ["assign_nondummy_unused", "assign_dummy"],  no_c_j_cs))).
:- type_representation(field_gen, is_word_aligned_ptr).
:- type_representation(may_have_extra_args, du_repn(enum("may_not_have_extra_args", "may_have_extra_args", [],  no_c_j_cs))).
:- type_representation(ml_maybe_zero_const, du_repn(enum("ml_is_not_zero_const", "ml_is_zero_const", [],  no_c_j_cs))).
