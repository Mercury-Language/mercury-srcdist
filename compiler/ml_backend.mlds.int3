:- module (ml_backend.mlds).
:- interface.
:- import_module backend_libs.
:- import_module bool.
:- import_module hlds.
:- import_module libs.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module set.
:- import_module (backend_libs.builtin_ops).
:- import_module (backend_libs.foreign).
:- import_module (backend_libs.rtti).
:- import_module (hlds.code_model).
:- import_module (hlds.hlds_data).
:- import_module (hlds.hlds_module).
:- import_module (hlds.hlds_pred).
:- import_module (libs.globals).
:- import_module (mdbcomp.prim_data).
:- import_module (mdbcomp.sym_name).
:- import_module (ml_backend.ml_global_data).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_data_foreign).
:- import_module (parse_tree.prog_data_pragma).
:- import_module (parse_tree.prog_foreign).
:- import_module (parse_tree.prog_type).
:- type access
	where	type_is_abstract_enum(2).
:- type class_access
	where	type_is_abstract_enum(1).
:- type constness
	where	type_is_abstract_enum(1).
:- type ctor_name.
:- type global_var_access
	where	type_is_abstract_enum(1).
:- type global_var_ref.
:- type initializer_array_size.
:- type mercury_mlds_import_type
	where	type_is_abstract_enum(1).
:- type mercury_module_name.
:- type ml_call_kind
	where	type_is_abstract_enum(2).
:- type ml_call_marker.
:- type ml_scalar_common_type_num.
:- type ml_vector_common_type_num.
:- type mlds.
:- type mlds_alloc_id.
:- type mlds_arg_types.
:- type mlds_argument.
:- type mlds_atomic_statement.
:- type mlds_attribute.
:- type mlds_case_match_cond.
:- type mlds_class_decl_flags.
:- type mlds_class_defn.
:- type mlds_class_id.
:- type mlds_class_kind
	where	type_is_abstract_enum(2).
:- type mlds_class_name.
:- type mlds_code_addr.
:- type mlds_compiler_aux_var
	where	type_is_abstract_enum(4).
:- type mlds_compiler_var.
:- type mlds_ctor_id.
:- type mlds_exception_handler.
:- type mlds_exported_enum.
:- type mlds_exported_enum_constant.
:- type mlds_exported_enums.
:- type mlds_field_id.
:- type mlds_field_var_decl_flags.
:- type mlds_field_var_defn.
:- type mlds_field_var_name.
:- type mlds_foreign_code.
:- type mlds_func_label.
:- type mlds_func_params.
:- type mlds_func_signature.
:- type mlds_function_body.
:- type mlds_function_decl_flags.
:- type mlds_function_defn.
:- type mlds_function_name.
:- type mlds_gc_statement.
:- type mlds_global_const_var
	where	type_is_abstract_enum(3).
:- type mlds_global_var_decl_flags.
:- type mlds_global_var_defn.
:- type mlds_global_var_name.
:- type mlds_goto_target.
:- type mlds_import.
:- type mlds_imports.
:- type mlds_initializer.
:- type mlds_interface_id.
:- type mlds_label.
:- type mlds_local_var_defn.
:- type mlds_local_var_name.
:- type mlds_lval.
:- type mlds_maybe_aux_func_id.
:- type mlds_module_name.
:- type mlds_package_name.
:- type mlds_plain_func_name.
:- type mlds_pragma_export.
:- type mlds_pred_label.
:- type mlds_proc_label.
:- type mlds_qual_kind
	where	type_is_abstract_enum(1).
:- type mlds_reset_trail_reason
	where	type_is_abstract_enum(3).
:- type mlds_return_types.
:- type mlds_rval.
:- type mlds_rval_const.
:- type mlds_scalar_common.
:- type mlds_stmt.
:- type mlds_switch_case.
:- type mlds_switch_default.
:- type mlds_switch_range.
:- type mlds_tag.
:- type mlds_target_lang
	where	type_is_abstract_enum(2).
:- type mlds_type.
:- type mlds_type_name.
:- type mlds_unary_op.
:- type mlds_vector_common.
:- type outline_arg.
:- type overridability
	where	type_is_abstract_enum(1).
:- type per_instance
	where	type_is_abstract_enum(1).
:- type qual_class_name.
:- type qual_ctor_id.
:- type qual_field_var_name.
:- type qual_func_label.
:- type qual_function_name.
:- type qual_global_var_name.
:- type qual_local_var_name.
:- type qual_proc_label.
:- type qual_type_name.
:- type target_code_component.
:- type trail_op.
:- type while_loop_kind
	where	type_is_abstract_enum(1).
:- inst (atomic_stmt_is_new_object) for (ml_backend.mlds).mlds_atomic_statement/0 == bound(new_object(ground, ground, ground, ground, ground, ground, ground, ground, ground, ground)).
:- inst (lvn_prog_var) for (ml_backend.mlds).mlds_local_var_name/0 == bound(lvn_prog_var(ground, ground)).
:- inst (ml_stmt_is_atomic) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_atomic(ground, ground)).
:- inst (ml_stmt_is_block) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_block(ground, ground, ground, ground)).
:- inst (ml_stmt_is_call) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_call(ground, ground, ground, ground, ground, ground, ground)).
:- inst (ml_stmt_is_computed_goto) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_computed_goto(ground, ground, ground)).
:- inst (ml_stmt_is_do_commit) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_do_commit(ground, ground)).
:- inst (ml_stmt_is_goto) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_goto(ground, ground)).
:- inst (ml_stmt_is_if_then_else) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_if_then_else(ground, ground, ground, ground)).
:- inst (ml_stmt_is_label) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_label(ground, ground)).
:- inst (ml_stmt_is_return) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_return(ground, ground)).
:- inst (ml_stmt_is_switch) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_switch(ground, ground, ground, ground, ground, ground)).
:- inst (ml_stmt_is_try_commit) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_try_commit(ground, ground, ground, ground)).
:- inst (ml_stmt_is_while) for (ml_backend.mlds).mlds_stmt/0 == bound(ml_stmt_while(ground, ground, ground, ground)).
