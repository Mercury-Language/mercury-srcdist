:- module (hlds.hlds_data).
:- interface.
:- import_module assoc_list.
:- import_module bool.
:- import_module libs.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module parse_tree.
:- import_module set.
:- import_module (hlds.hlds_pred).
:- import_module (hlds.status).
:- import_module (libs.globals).
:- import_module (mdbcomp.goal_path).
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.prog_data).
:- type ancestor_constraints == map.map(parse_tree.prog_data.prog_constraint, list.list(parse_tree.prog_data.prog_constraint)).
:- type any_inst_table.
:- type assert_id.
:- type assertion_table.
:- type class_table == map.map(parse_tree.prog_data.class_id, hlds.hlds_data.hlds_class_defn).
:- type cons_table.
:- type cons_tag
    --->    string_tag(string)
    ;       float_tag(float)
    ;       int_tag(hlds.hlds_data.int_tag)
    ;       foreign_tag(libs.globals.foreign_language, string)
    ;       closure_tag(hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id, parse_tree.prog_data.lambda_eval_method)
    ;       type_ctor_info_tag(mdbcomp.sym_name.module_name, string, parse_tree.prog_data.arity)
    ;       base_typeclass_info_tag(mdbcomp.sym_name.module_name, parse_tree.prog_data.class_id, string)
    ;       type_info_const_tag(int)
    ;       typeclass_info_const_tag(int)
    ;       ground_term_const_tag(int, hlds.hlds_data.cons_tag)
    ;       tabling_info_tag(hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id)
    ;       deep_profiling_proc_layout_tag(hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id)
    ;       table_io_entry_tag(hlds.hlds_pred.pred_id, hlds.hlds_pred.proc_id)
    ;       single_functor_tag 
    ;       unshared_tag(hlds.hlds_data.tag_bits)
    ;       direct_arg_tag(hlds.hlds_data.tag_bits)
    ;       shared_remote_tag(hlds.hlds_data.tag_bits, int)
    ;       shared_local_tag(hlds.hlds_data.tag_bits, int)
    ;       no_tag 
    ;       reserved_address_tag(hlds.hlds_data.reserved_address)
    ;       shared_with_reserved_addresses_tag(list.list(hlds.hlds_data.reserved_address), hlds.hlds_data.cons_tag).
:- type cons_tag_values == map.map(parse_tree.prog_data.cons_id, hlds.hlds_data.cons_tag).
:- type constraint_id
    --->    constraint_id(hlds.hlds_data.constraint_type, mdbcomp.goal_path.goal_id, int).
:- type constraint_map == map.map(hlds.hlds_data.constraint_id, parse_tree.prog_data.prog_constraint).
:- type constraint_proof
    --->    apply_instance(hlds.hlds_data.instance_id)
    ;       superclass(parse_tree.prog_data.prog_constraint).
:- type constraint_proof_map == map.map(parse_tree.prog_data.prog_constraint, hlds.hlds_data.constraint_proof).
:- type constraint_type
    --->    unproven 
    ;       assumed .
:- type ctor_field_table == map.map(mdbcomp.sym_name.sym_name, list.list(hlds.hlds_data.hlds_ctor_field_defn)).
:- type du_type_kind
    --->    du_type_kind_mercury_enum 
    ;       du_type_kind_foreign_enum(((hlds.hlds_data).dtkfe_language) :: libs.globals.foreign_language)
    ;       du_type_kind_direct_dummy 
    ;       du_type_kind_notag(((hlds.hlds_data).dtkn_functor_name) :: mdbcomp.sym_name.sym_name, ((hlds.hlds_data).dtkn_arg_type) :: parse_tree.prog_data.mer_type, ((hlds.hlds_data).dtkn_maybe_arg_name) :: maybe.maybe(string))
    ;       du_type_kind_general .
:- type exclusive_id == hlds.hlds_pred.pred_id.
:- type exclusive_ids == list.list(hlds.hlds_pred.pred_id).
:- type exclusive_table.
:- type field_access_type
    --->    get 
    ;       set .
:- type foreign_type_body
    --->    foreign_type_body(((hlds.hlds_data).c) :: hlds.hlds_data.foreign_type_lang_body(parse_tree.prog_data.c_foreign_type), ((hlds.hlds_data).java) :: hlds.hlds_data.foreign_type_lang_body(parse_tree.prog_data.java_foreign_type), ((hlds.hlds_data).csharp) :: hlds.hlds_data.foreign_type_lang_body(parse_tree.prog_data.csharp_foreign_type), ((hlds.hlds_data).erlang) :: hlds.hlds_data.foreign_type_lang_body(parse_tree.prog_data.erlang_foreign_type)).
:- type foreign_type_lang_body(T) == maybe.maybe(hlds.hlds_data.foreign_type_lang_data(T)).
:- type foreign_type_lang_data(T)
    --->    foreign_type_lang_data(T, maybe.maybe(parse_tree.prog_data.unify_compare), parse_tree.prog_data.foreign_type_assertions).
:- type ground_inst_table.
:- type hlds_class_argpos == int.
:- type hlds_class_defn
    --->    hlds_class_defn(((hlds.hlds_data).classdefn_status) :: hlds.status.typeclass_status, ((hlds.hlds_data).classdefn_supers) :: list.list(parse_tree.prog_data.prog_constraint), ((hlds.hlds_data).classdefn_fundeps) :: hlds.hlds_data.hlds_class_fundeps, ((hlds.hlds_data).classdefn_fundep_ancestors) :: list.list(parse_tree.prog_data.prog_constraint), ((hlds.hlds_data).classdefn_vars) :: list.list(parse_tree.prog_data.tvar), ((hlds.hlds_data).classdefn_kinds) :: parse_tree.prog_data.tvar_kind_map, ((hlds.hlds_data).classdefn_interface) :: parse_tree.prog_data.class_interface, ((hlds.hlds_data).classdefn_hlds_interface) :: hlds.hlds_data.hlds_class_interface, ((hlds.hlds_data).classdefn_tvarset) :: parse_tree.prog_data.tvarset, ((hlds.hlds_data).classdefn_context) :: parse_tree.prog_data.prog_context).
:- type hlds_class_fundep
    --->    fundep(((hlds.hlds_data).domain) :: set.set(hlds.hlds_data.hlds_class_argpos), ((hlds.hlds_data).range) :: set.set(hlds.hlds_data.hlds_class_argpos)).
:- type hlds_class_fundeps == list.list(hlds.hlds_data.hlds_class_fundep).
:- type hlds_class_interface == list.list(hlds.hlds_pred.pred_proc_id).
:- type hlds_cons_defn
    --->    hlds_cons_defn(((hlds.hlds_data).cons_type_ctor) :: parse_tree.prog_data.type_ctor, ((hlds.hlds_data).cons_type_tvarset) :: parse_tree.prog_data.tvarset, ((hlds.hlds_data).cons_type_params) :: list.list(parse_tree.prog_data.type_param), ((hlds.hlds_data).cons_type_kinds) :: parse_tree.prog_data.tvar_kind_map, ((hlds.hlds_data).cons_exist_tvars) :: parse_tree.prog_data.existq_tvars, ((hlds.hlds_data).cons_constraints) :: list.list(parse_tree.prog_data.prog_constraint), ((hlds.hlds_data).cons_args) :: list.list(parse_tree.prog_data.constructor_arg), ((hlds.hlds_data).cons_context) :: parse_tree.prog_data.prog_context).
:- type hlds_constraint
    --->    hlds_constraint(list.list(hlds.hlds_data.constraint_id), parse_tree.prog_data.class_name, list.list(parse_tree.prog_data.mer_type)).
:- type hlds_constraints
    --->    hlds_constraints(((hlds.hlds_data).hcs_unproven) :: list.list(hlds.hlds_data.hlds_constraint), ((hlds.hlds_data).hcs_assumed) :: list.list(hlds.hlds_data.hlds_constraint), ((hlds.hlds_data).hcs_redundant) :: hlds.hlds_data.redundant_constraints, ((hlds.hlds_data).hcs_ancestors) :: hlds.hlds_data.ancestor_constraints).
:- type hlds_ctor_field_defn
    --->    hlds_ctor_field_defn(((hlds.hlds_data).field_context) :: parse_tree.prog_data.prog_context, ((hlds.hlds_data).field_status) :: hlds.status.type_status, ((hlds.hlds_data).field_type_ctor) :: parse_tree.prog_data.type_ctor, ((hlds.hlds_data).field_cons_id) :: parse_tree.prog_data.cons_id, ((hlds.hlds_data).field_arg_num) :: int).
:- type hlds_inst_body
    --->    eqv_inst(parse_tree.prog_data.mer_inst)
    ;       abstract_inst .
:- type hlds_inst_defn
    --->    hlds_inst_defn(((hlds.hlds_data).inst_varset) :: parse_tree.prog_data.inst_varset, ((hlds.hlds_data).inst_params) :: list.list(parse_tree.prog_data.inst_var), ((hlds.hlds_data).inst_body) :: hlds.hlds_data.hlds_inst_body, ((hlds.hlds_data).inst_for_type) :: hlds.hlds_data.inst_for_type_ctor, ((hlds.hlds_data).inst_context) :: parse_tree.prog_data.prog_context, ((hlds.hlds_data).inst_status) :: hlds.status.inst_status).
:- type hlds_instance_defn
    --->    hlds_instance_defn(((hlds.hlds_data).instdefn_module) :: mdbcomp.sym_name.module_name, ((hlds.hlds_data).instdefn_types) :: list.list(parse_tree.prog_data.mer_type), ((hlds.hlds_data).instdefn_orig_types) :: list.list(parse_tree.prog_data.mer_type), ((hlds.hlds_data).instdefn_status) :: hlds.status.instance_status, ((hlds.hlds_data).instdefn_context) :: parse_tree.prog_data.prog_context, ((hlds.hlds_data).instdefn_constraints) :: list.list(parse_tree.prog_data.prog_constraint), ((hlds.hlds_data).instdefn_body) :: parse_tree.prog_data.instance_body, ((hlds.hlds_data).instdefn_hlds_interface) :: maybe.maybe(hlds.hlds_data.hlds_class_interface), ((hlds.hlds_data).instdefn_tvarset) :: parse_tree.prog_data.tvarset, ((hlds.hlds_data).instdefn_proofs) :: hlds.hlds_data.constraint_proof_map).
:- type hlds_mode_body
    --->    eqv_mode(parse_tree.prog_data.mer_mode).
:- type hlds_mode_defn
    --->    hlds_mode_defn(((hlds.hlds_data).mode_varset) :: parse_tree.prog_data.inst_varset, ((hlds.hlds_data).mode_params) :: list.list(parse_tree.prog_data.inst_var), ((hlds.hlds_data).mody_body) :: hlds.hlds_data.hlds_mode_body, ((hlds.hlds_data).mode_context) :: parse_tree.prog_data.prog_context, ((hlds.hlds_data).mode_status) :: hlds.status.mode_status).
:- type hlds_type_body
    --->    hlds_du_type(((hlds.hlds_data).du_type_ctors) :: list.list(parse_tree.prog_data.constructor), ((hlds.hlds_data).du_type_cons_tag_values) :: hlds.hlds_data.cons_tag_values, ((hlds.hlds_data).du_type_cheaper_tag_test) :: hlds.hlds_data.maybe_cheaper_tag_test, ((hlds.hlds_data).du_type_kind) :: hlds.hlds_data.du_type_kind, ((hlds.hlds_data).du_type_usereq) :: maybe.maybe(parse_tree.prog_data.unify_compare), ((hlds.hlds_data).du_direct_arg_ctors) :: maybe.maybe(list.list(parse_tree.prog_data.sym_name_and_arity)), ((hlds.hlds_data).du_type_reserved_tag) :: parse_tree.prog_data.uses_reserved_tag, ((hlds.hlds_data).du_type_reserved_addr) :: parse_tree.prog_data.uses_reserved_address, ((hlds.hlds_data).du_type_is_foreign_type) :: maybe.maybe(hlds.hlds_data.foreign_type_body))
    ;       hlds_eqv_type(parse_tree.prog_data.mer_type)
    ;       hlds_foreign_type(hlds.hlds_data.foreign_type_body)
    ;       hlds_solver_type(parse_tree.prog_data.type_details_solver)
    ;       hlds_abstract_type(parse_tree.prog_data.type_details_abstract).
:- type hlds_type_defn.
:- type inst_for_type_ctor
    --->    iftc_not_applicable 
    ;       iftc_applicable_declared(parse_tree.prog_data.type_ctor)
    ;       iftc_applicable_not_known 
    ;       iftc_applicable_known(list.list(parse_tree.prog_data.type_ctor))
    ;       iftc_applicable_error .
:- type inst_table.
:- type instance_id == int.
:- type instance_table == map.map(parse_tree.prog_data.class_id, list.list(hlds.hlds_data.hlds_instance_defn)).
:- type int_tag
    --->    int_tag_int(int)
    ;       int_tag_uint(uint)
    ;       int_tag_int8(int)
    ;       int_tag_uint8(int)
    ;       int_tag_int16(int)
    ;       int_tag_uint16(int)
    ;       int_tag_int32(int)
    ;       int_tag_uint32(int).
:- type may_use_atomic_alloc
    --->    may_use_atomic_alloc 
    ;       may_not_use_atomic_alloc .
:- type maybe_cheaper_tag_test
    --->    no_cheaper_tag_test 
    ;       cheaper_tag_test(((hlds.hlds_data).more_expensive_cons_id) :: parse_tree.prog_data.cons_id, ((hlds.hlds_data).more_expensive_cons_tag) :: hlds.hlds_data.cons_tag, ((hlds.hlds_data).less_expensive_cons_id) :: parse_tree.prog_data.cons_id, ((hlds.hlds_data).less_expensive_cons_tag) :: hlds.hlds_data.cons_tag).
:- type maybe_inst
    --->    inst_unknown 
    ;       inst_known(parse_tree.prog_data.mer_inst).
:- type maybe_inst_det
    --->    inst_det_unknown 
    ;       inst_det_known(parse_tree.prog_data.mer_inst, parse_tree.prog_data.determinism).
:- type merge_inst_table.
:- type mode_defns == map.map(parse_tree.prog_data.mode_id, hlds.hlds_data.hlds_mode_defn).
:- type mode_table.
:- type mostly_uniq_inst_table.
:- type no_tag_type
    --->    no_tag_type(list.list(parse_tree.prog_data.type_param), mdbcomp.sym_name.sym_name, parse_tree.prog_data.mer_type).
:- type no_tag_type_table == map.map(parse_tree.prog_data.type_ctor, hlds.hlds_data.no_tag_type).
:- type redundant_constraints == map.map(parse_tree.prog_data.class_id, set.set(hlds.hlds_data.hlds_constraint)).
:- type reserved_address
    --->    null_pointer 
    ;       small_pointer(int)
    ;       reserved_object(parse_tree.prog_data.type_ctor, mdbcomp.sym_name.sym_name, parse_tree.prog_data.arity).
:- type shared_inst_table.
:- type tag_bits == int.
:- type tagged_cons_id
    --->    tagged_cons_id(parse_tree.prog_data.cons_id, hlds.hlds_data.cons_tag).
:- type type_defn_prev_errors
    --->    type_defn_no_prev_errors 
    ;       type_defn_prev_errors .
:- type type_table.
:- type unify_inst_table.
:- type user_inst_table == map.map(parse_tree.prog_data.inst_id, hlds.hlds_data.hlds_inst_defn).
:- pred add_type_ctor_defn(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.type_table, hlds.hlds_data.type_table).
:- mode add_type_ctor_defn((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred any_insts_from_sorted_pairs(assoc_list.assoc_list(parse_tree.prog_data.any_inst_info, hlds.hlds_data.maybe_inst_det), hlds.hlds_data.any_inst_table).
:- mode any_insts_from_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred any_insts_to_sorted_pairs(hlds.hlds_data.any_inst_table, assoc_list.assoc_list(parse_tree.prog_data.any_inst_info, hlds.hlds_data.maybe_inst_det)).
:- mode any_insts_to_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred asserted_can_pass_as_mercury_type(parse_tree.prog_data.foreign_type_assertions).
:- mode asserted_can_pass_as_mercury_type((builtin.in)) is semidet.
:- pred asserted_stable(parse_tree.prog_data.foreign_type_assertions).
:- mode asserted_stable((builtin.in)) is semidet.
:- pred asserted_word_aligned_pointer(parse_tree.prog_data.foreign_type_assertions).
:- mode asserted_word_aligned_pointer((builtin.in)) is semidet.
:- pred assertion_table_add_assertion(hlds.hlds_pred.pred_id, hlds.hlds_data.assert_id, hlds.hlds_data.assertion_table, hlds.hlds_data.assertion_table).
:- mode assertion_table_add_assertion((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred assertion_table_init(hlds.hlds_data.assertion_table).
:- mode assertion_table_init((builtin.out)) is det.
:- pred assertion_table_lookup(hlds.hlds_data.assertion_table, hlds.hlds_data.assert_id, hlds.hlds_pred.pred_id).
:- mode assertion_table_lookup((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred assertion_table_pred_ids(hlds.hlds_data.assertion_table, list.list(hlds.hlds_pred.pred_id)).
:- mode assertion_table_pred_ids((builtin.in), (builtin.out)) is det.
:- pred compare_hlds_constraints(hlds.hlds_data.hlds_constraint, hlds.hlds_data.hlds_constraint, builtin.comparison_result).
:- mode compare_hlds_constraints((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred cons_table_optimize(hlds.hlds_data.cons_table, hlds.hlds_data.cons_table).
:- mode cons_table_optimize((builtin.in), (builtin.out)) is det.
:- pred create_hlds_type_defn(parse_tree.prog_data.tvarset, list.list(parse_tree.prog_data.type_param), parse_tree.prog_data.tvar_kind_map, hlds.hlds_data.hlds_type_body, bool.bool, hlds.status.type_status, parse_tree.prog_data.need_qualifier, hlds.hlds_data.type_defn_prev_errors, parse_tree.prog_data.prog_context, hlds.hlds_data.hlds_type_defn).
:- mode create_hlds_type_defn((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_update_any_inst(parse_tree.prog_data.any_inst_info, hlds.hlds_data.maybe_inst_det, hlds.hlds_data.any_inst_table, hlds.hlds_data.any_inst_table).
:- mode det_update_any_inst((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_update_ground_inst(parse_tree.prog_data.ground_inst_info, hlds.hlds_data.maybe_inst_det, hlds.hlds_data.ground_inst_table, hlds.hlds_data.ground_inst_table).
:- mode det_update_ground_inst((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_update_merge_inst(parse_tree.prog_data.merge_inst_info, hlds.hlds_data.maybe_inst, hlds.hlds_data.merge_inst_table, hlds.hlds_data.merge_inst_table).
:- mode det_update_merge_inst((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_update_mostly_uniq_inst(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst, hlds.hlds_data.mostly_uniq_inst_table, hlds.hlds_data.mostly_uniq_inst_table).
:- mode det_update_mostly_uniq_inst((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_update_shared_inst(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst, hlds.hlds_data.shared_inst_table, hlds.hlds_data.shared_inst_table).
:- mode det_update_shared_inst((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_update_unify_inst(parse_tree.prog_data.unify_inst_info, hlds.hlds_data.maybe_inst_det, hlds.hlds_data.unify_inst_table, hlds.hlds_data.unify_inst_table).
:- mode det_update_unify_inst((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred empty_hlds_constraints(hlds.hlds_data.hlds_constraints).
:- mode empty_hlds_constraints((builtin.out)) is det.
:- pred exclusive_table_add(hlds.hlds_pred.pred_id, hlds.hlds_data.exclusive_id, hlds.hlds_data.exclusive_table, hlds.hlds_data.exclusive_table).
:- mode exclusive_table_add((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred exclusive_table_init(hlds.hlds_data.exclusive_table).
:- mode exclusive_table_init((builtin.out)) is det.
:- pred exclusive_table_lookup(hlds.hlds_data.exclusive_table, hlds.hlds_pred.pred_id, hlds.hlds_data.exclusive_ids).
:- mode exclusive_table_lookup((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred exclusive_table_optimize(hlds.hlds_data.exclusive_table, hlds.hlds_data.exclusive_table).
:- mode exclusive_table_optimize((builtin.in), (builtin.out)) is det.
:- pred exclusive_table_search(hlds.hlds_data.exclusive_table, hlds.hlds_pred.pred_id, hlds.hlds_data.exclusive_ids).
:- mode exclusive_table_search((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred foldl2_over_type_ctor_defns(pred(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn, T, T, U, U), hlds.hlds_data.type_table, T, T, U, U).
:- mode foldl2_over_type_ctor_defns(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred foldl3_over_type_ctor_defns(pred(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn, T, T, U, U, V, V), hlds.hlds_data.type_table, T, T, U, U, V, V).
:- mode foldl3_over_type_ctor_defns(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred foldl_over_type_ctor_defns(pred(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn, T, T), hlds.hlds_data.type_table, T, T).
:- mode foldl_over_type_ctor_defns(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred get_all_cons_defns(hlds.hlds_data.cons_table, assoc_list.assoc_list(parse_tree.prog_data.cons_id, hlds.hlds_data.hlds_cons_defn)).
:- mode get_all_cons_defns((builtin.in), (builtin.out)) is det.
:- pred get_all_type_ctor_defns(hlds.hlds_data.type_table, assoc_list.assoc_list(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn)).
:- mode get_all_type_ctor_defns((builtin.in), (builtin.out)) is det.
:- func get_maybe_cheaper_tag_test(hlds.hlds_data.hlds_type_body) = hlds.hlds_data.maybe_cheaper_tag_test.
:- func get_primary_tag(hlds.hlds_data.cons_tag) = maybe.maybe(int).
:- func get_secondary_tag(hlds.hlds_data.cons_tag) = maybe.maybe(int).
:- pred get_type_defn_body(hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_body).
:- mode get_type_defn_body((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_context(hlds.hlds_data.hlds_type_defn, parse_tree.prog_data.prog_context).
:- mode get_type_defn_context((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_ctors_need_qualifier(hlds.hlds_data.hlds_type_defn, parse_tree.prog_data.need_qualifier).
:- mode get_type_defn_ctors_need_qualifier((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_in_exported_eqv(hlds.hlds_data.hlds_type_defn, bool.bool).
:- mode get_type_defn_in_exported_eqv((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_kind_map(hlds.hlds_data.hlds_type_defn, parse_tree.prog_data.tvar_kind_map).
:- mode get_type_defn_kind_map((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_prev_errors(hlds.hlds_data.hlds_type_defn, hlds.hlds_data.type_defn_prev_errors).
:- mode get_type_defn_prev_errors((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_status(hlds.hlds_data.hlds_type_defn, hlds.status.type_status).
:- mode get_type_defn_status((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_tparams(hlds.hlds_data.hlds_type_defn, list.list(parse_tree.prog_data.type_param)).
:- mode get_type_defn_tparams((builtin.in), (builtin.out)) is det.
:- pred get_type_defn_tvarset(hlds.hlds_data.hlds_type_defn, parse_tree.prog_data.tvarset).
:- mode get_type_defn_tvarset((builtin.in), (builtin.out)) is det.
:- pred ground_insts_from_sorted_pairs(assoc_list.assoc_list(parse_tree.prog_data.ground_inst_info, hlds.hlds_data.maybe_inst_det), hlds.hlds_data.ground_inst_table).
:- mode ground_insts_from_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred ground_insts_to_sorted_pairs(hlds.hlds_data.ground_inst_table, assoc_list.assoc_list(parse_tree.prog_data.ground_inst_info, hlds.hlds_data.maybe_inst_det)).
:- mode ground_insts_to_sorted_pairs((builtin.in), (builtin.out)) is det.
:- func init_cons_table = hlds.hlds_data.cons_table.
:- pred init_hlds_constraint_list(list.list(parse_tree.prog_data.prog_constraint), list.list(hlds.hlds_data.hlds_constraint)).
:- mode init_hlds_constraint_list((builtin.in), (builtin.out)) is det.
:- func init_type_table = hlds.hlds_data.type_table.
:- pred insert_into_cons_table(parse_tree.prog_data.cons_id, list.list(parse_tree.prog_data.cons_id), hlds.hlds_data.hlds_cons_defn, hlds.hlds_data.cons_table, hlds.hlds_data.cons_table).
:- mode insert_into_cons_table((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_get_any_insts(hlds.hlds_data.inst_table, hlds.hlds_data.any_inst_table).
:- mode inst_table_get_any_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_get_ground_insts(hlds.hlds_data.inst_table, hlds.hlds_data.ground_inst_table).
:- mode inst_table_get_ground_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_get_merge_insts(hlds.hlds_data.inst_table, hlds.hlds_data.merge_inst_table).
:- mode inst_table_get_merge_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_get_mostly_uniq_insts(hlds.hlds_data.inst_table, hlds.hlds_data.mostly_uniq_inst_table).
:- mode inst_table_get_mostly_uniq_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_get_shared_insts(hlds.hlds_data.inst_table, hlds.hlds_data.shared_inst_table).
:- mode inst_table_get_shared_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_get_unify_insts(hlds.hlds_data.inst_table, hlds.hlds_data.unify_inst_table).
:- mode inst_table_get_unify_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_get_user_insts(hlds.hlds_data.inst_table, hlds.hlds_data.user_inst_table).
:- mode inst_table_get_user_insts((builtin.in), (builtin.out)) is det.
:- pred inst_table_init(hlds.hlds_data.inst_table).
:- mode inst_table_init((builtin.out)) is det.
:- pred inst_table_set_any_insts(hlds.hlds_data.any_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_any_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_set_ground_insts(hlds.hlds_data.ground_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_ground_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_set_merge_insts(hlds.hlds_data.merge_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_merge_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_set_mostly_uniq_insts(hlds.hlds_data.mostly_uniq_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_mostly_uniq_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_set_shared_insts(hlds.hlds_data.shared_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_shared_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_set_unify_insts(hlds.hlds_data.unify_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_unify_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred inst_table_set_user_insts(hlds.hlds_data.user_inst_table, hlds.hlds_data.inst_table, hlds.hlds_data.inst_table).
:- mode inst_table_set_user_insts((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_any_inst(hlds.hlds_data.any_inst_table, parse_tree.prog_data.any_inst_info, hlds.hlds_data.maybe_inst_det).
:- mode lookup_any_inst((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_cons_table_of_type_ctor(hlds.hlds_data.cons_table, parse_tree.prog_data.type_ctor, parse_tree.prog_data.cons_id, hlds.hlds_data.hlds_cons_defn).
:- mode lookup_cons_table_of_type_ctor((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_ground_inst(hlds.hlds_data.ground_inst_table, parse_tree.prog_data.ground_inst_info, hlds.hlds_data.maybe_inst_det).
:- mode lookup_ground_inst((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_hlds_constraint_list(hlds.hlds_data.constraint_map, hlds.hlds_data.constraint_type, mdbcomp.goal_path.goal_id, int, list.list(parse_tree.prog_data.prog_constraint)).
:- mode lookup_hlds_constraint_list((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_merge_inst(hlds.hlds_data.merge_inst_table, parse_tree.prog_data.merge_inst_info, hlds.hlds_data.maybe_inst).
:- mode lookup_merge_inst((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_mostly_uniq_inst(hlds.hlds_data.mostly_uniq_inst_table, parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst).
:- mode lookup_mostly_uniq_inst((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_shared_inst(hlds.hlds_data.shared_inst_table, parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst).
:- mode lookup_shared_inst((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_type_ctor_defn(hlds.hlds_data.type_table, parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn).
:- mode lookup_type_ctor_defn((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred lookup_unify_inst(hlds.hlds_data.unify_inst_table, parse_tree.prog_data.unify_inst_info, hlds.hlds_data.maybe_inst_det).
:- mode lookup_unify_inst((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred make_body_hlds_constraints(hlds.hlds_data.class_table, parse_tree.prog_data.tvarset, mdbcomp.goal_path.goal_id, parse_tree.prog_data.prog_constraints, hlds.hlds_data.hlds_constraints).
:- mode make_body_hlds_constraints((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred make_head_hlds_constraints(hlds.hlds_data.class_table, parse_tree.prog_data.tvarset, parse_tree.prog_data.prog_constraints, hlds.hlds_data.hlds_constraints).
:- mode make_head_hlds_constraints((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred make_hlds_constraint_list(list.list(parse_tree.prog_data.prog_constraint), hlds.hlds_data.constraint_type, mdbcomp.goal_path.goal_id, list.list(hlds.hlds_data.hlds_constraint)).
:- mode make_hlds_constraint_list((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred make_hlds_constraints(hlds.hlds_data.class_table, parse_tree.prog_data.tvarset, list.list(hlds.hlds_data.hlds_constraint), list.list(hlds.hlds_data.hlds_constraint), hlds.hlds_data.hlds_constraints).
:- mode make_hlds_constraints((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred map_foldl_over_type_ctor_defns(pred(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_defn, T, T), hlds.hlds_data.type_table, hlds.hlds_data.type_table, T, T).
:- mode map_foldl_over_type_ctor_defns(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred matching_constraints(hlds.hlds_data.hlds_constraint, hlds.hlds_data.hlds_constraint).
:- mode matching_constraints((builtin.in), (builtin.in)) is semidet.
:- pred merge_hlds_constraints(hlds.hlds_data.hlds_constraints, hlds.hlds_data.hlds_constraints, hlds.hlds_data.hlds_constraints).
:- mode merge_hlds_constraints((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred merge_insts_from_sorted_pairs(assoc_list.assoc_list(parse_tree.prog_data.merge_inst_info, hlds.hlds_data.maybe_inst), hlds.hlds_data.merge_inst_table).
:- mode merge_insts_from_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred merge_insts_to_sorted_pairs(hlds.hlds_data.merge_inst_table, assoc_list.assoc_list(parse_tree.prog_data.merge_inst_info, hlds.hlds_data.maybe_inst)).
:- mode merge_insts_to_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred mode_table_get_mode_defns(hlds.hlds_data.mode_table, hlds.hlds_data.mode_defns).
:- mode mode_table_get_mode_defns((builtin.in), (builtin.out)) is det.
:- pred mode_table_init(hlds.hlds_data.mode_table).
:- mode mode_table_init((builtin.out)) is det.
:- pred mode_table_insert(parse_tree.prog_data.mode_id, hlds.hlds_data.hlds_mode_defn, hlds.hlds_data.mode_table, hlds.hlds_data.mode_table).
:- mode mode_table_insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred mode_table_optimize(hlds.hlds_data.mode_table, hlds.hlds_data.mode_table).
:- mode mode_table_optimize((builtin.in), (builtin.out)) is det.
:- pred mostly_uniq_insts_from_sorted_pairs(assoc_list.assoc_list(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst), hlds.hlds_data.mostly_uniq_inst_table).
:- mode mostly_uniq_insts_from_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred mostly_uniq_insts_to_sorted_pairs(hlds.hlds_data.mostly_uniq_inst_table, assoc_list.assoc_list(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst)).
:- mode mostly_uniq_insts_to_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred num_extra_instance_args(hlds.hlds_data.hlds_instance_defn, int).
:- mode num_extra_instance_args((builtin.in), (builtin.out)) is det.
:- func project_tagged_cons_id_tag(hlds.hlds_data.tagged_cons_id) = hlds.hlds_data.cons_tag.
:- pred replace_cons_defns_in_cons_table(pred(hlds.hlds_data.hlds_cons_defn, hlds.hlds_data.hlds_cons_defn), hlds.hlds_data.cons_table, hlds.hlds_data.cons_table).
:- mode replace_cons_defns_in_cons_table(builtin.in((pred((builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)) is det.
:- pred replace_type_ctor_defn(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.type_table, hlds.hlds_data.type_table).
:- mode replace_type_ctor_defn((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func restrict_list_elements(set.set(hlds.hlds_data.hlds_class_argpos), list.list(T)) = list.list(T).
:- pred retrieve_prog_constraint(hlds.hlds_data.hlds_constraint, parse_tree.prog_data.prog_constraint).
:- mode retrieve_prog_constraint((builtin.in), (builtin.out)) is det.
:- pred retrieve_prog_constraint_list(list.list(hlds.hlds_data.hlds_constraint), list.list(parse_tree.prog_data.prog_constraint)).
:- mode retrieve_prog_constraint_list((builtin.in), (builtin.out)) is det.
:- pred retrieve_prog_constraints(hlds.hlds_data.hlds_constraints, parse_tree.prog_data.prog_constraints).
:- mode retrieve_prog_constraints((builtin.in), (builtin.out)) is det.
:- pred return_cons_arities(hlds.hlds_data.cons_table, mdbcomp.sym_name.sym_name, list.list(int)).
:- mode return_cons_arities((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred search_cons_table(hlds.hlds_data.cons_table, parse_tree.prog_data.cons_id, list.list(hlds.hlds_data.hlds_cons_defn)).
:- mode search_cons_table((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred search_cons_table_of_type_ctor(hlds.hlds_data.cons_table, parse_tree.prog_data.type_ctor, parse_tree.prog_data.cons_id, hlds.hlds_data.hlds_cons_defn).
:- mode search_cons_table_of_type_ctor((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred search_hlds_constraint_list(hlds.hlds_data.constraint_map, hlds.hlds_data.constraint_type, mdbcomp.goal_path.goal_id, int, list.list(parse_tree.prog_data.prog_constraint)).
:- mode search_hlds_constraint_list((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred search_insert_any_inst(parse_tree.prog_data.any_inst_info, maybe.maybe(hlds.hlds_data.maybe_inst_det), hlds.hlds_data.any_inst_table, hlds.hlds_data.any_inst_table).
:- mode search_insert_any_inst((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred search_insert_ground_inst(parse_tree.prog_data.ground_inst_info, maybe.maybe(hlds.hlds_data.maybe_inst_det), hlds.hlds_data.ground_inst_table, hlds.hlds_data.ground_inst_table).
:- mode search_insert_ground_inst((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred search_insert_merge_inst(parse_tree.prog_data.merge_inst_info, maybe.maybe(hlds.hlds_data.maybe_inst), hlds.hlds_data.merge_inst_table, hlds.hlds_data.merge_inst_table).
:- mode search_insert_merge_inst((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred search_insert_mostly_uniq_inst(parse_tree.prog_data.inst_name, maybe.maybe(hlds.hlds_data.maybe_inst), hlds.hlds_data.mostly_uniq_inst_table, hlds.hlds_data.mostly_uniq_inst_table).
:- mode search_insert_mostly_uniq_inst((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred search_insert_shared_inst(parse_tree.prog_data.inst_name, maybe.maybe(hlds.hlds_data.maybe_inst), hlds.hlds_data.shared_inst_table, hlds.hlds_data.shared_inst_table).
:- mode search_insert_shared_inst((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred search_insert_unify_inst(parse_tree.prog_data.unify_inst_info, maybe.maybe(hlds.hlds_data.maybe_inst_det), hlds.hlds_data.unify_inst_table, hlds.hlds_data.unify_inst_table).
:- mode search_insert_unify_inst((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred search_type_ctor_defn(hlds.hlds_data.type_table, parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn).
:- mode search_type_ctor_defn((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred set_type_defn_body(hlds.hlds_data.hlds_type_body, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_defn).
:- mode set_type_defn_body((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_type_defn_in_exported_eqv(bool.bool, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_defn).
:- mode set_type_defn_in_exported_eqv((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_type_defn_prev_errors(hlds.hlds_data.type_defn_prev_errors, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_defn).
:- mode set_type_defn_prev_errors((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_type_defn_status(hlds.status.type_status, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_defn).
:- mode set_type_defn_status((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_type_defn_tvarset(parse_tree.prog_data.tvarset, hlds.hlds_data.hlds_type_defn, hlds.hlds_data.hlds_type_defn).
:- mode set_type_defn_tvarset((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred shared_insts_from_sorted_pairs(assoc_list.assoc_list(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst), hlds.hlds_data.shared_inst_table).
:- mode shared_insts_from_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred shared_insts_to_sorted_pairs(hlds.hlds_data.shared_inst_table, assoc_list.assoc_list(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst)).
:- mode shared_insts_to_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred unify_insts_from_sorted_pairs(assoc_list.assoc_list(parse_tree.prog_data.unify_inst_info, hlds.hlds_data.maybe_inst_det), hlds.hlds_data.unify_inst_table).
:- mode unify_insts_from_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred unify_insts_to_sorted_pairs(hlds.hlds_data.unify_inst_table, assoc_list.assoc_list(parse_tree.prog_data.unify_inst_info, hlds.hlds_data.maybe_inst_det)).
:- mode unify_insts_to_sorted_pairs((builtin.in), (builtin.out)) is det.
:- pred update_constraint_map(hlds.hlds_data.hlds_constraint, hlds.hlds_data.constraint_map, hlds.hlds_data.constraint_map).
:- mode update_constraint_map((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred update_redundant_constraints(hlds.hlds_data.class_table, parse_tree.prog_data.tvarset, list.list(hlds.hlds_data.hlds_constraint), hlds.hlds_data.redundant_constraints, hlds.hlds_data.redundant_constraints).
:- mode update_redundant_constraints((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- implementation.
:- import_module multi_map.
:- type any_inst_table == map.map(parse_tree.prog_data.any_inst_info, hlds.hlds_data.maybe_inst_det).
:- type assert_id == int.
:- type cons_table == map.map(string, hlds.hlds_data.inner_cons_table).
:- type exclusive_table == multi_map.multi_map(hlds.hlds_pred.pred_id, hlds.hlds_data.exclusive_id).
:- type ground_inst_table == map.map(parse_tree.prog_data.ground_inst_info, hlds.hlds_data.maybe_inst_det).
:- type inner_cons_entry.
:- type inner_cons_table == list.list(hlds.hlds_data.inner_cons_entry).
:- type merge_inst_table == map.map(parse_tree.prog_data.merge_inst_info, hlds.hlds_data.maybe_inst).
:- type mode_table == hlds.hlds_data.mode_defns.
:- type mostly_uniq_inst_table == map.map(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst).
:- type shared_inst_table == map.map(parse_tree.prog_data.inst_name, hlds.hlds_data.maybe_inst).
:- type type_ctor_table == map.map(parse_tree.prog_data.type_ctor, hlds.hlds_data.hlds_type_defn).
:- type type_table == map.map(string, hlds.hlds_data.type_ctor_table).
