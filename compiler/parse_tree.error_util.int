:- module (parse_tree.error_util).
:- interface.
:- import_module bool.
:- import_module io.
:- import_module list.
:- import_module maybe.
:- import_module (libs.globals).
:- import_module (libs.options).
:- import_module (mdbcomp.prim_data).
:- import_module (parse_tree.prog_data).
:- type actual_severity
	--->	actual_severity_error 
	;	actual_severity_warning 
	;	actual_severity_informational .
:- type error_msg
	--->	simple_msg(((parse_tree.error_util).simple_context) :: ((parse_tree.prog_data).prog_context), ((parse_tree.error_util).simple_components) :: (list.list(((parse_tree.error_util).error_msg_component))))
	;	error_msg(((parse_tree.error_util).error_context) :: (maybe.maybe(((parse_tree.prog_data).prog_context))), ((parse_tree.error_util).error_treat_as_first) :: (bool.bool), ((parse_tree.error_util).error_extra_indent) :: int, ((parse_tree.error_util).error_components) :: (list.list(((parse_tree.error_util).error_msg_component)))).
:- type error_msg_component
	--->	always(((parse_tree.error_util).format_components))
	;	option_is_set(((libs.options).option), (bool.bool), (list.list(((parse_tree.error_util).error_msg_component))))
	;	verbose_only(((parse_tree.error_util).format_components))
	;	verbose_and_nonverbose(((parse_tree.error_util).format_components), ((parse_tree.error_util).format_components))
	;	print_anything(pred((io.io), (io.io))).
:- type error_phase
	--->	phase_read_files 
	;	phase_term_to_parse_tree 
	;	phase_parse_tree_to_hlds 
	;	phase_expand_types 
	;	phase_type_check 
	;	phase_mode_check 
	;	phase_purity_check 
	;	phase_detism_check 
	;	phase_simplify(((parse_tree.error_util).mode_report_control))
	;	phase_dead_code 
	;	phase_termination_analysis 
	;	phase_accumulator_intro 
	;	phase_interface_gen 
	;	phase_code_gen .
:- type error_severity
	--->	severity_error 
	;	severity_warning 
	;	severity_informational 
	;	severity_conditional(((parse_tree.error_util).cond_option) :: ((libs.options).option), ((parse_tree.error_util).cond_option_value) :: (bool.bool), ((parse_tree.error_util).cond_if_match) :: ((parse_tree.error_util).error_severity), ((parse_tree.error_util).cond_if_no_match) :: (maybe.maybe(((parse_tree.error_util).error_severity)))).
:- type error_spec
	--->	error_spec(((parse_tree.error_util).error_severity) :: ((parse_tree.error_util).error_severity), ((parse_tree.error_util).error_phase) :: ((parse_tree.error_util).error_phase), ((parse_tree.error_util).error_msgs) :: (list.list(((parse_tree.error_util).error_msg)))).
:- type format_component
	--->	fixed(string)
	;	quote(string)
	;	int_fixed(int)
	;	prefix(string)
	;	suffix(string)
	;	words(string)
	;	sym_name(((mdbcomp.prim_data).sym_name))
	;	sym_name_and_arity(((parse_tree.prog_data).sym_name_and_arity))
	;	top_ctor_of_type(((parse_tree.prog_data).mer_type))
	;	p_or_f(((mdbcomp.prim_data).pred_or_func))
	;	simple_call(((parse_tree.prog_data).simple_call_id))
	;	nl 
	;	nl_indent_delta(int)
	;	blank_line .
:- type format_components == (list.list(((parse_tree.error_util).format_component))).
:- type mode_report_control
	--->	report_in_any_mode 
	;	report_only_if_in_all_modes .
:- func actual_error_severity(((libs.globals).globals), ((parse_tree.error_util).error_severity)) = (maybe.maybe(((parse_tree.error_util).actual_severity))).
:- func add_quotes(string) = string.
:- func capitalize(string) = string.
:- func choose_number((list.list(T)), U, U) = U.
:- func component_list_to_line_pieces((list.list((list.list(((parse_tree.error_util).format_component))))), (list.list(((parse_tree.error_util).format_component)))) = (list.list(((parse_tree.error_util).format_component))).
:- func component_list_to_pieces((list.list(((parse_tree.error_util).format_component)))) = (list.list(((parse_tree.error_util).format_component))).
:- func component_lists_to_pieces((list.list((list.list(((parse_tree.error_util).format_component)))))) = (list.list(((parse_tree.error_util).format_component))).
:- func contains_errors(((libs.globals).globals), (list.list(((parse_tree.error_util).error_spec)))) = (bool.bool).
:- func contains_errors_and_or_warnings(((libs.globals).globals), (list.list(((parse_tree.error_util).error_spec)))) = (bool.bool).
:- func describe_sym_name(((mdbcomp.prim_data).sym_name)) = string.
:- func describe_sym_name_and_arity(((parse_tree.prog_data).sym_name_and_arity)) = string.
:- func error_pieces_to_string((list.list(((parse_tree.error_util).format_component)))) = string.
:- func is_or_are((list.list(T))) = string.
:- func list_to_pieces((list.list(string))) = (list.list(((parse_tree.error_util).format_component))).
:- func pred_or_func_to_string(((mdbcomp.prim_data).pred_or_func)) = string.
:- pred report_warning(((parse_tree.prog_data).prog_context), int, (list.list(((parse_tree.error_util).format_component))), (io.io), (io.io)).
:- mode report_warning((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred sort_error_msgs((list.list(((parse_tree.error_util).error_msg))), (list.list(((parse_tree.error_util).error_msg)))).
:- mode sort_error_msgs((builtin.in), (builtin.out)) is det.
:- pred sort_error_specs((list.list(((parse_tree.error_util).error_spec))), (list.list(((parse_tree.error_util).error_spec)))).
:- mode sort_error_specs((builtin.in), (builtin.out)) is det.
:- func string_to_words_piece(string) = ((parse_tree.error_util).format_component).
:- pred unable_to_open_file(string, (io.error), (io.io), (io.io)).
:- mode unable_to_open_file((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- func worst_severity(((parse_tree.error_util).actual_severity), ((parse_tree.error_util).actual_severity)) = ((parse_tree.error_util).actual_severity).
:- func worst_severity_in_specs(((libs.globals).globals), (list.list(((parse_tree.error_util).error_spec)))) = (maybe.maybe(((parse_tree.error_util).actual_severity))).
:- pred write_error_pieces(((parse_tree.prog_data).prog_context), int, (list.list(((parse_tree.error_util).format_component))), (io.io), (io.io)).
:- mode write_error_pieces((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_error_pieces_maybe_first_line((bool.bool), ((parse_tree.prog_data).prog_context), int, (list.list(((parse_tree.error_util).format_component))), (io.io), (io.io)).
:- mode write_error_pieces_maybe_first_line((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_error_pieces_maybe_with_context((maybe.maybe(((parse_tree.prog_data).prog_context))), int, (list.list(((parse_tree.error_util).format_component))), (io.io), (io.io)).
:- mode write_error_pieces_maybe_with_context((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_error_pieces_not_first_line(((parse_tree.prog_data).prog_context), int, (list.list(((parse_tree.error_util).format_component))), (io.io), (io.io)).
:- mode write_error_pieces_not_first_line((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_error_pieces_plain((list.list(((parse_tree.error_util).format_component))), (io.io), (io.io)).
:- mode write_error_pieces_plain((builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_error_plain_with_progname(string, string, (io.io), (io.io)).
:- mode write_error_plain_with_progname((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred write_error_spec(((parse_tree.error_util).error_spec), ((libs.globals).globals), int, int, int, int, (io.io), (io.io)).
:- mode write_error_spec((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred write_error_specs((list.list(((parse_tree.error_util).error_spec))), ((libs.globals).globals), int, int, int, int, (io.io), (io.io)).
:- mode write_error_specs((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
