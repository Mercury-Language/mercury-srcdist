:- module ((transform_hlds.ctgc).structure_reuse).domain.
:- interface.
:- use_module analysis.
:- use_module bimap.
:- use_module bool.
:- use_module hlds.
:- use_module io.
:- use_module list.
:- use_module map.
:- use_module parse_tree.
:- use_module hlds.hlds_module.
:- use_module hlds.hlds_pred.
:- use_module parse_tree.prog_data.
:- use_module parse_tree.prog_data_pragma.
:- use_module (transform_hlds.ctgc).livedata.
:- use_module (transform_hlds.ctgc).structure_sharing.
:- use_module ((transform_hlds.ctgc).structure_sharing).domain.
:- type no_clobber_args == list.list(int).
:- type ppid_no_clobbers
    --->    ppid_no_clobbers(hlds.hlds_pred.pred_proc_id, transform_hlds.ctgc.structure_reuse.domain.no_clobber_args).
:- type reuse_as.
:- type reuse_as_and_status
    --->    reuse_as_and_status(transform_hlds.ctgc.structure_reuse.domain.reuse_as, analysis.analysis_status).
:- type reuse_as_table
    --->    reuse_as_table((((transform_hlds.ctgc).structure_reuse).domain).reuse_info_map :: map.map(hlds.hlds_pred.pred_proc_id, transform_hlds.ctgc.structure_reuse.domain.reuse_as_and_status), (((transform_hlds.ctgc).structure_reuse).domain).reuse_version_map :: bimap.bimap(transform_hlds.ctgc.structure_reuse.domain.ppid_no_clobbers, hlds.hlds_pred.pred_proc_id)).
:- type reuse_condition.
:- type reuse_conditions == list.list(transform_hlds.ctgc.structure_reuse.domain.reuse_condition).
:- type reuse_not_possible_reason
    --->    no_reuse 
    ;       unknown_livedata 
    ;       reuse_condition_violated(list.list(parse_tree.prog_data.prog_var))
    ;       reuse_nodes_have_sharing(list.list(parse_tree.prog_data.prog_var)).
:- type reuse_satisfied_result
    --->    reuse_possible 
    ;       reuse_not_possible(transform_hlds.ctgc.structure_reuse.domain.reuse_not_possible_reason).
:- func from_structure_reuse_domain(parse_tree.prog_data_pragma.structure_reuse_domain) = transform_hlds.ctgc.structure_reuse.domain.reuse_as.
:- func load_structure_reuse_table(hlds.hlds_module.module_info) = transform_hlds.ctgc.structure_reuse.domain.reuse_as_table.
:- pred reuse_as_add_condition(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.structure_reuse.domain.reuse_condition, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_add_condition(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred reuse_as_add_unconditional(transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_add_unconditional(builtin.in, builtin.out) is det.
:- pred reuse_as_all_unconditional_reuses(transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_all_unconditional_reuses(builtin.in) is semidet.
:- pred reuse_as_and_status_subsumed_by(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.structure_reuse.domain.reuse_as_and_status, transform_hlds.ctgc.structure_reuse.domain.reuse_as_and_status).
:- mode reuse_as_and_status_subsumed_by(builtin.in, builtin.in, builtin.in, builtin.in) is semidet.
:- pred reuse_as_conditional_reuses(transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_conditional_reuses(builtin.in) is semidet.
:- func reuse_as_count_conditions(transform_hlds.ctgc.structure_reuse.domain.reuse_as) = int.
:- func reuse_as_from_called_procedure_to_local_reuse_as(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, parse_tree.prog_data.prog_vars, parse_tree.prog_data_pragma.live_datastructs, transform_hlds.ctgc.structure_sharing.domain.sharing_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as) = transform_hlds.ctgc.structure_reuse.domain.reuse_as.
:- func reuse_as_init = transform_hlds.ctgc.structure_reuse.domain.reuse_as.
:- func reuse_as_init_with_one_condition(transform_hlds.ctgc.structure_reuse.domain.reuse_condition) = transform_hlds.ctgc.structure_reuse.domain.reuse_as.
:- pred reuse_as_least_upper_bound(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_least_upper_bound(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- func reuse_as_least_upper_bound(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as) = transform_hlds.ctgc.structure_reuse.domain.reuse_as.
:- pred reuse_as_no_reuses(transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_no_reuses(builtin.in) is semidet.
:- pred reuse_as_rename(parse_tree.prog_data.prog_var_renaming, parse_tree.prog_data.tsubst, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_rename(builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred reuse_as_rename_using_module_info(hlds.hlds_module.module_info, hlds.hlds_pred.pred_proc_id, parse_tree.prog_data.prog_vars, list.list(parse_tree.prog_data.mer_type), parse_tree.prog_data.tvarset, hlds.hlds_pred.external_type_params, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_rename_using_module_info(builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred reuse_as_satisfied(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.livedata.livedata, transform_hlds.ctgc.structure_sharing.domain.sharing_as, parse_tree.prog_data.prog_vars, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_satisfied_result).
:- mode reuse_as_satisfied(builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- func reuse_as_short_description(transform_hlds.ctgc.structure_reuse.domain.reuse_as) = string.
:- pred reuse_as_subsumed_by(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.structure_reuse.domain.reuse_as, transform_hlds.ctgc.structure_reuse.domain.reuse_as).
:- mode reuse_as_subsumed_by(builtin.in, builtin.in, builtin.in, builtin.in) is semidet.
:- func reuse_as_table_init = transform_hlds.ctgc.structure_reuse.domain.reuse_as_table.
:- pred reuse_as_table_insert_reuse_version_proc(hlds.hlds_pred.pred_proc_id, transform_hlds.ctgc.structure_reuse.domain.no_clobber_args, hlds.hlds_pred.pred_proc_id, transform_hlds.ctgc.structure_reuse.domain.reuse_as_table, transform_hlds.ctgc.structure_reuse.domain.reuse_as_table).
:- mode reuse_as_table_insert_reuse_version_proc(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred reuse_as_table_maybe_dump(io.text_output_stream, bool.bool, hlds.hlds_module.module_info, transform_hlds.ctgc.structure_reuse.domain.reuse_as_table, io.io, io.io).
:- mode reuse_as_table_maybe_dump(builtin.in, builtin.in, builtin.in, builtin.in, builtin.di, builtin.uo) is det.
:- pred reuse_as_table_reverse_search_reuse_version_proc(transform_hlds.ctgc.structure_reuse.domain.reuse_as_table, hlds.hlds_pred.pred_proc_id, hlds.hlds_pred.pred_proc_id, list.list(int)).
:- mode reuse_as_table_reverse_search_reuse_version_proc(builtin.in, builtin.in, builtin.out, builtin.out) is det.
:- pred reuse_as_table_search(transform_hlds.ctgc.structure_reuse.domain.reuse_as_table, hlds.hlds_pred.pred_proc_id, transform_hlds.ctgc.structure_reuse.domain.reuse_as_and_status).
:- mode reuse_as_table_search(builtin.in, builtin.in, builtin.out) is semidet.
:- pred reuse_as_table_search_reuse_version_proc(transform_hlds.ctgc.structure_reuse.domain.reuse_as_table, hlds.hlds_pred.pred_proc_id, list.list(int), hlds.hlds_pred.pred_proc_id).
:- mode reuse_as_table_search_reuse_version_proc(builtin.in, builtin.in, builtin.in, builtin.out) is semidet.
:- pred reuse_as_table_set(hlds.hlds_pred.pred_proc_id, transform_hlds.ctgc.structure_reuse.domain.reuse_as_and_status, transform_hlds.ctgc.structure_reuse.domain.reuse_as_table, transform_hlds.ctgc.structure_reuse.domain.reuse_as_table).
:- mode reuse_as_table_set(builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- func reuse_condition_init(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, parse_tree.prog_data_pragma.dead_var, parse_tree.prog_data_pragma.set_of_live_var, parse_tree.prog_data_pragma.set_of_live_var, transform_hlds.ctgc.structure_sharing.domain.sharing_as) = transform_hlds.ctgc.structure_reuse.domain.reuse_condition.
:- pred reuse_condition_is_conditional(transform_hlds.ctgc.structure_reuse.domain.reuse_condition).
:- mode reuse_condition_is_conditional(builtin.in) is semidet.
:- pred reuse_condition_rename(parse_tree.prog_data.prog_var_renaming, parse_tree.prog_data.tsubst, transform_hlds.ctgc.structure_reuse.domain.reuse_condition, transform_hlds.ctgc.structure_reuse.domain.reuse_condition).
:- mode reuse_condition_rename(builtin.in, builtin.in, builtin.in, builtin.out) is det.
:- pred reuse_condition_reusable_nodes(transform_hlds.ctgc.structure_reuse.domain.reuse_condition, parse_tree.prog_data_pragma.dead_datastructs).
:- mode reuse_condition_reusable_nodes(builtin.in, builtin.out) is semidet.
:- pred reuse_condition_subsumed_by(hlds.hlds_module.module_info, hlds.hlds_pred.proc_info, transform_hlds.ctgc.structure_reuse.domain.reuse_condition, transform_hlds.ctgc.structure_reuse.domain.reuse_condition).
:- mode reuse_condition_subsumed_by(builtin.in, builtin.in, builtin.in, builtin.in) is semidet.
:- func to_structure_reuse_domain(transform_hlds.ctgc.structure_reuse.domain.reuse_as) = parse_tree.prog_data_pragma.structure_reuse_domain.
