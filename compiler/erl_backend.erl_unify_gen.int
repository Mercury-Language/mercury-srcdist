:- module (erl_backend.erl_unify_gen).
:- interface.
:- import_module maybe.
:- import_module (erl_backend.elds).
:- import_module (erl_backend.erl_code_util).
:- import_module (hlds.code_model).
:- import_module (hlds.hlds_goal).
:- import_module (parse_tree.prog_data).
:- inst (termable_cons_id) == bound(char_const(ground) ; cons(ground, ground, ground) ; float_const(ground) ; int_const(ground) ; string_const(ground) ; tuple_cons(ground)).
:- pred cons_id_to_expr(parse_tree.prog_data.cons_id, parse_tree.prog_data.prog_vars, erl_backend.elds.elds_term, erl_backend.elds.elds_expr, erl_backend.erl_code_util.erl_gen_info, erl_backend.erl_code_util.erl_gen_info).
:- mode cons_id_to_expr((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred cons_id_to_term(parse_tree.prog_data.cons_id, parse_tree.prog_data.prog_vars, erl_backend.elds.elds_term, erl_backend.elds.elds_term, erl_backend.erl_code_util.erl_gen_info, erl_backend.erl_code_util.erl_gen_info).
:- mode cons_id_to_term((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode cons_id_to_term(builtin.in(((erl_backend.erl_unify_gen).termable_cons_id)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred erl_gen_unification(hlds.hlds_goal.unification, hlds.code_model.code_model, parse_tree.prog_data.prog_context, maybe.maybe(erl_backend.elds.elds_expr), erl_backend.elds.elds_expr, erl_backend.erl_code_util.erl_gen_info, erl_backend.erl_code_util.erl_gen_info).
:- mode erl_gen_unification((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
