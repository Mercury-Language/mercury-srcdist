:- module (parse_tree.module_qual).
:- interface.
:- import_module bool.
:- import_module list.
:- import_module maybe.
:- import_module recompilation.
:- import_module (libs.globals).
:- import_module (mdbcomp.prim_data).
:- import_module (parse_tree.error_util).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_item).
:- type mq_info.
:- type partial_qualifier_info.
:- pred get_partial_qualifiers(((mdbcomp.prim_data).module_name), ((parse_tree.module_qual).partial_qualifier_info), (list.list(((mdbcomp.prim_data).module_name)))).
:- mode get_partial_qualifiers((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred module_qualify_items(((parse_tree.prog_item).item_list), ((parse_tree.prog_item).item_list), ((parse_tree.prog_data).event_spec_map), ((parse_tree.prog_data).event_spec_map), ((libs.globals).globals), ((mdbcomp.prim_data).module_name), (maybe.maybe(string)), string, ((parse_tree.module_qual).mq_info), (bool.bool), (bool.bool), (list.list(((parse_tree.error_util).error_spec))), (list.list(((parse_tree.error_util).error_spec)))).
:- mode module_qualify_items((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred mq_info_get_mode_error_flag(((parse_tree.module_qual).mq_info), (bool.bool)).
:- mode mq_info_get_mode_error_flag((builtin.in), (builtin.out)) is det.
:- pred mq_info_get_need_qual_flag(((parse_tree.module_qual).mq_info), ((parse_tree.prog_data).need_qualifier)).
:- mode mq_info_get_need_qual_flag((builtin.in), (builtin.out)) is det.
:- pred mq_info_get_partial_qualifier_info(((parse_tree.module_qual).mq_info), ((parse_tree.module_qual).partial_qualifier_info)).
:- mode mq_info_get_partial_qualifier_info((builtin.in), (builtin.out)) is det.
:- pred mq_info_get_recompilation_info(((parse_tree.module_qual).mq_info), (maybe.maybe((recompilation.recompilation_info)))).
:- mode mq_info_get_recompilation_info((builtin.in), (builtin.out)) is det.
:- pred mq_info_get_type_error_flag(((parse_tree.module_qual).mq_info), (bool.bool)).
:- mode mq_info_get_type_error_flag((builtin.in), (builtin.out)) is det.
:- pred mq_info_set_need_qual_flag(((parse_tree.prog_data).need_qualifier), ((parse_tree.module_qual).mq_info), ((parse_tree.module_qual).mq_info)).
:- mode mq_info_set_need_qual_flag((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred mq_info_set_recompilation_info((maybe.maybe((recompilation.recompilation_info))), ((parse_tree.module_qual).mq_info), ((parse_tree.module_qual).mq_info)).
:- mode mq_info_set_recompilation_info((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred qualify_clause_mode_list((list.list(((parse_tree.prog_data).mer_mode))), (list.list(((parse_tree.prog_data).mer_mode))), ((parse_tree.prog_data).prog_context), ((parse_tree.module_qual).mq_info), ((parse_tree.module_qual).mq_info), (list.list(((parse_tree.error_util).error_spec))), (list.list(((parse_tree.error_util).error_spec)))).
:- mode qualify_clause_mode_list((builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred qualify_lambda_mode_list((list.list(((parse_tree.prog_data).mer_mode))), (list.list(((parse_tree.prog_data).mer_mode))), ((parse_tree.prog_data).prog_context), ((parse_tree.module_qual).mq_info), ((parse_tree.module_qual).mq_info), (list.list(((parse_tree.error_util).error_spec))), (list.list(((parse_tree.error_util).error_spec)))).
:- mode qualify_lambda_mode_list((builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred qualify_type_qualification(((parse_tree.prog_data).mer_type), ((parse_tree.prog_data).mer_type), ((parse_tree.prog_data).prog_context), ((parse_tree.module_qual).mq_info), ((parse_tree.module_qual).mq_info), (list.list(((parse_tree.error_util).error_spec))), (list.list(((parse_tree.error_util).error_spec)))).
:- mode qualify_type_qualification((builtin.in), (builtin.out), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
