:- module (make.deps_cache).
:- interface.
:- use_module libs.
:- use_module map.
:- use_module (libs.maybe_util).
:- use_module (make.deps_set).
:- type cached_computed_module_deps == map.map(make.deps_cache.computed_module_deps_key, make.deps_cache.deps_result(make.deps_set.dependency_file_index)).
:- type cached_direct_imports == map.map(make.deps_set.module_index, make.deps_cache.module_deps_result).
:- type cached_indirect_imports == map.map(make.deps_set.module_index, make.deps_cache.module_deps_result).
:- type cached_transitive_foreign_imports == map.map(make.deps_set.module_index, make.deps_cache.module_deps_result).
:- type computed_module_deps_key
    --->    computed_module_deps_key(make.deps_set.module_index, make.deps_cache.computed_module_deps_label).
:- type computed_module_deps_label
    --->    computed_module_deps_import_012 .
:- type deps_result(T)
    --->    deps_result(((make.deps_cache).dr_success) :: libs.maybe_util.maybe_succeeded, ((make.deps_cache).dr_set) :: make.deps_set.deps_set(T)).
:- type module_deps_result == make.deps_cache.deps_result(make.deps_set.module_index).
:- type process_modules_where
    --->    process_only_modules_in_cur_dir 
    ;       process_modules_anywhere .
:- type transitive_dependencies_root
    --->    transitive_dependencies_root(make.deps_set.module_index, make.deps_cache.transitive_dependencies_type, make.deps_cache.process_modules_where).
:- type transitive_dependencies_type
    --->    interface_imports 
    ;       all_imports 
    ;       all_dependencies .
:- func init_cached_computed_module_deps = make.deps_cache.cached_computed_module_deps.
:- func init_cached_direct_imports = make.deps_cache.cached_direct_imports.
:- func init_cached_indirect_imports = make.deps_cache.cached_indirect_imports.
:- func init_cached_transitive_foreign_imports = make.deps_cache.cached_transitive_foreign_imports.
