:- module (hlds.hlds_goal).
:- interface.
:- import_module bool.
:- import_module char.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module pair.
:- import_module set.
:- import_module term.
:- import_module (hlds.hlds_data).
:- import_module (hlds.hlds_llds).
:- import_module (hlds.hlds_pred).
:- import_module (hlds.instmap).
:- import_module (mdbcomp.prim_data).
:- import_module (mdbcomp.program_representation).
:- import_module (parse_tree.prog_data).
:- type atomic_goal_type.
:- type atomic_interface_vars.
:- type builtin_state.
:- type call_unify_context.
:- type can_cgc.
:- type case.
:- type cast_kind.
:- type catch_part.
:- type cell_is_unique.
:- type cell_to_reuse.
:- type conj_type.
:- type construct_sub_info.
:- type contains_trace_goal.
:- type ctgc_goal_info.
:- type dp_coverage_goal_info.
:- type dp_goal_info.
:- type force_pruning.
:- type foreign_arg.
:- type from_ground_term_kind.
:- type generic_call.
:- type goal_feature.
:- type goal_is_mdprof_inst.
:- type goal_trivial.
:- type has_subgoals.
:- type hlds_goal.
:- type hlds_goal_code_gen_info.
:- type hlds_goal_expr.
:- type hlds_goal_info.
:- type hlds_goals.
:- type ho_values.
:- type how_to_construct.
:- type is_conditional.
:- type is_existential_construction.
:- type is_first_disjunct.
:- type missed_message.
:- type mode_constr_goal_info.
:- type needs_update.
:- type port_counts_give_coverage_after.
:- type promise_solutions_kind.
:- type rbmm_goal_info.
:- type removable.
:- type reuse_description.
:- type scope_reason.
:- type short_reuse_description.
:- type shorthand_goal_expr.
:- type static_cons.
:- type tagged_case.
:- type term_size_value.
:- type trace_mutable_var_hlds.
:- type try_io_state_vars.
:- type uni_mode.
:- type unification.
:- type unify_context.
:- type unify_main_context.
:- type unify_mode.
:- type unify_rhs.
:- type unify_sub_context.
:- type unify_sub_contexts.
:- inst (plain_call) == bound(hlds_goal(((hlds.hlds_goal).plain_call_expr), ground)).
:- inst (plain_call_expr) == bound(plain_call(ground, ground, ground, ground, ground, ground)).
:- inst (rhs_lambda_goal) == bound(rhs_lambda_goal(ground, ground, ground, ground, ground, ground, ground, ground, ground)).
