:- module (parse_tree.prog_io_type_defn).
:- interface.
:- import_module list.
:- import_module maybe.
:- import_module term.
:- import_module varset.
:- import_module (mdbcomp.sym_name).
:- import_module (parse_tree.prog_data).
:- import_module (parse_tree.prog_io_util).
:- import_module (parse_tree.prog_item).
:- pred parse_type_decl_where_part_if_present(parse_tree.prog_data.is_solver_type, mdbcomp.sym_name.module_name, varset.varset, term.term, term.term, parse_tree.prog_io_util.maybe3(maybe.maybe(parse_tree.prog_data.solver_type_details), maybe.maybe(parse_tree.prog_data.unify_compare), maybe.maybe(list.list(parse_tree.prog_data.sym_name_and_arity)))).
:- mode parse_type_decl_where_part_if_present((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred parse_type_defn(mdbcomp.sym_name.module_name, varset.varset, term.term, parse_tree.prog_io_util.decl_attrs, parse_tree.prog_data.prog_context, int, parse_tree.prog_io_util.maybe1(parse_tree.prog_item.item)).
:- mode parse_type_defn((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred parse_type_defn_head(mdbcomp.sym_name.module_name, varset.varset, term.term, parse_tree.prog_io_util.maybe2(mdbcomp.sym_name.sym_name, list.list(parse_tree.prog_data.type_param))).
:- mode parse_type_defn_head((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
