:- module string.parse_util.
:- interface.
:- use_module list.
:- type gather_ended_by
    --->    found_end_of_string 
    ;       found_percent(list.list(char.char)).
:- type poly_kind
    --->    poly_kind_char 
    ;       poly_kind_str 
    ;       poly_kind_int 
    ;       poly_kind_int8 
    ;       poly_kind_int16 
    ;       poly_kind_int32 
    ;       poly_kind_int64 
    ;       poly_kind_uint 
    ;       poly_kind_uint8 
    ;       poly_kind_uint16 
    ;       poly_kind_uint32 
    ;       poly_kind_uint64 
    ;       poly_kind_float .
:- type string_format_error
    --->    error_no_specifier(int, int)
    ;       error_unknown_specifier(int, char.char)
    ;       error_wrong_polytype(int, char.char, string.parse_util.poly_kind)
    ;       error_no_polytype(int, char.char)
    ;       error_nonint_star_width(int, string.parse_util.poly_kind)
    ;       error_missing_star_width(int)
    ;       error_nonint_star_prec(int, string.parse_util.poly_kind)
    ;       error_missing_star_prec(int)
    ;       error_extra_polytypes(int, int).
:- type string_format_flag_hash
    --->    flag_hash_clear 
    ;       flag_hash_set .
:- type string_format_flag_minus
    --->    flag_minus_clear 
    ;       flag_minus_set .
:- type string_format_flag_plus
    --->    flag_plus_clear 
    ;       flag_plus_set .
:- type string_format_flag_space
    --->    flag_space_clear 
    ;       flag_space_set .
:- type string_format_flag_zero
    --->    flag_zero_clear 
    ;       flag_zero_set .
:- type string_format_flags
    --->    string_format_flags((string.parse_util).flag_hash :: string.parse_util.string_format_flag_hash, (string.parse_util).flag_space :: string.parse_util.string_format_flag_space, (string.parse_util).flag_zero :: string.parse_util.string_format_flag_zero, (string.parse_util).flag_minus :: string.parse_util.string_format_flag_minus, (string.parse_util).flag_plus :: string.parse_util.string_format_flag_plus).
:- type string_format_float_kind
    --->    kind_e_scientific_lc 
    ;       kind_e_scientific_uc 
    ;       kind_f_plain_lc 
    ;       kind_f_plain_uc 
    ;       kind_g_flexible_lc 
    ;       kind_g_flexible_uc .
:- type string_format_int_base
    --->    base_octal 
    ;       base_decimal 
    ;       base_hex_lc 
    ;       base_hex_uc 
    ;       base_hex_p .
:- type string_format_maybe_prec
    --->    no_specified_prec 
    ;       specified_prec(int).
:- type string_format_maybe_width
    --->    no_specified_width 
    ;       specified_width(int).
:- pred gather_flag_chars(list.list(char.char), list.list(char.char), string.parse_util.string_format_flags, string.parse_util.string_format_flags).
:- mode gather_flag_chars(builtin.in, builtin.out, builtin.in, builtin.out) is det.
:- pred gather_non_percent_chars(list.list(char.char), list.list(char.char), string.parse_util.gather_ended_by).
:- mode gather_non_percent_chars(builtin.in, builtin.out, builtin.out) is det.
:- pred get_nonzero_number_prefix(list.list(char.char), list.list(char.char), int).
:- mode get_nonzero_number_prefix(builtin.in, builtin.out, builtin.out) is semidet.
:- pred get_number_prefix(list.list(char.char), list.list(char.char), int).
:- mode get_number_prefix(builtin.in, builtin.out, builtin.out) is det.
:- func string_format_error_to_msg(string.parse_util.string_format_error) = string.
