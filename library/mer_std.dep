# Automatically generated dependencies for module `mer_std'
# generated from source file `mer_std.m'
# Generated by the Mercury compiler, version rotd-2014-12-12
# configured for x86_64-apple-darwin13.4.0.

ifneq ($(EXT_FOR_EXE),)
.PHONY : mer_std
mer_std : mer_std$(EXT_FOR_EXE)
endif
ifeq ($(findstring il,$(GRADE)),il)
mer_std : mer_std.exe
mer_std.exe : $(mer_std.dlls) $(mer_std.foreign_dlls)
else
 ifeq ($(findstring java,$(GRADE)),java)
mer_std : $(mer_std.classes)
 else
mer_std$(EXT_FOR_EXE) : $(mer_std.cs_or_ss) $(mer_std.os) mer_std_init.$O \
		$(foreach @,mer_std,$(ALL_MLOBJS)) \
		$(foreach @,mer_std,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mer_std$(EXT_FOR_EXE) mer_std_init.$O \
		$(mer_std.os) \
		$(foreach @,mer_std,$(ALL_MLOBJS)) $(ALL_MLLIBS)
 endif
endif
.PHONY : libmer_std
ifeq ($(findstring il,$(GRADE)),il)
libmer_std : $(mer_std.dlls) $(mer_std.foreign_dlls) \
		$(mer_std.ints) $(mer_std.int3s) $(mer_std.opts) $(mer_std.trans_opts) mer_std.init

else
 ifeq ($(findstring java,$(GRADE)),java)
libmer_std : mer_std.jar \
		$(mer_std.ints) $(mer_std.int3s) $(mer_std.opts) $(mer_std.trans_opts) mer_std.init

 else
libmer_std : libmer_std.$A libmer_std.$(EXT_FOR_SHARED_LIB) \
		$(mer_std.ints) $(mer_std.int3s) $(mer_std.opts) $(mer_std.trans_opts) mer_std.init

 endif
endif
ifneq ($(EXT_FOR_SHARED_LIB),$A)
libmer_std.$(EXT_FOR_SHARED_LIB) : $(mer_std.cs_or_ss) $(mer_std.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_std,$(ALL_MLOBJS))) \
		$(foreach @,mer_std,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmer_std.$(EXT_FOR_SHARED_LIB) \
		$(mer_std.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_std,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

libmer_std.$A : $(mer_std.cs_or_ss) $(mer_std.os) \
		$(foreach @,mer_std,$(ALL_MLOBJS))
	rm -f libmer_std.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmer_std.$A $(mer_std.os) \
		$(foreach @,mer_std,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmer_std.$A

mer_std.jar : $(mer_std.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mer_std.jar $(mer_std.classes)

mer_std.init : mer_std.dep $(mer_std.cs)
	echo > mer_std.init
	$(MKLIBINIT) $(mer_std.cs) >> mer_std.init
	$(EXTRA_INIT_COMMAND) >> mer_std.init
force-mer_std_init :

mer_std_init.c : force-mer_std_init $(mer_std.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mer_std_init.c.tmp $(mer_std.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mer_std_init.c

.PHONY : libmer_std.install_ints
libmer_std.install_ints : $(mer_std.ints) $(mer_std.int3s) $(mer_std.int0s) $(mer_std.opts) $(mer_std.trans_opts) $(mer_std.module_deps)  install_lib_dirs
	files="$(mer_std.ints) $(mer_std.int3s) $(mer_std.int0s) $(mer_std.opts) $(mer_std.trans_opts) $(mer_std.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 int0 opt trans_opt module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

.PHONY : libmer_std.install_opts
libmer_std.install_opts : $(mer_std.opts) $(mer_std.trans_opts) install_grade_dirs
	files="$(mer_std.opts) $(mer_std.trans_opts) "; \
	for file in $$files; do \
		target="$(INSTALL_GRADE_INT_DIR)/`basename $$file`";\
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in  opt trans_opt; do \
		dir="$(INSTALL_GRADE_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
				$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_GRADE_INT_DIR)"/*.$$ext \
				"$$dir"; \
		} || exit 1; \
	done

.PHONY : libmer_std.install_hdrs
libmer_std.install_hdrs : $(mer_std.mhs) install_lib_dirs
ifeq ($(mer_std.mhs),)
	@:
else
	for hdr in $(mer_std.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

.PHONY : libmer_std.install_grade_hdrs
libmer_std.install_grade_hdrs : $(mer_std.mihs) install_grade_dirs
ifeq ($(mer_std.mihs),)
	@:
else
	for hdr in $(mer_std.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

.PHONY : mer_std.check
mer_std.check : $(mer_std.errs)

.PHONY : mer_std.ints
mer_std.ints : $(mer_std.dates)

.PHONY : mer_std.int3s
mer_std.int3s : $(mer_std.date3s)

.PHONY : mer_std.opts
mer_std.opts : $(mer_std.optdates)

.PHONY : mer_std.trans_opts
mer_std.trans_opts : $(mer_std.trans_opt_dates)

.PHONY : mer_std.ils
mer_std.ils : $(mer_std.ils)

.PHONY : mer_std.javas
mer_std.javas : $(mer_std.javas)

.PHONY : mer_std.classes
mer_std.classes : $(mer_std.classes)

.PHONY : mer_std.all_ints
mer_std.all_ints : $(mer_std.dates)

.PHONY : mer_std.all_int3s
mer_std.all_int3s : $(mer_std.date3s)

.PHONY : mer_std.all_opts
mer_std.all_opts : $(mer_std.optdates)

.PHONY : mer_std.all_trans_opts
mer_std.all_trans_opts : $(mer_std.trans_opt_dates)

clean_local : mer_std.clean
.PHONY : mer_std.clean
mer_std.clean :
	-echo $(mer_std.dirs) | xargs rm -rf 
	-echo $(mer_std.cs) mer_std_init.c | xargs rm -f
	-echo $(mer_std.mihs) | xargs rm -f
	-echo $(mer_std.all_os) mer_std_init.$O | xargs rm -f
	-echo $(mer_std.all_pic_os) mer_std_init.pic_o | xargs rm -f
	-echo $(mer_std.c_dates) | xargs rm -f
	-echo $(mer_std.il_dates) | xargs rm -f
	-echo $(mer_std.java_dates) | xargs rm -f
	-echo $(mer_std.useds) | xargs rm -f
	-echo $(mer_std.ils) | xargs rm -f
	-echo $(mer_std.javas) | xargs rm -f
	-echo $(mer_std.profs) | xargs rm -f
	-echo $(mer_std.errs) | xargs rm -f
	-echo $(mer_std.foreign_cs) | xargs rm -f

realclean_local : mer_std.realclean
.PHONY : mer_std.realclean
mer_std.realclean : mer_std.clean
	-echo $(mer_std.dates) | xargs rm -f
	-echo $(mer_std.date0s) | xargs rm -f
	-echo $(mer_std.date3s) | xargs rm -f
	-echo $(mer_std.optdates) | xargs rm -f
	-echo $(mer_std.trans_opt_dates) | xargs rm -f
	-echo $(mer_std.ints) | xargs rm -f
	-echo $(mer_std.all_int0s) | xargs rm -f
	-echo $(mer_std.int3s) | xargs rm -f
	-echo $(mer_std.opts) | xargs rm -f
	-echo $(mer_std.trans_opts) | xargs rm -f
	-echo $(mer_std.analysiss) | xargs rm -f
	-echo $(mer_std.requests) | xargs rm -f
	-echo $(mer_std.imdgs) | xargs rm -f
	-echo $(mer_std.ds) | xargs rm -f
	-echo $(mer_std.module_deps) | xargs rm -f
	-echo $(mer_std.all_mhs) | xargs rm -f
	-echo $(mer_std.all_mihs) | xargs rm -f
	-echo $(mer_std.dlls) | xargs rm -f
	-echo $(mer_std.foreign_dlls) | xargs rm -f
	-echo $(mer_std.classes) | xargs rm -f
	-rm -f mer_std$(EXT_FOR_EXE) mer_std.init libmer_std.$A libmer_std.$(EXT_FOR_SHARED_LIB) mer_std.jar mer_std.dep mer_std.dv

