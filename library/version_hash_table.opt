:- module version_hash_table.
:- use_module array.
:- use_module assoc_list.
:- use_module bool.
:- use_module builtin.
:- use_module char.
:- use_module deconstruct.
:- use_module exception.
:- use_module float.
:- use_module int.
:- use_module list.
:- use_module pair.
:- use_module private_builtin.
:- use_module require.
:- use_module string.
:- use_module unit.
:- use_module univ.
:- use_module version_array.

:- type buckets(K, V) == version_array.version_array(version_hash_table.hash_table_alist(K, V)).
:- type hash_table_alist(K, V)
    --->    ht_nil 
    ;       ht_single(K, V)
    ;       ht_cons(K, V, version_hash_table.hash_table_alist(K, V)).
:- type version_hash_table(K, V)
    --->    ht((version_hash_table.ht_num_occupants) :: int, (version_hash_table.ht_max_occupants) :: int, (version_hash_table.ht_hash_pred) :: pred(K, int), (version_hash_table.ht_buckets) :: version_array.version_array(version_hash_table.hash_table_alist(K, V)))
	where	equality is (version_hash_table.equal).

:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", version_array).
:- pragma foreign_import_module("C", version_hash_table).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("C#", version_array).
:- pragma foreign_import_module("C#", version_hash_table).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Java", version_array).
:- pragma foreign_import_module("Java", version_hash_table).
:- pragma foreign_import_module("IL", array).
:- pragma foreign_import_module("IL", io).
:- pragma foreign_import_module("Erlang", array).
:- pragma foreign_import_module("Erlang", io).

:- pred version_hash_table.fold_f((func(K_1, V_2, T_3) = T_3), version_hash_table.hash_table_alist(K_1, V_2), T_3, T_3).
:- mode version_hash_table.fold_f((func((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode version_hash_table.fold_f((func((builtin.in), (builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- pred version_hash_table.fold_p(pred(K_1, V_2, T_3, T_3), version_hash_table.hash_table_alist(K_1, V_2), T_3, T_3).
:- mode version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- pred version_hash_table.from_assoc_list_2(list.list(pair.pair(K_1, V_2)), version_hash_table.version_hash_table(K_1, V_2), version_hash_table.version_hash_table(K_1, V_2)).
:- mode version_hash_table.from_assoc_list_2((builtin.in), (builtin.in), (builtin.out)) is det.
:- func version_hash_table.init_2(pred(K_1, int), int, float, bool.bool) = version_hash_table.version_hash_table(K_1, V_2).
:- mode version_hash_table.init_2(builtin.in((version_hash_table.hash_pred)), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det.

version_hash_table.char_hash(V_3, V_4) :-
    V_5 = char.to_int(V_3),
    version_hash_table.int_hash(V_5, V_4).

version_hash_table.copy(V_3) = V_4 :-
    promise_equivalent_solutions [V_4] (
      V_3 = version_hash_table.ht(V_5, V_6, V_7, V_8) : version_hash_table.version_hash_table(K_1, V_2),
      V_9 = version_array.copy(V_8),
      V_4 = version_hash_table.ht(V_5, V_6, V_7, V_9) : version_hash_table.version_hash_table(K_1, V_2)
    ).

version_hash_table.delete(V_4, V_5, V_3) :-
    V_3 = version_hash_table.delete(V_5, V_4).

version_hash_table.det_insert(V_5, V_6, V_7, V_4) :-
    V_4 = version_hash_table.det_insert(V_7, V_5, V_6).

version_hash_table.det_update(V_5, V_6, V_7, V_4) :-
    V_4 = version_hash_table.det_update(V_7, V_5, V_6).

version_hash_table.elem(V_4, V_5) = V_3 :-
    V_3 = version_hash_table.lookup(V_5, V_4).

version_hash_table.'elem :='(V_5, V_6, V_7) = V_4 :-
    V_4 = version_hash_table.set(V_6, V_5, V_7).

version_hash_table.float_hash(V_3, V_2) :-
    V_2 = float.hash(V_3).

version_hash_table.fold(V_5, V_6, V_9, V_10) :-
    promise_equivalent_solutions [V_8] (
      V_6 = version_hash_table.ht(V_13, V_14, V_15, V_8) : version_hash_table.version_hash_table(K_1, V_2)
    ),
    V_11 = version_hash_table.fold_p(V_5) : pred(version_hash_table.hash_table_alist(K_1, V_2), T_3, T_3),
    version_array.foldl(V_11, V_8, V_9, V_10).

version_hash_table.fold(V_5, V_6, V_7) = V_8 :-
    promise_equivalent_solutions [V_9] (
      V_6 = version_hash_table.ht(V_11, V_12, V_13, V_9) : version_hash_table.version_hash_table(K_1, V_2)
    ),
    V_10 = version_hash_table.fold_f(V_5) : pred(version_hash_table.hash_table_alist(K_1, V_2), T_3, T_3),
    version_array.foldl(V_10, V_9, V_7, V_8).

version_hash_table.fold_f(V_5, V_6, V_7, V_8) :-
    ( % disjunction
      V_6 = version_hash_table.ht_nil : version_hash_table.hash_table_alist(K_1, V_2),
      V_8 = V_7
    ;
      V_6 = version_hash_table.ht_single(V_9, V_10) : version_hash_table.hash_table_alist(K_1, V_2),
      V_8 = apply(V_5, V_9, V_10, V_7)
    ;
      V_6 = version_hash_table.ht_cons(V_13, V_14, V_11) : version_hash_table.hash_table_alist(K_1, V_2),
      V_12 = apply(V_5, V_13, V_14, V_7),
      version_hash_table.fold_f(V_5, V_11, V_12, V_8)
    ).

version_hash_table.fold_p(V_5, V_6, V_11, V_12) :-
    ( % disjunction
      V_6 = version_hash_table.ht_nil : version_hash_table.hash_table_alist(K_1, V_2),
      V_12 = V_11
    ;
      V_6 = version_hash_table.ht_single(V_8, V_9) : version_hash_table.hash_table_alist(K_1, V_2),
      call(V_5, V_8, V_9, V_11, V_12)
    ;
      V_6 = version_hash_table.ht_cons(V_16, V_17, V_10) : version_hash_table.hash_table_alist(K_1, V_2),
      call(V_5, V_16, V_17, V_11, V_13),
      version_hash_table.fold_p(V_5, V_10, V_13, V_12)
    ).

version_hash_table.from_assoc_list(V_4, V_5) = V_6 :-
    V_7 = version_hash_table.init_default(V_4),
    version_hash_table.from_assoc_list_2(V_5, V_7, V_6).

version_hash_table.from_assoc_list(V_6, V_7, V_8, V_9) = V_10 :-
    V_11 = version_hash_table.init(V_6, V_7, V_8),
    version_hash_table.from_assoc_list_2(V_9, V_11, V_10).

version_hash_table.init(V_5, V_6, V_7) = V_4 :-
    V_4 = version_hash_table.init_2(V_5, V_6, V_7, V_8),
    V_8 = bool.yes : bool.bool.

version_hash_table.init_2(V_6, V_7, V_8, V_9) = V_10 :-
    (if
      V_14 = 0 : int,
      int.(V_7 =< V_14)
    then
      V_15 = exception.software_error(V_16) : exception.software_error,
      V_16 = "version_hash_table.new_hash_table: N =< 0" : string,
      exception.throw(V_15)
    else
      (if
        V_17 = int.bits_per_int,
        int.(V_7 >= V_17)
      then
        V_18 = exception.software_error(V_19) : exception.software_error,
        V_19 = "version_hash_table.new: N >= int.bits_per_int" : string,
        exception.throw(V_18)
      else
        (if
          V_20 = 0.0 : float,
          float.(V_8 =< V_20)
        then
          V_21 = exception.software_error(V_22) : exception.software_error,
          V_22 = "version_hash_table.new: MaxOccupancy =< 0.0" : string,
          exception.throw(V_21)
        else
          V_11 = int.(V_23 << V_7),
          V_23 = 1 : int,
          V_12 = float.ceiling_to_int(V_24),
          V_24 = float.(V_25 * V_8),
          V_25 = float.float(V_11),
          ( % disjunction
            V_9 = bool.yes : bool.bool,
            V_13 = version_array.init(V_11, V_27),
            V_27 = version_hash_table.ht_nil : version_hash_table.hash_table_alist(K_1, V_2)
          ;
            V_9 = bool.no : bool.bool,
            V_13 = version_array.unsafe_init(V_11, V_26),
            V_26 = version_hash_table.ht_nil : version_hash_table.hash_table_alist(K_1, V_2)
          ),
          V_10 = version_hash_table.ht(V_28, V_12, V_6, V_13) : version_hash_table.version_hash_table(K_1, V_2),
          V_28 = 0 : int
        )
      )
    ).

version_hash_table.init_default(V_3) = V_2 :-
    V_2 = version_hash_table.init(V_3, V_4, V_5),
    V_4 = 7 : int,
    V_5 = 0.9 : float.

:- pragma foreign_proc("C", version_hash_table.int_hash(N :: (builtin.in), H :: (builtin.out)), [will_not_call_mercury, thread_safe, tabled_for_io, promise_pure, may_modify_trail], "
    const int c2 = 0x27d4eb2d; /* a prime or an odd constant */
    MR_Unsigned key;

    key = N;

    if (sizeof(MR_Word) == 4) {
        key = (key ^ 61) ^ (key >> 16);
        key = key + (key << 3);
        key = key ^ (key >> 4);
        key = key * c2;
        key = key ^ (key >> 15);
    } else {
        key = (~key) + (key << 21); /* key = (key << 21) - key - 1; */
        key = key ^ (key >> 24);
        key = (key + (key << 3)) + (key << 8); /* key * 265 */
        key = key ^ (key >> 14);
        key = (key + (key << 2)) + (key << 4); /* key * 21 */
        key = key ^ (key >> 28);
        key = key + (key << 31);
    }

    H = key;
").

version_hash_table.lookup(V_4, V_5) = V_3 :-
    (if
      V_6 = version_hash_table.search(V_4, V_5)
    then
      V_3 = V_6
    else
      V_3 = require.func_error(V_7),
      V_7 = "version_hash_table.lookup: key not found" : string
    ).

version_hash_table.num_buckets(V_3) = V_4 :-
    promise_equivalent_solutions [V_4] (
      V_4 = version_array.size(V_5),
      V_3 = version_hash_table.ht(V_6, V_7, V_8, V_5) : version_hash_table.version_hash_table(K_1, V_2)
    ).

version_hash_table.num_occupants(V_3) = V_4 :-
    promise_equivalent_solutions [V_4] (
      V_3 = version_hash_table.ht(V_4, V_5, V_6, V_7) : version_hash_table.version_hash_table(K_1, V_2)
    ).

version_hash_table.search(V_4, V_5, V_3) :-
    V_3 = version_hash_table.search(V_4, V_5).

version_hash_table.set(V_5, V_6, V_7, V_4) :-
    V_4 = version_hash_table.set(V_7, V_5, V_6).

version_hash_table.string_hash(V_3, V_2) :-
    V_2 = string.hash(V_3).

version_hash_table.unsafe_init(V_5, V_6, V_7) = V_4 :-
    V_4 = version_hash_table.init_2(V_5, V_6, V_7, V_8),
    V_8 = bool.no : bool.bool.

version_hash_table.unsafe_init_default(V_3) = V_2 :-
    V_2 = version_hash_table.unsafe_init(V_3, V_4, V_5),
    V_4 = 7 : int,
    V_5 = 0.9 : float.

:- pragma exceptions(predicate, (version_hash_table.char_hash), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.copy), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.det_insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.det_insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.det_update), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.det_update), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.elem), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.'elem :='), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.equal), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.float_hash), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold), 4, 5, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.fold), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_f), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_f), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_p), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_p), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_p), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_p), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_p), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.fold_p), 4, 5, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.from_assoc_list), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.from_assoc_list_2), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.generic_hash), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.init), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.init_2), 5, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.init_default), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.int_hash), 2, 0, will_not_throw).
:- pragma exceptions(function, (version_hash_table.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.num_buckets), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.num_occupants), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (version_hash_table.search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (version_hash_table.string_hash), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.to_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.unsafe_init), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (version_hash_table.unsafe_init_default), 2, 0, may_throw(user_exception)).

:- pragma termination_info(version_hash_table.char_hash((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.copy((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.delete((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.delete((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.det_insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.det_insert((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.det_update((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.det_update((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.elem((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.'elem :='((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.equal((builtin.in), (builtin.in)), infinite, cannot_loop).
:- pragma termination_info(version_hash_table.float_hash((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_f((func((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_f((func((builtin.in), (builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(version_hash_table.from_assoc_list(builtin.in((version_hash_table.hash_pred)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.from_assoc_list(builtin.in((version_hash_table.hash_pred)), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.from_assoc_list_2((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.generic_hash((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.init(builtin.in((version_hash_table.hash_pred)), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.init_2(builtin.in((version_hash_table.hash_pred)), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.init_default(builtin.in((version_hash_table.hash_pred))) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.int_hash((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(version_hash_table.lookup((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.num_buckets((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.num_occupants((builtin.in)) = (builtin.out), finite(-4, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(version_hash_table.search((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.search((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.set((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.set((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.string_hash((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(version_hash_table.to_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.unsafe_init(builtin.in((version_hash_table.hash_pred)), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.unsafe_init_default(builtin.in((version_hash_table.hash_pred))) = (builtin.out), infinite, can_loop).
