:- module assoc_list.
:- interface.
:- import_module list.
:- import_module pair.
:- type assoc_list(T) == (list.list((pair.pair(T, T)))).
:- type assoc_list(K, V) == (list.list((pair.pair(K, V)))).
:- func det_elem(K, (assoc_list.assoc_list(K, V))) = V is det.
:- func elem(K, (assoc_list.assoc_list(K, V))) = V is semidet.
:- func from_corresponding_lists((list.list(K)), (list.list(V))) = (assoc_list.assoc_list(K, V)).
:- pred from_corresponding_lists((list.list(K)), (list.list(V)), (assoc_list.assoc_list(K, V))).
:- mode from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred keys((assoc_list.assoc_list(K, V)), (list.list(K))).
:- mode keys((builtin.in), (builtin.out)) is det.
:- func keys((assoc_list.assoc_list(K, V))) = (list.list(K)).
:- pred keys_and_values((assoc_list.assoc_list(K, V)), (list.list(K)), (list.list(V))).
:- mode keys_and_values((builtin.in), (builtin.out), (builtin.out)) is det.
:- func map_keys_only(((func K) = L), (assoc_list.assoc_list(K, V))) = (assoc_list.assoc_list(L, V)).
:- func map_values((func(K, V) = W), (assoc_list.assoc_list(K, V))) = (assoc_list.assoc_list(K, W)).
:- func map_values_only(((func V) = W), (assoc_list.assoc_list(K, V))) = (assoc_list.assoc_list(K, W)).
:- pred remove((assoc_list.assoc_list(K, V)), K, V, (assoc_list.assoc_list(K, V))).
:- mode remove((builtin.in), (builtin.in), (builtin.out), (builtin.out)) is semidet.
:- func reverse_members((assoc_list.assoc_list(K, V))) = (assoc_list.assoc_list(V, K)).
:- pred reverse_members((assoc_list.assoc_list(K, V)), (assoc_list.assoc_list(V, K))).
:- mode reverse_members((builtin.in), (builtin.out)) is det.
:- pred search((assoc_list.assoc_list(K, V)), K, V).
:- mode search((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func values((assoc_list.assoc_list(K, V))) = (list.list(V)).
:- pred values((assoc_list.assoc_list(K, V)), (list.list(V))).
:- mode values((builtin.in), (builtin.out)) is det.
