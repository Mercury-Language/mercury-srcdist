:- module math.

:- pragma termination_info(math.acos(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.asin(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.atan(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.atan2(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.ceiling(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.cos(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.cosh(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info((math.e) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.exp(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.floor(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.fma(builtin.in, builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info((math.have_fma), finite(0, []), cannot_loop).
:- pragma termination_info(math.ln(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.log(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.log10(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.log2(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info((math.pi) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.pow(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.round(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.sin(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.sinh(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.solve_quadratic(builtin.in, builtin.in, builtin.in) = builtin.out, finite(2, [no, no, no, no]), cannot_loop).
:- pragma termination_info(math.sqrt(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.tan(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.tanh(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.truncate(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_acos(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_asin(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_ln(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_log(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_log10(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_log2(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_pow(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(math.unchecked_sqrt(builtin.in) = builtin.out, infinite, cannot_loop).

:- pragma exceptions(function, math.acos, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.asin, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.atan, 1, 0, will_not_throw).
:- pragma exceptions(function, math.atan2, 2, 0, will_not_throw).
:- pragma exceptions(function, math.ceiling, 1, 0, will_not_throw).
:- pragma exceptions(function, math.cos, 1, 0, will_not_throw).
:- pragma exceptions(function, math.cosh, 1, 0, will_not_throw).
:- pragma exceptions(function, math.e, 0, 0, will_not_throw).
:- pragma exceptions(function, math.exp, 1, 0, will_not_throw).
:- pragma exceptions(function, math.floor, 1, 0, will_not_throw).
:- pragma exceptions(function, math.fma, 3, 0, will_not_throw).
:- pragma exceptions(predicate, math.have_fma, 0, 0, will_not_throw).
:- pragma exceptions(function, math.ln, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.log, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.log10, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.log2, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.pi, 0, 0, will_not_throw).
:- pragma exceptions(function, math.pow, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.round, 1, 0, will_not_throw).
:- pragma exceptions(function, math.sin, 1, 0, will_not_throw).
:- pragma exceptions(function, math.sinh, 1, 0, will_not_throw).
:- pragma exceptions(function, math.solve_quadratic, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.sqrt, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, math.tan, 1, 0, will_not_throw).
:- pragma exceptions(function, math.tanh, 1, 0, will_not_throw).
:- pragma exceptions(function, math.truncate, 1, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_acos, 1, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_asin, 1, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_ln, 1, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_log, 2, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_log10, 1, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_log2, 1, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_pow, 2, 0, will_not_throw).
:- pragma exceptions(function, math.unchecked_sqrt, 1, 0, will_not_throw).
