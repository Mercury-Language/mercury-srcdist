:- module exception.
:- use_module builtin.
:- use_module io.
:- use_module list.
:- use_module maybe.
:- use_module private_builtin.
:- use_module solutions.
:- use_module stm_builtin.
:- use_module store.
:- use_module string.
:- use_module unit.
:- use_module univ.
:- type handler(T) == pred(univ.univ, T).
:- inst (handler) == (pred((builtin.in), (builtin.out)) is det).
:- pragma foreign_import_module("C", exception).
:- pragma foreign_import_module("C#", exception).
:- pragma foreign_import_module("Java", exception).
:- pragma foreign_import_module("IL", exception).
:- pragma foreign_import_module("Erlang", exception).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("IL", io).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", stm_builtin).
:- pragma foreign_import_module("C", store).
:- pragma foreign_import_module("C#", store).
:- pragma foreign_import_module("Java", store).
:- pragma foreign_import_module("IL", store).
:- pragma foreign_import_module("Erlang", store).
:- pred exception.finally_2(pred(T_1, io.state, io.state), pred(io.res, io.state, io.state), T_1, io.res, io.state, io.state).
:- mode exception.finally_2((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode exception.finally_2((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pragma promise_pure((exception.finally_2)/6).
:- pred exception.wrap_success((pred T_1), exception.exception_result(T_1)).
:- mode exception.wrap_success((pred((builtin.out)) is det), builtin.out((exception.cannot_fail))) is det.
:- mode exception.wrap_success((pred((builtin.out)) is semidet), builtin.out((exception.cannot_fail))) is semidet.
:- mode exception.wrap_success((pred((builtin.out)) is multi), builtin.out((exception.cannot_fail))) is multi.
:- mode exception.wrap_success((pred((builtin.out)) is nondet), builtin.out((exception.cannot_fail))) is nondet.
:- mode exception.wrap_success((pred((builtin.out)) is cc_multi), builtin.out((exception.cannot_fail))) is cc_multi.
:- mode exception.wrap_success((pred((builtin.out)) is cc_nondet), builtin.out((exception.cannot_fail))) is cc_nondet.
:- pred exception.wrap_exception(univ.univ, exception.exception_result(T_1)).
:- mode exception.wrap_exception((builtin.in), (builtin.out)) is det.
:- pred exception.unsafe_call_io_goal(pred(T_1, io.state, io.state), io.state, {T_1, io.state}).
:- mode exception.unsafe_call_io_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)) is det.
:- mode exception.unsafe_call_io_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)) is cc_multi.
:- pred exception.unsafe_call_store_goal(pred(T_1, store.store(S_2), store.store(S_2)), store.store(S_2), {T_1, store.store(S_2)}).
:- mode exception.unsafe_call_store_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)) is det.
:- mode exception.unsafe_call_store_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)) is cc_multi.
:- pred exception.unsafe_call_transaction_goal(pred(T_1, stm_builtin.stm, stm_builtin.stm), stm_builtin.stm, {T_1, stm_builtin.stm}).
:- mode exception.unsafe_call_transaction_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)) is det.
:- mode exception.unsafe_call_transaction_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)) is cc_multi.
:- pred exception.catch_impl((pred T), pred(univ.univ, T), T).
:- mode exception.catch_impl((pred((builtin.out)) is det), builtin.in((exception.handler)), (builtin.out)) is det.
:- mode exception.catch_impl((pred((builtin.out)) is semidet), builtin.in((exception.handler)), (builtin.out)) is semidet.
:- mode exception.catch_impl((pred((builtin.out)) is cc_multi), builtin.in((exception.handler)), (builtin.out)) is cc_multi.
:- mode exception.catch_impl((pred((builtin.out)) is cc_nondet), builtin.in((exception.handler)), (builtin.out)) is cc_nondet.
:- mode exception.catch_impl((pred((builtin.out)) is multi), builtin.in((exception.handler)), (builtin.out)) is multi.
:- mode exception.catch_impl((pred((builtin.out)) is nondet), builtin.in((exception.handler)), (builtin.out)) is nondet.
:- pragma promise_pure((exception.catch_impl)/3).
:- pred exception.builtin_catch((pred T_1), pred(univ.univ, T_1), T_1).
:- mode exception.builtin_catch((pred((builtin.out)) is det), builtin.in((exception.handler)), (builtin.out)) is det.
:- mode exception.builtin_catch((pred((builtin.out)) is semidet), builtin.in((exception.handler)), (builtin.out)) is semidet.
:- mode exception.builtin_catch((pred((builtin.out)) is cc_multi), builtin.in((exception.handler)), (builtin.out)) is cc_multi.
:- mode exception.builtin_catch((pred((builtin.out)) is cc_nondet), builtin.in((exception.handler)), (builtin.out)) is cc_nondet.
:- mode exception.builtin_catch((pred((builtin.out)) is multi), builtin.in((exception.handler)), (builtin.out)) is multi.
:- mode exception.builtin_catch((pred((builtin.out)) is nondet), builtin.in((exception.handler)), (builtin.out)) is nondet.
exception.try_io(IO_Goal_5, Result_6, IO0_7, IO_8) :-
    V_13 = exception.unsafe_call_io_goal(IO_Goal_5, IO0_7) : (pred {T_1, io.state}),
    exception.(try V_13 Result0_9),
    ( % disjunction
      Result0_9 = exception.succeeded(V_14) : exception.exception_result({T_1, io.state}),
      V_14 = {Res_10, IO1_11} : {T_1, io.state},
      Result_6 = exception.succeeded(Res_10) : exception.exception_result(T_1),
      builtin.unsafe_promise_unique(IO1_11, IO_8)
    ;
      Result0_9 = exception.exception(E_12) : exception.exception_result({T_1, io.state}),
      Result_6 = exception.exception(E_12) : exception.exception_result(T_1),
      builtin.unsafe_promise_unique(IO0_7, IO_8)
    ).
exception.try_store(StoreGoal_5, Result_6, Store0_7, Store_8) :-
    V_14 = exception.unsafe_call_store_goal(StoreGoal_5, Store0_7) : (pred {T_1, store.store(S_2)}),
    exception.(try V_14 Result0_9),
    ( % disjunction
      Result0_9 = exception.succeeded(V_15) : exception.exception_result({T_1, store.store(S_2)}),
      V_15 = {Res_10, NewStore_11} : {T_1, store.store(S_2)},
      Result_6 = exception.succeeded(Res_10) : exception.exception_result(T_1),
      builtin.unsafe_promise_unique(NewStore_11, Store_8)
    ;
      Result0_9 = exception.exception(E0_12) : exception.exception_result({T_1, store.store(S_2)}),
      builtin.copy(E0_12, E_13),
      Result_6 = exception.exception(E_13) : exception.exception_result(T_1),
      builtin.unsafe_promise_unique(Store0_7, Store_8)
    ).
exception.incremental_try_all(Goal_5, AccPred_6, STATE_VARIABLE_Acc_0_8, STATE_VARIABLE_Acc_9) :-
    V_10 = exception.catch_impl(V_12, V_13) : (pred exception.exception_result(T_1)),
    V_12 = exception.wrap_success(Goal_5) : (pred exception.exception_result(T_1)),
    V_13 = exception.wrap_exception : pred(univ.univ, exception.exception_result(T_1)),
    solutions.unsorted_aggregate(V_10, AccPred_6, STATE_VARIABLE_Acc_0_8, STATE_VARIABLE_Acc_9).
:- pragma promise_equivalent_clauses((exception.finally)/6).
exception.finally((P_7 :: (pred(builtin.out, builtin.di, builtin.uo) is det)), (PRes_8 :: builtin.out), (Cleanup_9 :: (pred(builtin.out, builtin.di, builtin.uo) is det)), (CleanupRes_10 :: builtin.out), (STATE_VARIABLE_IO_0_12 :: builtin.di), (STATE_VARIABLE_IO_13 :: builtin.uo)) :-
    promise_equivalent_solutions [PRes_8, CleanupRes_10, STATE_VARIABLE_IO_13] (
      exception.finally_2(P_7, Cleanup_9, PRes_8, CleanupRes_10, STATE_VARIABLE_IO_0_12, STATE_VARIABLE_IO_13)
    ).
exception.finally((P_15 :: (pred(builtin.out, builtin.di, builtin.uo) is cc_multi)), (PRes_16 :: builtin.out), (Cleanup_17 :: (pred(builtin.out, builtin.di, builtin.uo) is cc_multi)), (CleanupRes_18 :: builtin.out), (STATE_VARIABLE_IO_0_20 :: builtin.di), (STATE_VARIABLE_IO_21 :: builtin.uo)) :-
    exception.finally_2(P_15, Cleanup_17, PRes_16, CleanupRes_18, STATE_VARIABLE_IO_0_20, STATE_VARIABLE_IO_21).
exception.try_stm(Goal_5, Result_6, STATE_VARIABLE_STM_0_11, STATE_VARIABLE_STM_12) :-
    exception.unsafe_try_stm(Goal_5, Result0_8, STATE_VARIABLE_STM_0_11, STATE_VARIABLE_STM_12),
    ( % disjunction
      Result0_8 = exception.succeeded(V_9) : exception.exception_result(A_1),
      Result_6 = Result0_8
    ;
      Result0_8 = exception.exception(Exception_10) : exception.exception_result(A_1),
      (if
        ( % disjunction
          Exception_10 = univ.univ(V_15),
          V_15 = stm_builtin.rollback_invalid_transaction : stm_builtin.rollback_exception
        ;
          Exception_10 = univ.univ(V_14),
          V_14 = stm_builtin.rollback_retry : stm_builtin.rollback_exception
        )
      then
        exception.rethrow(Result0_8)
      else
        Result_6 = Result0_8
      )
    ).
exception.unsafe_try_stm(Goal_5, Result_6, STM0_7, STM_8) :-
    V_14 = exception.unsafe_call_transaction_goal(Goal_5, STM0_7) : (pred {A_1, stm_builtin.stm}),
    exception.(try V_14 Result0_9),
    ( % disjunction
      Result0_9 = exception.succeeded(V_15) : exception.exception_result({A_1, stm_builtin.stm}),
      V_15 = {Res_10, NewSTM_11} : {A_1, stm_builtin.stm},
      Result_6 = exception.succeeded(Res_10) : exception.exception_result(A_1),
      builtin.unsafe_promise_unique(NewSTM_11, STM_8)
    ;
      Result0_9 = exception.exception(E0_12) : exception.exception_result({A_1, stm_builtin.stm}),
      builtin.copy(E0_12, E_13),
      Result_6 = exception.exception(E_13) : exception.exception_result(A_1),
      builtin.unsafe_promise_unique(STM0_7, STM_8)
    ).
exception.magic_exception_result(exception.succeeded(V_2)) :-
    V_2 = {} : {}.
exception.magic_exception_result(exception.succeeded(V_3)) :-
    V_3 = {} : {}.
exception.unreachable :-
    V_1 = "unreachable code reached" : string,
    exception.throw(V_1).
exception.exc_univ_to_type(Univ_3, Object_4) :-
    univ.univ_to_type(Univ_3, Object_4).
exception.exc_univ_value(Univ_3) = HeadVar__2_2 :-
    HeadVar__2_2 = univ.univ_value(Univ_3).
exception.wrap_success(Goal_3, exception.succeeded(R_4)) :-
    call(Goal_3, R_4).
exception.wrap_exception(Exception_3, exception.exception(Exception_3)).
exception.unsafe_call_io_goal(Goal_4, IO0_5, HeadVar__3_3) :-
    HeadVar__3_3 = {Result_6, IO_7} : {T_1, io.state},
    builtin.unsafe_promise_unique(IO0_5, IO1_8),
    call(Goal_4, Result_6, IO1_8, IO_7).
exception.unsafe_call_store_goal(Goal_4, Store0_5, HeadVar__3_3) :-
    HeadVar__3_3 = {Result_6, Store_7} : {T_1, store.store(S_2)},
    builtin.unsafe_promise_unique(Store0_5, Store1_8),
    call(Goal_4, Result_6, Store1_8, Store_7).
exception.unsafe_call_transaction_goal(Goal_4, STM0_5, HeadVar__3_3) :-
    HeadVar__3_3 = {Result_6, STM_7} : {T_1, stm_builtin.stm},
    builtin.unsafe_promise_unique(STM0_5, STM1_8),
    call(Goal_4, Result_6, STM1_8, STM_7).
:- pragma promise_pure((exception.catch_impl)/3).
exception.catch_impl(Pred_4, Handler_5, T_6) :-
    exception.builtin_catch(Pred_4, Handler_5, T_6).
:- pragma exceptions(function, (exception.throw), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.throw), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_io), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_io), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_store), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_store), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.incremental_try_all), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.incremental_try_all), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.rethrow), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (exception.rethrow), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.throw_if_near_stack_limits), 0, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_stm), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_stm), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_try_stm), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_try_stm), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.magic_exception_result), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (exception.unreachable), 0, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.exc_univ_to_type), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.exc_univ_to_type), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.exc_univ_to_type), 2, 2, may_throw(user_exception)).
:- pragma exceptions(function, (exception.exc_univ_value), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally_2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_exception), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (exception.unsafe_call_io_goal), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_io_goal), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_store_goal), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_store_goal), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_transaction_goal), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_transaction_goal), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 5, may_throw(user_exception)).
:- pragma termination_info(exception.throw((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(exception.throw((builtin.in)), infinite, cannot_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is det), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is semidet), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is cc_multi), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is cc_nondet), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.try_io((pred((builtin.out), (builtin.di), (builtin.uo)) is det), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_io((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_store((pred((builtin.out), (builtin.di), (builtin.uo)) is det), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_store((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is det), (builtin.out), builtin.out((exception.nil_or_singleton_list))), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is semidet), (builtin.out), builtin.out((exception.nil_or_singleton_list))), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is multi), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is nondet), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.incremental_try_all((pred((builtin.out)) is nondet), (pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.incremental_try_all((pred((builtin.out)) is nondet), (pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.rethrow(builtin.in(bound(exception(ground)))), infinite, cannot_loop).
:- pragma termination_info(exception.rethrow(builtin.in(bound(exception(ground)))) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(exception.finally((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.finally((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((exception.throw_if_near_stack_limits), finite(0, []), cannot_loop).
:- pragma termination_info(exception.try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is det)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is det)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.magic_exception_result(builtin.out((exception.cannot_fail))), finite(1, [no]), cannot_loop).
:- pragma termination_info((exception.unreachable), infinite, cannot_loop).
:- pragma termination_info(exception.exc_univ_to_type((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.exc_univ_to_type((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(exception.exc_univ_to_type((builtin.uo), (builtin.di)), infinite, can_loop).
:- pragma termination_info(exception.exc_univ_value((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(exception.finally_2((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.finally_2((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is det), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is semidet), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is multi), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is nondet), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is cc_multi), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is cc_nondet), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_exception((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(exception.unsafe_call_io_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_io_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_store_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_store_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_transaction_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_transaction_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is det), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is semidet), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is cc_multi), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is cc_nondet), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is multi), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is nondet), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
