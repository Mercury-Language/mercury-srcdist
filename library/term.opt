:- module term.
:- use_module builtin.
:- use_module enum.
:- use_module int.
:- use_module integer.
:- use_module list.
:- use_module map.
:- use_module private_builtin.
:- use_module term_context.
:- use_module term_int.
:- use_module term_subst.
:- use_module term_unify.
:- use_module term_vars.
:- use_module uint.

:- type var(T)
    --->    var(int).
:- type var_supply(T)
    --->    var_supply(int).

:- instance (enum.enum(term.var(V_1))) where [
	func((enum.to_int)/1) is term.var_to_int,
	func((enum.from_int)/1) is term.unsafe_int_to_var
].
:- instance (enum.uenum(term.var(V_1))) where [
	func((enum.to_uint)/1) is term.var_to_uint,
	pred((enum.from_uint)/2) is term.unsafe_uint_to_var
].

:- func term.unsafe_int_to_var(int) = term.var(T).
:- mode unsafe_int_to_var(builtin.in) = builtin.out is det.
:- pred term.unsafe_uint_to_var(uint, term.var(T)).
:- mode unsafe_uint_to_var(builtin.in, builtin.out) is det.

term.apply_rec_substitution_in_term(V_4, V_6, V_7) :-
    term_subst.apply_rec_substitution_in_term(V_4, V_6, V_7).

term.apply_rec_substitution_in_terms(V_4, V_6, V_7) :-
    term_subst.apply_rec_substitution_in_terms(V_4, V_6, V_7).

term.apply_renaming_in_term(V_4, V_6, V_7) :-
    term_subst.apply_renaming_in_term(V_4, V_6, V_7).

term.apply_renaming_in_terms(V_4, V_6, V_7) :-
    term_subst.apply_renaming_in_terms(V_4, V_6, V_7).

term.apply_renaming_in_var(V_4, V_6, V_7) :-
    term_subst.apply_renaming_in_var(V_4, V_6, V_7).

term.apply_renaming_in_vars(V_4, V_6, V_7) :-
    term_subst.apply_renaming_in_vars(V_4, V_6, V_7).

term.apply_substitution_in_term(V_4, V_6, V_7) :-
    term_subst.apply_substitution_in_term(V_4, V_6, V_7).

term.apply_substitution_in_terms(V_4, V_6, V_7) :-
    term_subst.apply_substitution_in_terms(V_4, V_6, V_7).

term.coerce(V_3) = V_4 :-
    term.coerce(V_3, V_4).

term.coerce_var(V_3) = V_4 :-
    term.coerce_var(V_3, V_4).

term.coerce_var(term.var(V_3), term.var(V_3)).

term.coerce_var_supply(V_3) = V_4 :-
    term.coerce_var_supply(V_3, V_4).

term.coerce_var_supply(term.var_supply(V_3), term.var_supply(V_3)).

term.contains_var(V_3, V_4) :-
    term_vars.term_contains_var(V_3, V_4).

term.contains_var_list(V_3, V_4) :-
    term_vars.terms_contain_var(V_3, V_4).

term.context_file(V_3) = V_4 :-
    V_4 = term_context.context_file(V_3).

term.context_file(V_3, V_4) :-
    V_4 = term_context.context_file(V_3).

term.context_init = V_2 :-
    V_2 = term_context.dummy_context.

term.context_init(V_2) :-
    V_2 = term_context.dummy_context.

term.context_init(V_4, V_5) = V_6 :-
    V_6 = term_context.context_init(V_4, V_5).

term.context_init(V_4, V_5, V_6) :-
    V_6 = term_context.context_init(V_4, V_5).

term.context_line(V_3) = V_4 :-
    V_4 = term_context.context_line(V_3).

term.context_line(V_3, V_4) :-
    V_4 = term_context.context_line(V_3).

term.create_var(term.var(V_4), term.var_supply(V_5), term.var_supply(V_4)) :-
    V_4 = int.(V_5 + V_6),
    V_6 = 1 : int.

term.decimal_term_to_int(V_3, V_4) :-
    term_int.decimal_term_to_int(V_3, V_4).

term.dummy_context_init = V_2 :-
    V_2 = term_context.dummy_context.

term.force_construct_var(V_3) = term.var(V_3).

term.force_construct_var_supply(V_3) = term.var_supply(V_3).

term.generic_term(V_2).

term.get_term_context(V_3) = V_4 :-
    ( % disjunction
      V_3 = term.functor(V_5, V_6, V_4) : term.term(T_1)
    ;
      V_3 = term.variable(V_7, V_4) : term.term(T_1)
    ).

term.init_var_supply = term.var_supply(V_2) :-
    V_2 = 0 : int.

term.init_var_supply(term.var_supply(V_2)) :-
    V_2 = 0 : int.

term.int16_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.int16_to_decimal_term(V_4, V_5).

term.int32_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.int32_to_decimal_term(V_4, V_5).

term.int64_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.int64_to_decimal_term(V_4, V_5).

term.int8_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.int8_to_decimal_term(V_4, V_5).

term.int_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.int_to_decimal_term(V_4, V_5).

term.is_dummy_context(V_2) :-
    term_context.is_dummy_context(V_2).

term.is_ground(V_2) :-
    term_subst.term_is_ground(V_2).

term.is_ground_in_bindings(V_3, V_4) :-
    term_subst.term_is_ground_in_bindings(V_3, V_4).

term.list_subsumes(V_4, V_5, V_6) :-
    term_unify.first_term_list_subsumes_second(V_4, V_5, V_6).

term.occurs(V_4, V_5, V_6) :-
    term_subst.var_occurs_in_subst_term(V_5, V_6, V_4).

term.occurs_list(V_4, V_5, V_6) :-
    term_subst.var_occurs_in_subst_terms(V_5, V_6, V_4).

term.rename_var_in_term(V_5, V_6, V_8, V_9) :-
    term_subst.rename_var_in_term(V_5, V_6, V_8, V_9).

term.rename_var_in_terms(V_5, V_6, V_8, V_9) :-
    term_subst.rename_var_in_terms(V_5, V_6, V_8, V_9).

term.substitute_corresponding_in_term(V_5, V_6, V_8, V_9) :-
    term_subst.substitute_corresponding_in_term(V_5, V_6, V_8, V_9).

term.substitute_corresponding_in_terms(V_5, V_6, V_8, V_9) :-
    term_subst.substitute_corresponding_in_terms(V_5, V_6, V_8, V_9).

term.substitute_var_in_term(V_5, V_6, V_8, V_9) :-
    term_subst.substitute_var_in_term(V_5, V_6, V_8, V_9).

term.substitute_var_in_terms(V_5, V_6, V_8, V_9) :-
    term_subst.substitute_var_in_terms(V_5, V_6, V_8, V_9).

term.term_list_to_var_list(V_3) = V_2 :-
    V_2 = term_subst.term_list_to_var_list(V_3).

term.term_list_to_var_list(V_3, V_4) :-
    term_subst.term_list_to_var_list(V_3, V_4).

term.term_to_int(V_3, V_4) :-
    term_int.term_to_int(V_3, V_4).

term.term_to_int16(V_3, V_4) :-
    term_int.term_to_int16(V_3, V_4).

term.term_to_int32(V_3, V_4) :-
    term_int.term_to_int32(V_3, V_4).

term.term_to_int64(V_3, V_4) :-
    term_int.term_to_int64(V_3, V_4).

term.term_to_int8(V_3, V_4) :-
    term_int.term_to_int8(V_3, V_4).

term.term_to_uint(V_3, V_4) :-
    term_int.term_to_uint(V_3, V_4).

term.term_to_uint16(V_3, V_4) :-
    term_int.term_to_uint16(V_3, V_4).

term.term_to_uint32(V_3, V_4) :-
    term_int.term_to_uint32(V_3, V_4).

term.term_to_uint64(V_3, V_4) :-
    term_int.term_to_uint64(V_3, V_4).

term.term_to_uint8(V_3, V_4) :-
    term_int.term_to_uint8(V_3, V_4).

term.uint16_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.uint16_to_decimal_term(V_4, V_5).

term.uint32_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.uint32_to_decimal_term(V_4, V_5).

term.uint64_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.uint64_to_decimal_term(V_4, V_5).

term.uint8_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.uint8_to_decimal_term(V_4, V_5).

term.uint_to_decimal_term(V_4, V_5) = V_3 :-
    V_3 = term_int.uint_to_decimal_term(V_4, V_5).

term.unify_term(V_5, V_6, V_8, V_9) :-
    term_unify.unify_terms(V_5, V_6, V_8, V_9).

term.unify_term_dont_bind(V_6, V_7, V_8, V_10, V_11) :-
    term_unify.unify_terms_dont_bind(V_6, V_7, V_8, V_10, V_11).

term.unify_term_list(V_5, V_6, V_8, V_9) :-
    term_unify.unify_term_lists(V_5, V_6, V_8, V_9).

term.unify_term_list_dont_bind(V_6, V_7, V_8, V_10, V_11) :-
    term_unify.unify_term_lists_dont_bind(V_6, V_7, V_8, V_10, V_11).

term.var_list_to_term_list(V_3) = V_2 :-
    V_2 = term_subst.var_list_to_term_list(V_3).

term.var_list_to_term_list(V_3, V_4) :-
    term_subst.var_list_to_term_list(V_3, V_4).

term.var_supply_max_var(term.var_supply(V_3)) = term.var(V_3).

term.var_supply_num_allocated(term.var_supply(V_3)) = V_3.

term.var_to_int(term.var(V_3)) = V_3.

term.var_to_int(term.var(V_3), V_3).

term.var_to_uint(term.var(V_3)) = V_2 :-
    V_2 = uint.cast_from_int(V_3).

term.var_to_uint(term.var(V_3), V_2) :-
    V_2 = uint.cast_from_int(V_3).

term.vars(V_3) = V_2 :-
    V_2 = term_vars.vars_in_term(V_3).

term.vars(V_3, V_4) :-
    term_vars.vars_in_term(V_3, V_4).

term.vars_2(V_4, V_6) = V_7 :-
    term_vars.vars_in_term_acc(V_4, V_6, V_7).

term.vars_2(V_4, V_6, V_7) :-
    term_vars.vars_in_term_acc(V_4, V_6, V_7).

term.vars_list(V_3) = V_2 :-
    V_2 = term_vars.vars_in_terms(V_3).

term.vars_list(V_3, V_4) :-
    term_vars.vars_in_terms(V_3, V_4).

:- pragma termination_info(term.'ClassMethod_for_enum__enum____term__var__arity1______enum__from_int_1'(builtin.in) = builtin.out, finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.'ClassMethod_for_enum__enum____term__var__arity1______enum__to_int_1'(builtin.in) = builtin.out, finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.'ClassMethod_for_enum__uenum____term__var__arity1______enum__from_uint_2'(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.'ClassMethod_for_enum__uenum____term__var__arity1______enum__to_uint_1'(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.apply_rec_substitution_in_term(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_rec_substitution_in_terms(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_renaming_in_term(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_renaming_in_terms(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_renaming_in_var(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_renaming_in_vars(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_substitution_in_term(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.apply_substitution_in_terms(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.coerce(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(term.coerce(builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(term.coerce_var(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(term.coerce_var(builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(term.coerce_var_supply(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(term.coerce_var_supply(builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(term.contains_var(builtin.in, builtin.in), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(term.contains_var(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.contains_var_list(builtin.in, builtin.in), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(term.contains_var_list(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.context_file(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.context_file(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info((term.context_init) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.context_init(builtin.out), infinite, can_loop).
:- pragma termination_info(term.context_init(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.context_init(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.context_line(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.context_line(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.create_var(builtin.out, builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(term.decimal_term_to_int(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info((term.dummy_context_init) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.force_construct_var(builtin.in) = builtin.out, finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.force_construct_var_supply(builtin.in) = builtin.out, finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.generic_term(builtin.in), finite(0, [no]), cannot_loop).
:- pragma termination_info(term.get_term_context(builtin.in) = builtin.out, finite(-2, [no, yes, no]), cannot_loop).
:- pragma termination_info((term.init_var_supply) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(term.init_var_supply(builtin.out), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(term.init_var_supply(builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(term.int16_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.int32_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.int64_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.int8_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.int_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.is_dummy_context(builtin.in), finite(0, [no]), can_loop).
:- pragma termination_info(term.is_ground(builtin.in), finite(0, [no, no]), can_loop).
:- pragma termination_info(term.is_ground_in_bindings(builtin.in, builtin.in), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(term.list_subsumes(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.occurs(builtin.in, builtin.in, builtin.in), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(term.occurs_list(builtin.in, builtin.in, builtin.in), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(term.rename_var_in_term(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.rename_var_in_terms(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.substitute_corresponding_in_term(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.substitute_corresponding_in_terms(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.substitute_var_in_term(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.substitute_var_in_terms(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_list_to_var_list(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.term_list_to_var_list(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_int(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_int16(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_int32(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_int64(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_int8(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_uint(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_uint16(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_uint32(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_uint64(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.term_to_uint8(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.uint16_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.uint32_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.uint64_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.uint8_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.uint_to_decimal_term(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.unify_term(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.unify_term_dont_bind(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.unify_term_list(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.unify_term_list_dont_bind(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.unsafe_int_to_var(builtin.in) = builtin.out, finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.unsafe_uint_to_var(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.var_list_to_term_list(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.var_list_to_term_list(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.var_supply_max_var(builtin.in) = builtin.out, finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.var_supply_num_allocated(builtin.in) = builtin.out, finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.var_to_int(builtin.in) = builtin.out, finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.var_to_int(builtin.in, builtin.out), finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(term.var_to_uint(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.var_to_uint(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.vars(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.vars(builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.vars_2(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.vars_2(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(term.vars_list(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(term.vars_list(builtin.in, builtin.out), infinite, can_loop).

:- pragma exceptions(predicate, term.apply_rec_substitution_in_term, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_rec_substitution_in_terms, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_renaming_in_term, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_renaming_in_terms, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_renaming_in_var, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_renaming_in_vars, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_substitution_in_term, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.apply_substitution_in_terms, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.coerce, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.coerce, 2, 0, will_not_throw).
:- pragma exceptions(function, term.coerce_var, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.coerce_var, 2, 0, will_not_throw).
:- pragma exceptions(function, term.coerce_var_supply, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.coerce_var_supply, 2, 0, will_not_throw).
:- pragma exceptions(predicate, term.contains_var, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.contains_var, 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, term.contains_var_list, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.contains_var_list, 2, 1, may_throw(user_exception)).
:- pragma exceptions(function, term.context_file, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.context_file, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.context_init, 0, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.context_init, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.context_init, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.context_init, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.context_line, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.context_line, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.create_var, 3, 0, will_not_throw).
:- pragma exceptions(predicate, term.decimal_term_to_int, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.dummy_context_init, 0, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.force_construct_var, 1, 0, will_not_throw).
:- pragma exceptions(function, term.force_construct_var_supply, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.generic_term, 1, 0, will_not_throw).
:- pragma exceptions(function, term.get_term_context, 1, 0, will_not_throw).
:- pragma exceptions(function, term.init_var_supply, 0, 0, will_not_throw).
:- pragma exceptions(predicate, term.init_var_supply, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.init_var_supply, 1, 1, will_not_throw).
:- pragma exceptions(function, term.int16_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.int32_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.int64_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.int8_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.int_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.is_dummy_context, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.is_ground, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.is_ground_in_bindings, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.list_subsumes, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.occurs, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.occurs_list, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.rename_var_in_term, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.rename_var_in_terms, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.substitute_corresponding_in_term, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.substitute_corresponding_in_terms, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.substitute_var_in_term, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.substitute_var_in_terms, 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.term_list_to_var_list, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_list_to_var_list, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_int, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_int16, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_int32, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_int64, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_int8, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_uint, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_uint16, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_uint32, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_uint64, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.term_to_uint8, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.uint16_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.uint32_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.uint64_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.uint8_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.uint_to_decimal_term, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.unify_term, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.unify_term_dont_bind, 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.unify_term_list, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.unify_term_list_dont_bind, 5, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.unsafe_int_to_var, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.unsafe_uint_to_var, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.var_list_to_term_list, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.var_list_to_term_list, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.var_supply_max_var, 1, 0, will_not_throw).
:- pragma exceptions(function, term.var_supply_num_allocated, 1, 0, will_not_throw).
:- pragma exceptions(function, term.var_to_int, 1, 0, will_not_throw).
:- pragma exceptions(predicate, term.var_to_int, 2, 0, will_not_throw).
:- pragma exceptions(function, term.var_to_uint, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.var_to_uint, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.vars, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.vars, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.vars_2, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.vars_2, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, term.vars_list, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, term.vars_list, 2, 0, may_throw(user_exception)).
