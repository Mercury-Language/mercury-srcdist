:- module time.
:- interface.
:- type clock_t == int.
:- type dst
    --->    standard_time 
    ;       daylight_time .
:- type time_error
    --->    time_error(string).
:- type time_t.
:- type tm
    --->    tm((time.tm_year) :: int, (time.tm_mon) :: int, (time.tm_mday) :: int, (time.tm_hour) :: int, (time.tm_min) :: int, (time.tm_sec) :: int, (time.tm_yday) :: int, (time.tm_wday) :: int, (time.tm_dst) :: maybe.maybe(time.dst)).
:- type tms
    --->    tms(time.clock_t, time.clock_t, time.clock_t, time.clock_t).
:- type_representation(clock_t, is_eqv_to(int)).
:- type_representation(dst, du_repn(enum("standard_time", "daylight_time", [],  no_c_j_cs_e))).
:- type_representation(time_error, du_repn(notag("time_error", string,  no_c_j_cs_e))).
:- type_representation(time_t, du_repn(notag("time_t", time.time_t_rep,  no_c_j_cs_e))).
:- type_representation(tm, is_word_aligned_ptr).
:- type_representation(tms, is_word_aligned_ptr).
