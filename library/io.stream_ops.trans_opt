:- module (io.stream_ops).

:- pragma termination_info((io.stream_ops).binary_input_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).binary_output_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).binary_stream_offset_2((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).close_stream((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).do_open_binary((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).do_open_text((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).flush_binary_output_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).flush_text_output_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).get_input_line_number_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).get_output_line_number_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).input_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).output_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).seek_binary_2((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).set_binary_input_stream_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).set_binary_output_stream_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).set_input_line_number_2((builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).set_input_stream_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).set_output_line_number_2((builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).set_output_stream_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info(((io.stream_ops).stderr_stream_2) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).stderr_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).stdin_binary_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info(((io.stream_ops).stdin_stream_2) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).stdin_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).stdout_binary_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info(((io.stream_ops).stdout_stream_2) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).stdout_stream_2((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.stream_ops).whence_to_int((builtin.in), (builtin.out)), finite(0, [no, no]), cannot_loop).

:- pragma exceptions(predicate, ((io.stream_ops).binary_input_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).binary_output_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).binary_stream_offset_2), 5, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).close_stream), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).do_open_binary), 7, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).do_open_text), 7, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).flush_binary_output_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).flush_text_output_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).get_input_line_number_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).get_output_line_number_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).input_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).output_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).seek_binary_2), 6, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).set_binary_input_stream_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).set_binary_output_stream_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).set_input_line_number_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).set_input_stream_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).set_output_line_number_2), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).set_output_stream_2), 4, 0, will_not_throw).
:- pragma exceptions(function, ((io.stream_ops).stderr_stream_2), 0, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).stderr_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).stdin_binary_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(function, ((io.stream_ops).stdin_stream_2), 0, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).stdin_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).stdout_binary_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(function, ((io.stream_ops).stdout_stream_2), 0, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).stdout_stream_2), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.stream_ops).whence_to_int), 2, 0, will_not_throw).
