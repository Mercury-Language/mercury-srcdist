:- module tree_bitset.
:- use_module bool, builtin, enum, int, list, maybe, pair, private_builtin, require, set, string, term.
:- type tree_bitset.tree_bitset(T)
	--->	tree_bitset(tree_bitset.node_list).
:- type tree_bitset.node_list
	--->	leaf_list((tree_bitset.leaf_nodes) :: list.list(tree_bitset.leaf_node))
	;	interior_list((tree_bitset.level) :: int, (tree_bitset.interior_nodes) :: list.list(tree_bitset.interior_node)).
:- type tree_bitset.leaf_node
	--->	leaf_node((tree_bitset.leaf_offset) :: int, (tree_bitset.leaf_bits) :: int).
:- type tree_bitset.interior_node
	--->	interior_node((tree_bitset.init_offset) :: int, (tree_bitset.limit_offset) :: int, (tree_bitset.components) :: tree_bitset.node_list).
:- type tree_bitset.fold_direction
	--->	low_to_high 
	;	high_to_low .
:- func tree_bitset.index_to_enum(int) = T_1 <= (enum.enum(T_1)).
:- mode tree_bitset.index_to_enum((builtin.in)) = (builtin.out) is det.
:- func tree_bitset.wrap_tree_bitset(tree_bitset.node_list) = tree_bitset.tree_bitset(T_1).
:- mode tree_bitset.wrap_tree_bitset((builtin.in)) = (builtin.out) is det.
:- pragma inline((tree_bitset.wrap_tree_bitset)/1).
:- func tree_bitset.integrity(maybe.maybe(pair.pair(int, int)), tree_bitset.node_list) = bool.bool.
:- mode tree_bitset.integrity((builtin.in), (builtin.in)) = (builtin.out) is det.
:- func tree_bitset.mask(int) = int.
:- mode tree_bitset.mask((builtin.in)) = (builtin.out) is det.
:- pragma inline((tree_bitset.mask)/1).
:- pred tree_bitset.do_foldl_pred(pred(T_1, U_2, U_2), list.list(tree_bitset.interior_node), U_2, U_2) <= (enum.enum(T_1)).
:- mode tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.do_foldl_pred)/4, (T_1 = term.var(V_3)), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldl_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.do_foldl_pred)/4, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldl_pred__[T = int]')).
:- pred tree_bitset.leaf_foldl_pred(pred(T_1, U_2, U_2), list.list(tree_bitset.leaf_node), U_2, U_2) <= (enum.enum(T_1)).
:- mode tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.leaf_foldl_pred)/4, (T_1 = term.var(V_3)), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldl_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.leaf_foldl_pred)/4, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldl_pred__[T = int]')).
:- pred tree_bitset.do_foldl2_pred(pred(T_1, U_2, U_2, V_3, V_3), list.list(tree_bitset.interior_node), U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.do_foldl2_pred)/6, (T_1 = term.var(V_4)), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldl2_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.do_foldl2_pred)/6, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldl2_pred__[T = int]')).
:- pred tree_bitset.leaf_foldl2_pred(pred(T_1, U_2, U_2, V_3, V_3), list.list(tree_bitset.leaf_node), U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.leaf_foldl2_pred)/6, (T_1 = term.var(V_4)), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldl2_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.leaf_foldl2_pred)/6, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldl2_pred__[T = int]')).
:- pred tree_bitset.do_foldr_pred(pred(T_1, U_2, U_2), list.list(tree_bitset.interior_node), U_2, U_2) <= (enum.enum(T_1)).
:- mode tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.do_foldr_pred)/4, (T_1 = term.var(V_3)), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldr_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.do_foldr_pred)/4, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldr_pred__[T = int]')).
:- pred tree_bitset.leaf_foldr_pred(pred(T_1, U_2, U_2), list.list(tree_bitset.leaf_node), U_2, U_2) <= (enum.enum(T_1)).
:- mode tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.leaf_foldr_pred)/4, (T_1 = term.var(V_3)), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldr_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.leaf_foldr_pred)/4, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldr_pred__[T = int]')).
:- pred tree_bitset.do_foldr2_pred(pred(T_1, U_2, U_2, V_3, V_3), list.list(tree_bitset.interior_node), U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.do_foldr2_pred)/6, (T_1 = term.var(V_4)), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldr2_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.do_foldr2_pred)/6, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__do_foldr2_pred__[T = int]')).
:- pred tree_bitset.leaf_foldr2_pred(pred(T_1, U_2, U_2, V_3, V_3), list.list(tree_bitset.leaf_node), U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.leaf_foldr2_pred)/6, (T_1 = term.var(V_4)), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldr2_pred__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.leaf_foldr2_pred)/6, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__leaf_foldr2_pred__[T = int]')).
:- pred tree_bitset.fold_bits(tree_bitset.fold_direction, pred(T_1, U_2, U_2), int, int, int, U_2, U_2) <= (enum.enum(T_1)).
:- mode tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.fold_bits)/7, (T_1 = term.var(V_3)), (tree_bitset.'TypeSpecOf__pred_or_func__fold_bits__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.fold_bits)/7, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__fold_bits__[T = int]')).
:- pred tree_bitset.fold2_bits(tree_bitset.fold_direction, pred(T_1, U_2, U_2, V_3, V_3), int, int, int, U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((tree_bitset.fold2_bits)/9, (T_1 = term.var(V_4)), (tree_bitset.'TypeSpecOf__pred_or_func__fold2_bits__[T = var(V_2)]')).
:- pragma type_spec((tree_bitset.fold2_bits)/9, (T_1 = int), (tree_bitset.'TypeSpecOf__pred_or_func__fold2_bits__[T = int]')).
tree_bitset.init = HeadVar__1_1 :-
    HeadVar__1_1 = tree_bitset.wrap_tree_bitset(V_2),
    V_2 = tree_bitset.leaf_list(V_3) : tree_bitset.node_list,
    V_3 = list.[] : list.list(tree_bitset.leaf_node).
tree_bitset.empty(HeadVar__1_1) :-
    HeadVar__1_1 = tree_bitset.init.
tree_bitset.list_to_set(List_3) = HeadVar__2_2 :-
    HeadVar__2_2 = tree_bitset.sorted_list_to_set(V_4),
    V_4 = list.sort(List_3).
tree_bitset.from_set(Set_3) = HeadVar__2_2 :-
    HeadVar__2_2 = tree_bitset.sorted_list_to_set(V_4),
    V_4 = set.to_sorted_list(Set_3).
tree_bitset.to_sorted_list(Set_3) = HeadVar__2_2 :-
    HeadVar__2_2 = tree_bitset.foldr(V_4, Set_3, V_5),
    V_4 = list.cons : (func(T_1, list.list(T_1)) = list.list(T_1)),
    V_5 = list.[] : list.list(T_1).
tree_bitset.to_set(Set_3) = HeadVar__2_2 :-
    HeadVar__2_2 = set.sorted_list_to_set(V_4),
    V_4 = tree_bitset.to_sorted_list(Set_3).
tree_bitset.make_singleton_set(A_3) = HeadVar__2_2 :-
    HeadVar__2_2 = tree_bitset.insert(V_4, A_3),
    V_4 = tree_bitset.init.
tree_bitset.subset(Subset_3, Set_4) :-
    V_5 = Subset_3,
    tree_bitset.intersect(Set_4, Subset_3, V_5).
tree_bitset.superset(Superset_3, Set_4) :-
    tree_bitset.subset(Set_4, Superset_3).
tree_bitset.insert(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.insert(A_4, B_5).
tree_bitset.insert_list(Set_4, List_5) = HeadVar__3_3 :-
    HeadVar__3_3 = tree_bitset.union(V_6, Set_4),
    V_6 = tree_bitset.list_to_set(List_5).
tree_bitset.insert_list(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.insert_list(A_4, B_5).
tree_bitset.delete(Set_4, Elem_5) = HeadVar__3_3 :-
    HeadVar__3_3 = tree_bitset.difference(Set_4, V_6),
    V_6 = tree_bitset.insert(V_7, Elem_5),
    V_7 = tree_bitset.init.
tree_bitset.delete(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.delete(A_4, B_5).
tree_bitset.delete_list(Set_4, List_5) = HeadVar__3_3 :-
    HeadVar__3_3 = tree_bitset.difference(Set_4, V_6),
    V_6 = tree_bitset.list_to_set(List_5).
tree_bitset.delete_list(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.delete_list(A_4, B_5).
tree_bitset.remove(Set0_4, Elem_5, Set_6) :-
    tree_bitset.contains(Set0_4, Elem_5),
    Set_6 = tree_bitset.delete(Set0_4, Elem_5).
tree_bitset.remove_list(Set0_4, Elems_5, Set_6) :-
    ElemsSet_7 = tree_bitset.list_to_set(Elems_5),
    tree_bitset.subset(ElemsSet_7, Set0_4),
    Set_6 = tree_bitset.difference(Set0_4, ElemsSet_7).
tree_bitset.union(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.union(A_4, B_5).
tree_bitset.intersect(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.intersect(A_4, B_5).
tree_bitset.difference(A_4, B_5, HeadVar__3_3) :-
    HeadVar__3_3 = tree_bitset.difference(A_4, B_5).
tree_bitset.count(Set_3) = HeadVar__2_2 :-
    HeadVar__2_2 = tree_bitset.foldl(V_6, Set_3, V_7),
    V_6 = (func(V_10::(builtin.in), V_9::(builtin.in)) = (V_8::(builtin.out)) is det :-
      some [] (
        V_10 = V_12,
        V_9 = Acc_14,
        V_8 = int.(Acc_14 + V_11),
        V_11 = 1 : int
      )
    ) : (func(T_1, int) = int),
    V_7 = 0 : int.
tree_bitset.foldl(F_5, Set_6, Acc0_7) = Acc_8 :-
    P_9 = (pred(V_15::(builtin.in), V_14::(builtin.in), V_13::(builtin.out)) is det :-
      some [] (
        V_15 = E_16,
        V_14 = PAcc0_17,
        PAcc_18 = apply(F_5, E_16, PAcc0_17),
        V_13 = PAcc_18
      )
    ) : pred(T_1, U_2, U_2),
    tree_bitset.foldl(P_9, Set_6, Acc0_7, Acc_8).
tree_bitset.foldl(P_5, Set_6, STATE_VARIABLE_Acc_0_12, STATE_VARIABLE_Acc_13) :-
    Set_6 = tree_bitset.tree_bitset(List_8) : tree_bitset.tree_bitset(T_1),
    ( % disjunction
      List_8 = tree_bitset.leaf_list(LeafNodes_9) : tree_bitset.node_list,
      tree_bitset.leaf_foldl_pred(P_5, LeafNodes_9, STATE_VARIABLE_Acc_0_12, STATE_VARIABLE_Acc_1_14)
    ;
      List_8 = tree_bitset.interior_list(V_10, InteriorNodes_11) : tree_bitset.node_list,
      tree_bitset.do_foldl_pred(P_5, InteriorNodes_11, STATE_VARIABLE_Acc_0_12, STATE_VARIABLE_Acc_1_14)
    ),
    STATE_VARIABLE_Acc_13 = STATE_VARIABLE_Acc_1_14.
tree_bitset.foldl2(P_7, Set_8, STATE_VARIABLE_AccA_0_15, STATE_VARIABLE_AccA_16, STATE_VARIABLE_AccB_0_17, STATE_VARIABLE_AccB_18) :-
    Set_8 = tree_bitset.tree_bitset(List_11) : tree_bitset.tree_bitset(T_1),
    ( % disjunction
      List_11 = tree_bitset.leaf_list(LeafNodes_12) : tree_bitset.node_list,
      tree_bitset.leaf_foldl2_pred(P_7, LeafNodes_12, STATE_VARIABLE_AccA_0_15, STATE_VARIABLE_AccA_1_19, STATE_VARIABLE_AccB_0_17, STATE_VARIABLE_AccB_1_20)
    ;
      List_11 = tree_bitset.interior_list(V_13, InteriorNodes_14) : tree_bitset.node_list,
      tree_bitset.do_foldl2_pred(P_7, InteriorNodes_14, STATE_VARIABLE_AccA_0_15, STATE_VARIABLE_AccA_1_19, STATE_VARIABLE_AccB_0_17, STATE_VARIABLE_AccB_1_20)
    ),
    STATE_VARIABLE_AccB_18 = STATE_VARIABLE_AccB_1_20,
    STATE_VARIABLE_AccA_16 = STATE_VARIABLE_AccA_1_19.
tree_bitset.foldr(F_5, Set_6, Acc0_7) = Acc_8 :-
    P_9 = (pred(V_15::(builtin.in), V_14::(builtin.in), V_13::(builtin.out)) is det :-
      some [] (
        V_15 = E_16,
        V_14 = PAcc0_17,
        PAcc_18 = apply(F_5, E_16, PAcc0_17),
        V_13 = PAcc_18
      )
    ) : pred(T_1, U_2, U_2),
    tree_bitset.foldr(P_9, Set_6, Acc0_7, Acc_8).
tree_bitset.foldr(P_5, Set_6, STATE_VARIABLE_Acc_0_12, STATE_VARIABLE_Acc_13) :-
    Set_6 = tree_bitset.tree_bitset(List_8) : tree_bitset.tree_bitset(T_1),
    ( % disjunction
      List_8 = tree_bitset.leaf_list(LeafNodes_9) : tree_bitset.node_list,
      tree_bitset.leaf_foldr_pred(P_5, LeafNodes_9, STATE_VARIABLE_Acc_0_12, STATE_VARIABLE_Acc_1_14)
    ;
      List_8 = tree_bitset.interior_list(V_10, InteriorNodes_11) : tree_bitset.node_list,
      tree_bitset.do_foldr_pred(P_5, InteriorNodes_11, STATE_VARIABLE_Acc_0_12, STATE_VARIABLE_Acc_1_14)
    ),
    STATE_VARIABLE_Acc_13 = STATE_VARIABLE_Acc_1_14.
tree_bitset.foldr2(P_7, Set_8, STATE_VARIABLE_AccA_0_15, STATE_VARIABLE_AccA_16, STATE_VARIABLE_AccB_0_17, STATE_VARIABLE_AccB_18) :-
    Set_8 = tree_bitset.tree_bitset(List_11) : tree_bitset.tree_bitset(T_1),
    ( % disjunction
      List_11 = tree_bitset.leaf_list(LeafNodes_12) : tree_bitset.node_list,
      tree_bitset.leaf_foldr2_pred(P_7, LeafNodes_12, STATE_VARIABLE_AccA_0_15, STATE_VARIABLE_AccA_1_19, STATE_VARIABLE_AccB_0_17, STATE_VARIABLE_AccB_1_20)
    ;
      List_11 = tree_bitset.interior_list(V_13, InteriorNodes_14) : tree_bitset.node_list,
      tree_bitset.do_foldr2_pred(P_7, InteriorNodes_14, STATE_VARIABLE_AccA_0_15, STATE_VARIABLE_AccA_1_19, STATE_VARIABLE_AccB_0_17, STATE_VARIABLE_AccB_1_20)
    ),
    STATE_VARIABLE_AccB_18 = STATE_VARIABLE_AccB_1_20,
    STATE_VARIABLE_AccA_16 = STATE_VARIABLE_AccA_1_19.
tree_bitset.filter(Pred_4, Set0_5) = Set_6 :-
    SortedList0_7 = tree_bitset.to_sorted_list(Set0_5),
    FilteredList_8 = list.filter(Pred_4, SortedList0_7),
    Set_6 = tree_bitset.sorted_list_to_set(FilteredList_8).
:- pragma inline((tree_bitset.wrap_tree_bitset)/1).
tree_bitset.wrap_tree_bitset(NodeList_3) = Set_4 :-
    (
      % trace
      % compiletime(flag(tree-bitset-interity))
      % quantified vars 
      (if
        V_5 = tree_bitset.integrity(V_6, NodeList_3),
        V_6 = maybe.no : maybe.maybe(pair.pair(int, int)),
        V_5 = bool.no : bool.bool
      then
        V_7 = "wrap_tree_bitset: integrity failed" : string,
        require.error(V_7)
      else
        true
      )
    ),
    Set_4 = tree_bitset.tree_bitset(NodeList_3) : tree_bitset.tree_bitset(T_1).
:- pragma inline((tree_bitset.mask)/1).
tree_bitset.mask(N_3) = HeadVar__2_2 :-
    HeadVar__2_2 = int.(\ V_4),
    V_4 = int.unchecked_left_shift(V_5, N_3),
    V_5 = int.(\ V_6),
    V_6 = 0 : int.
tree_bitset.do_foldl_pred(V_5, list.[], STATE_VARIABLE_Acc_0_7, STATE_VARIABLE_Acc_8) :-
    STATE_VARIABLE_Acc_8 = STATE_VARIABLE_Acc_0_7.
tree_bitset.do_foldl_pred(P_10, list.[H_11 | T_12], STATE_VARIABLE_Acc_0_18, STATE_VARIABLE_Acc_19) :-
    H_11 = tree_bitset.interior_node(V_25, V_24, Components_14) : tree_bitset.interior_node,
    ( % disjunction
      Components_14 = tree_bitset.leaf_list(LeafNodes_15) : tree_bitset.node_list,
      tree_bitset.leaf_foldl_pred(P_10, LeafNodes_15, STATE_VARIABLE_Acc_0_18, STATE_VARIABLE_Acc_1_20)
    ;
      Components_14 = tree_bitset.interior_list(V_16, InteriorNodes_17) : tree_bitset.node_list,
      tree_bitset.do_foldl_pred(P_10, InteriorNodes_17, STATE_VARIABLE_Acc_0_18, STATE_VARIABLE_Acc_1_20)
    ),
    tree_bitset.do_foldl_pred(P_10, T_12, STATE_VARIABLE_Acc_1_20, STATE_VARIABLE_Acc_4_22),
    STATE_VARIABLE_Acc_19 = STATE_VARIABLE_Acc_4_22.
tree_bitset.leaf_foldl_pred(V_5, list.[], STATE_VARIABLE_Acc_0_7, STATE_VARIABLE_Acc_8) :-
    STATE_VARIABLE_Acc_8 = STATE_VARIABLE_Acc_0_7.
tree_bitset.leaf_foldl_pred(P_10, list.[H_11 | T_12], STATE_VARIABLE_Acc_0_14, STATE_VARIABLE_Acc_15) :-
    V_17 = tree_bitset.low_to_high : tree_bitset.fold_direction,
    H_11 = tree_bitset.leaf_node(V_18, V_23) : tree_bitset.leaf_node,
    H_11 = tree_bitset.leaf_node(V_24, V_19) : tree_bitset.leaf_node,
    V_20 = int.bits_per_int,
    tree_bitset.fold_bits(V_17, P_10, V_18, V_19, V_20, STATE_VARIABLE_Acc_0_14, STATE_VARIABLE_Acc_1_16),
    tree_bitset.leaf_foldl_pred(P_10, T_12, STATE_VARIABLE_Acc_1_16, STATE_VARIABLE_Acc_2_21),
    STATE_VARIABLE_Acc_15 = STATE_VARIABLE_Acc_2_21.
tree_bitset.do_foldl2_pred(V_7, list.[], STATE_VARIABLE_AccA_0_10, STATE_VARIABLE_AccA_11, STATE_VARIABLE_AccB_0_12, STATE_VARIABLE_AccB_13) :-
    STATE_VARIABLE_AccB_13 = STATE_VARIABLE_AccB_0_12,
    STATE_VARIABLE_AccA_11 = STATE_VARIABLE_AccA_0_10.
tree_bitset.do_foldl2_pred(P_16, list.[H_17 | T_18], STATE_VARIABLE_AccA_0_25, STATE_VARIABLE_AccA_26, STATE_VARIABLE_AccB_0_27, STATE_VARIABLE_AccB_28) :-
    H_17 = tree_bitset.interior_node(V_38, V_37, Components_21) : tree_bitset.interior_node,
    ( % disjunction
      Components_21 = tree_bitset.leaf_list(LeafNodes_22) : tree_bitset.node_list,
      tree_bitset.leaf_foldl2_pred(P_16, LeafNodes_22, STATE_VARIABLE_AccA_0_25, STATE_VARIABLE_AccA_1_29, STATE_VARIABLE_AccB_0_27, STATE_VARIABLE_AccB_1_30)
    ;
      Components_21 = tree_bitset.interior_list(V_23, InteriorNodes_24) : tree_bitset.node_list,
      tree_bitset.do_foldl2_pred(P_16, InteriorNodes_24, STATE_VARIABLE_AccA_0_25, STATE_VARIABLE_AccA_1_29, STATE_VARIABLE_AccB_0_27, STATE_VARIABLE_AccB_1_30)
    ),
    tree_bitset.do_foldl2_pred(P_16, T_18, STATE_VARIABLE_AccA_1_29, STATE_VARIABLE_AccA_4_33, STATE_VARIABLE_AccB_1_30, STATE_VARIABLE_AccB_4_34),
    STATE_VARIABLE_AccB_28 = STATE_VARIABLE_AccB_4_34,
    STATE_VARIABLE_AccA_26 = STATE_VARIABLE_AccA_4_33.
tree_bitset.leaf_foldl2_pred(V_7, list.[], STATE_VARIABLE_AccA_0_10, STATE_VARIABLE_AccA_11, STATE_VARIABLE_AccB_0_12, STATE_VARIABLE_AccB_13) :-
    STATE_VARIABLE_AccB_13 = STATE_VARIABLE_AccB_0_12,
    STATE_VARIABLE_AccA_11 = STATE_VARIABLE_AccA_0_10.
tree_bitset.leaf_foldl2_pred(P_16, list.[H_17 | T_18], STATE_VARIABLE_AccA_0_21, STATE_VARIABLE_AccA_22, STATE_VARIABLE_AccB_0_23, STATE_VARIABLE_AccB_24) :-
    V_27 = tree_bitset.low_to_high : tree_bitset.fold_direction,
    H_17 = tree_bitset.leaf_node(V_28, V_35) : tree_bitset.leaf_node,
    H_17 = tree_bitset.leaf_node(V_36, V_29) : tree_bitset.leaf_node,
    V_30 = int.bits_per_int,
    tree_bitset.fold2_bits(V_27, P_16, V_28, V_29, V_30, STATE_VARIABLE_AccA_0_21, STATE_VARIABLE_AccA_1_25, STATE_VARIABLE_AccB_0_23, STATE_VARIABLE_AccB_1_26),
    tree_bitset.leaf_foldl2_pred(P_16, T_18, STATE_VARIABLE_AccA_1_25, STATE_VARIABLE_AccA_2_31, STATE_VARIABLE_AccB_1_26, STATE_VARIABLE_AccB_2_32),
    STATE_VARIABLE_AccB_24 = STATE_VARIABLE_AccB_2_32,
    STATE_VARIABLE_AccA_22 = STATE_VARIABLE_AccA_2_31.
tree_bitset.do_foldr_pred(V_5, list.[], STATE_VARIABLE_Acc_0_7, STATE_VARIABLE_Acc_8) :-
    STATE_VARIABLE_Acc_8 = STATE_VARIABLE_Acc_0_7.
tree_bitset.do_foldr_pred(P_10, list.[H_11 | T_12], STATE_VARIABLE_Acc_0_18, STATE_VARIABLE_Acc_19) :-
    tree_bitset.do_foldr_pred(P_10, T_12, STATE_VARIABLE_Acc_0_18, STATE_VARIABLE_Acc_1_20),
    H_11 = tree_bitset.interior_node(V_25, V_24, Components_14) : tree_bitset.interior_node,
    ( % disjunction
      Components_14 = tree_bitset.leaf_list(LeafNodes_15) : tree_bitset.node_list,
      tree_bitset.leaf_foldr_pred(P_10, LeafNodes_15, STATE_VARIABLE_Acc_1_20, STATE_VARIABLE_Acc_2_21)
    ;
      Components_14 = tree_bitset.interior_list(V_16, InteriorNodes_17) : tree_bitset.node_list,
      tree_bitset.do_foldr_pred(P_10, InteriorNodes_17, STATE_VARIABLE_Acc_1_20, STATE_VARIABLE_Acc_2_21)
    ),
    STATE_VARIABLE_Acc_19 = STATE_VARIABLE_Acc_2_21.
tree_bitset.leaf_foldr_pred(V_5, list.[], STATE_VARIABLE_Acc_0_7, STATE_VARIABLE_Acc_8) :-
    STATE_VARIABLE_Acc_8 = STATE_VARIABLE_Acc_0_7.
tree_bitset.leaf_foldr_pred(P_10, list.[H_11 | T_12], STATE_VARIABLE_Acc_0_14, STATE_VARIABLE_Acc_15) :-
    tree_bitset.leaf_foldr_pred(P_10, T_12, STATE_VARIABLE_Acc_0_14, STATE_VARIABLE_Acc_1_16),
    V_18 = tree_bitset.high_to_low : tree_bitset.fold_direction,
    H_11 = tree_bitset.leaf_node(V_19, V_23) : tree_bitset.leaf_node,
    H_11 = tree_bitset.leaf_node(V_24, V_20) : tree_bitset.leaf_node,
    V_21 = int.bits_per_int,
    tree_bitset.fold_bits(V_18, P_10, V_19, V_20, V_21, STATE_VARIABLE_Acc_1_16, STATE_VARIABLE_Acc_2_17),
    STATE_VARIABLE_Acc_15 = STATE_VARIABLE_Acc_2_17.
tree_bitset.do_foldr2_pred(V_7, list.[], STATE_VARIABLE_AccA_0_10, STATE_VARIABLE_AccA_11, STATE_VARIABLE_AccB_0_12, STATE_VARIABLE_AccB_13) :-
    STATE_VARIABLE_AccB_13 = STATE_VARIABLE_AccB_0_12,
    STATE_VARIABLE_AccA_11 = STATE_VARIABLE_AccA_0_10.
tree_bitset.do_foldr2_pred(P_16, list.[H_17 | T_18], STATE_VARIABLE_AccA_0_25, STATE_VARIABLE_AccA_26, STATE_VARIABLE_AccB_0_27, STATE_VARIABLE_AccB_28) :-
    tree_bitset.do_foldr2_pred(P_16, T_18, STATE_VARIABLE_AccA_0_25, STATE_VARIABLE_AccA_1_29, STATE_VARIABLE_AccB_0_27, STATE_VARIABLE_AccB_1_30),
    H_17 = tree_bitset.interior_node(V_38, V_37, Components_21) : tree_bitset.interior_node,
    ( % disjunction
      Components_21 = tree_bitset.leaf_list(LeafNodes_22) : tree_bitset.node_list,
      tree_bitset.leaf_foldr2_pred(P_16, LeafNodes_22, STATE_VARIABLE_AccA_1_29, STATE_VARIABLE_AccA_2_31, STATE_VARIABLE_AccB_1_30, STATE_VARIABLE_AccB_2_32)
    ;
      Components_21 = tree_bitset.interior_list(V_23, InteriorNodes_24) : tree_bitset.node_list,
      tree_bitset.do_foldr2_pred(P_16, InteriorNodes_24, STATE_VARIABLE_AccA_1_29, STATE_VARIABLE_AccA_2_31, STATE_VARIABLE_AccB_1_30, STATE_VARIABLE_AccB_2_32)
    ),
    STATE_VARIABLE_AccB_28 = STATE_VARIABLE_AccB_2_32,
    STATE_VARIABLE_AccA_26 = STATE_VARIABLE_AccA_2_31.
tree_bitset.leaf_foldr2_pred(V_7, list.[], STATE_VARIABLE_AccA_0_10, STATE_VARIABLE_AccA_11, STATE_VARIABLE_AccB_0_12, STATE_VARIABLE_AccB_13) :-
    STATE_VARIABLE_AccB_13 = STATE_VARIABLE_AccB_0_12,
    STATE_VARIABLE_AccA_11 = STATE_VARIABLE_AccA_0_10.
tree_bitset.leaf_foldr2_pred(P_16, list.[H_17 | T_18], STATE_VARIABLE_AccA_0_21, STATE_VARIABLE_AccA_22, STATE_VARIABLE_AccB_0_23, STATE_VARIABLE_AccB_24) :-
    tree_bitset.leaf_foldr2_pred(P_16, T_18, STATE_VARIABLE_AccA_0_21, STATE_VARIABLE_AccA_1_25, STATE_VARIABLE_AccB_0_23, STATE_VARIABLE_AccB_1_26),
    V_29 = tree_bitset.high_to_low : tree_bitset.fold_direction,
    H_17 = tree_bitset.leaf_node(V_30, V_35) : tree_bitset.leaf_node,
    H_17 = tree_bitset.leaf_node(V_36, V_31) : tree_bitset.leaf_node,
    V_32 = int.bits_per_int,
    tree_bitset.fold2_bits(V_29, P_16, V_30, V_31, V_32, STATE_VARIABLE_AccA_1_25, STATE_VARIABLE_AccA_2_27, STATE_VARIABLE_AccB_1_26, STATE_VARIABLE_AccB_2_28),
    STATE_VARIABLE_AccB_24 = STATE_VARIABLE_AccB_2_28,
    STATE_VARIABLE_AccA_22 = STATE_VARIABLE_AccA_2_27.
tree_bitset.fold_bits(Dir_8, P_9, Offset_10, Bits_11, Size_12, STATE_VARIABLE_Acc_0_19, STATE_VARIABLE_Acc_20) :-
    (if
      Bits_11 = 0 : int
    then
      STATE_VARIABLE_Acc_7_28 = STATE_VARIABLE_Acc_0_19
    else
      (if
        Size_12 = 1 : int
      then
        Elem_14 = tree_bitset.index_to_enum(Offset_10),
        call(P_9, Elem_14, STATE_VARIABLE_Acc_0_19, STATE_VARIABLE_Acc_1_21),
        STATE_VARIABLE_Acc_7_28 = STATE_VARIABLE_Acc_1_21
      else
        HalfSize_15 = int.unchecked_right_shift(Size_12, V_23),
        V_23 = 1 : int,
        Mask_16 = tree_bitset.mask(HalfSize_15),
        LowBits_17 = int.(Mask_16 /\ Bits_11),
        HighBits_18 = int.(Mask_16 /\ V_24),
        V_24 = int.unchecked_right_shift(Bits_11, HalfSize_15),
        ( % disjunction
          Dir_8 = tree_bitset.low_to_high : tree_bitset.fold_direction,
          tree_bitset.fold_bits(Dir_8, P_9, Offset_10, LowBits_17, HalfSize_15, STATE_VARIABLE_Acc_0_19, STATE_VARIABLE_Acc_1_31),
          V_29 = int.(Offset_10 + HalfSize_15),
          tree_bitset.fold_bits(Dir_8, P_9, V_29, HighBits_18, HalfSize_15, STATE_VARIABLE_Acc_1_31, STATE_VARIABLE_Acc_7_28)
        ;
          Dir_8 = tree_bitset.high_to_low : tree_bitset.fold_direction,
          V_25 = int.(Offset_10 + HalfSize_15),
          tree_bitset.fold_bits(Dir_8, P_9, V_25, HighBits_18, HalfSize_15, STATE_VARIABLE_Acc_0_19, STATE_VARIABLE_Acc_1_32),
          tree_bitset.fold_bits(Dir_8, P_9, Offset_10, LowBits_17, HalfSize_15, STATE_VARIABLE_Acc_1_32, STATE_VARIABLE_Acc_7_26),
          STATE_VARIABLE_Acc_7_28 = STATE_VARIABLE_Acc_7_26
        )
      )
    ),
    STATE_VARIABLE_Acc_20 = STATE_VARIABLE_Acc_7_28.
tree_bitset.fold2_bits(Dir_10, P_11, Offset_12, Bits_13, Size_14, STATE_VARIABLE_AccA_0_22, STATE_VARIABLE_AccA_23, STATE_VARIABLE_AccB_0_24, STATE_VARIABLE_AccB_25) :-
    (if
      Bits_13 = 0 : int
    then
      STATE_VARIABLE_AccB_7_38 = STATE_VARIABLE_AccB_0_24,
      STATE_VARIABLE_AccA_7_37 = STATE_VARIABLE_AccA_0_22
    else
      (if
        Size_14 = 1 : int
      then
        Elem_17 = tree_bitset.index_to_enum(Offset_12),
        call(P_11, Elem_17, STATE_VARIABLE_AccA_0_22, STATE_VARIABLE_AccA_1_26, STATE_VARIABLE_AccB_0_24, STATE_VARIABLE_AccB_1_27),
        STATE_VARIABLE_AccB_7_38 = STATE_VARIABLE_AccB_1_27,
        STATE_VARIABLE_AccA_7_37 = STATE_VARIABLE_AccA_1_26
      else
        HalfSize_18 = int.unchecked_right_shift(Size_14, V_30),
        V_30 = 1 : int,
        Mask_19 = tree_bitset.mask(HalfSize_18),
        LowBits_20 = int.(Mask_19 /\ Bits_13),
        HighBits_21 = int.(Mask_19 /\ V_31),
        V_31 = int.unchecked_right_shift(Bits_13, HalfSize_18),
        ( % disjunction
          Dir_10 = tree_bitset.low_to_high : tree_bitset.fold_direction,
          tree_bitset.fold2_bits(Dir_10, P_11, Offset_12, LowBits_20, HalfSize_18, STATE_VARIABLE_AccA_0_22, STATE_VARIABLE_AccA_1_42, STATE_VARIABLE_AccB_0_24, STATE_VARIABLE_AccB_1_43),
          V_39 = int.(Offset_12 + HalfSize_18),
          tree_bitset.fold2_bits(Dir_10, P_11, V_39, HighBits_21, HalfSize_18, STATE_VARIABLE_AccA_1_42, STATE_VARIABLE_AccA_7_37, STATE_VARIABLE_AccB_1_43, STATE_VARIABLE_AccB_7_38)
        ;
          Dir_10 = tree_bitset.high_to_low : tree_bitset.fold_direction,
          V_32 = int.(Offset_12 + HalfSize_18),
          tree_bitset.fold2_bits(Dir_10, P_11, V_32, HighBits_21, HalfSize_18, STATE_VARIABLE_AccA_0_22, STATE_VARIABLE_AccA_1_44, STATE_VARIABLE_AccB_0_24, STATE_VARIABLE_AccB_1_45),
          tree_bitset.fold2_bits(Dir_10, P_11, Offset_12, LowBits_20, HalfSize_18, STATE_VARIABLE_AccA_1_44, STATE_VARIABLE_AccA_7_33, STATE_VARIABLE_AccB_1_45, STATE_VARIABLE_AccB_7_34),
          STATE_VARIABLE_AccB_7_38 = STATE_VARIABLE_AccB_7_34,
          STATE_VARIABLE_AccA_7_37 = STATE_VARIABLE_AccA_7_33
        )
      )
    ),
    STATE_VARIABLE_AccB_25 = STATE_VARIABLE_AccB_7_38,
    STATE_VARIABLE_AccA_23 = STATE_VARIABLE_AccA_7_37.
:- pragma exceptions(function, (tree_bitset.init), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (tree_bitset.empty), 1, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (tree_bitset.empty), 1, 1, will_not_throw).
:- pragma exceptions(predicate, (tree_bitset.equal), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.from_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.make_singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.subset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.superset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.contains), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.member), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.member), 2, 1, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.insert), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.insert), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.remove_leq), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.remove_gt), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.remove_least), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.difference), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.difference), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.count), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldl2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.foldr2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.index_to_enum), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.wrap_tree_bitset), 2, 0, will_not_throw).
:- pragma exceptions(function, (tree_bitset.integrity), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (tree_bitset.mask), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (tree_bitset.do_foldl_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldl2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldl2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.do_foldr2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.leaf_foldr2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold_bits), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold_bits), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold_bits), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold_bits), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold_bits), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold_bits), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (tree_bitset.fold2_bits), 9, 7, may_throw(user_exception)).
:- pragma termination_info((tree_bitset.init) = (builtin.out), finite(2, [no, no]), cannot_loop).
:- pragma termination_info(tree_bitset.empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(tree_bitset.empty((builtin.out)), finite(2, [no, no]), cannot_loop).
:- pragma termination_info(tree_bitset.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(tree_bitset.list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.sorted_list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.from_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.to_sorted_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.make_singleton_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(tree_bitset.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(tree_bitset.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(tree_bitset.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(tree_bitset.member((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(tree_bitset.insert((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.insert((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.insert_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.delete((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.delete((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.delete_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.delete_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.remove((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.remove_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.remove_leq((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.remove_gt((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.remove_least((builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.union((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.union((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.intersect((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.intersect((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.difference((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.difference((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.count((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.filter((pred((builtin.in)) is semidet), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.index_to_enum((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(tree_bitset.wrap_tree_bitset((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(tree_bitset.integrity((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(tree_bitset.mask((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.leaf_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(tree_bitset.fold2_bits((builtin.in), (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
