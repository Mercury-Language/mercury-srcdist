:- module multi_map.
:- interface.
:- import_module assoc_list.
:- import_module list.
:- import_module map.
:- import_module set.
:- type multi_map(Key, Data) == (map.map(Key, (list.list(Data)))).
:- func add((multi_map.multi_map(K, V)), K, V) = (multi_map.multi_map(K, V)).
:- pred add((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode add((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func all_count((multi_map.multi_map(K, V))) = int.
:- pred all_count((multi_map.multi_map(K, V)), int).
:- mode all_count((builtin.in), (builtin.out)) is det.
:- func apply_to_list((list.list(K)), (multi_map.multi_map(K, V))) = (list.list(V)).
:- pred apply_to_list((list.list(K)), (multi_map.multi_map(K, V)), (list.list(V))).
:- mode apply_to_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred contains((multi_map.multi_map(K, _V)), K).
:- mode contains((builtin.in), (builtin.in)) is semidet.
:- func count((multi_map.multi_map(K, V))) = int.
:- pred count((multi_map.multi_map(K, V)), int).
:- mode count((builtin.in), (builtin.out)) is det.
:- func delete((multi_map.multi_map(K, V)), K) = (multi_map.multi_map(K, V)).
:- pred delete((multi_map.multi_map(K, V)), K, (multi_map.multi_map(K, V))).
:- mode delete((builtin.in), (builtin.in), (builtin.out)) is det.
:- func delete((multi_map.multi_map(K, V)), K, V) = (multi_map.multi_map(K, V)).
:- pred delete((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode delete((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func det_insert((multi_map.multi_map(K, V)), K, V) = (multi_map.multi_map(K, V)).
:- pred det_insert((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode det_insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred det_remove((multi_map.multi_map(K, V)), K, (list.list(V)), (multi_map.multi_map(K, V))).
:- mode det_remove((builtin.in), (builtin.in), (builtin.out), (builtin.out)) is det.
:- func det_replace((multi_map.multi_map(K, V)), K, (list.list(V))) = (multi_map.multi_map(K, V)).
:- pred det_replace((multi_map.multi_map(K, V)), K, (list.list(V)), (multi_map.multi_map(K, V))).
:- mode det_replace((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func det_update((multi_map.multi_map(K, V)), K, V) = (multi_map.multi_map(K, V)).
:- pred det_update((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode det_update((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func from_assoc_list((assoc_list.assoc_list(K, (list.list(V))))) = (multi_map.multi_map(K, V)).
:- pred from_assoc_list((assoc_list.assoc_list(K, (list.list(V)))), (multi_map.multi_map(K, V))).
:- mode from_assoc_list((builtin.in), (builtin.out)) is det.
:- func from_corresponding_list_lists((list.list(K)), (list.list((list.list(V))))) = (multi_map.multi_map(K, V)).
:- pred from_corresponding_list_lists((list.list(K)), (list.list((list.list(V)))), (multi_map.multi_map(K, V))).
:- mode from_corresponding_list_lists((builtin.in), (builtin.in), (builtin.out)) is det.
:- func from_corresponding_lists((list.list(K)), (list.list(V))) = (multi_map.multi_map(K, V)).
:- pred from_corresponding_lists((list.list(K)), (list.list(V)), (multi_map.multi_map(K, V))).
:- mode from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)) is det.
:- func from_flat_assoc_list((assoc_list.assoc_list(K, V))) = (multi_map.multi_map(K, V)).
:- pred from_flat_assoc_list((assoc_list.assoc_list(K, V)), (multi_map.multi_map(K, V))).
:- mode from_flat_assoc_list((builtin.in), (builtin.out)) is det.
:- func from_sorted_assoc_list((assoc_list.assoc_list(K, (list.list(V))))) = (multi_map.multi_map(K, V)).
:- pred from_sorted_assoc_list((assoc_list.assoc_list(K, (list.list(V)))), (multi_map.multi_map(K, V))).
:- mode from_sorted_assoc_list((builtin.in), (builtin.out)) is det.
:- func init = (multi_map.multi_map(V_1, V_2)).
:- pred init((multi_map.multi_map(V_1, V_2))).
:- mode init((builtin.uo)) is det.
:- pred insert((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred inverse_search((multi_map.multi_map(K, V)), V, K).
:- mode inverse_search((builtin.in), (builtin.in), (builtin.out)) is nondet.
:- pred is_empty((multi_map.multi_map(V_1, V_2))).
:- mode is_empty((builtin.in)) is semidet.
:- func keys((multi_map.multi_map(K, _V))) = (list.list(K)).
:- pred keys((multi_map.multi_map(K, _V)), (list.list(K))).
:- mode keys((builtin.in), (builtin.out)) is det.
:- func lookup((multi_map.multi_map(K, V)), K) = (list.list(V)).
:- pred lookup((multi_map.multi_map(K, V)), K, (list.list(V))).
:- mode lookup((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred member((multi_map.multi_map(K, V)), K, V).
:- mode member((builtin.in), (builtin.out), (builtin.out)) is nondet.
:- func merge((multi_map.multi_map(K, V)), (multi_map.multi_map(K, V))) = (multi_map.multi_map(K, V)).
:- pred merge((multi_map.multi_map(K, V)), (multi_map.multi_map(K, V)), (multi_map.multi_map(K, V))).
:- mode merge((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred nondet_lookup((multi_map.multi_map(K, V)), K, V).
:- mode nondet_lookup((builtin.in), (builtin.in), (builtin.out)) is nondet.
:- pred nondet_search((multi_map.multi_map(K, V)), K, V).
:- mode nondet_search((builtin.in), (builtin.in), (builtin.out)) is nondet.
:- func optimize((multi_map.multi_map(K, V))) = (multi_map.multi_map(K, V)).
:- pred optimize((multi_map.multi_map(K, V)), (multi_map.multi_map(K, V))).
:- mode optimize((builtin.in), (builtin.out)) is det.
:- pred remove((multi_map.multi_map(K, V)), K, (list.list(V)), (multi_map.multi_map(K, V))).
:- mode remove((builtin.in), (builtin.in), (builtin.out), (builtin.out)) is semidet.
:- pred remove_smallest((multi_map.multi_map(K, V)), K, (list.list(V)), (multi_map.multi_map(K, V))).
:- mode remove_smallest((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is semidet.
:- pred search((multi_map.multi_map(K, V)), K, (list.list(V))).
:- mode search((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func select((multi_map.multi_map(K, V)), (set.set(K))) = (multi_map.multi_map(K, V)).
:- pred select((multi_map.multi_map(K, V)), (set.set(K)), (multi_map.multi_map(K, V))).
:- mode select((builtin.in), (builtin.in), (builtin.out)) is det.
:- func set((multi_map.multi_map(K, V)), K, V) = (multi_map.multi_map(K, V)).
:- pred set((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode set((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func to_assoc_list((multi_map.multi_map(K, V))) = (assoc_list.assoc_list(K, (list.list(V)))).
:- pred to_assoc_list((multi_map.multi_map(K, V)), (assoc_list.assoc_list(K, (list.list(V))))).
:- mode to_assoc_list((builtin.in), (builtin.out)) is det.
:- func to_flat_assoc_list((multi_map.multi_map(K, V))) = (assoc_list.assoc_list(K, V)).
:- pred to_flat_assoc_list((multi_map.multi_map(K, V)), (assoc_list.assoc_list(K, V))).
:- mode to_flat_assoc_list((builtin.in), (builtin.out)) is det.
:- pred update((multi_map.multi_map(K, V)), K, V, (multi_map.multi_map(K, V))).
:- mode update((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func values((multi_map.multi_map(_K, V))) = (list.list(V)).
:- pred values((multi_map.multi_map(_K, V)), (list.list(V))).
:- mode values((builtin.in), (builtin.out)) is det.
