:- module set_ordlist.
:- interface.
:- import_module bool.
:- import_module list.
:- import_module term.
:- type set_ordlist(_T).
:- pragma type_spec(set_ordlist.contains((builtin.in), (builtin.in)), (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred__contains__[T = var(V_2)]')).
:- pragma type_spec((set_ordlist.difference)/3, (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred_or_func__difference__[T = var(V_2)]')).
:- pragma type_spec((set_ordlist.insert)/3, (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred_or_func__insert__[T = var(V_2)]')).
:- pragma type_spec((set_ordlist.insert_list)/3, (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred_or_func__insert_list__[T = var(V_2)]')).
:- pragma type_spec((set_ordlist.intersect)/3, (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred_or_func__intersect__[T = var(V_2)]')).
:- pragma type_spec((set_ordlist.list_to_set)/2, (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred_or_func__list_to_set__[T = var(V_2)]')).
:- pragma type_spec(set_ordlist.member((builtin.in), (builtin.in)), (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred__member__[T = var(V_2)]')).
:- pragma type_spec((set_ordlist.union)/3, (T = term.var(V_2)), (set_ordlist.'TypeSpecOf__pred_or_func__union__[T = var(V_2)]')).
:- pred contains(set_ordlist.set_ordlist(T), T).
:- mode contains((builtin.in), (builtin.in)) is semidet.
:- pred count(set_ordlist.set_ordlist(T), int).
:- mode count((builtin.in), (builtin.out)) is det.
:- func count(set_ordlist.set_ordlist(T)) = int.
:- pred delete(set_ordlist.set_ordlist(T), T, set_ordlist.set_ordlist(T)).
:- mode delete((builtin.in), (builtin.in), (builtin.out)) is det.
:- func delete(set_ordlist.set_ordlist(T), T) = set_ordlist.set_ordlist(T).
:- pred delete_list(set_ordlist.set_ordlist(T), list.list(T), set_ordlist.set_ordlist(T)).
:- mode delete_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func delete_list(set_ordlist.set_ordlist(T), list.list(T)) = set_ordlist.set_ordlist(T).
:- pred difference(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode difference((builtin.in), (builtin.in), (builtin.out)) is det.
:- func difference(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)) = set_ordlist.set_ordlist(T).
:- pred divide((pred T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred divide_by_set(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred empty(set_ordlist.set_ordlist(_T)).
:- mode empty((builtin.in)) is semidet.
:- pred equal(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode equal((builtin.in), (builtin.in)) is semidet.
:- func filter_map(((func T1) = T2), set_ordlist.set_ordlist(T1)) = set_ordlist.set_ordlist(T2).
:- mode filter_map((func((builtin.in)) = (builtin.out) is semidet), (builtin.in)) = (builtin.out) is det.
:- func fold((func(T1, T2) = T2), set_ordlist.set_ordlist(T1), T2) = T2.
:- func from_list(list.list(T)) = set_ordlist.set_ordlist(T).
:- func from_sorted_list(list.list(T)) = set_ordlist.set_ordlist(T).
:- pred init(set_ordlist.set_ordlist(_T)).
:- mode init((builtin.uo)) is det.
:- func init = set_ordlist.set_ordlist(T).
:- pred insert(set_ordlist.set_ordlist(T), T, set_ordlist.set_ordlist(T)).
:- mode insert((builtin.in), (builtin.in), (builtin.out)) is det.
:- func insert(set_ordlist.set_ordlist(T), T) = set_ordlist.set_ordlist(T).
:- pred insert_list(set_ordlist.set_ordlist(T), list.list(T), set_ordlist.set_ordlist(T)).
:- mode insert_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func insert_list(set_ordlist.set_ordlist(T), list.list(T)) = set_ordlist.set_ordlist(T).
:- pred intersect(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode intersect((builtin.in), (builtin.in), (builtin.out)) is det.
:- mode intersect((builtin.in), (builtin.in), (builtin.in)) is semidet.
:- func intersect(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)) = set_ordlist.set_ordlist(T).
:- func intersect_list(list.list(set_ordlist.set_ordlist(T))) = set_ordlist.set_ordlist(T).
:- pred is_member(T, set_ordlist.set_ordlist(T), bool.bool).
:- mode is_member((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list_to_set(list.list(T), set_ordlist.set_ordlist(T)).
:- mode list_to_set((builtin.in), (builtin.out)) is det.
:- func list_to_set(list.list(T)) = set_ordlist.set_ordlist(T).
:- func make_singleton_set(T) = set_ordlist.set_ordlist(T).
:- func map(((func T1) = T2), set_ordlist.set_ordlist(T1)) = set_ordlist.set_ordlist(T2).
:- pred member(T, set_ordlist.set_ordlist(T)).
:- mode member((builtin.in), (builtin.in)) is semidet.
:- mode member((builtin.out), (builtin.in)) is nondet.
:- pred power_intersect(set_ordlist.set_ordlist(set_ordlist.set_ordlist(T)), set_ordlist.set_ordlist(T)).
:- mode power_intersect((builtin.in), (builtin.out)) is det.
:- func power_intersect(set_ordlist.set_ordlist(set_ordlist.set_ordlist(T))) = set_ordlist.set_ordlist(T).
:- pred power_union(set_ordlist.set_ordlist(set_ordlist.set_ordlist(T)), set_ordlist.set_ordlist(T)).
:- mode power_union((builtin.in), (builtin.out)) is det.
:- func power_union(set_ordlist.set_ordlist(set_ordlist.set_ordlist(T))) = set_ordlist.set_ordlist(T).
:- pred remove(set_ordlist.set_ordlist(T), T, set_ordlist.set_ordlist(T)).
:- mode remove((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred remove_least(set_ordlist.set_ordlist(T), T, set_ordlist.set_ordlist(T)).
:- mode remove_least((builtin.in), (builtin.out), (builtin.out)) is semidet.
:- pred remove_list(set_ordlist.set_ordlist(T), list.list(T), set_ordlist.set_ordlist(T)).
:- mode remove_list((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred singleton_set(set_ordlist.set_ordlist(T), T).
:- mode singleton_set((builtin.in), (builtin.out)) is semidet.
:- mode singleton_set((builtin.out), (builtin.in)) is det.
:- pred sorted_list_to_set(list.list(T), set_ordlist.set_ordlist(T)).
:- mode sorted_list_to_set((builtin.in), (builtin.out)) is det.
:- func sorted_list_to_set(list.list(T)) = set_ordlist.set_ordlist(T).
:- pred subset(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode subset((builtin.in), (builtin.in)) is semidet.
:- pred superset(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode superset((builtin.in), (builtin.in)) is semidet.
:- pred to_sorted_list(set_ordlist.set_ordlist(T), list.list(T)).
:- mode to_sorted_list((builtin.in), (builtin.out)) is det.
:- func to_sorted_list(set_ordlist.set_ordlist(T)) = list.list(T).
:- pred union(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)).
:- mode union((builtin.in), (builtin.in), (builtin.out)) is det.
:- func union(set_ordlist.set_ordlist(T), set_ordlist.set_ordlist(T)) = set_ordlist.set_ordlist(T).
:- func union_list(list.list(set_ordlist.set_ordlist(T))) = set_ordlist.set_ordlist(T).
