:- module builtin.
:- interface.
:- type c_pointer.
:- type compare(T) == pred(builtin.comparison_result, T, T).
:- type comparison_func(T) == (func(T, T) = builtin.comparison_result).
:- type comparison_pred(T) == pred(T, T, builtin.comparison_result).
:- type comparison_result
    --->    (=) 
    ;       (<) 
    ;       (>) .
:- type unify(T) == pred(T, T).
:- inst (compare) == (pred((builtin.uo), (builtin.in), (builtin.in)) is det).
:- inst (comparison_func) == builtin.comparison_func(ground).
:- inst (comparison_func(I)) == (func(builtin.in(I), builtin.in(I)) = (builtin.out) is det).
:- inst (comparison_pred) == builtin.comparison_pred(ground).
:- inst (comparison_pred(I)) == (pred(builtin.in(I), builtin.in(I), (builtin.out)) is det).
:- inst (dead) == clobbered.
:- inst (mostly_dead) == mostly_clobbered.
:- inst (unify) == (pred((builtin.in), (builtin.in)) is semidet).
:- mode (di) == (unique >> clobbered).
:- mode (di(Inst)) == (Inst >> clobbered).
:- mode (ia) == (any >> any).
:- mode (in) == (ground >> ground).
:- mode (in(Inst)) == (Inst >> Inst).
:- mode (input) == (ground >> ground).
:- mode (mdi) == (mostly_unique >> mostly_clobbered).
:- mode (mdi(Inst)) == (Inst >> mostly_clobbered).
:- mode (mui) == (mostly_unique >> mostly_unique).
:- mode (muo) == (free >> mostly_unique).
:- mode (oa) == (free >> any).
:- mode (out) == (free >> ground).
:- mode (out(Inst)) == (free >> Inst).
:- mode (output) == (free >> ground).
:- mode (ui) == (unique >> unique).
:- mode (unused) == (free >> free).
:- mode (uo) == (free >> unique).
:- type_representation(compare(V_1), is_eqv_to(pred(builtin.comparison_result, V_1, V_1))).
:- type_representation(comparison_func(V_1), is_eqv_to((func(V_1, V_1) = builtin.comparison_result))).
:- type_representation(comparison_pred(V_1), is_eqv_to(pred(V_1, V_1, builtin.comparison_result))).
:- type_representation(comparison_result, du_repn(enum("=", "<", [">"],  no_c_j_cs))).
:- type_representation(unify(V_1), is_eqv_to(pred(V_1, V_1))).
