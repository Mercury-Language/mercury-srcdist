:- module set_ordlist.

:- pragma termination_info(set_ordlist.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(set_ordlist.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.count((builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.count((builtin.in), (builtin.out)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.delete((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.delete((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.delete_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(set_ordlist.delete_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.det_remove((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.det_remove_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.difference((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.difference((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.difference_loop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(1, [no, no, yes, no, no]), can_loop).
:- pragma termination_info(set_ordlist.divide_loop(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.filter_map(builtin.in((func((builtin.in)) = (builtin.out) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.filter_map(builtin.in((pred((builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl4(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl5(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.foldl6(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_ordlist.from_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.from_sorted_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info((set_ordlist.init) = (builtin.out), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.init((builtin.uo)), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert((builtin.in), (builtin.in)) = (builtin.out), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.insert_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.insert_loop((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert_new((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert_new_loop((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect_list((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect_loop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect_loop((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersection_and_differences((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.is_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.is_member((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.is_member_loop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.is_non_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.is_singleton((builtin.in), (builtin.out)), finite(-3, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.list_to_set((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.list_to_set((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.make_singleton_set((builtin.in)) = (builtin.out), finite(3, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.map((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.member((builtin.out), (builtin.in)), finite(-3, [no, no, yes]), cannot_loop).
:- pragma termination_info(set_ordlist.no_dups((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_intersect((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_intersect((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_union((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_union((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.remove((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.remove_least((builtin.out), (builtin.in), (builtin.out)), finite(-2, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.remove_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.rev_sorted_list_to_set((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.rev_sorted_list_to_set((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.singleton_set((builtin.in), (builtin.out)), finite(3, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.singleton_set((builtin.out), (builtin.in)), finite(-3, [no, no, yes]), cannot_loop).
:- pragma termination_info(set_ordlist.sort_no_dups((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.sorted_list_to_set((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.sorted_list_to_set((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.to_sorted_list((builtin.in)) = (builtin.out), finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.to_sorted_list((builtin.in), (builtin.out)), finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union((builtin.in), (builtin.in)) = (builtin.out), finite(-1, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union((builtin.in), (builtin.in), (builtin.out)), finite(-1, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union_list((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union_list_loop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).

:- pragma exceptions(predicate, (set_ordlist.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.contains), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.count), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.count), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.delete), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.delete), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.delete_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.det_remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.det_remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.difference), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.difference), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.difference_loop), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.divide), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.divide_by_set), 4, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.divide_loop), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.equal), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.filter), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.filter_map), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.filter_map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.fold), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold4), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold4), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold4), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold4), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold4), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold4), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold5), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold5), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold5), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold5), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold5), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold5), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold6), 14, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold6), 14, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold6), 14, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold6), 14, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold6), 14, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.fold6), 14, 5, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.foldl), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl4), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl4), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl4), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl4), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl4), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl4), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl5), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl5), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl5), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl5), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl5), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl5), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl6), 14, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl6), 14, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl6), 14, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl6), 14, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl6), 14, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.foldl6), 14, 5, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.from_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.from_sorted_list), 1, 0, conditional).
:- pragma exceptions(function, (set_ordlist.init), 0, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.init), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.insert), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.insert), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.insert_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.insert_loop), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.insert_new), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.insert_new_loop), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.intersect), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect), 3, 1, conditional).
:- pragma exceptions(function, (set_ordlist.intersect_list), 1, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect_list), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect_loop), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect_loop), 3, 1, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersection_and_differences), 5, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.is_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.is_member), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.is_member_loop), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.is_non_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.is_singleton), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.list_to_set), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.make_singleton_set), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.map), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.member), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.member), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.no_dups), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.power_intersect), 1, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.power_intersect), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.power_union), 1, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.power_union), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.remove), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.remove_least), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.rev_sorted_list_to_set), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.rev_sorted_list_to_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.singleton_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.singleton_set), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.sort_no_dups), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.sorted_list_to_set), 1, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.sorted_list_to_set), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.subset), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.superset), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.to_sorted_list), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.to_sorted_list), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.union), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.union), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.union_list), 1, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.union_list), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.union_list_loop), 3, 0, conditional).
