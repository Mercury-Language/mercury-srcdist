:- module set_ordlist.
:- pragma termination_info(set_ordlist.list_to_set((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.list_to_set((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.from_list((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.sorted_list_to_set((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.sorted_list_to_set((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.from_sorted_list((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.to_sorted_list((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.to_sorted_list((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.init((builtin.uo)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info((set_ordlist.init) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.singleton_set((builtin.in), (builtin.out)), finite(-2, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.singleton_set((builtin.out), (builtin.in)), finite(2, [no, no, yes]), cannot_loop).
:- pragma termination_info(set_ordlist.make_singleton_set((builtin.in)) = (builtin.out), finite(2, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.member((builtin.out), (builtin.in)), finite(-2, [no, no, yes]), cannot_loop).
:- pragma termination_info(set_ordlist.is_member((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert((builtin.in), (builtin.in)) = (builtin.out), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.insert_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.insert_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.delete((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.delete((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.delete_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(set_ordlist.delete_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(set_ordlist.remove((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.remove_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(set_ordlist.remove_least((builtin.in), (builtin.out), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.union_list((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_union((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_union((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_intersect((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_intersect((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.intersect_list((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.difference((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.difference((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.count((builtin.in), (builtin.out)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.count((builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.map((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.filter_map((func((builtin.in)) = (builtin.out) is semidet), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.fold((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_ordlist.divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(0, [no, no, yes, no, no]), can_loop).
:- pragma termination_info(set_ordlist.sort_no_dups((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(set_ordlist.no_dups((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(set_ordlist.power_union_2((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_ordlist.divide_2(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_ordlist.divide_by_set_2((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no, yes, no]), can_loop).
:- pragma exceptions(predicate, (set_ordlist.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.from_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.sorted_list_to_set), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.sorted_list_to_set), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.from_sorted_list), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.to_sorted_list), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.to_sorted_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.init), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.init), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.singleton_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.singleton_set), 2, 1, will_not_throw).
:- pragma exceptions(function, (set_ordlist.make_singleton_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.equal), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.subset), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.superset), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.member), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.member), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.is_member), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.contains), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.insert), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.insert), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.delete), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.delete), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.remove), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.remove_least), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (set_ordlist.union), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.union), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.union_list), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.power_union), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.power_union), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.intersect), 3, 1, conditional).
:- pragma exceptions(function, (set_ordlist.intersect), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.power_intersect), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.power_intersect), 2, 0, conditional).
:- pragma exceptions(function, (set_ordlist.intersect_list), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.difference), 3, 0, conditional).
:- pragma exceptions(function, (set_ordlist.difference), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.count), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.count), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_ordlist.map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.filter_map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_ordlist.fold), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.divide), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.divide_by_set), 4, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.sort_no_dups), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.no_dups), 2, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.power_union_2), 3, 0, conditional).
:- pragma exceptions(predicate, (set_ordlist.divide_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_ordlist.divide_by_set_2), 6, 0, conditional).
