:- module library.
:- use_module array.
:- use_module array2d.
:- use_module assoc_list.
:- use_module backjump.
:- use_module bag.
:- use_module benchmarking.
:- use_module bimap.
:- use_module bit_buffer.
:- use_module bitmap.
:- use_module bool.
:- use_module bt_array.
:- use_module builtin.
:- use_module calendar.
:- use_module char.
:- use_module construct.
:- use_module cord.
:- use_module counter.
:- use_module deconstruct.
:- use_module diet.
:- use_module digraph.
:- use_module dir.
:- use_module edit_seq.
:- use_module enum.
:- use_module eqvclass.
:- use_module exception.
:- use_module fat_sparse_bitset.
:- use_module float.
:- use_module gc.
:- use_module getopt.
:- use_module getopt_io.
:- use_module hash_table.
:- use_module injection.
:- use_module int.
:- use_module int16.
:- use_module int32.
:- use_module int64.
:- use_module int8.
:- use_module integer.
:- use_module io.
:- use_module kv_list.
:- use_module lazy.
:- use_module list.
:- use_module map.
:- use_module math.
:- use_module maybe.
:- use_module mercury_term_lexer.
:- use_module mercury_term_parser.
:- use_module multi_map.
:- use_module mutvar.
:- use_module one_or_more.
:- use_module one_or_more_map.
:- use_module ops.
:- use_module pair.
:- use_module par_builtin.
:- use_module parsing_utils.
:- use_module pprint.
:- use_module pqueue.
:- use_module pretty_printer.
:- use_module private_builtin.
:- use_module profiling_builtin.
:- use_module prolog.
:- use_module psqueue.
:- use_module queue.
:- use_module ra_list.
:- use_module random.
:- use_module ranges.
:- use_module rational.
:- use_module rbtree.
:- use_module region_builtin.
:- use_module require.
:- use_module robdd.
:- use_module rtree.
:- use_module rtti_implementation.
:- use_module set.
:- use_module set_bbbtree.
:- use_module set_ctree234.
:- use_module set_ordlist.
:- use_module set_tree234.
:- use_module set_unordlist.
:- use_module solutions.
:- use_module sparse_bitset.
:- use_module stack.
:- use_module std_util.
:- use_module stm_builtin.
:- use_module store.
:- use_module stream.
:- use_module string.
:- use_module table_builtin.
:- use_module table_statistics.
:- use_module term.
:- use_module term_context.
:- use_module term_conversion.
:- use_module term_int.
:- use_module term_io.
:- use_module term_size_prof_builtin.
:- use_module term_subst.
:- use_module term_to_xml.
:- use_module term_unify.
:- use_module term_vars.
:- use_module test_bitset.
:- use_module thread.
:- use_module time.
:- use_module tree234.
:- use_module tree_bitset.
:- use_module type_desc.
:- use_module uint.
:- use_module uint16.
:- use_module uint32.
:- use_module uint64.
:- use_module uint8.
:- use_module unit.
:- use_module univ.
:- use_module varset.
:- use_module version_array.
:- use_module version_array2d.
:- use_module version_bitmap.
:- use_module version_hash_table.
:- use_module version_store.
:- use_module (bit_buffer.read).
:- use_module (bit_buffer.write).
:- use_module (io.call_system).
:- use_module (io.environment).
:- use_module (io.file).
:- use_module (io.primitives_read).
:- use_module (io.primitives_write).
:- use_module (io.stream_db).
:- use_module (io.stream_ops).
:- use_module (random.sfc16).
:- use_module (random.sfc32).
:- use_module (random.sfc64).
:- use_module (random.system_rng).
:- use_module (stream.string_writer).
:- use_module (string.builder).
:- use_module (string.format).
:- use_module (string.parse_util).

library.mercury_std_library_module(V_2) :-
    library.stdlib_module_doc_undoc(V_2, V_3).

:- pragma termination_info(library.mercury_std_library_module((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info(library.stdlib_module_doc_undoc((builtin.in), (builtin.out)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(library.stdlib_module_doc_undoc((builtin.out), (builtin.out)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(library.version((builtin.out), (builtin.out)), infinite, cannot_loop).

:- pragma exceptions(predicate, (library.mercury_std_library_module), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (library.stdlib_module_doc_undoc), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (library.stdlib_module_doc_undoc), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (library.version), 2, 0, will_not_throw).
