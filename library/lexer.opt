:- module lexer.
:- use_module builtin.
:- use_module char.
:- use_module int.
:- use_module integer.
:- use_module io.
:- use_module list.
:- use_module private_builtin.
:- use_module require.
:- use_module string.

:- type get_token_action
    --->    action_whitespace 
    ;       action_alpha_lower 
    ;       action_alpha_upper_uscore 
    ;       action_zero 
    ;       action_nonzero_digit 
    ;       action_special_token 
    ;       action_dot 
    ;       action_percent 
    ;       action_quote 
    ;       action_slash 
    ;       action_hash 
    ;       action_backquote 
    ;       action_dollar 
    ;       action_graphic_token .
:- type scanned_past_whitespace
    --->    scanned_past_whitespace 
    ;       not_scanned_past_whitespace .
:- type string_token_context == int.

:- pred lexer.get_token(io.input_stream, lexer.token, int, io.state, io.state).
:- mode lexer.get_token((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred lexer.get_token_list_2(io.input_stream, lexer.token, int, lexer.token_list, io.state, io.state).
:- mode lexer.get_token_list_2((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.

lexer.get_token_list(V_4, V_9, V_10) :-
    io.input_stream(V_6, V_9, V_11),
    lexer.get_token(V_6, V_7, V_8, V_11, V_12),
    lexer.get_token_list_2(V_6, V_7, V_8, V_4, V_12, V_10).

lexer.string_get_token_list(V_5, V_6, V_9, V_10) :-
    string.length(V_5, V_8),
    lexer.string_get_token_list_max(V_5, V_8, V_6, V_9, V_10).
:- pragma exceptions(predicate, (lexer.get_token_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (lexer.string_get_token_list_max), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (lexer.string_get_token_list), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (lexer.token_to_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (lexer.graphic_token_char), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (lexer.get_token_list_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (lexer.get_token), 5, 0, may_throw(user_exception)).
:- pragma termination_info(lexer.get_token_list((builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(lexer.string_get_token_list_max((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(lexer.string_get_token_list((builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(lexer.token_to_string((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(lexer.graphic_token_char((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info(lexer.get_token_list_2((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(lexer.get_token((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
