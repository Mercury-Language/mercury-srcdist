:- module cord.
:- interface.
:- import_module list.
:- type cord(T).
:- func ++((cord.cord(T)), (cord.cord(T))) = (cord.cord(T)).
:- func cons(T, (cord.cord(T))) = (cord.cord(T)).
:- func empty = (cord.cord(T)).
:- pred equal((cord.cord(T)), (cord.cord(T))).
:- mode equal((builtin.in), (builtin.in)) is semidet.
:- func foldl((func(T, U) = U), (cord.cord(T)), U) = U.
:- func foldr((func(T, U) = U), (cord.cord(T)), U) = U.
:- func from_list((list.list(T))) = (cord.cord(T)).
:- pred get_first((cord.cord(T)), T).
:- mode get_first((builtin.in), (builtin.out)) is semidet.
:- pred get_last((cord.cord(T)), T).
:- mode get_last((builtin.in), (builtin.out)) is semidet.
:- pred head_tail((cord.cord(T)), T, (cord.cord(T))).
:- mode head_tail((builtin.in), (builtin.out), (builtin.out)) is semidet.
:- pred is_empty((cord.cord(T))).
:- mode is_empty((builtin.in)) is semidet.
:- func length((cord.cord(T))) = int.
:- func list((cord.cord(T))) = (list.list(T)).
:- func map(((func T) = U), (cord.cord(T))) = (cord.cord(U)).
:- pred member(T, (cord.cord(T))).
:- mode member((builtin.out), (builtin.in)) is nondet.
:- func singleton(T) = (cord.cord(T)).
:- func snoc((cord.cord(T)), T) = (cord.cord(T)).
:- pred split_last((cord.cord(T)), (cord.cord(T)), T).
:- mode split_last((builtin.in), (builtin.out), (builtin.out)) is semidet.
