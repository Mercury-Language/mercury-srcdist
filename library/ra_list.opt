:- module ra_list.
:- use_module builtin.
:- use_module int.
:- use_module list.
:- use_module private_builtin.
:- use_module require.

:- type ra_list(T)
    --->    nil 
    ;       cons(int, ra_list.ra_list_bintree(T), ra_list.ra_list(T)).
:- type ra_list_bintree(T)
    --->    leaf(T)
    ;       node(T, ra_list.ra_list_bintree(T), ra_list.ra_list_bintree(T)).

:- pred ra_list.index0_list(ra_list.ra_list(T), int, T).
:- mode index0_list((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred ra_list.update_2(int, T, ra_list.ra_list(T), ra_list.ra_list(T)).
:- mode update_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.

:- pragma inline(pred((ra_list.cons)/3)).
ra_list.cons(V_4, V_5, V_6) :-
    ( if
      V_5 = ra_list.cons(V_7, V_8, V_13) : ra_list.ra_list(T_1),
      V_13 = ra_list.cons(V_9, V_10, V_11) : ra_list.ra_list(T_1),
      V_7 = V_9
    then
      V_12 = int.(V_14 + V_9),
      V_14 = int.(V_15 + V_7),
      V_15 = 1 : int,
      V_6 = ra_list.cons(V_12, V_16, V_11) : ra_list.ra_list(T_1),
      V_16 = ra_list.node(V_4, V_8, V_10) : ra_list.ra_list_bintree(T_1)
    else
      V_6 = ra_list.cons(V_17, V_18, V_5) : ra_list.ra_list(T_1),
      V_17 = 1 : int,
      V_18 = ra_list.leaf(V_4) : ra_list.ra_list_bintree(T_1)
    ).

:- pragma inline(pred((ra_list.head)/2)).
ra_list.head(ra_list.cons(V_3, V_6, V_5), V_4) :-
    V_6 = ra_list.leaf(V_4) : ra_list.ra_list_bintree(T_1).
ra_list.head(ra_list.cons(V_7, V_12, V_11), V_8) :-
    V_12 = ra_list.node(V_8, V_9, V_10) : ra_list.ra_list_bintree(T_1).

:- pragma inline(pred((ra_list.head_tail)/3)).
ra_list.head_tail(ra_list.cons(V_4, V_7, V_6), V_5, V_6) :-
    V_7 = ra_list.leaf(V_5) : ra_list.ra_list_bintree(T_1).
ra_list.head_tail(ra_list.cons(V_8, V_15, V_12), V_9, V_13) :-
    V_15 = ra_list.node(V_9, V_10, V_11) : ra_list.ra_list_bintree(T_1),
    V_14 = int.(V_8 // V_16),
    V_16 = 2 : int,
    V_13 = ra_list.cons(V_14, V_10, V_17) : ra_list.ra_list(T_1),
    V_17 = ra_list.cons(V_14, V_11, V_12) : ra_list.ra_list(T_1).

:- pragma inline(pred((ra_list.index0)/3)).
ra_list.index0(V_4, V_5, V_6) :-
    V_7 = 0 : int,
    int.(V_5 >= V_7),
    ra_list.index0_list(V_4, V_5, V_6).

:- pragma inline(pred((ra_list.index1)/3)).
ra_list.index1(V_4, V_5, V_6) :-
    V_7 = int.(V_5 - V_8),
    V_8 = 1 : int,
    V_9 = 0 : int,
    int.(V_7 >= V_9),
    ra_list.index0_list(V_4, V_7, V_6).

:- pragma inline(pred((ra_list.init)/1)).
ra_list.init(ra_list.nil).

:- pragma inline(pred((ra_list.tail)/2)).
ra_list.tail(ra_list.cons(V_3, V_6, V_5), V_5) :-
    V_6 = ra_list.leaf(V_4) : ra_list.ra_list_bintree(T_1).
ra_list.tail(ra_list.cons(V_7, V_14, V_11), V_12) :-
    V_14 = ra_list.node(V_8, V_9, V_10) : ra_list.ra_list_bintree(T_1),
    V_13 = int.(V_7 // V_15),
    V_15 = 2 : int,
    V_12 = ra_list.cons(V_13, V_9, V_16) : ra_list.ra_list(T_1),
    V_16 = ra_list.cons(V_13, V_10, V_11) : ra_list.ra_list(T_1).

:- pragma inline(pred((ra_list.update)/4)).
ra_list.update(V_5, V_6, V_7, V_8) :-
    V_9 = 0 : int,
    int.(V_5 >= V_9),
    ra_list.update_2(V_5, V_6, V_7, V_8).

:- pragma termination_info(ra_list.append((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(ra_list.cons((builtin.in), (builtin.in), (builtin.out)), finite(4, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(ra_list.det_index0((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, yes, no, no]), can_loop).
:- pragma termination_info(ra_list.det_index1((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, yes, no, no]), can_loop).
:- pragma termination_info(ra_list.drop((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(ra_list.head((builtin.in), (builtin.out)), finite(-4, [no, yes, no]), cannot_loop).
:- pragma termination_info(ra_list.head_tail((builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(ra_list.index0((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, yes, no, no]), can_loop).
:- pragma termination_info(ra_list.index0_list((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, yes, no, no]), can_loop).
:- pragma termination_info(ra_list.index1((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, yes, no, no]), can_loop).
:- pragma termination_info(ra_list.init((builtin.uo)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ra_list.ra_list_to_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(ra_list.tail((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(ra_list.update((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(ra_list.update_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).

:- pragma exceptions(predicate, (ra_list.append), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.cons), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (ra_list.det_index0), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.det_index1), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.drop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.head), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (ra_list.head_tail), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.index0), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.index0_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.index1), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.init), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (ra_list.ra_list_to_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.tail), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.update), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (ra_list.update_2), 4, 0, may_throw(user_exception)).
