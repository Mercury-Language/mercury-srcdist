// Automatically generated from `io.m'
// by the Mercury compiler,
// version rotd-2022-07-24
// configured for x86_64-pc-linux-gnu.
// Do not edit.
#ifndef IO_MH
#define IO_MH

#ifdef __cplusplus
extern "C" {
#endif

#ifdef MR_HIGHLEVEL_CODE
#include "mercury.h"
#else
  #ifndef MERCURY_HDR_EXCLUDE_IMP_H
  #include "mercury_imp.h"
  #endif
#endif
#ifdef MR_DEEP_PROFILING
#include "mercury_deep_profiling.h"
#endif

#ifndef IO_DECL_GUARD
#define IO_DECL_GUARD
#define ML_MIRC_OK 0
#define ML_MIRC_EOF 1
#define ML_MIRC_INCOMPLETE 2
#define ML_MIRC_ERROR 3
#define ML_RESULT_CODE_OK 0
#define ML_RESULT_CODE_EOF 1
#define ML_RESULT_CODE_ERROR 2
#define ML_BIG_ENDIAN 0
#define ML_LITTLE_ENDIAN 1

#ifdef MR_WIN32
  #include <wchar.h>    // for dev_t, ino_t
#endif

#ifdef MR_HAVE_DEV_T
  typedef   dev_t       ML_dev_t;
#else
  typedef   MR_Integer  ML_dev_t;
#endif

#ifdef MR_HAVE_INO_T
  typedef   ino_t       ML_ino_t;
#else
  typedef   MR_Integer  ML_ino_t;
#endif

typedef struct {
    ML_dev_t device;
    ML_ino_t inode;
} ML_File_Id;


#ifdef MR_HAVE_UNISTD_H
    #include <unistd.h>
#endif
#ifdef MR_HAVE_SYS_STAT_H
    #include <sys/stat.h>
#endif
#include "mercury_types.h"            // for MR_Integer
#include "mercury_library_types.h"    // for MercuryFilePtr
#include "mercury_int.h"              // for MR_*_reverse_bytes

#include "mercury_init.h"
#include "mercury_wrapper.h"
#include "mercury_type_info.h"
#include "mercury_file.h"
#include "mercury_heap.h"
#include "mercury_misc.h"
#include "mercury_runtime_util.h"
#include "mercury_report_stats.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <errno.h>
#include <inttypes.h>
#include <limits.h>

#ifdef MR_HAVE_SYS_WAIT_H
  #include <sys/wait.h>     // for WIFEXITED, WEXITSTATUS, etc.
#endif

#ifdef MR_WIN32
  #include "mercury_windows.h"
#endif

extern MR_Word          ML_io_user_globals;
#ifdef MR_THREAD_SAFE
    extern MercuryLock  ML_io_user_globals_lock;
#endif

#if 0
    extern MR_Word      ML_io_ops_table;
#endif

void                    mercury_init_io(void);

#ifdef MR_WIN32
    wchar_t             *ML_utf8_to_wide(const char *s);
    char                *ML_wide_to_utf8(const wchar_t *ws,
                            MR_AllocSiteInfoPtr alloc_id);
#endif

// ML_make_err_msg(errnum, msg, alloc_id, error_msg):
// Append msg and a message for errnum to give error_msg.
//
// WARNING: this must only be called when the `hp' register is valid.
// That means it must only be called from procedures declared
// `[will_not_call_mercury, promise_pure]'.
//
// This is defined as a macro rather than a C function to avoid worrying
// about the `hp' register being invalidated by the function call.

#define ML_make_err_msg(errnum, msg, alloc_id, error_msg)                   \
    do {                                                                    \
        char    errbuf[MR_STRERROR_BUF_SIZE];                               \
        const char *errno_msg;                                              \
        size_t  total_len;                                                  \
                                                                            \
        errno_msg = MR_strerror(errnum, errbuf, sizeof(errbuf));            \
        total_len = strlen(msg) + strlen(errno_msg);                        \
        MR_allocate_aligned_string_msg((error_msg), total_len, (alloc_id)); \
        strcpy((error_msg), msg);                                           \
        strcat((error_msg), errno_msg);                                     \
    } while(0)

// ML_make_win32_err_msg(error, msg, alloc_id, error_msg):
// Append msg and the string returned by the Win32 API function
// FormatMessage() for the last error to give error_msg.
//
// WARNING: this must only be called when the `hp' register is valid.
// That means it must only be called from foreign_procs with the
// will_not_call_mercury attribute.
//
// This is defined as a macro rather than a C function
// to avoid worrying about the `hp' register being
// invalidated by the function call.

#ifdef MR_WIN32

#define ML_make_win32_err_msg(error, msg, alloc_id, error_msg)              \
    do {                                                                    \
        size_t total_len;                                                   \
        LPVOID  err_buf;                                                    \
        MR_bool free_err_buf = MR_TRUE;                                     \
                                                                            \
        if (!FormatMessage(                                                 \
            FORMAT_MESSAGE_ALLOCATE_BUFFER                                  \
            | FORMAT_MESSAGE_FROM_SYSTEM                                    \
            | FORMAT_MESSAGE_IGNORE_INSERTS,                                \
            NULL,                                                           \
            error,                                                          \
            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),                      \
            (LPTSTR) &err_buf,                                              \
            0,                                                              \
            NULL))                                                          \
        {                                                                   \
            free_err_buf = MR_FALSE;                                        \
            err_buf = (LPVOID) "could not retrieve error message";        \
        }                                                                   \
        total_len = strlen(msg) + strlen((char *) err_buf);                 \
        MR_allocate_aligned_string_msg((error_msg), total_len, (alloc_id)); \
        strcpy((error_msg), msg);                                           \
        strcat((error_msg), (char *) err_buf);                              \
        if (free_err_buf) {                                                 \
            LocalFree(err_buf);                                             \
        }                                                                   \
    } while(0)

#endif // !MR_WIN32


#endif
void ML_io_print_to_stream(MR_Word, MercuryFilePtr, MR_Word);

#ifdef __cplusplus
}
#endif

#endif /* IO_MH */
