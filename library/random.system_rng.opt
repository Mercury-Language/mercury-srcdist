:- module (random.system_rng).
:- use_module array.
:- use_module bool.
:- use_module builtin.
:- use_module exception.
:- use_module float.
:- use_module int.
:- use_module io.
:- use_module list.
:- use_module math.
:- use_module maybe.
:- use_module mutvar.
:- use_module private_builtin.
:- use_module string.
:- use_module uint.
:- use_module uint32.
:- use_module (string.format).
:- use_module (string.parse_util).

:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C", float).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C", stm_builtin).
:- pragma foreign_import_module("C", store).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", (io.stream_ops)).
:- pragma foreign_import_module("C", (random.system_rng)).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("C#", mutvar).
:- pragma foreign_import_module("C#", store).
:- pragma foreign_import_module("C#", (io.stream_ops)).
:- pragma foreign_import_module("C#", (random.system_rng)).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Java", mutvar).
:- pragma foreign_import_module("Java", store).
:- pragma foreign_import_module("Java", (io.stream_ops)).
:- pragma foreign_import_module("Java", (random.system_rng)).

:- type system_rng.
:- pragma foreign_type(c, system_rng, "ML_SystemRandomHandle", [can_pass_as_mercury_type]).
:- pragma foreign_type(java, system_rng, "random__system_rng.ML_SystemRandomHandle").
:- pragma foreign_type(csharp, system_rng, "random__system_rng.ML_SystemRandomHandle").

:- instance (random.urandom(random.system_rng.system_rng, io.state)).

:- pragma foreign_proc("C", (random.system_rng).have_system_rng, [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, may_modify_trail], "
#if defined(ML_SYSRAND_IMPL_NONE)
    SUCCESS_INDICATOR = MR_FALSE;
#else
    SUCCESS_INDICATOR = MR_TRUE;
#endif
").

:- pragma termination_info((random.system_rng).'ClassMethod_for_random__urandom____random__system_rng__system_rng__arity0__io__state__arity0______random__generate_uint16_4'((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).'ClassMethod_for_random__urandom____random__system_rng__system_rng__arity0__io__state__arity0______random__generate_uint32_4'((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).'ClassMethod_for_random__urandom____random__system_rng__system_rng__arity0__io__state__arity0______random__generate_uint64_4'((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).'ClassMethod_for_random__urandom____random__system_rng__system_rng__arity0__io__state__arity0______random__generate_uint8_4'((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).close_system_rng((builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).generate_uint16((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).generate_uint32((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).generate_uint64((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((random.system_rng).generate_uint8((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(((random.system_rng).have_system_rng), finite(0, []), cannot_loop).
:- pragma termination_info((random.system_rng).open_system_rng((builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).

:- pragma exceptions(predicate, ((random.system_rng).close_system_rng), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((random.system_rng).generate_uint16), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((random.system_rng).generate_uint32), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((random.system_rng).generate_uint64), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((random.system_rng).generate_uint8), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((random.system_rng).have_system_rng), 0, 0, will_not_throw).
:- pragma exceptions(predicate, ((random.system_rng).open_system_rng), 3, 0, will_not_throw).
