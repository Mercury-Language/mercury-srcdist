:- module tree_bitset.
:- interface.
:- use_module enum.
:- use_module list.
:- use_module set.
:- use_module term.
:- type tree_bitset(T).
:- pred all_true((pred T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode all_true(builtin.in((pred(builtin.in) is semidet)), builtin.in) is semidet.
:- pred contains(tree_bitset.tree_bitset(T), T) <= (enum.uenum(T)).
:- mode contains(builtin.in, builtin.in) is semidet.
:- func count(tree_bitset.tree_bitset(T)) = int <= (enum.uenum(T)).
:- pred delete(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode delete(builtin.in, builtin.in, builtin.out) is det.
:- func delete(tree_bitset.tree_bitset(T), T) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred delete_list(list.list(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode delete_list(builtin.in, builtin.in, builtin.out) is det.
:- func delete_list(tree_bitset.tree_bitset(T), list.list(T)) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred difference(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)).
:- mode difference(builtin.in, builtin.in, builtin.out) is det.
:- func difference(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) = tree_bitset.tree_bitset(T).
:- pred divide((pred T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode divide(builtin.in((pred(builtin.in) is semidet)), builtin.in, builtin.out, builtin.out) is det.
:- pred divide_by_set(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode divide_by_set(builtin.in, builtin.in, builtin.out, builtin.out) is det.
:- pred equal(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode equal(builtin.in, builtin.in) is semidet.
:- func filter((pred T), tree_bitset.tree_bitset(T)) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- mode filter(builtin.in((pred(builtin.in) is semidet)), builtin.in) = builtin.out is det.
:- pred filter((pred T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode filter(builtin.in((pred(builtin.in) is semidet)), builtin.in, builtin.out, builtin.out) is det.
:- pred foldl(pred(T, U, U), tree_bitset.tree_bitset(T), U, U) <= (enum.uenum(T)).
:- mode foldl(builtin.in((pred(builtin.in, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out) is det.
:- mode foldl(builtin.in((pred(builtin.in, builtin.mdi, builtin.muo) is det)), builtin.in, builtin.mdi, builtin.muo) is det.
:- mode foldl(builtin.in((pred(builtin.in, builtin.di, builtin.uo) is det)), builtin.in, builtin.di, builtin.uo) is det.
:- mode foldl(builtin.in((pred(builtin.in, builtin.in, builtin.out) is semidet)), builtin.in, builtin.in, builtin.out) is semidet.
:- mode foldl(builtin.in((pred(builtin.in, builtin.mdi, builtin.muo) is semidet)), builtin.in, builtin.mdi, builtin.muo) is semidet.
:- mode foldl(builtin.in((pred(builtin.in, builtin.di, builtin.uo) is semidet)), builtin.in, builtin.di, builtin.uo) is semidet.
:- mode foldl(builtin.in((pred(builtin.in, builtin.in, builtin.out) is nondet)), builtin.in, builtin.in, builtin.out) is nondet.
:- mode foldl(builtin.in((pred(builtin.in, builtin.mdi, builtin.muo) is nondet)), builtin.in, builtin.mdi, builtin.muo) is nondet.
:- mode foldl(builtin.in((pred(builtin.in, builtin.di, builtin.uo) is cc_multi)), builtin.in, builtin.di, builtin.uo) is cc_multi.
:- mode foldl(builtin.in((pred(builtin.in, builtin.in, builtin.out) is cc_multi)), builtin.in, builtin.in, builtin.out) is cc_multi.
:- func foldl((func(T, U) = U), tree_bitset.tree_bitset(T), U) = U <= (enum.uenum(T)).
:- pred foldl2(pred(T, U, U, V, V), tree_bitset.tree_bitset(T), U, U, V, V) <= (enum.uenum(T)).
:- mode foldl2(builtin.in((pred(builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is det)), builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is det.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is det)), builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is det.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is det.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is semidet)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is semidet.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is nondet)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is nondet.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is cc_multi)), builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is cc_multi.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is cc_multi)), builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is cc_multi.
:- mode foldl2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is cc_multi)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is cc_multi.
:- pred foldr(pred(T, U, U), tree_bitset.tree_bitset(T), U, U) <= (enum.uenum(T)).
:- mode foldr(builtin.in((pred(builtin.in, builtin.di, builtin.uo) is det)), builtin.in, builtin.di, builtin.uo) is det.
:- mode foldr(builtin.in((pred(builtin.in, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out) is det.
:- mode foldr(builtin.in((pred(builtin.in, builtin.in, builtin.out) is semidet)), builtin.in, builtin.in, builtin.out) is semidet.
:- mode foldr(builtin.in((pred(builtin.in, builtin.in, builtin.out) is nondet)), builtin.in, builtin.in, builtin.out) is nondet.
:- mode foldr(builtin.in((pred(builtin.in, builtin.di, builtin.uo) is cc_multi)), builtin.in, builtin.di, builtin.uo) is cc_multi.
:- mode foldr(builtin.in((pred(builtin.in, builtin.in, builtin.out) is cc_multi)), builtin.in, builtin.in, builtin.out) is cc_multi.
:- func foldr((func(T, U) = U), tree_bitset.tree_bitset(T), U) = U <= (enum.uenum(T)).
:- pred foldr2(pred(T, U, U, V, V), tree_bitset.tree_bitset(T), U, U, V, V) <= (enum.uenum(T)).
:- mode foldr2(builtin.in((pred(builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is det)), builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is det.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is det)), builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is det.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is det.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is semidet)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is semidet.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is nondet)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is nondet.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is cc_multi)), builtin.in, builtin.di, builtin.uo, builtin.di, builtin.uo) is cc_multi.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is cc_multi)), builtin.in, builtin.in, builtin.out, builtin.di, builtin.uo) is cc_multi.
:- mode foldr2(builtin.in((pred(builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is cc_multi)), builtin.in, builtin.in, builtin.out, builtin.in, builtin.out) is cc_multi.
:- func from_set(set.set(T)) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- func init = tree_bitset.tree_bitset(T).
:- pred insert(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode insert(builtin.in, builtin.in, builtin.out) is det.
:- func insert(tree_bitset.tree_bitset(T), T) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred insert_list(list.list(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode insert_list(builtin.in, builtin.in, builtin.out) is det.
:- func insert_list(tree_bitset.tree_bitset(T), list.list(T)) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred insert_new(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode insert_new(builtin.in, builtin.in, builtin.out) is semidet.
:- pred intersect(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)).
:- mode intersect(builtin.in, builtin.in, builtin.out) is det.
:- func intersect(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) = tree_bitset.tree_bitset(T).
:- pred intersect_list(list.list(tree_bitset.tree_bitset(T)), tree_bitset.tree_bitset(T)).
:- mode intersect_list(builtin.in, builtin.out) is det.
:- func intersect_list(list.list(tree_bitset.tree_bitset(T))) = tree_bitset.tree_bitset(T).
:- pred is_empty(tree_bitset.tree_bitset(T)).
:- mode is_empty(builtin.in) is semidet.
:- pred is_non_empty(tree_bitset.tree_bitset(T)).
:- mode is_non_empty(builtin.in) is semidet.
:- pred is_singleton(tree_bitset.tree_bitset(T), T) <= (enum.uenum(T)).
:- mode is_singleton(builtin.in, builtin.out) is semidet.
:- pred list_to_set(list.list(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode list_to_set(builtin.in, builtin.out) is det.
:- func list_to_set(list.list(T)) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- func make_singleton_set(T) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred member(T, tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode member(builtin.in, builtin.in) is semidet.
:- mode member(builtin.out, builtin.in) is nondet.
:- pred remove(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode remove(builtin.in, builtin.in, builtin.out) is semidet.
:- pred remove_gt(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode remove_gt(builtin.in, builtin.in, builtin.out) is det.
:- func remove_gt(tree_bitset.tree_bitset(T), T) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred remove_least(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode remove_least(builtin.out, builtin.in, builtin.out) is semidet.
:- pred remove_leq(T, tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode remove_leq(builtin.in, builtin.in, builtin.out) is det.
:- func remove_leq(tree_bitset.tree_bitset(T), T) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred remove_list(list.list(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode remove_list(builtin.in, builtin.in, builtin.out) is semidet.
:- pred sorted_list_to_set(list.list(T), tree_bitset.tree_bitset(T)) <= (enum.uenum(T)).
:- mode sorted_list_to_set(builtin.in, builtin.out) is det.
:- func sorted_list_to_set(list.list(T)) = tree_bitset.tree_bitset(T) <= (enum.uenum(T)).
:- pred subset(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)).
:- mode subset(builtin.in, builtin.in) is semidet.
:- pred superset(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)).
:- mode superset(builtin.in, builtin.in) is semidet.
:- func to_set(tree_bitset.tree_bitset(T)) = set.set(T) <= (enum.uenum(T)).
:- pred to_sorted_list(tree_bitset.tree_bitset(T), list.list(T)) <= (enum.uenum(T)).
:- mode to_sorted_list(builtin.in, builtin.out) is det.
:- func to_sorted_list(tree_bitset.tree_bitset(T)) = list.list(T) <= (enum.uenum(T)).
:- pred union(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)).
:- mode union(builtin.in, builtin.in, builtin.out) is det.
:- func union(tree_bitset.tree_bitset(T), tree_bitset.tree_bitset(T)) = tree_bitset.tree_bitset(T).
:- pred union_list(list.list(tree_bitset.tree_bitset(T)), tree_bitset.tree_bitset(T)).
:- mode union_list(builtin.in, builtin.out) is det.
:- func union_list(list.list(tree_bitset.tree_bitset(T))) = tree_bitset.tree_bitset(T).
:- pragma type_spec(pred(tree_bitset.all_true/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.all_true/2), T = int).
:- pragma type_spec(pred(tree_bitset.contains/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.contains/2), T = int).
:- pragma type_spec(pred(tree_bitset.equal/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.equal/2), T = int).
:- pragma type_spec(pred(tree_bitset.list_to_set/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.list_to_set/2), T = int).
:- pragma type_spec(pred(tree_bitset.member/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.member/2), T = int).
:- pragma type_spec(pred(tree_bitset.sorted_list_to_set/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.sorted_list_to_set/2), T = int).
:- pragma type_spec(pred(tree_bitset.subset/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.subset/2), T = int).
:- pragma type_spec(pred(tree_bitset.superset/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.superset/2), T = int).
:- pragma type_spec(pred(tree_bitset.to_sorted_list/2), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.to_sorted_list/2), T = int).
:- pragma type_spec(pred(tree_bitset.delete/3), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.delete/3), T = int).
:- pragma type_spec(pred(tree_bitset.delete_list/3), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.delete_list/3), T = int).
:- pragma type_spec(pred(tree_bitset.insert/3), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.insert/3), T = int).
:- pragma type_spec(pred(tree_bitset.insert_list/3), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.insert_list/3), T = int).
:- pragma type_spec(pred(tree_bitset.foldl/4), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.foldl/4), T = int).
:- pragma type_spec(pred(tree_bitset.foldr/4), T = term.var(Anon1)).
:- pragma type_spec(pred(tree_bitset.foldr/4), T = int).
:- pragma type_spec(func(tree_bitset.init/0), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.init/0), T = int).
:- pragma type_spec(func(tree_bitset.from_set/1), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.from_set/1), T = int).
:- pragma type_spec(func(tree_bitset.list_to_set/1), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.list_to_set/1), T = int).
:- pragma type_spec(func(tree_bitset.make_singleton_set/1), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.make_singleton_set/1), T = int).
:- pragma type_spec(func(tree_bitset.sorted_list_to_set/1), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.sorted_list_to_set/1), T = int).
:- pragma type_spec(func(tree_bitset.to_set/1), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.to_set/1), T = int).
:- pragma type_spec(func(tree_bitset.to_sorted_list/1), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.to_sorted_list/1), T = int).
:- pragma type_spec(func(tree_bitset.delete/2), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.delete/2), T = int).
:- pragma type_spec(func(tree_bitset.delete_list/2), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.delete_list/2), T = int).
:- pragma type_spec(func(tree_bitset.insert/2), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.insert/2), T = int).
:- pragma type_spec(func(tree_bitset.insert_list/2), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.insert_list/2), T = int).
:- pragma type_spec(func(tree_bitset.foldl/3), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.foldl/3), T = int).
:- pragma type_spec(func(tree_bitset.foldr/3), T = term.var(Anon1)).
:- pragma type_spec(func(tree_bitset.foldr/3), T = int).
