:- module ops.

:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__arg_priority_1'(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__comma_priority_1'(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__is_op_2'(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__lookup_binary_prefix_op_5'(builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), finite(4, [no, no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__lookup_infix_op_5'(builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), finite(4, [no, no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__lookup_op_infos_3'(builtin.in, builtin.in, builtin.out), finite(11, [no, no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__lookup_operator_term_4'(builtin.in, builtin.out, builtin.out, builtin.out), finite(1, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__lookup_postfix_op_4'(builtin.in, builtin.in, builtin.out, builtin.out), finite(5, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__lookup_prefix_op_4'(builtin.in, builtin.in, builtin.out, builtin.out), finite(5, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__loosest_op_priority_1'(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__tightest_op_priority_1'(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.'ClassMethod_for_ops__op_table____ops__mercury_op_table__arity0______ops__universal_priority_1'(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.arg_priority(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(ops.comma_priority(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(ops.decrement_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.increment_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info((ops.init_mercury_op_table) = builtin.uo, finite(0, [no]), cannot_loop).
:- pragma termination_info(ops.is_mercury_op(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ops.is_op(builtin.in, builtin.in), infinite, can_loop).
:- pragma termination_info(ops.lookup_binary_prefix_op(builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(ops.lookup_infix_op(builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(ops.lookup_mercury_binary_prefix_op(builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), finite(4, [no, no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.lookup_mercury_infix_op(builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), finite(4, [no, no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.lookup_mercury_op_infos(builtin.in, builtin.in, builtin.out), finite(11, [no, no, no]), cannot_loop).
:- pragma termination_info(ops.lookup_mercury_operator_term(builtin.in, builtin.out, builtin.out, builtin.out), finite(1, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.lookup_mercury_postfix_op(builtin.in, builtin.in, builtin.out, builtin.out), finite(5, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.lookup_mercury_prefix_op(builtin.in, builtin.in, builtin.out, builtin.out), finite(5, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.lookup_op_infos(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(ops.lookup_operator_term(builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(ops.lookup_postfix_op(builtin.in, builtin.in, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(ops.lookup_prefix_op(builtin.in, builtin.in, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(ops.loosest_op_priority(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(ops.mercury_arg_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_comma_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_loosest_op_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table(builtin.in, builtin.out), finite(11, [no, no]), cannot_loop).
:- pragma termination_info((ops.mercury_op_table_arg_priority) = builtin.out, finite(1, [no]), cannot_loop).
:- pragma termination_info((ops.mercury_op_table_comma_priority) = builtin.out, finite(1, [no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_is_op(builtin.in), finite(0, [no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_lookup_operator_term(builtin.out, builtin.out, builtin.out), finite(1, [no, no, no]), cannot_loop).
:- pragma termination_info((ops.mercury_op_table_loosest_op_priority) = builtin.out, finite(1, [no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_search_binary_prefix_op(builtin.in, builtin.out, builtin.out, builtin.out), finite(4, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_search_infix_op(builtin.in, builtin.out, builtin.out, builtin.out), finite(4, [no, no, no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_search_op_infos(builtin.in, builtin.out), finite(11, [no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_search_postfix_op(builtin.in, builtin.out, builtin.out), finite(5, [no, no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_op_table_search_prefix_op(builtin.in, builtin.out, builtin.out), finite(5, [no, no, no]), cannot_loop).
:- pragma termination_info((ops.mercury_op_table_tightest_op_priority) = builtin.out, finite(1, [no]), cannot_loop).
:- pragma termination_info((ops.mercury_op_table_universal_priority) = builtin.out, finite(1, [no]), cannot_loop).
:- pragma termination_info(ops.mercury_tightest_op_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.mercury_universal_priority(builtin.in) = builtin.out, finite(1, [no, no]), cannot_loop).
:- pragma termination_info(ops.min_priority_for_arg(builtin.in, builtin.in) = builtin.out, finite(1, [yes, no, no]), cannot_loop).
:- pragma termination_info(ops.op_infos_binary_prefix_op(builtin.in, builtin.out, builtin.out, builtin.out), finite(-7, [yes, no, no, no]), cannot_loop).
:- pragma termination_info(ops.op_infos_infix_op(builtin.in, builtin.out, builtin.out, builtin.out), finite(-7, [yes, no, no, no]), cannot_loop).
:- pragma termination_info(ops.op_infos_postfix_op(builtin.in, builtin.out, builtin.out), finite(-6, [yes, no, no]), cannot_loop).
:- pragma termination_info(ops.op_infos_prefix_op(builtin.in, builtin.out, builtin.out), finite(-6, [yes, no, no]), cannot_loop).
:- pragma termination_info(ops.priority_ge(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ops.priority_gt(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ops.priority_le(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ops.priority_lt(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(ops.tightest_op_priority(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(ops.universal_priority(builtin.in) = builtin.out, infinite, can_loop).

:- pragma exceptions(function, ops.arg_priority, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, ops.comma_priority, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, ops.decrement_priority, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, ops.increment_priority, 1, 0, will_not_throw).
:- pragma exceptions(function, ops.init_mercury_op_table, 0, 0, will_not_throw).
:- pragma exceptions(predicate, ops.is_mercury_op, 2, 0, will_not_throw).
:- pragma exceptions(predicate, ops.is_op, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ops.lookup_binary_prefix_op, 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ops.lookup_infix_op, 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ops.lookup_mercury_binary_prefix_op, 5, 0, will_not_throw).
:- pragma exceptions(predicate, ops.lookup_mercury_infix_op, 5, 0, will_not_throw).
:- pragma exceptions(predicate, ops.lookup_mercury_op_infos, 3, 0, will_not_throw).
:- pragma exceptions(predicate, ops.lookup_mercury_operator_term, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.lookup_mercury_postfix_op, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.lookup_mercury_prefix_op, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.lookup_op_infos, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ops.lookup_operator_term, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ops.lookup_postfix_op, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ops.lookup_prefix_op, 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, ops.loosest_op_priority, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, ops.mercury_arg_priority, 1, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_comma_priority, 1, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_loosest_op_priority, 1, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table, 2, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_op_table_arg_priority, 0, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_op_table_comma_priority, 0, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_is_op, 1, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_lookup_operator_term, 3, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_op_table_loosest_op_priority, 0, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_search_binary_prefix_op, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_search_infix_op, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_search_op_infos, 2, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_search_postfix_op, 3, 0, will_not_throw).
:- pragma exceptions(predicate, ops.mercury_op_table_search_prefix_op, 3, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_op_table_tightest_op_priority, 0, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_op_table_universal_priority, 0, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_tightest_op_priority, 1, 0, will_not_throw).
:- pragma exceptions(function, ops.mercury_universal_priority, 1, 0, will_not_throw).
:- pragma exceptions(function, ops.min_priority_for_arg, 2, 0, will_not_throw).
:- pragma exceptions(predicate, ops.op_infos_binary_prefix_op, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.op_infos_infix_op, 4, 0, will_not_throw).
:- pragma exceptions(predicate, ops.op_infos_postfix_op, 3, 0, will_not_throw).
:- pragma exceptions(predicate, ops.op_infos_prefix_op, 3, 0, will_not_throw).
:- pragma exceptions(predicate, ops.priority_ge, 2, 0, will_not_throw).
:- pragma exceptions(predicate, ops.priority_gt, 2, 0, will_not_throw).
:- pragma exceptions(predicate, ops.priority_le, 2, 0, will_not_throw).
:- pragma exceptions(predicate, ops.priority_lt, 2, 0, will_not_throw).
:- pragma exceptions(function, ops.tightest_op_priority, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, ops.universal_priority, 1, 0, may_throw(user_exception)).
