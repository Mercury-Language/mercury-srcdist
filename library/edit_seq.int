:- module edit_seq.
:- interface.
:- use_module list.
:- type change_hunk(T)
    --->    change_hunk(edit_seq.ch_seq_a_start :: int, edit_seq.ch_seq_a_length :: int, edit_seq.ch_seq_b_start :: int, edit_seq.ch_seq_b_length :: int, edit_seq.ch_diff :: edit_seq.diff_seq(T)).
:- type diff(T)
    --->    unchanged(T)
    ;       deleted(T)
    ;       inserted(T).
:- type diff_seq(T) == list.list(edit_seq.diff(T)).
:- type edit(T)
    --->    delete(int)
    ;       insert(int, T)
    ;       replace(int, T).
:- type edit_params
    --->    edit_params(edit_seq.cost_of_delete :: int, edit_seq.cost_of_insert :: int, edit_seq.cost_of_replace :: int).
:- type edit_seq(T) == list.list(edit_seq.edit(T)).
:- pred find_change_hunks(int, edit_seq.diff_seq(T), list.list(edit_seq.change_hunk(T))).
:- mode find_change_hunks(builtin.in, builtin.in, builtin.out) is det.
:- pred find_diff_seq(list.list(T), edit_seq.edit_seq(T), edit_seq.diff_seq(T)).
:- mode find_diff_seq(builtin.in, builtin.in, builtin.out) is det.
:- pred find_shortest_edit_seq(edit_seq.edit_params, list.list(T), list.list(T), edit_seq.edit_seq(T)).
:- mode find_shortest_edit_seq(builtin.in, builtin.in, builtin.in, builtin.out) is det.
