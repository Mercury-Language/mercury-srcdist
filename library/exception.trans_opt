:- module exception.
:- pragma termination_info(exception.throw((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(exception.throw((builtin.in)), infinite, cannot_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is det), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is semidet), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is cc_multi), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.try((pred((builtin.out)) is cc_nondet), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.try_io((pred((builtin.out), (builtin.di), (builtin.uo)) is det), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_io((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_store((pred((builtin.out), (builtin.di), (builtin.uo)) is det), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_store((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is det), (builtin.out), builtin.out((exception.nil_or_singleton_list))), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is semidet), (builtin.out), builtin.out((exception.nil_or_singleton_list))), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is multi), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.try_all((pred((builtin.out)) is nondet), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.incremental_try_all((pred((builtin.out)) is nondet), (pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.incremental_try_all((pred((builtin.out)) is nondet), (pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.rethrow(builtin.in(bound(exception(ground)))), infinite, cannot_loop).
:- pragma termination_info(exception.rethrow(builtin.in(bound(exception(ground)))) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(exception.finally((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.finally((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((exception.throw_if_near_stack_limits), finite(0, []), cannot_loop).
:- pragma termination_info(exception.try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is det)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is det)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_try_stm(builtin.in((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), builtin.out((exception.cannot_fail)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.magic_exception_result(builtin.out((exception.cannot_fail))), finite(1, [no]), cannot_loop).
:- pragma termination_info((exception.unreachable), infinite, cannot_loop).
:- pragma termination_info(exception.exc_univ_to_type((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.exc_univ_to_type((builtin.out), (builtin.in)), finite(1, [no, no, yes]), cannot_loop).
:- pragma termination_info(exception.exc_univ_to_type((builtin.uo), (builtin.di)), infinite, cannot_loop).
:- pragma termination_info(exception.exc_univ_value((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(exception.finally_2((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.finally_2((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is det), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is semidet), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is multi), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is nondet), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is cc_multi), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_success((pred((builtin.out)) is cc_nondet), builtin.out((exception.cannot_fail))), infinite, can_loop).
:- pragma termination_info(exception.wrap_exception((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(exception.unsafe_call_io_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_io_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_store_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_store_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_transaction_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.unsafe_call_transaction_goal((pred((builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is det), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is semidet), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is cc_multi), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is cc_nondet), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is multi), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(exception.catch_impl((pred((builtin.out)) is nondet), builtin.in((exception.handler)), (builtin.out)), infinite, can_loop).
:- pragma exceptions(function, (exception.throw), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.throw), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.(try)), 2, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_io), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_io), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_store), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_store), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_all), 3, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.incremental_try_all), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.incremental_try_all), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.rethrow), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (exception.rethrow), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.throw_if_near_stack_limits), 0, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_stm), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.try_stm), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_try_stm), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_try_stm), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.magic_exception_result), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (exception.unreachable), 0, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.exc_univ_to_type), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.exc_univ_to_type), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (exception.exc_univ_to_type), 2, 2, will_not_throw).
:- pragma exceptions(function, (exception.exc_univ_value), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (exception.finally_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.finally_2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_success), 2, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.wrap_exception), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (exception.unsafe_call_io_goal), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_io_goal), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_store_goal), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_store_goal), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_transaction_goal), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.unsafe_call_transaction_goal), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (exception.catch_impl), 3, 5, may_throw(user_exception)).
