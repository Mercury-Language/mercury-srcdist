:- module (string.builder).
:- use_module assoc_list.
:- use_module bool.
:- use_module builtin.
:- use_module char.
:- use_module deconstruct.
:- use_module int.
:- use_module list.
:- use_module maybe.
:- use_module ops.
:- use_module pair.
:- use_module pretty_printer.
:- use_module private_builtin.
:- use_module require.
:- use_module stream.
:- use_module term_io.
:- use_module uint.
:- use_module uint8.
:- use_module (string.format).
:- use_module (string.to_string).

:- type state
    --->    state(list.list(string)).

:- instance (stream.output(string.builder.handle, string.builder.state)).
:- instance (stream.stream(string.builder.handle, string.builder.state)).
:- instance (stream.writer(string.builder.handle, string, string.builder.state)).
:- instance (stream.writer(string.builder.handle, character, string.builder.state)).

(string.builder).init = string.builder.state(V_2) :-
    V_2 = list.[] : list.list(string).

(string.builder).to_string(V_3) = V_4 :-
    V_3 = (string.builder).state(V_5) : string.builder.state,
    V_4 = string.append_list(V_6),
    V_6 = list.reverse(V_5).

:- pragma termination_info((string.builder).'ClassMethod_for_stream__output____string__builder__handle__arity0__string__builder__state__arity0______stream__flush_3'((builtin.in), (builtin.di), (builtin.uo)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info((string.builder).'ClassMethod_for_stream__stream____string__builder__handle__arity0__string__builder__state__arity0______stream__name_4'((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info((string.builder).'ClassMethod_for_stream__writer____string__builder__handle__arity0__character__arity0__string__builder__state__arity0______stream__put_4'((builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((string.builder).'ClassMethod_for_stream__writer____string__builder__handle__arity0__string__arity0__string__builder__state__arity0______stream__put_4'((builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(((string.builder).init) = (builtin.uo), finite(1, [no]), cannot_loop).
:- pragma termination_info((string.builder).to_string((builtin.di)) = (builtin.uo), infinite, can_loop).

:- pragma exceptions(function, ((string.builder).init), 0, 0, will_not_throw).
:- pragma exceptions(function, ((string.builder).to_string), 1, 0, may_throw(user_exception)).
