:- module uint8.

:- pragma termination_info(uint8.'*'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'+'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'+'(builtin.uo, builtin.in) = builtin.in, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'+'(builtin.in, builtin.uo) = builtin.in, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'-'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'-'(builtin.uo, builtin.in) = builtin.in, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'-'(builtin.in, builtin.uo) = builtin.in, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'/'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'//'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'/\\'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'<'(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.'<<'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'<<u'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'=<'(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.'>'(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.'>='(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.'>>'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'>>u'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.'\\'(builtin.in) = builtin.uo, finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.'\\/'(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.bit_is_clear(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.bit_is_set(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.cast_from_int(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.cast_from_int8(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.cast_from_uint(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.cast_to_int(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.cast_to_uint(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.clear_bit(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.det_from_int(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.det_from_uint(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.div(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.even(builtin.in), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint8.flip_bit(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.from_int(builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint8.from_uint(builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint8.max(builtin.in, builtin.in) = builtin.out, finite(0, [yes, yes, no]), cannot_loop).
:- pragma termination_info((uint8.max_uint8) = builtin.out, finite(0, [no]), cannot_loop).
:- pragma termination_info(uint8.min(builtin.in, builtin.in) = builtin.out, finite(0, [yes, yes, no]), cannot_loop).
:- pragma termination_info(uint8.minus(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.mod(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.num_leading_zeros(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.num_ones(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.num_trailing_zeros(builtin.in) = builtin.out, finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.num_zeros(builtin.in) = builtin.out, finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.odd(builtin.in), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint8.plus(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.rem(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.reverse_bits(builtin.in) = builtin.out, finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.rotate_left(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.rotate_right(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.set_bit(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.times(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.to_int(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.uint8_to_doc(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(uint8.unchecked_bit_is_clear(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_bit_is_set(builtin.in, builtin.in), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_clear_bit(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_flip_bit(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_left_shift(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_left_ushift(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_quotient(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_rem(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_right_shift(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_right_ushift(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.unchecked_rotate_left(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.unchecked_rotate_right(builtin.in, builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(uint8.unchecked_set_bit(builtin.in, builtin.in) = builtin.out, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.xor(builtin.in, builtin.in) = builtin.uo, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.xor(builtin.in, builtin.uo) = builtin.in, finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint8.xor(builtin.uo, builtin.in) = builtin.in, finite(0, [no, no, no]), cannot_loop).

:- pragma exceptions(function, uint8.(*), 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(+), 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(+), 2, 1, will_not_throw).
:- pragma exceptions(function, uint8.(+), 2, 2, will_not_throw).
:- pragma exceptions(function, uint8.(-), 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(-), 2, 1, will_not_throw).
:- pragma exceptions(function, uint8.(-), 2, 2, will_not_throw).
:- pragma exceptions(function, uint8.(/), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.(//), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.(/\), 2, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.(<), 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(<<), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.('<<u'), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, uint8.(=<), 2, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.(>), 2, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.(>=), 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(>>), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.('>>u'), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.(\), 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.(\/), 2, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.bit_is_clear, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, uint8.bit_is_set, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.cast_from_int, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.cast_from_int8, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.cast_from_uint, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.cast_to_int, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.cast_to_uint, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.clear_bit, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.det_from_int, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.det_from_uint, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.(div), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, uint8.even, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.flip_bit, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, uint8.from_int, 2, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.from_uint, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.max, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.max_uint8, 0, 0, will_not_throw).
:- pragma exceptions(function, uint8.min, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.minus, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(mod), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.num_leading_zeros, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.num_ones, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.num_trailing_zeros, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.num_zeros, 1, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.odd, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.plus, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.(rem), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.reverse_bits, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.rotate_left, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.rotate_right, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.set_bit, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, uint8.times, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.to_int, 1, 0, will_not_throw).
:- pragma exceptions(function, uint8.uint8_to_doc, 1, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.unchecked_bit_is_clear, 2, 0, will_not_throw).
:- pragma exceptions(predicate, uint8.unchecked_bit_is_set, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_clear_bit, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_flip_bit, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_left_shift, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_left_ushift, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_quotient, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_rem, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_right_shift, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_right_ushift, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_rotate_left, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_rotate_right, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.unchecked_set_bit, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.xor, 2, 0, will_not_throw).
:- pragma exceptions(function, uint8.xor, 2, 1, will_not_throw).
:- pragma exceptions(function, uint8.xor, 2, 2, will_not_throw).
