:- module backjump.
:- use_module builtin.
:- use_module io.
:- use_module list.
:- use_module private_builtin.
:- use_module string.
:- use_module (string.format).
:- use_module (string.parse_util).

:- type choice_id == int.

backjump.to_int(V_3) = V_3.

:- pragma exceptions(predicate, (backjump.backjump), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (backjump.get_choice_id), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (backjump.to_int), 2, 0, will_not_throw).

:- pragma termination_info(backjump.backjump((builtin.in)), infinite, cannot_loop).
:- pragma termination_info(backjump.get_choice_id((builtin.out)), infinite, cannot_loop).
:- pragma termination_info(backjump.to_int((builtin.in)) = (builtin.out), finite(0, [yes, no]), cannot_loop).
