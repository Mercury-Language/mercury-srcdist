/*
** Automatically generated from `random.system_rng.m'
** by the Mercury compiler,
** version rotd-2021-02-06
** configured for x86_64-pc-linux-gnu.
** Do not edit.
*/
#ifndef RANDOM__SYSTEM_RNG_MH
#define RANDOM__SYSTEM_RNG_MH

#ifdef __cplusplus
extern "C" {
#endif

#ifdef MR_HIGHLEVEL_CODE
#include "mercury.h"
#else
  #ifndef MERCURY_HDR_EXCLUDE_IMP_H
  #include "mercury_imp.h"
  #endif
#endif
#ifdef MR_DEEP_PROFILING
#include "mercury_deep_profiling.h"
#endif

#ifndef RANDOM__SYSTEM_RNG_DECL_GUARD
#define RANDOM__SYSTEM_RNG_DECL_GUARD


#include "mercury_conf_param.h"
#include "mercury_memory.h"
#include "mercury_misc.h"
#include "mercury_runtime_util.h"
#include "mercury_std.h"
#include "mercury_string.h"
#include "mercury_types.h"
#include "mercury_windows.h"

#if defined(MR_HAVE_UNISTD_H)
    #include <unistd.h>
#endif
#if defined(MR_HAVE_FCNTL_H)
    #include <fcntl.h>
#endif
#if defined(MR_HAVE_SYS_STAT_H)
    #include <sys/stat.h>
#endif
#if defined(MR_HAVE_SYS_PARAM_H)
    #include <sys/param.h>
#endif
#if defined(MR_MAC_OSX)
    #include <AvailabilityMacros.h>
#endif

#include <errno.h>
#include <stdint.h>
#include <stdlib.h>

// The following macros define if the system random number exists on this
// system and, if so, how it is accessed.
//
// Only one of the following must be defined.
//
// ML_SYSRAND_IMPL_ARC4RANDOM
//    the system RNG is implemented by calling the arc4random() family of
//    functions. Note: this for when arc4random() is provided by libc (as on
//    macOS and the BSDs), not for when it is provided as a separate library
//    (e.g. libbsd on Linux).
//
//    This should only be enabled on systems where arc4random() uses a secure
//    PRNG, such as ChaCha20; it should _not_ be enabled on systems where
//    arc4random() still uses RC4.
//
// ML_SYSRAND_IMPL_RAND_S (NYI)
//    the system RNG is implemented by calling the rand_s() function
//    (Windows only).
//
// ML_SYSRAND_IMPL_GETRANDOM (NYI)
//    the system RNG is implemented by calling getrandom() (sufficiently
//    recent Linux kernels only).
//
// ML_SYSRAND_IMPL_URANDOM
//     the system RNG is implemented by reading from /dev/urandom.
//
// ML_SYSRAND_IMPL_NONE
//     there is no system RNG is not available on this platform.

#if defined(__linux__) || defined(MR_SOLARIS) || defined(_AIX)
    #define ML_SYSRAND_IMPL_URANDOM
#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(MR_CYGWIN)
    #define ML_SYSRAND_IMPL_ARC4RANDOM
#elif __FreeBSD__ >= 12
    // arc4random() on FreeBSD used RC4 until version 12.
    #define ML_SYSRAND_IMPL_ARC4RANDOM
#elif defined(__FreeBSD__)
    #define ML_SYSRAND_IMPL_URANDOM
#elif defined(MR_MAC_OSX)
   // arc4random() on macOS used RC4 until version 10.12.
   // XXX this will be unnecessary when we stop supporting versions
   // of macOS before 10.12.
   #if defined(MAC_OS_X_VERSION_10_12) && \
        MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_12
      #define ML_SYSRAND_IMPL_ARC4RANDOM
   #else
      #define ML_SYSRAND_IMPL_URANDOM
   #endif
#else
    #define ML_SYSRAND_IMPL_NONE
#endif

#if defined(ML_SYSRAND_IMPL_URANDOM)
    struct ML_SystemRandomHandle_Struct {
        int ML_srh_fd;
    };
    typedef struct ML_SystemRandomHandle_Struct *ML_SystemRandomHandle;
#else
    typedef MR_Unsigned ML_SystemRandomHandle;
#endif

// When succeeded is MR_TRUE, returns a handle through which the system
// RNG can be accessed; err_msg will point to the empty string in this case.
// When succeeded is MR_FALSE, the value return is not a valid handle and
// err_msg will point to a string (on the Mercury heap) describing why a handle
// for the system RNG could not be acquired.
//
extern ML_SystemRandomHandle ML_random_open(MR_Bool *succeeded,
    MR_String *err_msg);

// Attempt to close the handle to the system RNG.
// Returns MR_TRUE on success with err_msg pointing to the empty string.
// Returns MR_FALSE on failure with err_msg pointing to a string (on the
// Mercury heap) that describes whey the handle could not be closed.
//
extern MR_Bool ML_random_close(ML_SystemRandomHandle handle, MR_String *err_msg);


// Fill buffer with len random bytes generated by the system RNG.
// Returns MR_TRUE if len bytes were generated; err_msg will point to the empty
// string.
// Returns MR_FALSE if the system RNG has been unable to generate len bytes.
// In this case the contents of buffer are indeterminate and err_msg will point
// to a string (on the Mercury heap) that describes the problem.
//
extern MR_Bool ML_random_generate_bytes(ML_SystemRandomHandle handle,
    unsigned char *buffer, size_t len, MR_String *err_msg);


#endif

#ifdef __cplusplus
}
#endif

#endif /* RANDOM__SYSTEM_RNG_MH */
