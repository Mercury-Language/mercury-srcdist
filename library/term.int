:- module term.
:- interface.
:- import_module enum.
:- import_module list.
:- import_module map.
:- type const
	--->	atom(string)
	;	integer(int)
	;	string(string)
	;	float(float)
	;	implementation_defined(string).
:- type context
	--->	context(string, int).
:- type generic
	--->	generic .
:- type renaming == term.renaming(term.generic).
:- type renaming(T) == map.map(term.var(T), term.var(T)).
:- type substitution == term.substitution(term.generic).
:- type substitution(T) == map.map(term.var(T), term.term(T)).
:- type term == term.term(term.generic).
:- type term(T)
	--->	functor(term.const, list.list(term.term(T)), term.context)
	;	variable(term.var(T), term.context).
:- type var == term.var(term.generic).
:- type var(T).
:- type var_supply(T).
:- instance (enum.enum(term.var(V_1))).
:- func apply_rec_substitution(term.term(T), term.substitution(T)) = term.term(T).
:- pred apply_rec_substitution(term.term(T), term.substitution(T), term.term(T)).
:- mode apply_rec_substitution((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_rec_substitution_in_term(term.substitution(T), term.term(T), term.term(T)).
:- mode apply_rec_substitution_in_term((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_rec_substitution_in_terms(term.substitution(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode apply_rec_substitution_in_terms((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_rec_substitution_to_list(list.list(term.term(T)), term.substitution(T)) = list.list(term.term(T)).
:- pred apply_rec_substitution_to_list(list.list(term.term(T)), term.substitution(T), list.list(term.term(T))).
:- mode apply_rec_substitution_to_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_renaming(term.term(T), term.renaming(T)) = term.term(T).
:- pred apply_renaming(term.term(T), term.renaming(T), term.term(T)).
:- mode apply_renaming((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_term(term.renaming(T), term.term(T), term.term(T)).
:- mode apply_renaming_in_term((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_terms(term.renaming(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode apply_renaming_in_terms((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_var(term.renaming(T), term.var(T), term.var(T)).
:- mode apply_renaming_in_var((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_vars(term.renaming(T), list.list(term.var(T)), list.list(term.var(T))).
:- mode apply_renaming_in_vars((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_renaming_to_list(list.list(term.term(T)), term.renaming(T)) = list.list(term.term(T)).
:- pred apply_renaming_to_list(list.list(term.term(T)), term.renaming(T), list.list(term.term(T))).
:- mode apply_renaming_to_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_substitution(term.term(T), term.substitution(T)) = term.term(T).
:- pred apply_substitution(term.term(T), term.substitution(T), term.term(T)).
:- mode apply_substitution((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_substitution_in_term(term.substitution(T), term.term(T), term.term(T)).
:- mode apply_substitution_in_term((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_substitution_in_terms(term.substitution(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode apply_substitution_in_terms((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_substitution_to_list(list.list(term.term(T)), term.substitution(T)) = list.list(term.term(T)).
:- pred apply_substitution_to_list(list.list(term.term(T)), term.substitution(T), list.list(term.term(T))).
:- mode apply_substitution_to_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_variable_renaming(term.term(T), term.renaming(T)) = term.term(T).
:- pred apply_variable_renaming(term.term(T), term.renaming(T), term.term(T)).
:- mode apply_variable_renaming((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_variable_renaming_to_list(list.list(term.term(T)), term.renaming(T)) = list.list(term.term(T)).
:- pred apply_variable_renaming_to_list(list.list(term.term(T)), term.renaming(T), list.list(term.term(T))).
:- mode apply_variable_renaming_to_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_variable_renaming_to_var(term.renaming(T), term.var(T)) = term.var(T).
:- pred apply_variable_renaming_to_var(term.renaming(T), term.var(T), term.var(T)).
:- mode apply_variable_renaming_to_var((builtin.in), (builtin.in), (builtin.out)) is det.
:- func apply_variable_renaming_to_vars(term.renaming(T), list.list(term.var(T))) = list.list(term.var(T)).
:- pred apply_variable_renaming_to_vars(term.renaming(T), list.list(term.var(T)), list.list(term.var(T))).
:- mode apply_variable_renaming_to_vars((builtin.in), (builtin.in), (builtin.out)) is det.
:- func coerce(term.term(T)) = term.term(U).
:- pred coerce(term.term(T), term.term(U)).
:- mode coerce((builtin.in), (builtin.out)) is det.
:- func coerce_var(term.var(T)) = term.var(U).
:- pred coerce_var(term.var(T), term.var(U)).
:- mode coerce_var((builtin.in), (builtin.out)) is det.
:- func coerce_var_supply(term.var_supply(T)) = term.var_supply(U).
:- pred coerce_var_supply(term.var_supply(T), term.var_supply(U)).
:- mode coerce_var_supply((builtin.in), (builtin.out)) is det.
:- pred contains_var(term.term(T), term.var(T)).
:- mode contains_var((builtin.in), (builtin.in)) is semidet.
:- mode contains_var((builtin.in), (builtin.out)) is nondet.
:- pred contains_var_list(list.list(term.term(T)), term.var(T)).
:- mode contains_var_list((builtin.in), (builtin.in)) is semidet.
:- mode contains_var_list((builtin.in), (builtin.out)) is nondet.
:- func context_file(term.context) = string.
:- pred context_file(term.context, string).
:- mode context_file((builtin.in), (builtin.out)) is det.
:- func context_init = term.context.
:- pred context_init(term.context).
:- mode context_init((builtin.out)) is det.
:- func context_init(string, int) = term.context.
:- pred context_init(string, int, term.context).
:- mode context_init((builtin.in), (builtin.in), (builtin.out)) is det.
:- func context_line(term.context) = int.
:- pred context_line(term.context, int).
:- mode context_line((builtin.in), (builtin.out)) is det.
:- pred create_var(term.var(T), term.var_supply(T), term.var_supply(T)).
:- mode create_var((builtin.out), (builtin.in), (builtin.out)) is det.
:- pred generic_term(term.term).
:- mode generic_term((builtin.in)) is det.
:- func get_term_context(term.term(T)) = term.context.
:- func init_var_supply = term.var_supply(T).
:- pred init_var_supply(term.var_supply(T)).
:- mode init_var_supply((builtin.out)) is det.
:- mode init_var_supply((builtin.in)) is semidet.
:- pred is_ground(term.term(T)).
:- mode is_ground((builtin.in)) is semidet.
:- pred is_ground_in_bindings(term.term(T), term.substitution(T)).
:- mode is_ground_in_bindings((builtin.in), (builtin.in)) is semidet.
:- pred list_subsumes(list.list(term.term(T)), list.list(term.term(T)), term.substitution(T)).
:- mode list_subsumes((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred occurs(term.term(T), term.var(T), term.substitution(T)).
:- mode occurs((builtin.in), (builtin.in), (builtin.in)) is semidet.
:- pred occurs_list(list.list(term.term(T)), term.var(T), term.substitution(T)).
:- mode occurs_list((builtin.in), (builtin.in), (builtin.in)) is semidet.
:- func relabel_variable(term.term(T), term.var(T), term.var(T)) = term.term(T).
:- pred relabel_variable(term.term(T), term.var(T), term.var(T), term.term(T)).
:- mode relabel_variable((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func relabel_variables(list.list(term.term(T)), term.var(T), term.var(T)) = list.list(term.term(T)).
:- pred relabel_variables(list.list(term.term(T)), term.var(T), term.var(T), list.list(term.term(T))).
:- mode relabel_variables((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func rename(term.term(T), term.var(T), term.var(T)) = term.term(T).
:- pred rename(term.term(T), term.var(T), term.var(T), term.term(T)).
:- mode rename((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func rename_list(list.list(term.term(T)), term.var(T), term.var(T)) = list.list(term.term(T)).
:- pred rename_list(list.list(term.term(T)), term.var(T), term.var(T), list.list(term.term(T))).
:- mode rename_list((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred rename_var_in_term(term.var(T), term.var(T), term.term(T), term.term(T)).
:- mode rename_var_in_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred rename_var_in_terms(term.var(T), term.var(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode rename_var_in_terms((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func substitute(term.term(T), term.var(T), term.term(T)) = term.term(T).
:- pred substitute(term.term(T), term.var(T), term.term(T), term.term(T)).
:- mode substitute((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func substitute_corresponding(list.list(term.var(T)), list.list(term.term(T)), term.term(T)) = term.term(T).
:- pred substitute_corresponding(list.list(term.var(T)), list.list(term.term(T)), term.term(T), term.term(T)).
:- mode substitute_corresponding((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_corresponding_in_term(list.list(term.var(T)), list.list(term.term(T)), term.term(T), term.term(T)).
:- mode substitute_corresponding_in_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_corresponding_in_terms(list.list(term.var(T)), list.list(term.term(T)), list.list(term.term(T)), list.list(term.term(T))).
:- mode substitute_corresponding_in_terms((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func substitute_corresponding_list(list.list(term.var(T)), list.list(term.term(T)), list.list(term.term(T))) = list.list(term.term(T)).
:- pred substitute_corresponding_list(list.list(term.var(T)), list.list(term.term(T)), list.list(term.term(T)), list.list(term.term(T))).
:- mode substitute_corresponding_list((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func substitute_list(list.list(term.term(T)), term.var(T), term.term(T)) = list.list(term.term(T)).
:- pred substitute_list(list.list(term.term(T)), term.var(T), term.term(T), list.list(term.term(T))).
:- mode substitute_list((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_var_in_term(term.var(T), term.term(T), term.term(T), term.term(T)).
:- mode substitute_var_in_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_var_in_terms(term.var(T), term.term(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode substitute_var_in_terms((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- func term_list_to_var_list(list.list(term.term(T))) = list.list(term.var(T)).
:- pred term_list_to_var_list(list.list(term.term(T)), list.list(term.var(T))).
:- mode term_list_to_var_list((builtin.in), (builtin.out)) is semidet.
:- pred unify_term(term.term(T), term.term(T), term.substitution(T), term.substitution(T)).
:- mode unify_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred unify_term_dont_bind(term.term(T), term.term(T), list.list(term.var(T)), term.substitution(T), term.substitution(T)).
:- mode unify_term_dont_bind((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred unify_term_list(list.list(term.term(T)), list.list(term.term(T)), term.substitution(T), term.substitution(T)).
:- mode unify_term_list((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred unify_term_list_dont_bind(list.list(term.term(T)), list.list(term.term(T)), list.list(term.var(T)), term.substitution(T), term.substitution(T)).
:- mode unify_term_list_dont_bind((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func var_id(term.var(T)) = int.
:- func var_list_to_term_list(list.list(term.var(T))) = list.list(term.term(T)).
:- pred var_list_to_term_list(list.list(term.var(T)), list.list(term.term(T))).
:- mode var_list_to_term_list((builtin.in), (builtin.out)) is det.
:- func var_supply_max_var(term.var_supply(T)) = term.var(T).
:- func var_supply_num_allocated(term.var_supply(T)) = int.
:- func var_to_int(term.var(T)) = int.
:- pred var_to_int(term.var(T), int).
:- mode var_to_int((builtin.in), (builtin.out)) is det.
:- func vars(term.term(T)) = list.list(term.var(T)).
:- pred vars(term.term(T), list.list(term.var(T))).
:- mode vars((builtin.in), (builtin.out)) is det.
:- func vars_2(term.term(T), list.list(term.var(T))) = list.list(term.var(T)).
:- pred vars_2(term.term(T), list.list(term.var(T)), list.list(term.var(T))).
:- mode vars_2((builtin.in), (builtin.in), (builtin.out)) is det.
:- func vars_list(list.list(term.term(T))) = list.list(term.var(T)).
:- pred vars_list(list.list(term.term(T)), list.list(term.var(T))).
:- mode vars_list((builtin.in), (builtin.out)) is det.
