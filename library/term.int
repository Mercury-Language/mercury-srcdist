:- module term.
:- interface.
:- use_module enum.
:- use_module integer.
:- use_module list.
:- use_module map.
:- use_module term_context.
:- type const
    --->    atom(string)
    ;       integer((term.integer_base) :: term.integer_base, (term.integer_value) :: integer.integer, (term.integer_signedness) :: term.signedness, (term.integer_size) :: term.integer_size)
    ;       string(string)
    ;       float(float)
    ;       implementation_defined(string).
:- type context == term_context.term_context.
:- type generic
    --->    generic .
:- type integer_base
    --->    base_2 
    ;       base_8 
    ;       base_10 
    ;       base_16 .
:- type integer_size
    --->    size_word 
    ;       size_8_bit 
    ;       size_16_bit 
    ;       size_32_bit 
    ;       size_64_bit .
:- type renaming == term.renaming(term.generic).
:- type renaming(T) == map.map(term.var(T), term.var(T)).
:- type signedness
    --->    signed 
    ;       unsigned .
:- type substitution == term.substitution(term.generic).
:- type substitution(T) == map.map(term.var(T), term.term(T)).
:- type term == term.term(term.generic).
:- type term(T)
    --->    functor(term.const, list.list(term.term(T)), term_context.term_context)
    ;       variable(term.var(T), term_context.term_context).
:- type var == term.var(term.generic).
:- type var(T).
:- type var_supply(T).
:- instance (enum.enum(term.var(V_1))).
:- pred apply_rec_substitution_in_term(term.substitution(T), term.term(T), term.term(T)).
:- mode apply_rec_substitution_in_term((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_rec_substitution_in_terms(term.substitution(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode apply_rec_substitution_in_terms((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_term(term.renaming(T), term.term(T), term.term(T)).
:- mode apply_renaming_in_term((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_terms(term.renaming(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode apply_renaming_in_terms((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_var(term.renaming(T), term.var(T), term.var(T)).
:- mode apply_renaming_in_var((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_renaming_in_vars(term.renaming(T), list.list(term.var(T)), list.list(term.var(T))).
:- mode apply_renaming_in_vars((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_substitution_in_term(term.substitution(T), term.term(T), term.term(T)).
:- mode apply_substitution_in_term((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred apply_substitution_in_terms(term.substitution(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode apply_substitution_in_terms((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred coerce(term.term(T), term.term(U)).
:- mode coerce((builtin.in), (builtin.out)) is det.
:- func coerce(term.term(T)) = term.term(U).
:- pred coerce_var(term.var(T), term.var(U)).
:- mode coerce_var((builtin.in), (builtin.out)) is det.
:- func coerce_var(term.var(T)) = term.var(U).
:- pred coerce_var_supply(term.var_supply(T), term.var_supply(U)).
:- mode coerce_var_supply((builtin.in), (builtin.out)) is det.
:- func coerce_var_supply(term.var_supply(T)) = term.var_supply(U).
:- pred contains_var(term.term(T), term.var(T)).
:- mode contains_var((builtin.in), (builtin.in)) is semidet.
:- mode contains_var((builtin.in), (builtin.out)) is nondet.
:- pred contains_var_list(list.list(term.term(T)), term.var(T)).
:- mode contains_var_list((builtin.in), (builtin.in)) is semidet.
:- mode contains_var_list((builtin.in), (builtin.out)) is nondet.
:- pred context_file(term.context, string).
:- mode context_file((builtin.in), (builtin.out)) is det.
:- func context_file(term.context) = string.
:- pred context_init(term.context).
:- mode context_init((builtin.out)) is det.
:- func context_init = term.context.
:- pred context_init(string, int, term.context).
:- mode context_init((builtin.in), (builtin.in), (builtin.out)) is det.
:- func context_init(string, int) = term.context.
:- pred context_line(term.context, int).
:- mode context_line((builtin.in), (builtin.out)) is det.
:- func context_line(term.context) = int.
:- pred create_var(term.var(T), term.var_supply(T), term.var_supply(T)).
:- mode create_var((builtin.out), (builtin.in), (builtin.out)) is det.
:- pred decimal_term_to_int(term.term(T), int).
:- mode decimal_term_to_int((builtin.in), (builtin.out)) is semidet.
:- func dummy_context_init = term.context.
:- func force_construct_var(int) = term.var(T).
:- func force_construct_var_supply(int) = term.var_supply(T).
:- pred generic_term(term.term).
:- mode generic_term((builtin.in)) is det.
:- func get_term_context(term.term(T)) = term.context.
:- pred init_var_supply(term.var_supply(T)).
:- mode init_var_supply((builtin.out)) is det.
:- mode init_var_supply((builtin.in)) is semidet.
:- func init_var_supply = term.var_supply(T).
:- func int16_to_decimal_term(int16, term.context) = term.term(T).
:- func int32_to_decimal_term(int32, term.context) = term.term(T).
:- func int64_to_decimal_term(int64, term.context) = term.term(T).
:- func int8_to_decimal_term(int8, term.context) = term.term(T).
:- func int_to_decimal_term(int, term.context) = term.term(T).
:- pred is_dummy_context(term.context).
:- mode is_dummy_context((builtin.in)) is semidet.
:- pred is_ground(term.term(T)).
:- mode is_ground((builtin.in)) is semidet.
:- pred is_ground_in_bindings(term.term(T), term.substitution(T)).
:- mode is_ground_in_bindings((builtin.in), (builtin.in)) is semidet.
:- pred list_subsumes(list.list(term.term(T)), list.list(term.term(T)), term.substitution(T)).
:- mode list_subsumes((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred occurs(term.term(T), term.var(T), term.substitution(T)).
:- mode occurs((builtin.in), (builtin.in), (builtin.in)) is semidet.
:- pred occurs_list(list.list(term.term(T)), term.var(T), term.substitution(T)).
:- mode occurs_list((builtin.in), (builtin.in), (builtin.in)) is semidet.
:- pred rename_var_in_term(term.var(T), term.var(T), term.term(T), term.term(T)).
:- mode rename_var_in_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred rename_var_in_terms(term.var(T), term.var(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode rename_var_in_terms((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_corresponding_in_term(list.list(term.var(T)), list.list(term.term(T)), term.term(T), term.term(T)).
:- mode substitute_corresponding_in_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_corresponding_in_terms(list.list(term.var(T)), list.list(term.term(T)), list.list(term.term(T)), list.list(term.term(T))).
:- mode substitute_corresponding_in_terms((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_var_in_term(term.var(T), term.term(T), term.term(T), term.term(T)).
:- mode substitute_var_in_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred substitute_var_in_terms(term.var(T), term.term(T), list.list(term.term(T)), list.list(term.term(T))).
:- mode substitute_var_in_terms((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred term_list_to_var_list(list.list(term.term(T)), list.list(term.var(T))).
:- mode term_list_to_var_list((builtin.in), (builtin.out)) is semidet.
:- func term_list_to_var_list(list.list(term.term(T))) = list.list(term.var(T)).
:- pred term_to_int(term.term(T), int).
:- mode term_to_int((builtin.in), (builtin.out)) is semidet.
:- pred term_to_int16(term.term(T), int16).
:- mode term_to_int16((builtin.in), (builtin.out)) is semidet.
:- pred term_to_int32(term.term(T), int32).
:- mode term_to_int32((builtin.in), (builtin.out)) is semidet.
:- pred term_to_int64(term.term(T), int64).
:- mode term_to_int64((builtin.in), (builtin.out)) is semidet.
:- pred term_to_int8(term.term(T), int8).
:- mode term_to_int8((builtin.in), (builtin.out)) is semidet.
:- pred term_to_uint(term.term(T), uint).
:- mode term_to_uint((builtin.in), (builtin.out)) is semidet.
:- pred term_to_uint16(term.term(T), uint16).
:- mode term_to_uint16((builtin.in), (builtin.out)) is semidet.
:- pred term_to_uint32(term.term(T), uint32).
:- mode term_to_uint32((builtin.in), (builtin.out)) is semidet.
:- pred term_to_uint64(term.term(T), uint64).
:- mode term_to_uint64((builtin.in), (builtin.out)) is semidet.
:- pred term_to_uint8(term.term(T), uint8).
:- mode term_to_uint8((builtin.in), (builtin.out)) is semidet.
:- func uint16_to_decimal_term(uint16, term.context) = term.term(T).
:- func uint32_to_decimal_term(uint32, term.context) = term.term(T).
:- func uint64_to_decimal_term(uint64, term.context) = term.term(T).
:- func uint8_to_decimal_term(uint8, term.context) = term.term(T).
:- func uint_to_decimal_term(uint, term.context) = term.term(T).
:- pred unify_term(term.term(T), term.term(T), term.substitution(T), term.substitution(T)).
:- mode unify_term((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred unify_term_dont_bind(term.term(T), term.term(T), list.list(term.var(T)), term.substitution(T), term.substitution(T)).
:- mode unify_term_dont_bind((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred unify_term_list(list.list(term.term(T)), list.list(term.term(T)), term.substitution(T), term.substitution(T)).
:- mode unify_term_list((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred unify_term_list_dont_bind(list.list(term.term(T)), list.list(term.term(T)), list.list(term.var(T)), term.substitution(T), term.substitution(T)).
:- mode unify_term_list_dont_bind((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred var_list_to_term_list(list.list(term.var(T)), list.list(term.term(T))).
:- mode var_list_to_term_list((builtin.in), (builtin.out)) is det.
:- func var_list_to_term_list(list.list(term.var(T))) = list.list(term.term(T)).
:- func var_supply_max_var(term.var_supply(T)) = term.var(T).
:- func var_supply_num_allocated(term.var_supply(T)) = int.
:- pred var_to_int(term.var(T), int).
:- mode var_to_int((builtin.in), (builtin.out)) is det.
:- func var_to_int(term.var(T)) = int.
:- pred vars(term.term(T), list.list(term.var(T))).
:- mode vars((builtin.in), (builtin.out)) is det.
:- func vars(term.term(T)) = list.list(term.var(T)).
:- pred vars_2(term.term(T), list.list(term.var(T)), list.list(term.var(T))).
:- mode vars_2((builtin.in), (builtin.in), (builtin.out)) is det.
:- func vars_2(term.term(T), list.list(term.var(T))) = list.list(term.var(T)).
:- pred vars_list(list.list(term.term(T)), list.list(term.var(T))).
:- mode vars_list((builtin.in), (builtin.out)) is det.
:- func vars_list(list.list(term.term(T))) = list.list(term.var(T)).
:- pragma obsolete(pred((term.apply_rec_substitution_in_term)/3), [(term_subst.apply_rec_substitution_in_term)/3]).
:- pragma obsolete(pred((term.apply_rec_substitution_in_terms)/3), [(term_subst.apply_rec_substitution_in_terms)/3]).
:- pragma obsolete(pred((term.apply_renaming_in_term)/3), [(term_subst.apply_renaming_in_term)/3]).
:- pragma obsolete(pred((term.apply_renaming_in_terms)/3), [(term_subst.apply_renaming_in_terms)/3]).
:- pragma obsolete(pred((term.apply_renaming_in_var)/3), [(term_subst.apply_renaming_in_var)/3]).
:- pragma obsolete(pred((term.apply_renaming_in_vars)/3), [(term_subst.apply_renaming_in_vars)/3]).
:- pragma obsolete(pred((term.apply_substitution_in_term)/3), [(term_subst.apply_substitution_in_term)/3]).
:- pragma obsolete(pred((term.apply_substitution_in_terms)/3), [(term_subst.apply_substitution_in_terms)/3]).
:- pragma obsolete(pred((term.contains_var)/2), [(term_vars.term_contains_var)/2]).
:- pragma obsolete(pred((term.contains_var_list)/2), [(term_vars.terms_contain_var)/2]).
:- pragma obsolete(pred((term.context_file)/2), [(term_context.context_file)/1]).
:- pragma obsolete(pred((term.context_init)/1), [(term_context.dummy_context)/0]).
:- pragma obsolete(pred((term.context_init)/3), [(term_context.context_init)/2]).
:- pragma obsolete(pred((term.context_line)/2), [(term_context.context_line)/1]).
:- pragma obsolete(pred((term.decimal_term_to_int)/2), [(term_int.decimal_term_to_int)/2]).
:- pragma obsolete(pred((term.generic_term)/1), []).
:- pragma obsolete(pred((term.is_dummy_context)/1), [(term_context.is_dummy_context)/1]).
:- pragma obsolete(pred((term.is_ground)/1), [(term_subst.term_is_ground)/1]).
:- pragma obsolete(pred((term.is_ground_in_bindings)/2), [(term_subst.term_is_ground_in_bindings)/2]).
:- pragma obsolete(pred((term.list_subsumes)/3), [(term_unify.first_term_list_subsumes_second)/3]).
:- pragma obsolete(pred((term.occurs)/3), [(term_subst.var_occurs_in_subst_term)/3]).
:- pragma obsolete(pred((term.occurs_list)/3), [(term_subst.var_occurs_in_subst_terms)/3]).
:- pragma obsolete(pred((term.rename_var_in_term)/4), [(term_subst.rename_var_in_term)/4]).
:- pragma obsolete(pred((term.rename_var_in_terms)/4), [(term_subst.rename_var_in_terms)/4]).
:- pragma obsolete(pred((term.substitute_corresponding_in_term)/4), [(term_subst.substitute_corresponding_in_term)/4]).
:- pragma obsolete(pred((term.substitute_corresponding_in_terms)/4), [(term_subst.substitute_corresponding_in_terms)/4]).
:- pragma obsolete(pred((term.substitute_var_in_term)/4), [(term_subst.substitute_var_in_term)/4]).
:- pragma obsolete(pred((term.substitute_var_in_terms)/4), [(term_subst.substitute_var_in_terms)/4]).
:- pragma obsolete(pred((term.term_list_to_var_list)/2), [(term_subst.term_list_to_var_list)/2]).
:- pragma obsolete(pred((term.term_to_int)/2), [(term_int.term_to_int)/2]).
:- pragma obsolete(pred((term.term_to_int16)/2), [(term_int.term_to_int16)/2]).
:- pragma obsolete(pred((term.term_to_int32)/2), [(term_int.term_to_int32)/2]).
:- pragma obsolete(pred((term.term_to_int64)/2), [(term_int.term_to_int64)/2]).
:- pragma obsolete(pred((term.term_to_int8)/2), [(term_int.term_to_int8)/2]).
:- pragma obsolete(pred((term.term_to_uint)/2), [(term_int.term_to_uint)/2]).
:- pragma obsolete(pred((term.term_to_uint16)/2), [(term_int.term_to_uint16)/2]).
:- pragma obsolete(pred((term.term_to_uint32)/2), [(term_int.term_to_uint32)/2]).
:- pragma obsolete(pred((term.term_to_uint64)/2), [(term_int.term_to_uint64)/2]).
:- pragma obsolete(pred((term.term_to_uint8)/2), [(term_int.term_to_uint8)/2]).
:- pragma obsolete(pred((term.unify_term)/4), [(term_unify.unify_terms)/4]).
:- pragma obsolete(pred((term.unify_term_dont_bind)/5), [(term_unify.unify_terms_dont_bind)/5]).
:- pragma obsolete(pred((term.unify_term_list)/4), [(term_unify.unify_term_lists)/4]).
:- pragma obsolete(pred((term.unify_term_list_dont_bind)/5), [(term_unify.unify_term_lists_dont_bind)/5]).
:- pragma obsolete(pred((term.var_list_to_term_list)/2), [(term_subst.var_list_to_term_list)/2]).
:- pragma obsolete(pred((term.vars)/2), [(term_vars.vars_in_term)/2]).
:- pragma obsolete(pred((term.vars_2)/3), [(term_vars.vars_in_term_acc)/3]).
:- pragma obsolete(pred((term.vars_list)/2), [(term_vars.vars_in_terms)/2]).
:- pragma obsolete(func((term.context_file)/1), [(term_context.context_file)/1]).
:- pragma obsolete(func((term.context_init)/0), [(term_context.dummy_context)/0]).
:- pragma obsolete(func((term.context_init)/2), [(term_context.context_init)/2]).
:- pragma obsolete(func((term.context_line)/1), [(term_context.context_line)/1]).
:- pragma obsolete(func((term.dummy_context_init)/0), [(term_context.dummy_context)/0]).
:- pragma obsolete(func((term.int16_to_decimal_term)/2), [(term_int.int16_to_decimal_term)/2]).
:- pragma obsolete(func((term.int32_to_decimal_term)/2), [(term_int.int32_to_decimal_term)/2]).
:- pragma obsolete(func((term.int64_to_decimal_term)/2), [(term_int.int64_to_decimal_term)/2]).
:- pragma obsolete(func((term.int8_to_decimal_term)/2), [(term_int.int8_to_decimal_term)/2]).
:- pragma obsolete(func((term.int_to_decimal_term)/2), [(term_int.int_to_decimal_term)/2]).
:- pragma obsolete(func((term.term_list_to_var_list)/1), [(term_subst.term_list_to_var_list)/1]).
:- pragma obsolete(func((term.uint16_to_decimal_term)/2), [(term_int.uint16_to_decimal_term)/2]).
:- pragma obsolete(func((term.uint32_to_decimal_term)/2), [(term_int.uint32_to_decimal_term)/2]).
:- pragma obsolete(func((term.uint64_to_decimal_term)/2), [(term_int.uint64_to_decimal_term)/2]).
:- pragma obsolete(func((term.uint8_to_decimal_term)/2), [(term_int.uint8_to_decimal_term)/2]).
:- pragma obsolete(func((term.uint_to_decimal_term)/2), [(term_int.uint_to_decimal_term)/2]).
:- pragma obsolete(func((term.var_list_to_term_list)/1), [(term_subst.var_list_to_term_list)/1]).
:- pragma obsolete(func((term.vars)/1), [(term_vars.vars_in_term)/1]).
:- pragma obsolete(func((term.vars_2)/2), [(term_vars.vars_in_term_acc)/3]).
:- pragma obsolete(func((term.vars_list)/1), [(term_vars.vars_in_terms)/1]).
