:- module kv_list.

:- pragma termination_info(kv_list.assoc_list_to_kv_list((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.det_elem((builtin.in), (builtin.in)) = (builtin.out), finite(-3, [no, no, no, yes, no]), can_loop).
:- pragma termination_info(kv_list.elem((builtin.in), (builtin.in)) = (builtin.out), finite(-3, [no, no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl2_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl3_values((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.in), (builtin.out)) is multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_keys((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.in), (builtin.out)) is multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.foldl_values((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no]), can_loop).
:- pragma termination_info(kv_list.from_corresponding_lists((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, yes, yes, no]), can_loop).
:- pragma termination_info(kv_list.keys((builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.keys((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.keys_and_values((builtin.in), (builtin.out), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(kv_list.kv_list_to_assoc_list((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(kv_list.lookup((builtin.in), (builtin.in), (builtin.out)), finite(-3, [no, no, yes, no, no]), can_loop).
:- pragma termination_info(kv_list.map_keys_only((pred((builtin.in), (builtin.out)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.map_keys_only((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.map_values((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.map_values((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.map_values_only((pred((builtin.in), (builtin.out)) is det), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.map_values_only((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.merge((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.merge((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.negated_filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(kv_list.negated_filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(kv_list.remove((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(-3, [no, no, yes, no, no, no]), cannot_loop).
:- pragma termination_info(kv_list.reverse_members((builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.reverse_members((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.search((builtin.in), (builtin.in), (builtin.out)), finite(-3, [no, no, yes, no, no]), cannot_loop).
:- pragma termination_info(kv_list.svremove((builtin.in), (builtin.out), (builtin.in), (builtin.out)), finite(-3, [no, no, no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.update((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.values((builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(kv_list.values((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).

:- pragma exceptions(function, (kv_list.assoc_list_to_kv_list), 2, 0, will_not_throw).
:- pragma exceptions(function, (kv_list.det_elem), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.elem), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (kv_list.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl), 4, 6, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl2_values), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl3_values), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_keys), 4, 7, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.foldl_keys), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.foldl_values), 4, 7, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.foldl_values), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.keys), 2, 0, will_not_throw).
:- pragma exceptions(function, (kv_list.keys), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (kv_list.keys_and_values), 3, 0, will_not_throw).
:- pragma exceptions(function, (kv_list.kv_list_to_assoc_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (kv_list.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.map_keys_only), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.map_keys_only), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.map_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.map_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.map_values_only), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.map_values_only), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.merge), 3, 0, may_throw(type_exception)).
:- pragma exceptions(function, (kv_list.merge), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (kv_list.negated_filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (kv_list.negated_filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (kv_list.remove), 4, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (kv_list.reverse_members), 2, 0, will_not_throw).
:- pragma exceptions(function, (kv_list.reverse_members), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (kv_list.search), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (kv_list.svremove), 4, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (kv_list.update), 4, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (kv_list.values), 2, 0, will_not_throw).
:- pragma exceptions(function, (kv_list.values), 2, 0, will_not_throw).
