:- module bimap.
:- use_module assoc_list.
:- use_module builtin.
:- use_module list.
:- use_module map.
:- use_module maybe.
:- use_module pair.
:- use_module private_builtin.
:- use_module require.

:- type bimap(K, V)
    --->    bimap(tree234.tree234(K, V), tree234.tree234(V, K)).

:- pred bimap.map_keys_2(pred(V_1, K_2, L_3), list.list(pair.pair(K_2, V_1)), list.list(pair.pair(L_3, V_1)), list.list(pair.pair(L_3, V_1))).
:- mode bimap.map_keys_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred bimap.map_keys_func_2((func(V_1, K_2) = L_3), list.list(pair.pair(K_2, V_1)), list.list(pair.pair(L_3, V_1)), list.list(pair.pair(L_3, V_1))).
:- mode bimap.map_keys_func_2(builtin.in((func((builtin.in), (builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred bimap.map_values_2(pred(K_1, V_2, W_3), list.list(pair.pair(K_1, V_2)), list.list(pair.pair(K_1, W_3)), list.list(pair.pair(K_1, W_3))).
:- mode bimap.map_values_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred bimap.map_values_func_2((func(K_1, V_2) = W_3), list.list(pair.pair(K_1, V_2)), list.list(pair.pair(K_1, W_3)), list.list(pair.pair(K_1, W_3))).
:- mode bimap.map_values_func_2(builtin.in((func((builtin.in), (builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred bimap.overlay_2(list.list(pair.pair(K_1, V_2)), bimap.bimap(K_1, V_2), bimap.bimap(K_1, V_2)).
:- mode bimap.overlay_2((builtin.in), (builtin.in), (builtin.out)) is det.

bimap.apply_forward_map_to_list(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.apply_to_list(V_6, V_4, V_7).

bimap.apply_forward_map_to_list(V_4, V_5) = V_6 :-
    bimap.apply_forward_map_to_list(V_4, V_5, V_6).

bimap.apply_reverse_map_to_list(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.apply_to_list(V_6, V_5, V_7).

bimap.apply_reverse_map_to_list(V_4, V_5) = V_6 :-
    bimap.apply_reverse_map_to_list(V_4, V_5, V_6).

bimap.contains_key(bimap.bimap(V_3, V_4), V_5) :-
    map.contains(V_3, V_5).

bimap.contains_value(bimap.bimap(V_3, V_4), V_5) :-
    map.contains(V_4, V_5).

bimap.coordinates(bimap.bimap(V_3, V_4), V_5) :-
    map.keys(V_4, V_5).

bimap.coordinates(V_3) = V_4 :-
    bimap.coordinates(V_3, V_4).

bimap.count(V_3) = V_4 :-
    V_3 = bimap.bimap(V_5, V_6) : bimap.bimap(K_1, V_2),
    V_4 = map.count(V_5).

bimap.delete_key(V_6, V_5) = V_7 :-
    bimap.delete_key(V_5, V_6, V_7).

bimap.delete_keys(V_4, V_5) = V_6 :-
    bimap.delete_keys(V_5, V_4, V_6).

bimap.delete_value(V_6, V_5) = V_7 :-
    bimap.delete_value(V_5, V_6, V_7).

bimap.delete_values(V_4, V_5) = V_6 :-
    bimap.delete_values(V_5, V_4, V_6).

bimap.det_from_assoc_list(V_3, V_4) :-
    V_5 = bimap.init,
    bimap.det_insert_from_assoc_list(V_3, V_5, V_4).

bimap.det_from_assoc_list(V_3) = V_4 :-
    bimap.det_from_assoc_list(V_3, V_4).

bimap.det_from_corresponding_lists(V_4, V_5, V_6) :-
    assoc_list.from_corresponding_lists(V_4, V_5, V_7),
    bimap.det_from_assoc_list(V_7, V_6).

bimap.det_from_corresponding_lists(V_4, V_5) = V_6 :-
    bimap.det_from_corresponding_lists(V_4, V_5, V_6).

bimap.det_insert(V_5, V_6, V_12, V_13) :-
    V_12 = bimap.bimap(V_8, V_9) : bimap.bimap(K_1, V_2),
    map.det_insert(V_5, V_6, V_8, V_10),
    map.det_insert(V_6, V_5, V_9, V_11),
    V_13 = bimap.bimap(V_10, V_11) : bimap.bimap(K_1, V_2).

bimap.det_insert(V_8, V_6, V_7) = V_9 :-
    bimap.det_insert(V_6, V_7, V_8, V_9).

bimap.det_insert_from_assoc_list(V_4, V_6) = V_7 :-
    bimap.det_insert_from_assoc_list(V_4, V_6, V_7).

bimap.det_insert_from_corresponding_lists(V_5, V_6, V_8) = V_9 :-
    bimap.det_insert_from_corresponding_lists(V_5, V_6, V_8, V_9).

bimap.equal(V_3, V_4) :-
    V_3 = bimap.bimap(V_5, V_6) : bimap.bimap(K_1, V_2),
    V_4 = bimap.bimap(V_7, V_8) : bimap.bimap(K_1, V_2),
    map.equal(V_5, V_7).

bimap.foldl(V_5, bimap.bimap(V_6, V_7), V_9, V_10) :-
    map.foldl(V_5, V_6, V_9, V_10).

bimap.foldl(V_5, bimap.bimap(V_6, V_7), V_8) = V_4 :-
    V_4 = map.foldl(V_5, V_6, V_8).

bimap.foldl2(V_7, bimap.bimap(V_8, V_9), V_12, V_13, V_14, V_15) :-
    map.foldl2(V_7, V_8, V_12, V_13, V_14, V_15).

bimap.foldl3(V_9, bimap.bimap(V_10, V_11), V_15, V_16, V_17, V_18, V_19, V_20) :-
    map.foldl3(V_9, V_10, V_15, V_16, V_17, V_18, V_19, V_20).

bimap.forward_map(bimap.bimap(V_3, V_4)) = V_3.

bimap.forward_search(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.search(V_4, V_6, V_7).

bimap.forward_search(V_4, V_5) = V_6 :-
    bimap.forward_search(V_4, V_5, V_6).

bimap.from_assoc_list(V_3, V_4) :-
    V_5 = bimap.init,
    bimap.insert_from_assoc_list(V_3, V_5, V_4).

bimap.from_assoc_list(V_3) = V_4 :-
    bimap.from_assoc_list(V_3, V_4).

bimap.from_corresponding_lists(V_4, V_5, V_6) :-
    assoc_list.from_corresponding_lists(V_4, V_5, V_7),
    bimap.from_assoc_list(V_7, V_6).

bimap.from_corresponding_lists(V_4, V_5) = V_6 :-
    bimap.from_corresponding_lists(V_4, V_5, V_6).

bimap.init(V_2) :-
    map.init(V_3),
    map.init(V_4),
    V_2 = bimap.bimap(V_3, V_4) : bimap.bimap(K_1, V_2).

bimap.init = V_2 :-
    bimap.init(V_2).

bimap.insert(V_5, V_6, bimap.bimap(V_9, V_10), bimap.bimap(V_11, V_12)) :-
    map.insert(V_5, V_6, V_9, V_11),
    map.insert(V_6, V_5, V_10, V_12).

bimap.insert(V_8, V_6, V_7) = V_9 :-
    bimap.insert(V_6, V_7, V_8, V_9).

bimap.insert_from_assoc_list(V_4, V_5) = V_6 :-
    bimap.insert_from_assoc_list(V_4, V_5, V_6).

bimap.is_empty(bimap.bimap(V_2, V_3)) :-
    map.is_empty(V_2).

bimap.lookup(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.lookup(V_4, V_6, V_7).

bimap.lookup(V_4, V_5) = V_6 :-
    bimap.lookup(V_4, V_5, V_6).

bimap.map_keys(V_4, V_5, V_6) :-
    bimap.to_assoc_list(V_5, V_7),
    V_9 = list.[] : list.list(pair.pair(L_3, V_1)),
    bimap.map_keys_2(V_4, V_7, V_9, V_8),
    bimap.det_from_assoc_list(V_8, V_6).

bimap.map_keys(V_4, V_5) = V_6 :-
    bimap.to_assoc_list(V_5, V_7),
    V_9 = list.[] : list.list(pair.pair(L_3, V_1)),
    bimap.map_keys_func_2(V_4, V_7, V_9, V_8),
    bimap.det_from_assoc_list(V_8, V_6).

bimap.map_keys_2(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
bimap.map_keys_2(V_9, list.[V_17 | V_12], V_15, V_16) :-
    V_17 = pair.(V_10 - V_11) : pair.pair(K_2, V_1),
    call(V_9, V_11, V_10, V_14),
    V_18 = list.[V_19 | V_15] : list.list(pair.pair(L_3, V_1)),
    V_19 = pair.(V_14 - V_11) : pair.pair(L_3, V_1),
    bimap.map_keys_2(V_9, V_12, V_18, V_16).

bimap.map_keys_func_2(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
bimap.map_keys_func_2(V_9, list.[V_17 | V_12], V_15, V_16) :-
    V_17 = pair.(V_10 - V_11) : pair.pair(K_2, V_1),
    V_14 = apply(V_9, V_11, V_10),
    V_18 = list.[V_19 | V_15] : list.list(pair.pair(L_3, V_1)),
    V_19 = pair.(V_14 - V_11) : pair.pair(L_3, V_1),
    bimap.map_keys_func_2(V_9, V_12, V_18, V_16).

bimap.map_values(V_4, V_5, V_6) :-
    bimap.to_assoc_list(V_5, V_7),
    V_9 = list.[] : list.list(pair.pair(K_1, W_3)),
    bimap.map_values_2(V_4, V_7, V_9, V_8),
    bimap.det_from_assoc_list(V_8, V_6).

bimap.map_values(V_4, V_5) = V_6 :-
    bimap.to_assoc_list(V_5, V_7),
    V_9 = list.[] : list.list(pair.pair(K_1, W_3)),
    bimap.map_values_func_2(V_4, V_7, V_9, V_8),
    bimap.det_from_assoc_list(V_8, V_6).

bimap.map_values_2(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
bimap.map_values_2(V_9, list.[V_17 | V_12], V_15, V_16) :-
    V_17 = pair.(V_10 - V_11) : pair.pair(K_1, V_2),
    call(V_9, V_10, V_11, V_14),
    V_18 = list.[V_19 | V_15] : list.list(pair.pair(K_1, W_3)),
    V_19 = pair.(V_10 - V_14) : pair.pair(K_1, W_3),
    bimap.map_values_2(V_9, V_12, V_18, V_16).

bimap.map_values_func_2(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
bimap.map_values_func_2(V_9, list.[V_17 | V_12], V_15, V_16) :-
    V_17 = pair.(V_10 - V_11) : pair.pair(K_1, V_2),
    V_14 = apply(V_9, V_10, V_11),
    V_18 = list.[V_19 | V_15] : list.list(pair.pair(K_1, W_3)),
    V_19 = pair.(V_10 - V_14) : pair.pair(K_1, W_3),
    bimap.map_values_func_2(V_9, V_12, V_18, V_16).

bimap.ordinates(bimap.bimap(V_3, V_4), V_5) :-
    map.keys(V_3, V_5).

bimap.ordinates(V_3) = V_4 :-
    bimap.ordinates(V_3, V_4).

bimap.overlay(V_4, V_5, V_6) :-
    bimap.to_assoc_list(V_5, V_7),
    bimap.overlay_2(V_7, V_4, V_6).

bimap.overlay(V_4, V_5) = V_6 :-
    bimap.overlay(V_4, V_5, V_6).

bimap.reverse_lookup(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.lookup(V_5, V_7, V_6).

bimap.reverse_lookup(V_4, V_5) = V_6 :-
    bimap.reverse_lookup(V_4, V_6, V_5).

bimap.reverse_map(bimap.bimap(V_3, V_4)) = V_4.

bimap.reverse_search(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.search(V_5, V_7, V_6).

bimap.reverse_search(V_4, V_5) = V_6 :-
    bimap.reverse_search(V_4, V_6, V_5).

bimap.search(bimap.bimap(V_4, V_5), V_6, V_7) :-
    map.search(V_4, V_6, V_7),
    map.search(V_5, V_7, V_6).

bimap.set(V_8, V_6, V_7) = V_9 :-
    bimap.set(V_6, V_7, V_8, V_9).

bimap.set_from_assoc_list(V_4, V_5) = V_6 :-
    bimap.set_from_assoc_list(V_4, V_5, V_6).

bimap.set_from_corresponding_lists(V_5, V_6, V_7) = V_8 :-
    bimap.set_from_corresponding_lists(V_5, V_6, V_7, V_8).

bimap.singleton(V_4, V_5) = V_6 :-
    V_7 = map.singleton(V_4, V_5),
    V_8 = map.singleton(V_5, V_4),
    V_6 = bimap.bimap(V_7, V_8) : bimap.bimap(K_1, V_2).

bimap.to_assoc_list(bimap.bimap(V_3, V_4), V_5) :-
    map.to_assoc_list(V_3, V_5).

bimap.to_assoc_list(V_3) = V_4 :-
    bimap.to_assoc_list(V_3, V_4).

:- pragma termination_info(bimap.apply_forward_map_to_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.apply_forward_map_to_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.apply_reverse_map_to_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.apply_reverse_map_to_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.contains_key((builtin.in), (builtin.in)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(bimap.contains_value((builtin.in), (builtin.in)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(bimap.coordinates((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.coordinates((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.count((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.delete_key((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.delete_key((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.delete_keys((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.delete_keys((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.delete_value((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.delete_value((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.delete_values((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.delete_values((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.det_from_assoc_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.det_from_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.det_from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.det_from_corresponding_lists((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.det_insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.det_insert((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.det_insert_from_assoc_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.det_insert_from_assoc_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.det_insert_from_corresponding_lists((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.det_insert_from_corresponding_lists((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.equal((builtin.in), (builtin.in)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(bimap.foldl((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.foldl((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.foldl((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl2((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(bimap.foldl3((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bimap.forward_map((builtin.in)) = (builtin.out), finite(-2, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(bimap.forward_search((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.forward_search((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.from_assoc_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.from_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.from_corresponding_lists((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.init((builtin.out)), infinite, can_loop).
:- pragma termination_info((bimap.init) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.insert((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.insert_from_assoc_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.insert_from_assoc_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.is_empty((builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(bimap.lookup((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.lookup((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.map_keys(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.map_keys((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.map_keys_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.map_keys_func_2(builtin.in((func((builtin.in), (builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.map_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.map_values((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.map_values_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.map_values_func_2(builtin.in((func((builtin.in), (builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.ordinates((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.ordinates((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.overlay((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.overlay((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.overlay_2((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.reverse_lookup((builtin.in), (builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(bimap.reverse_lookup((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.reverse_map((builtin.in)) = (builtin.out), finite(-2, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(bimap.reverse_search((builtin.in), (builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(bimap.reverse_search((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.search((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.search((builtin.in), (builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(bimap.search_insert((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.set((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.set((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.set_from_assoc_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.set_from_assoc_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.set_from_corresponding_lists((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.set_from_corresponding_lists((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.singleton((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bimap.to_assoc_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bimap.to_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).

:- pragma exceptions(predicate, (bimap.apply_forward_map_to_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.apply_forward_map_to_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.apply_reverse_map_to_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.apply_reverse_map_to_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.contains_key), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.contains_value), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.coordinates), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.coordinates), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.count), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.delete_key), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.delete_key), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.delete_keys), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.delete_keys), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.delete_value), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.delete_value), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.delete_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.delete_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.det_from_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.det_from_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.det_from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.det_from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.det_insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.det_insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.det_insert_from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.det_insert_from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.det_insert_from_corresponding_lists), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.det_insert_from_corresponding_lists), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.equal), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.foldl3), 8, 7, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.forward_map), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (bimap.forward_search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.forward_search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.from_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.from_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.init), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.init), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.insert_from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.insert_from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.is_empty), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.map_keys), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.map_keys), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.map_keys_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.map_keys_func_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.map_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.map_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.map_values_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.map_values_func_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.ordinates), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.ordinates), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.overlay), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.overlay), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.overlay_2), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.reverse_lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.reverse_lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.reverse_map), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (bimap.reverse_search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.reverse_search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.search), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.search_insert), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.set_from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.set_from_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.set_from_corresponding_lists), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.set_from_corresponding_lists), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.singleton), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bimap.to_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bimap.to_assoc_list), 2, 0, may_throw(user_exception)).
