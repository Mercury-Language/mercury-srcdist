:- module (thread.semaphore).
:- use_module bool.
:- use_module builtin.
:- use_module io.
:- use_module maybe.
:- use_module private_builtin.
:- use_module require.

:- type semaphore.
:- pragma foreign_type(il, semaphore, "class [mercury]mercury.thread.semaphore__csharp_code.mercury_code.ML_Semaphore").
:- pragma foreign_type(c, semaphore, "struct ML_SEMAPHORE_STRUCT *", [can_pass_as_mercury_type]).
:- pragma foreign_type(java, semaphore, "jmercury.runtime.Semaphore").
:- pragma foreign_type(csharp, semaphore, "thread__semaphore.ML_Semaphore").
:- pragma foreign_type(erlang, semaphore, "").

:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", thread).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", (thread.semaphore)).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("C#", thread).
:- pragma foreign_import_module("C#", (thread.semaphore)).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Java", thread).
:- pragma foreign_import_module("Java", (thread.semaphore)).
:- pragma foreign_import_module("IL", io).
:- pragma foreign_import_module("IL", (thread.semaphore)).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("Erlang", (thread.semaphore)).

(thread.semaphore).init(V_4, V_6, V_7) :-
    V_8 = 0 : int,
    (thread.semaphore).init(V_8, V_4, V_6, V_7).
:- pragma exceptions(predicate, ((thread.semaphore).init), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).init), 3, 0, will_not_throw).
:- pragma exceptions(function, ((thread.semaphore).impure_init), 2, 0, will_not_throw).
:- pragma exceptions(function, ((thread.semaphore).init), 2, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).wait), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).try_wait), 4, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).signal), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).impure_init), 2, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).impure_init), 1, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).impure_wait), 1, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).impure_try_wait), 2, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.semaphore).impure_signal), 1, 0, will_not_throw).
:- pragma termination_info((thread.semaphore).init((builtin.in), (builtin.uo), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).init((builtin.uo), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).impure_init((builtin.in)) = (builtin.uo), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).init((builtin.in)) = (builtin.uo), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).wait((builtin.in), (builtin.di), (builtin.uo)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).try_wait((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).signal((builtin.in), (builtin.di), (builtin.uo)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).impure_init((builtin.in), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).impure_init((builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).impure_wait((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info((thread.semaphore).impure_try_wait((builtin.in), (builtin.out)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).impure_signal((builtin.in)), finite(0, [no]), cannot_loop).
