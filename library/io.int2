:- module io.
:- interface.
:- import_module array.
:- import_module bitmap.
:- import_module bool.
:- import_module char.
:- import_module deconstruct.
:- import_module list.
:- import_module map.
:- import_module maybe.
:- import_module ops.
:- import_module stream.
:- import_module string.
:- import_module time.
:- import_module univ.
:- type access_type
    --->    read 
    ;       write 
    ;       execute .
:- type binary_input_stream.
:- type binary_output_stream.
:- type error.
:- type file_id.
:- type file_type
    --->    regular_file 
    ;       directory 
    ;       symbolic_link 
    ;       named_pipe 
    ;       socket 
    ;       character_device 
    ;       block_device 
    ;       message_queue 
    ;       semaphore 
    ;       shared_memory 
    ;       unknown .
:- type input_stream.
:- type io == io.state.
:- type maybe_incomplete_result(T)
    --->    ok(T)
    ;       eof 
    ;       incomplete(list.list(uint8))
    ;       error(io.error).
:- type maybe_partial_res(T)
    --->    ok(T)
    ;       error(T, io.error).
:- type maybe_stream_info
    --->    stream((io.maybe_stream_id) :: int, (io.maybe_stream_mode) :: io.stream_mode, (io.maybe_stream_content) :: io.stream_content, (io.maybe_stream_source) :: io.stream_source)
    ;       unknown_stream .
:- type output_stream.
:- type posn
    --->    posn((io.posn_current_line_number) :: int, (io.posn_offset_of_start_of_line) :: int, (io.posn_current_offset) :: int).
:- type read_result(T)
    --->    ok(T)
    ;       eof 
    ;       error(string, int).
:- type res
    --->    ok 
    ;       error(io.error).
:- type res(T)
    --->    ok(T)
    ;       error(io.error).
:- type result
    --->    ok 
    ;       eof 
    ;       error(io.error).
:- type result(T)
    --->    ok(T)
    ;       eof 
    ;       error(io.error).
:- type state.
:- type stream_content
    --->    text 
    ;       binary 
    ;       preopen .
:- type stream_db == map.map(io.stream_id, io.stream_info).
:- type stream_id.
:- type stream_info
    --->    stream((io.stream_id) :: int, (io.stream_mode) :: io.stream_mode, (io.stream_content) :: io.stream_content, (io.stream_source) :: io.stream_source).
:- type stream_mode
    --->    input 
    ;       output 
    ;       append .
:- type stream_source
    --->    file(string)
    ;       stdin 
    ;       stdout 
    ;       stderr .
:- type system_error.
:- pragma foreign_type(c, system_error, "MR_Integer").
:- pragma foreign_type(csharp, system_error, "System.Exception").
:- pragma foreign_type(java, system_error, "java.lang.Exception").
:- pragma foreign_type(erlang, system_error, "").
:- type system_result
    --->    exited(int)
    ;       signalled(int).
:- type text_input_stream == io.input_stream.
:- type text_output_stream == io.output_stream.
:- type whence
    --->    set 
    ;       cur 
    ;       end .
:- inst (maybe_partial_res(T)) for io.maybe_partial_res/1 == bound(error(T, ground) ; ok(T)).
:- instance (stream.bulk_reader(io.binary_input_stream, int, bitmap.bitmap, io.io, io.error)).
:- instance (stream.error(io.error)).
:- instance (stream.input(io.binary_input_stream, io.io)).
:- instance (stream.input(io.text_input_stream, io.io)).
:- instance (stream.line_oriented(io.text_input_stream, io.io)).
:- instance (stream.line_oriented(io.text_output_stream, io.io)).
:- instance (stream.output(io.binary_output_stream, io.io)).
:- instance (stream.output(io.text_output_stream, io.io)).
:- instance (stream.putback(io.binary_input_stream, int, io.io, io.error)).
:- instance (stream.putback(io.binary_input_stream, int8, io.io, io.error)).
:- instance (stream.putback(io.binary_input_stream, uint8, io.io, io.error)).
:- instance (stream.putback(io.text_input_stream, char.char, io.io, io.error)).
:- instance (stream.reader(io.binary_input_stream, int, io.io, io.error)).
:- instance (stream.reader(io.binary_input_stream, int8, io.io, io.error)).
:- instance (stream.reader(io.binary_input_stream, uint8, io.io, io.error)).
:- instance (stream.reader(io.text_input_stream, char.char, io.io, io.error)).
:- instance (stream.reader(io.text_input_stream, string.line, io.io, io.error)).
:- instance (stream.reader(io.text_input_stream, string.text_file, io.io, io.error)).
:- instance (stream.seekable(io.binary_input_stream, io.io)).
:- instance (stream.seekable(io.binary_output_stream, io.io)).
:- instance (stream.stream(io.binary_input_stream, io.io)).
:- instance (stream.stream(io.binary_output_stream, io.io)).
:- instance (stream.stream(io.text_input_stream, io.io)).
:- instance (stream.stream(io.text_output_stream, io.io)).
:- instance (stream.writer(io.binary_output_stream, bitmap.byte, io.io)).
:- instance (stream.writer(io.binary_output_stream, bitmap.slice, io.io)).
:- instance (stream.writer(io.binary_output_stream, int8, io.io)).
:- instance (stream.writer(io.binary_output_stream, uint8, io.io)).
:- instance (stream.writer(io.text_output_stream, char.char, io.io)).
:- instance (stream.writer(io.text_output_stream, univ.univ, io.io)).
:- instance (stream.writer(io.text_output_stream, int, io.io)).
:- instance (stream.writer(io.text_output_stream, uint, io.io)).
:- instance (stream.writer(io.text_output_stream, int8, io.io)).
:- instance (stream.writer(io.text_output_stream, uint8, io.io)).
:- instance (stream.writer(io.text_output_stream, uint8, io.io)).
:- instance (stream.writer(io.text_output_stream, int16, io.io)).
:- instance (stream.writer(io.text_output_stream, uint16, io.io)).
:- instance (stream.writer(io.text_output_stream, int32, io.io)).
:- instance (stream.writer(io.text_output_stream, float, io.io)).
:- instance (stream.writer(io.text_output_stream, string, io.io)).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Erlang", io).
:- implementation.
:- type file_id
    --->    file_id .
:- pragma foreign_type(c, file_id, "ML_File_Id")
	where	type_is_abstract_noncanonical.
:- pragma foreign_type(erlang, file_id, "")
	where	type_is_abstract_noncanonical.
:- pragma foreign_type(c, state, "MR_Word", [can_pass_as_mercury_type]).
:- pragma foreign_type(csharp, state, "int", [can_pass_as_mercury_type]).
:- pragma foreign_type(java, state, "java.lang.Object", [can_pass_as_mercury_type]).
:- pragma foreign_type(erlang, state, "", [can_pass_as_mercury_type]).
:- type stream_id == int.
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
