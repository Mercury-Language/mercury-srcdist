:- module (string.parse_util).
:- interface.
:- type gather_ended_by.
:- type poly_kind
	where	type_is_abstract_enum(2).
:- type string_format_error.
:- type string_format_flag_hash
	where	type_is_abstract_enum(1).
:- type string_format_flag_minus
	where	type_is_abstract_enum(1).
:- type string_format_flag_plus
	where	type_is_abstract_enum(1).
:- type string_format_flag_space
	where	type_is_abstract_enum(1).
:- type string_format_flag_zero
	where	type_is_abstract_enum(1).
:- type string_format_flags.
:- type string_format_float_kind
	where	type_is_abstract_enum(3).
:- type string_format_int_base
	where	type_is_abstract_enum(3).
:- type string_format_maybe_prec.
:- type string_format_maybe_width.
:- type_representation(poly_kind, du_repn(enum("poly_kind_char", "poly_kind_str", ["poly_kind_int", "poly_kind_float"], []))).
:- type_representation(string_format_flag_hash, du_repn(enum("flag_hash_clear", "flag_hash_set", [], []))).
:- type_representation(string_format_flag_minus, du_repn(enum("flag_minus_clear", "flag_minus_set", [], []))).
:- type_representation(string_format_flag_plus, du_repn(enum("flag_plus_clear", "flag_plus_set", [], []))).
:- type_representation(string_format_flag_space, du_repn(enum("flag_space_clear", "flag_space_set", [], []))).
:- type_representation(string_format_flag_zero, du_repn(enum("flag_zero_clear", "flag_zero_set", [], []))).
:- type_representation(string_format_flags, is_word_aligned_ptr).
:- type_representation(string_format_float_kind, du_repn(enum("kind_e_scientific_lc", "kind_e_scientific_uc", ["kind_f_plain_lc", "kind_f_plain_uc", "kind_g_flexible_lc", "kind_g_flexible_uc"], []))).
:- type_representation(string_format_int_base, du_repn(enum("base_octal", "base_decimal", ["base_hex_lc", "base_hex_uc", "base_hex_p"], []))).
