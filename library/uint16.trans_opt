:- module uint16.

:- pragma termination_info(uint16.'*'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'+'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'+'((builtin.uo), (builtin.in)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'+'((builtin.in), (builtin.uo)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'-'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'-'((builtin.uo), (builtin.in)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'-'((builtin.in), (builtin.uo)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'/'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'//'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'/\\'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'<'((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.'<<'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'<<u'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'=<'((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.'>'((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.'>='((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.'>>'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'>>u'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.'\\'((builtin.in)) = (builtin.uo), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.'\\/'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.bit_is_clear((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.bit_is_set((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.cast_from_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_from_int16((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_from_uint((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_from_uint64((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_from_uint8((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_to_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_to_uint((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_to_uint64((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.cast_to_uint8((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.clear_bit((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.det_from_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.det_from_uint((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.div((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.even((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint16.flip_bit((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.from_bytes_be((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.from_bytes_le((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.from_int((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(uint16.from_uint((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(uint16.max((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, yes, no]), cannot_loop).
:- pragma termination_info((uint16.max_uint16) = (builtin.out), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint16.min((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, yes, no]), cannot_loop).
:- pragma termination_info(uint16.minus((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.mod((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.num_leading_zeros((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.num_ones((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.num_trailing_zeros((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.num_zeros((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.odd((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint16.plus((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.rem((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.reverse_bits((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.reverse_bytes((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.rotate_left((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.rotate_right((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.set_bit((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.times((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.to_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.uint16_to_doc((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.unchecked_bit_is_clear((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_bit_is_set((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_clear_bit((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_flip_bit((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_left_shift((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_left_ushift((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_quotient((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_rem((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_right_shift((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_right_ushift((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.unchecked_rotate_left((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.unchecked_rotate_right((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint16.unchecked_set_bit((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.xor((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.xor((builtin.in), (builtin.uo)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint16.xor((builtin.uo), (builtin.in)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).

:- pragma exceptions(function, (uint16.(*)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(+)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(+)), 2, 1, will_not_throw).
:- pragma exceptions(function, (uint16.(+)), 2, 2, will_not_throw).
:- pragma exceptions(function, (uint16.(-)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(-)), 2, 1, will_not_throw).
:- pragma exceptions(function, (uint16.(-)), 2, 2, will_not_throw).
:- pragma exceptions(function, (uint16.(/)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.(//)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.(/\)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.(<)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(<<)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.('<<u')), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (uint16.(=<)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.(>)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.(>=)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(>>)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.('>>u')), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.(\)), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(\/)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.bit_is_clear), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (uint16.bit_is_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.cast_from_int), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_from_int16), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_from_uint), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_from_uint64), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_from_uint8), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_to_int), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_to_uint), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_to_uint64), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.cast_to_uint8), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.clear_bit), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.det_from_int), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.det_from_uint), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.(div)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (uint16.even), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.flip_bit), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.from_bytes_be), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.from_bytes_le), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.from_int), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.from_uint), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.max), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.max_uint16), 0, 0, will_not_throw).
:- pragma exceptions(function, (uint16.min), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.minus), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(mod)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.num_leading_zeros), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.num_ones), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.num_trailing_zeros), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.num_zeros), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.odd), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.plus), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.(rem)), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.reverse_bits), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.reverse_bytes), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.rotate_left), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.rotate_right), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.set_bit), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (uint16.times), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.to_int), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint16.uint16_to_doc), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.unchecked_bit_is_clear), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint16.unchecked_bit_is_set), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_clear_bit), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_flip_bit), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_left_shift), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_left_ushift), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_quotient), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_rem), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_right_shift), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_right_ushift), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_rotate_left), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_rotate_right), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.unchecked_set_bit), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.xor), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint16.xor), 2, 1, will_not_throw).
:- pragma exceptions(function, (uint16.xor), 2, 2, will_not_throw).
