:- module getopt_io.
:- use_module bool.
:- use_module builtin.
:- use_module char.
:- use_module io.
:- use_module list.
:- use_module map.
:- use_module maybe.
:- use_module pair.
:- use_module private_builtin.
:- use_module require.
:- use_module set.
:- use_module solutions.
:- use_module string.
:- use_module unit.
:- use_module (string.format).
:- use_module (string.parse_util).

:- type option_ops_internal(OptionType, UserDataType)
    --->    option_ops_internal((getopt_io.short_option) :: pred(character, OptionType), (getopt_io.long_option) :: pred(string, OptionType), (getopt_io.special_handler) :: getopt_io.option_ops_special(OptionType, UserDataType)).
:- type option_ops_special(OptionType, UserDataType)
    --->    none 
    ;       notrack(pred(OptionType, getopt_io.special_data, tree234.tree234(OptionType, getopt_io.option_data), getopt_io.maybe_option_table(OptionType)))
    ;       track(pred(OptionType, getopt_io.special_data, tree234.tree234(OptionType, getopt_io.option_data), getopt_io.maybe_option_table(OptionType), set_ordlist.set_ordlist(OptionType)))
    ;       userdata(pred(OptionType, getopt_io.special_data, tree234.tree234(OptionType, getopt_io.option_data), getopt_io.maybe_option_table(OptionType), UserDataType, UserDataType)).

:- inst (option_ops_internal) for getopt_io.option_ops_internal/2 == bound(option_ops_internal((pred((builtin.in), (builtin.out)) is semidet), (pred((builtin.in), (builtin.out)) is semidet), (getopt_io.option_ops_special))).
:- inst (option_ops_special) for getopt_io.option_ops_special/2 == bound(none ; notrack((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)) ; track((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out)) is semidet)) ; userdata((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet))).

getopt_io.init_option_table(V_3, V_4) :-
    V_9 = (pred(V_10::(builtin.out)) is nondet :-
      some [] (
        call(V_3, V_6, V_7),
        V_11 = pair.(V_6 - V_7) : pair.pair(OptionType_1, getopt_io.option_data),
        V_10 = V_11
      )
    ) : (pred pair.pair(OptionType_1, getopt_io.option_data)),
    solutions.solutions(V_9, V_8),
    map.from_sorted_assoc_list(V_8, V_4).

getopt_io.init_option_table_multi(V_3, V_4) :-
    V_9 = (pred(V_10::(builtin.out)) is multi :-
      some [] (
        call(V_3, V_6, V_7),
        V_11 = pair.(V_6 - V_7) : pair.pair(OptionType_1, getopt_io.option_data),
        V_10 = V_11
      )
    ) : (pred pair.pair(OptionType_1, getopt_io.option_data)),
    solutions.solutions(V_9, V_8),
    map.from_sorted_assoc_list(V_8, V_4).

getopt_io.lookup_accumulating_option(V_4, V_5) = V_6 :-
    getopt_io.lookup_accumulating_option(V_4, V_5, V_6).

getopt_io.lookup_bool_option(V_4, V_5) = V_6 :-
    getopt_io.lookup_bool_option(V_4, V_5, V_6).

getopt_io.lookup_int_option(V_4, V_5) = V_6 :-
    getopt_io.lookup_int_option(V_4, V_5, V_6).

getopt_io.lookup_maybe_int_option(V_4, V_5) = V_6 :-
    getopt_io.lookup_maybe_int_option(V_4, V_5, V_6).

getopt_io.lookup_maybe_string_option(V_4, V_5) = V_6 :-
    getopt_io.lookup_maybe_string_option(V_4, V_5, V_6).

getopt_io.lookup_string_option(V_4, V_5) = V_6 :-
    getopt_io.lookup_string_option(V_4, V_5, V_6).

getopt_io.process_options_se(V_7, V_8, V_9, V_10, V_13, V_14) :-
    getopt_io.process_options_se(V_7, V_8, V_12, V_9, V_10, V_13, V_14).

:- pragma termination_info(getopt_io.init_option_table(builtin.in((pred((builtin.out), (builtin.out)) is nondet)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.init_option_table_multi(builtin.in((pred((builtin.out), (builtin.out)) is multi)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_accumulating_option((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_accumulating_option((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_bool_option((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_bool_option((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_int_option((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_int_option((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_maybe_int_option((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_maybe_int_option((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_maybe_string_option((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_maybe_string_option((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_string_option((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(getopt_io.lookup_string_option((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.option_error_to_string((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options(builtin.in((getopt_io.option_ops)), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options(builtin.in((getopt_io.option_ops)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options_se(builtin.in((getopt_io.option_ops)), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options_se(builtin.in((getopt_io.option_ops)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options_track(builtin.in((getopt_io.option_ops_track)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options_track_se(builtin.in((getopt_io.option_ops_track)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options_userdata(builtin.in((getopt_io.option_ops_userdata)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(getopt_io.process_options_userdata_se(builtin.in((getopt_io.option_ops_userdata)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).

:- pragma exceptions(predicate, (getopt_io.init_option_table), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.init_option_table_multi), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.lookup_accumulating_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.lookup_accumulating_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.lookup_bool_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.lookup_bool_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.lookup_int_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.lookup_int_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.lookup_maybe_int_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.lookup_maybe_int_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.lookup_maybe_string_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.lookup_maybe_string_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.lookup_string_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.lookup_string_option), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (getopt_io.option_error_to_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options_se), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options_se), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options_track), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options_track_se), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options_userdata), 11, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (getopt_io.process_options_userdata_se), 11, 0, may_throw(user_exception)).
