:- module test_bitset.
:- use_module bool.
:- use_module builtin.
:- use_module enum.
:- use_module exception.
:- use_module list.
:- use_module maybe.
:- use_module pair.
:- use_module private_builtin.
:- use_module require.
:- use_module set.
:- use_module set_ordlist.
:- use_module solutions.
:- use_module string.
:- use_module tree_bitset.

:- type test_bitset(T) == pair.pair(tree_bitset.tree_bitset(T), set_ordlist.set_ordlist(T)).

test_bitset.all_true(V_3, pair.(V_4 - V_5)) :-
    ( if
      tree_bitset.all_true(V_3, V_4)
    then
      ( if
        set_ordlist.all_true(V_3, V_5)
      then
        true
      else
        V_6 = "predicate `test_bitset.all_true\'/2" : string,
        V_7 = "tree_bitset but not set_ordlist" : string,
        require.unexpected(V_6, V_7)
      )
    else
      ( if
        set_ordlist.all_true(V_3, V_5)
      then
        V_8 = "predicate `test_bitset.all_true\'/2" : string,
        V_9 = "set_ordlist but not tree_bitset" : string,
        require.unexpected(V_8, V_9)
      else
        fail
      )
    ).

test_bitset.bitset_to_set(pair.(V_3 - V_4)) = V_5 :-
    V_6 = test_bitset.to_sorted_list(V_7),
    V_7 = pair.(V_3 - V_4) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1)),
    set.sorted_list_to_set(V_6, V_5).

test_bitset.difference(V_4, V_5, V_3) :-
    V_3 = test_bitset.difference(V_4, V_5).

test_bitset.divide(V_5, pair.(V_6 - V_7), V_8, V_9) :-
    tree_bitset.divide(V_5, V_6, V_10, V_11),
    set_ordlist.divide(V_5, V_7, V_12, V_13),
    tree_bitset.to_sorted_list(V_6, V_14),
    set_ordlist.to_sorted_list(V_7, V_15),
    tree_bitset.to_sorted_list(V_10, V_16),
    set_ordlist.to_sorted_list(V_12, V_17),
    tree_bitset.to_sorted_list(V_11, V_18),
    set_ordlist.to_sorted_list(V_13, V_19),
    ( if
      V_14 = V_15,
      V_16 = V_17,
      V_18 = V_19
    then
      V_8 = pair.(V_10 - V_12) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1)),
      V_9 = pair.(V_11 - V_13) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1))
    else
      V_20 = "predicate `test_bitset.divide\'/4" : string,
      V_21 = "failed" : string,
      require.unexpected(V_20, V_21)
    ).

test_bitset.filter(V_4, pair.(V_5 - V_6)) = V_7 :-
    tree_bitset.to_sorted_list(V_5, V_8),
    set_ordlist.to_sorted_list(V_6, V_9),
    V_10 = tree_bitset.filter(V_4, V_5),
    V_11 = set_ordlist.filter(V_4, V_6),
    tree_bitset.to_sorted_list(V_10, V_12),
    set_ordlist.to_sorted_list(V_11, V_13),
    ( if
      V_8 = V_9,
      V_12 = V_13
    then
      V_7 = pair.(V_10 - V_11) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1))
    else
      V_14 = "function `test_bitset.filter\'/2" : string,
      V_15 = "failed" : string,
      require.unexpected(V_14, V_15)
    ).

test_bitset.filter(V_5, pair.(V_6 - V_7), V_8, V_9) :-
    tree_bitset.to_sorted_list(V_6, V_10),
    set_ordlist.to_sorted_list(V_7, V_11),
    tree_bitset.filter(V_5, V_6, V_12, V_13),
    set_ordlist.filter(V_5, V_7, V_14, V_15),
    tree_bitset.to_sorted_list(V_12, V_16),
    set_ordlist.to_sorted_list(V_14, V_17),
    tree_bitset.to_sorted_list(V_13, V_18),
    set_ordlist.to_sorted_list(V_15, V_19),
    ( if
      V_10 = V_11,
      V_16 = V_17,
      V_18 = V_19
    then
      V_8 = pair.(V_12 - V_14) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1)),
      V_9 = pair.(V_13 - V_15) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1))
    else
      V_20 = "predicate `test_bitset.filter\'/4" : string,
      V_21 = "failed" : string,
      require.unexpected(V_20, V_21)
    ).

test_bitset.foldl(V_5, pair.(V_6 - V_7), V_8, V_9) :-
    tree_bitset.to_sorted_list(V_6, V_10),
    set_ordlist.to_sorted_list(V_7, V_11),
    tree_bitset.foldl(V_5, V_6, V_8, V_12),
    set_ordlist.fold(V_5, V_7, V_8, V_13),
    ( if
      V_10 = V_11,
      V_12 = V_13
    then
      V_9 = V_12
    else
      V_14 = "predicate `test_bitset.foldl\'/4" : string,
      V_15 = "failed" : string,
      require.unexpected(V_14, V_15)
    ).

test_bitset.foldl(V_5, pair.(V_6 - V_7), V_8) = V_9 :-
    tree_bitset.to_sorted_list(V_6, V_10),
    set_ordlist.to_sorted_list(V_7, V_11),
    V_12 = tree_bitset.foldl(V_5, V_6, V_8),
    V_13 = set_ordlist.fold(V_5, V_7, V_8),
    ( if
      V_10 = V_11,
      V_12 = V_13
    then
      V_9 = V_12
    else
      V_14 = "function `test_bitset.foldl\'/3" : string,
      V_15 = "failed" : string,
      require.unexpected(V_14, V_15)
    ).

test_bitset.from_set(V_3) = V_2 :-
    V_2 = test_bitset.set_to_bitset(V_3).

test_bitset.init(V_1) :-
    V_1 = test_bitset.init.

test_bitset.init = pair.(V_2 - V_3) :-
    V_2 = tree_bitset.init,
    V_3 = set_ordlist.init.

test_bitset.intersect(V_4, V_5, V_3) :-
    V_3 = test_bitset.intersect(V_4, V_5).

test_bitset.intersect_list(V_3, V_2) :-
    V_2 = test_bitset.intersect_list(V_3).

test_bitset.list_to_set(V_3, V_2) :-
    V_2 = test_bitset.list_to_set(V_3).

test_bitset.make_singleton_set(V_1, V_3) :-
    V_1 = test_bitset.make_singleton_set(V_3).

test_bitset.make_singleton_set(V_3) = pair.(V_4 - V_5) :-
    V_4 = tree_bitset.make_singleton_set(V_3),
    V_5 = set_ordlist.make_singleton_set(V_3).

test_bitset.set_to_bitset(V_3) = pair.(V_4 - V_5) :-
    set.to_sorted_list(V_3, V_6),
    V_7 = pair.(V_4 - V_5) : pair.pair(tree_bitset.tree_bitset(T_1), set_ordlist.set_ordlist(T_1)),
    V_7 = test_bitset.sorted_list_to_set(V_6).

test_bitset.singleton_set(V_1, V_3) :-
    V_1 = test_bitset.singleton_set(V_3).

test_bitset.singleton_set(V_3) = pair.(V_4 - V_5) :-
    V_4 = tree_bitset.make_singleton_set(V_3),
    V_5 = set_ordlist.make_singleton_set(V_3).

test_bitset.sorted_list_to_set(V_3, V_2) :-
    V_2 = test_bitset.sorted_list_to_set(V_3).

test_bitset.to_set(V_3) = V_2 :-
    V_2 = test_bitset.bitset_to_set(V_3).

test_bitset.to_sorted_list(V_3, V_2) :-
    V_2 = test_bitset.to_sorted_list(V_3).

test_bitset.union(V_4, V_5, V_3) :-
    V_3 = test_bitset.union(V_4, V_5).

test_bitset.union_list(V_3, V_2) :-
    V_2 = test_bitset.union_list(V_3).

:- pragma termination_info(test_bitset.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(test_bitset.bitset_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(test_bitset.count((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.delete((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.delete_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.difference((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.difference((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(test_bitset.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.foldl(((func((builtin.in), (builtin.in)) = (builtin.out) is det) >> (func((builtin.in), (builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.from_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.init((builtin.out)), infinite, can_loop).
:- pragma termination_info((test_bitset.init) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.insert((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.insert_new((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.intersect((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.intersect((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.intersect_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.intersect_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.is_empty((builtin.in)), finite(0, [no, no]), can_loop).
:- pragma termination_info(test_bitset.is_non_empty((builtin.in)), finite(0, [no, no]), can_loop).
:- pragma termination_info(test_bitset.is_singleton((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.make_singleton_set((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(test_bitset.make_singleton_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(test_bitset.member((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(test_bitset.remove((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.remove_least((builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.remove_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.set_to_bitset((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.singleton_set((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(test_bitset.singleton_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.sorted_list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.sorted_list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(test_bitset.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(test_bitset.to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.to_sorted_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.to_sorted_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.union((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.union((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(test_bitset.union_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(test_bitset.union_list((builtin.in)) = (builtin.out), infinite, can_loop).

:- pragma exceptions(predicate, (test_bitset.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.bitset_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.contains), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.count), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.difference), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.difference), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.divide), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.divide_by_set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.equal), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.from_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.init), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.init), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.insert), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.insert_new), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.intersect_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.intersect_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.is_empty), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.is_non_empty), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.is_singleton), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.make_singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.make_singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.member), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.member), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.remove_least), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.set_to_bitset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.subset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.superset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (test_bitset.union_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (test_bitset.union_list), 2, 0, may_throw(user_exception)).
