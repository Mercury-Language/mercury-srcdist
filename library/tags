 array2d(T	array2d.m	/^:- func ( array2d(T) ^ elem(int, int) := T  ) = array2d(T).$/;kq|/^\< array2d(T\>/;'q;"	kind:func
 array2d(T	array2d.m	/^:- func ( array2d(T) ^ unsafe_elem(int, int) := T  ) = array2d(T).$/;kq|/^\< array2d(T\>/;'q;"	kind:func
 version_array2d(T	version_array2d.m	/^:- func ( version_array2d(T) ^ elem(int, int) := T  ) = version_array2d(T).$/;kq|/^\< version_array2d(T\>/;'q;"	kind:func
 version_store(S	version_store.m	/^:- func ( version_store(S) ^ elem(mutvar(T, S)) := T ) = version_store(S).$/;kq|/^\< version_store(S\>/;'q;"	kind:func
'+'	integer.m	/^:- func '+'(integer) = integer.$/;kq|/^\<'+'\>/;'q;"	kind:func
'+'	rational.m	/^:- func '+'(rational) = rational.$/;kq|/^\<'+'\>/;'q;"	kind:func
'-'	integer.m	/^:- func '-'(integer) = integer.$/;kq|/^\<'-'\>/;'q;"	kind:func
'-'	rational.m	/^:- func '-'(rational) = rational.$/;kq|/^\<'-'\>/;'q;"	kind:func
'<'	integer.m	/^:- pred '<'(integer::in, integer::in) is semidet.$/;kq|/^\<'<'\>/;'q;"	kind:pred
'<'	rational.m	/^:- pred '<'(rational::in, rational::in) is semidet.$/;kq|/^\<'<'\>/;'q;"	kind:pred
'=<'	integer.m	/^:- pred '=<'(integer::in, integer::in) is semidet.$/;kq|/^\<'=<'\>/;'q;"	kind:pred
'=<'	rational.m	/^:- pred '=<'(rational::in, rational::in) is semidet.$/;kq|/^\<'=<'\>/;'q;"	kind:pred
'>'	integer.m	/^:- pred '>'(integer::in, integer::in) is semidet.$/;kq|/^\<'>'\>/;'q;"	kind:pred
'>'	rational.m	/^:- pred '>'(rational::in, rational::in) is semidet.$/;kq|/^\<'>'\>/;'q;"	kind:pred
'>='	integer.m	/^:- pred '>='(integer::in, integer::in) is semidet.$/;kq|/^\<'>='\>/;'q;"	kind:pred
'>='	rational.m	/^:- pred '>='(rational::in, rational::in) is semidet.$/;kq|/^\<'>='\>/;'q;"	kind:pred
'DOC'	pprint.m	/^    ;       'DOC'(int, univ).$/;kq|-;/\<'DOC'\>/;'q;"	kind:cons	file:
'GROUP'	pprint.m	/^    ;       'GROUP'(doc)$/;kq|-;/\<'GROUP'\>/;'q;"	kind:cons	file:
'LABEL'	pprint.m	/^    ;       'LABEL'(string, doc)$/;kq|-;/\<'LABEL'\>/;'q;"	kind:cons	file:
'LINE'	pprint.m	/^    ;       'LINE'$/;kq|-;/\<'LINE'\>/;'q;"	kind:cons	file:
'NEST'	pprint.m	/^    ;       'NEST'(int, doc)$/;kq|-;/\<'NEST'\>/;'q;"	kind:cons	file:
'NIL'	pprint.m	/^    --->    'NIL'$/;kq|-;/\<'NIL'\>/;'q;"	kind:cons	file:
'SEQ'	pprint.m	/^    ;       'SEQ'(doc, doc)$/;kq|-;/\<'SEQ'\>/;'q;"	kind:cons	file:
'TEXT'	pprint.m	/^    ;       'TEXT'(string)$/;kq|-;/\<'TEXT'\>/;'q;"	kind:cons	file:
'det_elem	map.m	/^:- func 'det_elem :='(K, map(K, V), V) = map(K, V).$/;kq|/^\<'det_elem\>/;'q;"	kind:func
'elem	array.m	/^:- func 'elem :='(int, array(T), T) = array(T).$/;kq|/^\<'elem\>/;'q;"	kind:func
'elem	bt_array.m	/^:- func 'elem :='(int, bt_array(T), T) = bt_array(T).$/;kq|/^\<'elem\>/;'q;"	kind:func
'elem	hash_table.m	/^:- func 'elem :='(K, hash_table(K, V), V) = hash_table(K, V).$/;kq|/^\<'elem\>/;'q;"	kind:func
'elem	map.m	/^:- func 'elem :='(K, map(K, V), V) = map(K, V).$/;kq|/^\<'elem\>/;'q;"	kind:func
'elem	robdd.m	/^:- func 'elem :='(var(T), imp_res(T), vars_entailed_result(T)) = imp_res(T).$/;kq|/^\<'elem\>/;'q;"	kind:func	file:
'elem	version_hash_table.m	/^:- func 'elem :='(K, version_hash_table(K, V), V) = version_hash_table(K, V).$/;kq|/^\<'elem\>/;'q;"	kind:func
'num_bits	bitmap.m	/^:- func 'num_bits :='(bitmap, num_bits) = bitmap.$/;kq|/^\<'num_bits\>/;'q;"	kind:func	file:
'unsafe_elem	array.m	/^:- func 'unsafe_elem :='(int, array(T), T) = array(T).$/;kq|/^\<'unsafe_elem\>/;'q;"	kind:func
+	float.m	/^:- func + (float::in) = (float::uo) is det.$/;kq|/^\<+\>/;'q;"	kind:func
+	int.m	/^:- func + (int::in) = (int::uo) is det.$/;kq|/^\<+\>/;'q;"	kind:func
-	float.m	/^:- func - (float::in) = (float::uo) is det.$/;kq|/^\<-\>/;'q;"	kind:func
-	int.m	/^:- func - (int::in) = (int::uo) is det.$/;kq|/^\<-\>/;'q;"	kind:func
<	builtin.m	/^    ;       (<)$/;kq|-;/\<<\>/;'q;"	kind:cons
=	builtin.m	/^    --->    (=)$/;kq|-;/\<=\>/;'q;"	kind:cons
>	builtin.m	/^    ;       (>).$/;kq|-;/\<>\>/;'q;"	kind:cons
K	tree234.m	/^    --->    (K -> V).$/;kq|-;/\<K\>/;'q;"	kind:cons	file:
T	builtin.m	/^:- pred T  @<  T.$/;kq|/^\<T\>/;'q;"	kind:pred
T	builtin.m	/^:- pred T  @=<  T.$/;kq|/^\<T\>/;'q;"	kind:pred
T	builtin.m	/^:- pred T  @>  T.$/;kq|/^\<T\>/;'q;"	kind:pred
T	builtin.m	/^:- pred T  @>=  T.$/;kq|/^\<T\>/;'q;"	kind:pred
T	prolog.m	/^:- pred T =.. univ_result.$/;kq|/^\<T\>/;'q;"	kind:pred
T	prolog.m	/^:- pred T =:= T.            % In Mercury, just use =$/;kq|/^\<T\>/;'q;"	kind:pred
T	prolog.m	/^:- pred T == T.             % In Mercury, just use =$/;kq|/^\<T\>/;'q;"	kind:pred
T	prolog.m	/^:- pred T =\\= T.            % In Mercury, just use \\=$/;kq|/^\<T\>/;'q;"	kind:pred
T	prolog.m	/^:- pred T \\== T.            % In Mercury, just use \\=$/;kq|/^\<T\>/;'q;"	kind:pred
T	robdd.m	/^    func T `intersection` T = T$/;kq|-;/\<T\>/;'q;"	kind:tcm	file:
T1	pair.m	/^    --->    (T1 - T2).$/;kq|-;/\<T1\>/;'q;"	kind:cons
T1	pprint.m	/^:- func T1 ++ T2 = doc <= (doc(T1), doc(T2)).$/;kq|/^\<T1\>/;'q;"	kind:func
V,	robdd.m	/^        leader_to_eqvclass(map.foldl((func(V, VsA, M) =$/;kq|-;/\<V,\>/;'q;"	kind:tcim	file:
[T	list.m	/^    ;       [T | list(T)].$/;kq|-;/\<[T\>/;'q;"	kind:cons
[]	exception.m	/^:- inst [] ---> [].$/;kq|-;/\<[]\>/;'q;"	kind:inst
[]	list.m	/^    --->    []$/;kq|-;/\<[]\>/;'q;"	kind:cons
\	int.m	/^:- func \\ (int::in) = (int::uo) is det.$/;kq|/^\<\\>/;'q;"	kind:func
\	integer.m	/^:- func \\ integer = integer.$/;kq|/^\<\\>/;'q;"	kind:func
abs	float.m	/^:- func abs(float) = float.$/;kq|/^\<abs\>/;'q;"	kind:func
abs	int.m	/^:- func int.abs(int) = int.$/;kq|/^\<int.abs\>/;'q;"	kind:func
abs	int.m	/^:- pred int.abs(int::in, int::out) is det.$/;kq|/^\<int.abs\>/;'q;"	kind:pred
abs	integer.m	/^:- func integer.abs(integer) = integer.$/;kq|/^\<integer.abs\>/;'q;"	kind:func
abs	rational.m	/^:- func rational.abs(rational) = rational.$/;kq|/^\<rational.abs\>/;'q;"	kind:func
access_type	io.m	/^:- type io.access_type$/;kq|-;/\<access_type\>/;'q;"	kind:type
access_types_includes_execute	io.m	/^:- pred access_types_includes_execute(list(access_type)::in) is semidet.$/;kq|/^\<access_types_includes_execute\>/;'q;"	kind:pred	file:
access_types_includes_read	io.m	/^:- pred access_types_includes_read(list(access_type)::in) is semidet.$/;kq|/^\<access_types_includes_read\>/;'q;"	kind:pred	file:
access_types_includes_write	io.m	/^:- pred access_types_includes_write(list(access_type)::in) is semidet.$/;kq|/^\<access_types_includes_write\>/;'q;"	kind:pred	file:
accumulate_digraph_key_set	digraph.m	/^:- pred accumulate_digraph_key_set(key_map(T)::in, digraph_key(T)::in,$/;kq|/^\<accumulate_digraph_key_set\>/;'q;"	kind:pred	file:
accumulate_int	string.m	/^:- pred accumulate_int(int::in, char::in, int::in, int::out) is semidet.$/;kq|/^\<accumulate_int\>/;'q;"	kind:pred	file:
accumulate_integer	integer.m	/^:- pred accumulate_integer(integer::in, char::in, integer::in, integer::out)$/;kq|/^\<accumulate_integer\>/;'q;"	kind:pred	file:
accumulate_negative_int	string.m	/^:- pred accumulate_negative_int(int::in, char::in,$/;kq|/^\<accumulate_negative_int\>/;'q;"	kind:pred	file:
accumulate_rev_lookup	digraph.m	/^:- pred accumulate_rev_lookup(bimap(T, digraph_key(T))::in, T::in,$/;kq|/^\<accumulate_rev_lookup\>/;'q;"	kind:pred	file:
accumulate_with_key	digraph.m	/^:- pred accumulate_with_key(digraph_key(T)::in, digraph_key(T)::in,$/;kq|/^\<accumulate_with_key\>/;'q;"	kind:pred	file:
accumulating	getopt.m	/^    ;       accumulating(list(string))$/;kq|-;/\<accumulating\>/;'q;"	kind:cons
accumulating	getopt_io.m	/^    ;       accumulating(list(string))$/;kq|-;/\<accumulating\>/;'q;"	kind:cons
acos	math.m	/^:- func math.acos(float) = float.$/;kq|/^\<math.acos\>/;'q;"	kind:func
action_alpha_lower	lexer.m	/^    ;       action_alpha_lower$/;kq|-;/\<action_alpha_lower\>/;'q;"	kind:cons	file:
action_alpha_upper_uscore	lexer.m	/^    ;       action_alpha_upper_uscore$/;kq|-;/\<action_alpha_upper_uscore\>/;'q;"	kind:cons	file:
action_backquote	lexer.m	/^    ;       action_backquote$/;kq|-;/\<action_backquote\>/;'q;"	kind:cons	file:
action_dollar	lexer.m	/^    ;       action_dollar$/;kq|-;/\<action_dollar\>/;'q;"	kind:cons	file:
action_dot	lexer.m	/^    ;       action_dot$/;kq|-;/\<action_dot\>/;'q;"	kind:cons	file:
action_graphic_token	lexer.m	/^    ;       action_graphic_token.$/;kq|-;/\<action_graphic_token\>/;'q;"	kind:cons	file:
action_hash	lexer.m	/^    ;       action_hash$/;kq|-;/\<action_hash\>/;'q;"	kind:cons	file:
action_nonzero_digit	lexer.m	/^    ;       action_nonzero_digit$/;kq|-;/\<action_nonzero_digit\>/;'q;"	kind:cons	file:
action_percent	lexer.m	/^    ;       action_percent$/;kq|-;/\<action_percent\>/;'q;"	kind:cons	file:
action_quote	lexer.m	/^    ;       action_quote$/;kq|-;/\<action_quote\>/;'q;"	kind:cons	file:
action_slash	lexer.m	/^    ;       action_slash$/;kq|-;/\<action_slash\>/;'q;"	kind:cons	file:
action_special_token	lexer.m	/^    ;       action_special_token$/;kq|-;/\<action_special_token\>/;'q;"	kind:cons	file:
action_whitespace	lexer.m	/^    --->    action_whitespace$/;kq|-;/\<action_whitespace\>/;'q;"	kind:cons	file:
action_zero	lexer.m	/^    ;       action_zero$/;kq|-;/\<action_zero\>/;'q;"	kind:cons	file:
actual_position	bt_array.m	/^:- pred actual_position(int::in, int::in, int::in, int::out) is det.$/;kq|/^\<actual_position\>/;'q;"	kind:pred	file:
add	multi_map.m	/^:- func multi_map.add(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.add\>/;'q;"	kind:func
add	multi_map.m	/^:- pred multi_map.add(K::in, V::in,$/;kq|/^\<multi_map.add\>/;'q;"	kind:pred
add_alternatives	dir.m	/^:- func add_alternatives(list(list(char)), list(char)) = list(list(char)).$/;kq|/^\<add_alternatives\>/;'q;"	kind:func	file:
add_assoc_list	digraph.m	/^:- func digraph.add_assoc_list(assoc_list(digraph_key(T), digraph_key(T)),$/;kq|/^\<digraph.add_assoc_list\>/;'q;"	kind:func
add_assoc_list	digraph.m	/^:- pred digraph.add_assoc_list(assoc_list(digraph_key(T), digraph_key(T))::in,$/;kq|/^\<digraph.add_assoc_list\>/;'q;"	kind:pred
add_cartesian_product	digraph.m	/^:- pred digraph.add_cartesian_product(digraph_key_set(T)::in,$/;kq|/^\<digraph.add_cartesian_product\>/;'q;"	kind:pred	file:
add_char_at_end	dir.m	/^:- func add_char_at_end(char, list(char)) = list(char).$/;kq|/^\<add_char_at_end\>/;'q;"	kind:func	file:
add_composition_edges	digraph.m	/^:- pred add_composition_edges(key_map(T)::in, key_map(T)::in,$/;kq|/^\<add_composition_edges\>/;'q;"	kind:pred	file:
add_duration	calendar.m	/^:- pred add_duration(duration::in, date::in, date::out) is det.$/;kq|/^\<add_duration\>/;'q;"	kind:pred
add_duration_loop	calendar.m	/^:- pred add_duration_loop(duration::in, date::in, date::in, date::out) is det.$/;kq|/^\<add_duration_loop\>/;'q;"	kind:pred	file:
add_edge	digraph.m	/^:- func digraph.add_edge(digraph_key(T), digraph_key(T), digraph(T)) =$/;kq|/^\<digraph.add_edge\>/;'q;"	kind:func
add_edge	digraph.m	/^:- pred digraph.add_edge(digraph_key(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.add_edge\>/;'q;"	kind:pred
add_element	eqvclass.m	/^:- pred eqvclass.add_element(T::in, partition_id::out,$/;kq|/^\<eqvclass.add_element\>/;'q;"	kind:pred	file:
add_elements	bt_array.m	/^:- pred add_elements(int::in, T::in, ra_list(T)::in, ra_list(T)::out) is det.$/;kq|/^\<add_elements\>/;'q;"	kind:pred	file:
add_equivalence	eqvclass.m	/^:- pred eqvclass.add_equivalence(partition_id::in, partition_id::in,$/;kq|/^\<eqvclass.add_equivalence\>/;'q;"	kind:pred	file:
add_equivalences	robdd.m	/^:- func add_equivalences(equiv_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<add_equivalences\>/;'q;"	kind:func
add_equivalences_2	robdd.m	/^:- pred add_equivalences_2(assoc_list(var(T))::in, vars(T)::in,$/;kq|/^\<add_equivalences_2\>/;'q;"	kind:pred	file:
add_escaped_char	term_io.m	/^:- func term_io.add_escaped_char(char, list(string)) = list(string).$/;kq|/^\<term_io.add_escaped_char\>/;'q;"	kind:func	file:
add_float_prefix_if_needed	string.m	/^:- func add_float_prefix_if_needed(flags, bool, float, string) = string.$/;kq|/^\<add_float_prefix_if_needed\>/;'q;"	kind:func	file:
add_implications	robdd.m	/^:- func add_implications(imp_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<add_implications\>/;'q;"	kind:func
add_implications_2	robdd.m	/^:- func add_implications_2(func(var(T)) = robdd(T), func(var(T)) = robdd(T),$/;kq|/^\<add_implications_2\>/;'q;"	kind:func	file:
add_int_prefix_if_needed	string.m	/^:- func add_int_prefix_if_needed(flags, bool, int, string) = string.$/;kq|/^\<add_int_prefix_if_needed\>/;'q;"	kind:func	file:
add_pairs	integer.m	/^:- pred add_pairs(digit::out, integer::in, integer::in,$/;kq|/^\<add_pairs\>/;'q;"	kind:pred	file:
add_pairs_equal	integer.m	/^:- pred add_pairs_equal(digit::out, list(digit)::in, list(digit)::in,$/;kq|/^\<add_pairs_equal\>/;'q;"	kind:pred	file:
add_parens_if_needed	pretty_printer.m	/^:- func add_parens_if_needed(ops.priority, ops.priority, doc) = doc.$/;kq|/^\<add_parens_if_needed\>/;'q;"	kind:func	file:
add_revstring	string.m	/^:- pred add_revstring(string::in, revstrings::in, revstrings::out) is det.$/;kq|/^\<add_revstring\>/;'q;"	kind:pred	file:
add_var	parser.m	/^:- pred add_var(string::in, var(T)::out,$/;kq|/^\<add_var\>/;'q;"	kind:pred	file:
add_vertex	digraph.m	/^:- pred digraph.add_vertex(T::in, digraph_key(T)::out,$/;kq|/^\<digraph.add_vertex\>/;'q;"	kind:pred
add_vertex_pair	digraph.m	/^:- func digraph.add_vertex_pair(pair(T), digraph(T)) = digraph(T).$/;kq|/^\<digraph.add_vertex_pair\>/;'q;"	kind:func
add_vertex_pair	digraph.m	/^:- pred digraph.add_vertex_pair(pair(T)::in,$/;kq|/^\<digraph.add_vertex_pair\>/;'q;"	kind:pred
add_vertices_and_edge	digraph.m	/^:- func digraph.add_vertices_and_edge(T, T, digraph(T)) = digraph(T).$/;kq|/^\<digraph.add_vertices_and_edge\>/;'q;"	kind:func
add_vertices_and_edge	digraph.m	/^:- pred digraph.add_vertices_and_edge(T::in, T::in,$/;kq|/^\<digraph.add_vertices_and_edge\>/;'q;"	kind:pred
adjacent_to_graphic_token	term_io.m	/^:- type adjacent_to_graphic_token$/;kq|-;/\<adjacent_to_graphic_token\>/;'q;"	kind:type
adjust_priority	pretty_printer.m	/^:- func adjust_priority(ops.priority, ops.assoc) = ops.priority.$/;kq|/^\<adjust_priority\>/;'q;"	kind:func	file:
adjust_priority	string.m	/^:- pred adjust_priority(ops.priority::in, ops.assoc::in, ops.priority::out)$/;kq|/^\<adjust_priority\>/;'q;"	kind:pred	file:
adjust_priority_for_assoc	ops.m	/^:- pred adjust_priority_for_assoc(ops.priority::in, ops.assoc::in,$/;kq|/^\<adjust_priority_for_assoc\>/;'q;"	kind:pred
aggregate	solutions.m	/^:- func aggregate(pred(T), func(T, U) = U, U) = U.$/;kq|/^\<aggregate\>/;'q;"	kind:func
aggregate	solutions.m	/^:- pred aggregate(pred(T), pred(T, U, U), U, U).$/;kq|/^\<aggregate\>/;'q;"	kind:pred
aggregate2	solutions.m	/^:- pred aggregate2(pred(T), pred(T, U, U, V, V), U, U, V, V).$/;kq|/^\<aggregate2\>/;'q;"	kind:pred
alist_remove	hash_table.m	/^:- pred alist_remove(hash_table_alist(K, V)::in, K::in,$/;kq|/^\<alist_remove\>/;'q;"	kind:pred	file:
alist_remove	version_hash_table.m	/^:- pred alist_remove(hash_table_alist(K, V)::in, K::in,$/;kq|/^\<alist_remove\>/;'q;"	kind:pred	file:
alist_replace	hash_table.m	/^:- pred alist_replace(hash_table_alist(K, V)::in, K::in, V::in,$/;kq|/^\<alist_replace\>/;'q;"	kind:pred	file:
alist_replace	version_hash_table.m	/^:- pred alist_replace(hash_table_alist(K, V)::in, K::in, V::in,$/;kq|/^\<alist_replace\>/;'q;"	kind:pred	file:
alist_search	hash_table.m	/^:- pred alist_search(hash_table_alist(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<alist_search\>/;'q;"	kind:pred	file:
alist_search	version_hash_table.m	/^:- pred alist_search(hash_table_alist(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<alist_search\>/;'q;"	kind:pred	file:
all_attr_sources	term_to_xml.m	/^:- func all_attr_sources = list(attr_from_source).$/;kq|/^\<all_attr_sources\>/;'q;"	kind:func	file:
all_count	multi_map.m	/^:- func multi_map.all_count(multi_map(K, V)) = int.$/;kq|/^\<multi_map.all_count\>/;'q;"	kind:func
all_count	multi_map.m	/^:- pred multi_map.all_count(multi_map(K, V)::in, int::out) is det.$/;kq|/^\<multi_map.all_count\>/;'q;"	kind:pred
all_empty	string.m	/^:- pred all_empty(list(list(string))::in) is semidet.$/;kq|/^\<all_empty\>/;'q;"	kind:pred	file:
all_false	array.m	/^:- pred array.all_false(pred(T), array(T)).$/;kq|/^\<array.all_false\>/;'q;"	kind:pred
all_false	list.m	/^:- pred list.all_false(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.all_false\>/;'q;"	kind:pred
all_false	version_array.m	/^:- pred all_false(pred(T)::in(pred(in) is semidet), version_array(T)::in)$/;kq|/^\<all_false\>/;'q;"	kind:pred
all_false_corresponding	list.m	/^:- pred list.all_false_corresponding(pred(X, Y)::in(pred(in, in) is semidet),$/;kq|/^\<list.all_false_corresponding\>/;'q;"	kind:pred
all_match	string.m	/^:- pred string.all_match(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.all_match\>/;'q;"	kind:pred
all_match_2	string.m	/^:- pred all_match_2(pred(char)::in(pred(in) is semidet), string::in, int::in)$/;kq|/^\<all_match_2\>/;'q;"	kind:pred	file:
all_members	set_tree234.m	/^:- pred set_tree234.all_members(set_tree234(T)::in, T::out) is nondet.$/;kq|/^\<set_tree234.all_members\>/;'q;"	kind:pred	file:
all_same	list.m	/^:- pred list.all_same(list(T)::in) is semidet.$/;kq|/^\<list.all_same\>/;'q;"	kind:pred
all_same_2	list.m	/^:- pred list.all_same_2(T::in, list(T)::in) is semidet.$/;kq|/^\<list.all_same_2\>/;'q;"	kind:pred	file:
all_true	array.m	/^:- pred array.all_true(pred(T), array(T)).$/;kq|/^\<array.all_true\>/;'q;"	kind:pred
all_true	fat_sparse_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), fat_sparse_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	list.m	/^:- pred list.all_true(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.all_true\>/;'q;"	kind:pred
all_true	set.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), set(T)::in) is semidet.$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	set_bbbtree.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), set_bbbtree(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	set_ctree234.m	/^:- pred set_ctree234.all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.all_true\>/;'q;"	kind:pred
all_true	set_ordlist.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), set_ordlist(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	set_tree234.m	/^:- pred set_tree234.all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.all_true\>/;'q;"	kind:pred
all_true	set_unordlist.m	/^:- pred set_unordlist.all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.all_true\>/;'q;"	kind:pred
all_true	sparse_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), sparse_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	test_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), test_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	tree_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), tree_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true	version_array.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), version_array(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
all_true_bits	fat_sparse_bitset.m	/^:- pred all_true_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<all_true_bits\>/;'q;"	kind:pred	file:
all_true_bits	sparse_bitset.m	/^:- pred all_true_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<all_true_bits\>/;'q;"	kind:pred	file:
all_true_bits	tree_bitset.m	/^:- pred all_true_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<all_true_bits\>/;'q;"	kind:pred	file:
all_true_corresponding	list.m	/^:- pred list.all_true_corresponding(pred(X, Y)::in(pred(in, in) is semidet),$/;kq|/^\<list.all_true_corresponding\>/;'q;"	kind:pred
all_true_node	fat_sparse_bitset.m	/^:- pred all_true_node(pred(T)::in(pred(in) is semidet), fat_bitset_impl::in)$/;kq|/^\<all_true_node\>/;'q;"	kind:pred	file:
all_true_node	sparse_bitset.m	/^:- pred all_true_node(pred(T)::in(pred(in) is semidet), bitset_impl::in)$/;kq|/^\<all_true_node\>/;'q;"	kind:pred	file:
all_true_tree	set_ctree234.m	/^:- pred set_ctree234.all_true_tree(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.all_true_tree\>/;'q;"	kind:pred	file:
all_vars	robdd.m	/^    --->    all_vars$/;kq|-;/\<all_vars\>/;'q;"	kind:cons
alloc_buffer	io.m	/^:- pred io.alloc_buffer(int::in, buffer::buffer_uo) is det.$/;kq|/^\<io.alloc_buffer\>/;'q;"	kind:pred	file:
allocate	counter.m	/^:- pred counter.allocate(int::out, counter::in, counter::out) is det.$/;kq|/^\<counter.allocate\>/;'q;"	kind:pred
allocate_bitmap	bitmap.m	/^:- func allocate_bitmap(num_bits) = bitmap.$/;kq|/^\<allocate_bitmap\>/;'q;"	kind:func	file:
allocate_key	digraph.m	/^:- pred allocate_key(digraph_key(T)::out, digraph(T)::in, digraph(T)::out)$/;kq|/^\<allocate_key\>/;'q;"	kind:pred	file:
allowed_unicode_char_code	lexer.m	/^:- pred allowed_unicode_char_code(int::in) is semidet.$/;kq|/^\<allowed_unicode_char_code\>/;'q;"	kind:pred	file:
alt_directory_separator	dir.m	/^:- func dir.alt_directory_separator = char.$/;kq|/^\<dir.alt_directory_separator\>/;'q;"	kind:func	file:
and	bool.m	/^:- func bool.and(bool, bool) = bool.$/;kq|/^\<bool.and\>/;'q;"	kind:func
and	bool.m	/^:- pred bool.and(bool::in, bool::in, bool::out) is det.$/;kq|/^\<bool.and\>/;'q;"	kind:pred
and_list	bool.m	/^:- func bool.and_list(list(bool)) = bool.$/;kq|/^\<bool.and_list\>/;'q;"	kind:func
and_list	bool.m	/^:- pred bool.and_list(list(bool)::in, bool::out) is det.$/;kq|/^\<bool.and_list\>/;'q;"	kind:pred
and_not_pairs	integer.m	/^:- func and_not_pairs(integer, integer) = integer.$/;kq|/^\<and_not_pairs\>/;'q;"	kind:func	file:
and_not_pairs_equal	integer.m	/^:- func and_not_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<and_not_pairs_equal\>/;'q;"	kind:func	file:
and_pairs	integer.m	/^:- func and_pairs(integer, integer) = integer.$/;kq|/^\<and_pairs\>/;'q;"	kind:func	file:
and_pairs_equal	integer.m	/^:- func and_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<and_pairs_equal\>/;'q;"	kind:func	file:
append	array.m	/^:- func array.append(array(T)::in, array(T)::in) = (array(T)::array_uo) is det.$/;kq|/^\<array.append\>/;'q;"	kind:func
append	io.m	/^    ;       append.$/;kq|-;/\<append\>/;'q;"	kind:cons
append	list.m	/^:- func list.append(list(T), list(T)) = list(T).$/;kq|/^\<list.append\>/;'q;"	kind:func
append	list.m	/^:- pred list.append(list(T), list(T), list(T)).$/;kq|/^\<list.append\>/;'q;"	kind:pred
append	string.m	/^:- func string.append(string::in, string::in) = (string::uo) is det.$/;kq|/^\<string.append\>/;'q;"	kind:func
append	string.m	/^:- pred string.append(string, string, string).$/;kq|/^\<string.append\>/;'q;"	kind:pred
append_iii	string.m	/^:- pred string.append_iii(string::in, string::in, string::in) is semidet.$/;kq|/^\<string.append_iii\>/;'q;"	kind:pred	file:
append_iio	string.m	/^:- pred string.append_iio(string::in, string::in, string::uo) is det.$/;kq|/^\<string.append_iio\>/;'q;"	kind:pred	file:
append_ioi	string.m	/^:- pred string.append_ioi(string::in, string::uo, string::in) is semidet.$/;kq|/^\<string.append_ioi\>/;'q;"	kind:pred	file:
append_list	bitmap.m	/^:- func append_list(list(bitmap)) = bitmap.$/;kq|/^\<append_list\>/;'q;"	kind:func
append_list	string.m	/^:- func string.append_list(list(string)::in) = (string::uo) is det.$/;kq|/^\<string.append_list\>/;'q;"	kind:func
append_list	string.m	/^:- pred string.append_list(list(string)::in, string::uo) is det.$/;kq|/^\<string.append_list\>/;'q;"	kind:pred
append_ooi	string.m	/^:- pred string.append_ooi(string::out, string::out, string::in) is multi.$/;kq|/^\<string.append_ooi\>/;'q;"	kind:pred	file:
append_ooi_2	string.m	/^:- pred string.append_ooi_2(int::in, int::in, string::out, string::out,$/;kq|/^\<string.append_ooi_2\>/;'q;"	kind:pred	file:
append_ooi_3	string.m	/^:- pred string.append_ooi_3(int::in, int::in, string::out,$/;kq|/^\<string.append_ooi_3\>/;'q;"	kind:pred	file:
append_suffix_until_unique	varset.m	/^:- pred append_suffix_until_unique(string::in, string::in, set(string)::in,$/;kq|/^\<append_suffix_until_unique\>/;'q;"	kind:pred	file:
apply_forward_map_to_list	bimap.m	/^:- func bimap.apply_forward_map_to_list(bimap(K, V), list(K)) = list(V).$/;kq|/^\<bimap.apply_forward_map_to_list\>/;'q;"	kind:func
apply_forward_map_to_list	bimap.m	/^:- pred bimap.apply_forward_map_to_list(bimap(K, V)::in, list(K)::in,$/;kq|/^\<bimap.apply_forward_map_to_list\>/;'q;"	kind:pred
apply_forward_map_to_list	injection.m	/^:- func injection.apply_forward_map_to_list(injection(K, V), list(K)) =$/;kq|/^\<injection.apply_forward_map_to_list\>/;'q;"	kind:func
apply_forward_map_to_list	injection.m	/^:- pred injection.apply_forward_map_to_list(injection(K, V)::in, list(K)::in,$/;kq|/^\<injection.apply_forward_map_to_list\>/;'q;"	kind:pred
apply_rec_substitution	term.m	/^:- func apply_rec_substitution(term(T), substitution(T)) = term(T).$/;kq|/^\<apply_rec_substitution\>/;'q;"	kind:func
apply_rec_substitution	term.m	/^:- pred apply_rec_substitution(term(T)::in, substitution(T)::in,$/;kq|/^\<apply_rec_substitution\>/;'q;"	kind:pred
apply_rec_substitution_to_list	term.m	/^:- func apply_rec_substitution_to_list(list(term(T)),$/;kq|/^\<apply_rec_substitution_to_list\>/;'q;"	kind:func
apply_rec_substitution_to_list	term.m	/^:- pred apply_rec_substitution_to_list(list(term(T))::in,$/;kq|/^\<apply_rec_substitution_to_list\>/;'q;"	kind:pred
apply_reverse_map_to_list	bimap.m	/^:- func bimap.apply_reverse_map_to_list(bimap(K, V), list(V)) = list(K).$/;kq|/^\<bimap.apply_reverse_map_to_list\>/;'q;"	kind:func
apply_reverse_map_to_list	bimap.m	/^:- pred bimap.apply_reverse_map_to_list(bimap(K, V)::in, list(V)::in,$/;kq|/^\<bimap.apply_reverse_map_to_list\>/;'q;"	kind:pred
apply_reverse_map_to_list	injection.m	/^:- func injection.apply_reverse_map_to_list(injection(K, V), list(V)) =$/;kq|/^\<injection.apply_reverse_map_to_list\>/;'q;"	kind:func
apply_reverse_map_to_list	injection.m	/^:- pred injection.apply_reverse_map_to_list(injection(K, V)::in, list(V)::in,$/;kq|/^\<injection.apply_reverse_map_to_list\>/;'q;"	kind:pred
apply_substitution	term.m	/^:- func apply_substitution(term(T), substitution(T)) = term(T).$/;kq|/^\<apply_substitution\>/;'q;"	kind:func
apply_substitution	term.m	/^:- pred apply_substitution(term(T)::in, substitution(T)::in,$/;kq|/^\<apply_substitution\>/;'q;"	kind:pred
apply_substitution_to_list	term.m	/^:- func apply_substitution_to_list(list(term(T)),$/;kq|/^\<apply_substitution_to_list\>/;'q;"	kind:func
apply_substitution_to_list	term.m	/^:- pred apply_substitution_to_list(list(term(T))::in,$/;kq|/^\<apply_substitution_to_list\>/;'q;"	kind:pred
apply_to_list	map.m	/^:- func map.apply_to_list(list(K), map(K, V)) = list(V).$/;kq|/^\<map.apply_to_list\>/;'q;"	kind:func
apply_to_list	map.m	/^:- pred map.apply_to_list(list(K)::in, map(K, V)::in, list(V)::out) is det.$/;kq|/^\<map.apply_to_list\>/;'q;"	kind:pred
apply_to_list	multi_map.m	/^:- func multi_map.apply_to_list(list(K), multi_map(K, V)) = list(V).$/;kq|/^\<multi_map.apply_to_list\>/;'q;"	kind:func
apply_to_list	multi_map.m	/^:- pred multi_map.apply_to_list(list(K)::in, multi_map(K, V)::in,$/;kq|/^\<multi_map.apply_to_list\>/;'q;"	kind:pred
apply_variable_renaming	term.m	/^:- func apply_variable_renaming(term(T), map(var(T), var(T))) = term(T).$/;kq|/^\<apply_variable_renaming\>/;'q;"	kind:func
apply_variable_renaming	term.m	/^:- pred apply_variable_renaming(term(T)::in, map(var(T), var(T))::in,$/;kq|/^\<apply_variable_renaming\>/;'q;"	kind:pred
apply_variable_renaming_to_list	term.m	/^:- func apply_variable_renaming_to_list(list(term(T)),$/;kq|/^\<apply_variable_renaming_to_list\>/;'q;"	kind:func
apply_variable_renaming_to_list	term.m	/^:- pred apply_variable_renaming_to_list(list(term(T))::in,$/;kq|/^\<apply_variable_renaming_to_list\>/;'q;"	kind:pred
apply_variable_renaming_to_var	term.m	/^:- func apply_variable_renaming_to_var(map(var(T), var(T)),$/;kq|/^\<apply_variable_renaming_to_var\>/;'q;"	kind:func
apply_variable_renaming_to_var	term.m	/^:- pred apply_variable_renaming_to_var(map(var(T), var(T))::in,$/;kq|/^\<apply_variable_renaming_to_var\>/;'q;"	kind:pred
apply_variable_renaming_to_vars	term.m	/^:- func apply_variable_renaming_to_vars(map(var(T), var(T)),$/;kq|/^\<apply_variable_renaming_to_vars\>/;'q;"	kind:func
apply_variable_renaming_to_vars	term.m	/^:- pred apply_variable_renaming_to_vars(map(var(T), var(T))::in,$/;kq|/^\<apply_variable_renaming_to_vars\>/;'q;"	kind:pred
approx_binary_search	array.m	/^:- pred array.approx_binary_search(array(T)::array_ui,$/;kq|/^\<array.approx_binary_search\>/;'q;"	kind:pred
approx_binary_search	array.m	/^:- pred array.approx_binary_search(comparison_func(T)::in, array(T)::array_ui,$/;kq|/^\<array.approx_binary_search\>/;'q;"	kind:pred
approx_binary_search_2	array.m	/^:- pred approx_binary_search_2(comparison_func(T)::in, array(T)::array_ui,$/;kq|/^\<approx_binary_search_2\>/;'q;"	kind:pred	file:
april	calendar.m	/^    ;       april$/;kq|-;/\<april\>/;'q;"	kind:cons
arg	deconstruct.m	/^:- some [ArgT] pred arg(T, noncanon_handling, int, ArgT).$/;kq|/^\<arg\>/;'q;"	kind:pred
arg	prolog.m	/^:- pred arg(int::in, T::in, univ::out) is semidet.$/;kq|/^\<arg\>/;'q;"	kind:pred
arg_cc	deconstruct.m	/^:- pred arg_cc(T::in, int::in, maybe_arg::out) is cc_multi.$/;kq|/^\<arg_cc\>/;'q;"	kind:pred
arg_context	term.m	/^    --->    arg_context($/;kq|-;/\<arg_context\>/;'q;"	kind:cons
arg_names	rtti_implementation.m	/^:- type arg_names ---> arg_names(c_pointer).$/;kq|-;/\<arg_names\>/;'q;"	kind:cons	file:
arg_names	rtti_implementation.m	/^:- type arg_names ---> arg_names(c_pointer).$/;kq|-;/\<arg_names\>/;'q;"	kind:type	file:
arg_names_index	rtti_implementation.m	/^:- func arg_names_index(arg_names, int) = string.$/;kq|/^\<arg_names_index\>/;'q;"	kind:func	file:
arg_priority	ops.m	/^    func ops.arg_priority(Table) = ops.priority$/;kq|-;/\<arg_priority\>/;'q;"	kind:tcm
arg_priority	ops.m	/^    func(ops.arg_priority\/1) is ops.mercury_arg_priority$/;kq|-;/\<arg_priority\>/;'q;"	kind:tcim	file:
arg_priority	stream.string_writer.m	/^:- pred arg_priority(int::out, State::di, State::uo) is det.$/;kq|/^\<arg_priority\>/;'q;"	kind:pred	file:
arg_ref	store.m	/^:- pred store.arg_ref(generic_ref(T, S)::in, int::in,$/;kq|/^\<store.arg_ref\>/;'q;"	kind:pred
arg_to_revstrings	string.m	/^:- pred arg_to_revstrings(noncanon_handling,$/;kq|/^\<arg_to_revstrings\>/;'q;"	kind:pred	file:
arg_type_info	erlang_rtti_implementation.m	/^:- func arg_type_info(ti_info(T), TypeInfo, int) = type_info.$/;kq|/^\<arg_type_info\>/;'q;"	kind:func	file:
arg_types	rtti_implementation.m	/^:- type arg_types ---> arg_types(c_pointer).$/;kq|-;/\<arg_types\>/;'q;"	kind:cons	file:
arg_types	rtti_implementation.m	/^:- type arg_types ---> arg_types(c_pointer).$/;kq|-;/\<arg_types\>/;'q;"	kind:type	file:
argument	parser.m	/^    ;       argument$/;kq|-;/\<argument\>/;'q;"	kind:cons	file:
arity	term_to_xml.m	/^    ;       arity.$/;kq|-;/\<arity\>/;'q;"	kind:cons
array	array.m	/^    --->    array.index_out_of_bounds(string).$/;kq|-;/\<array\>/;'q;"	kind:cons
array	array.m	/^:- func array(list(T)) = array(T).$/;kq|/^\<array\>/;'q;"	kind:func
array	array.m	/^:- inst array == array(ground).$/;kq|-;/\<array\>/;'q;"	kind:inst
array	array.m	/^:- inst array(I) == ground.$/;kq|-;/\<array\>/;'q;"	kind:inst
array.'elem	array.m	/^:- func 'elem :='(int, array(T), T) = array(T).$/;kq|/^\<'elem\>/;'q;"	kind:func
array.'unsafe_elem	array.m	/^:- func 'unsafe_elem :='(int, array(T), T) = array(T).$/;kq|/^\<'unsafe_elem\>/;'q;"	kind:func
array.all_false	array.m	/^:- pred array.all_false(pred(T), array(T)).$/;kq|/^\<array.all_false\>/;'q;"	kind:pred
array.all_true	array.m	/^:- pred array.all_true(pred(T), array(T)).$/;kq|/^\<array.all_true\>/;'q;"	kind:pred
array.append	array.m	/^:- func array.append(array(T)::in, array(T)::in) = (array(T)::array_uo) is det.$/;kq|/^\<array.append\>/;'q;"	kind:func
array.approx_binary_search	array.m	/^:- pred array.approx_binary_search(array(T)::array_ui,$/;kq|/^\<array.approx_binary_search\>/;'q;"	kind:pred
array.approx_binary_search	array.m	/^:- pred array.approx_binary_search(comparison_func(T)::in, array(T)::array_ui,$/;kq|/^\<array.approx_binary_search\>/;'q;"	kind:pred
array.approx_binary_search_2	array.m	/^:- pred approx_binary_search_2(comparison_func(T)::in, array(T)::array_ui,$/;kq|/^\<approx_binary_search_2\>/;'q;"	kind:pred	file:
array.array_to_doc	array.m	/^:- func array.array_to_doc(array(T)) = pretty_printer.doc.$/;kq|/^\<array.array_to_doc\>/;'q;"	kind:func
array.binary_search	array.m	/^:- pred array.binary_search(array(T)::array_ui,$/;kq|/^\<array.binary_search\>/;'q;"	kind:pred
array.binary_search	array.m	/^:- pred array.binary_search(comparison_func(T)::in, array(T)::array_ui,$/;kq|/^\<array.binary_search\>/;'q;"	kind:pred
array.bounds	array.m	/^:- pred array.bounds(array(_T), int, int).$/;kq|/^\<array.bounds\>/;'q;"	kind:pred
array.bounds_checks	array.m	/^:- pred bounds_checks is semidet.$/;kq|/^\<bounds_checks\>/;'q;"	kind:pred	file:
array.bsearch	array.m	/^:- func array.bsearch(array(T), T, comparison_func(T)) = maybe(int).$/;kq|/^\<array.bsearch\>/;'q;"	kind:func
array.bsearch	array.m	/^:- pred array.bsearch(array(T), T, comparison_pred(T), maybe(int)).$/;kq|/^\<array.bsearch\>/;'q;"	kind:pred
array.bsearch_2	array.m	/^:- pred array.bsearch_2(array(T)::in, int::in, int::in, T::in,$/;kq|/^\<array.bsearch_2\>/;'q;"	kind:pred	file:
array.compare_elements	array.m	/^:- pred array.compare_elements(int::in, int::in, array(T)::in, array(T)::in,$/;kq|/^\<array.compare_elements\>/;'q;"	kind:pred	file:
array.copy	array.m	/^:- func array.copy(array(T)) = array(T).$/;kq|/^\<array.copy\>/;'q;"	kind:func
array.copy	array.m	/^:- pred array.copy(array(T), array(T)).$/;kq|/^\<array.copy\>/;'q;"	kind:pred
array.copy_run_ascending	array.m	/^:- pred copy_run_ascending(array(T)::array_ui,$/;kq|/^\<copy_run_ascending\>/;'q;"	kind:pred	file:
array.copy_subarray	array.m	/^:- pred copy_subarray(array(T)::array_ui, int::in, int::in, int::in,$/;kq|/^\<copy_subarray\>/;'q;"	kind:pred	file:
array.copy_subarray_reverse	array.m	/^:- pred copy_subarray_reverse(array(T)::array_ui, int::in, int::in, int::in,$/;kq|/^\<copy_subarray_reverse\>/;'q;"	kind:pred	file:
array.do_all_false	array.m	/^:- pred do_all_false(pred(T), int, int, array(T)).$/;kq|/^\<do_all_false\>/;'q;"	kind:pred	file:
array.do_all_true	array.m	/^:- pred do_all_true(pred(T), int, int, array(T)).$/;kq|/^\<do_all_true\>/;'q;"	kind:pred	file:
array.do_foldl2	array.m	/^:- pred do_foldl2(pred(T1, T2, T2, T3, T3), int, int, array(T1), T2, T2,$/;kq|/^\<do_foldl2\>/;'q;"	kind:pred	file:
array.do_foldl3	array.m	/^:- pred do_foldl3(pred(T1, T2, T2, T3, T3, T4, T4), int, int, array(T1),$/;kq|/^\<do_foldl3\>/;'q;"	kind:pred	file:
array.do_foldl4	array.m	/^:- pred do_foldl4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), int, int,$/;kq|/^\<do_foldl4\>/;'q;"	kind:pred	file:
array.do_foldl5	array.m	/^:- pred do_foldl5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<do_foldl5\>/;'q;"	kind:pred	file:
array.do_foldl_func	array.m	/^:- func do_foldl_func(func(T1, T2) = T2, array(T1), T2, int, int) = T2.$/;kq|/^\<do_foldl_func\>/;'q;"	kind:func	file:
array.do_foldl_pred	array.m	/^:- pred do_foldl_pred(pred(T1, T2, T2), array(T1), int, int, T2, T2).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
array.do_foldr2	array.m	/^:- pred do_foldr2(pred(T1, T2, T2, T3, T3), int, int, array(T1), T2, T2,$/;kq|/^\<do_foldr2\>/;'q;"	kind:pred	file:
array.do_foldr3	array.m	/^:- pred do_foldr3(pred(T1, T2, T2, T3, T3, T4, T4), int, int, array(T1),$/;kq|/^\<do_foldr3\>/;'q;"	kind:pred	file:
array.do_foldr4	array.m	/^:- pred do_foldr4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), int, int,$/;kq|/^\<do_foldr4\>/;'q;"	kind:pred	file:
array.do_foldr5	array.m	/^:- pred do_foldr5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<do_foldr5\>/;'q;"	kind:pred	file:
array.do_foldr_func	array.m	/^:- func do_foldr_func(func(T1, T2) = T2, array(T1), T2, int, int) = T2.$/;kq|/^\<do_foldr_func\>/;'q;"	kind:func	file:
array.do_foldr_pred	array.m	/^:- pred do_foldr_pred(pred(T1, T2, T2), int, int, array(T1), T2, T2).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
array.dynamic_cast_to_array	array.m	/^:- some [T2] pred dynamic_cast_to_array(T1::in, array(T2)::out) is semidet.$/;kq|/^\<dynamic_cast_to_array\>/;'q;"	kind:pred
array.elem	array.m	/^:- func array.elem(int, array(T)) = T.$/;kq|/^\<array.elem\>/;'q;"	kind:func
array.equal_elements	array.m	/^:- pred array.equal_elements(int, int, array(T), array(T)).$/;kq|/^\<array.equal_elements\>/;'q;"	kind:pred	file:
array.fetch_items	array.m	/^:- func array.fetch_items(array(T), int, int) = list(T).$/;kq|/^\<array.fetch_items\>/;'q;"	kind:func
array.fetch_items	array.m	/^:- pred array.fetch_items(array(T), int, int, list(T)).$/;kq|/^\<array.fetch_items\>/;'q;"	kind:pred
array.foldl	array.m	/^:- func array.foldl(func(T1, T2) = T2, array(T1), T2) = T2.$/;kq|/^\<array.foldl\>/;'q;"	kind:func
array.foldl	array.m	/^:- pred array.foldl(pred(T1, T2, T2), array(T1), T2, T2).$/;kq|/^\<array.foldl\>/;'q;"	kind:pred
array.foldl2	array.m	/^:- pred array.foldl2(pred(T1, T2, T2, T3, T3), array(T1), T2, T2, T3, T3).$/;kq|/^\<array.foldl2\>/;'q;"	kind:pred
array.foldl3	array.m	/^:- pred array.foldl3(pred(T1, T2, T2, T3, T3, T4, T4), array(T1),$/;kq|/^\<array.foldl3\>/;'q;"	kind:pred
array.foldl4	array.m	/^:- pred array.foldl4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), array(T1),$/;kq|/^\<array.foldl4\>/;'q;"	kind:pred
array.foldl5	array.m	/^:- pred array.foldl5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<array.foldl5\>/;'q;"	kind:pred
array.foldr	array.m	/^:- func array.foldr(func(T1, T2) = T2, array(T1), T2) = T2.$/;kq|/^\<array.foldr\>/;'q;"	kind:func
array.foldr	array.m	/^:- pred array.foldr(pred(T1, T2, T2), array(T1), T2, T2).$/;kq|/^\<array.foldr\>/;'q;"	kind:pred
array.foldr2	array.m	/^:- pred array.foldr2(pred(T1, T2, T2, T3, T3), array(T1), T2, T2, T3, T3).$/;kq|/^\<array.foldr2\>/;'q;"	kind:pred
array.foldr3	array.m	/^:- pred array.foldr3(pred(T1, T2, T2, T3, T3, T4, T4), array(T1),$/;kq|/^\<array.foldr3\>/;'q;"	kind:pred
array.foldr4	array.m	/^:- pred array.foldr4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), array(T1),$/;kq|/^\<array.foldr4\>/;'q;"	kind:pred
array.foldr5	array.m	/^:- pred array.foldr5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<array.foldr5\>/;'q;"	kind:pred
array.from_list	array.m	/^:- func array.from_list(list(T)::in) = (array(T)::array_uo) is det.$/;kq|/^\<array.from_list\>/;'q;"	kind:func
array.from_list	array.m	/^:- pred array.from_list(list(T)::in, array(T)::array_uo) is det.$/;kq|/^\<array.from_list\>/;'q;"	kind:pred
array.from_reverse_list	array.m	/^:- func array.from_reverse_list(list(T)::in) = (array(T)::array_uo) is det.$/;kq|/^\<array.from_reverse_list\>/;'q;"	kind:func
array.generate	array.m	/^:- func array.generate(int::in, (func(int) = T)::in) = (array(T)::array_uo)$/;kq|/^\<array.generate\>/;'q;"	kind:func
array.generate_2	array.m	/^:- func generate_2(int::in, int::in, (func(int) = T)::in, array(T)::array_di)$/;kq|/^\<generate_2\>/;'q;"	kind:func	file:
array.generate_foldl	array.m	/^:- pred array.generate_foldl(int, pred(int, T, A, A), array(T), A, A).$/;kq|/^\<array.generate_foldl\>/;'q;"	kind:pred
array.generate_foldl_2	array.m	/^:- pred generate_foldl_2(int, int, pred(int, T, A, A),$/;kq|/^\<generate_foldl_2\>/;'q;"	kind:pred	file:
array.greatest_index	array.m	/^:- func array.greatest_index(array(T)) = int.$/;kq|/^\<array.greatest_index\>/;'q;"	kind:func
array.in_bounds	array.m	/^:- pred array.in_bounds(array(_T), int).$/;kq|/^\<array.in_bounds\>/;'q;"	kind:pred
array.index_out_of_bounds	array.m	/^:- type array.index_out_of_bounds$/;kq|-;/\<array.index_out_of_bounds\>/;'q;"	kind:type
array.init	array.m	/^:- func array.init(int, T) = array(T).$/;kq|/^\<array.init\>/;'q;"	kind:func
array.init	array.m	/^:- pred array.init(int, T, array(T)).$/;kq|/^\<array.init\>/;'q;"	kind:pred
array.init_2	array.m	/^:- pred array.init_2(int::in, T::in, array(T)::array_uo) is det.$/;kq|/^\<array.init_2\>/;'q;"	kind:pred	file:
array.is_empty	array.m	/^:- pred array.is_empty(array(_T)).$/;kq|/^\<array.is_empty\>/;'q;"	kind:pred
array.least_index	array.m	/^:- func array.least_index(array(T)) = int.$/;kq|/^\<array.least_index\>/;'q;"	kind:func
array.lookup	array.m	/^:- func array.lookup(array(T), int) = T.$/;kq|/^\<array.lookup\>/;'q;"	kind:func
array.lookup	array.m	/^:- pred array.lookup(array(T), int, T).$/;kq|/^\<array.lookup\>/;'q;"	kind:pred
array.make_empty_array	array.m	/^:- func array.make_empty_array = (array(T)::array_uo) is det.$/;kq|/^\<array.make_empty_array\>/;'q;"	kind:func
array.make_empty_array	array.m	/^:- pred array.make_empty_array(array(T)::array_uo) is det.$/;kq|/^\<array.make_empty_array\>/;'q;"	kind:pred
array.map	array.m	/^:- func array.map(func(T1) = T2, array(T1)) = array(T2).$/;kq|/^\<array.map\>/;'q;"	kind:func
array.map	array.m	/^:- pred array.map(pred(T1, T2), array(T1), array(T2)).$/;kq|/^\<array.map\>/;'q;"	kind:pred
array.map_2	array.m	/^:- pred array.map_2(int::in, int::in, pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<array.map_2\>/;'q;"	kind:pred	file:
array.map_corresponding_foldl	array.m	/^:- pred array.map_corresponding_foldl(pred(T1, T2, T3, T4, T4),$/;kq|/^\<array.map_corresponding_foldl\>/;'q;"	kind:pred
array.map_foldl	array.m	/^:- pred map_foldl(pred(T1, T2, T3, T3), array(T1), array(T2), T3, T3).$/;kq|/^\<map_foldl\>/;'q;"	kind:pred
array.map_foldl_2	array.m	/^:- pred map_foldl_2(pred(T1, T2, T3, T3),$/;kq|/^\<map_foldl_2\>/;'q;"	kind:pred	file:
array.max	array.m	/^:- func array.max(array(_T)) = int.$/;kq|/^\<array.max\>/;'q;"	kind:func
array.max	array.m	/^:- pred array.max(array(_T), int).$/;kq|/^\<array.max\>/;'q;"	kind:pred
array.member	array.m	/^:- pred array.member(array(T)::in, T::out) is nondet.$/;kq|/^\<array.member\>/;'q;"	kind:pred
array.merge_subarrays	array.m	/^:- pred merge_subarrays(array(T)::array_ui,$/;kq|/^\<merge_subarrays\>/;'q;"	kind:pred	file:
array.min	array.m	/^:- func array.min(array(_T)) = int.$/;kq|/^\<array.min\>/;'q;"	kind:func
array.min	array.m	/^:- pred array.min(array(_T), int).$/;kq|/^\<array.min\>/;'q;"	kind:pred
array.mostly_uniq_array	array.m	/^:- inst mostly_uniq_array == mostly_uniq_array(ground). % XXX work-around$/;kq|-;/\<array.mostly_uniq_array\>/;'q;"	kind:inst
array.mostly_uniq_array	array.m	/^:- inst mostly_uniq_array(I) == array(I).    % XXX work-around$/;kq|-;/\<array.mostly_uniq_array\>/;'q;"	kind:inst
array.out_of_bounds_error	array.m	/^:- pred out_of_bounds_error(array(T), int, string).$/;kq|/^\<out_of_bounds_error\>/;'q;"	kind:pred	file:
array.permutation_2	array.m	/^:- pred permutation_2(int::in, int::in, int::in, int::in,$/;kq|/^\<permutation_2\>/;'q;"	kind:pred	file:
array.random_permutation	array.m	/^:- pred array.random_permutation(array(T)::array_di, array(T)::array_uo,$/;kq|/^\<array.random_permutation\>/;'q;"	kind:pred
array.resize	array.m	/^:- func array.resize(array(T), int, T) = array(T).$/;kq|/^\<array.resize\>/;'q;"	kind:func
array.resize	array.m	/^:- pred array.resize(int, T, array(T), array(T)).$/;kq|/^\<array.resize\>/;'q;"	kind:pred
array.samsort_down	array.m	/^:- pred samsort_down(int::in, array(T)::array_di, array(T)::array_uo,$/;kq|/^\<samsort_down\>/;'q;"	kind:pred	file:
array.samsort_subarray	array.m	/^:- func samsort_subarray(array(T)::array_di, int::in, int::in) =$/;kq|/^\<samsort_subarray\>/;'q;"	kind:func	file:
array.samsort_up	array.m	/^:- pred samsort_up(int::in, array(T)::array_di, array(T)::array_uo,$/;kq|/^\<samsort_up\>/;'q;"	kind:pred	file:
array.search_until	array.m	/^:- func search_until(comparison_result::in, array(T)::array_ui,$/;kq|/^\<search_until\>/;'q;"	kind:func	file:
array.semidet_lookup	array.m	/^:- pred array.semidet_lookup(array(T), int, T).$/;kq|/^\<array.semidet_lookup\>/;'q;"	kind:pred
array.semidet_set	array.m	/^:- pred array.semidet_set(int, T, array(T), array(T)).$/;kq|/^\<array.semidet_set\>/;'q;"	kind:pred
array.semidet_slow_set	array.m	/^:- pred array.semidet_slow_set(int, T, array(T), array(T)).$/;kq|/^\<array.semidet_slow_set\>/;'q;"	kind:pred
array.set	array.m	/^:- func array.set(array(T), int, T) = array(T).$/;kq|/^\<array.set\>/;'q;"	kind:func
array.set	array.m	/^:- pred array.set(int, T, array(T), array(T)).$/;kq|/^\<array.set\>/;'q;"	kind:pred
array.shrink	array.m	/^:- func array.shrink(array(T), int) = array(T).$/;kq|/^\<array.shrink\>/;'q;"	kind:func
array.shrink	array.m	/^:- pred array.shrink(int, array(T), array(T)).$/;kq|/^\<array.shrink\>/;'q;"	kind:pred
array.shrink_2	array.m	/^:- pred array.shrink_2(int::in, array(T)::array_di, array(T)::array_uo)$/;kq|/^\<array.shrink_2\>/;'q;"	kind:pred	file:
array.size	array.m	/^:- func array.size(array(_T)) = int.$/;kq|/^\<array.size\>/;'q;"	kind:func
array.size	array.m	/^:- pred array.size(array(_T), int).$/;kq|/^\<array.size\>/;'q;"	kind:pred
array.slow_set	array.m	/^:- func array.slow_set(array(T), int, T) = array(T).$/;kq|/^\<array.slow_set\>/;'q;"	kind:func
array.slow_set	array.m	/^:- pred array.slow_set(int, T, array(T), array(T)).$/;kq|/^\<array.slow_set\>/;'q;"	kind:pred
array.sort	array.m	/^:- func array.sort(array(T)) = array(T).$/;kq|/^\<array.sort\>/;'q;"	kind:func
array.sort_fix_2014	array.m	/^:- pred array.sort_fix_2014 is det.$/;kq|/^\<array.sort_fix_2014\>/;'q;"	kind:pred
array.swap_elems	array.m	/^:- func swap_elems(array(T), int, int) = array(T).$/;kq|/^\<swap_elems\>/;'q;"	kind:func	file:
array.to_list	array.m	/^:- func array.to_list(array(T)) = list(T).$/;kq|/^\<array.to_list\>/;'q;"	kind:func
array.to_list	array.m	/^:- pred array.to_list(array(T), list(T)).$/;kq|/^\<array.to_list\>/;'q;"	kind:pred
array.uniq_array	array.m	/^:- inst uniq_array == uniq_array(ground).   % XXX work-around$/;kq|-;/\<array.uniq_array\>/;'q;"	kind:inst
array.uniq_array	array.m	/^:- inst uniq_array(I) == array(I).          % XXX work-around$/;kq|-;/\<array.uniq_array\>/;'q;"	kind:inst
array.unsafe_elem	array.m	/^:- func array.unsafe_elem(int, array(T)) = T.$/;kq|/^\<array.unsafe_elem\>/;'q;"	kind:func
array.unsafe_init	array.m	/^:- func unsafe_init(int::in, T::in, int::in) = (array(T)::array_uo) is det.$/;kq|/^\<unsafe_init\>/;'q;"	kind:func	file:
array.unsafe_insert_items	array.m	/^:- pred array.unsafe_insert_items(list(T)::in, int::in,$/;kq|/^\<array.unsafe_insert_items\>/;'q;"	kind:pred	file:
array.unsafe_lookup	array.m	/^:- pred array.unsafe_lookup(array(T), int, T).$/;kq|/^\<array.unsafe_lookup\>/;'q;"	kind:pred
array.unsafe_set	array.m	/^:- pred array.unsafe_set(int, T, array(T), array(T)).$/;kq|/^\<array.unsafe_set\>/;'q;"	kind:pred
array.verify_identical	array.m	/^:- pred verify_identical(array(T)::array_ui, array(T)::array_ui,$/;kq|/^\<verify_identical\>/;'q;"	kind:pred	file:
array.verify_sorted	array.m	/^:- pred verify_sorted(array(T)::array_ui, int::in, int::in) is det.$/;kq|/^\<verify_sorted\>/;'q;"	kind:pred	file:
array2d	array2d.m	/^    --->    array2d($/;kq|-;/\<array2d\>/;'q;"	kind:cons
array2d	array2d.m	/^:- func array2d(T) ^ elem(int, int) = T.$/;kq|/^\<array2d\>/;'q;"	kind:func
array2d	array2d.m	/^:- func array2d(T) ^ unsafe_elem(int, int) = T.$/;kq|/^\<array2d\>/;'q;"	kind:func
array2d	array2d.m	/^:- func array2d(list(list(T))) = array2d(T).$/;kq|/^\<array2d\>/;'q;"	kind:func
array2d	array2d.m	/^:- inst array2d ---> array2d(ground, ground, array).$/;kq|-;/\<array2d\>/;'q;"	kind:inst
array2d	array2d.m	/^:- type array2d(T)$/;kq|-;/\<array2d\>/;'q;"	kind:type
array2d. array2d(T	array2d.m	/^:- func ( array2d(T) ^ elem(int, int) := T  ) = array2d(T).$/;kq|/^\< array2d(T\>/;'q;"	kind:func
array2d. array2d(T	array2d.m	/^:- func ( array2d(T) ^ unsafe_elem(int, int) := T  ) = array2d(T).$/;kq|/^\< array2d(T\>/;'q;"	kind:func
array2d.bounds	array2d.m	/^:- pred bounds(array2d(T), int, int).$/;kq|/^\<bounds\>/;'q;"	kind:pred
array2d.from_lists	array2d.m	/^:- func from_lists(list(list(T))) = array2d(T).$/;kq|/^\<from_lists\>/;'q;"	kind:func
array2d.in_bounds	array2d.m	/^:- pred in_bounds(array2d(T), int, int).$/;kq|/^\<in_bounds\>/;'q;"	kind:pred
array2d.init	array2d.m	/^:- func init(int, int, T) = array2d(T).$/;kq|/^\<init\>/;'q;"	kind:func
array2d.lists	array2d.m	/^:- func lists(array2d(T)) = list(list(T)).$/;kq|/^\<lists\>/;'q;"	kind:func
array2d.lists_2	array2d.m	/^:- func lists_2(int, int, int, array(T), list(T), list(list(T))) =$/;kq|/^\<lists_2\>/;'q;"	kind:func	file:
array2d.set	array2d.m	/^:- pred set(int, int, T,  array2d(T), array2d(T)).$/;kq|/^\<set\>/;'q;"	kind:pred
array2d.unsafe_set	array2d.m	/^:- pred unsafe_set(int, int, T,  array2d(T), array2d(T)).$/;kq|/^\<unsafe_set\>/;'q;"	kind:pred
array2d_di	array2d.m	/^:- mode array2d_di == di(array2d).$/;kq|-;/\<array2d_di\>/;'q;"	kind:mode
array2d_ui	array2d.m	/^:- mode array2d_ui == in(array2d).$/;kq|-;/\<array2d_ui\>/;'q;"	kind:mode
array2d_uo	array2d.m	/^:- mode array2d_uo == out(array2d).$/;kq|-;/\<array2d_uo\>/;'q;"	kind:mode
array_compare	array.m	/^:- func array_compare(array(T), array(T)) = comparison_result.$/;kq|/^\<array_compare\>/;'q;"	kind:func
array_compare	array.m	/^:- pred array_compare(comparison_result::uo, array(T)::in, array(T)::in)$/;kq|/^\<array_compare\>/;'q;"	kind:pred	file:
array_di	array.m	/^:- mode array_di == di(uniq_array).$/;kq|-;/\<array_di\>/;'q;"	kind:mode
array_element	term_to_xml.m	/^:- func array_element = string.$/;kq|/^\<array_element\>/;'q;"	kind:func	file:
array_equal	array.m	/^:- pred array_equal(array(T)::in, array(T)::in) is semidet.$/;kq|/^\<array_equal\>/;'q;"	kind:pred	file:
array_mdi	array.m	/^:- mode array_mdi == mdi(mostly_uniq_array).$/;kq|-;/\<array_mdi\>/;'q;"	kind:mode
array_mui	array.m	/^:- mode array_mui == in(mostly_uniq_array).$/;kq|-;/\<array_mui\>/;'q;"	kind:mode
array_muo	array.m	/^:- mode array_muo == out(mostly_uniq_array).$/;kq|-;/\<array_muo\>/;'q;"	kind:mode
array_to_doc	array.m	/^:- func array.array_to_doc(array(T)) = pretty_printer.doc.$/;kq|/^\<array.array_to_doc\>/;'q;"	kind:func
array_to_doc	pprint.m	/^:- func array_to_doc(int, array(T)) = doc.$/;kq|/^\<array_to_doc\>/;'q;"	kind:func	file:
array_to_doc_2	array.m	/^:- func array_to_doc_2(int, array(T)) = doc.$/;kq|/^\<array_to_doc_2\>/;'q;"	kind:func	file:
array_to_revstrings	string.m	/^:- pred array_to_revstrings(noncanon_handling, ops.table, array(T),$/;kq|/^\<array_to_revstrings\>/;'q;"	kind:pred	file:
array_ui	array.m	/^:- mode array_ui == in(uniq_array).$/;kq|-;/\<array_ui\>/;'q;"	kind:mode
array_uo	array.m	/^:- mode array_uo == out(uniq_array).$/;kq|-;/\<array_uo\>/;'q;"	kind:mode
ascending	calendar.m	/^    --->    ascending$/;kq|-;/\<ascending\>/;'q;"	kind:cons	file:
asctime	time.m	/^:- func time.asctime(tm) = string.$/;kq|/^\<time.asctime\>/;'q;"	kind:func
asin	math.m	/^:- func math.asin(float) = float.$/;kq|/^\<math.asin\>/;'q;"	kind:func
assoc	ops.m	/^:- type ops.assoc$/;kq|-;/\<assoc\>/;'q;"	kind:type
assoc_list	assoc_list.m	/^:- func assoc_list(K, V) ^ det_elem(K) = V is det.$/;kq|/^\<assoc_list\>/;'q;"	kind:func
assoc_list	assoc_list.m	/^:- func assoc_list(K, V) ^ elem(K) = V is semidet.$/;kq|/^\<assoc_list\>/;'q;"	kind:func
assoc_list	assoc_list.m	/^:- type assoc_list(K, V) ==  list(pair(K, V)).$/;kq|-;/\<assoc_list\>/;'q;"	kind:type
assoc_list	assoc_list.m	/^:- type assoc_list(T)   ==  list(pair(T, T)).$/;kq|-;/\<assoc_list\>/;'q;"	kind:type
assoc_list.filter	assoc_list.m	/^:- func assoc_list.filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.filter\>/;'q;"	kind:func
assoc_list.filter	assoc_list.m	/^:- pred assoc_list.filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.filter\>/;'q;"	kind:pred
assoc_list.filter	assoc_list.m	/^:- pred assoc_list.filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.filter\>/;'q;"	kind:pred
assoc_list.foldl2_values	assoc_list.m	/^:- pred assoc_list.foldl2_values(pred(V, A, A, B, B), assoc_list(K, V),$/;kq|/^\<assoc_list.foldl2_values\>/;'q;"	kind:pred
assoc_list.foldl3_values	assoc_list.m	/^:- pred assoc_list.foldl3_values(pred(V, A, A, B, B, C, C), assoc_list(K, V),$/;kq|/^\<assoc_list.foldl3_values\>/;'q;"	kind:pred
assoc_list.foldl_keys	assoc_list.m	/^:- pred assoc_list.foldl_keys(pred(K, A, A), assoc_list(K, V), A, A).$/;kq|/^\<assoc_list.foldl_keys\>/;'q;"	kind:pred
assoc_list.foldl_values	assoc_list.m	/^:- pred assoc_list.foldl_values(pred(V, A, A), assoc_list(K, V), A, A).$/;kq|/^\<assoc_list.foldl_values\>/;'q;"	kind:pred
assoc_list.keys	assoc_list.m	/^:- func assoc_list.keys(assoc_list(K, V)) = list(K).$/;kq|/^\<assoc_list.keys\>/;'q;"	kind:func
assoc_list.keys	assoc_list.m	/^:- pred assoc_list.keys(assoc_list(K, V)::in, list(K)::out) is det.$/;kq|/^\<assoc_list.keys\>/;'q;"	kind:pred
assoc_list.keys_and_values	assoc_list.m	/^:- pred assoc_list.keys_and_values(assoc_list(K, V)::in,$/;kq|/^\<assoc_list.keys_and_values\>/;'q;"	kind:pred
assoc_list.map_keys_only	assoc_list.m	/^:- func assoc_list.map_keys_only(func(K) = L, assoc_list(K, V))$/;kq|/^\<assoc_list.map_keys_only\>/;'q;"	kind:func
assoc_list.map_keys_only	assoc_list.m	/^:- pred assoc_list.map_keys_only(pred(K, L), $/;kq|/^\<assoc_list.map_keys_only\>/;'q;"	kind:pred
assoc_list.map_values	assoc_list.m	/^:- func assoc_list.map_values(func(K, V) = W, assoc_list(K, V))$/;kq|/^\<assoc_list.map_values\>/;'q;"	kind:func
assoc_list.map_values	assoc_list.m	/^:- pred assoc_list.map_values(pred(K, V, W), $/;kq|/^\<assoc_list.map_values\>/;'q;"	kind:pred
assoc_list.map_values_only	assoc_list.m	/^:- func assoc_list.map_values_only(func(V) = W, assoc_list(K, V))$/;kq|/^\<assoc_list.map_values_only\>/;'q;"	kind:func
assoc_list.map_values_only	assoc_list.m	/^:- pred assoc_list.map_values_only(pred(V, W), $/;kq|/^\<assoc_list.map_values_only\>/;'q;"	kind:pred
assoc_list.merge	assoc_list.m	/^:- func assoc_list.merge(assoc_list(K, V), assoc_list(K, V))$/;kq|/^\<assoc_list.merge\>/;'q;"	kind:func
assoc_list.merge	assoc_list.m	/^:- pred assoc_list.merge(assoc_list(K, V)::in, assoc_list(K, V)::in,$/;kq|/^\<assoc_list.merge\>/;'q;"	kind:pred
assoc_list.negated_filter	assoc_list.m	/^:- func assoc_list.negated_filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.negated_filter\>/;'q;"	kind:func
assoc_list.negated_filter	assoc_list.m	/^:- pred assoc_list.negated_filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.negated_filter\>/;'q;"	kind:pred
assoc_list.remove	assoc_list.m	/^:- pred assoc_list.remove(assoc_list(K, V)::in, K::in, V::out,$/;kq|/^\<assoc_list.remove\>/;'q;"	kind:pred
assoc_list.reverse_members	assoc_list.m	/^:- func assoc_list.reverse_members(assoc_list(K, V)) = assoc_list(V, K).$/;kq|/^\<assoc_list.reverse_members\>/;'q;"	kind:func
assoc_list.reverse_members	assoc_list.m	/^:- pred assoc_list.reverse_members(assoc_list(K, V)::in,$/;kq|/^\<assoc_list.reverse_members\>/;'q;"	kind:pred
assoc_list.search	assoc_list.m	/^:- pred assoc_list.search(assoc_list(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<assoc_list.search\>/;'q;"	kind:pred
assoc_list.values	assoc_list.m	/^:- func assoc_list.values(assoc_list(K, V)) = list(V).$/;kq|/^\<assoc_list.values\>/;'q;"	kind:func
assoc_list.values	assoc_list.m	/^:- pred assoc_list.values(assoc_list(K, V)::in, list(V)::out) is det.$/;kq|/^\<assoc_list.values\>/;'q;"	kind:pred
assoc_list_merge	multi_map.m	/^:- pred multi_map.assoc_list_merge(assoc_list(K, list(V))::in,$/;kq|/^\<multi_map.assoc_list_merge\>/;'q;"	kind:pred	file:
assoc_list_to_pqueue	pqueue.m	/^:- func pqueue.assoc_list_to_pqueue(assoc_list(K, V)) = pqueue(K, V).$/;kq|/^\<pqueue.assoc_list_to_pqueue\>/;'q;"	kind:func
assoc_list_to_pqueue	pqueue.m	/^:- pred pqueue.assoc_list_to_pqueue(assoc_list(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.assoc_list_to_pqueue\>/;'q;"	kind:pred
assoc_list_to_rbtree	rbtree.m	/^:- func rbtree.assoc_list_to_rbtree(assoc_list(K, V)) = rbtree(K, V).$/;kq|/^\<rbtree.assoc_list_to_rbtree\>/;'q;"	kind:func
assoc_list_to_rbtree	rbtree.m	/^:- pred rbtree.assoc_list_to_rbtree(assoc_list(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.assoc_list_to_rbtree\>/;'q;"	kind:pred
assoc_list_to_tree234	tree234.m	/^:- func tree234.assoc_list_to_tree234(assoc_list(K, V)) = tree234(K, V).$/;kq|/^\<tree234.assoc_list_to_tree234\>/;'q;"	kind:func
assoc_list_to_tree234	tree234.m	/^:- pred tree234.assoc_list_to_tree234(assoc_list(K, V)::in,$/;kq|/^\<tree234.assoc_list_to_tree234\>/;'q;"	kind:pred
assoc_list_to_tree234_acc	tree234.m	/^:- pred tree234.assoc_list_to_tree234_acc(assoc_list(K, V)::in,$/;kq|/^\<tree234.assoc_list_to_tree234_acc\>/;'q;"	kind:pred	file:
at_most_one_of	robdd.m	/^:- func at_most_one_of(vars(T)) = robdd(T).$/;kq|/^\<at_most_one_of\>/;'q;"	kind:func
at_most_one_of_2	robdd.m	/^:- func at_most_one_of_2(vars(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<at_most_one_of_2\>/;'q;"	kind:func	file:
atan	math.m	/^:- func math.atan(float) = float.$/;kq|/^\<math.atan\>/;'q;"	kind:func
atan2	math.m	/^:- func math.atan2(float, float) = float.$/;kq|/^\<math.atan2\>/;'q;"	kind:func
atom	term.m	/^    --->    atom(string)$/;kq|-;/\<atom\>/;'q;"	kind:cons
atomic_transaction	stm_builtin.m	/^:- pred atomic_transaction(pred(T, stm, stm)::in(pred(out, di, uo) is det),$/;kq|/^\<atomic_transaction\>/;'q;"	kind:pred
atomic_transaction_impl	stm_builtin.m	/^:- impure pred atomic_transaction_impl($/;kq|/^\<atomic_transaction_impl\>/;'q;"	kind:pred	file:
atsort	digraph.m	/^:- func digraph.atsort(digraph(T)) = list(set(T)).$/;kq|/^\<digraph.atsort\>/;'q;"	kind:func
atsort	digraph.m	/^:- pred digraph.atsort(digraph(T)::in, list(set(T))::out) is det.$/;kq|/^\<digraph.atsort\>/;'q;"	kind:pred
atsort_2	digraph.m	/^:- pred digraph.atsort_2(list(digraph_key(T))::in, digraph(T)::in,$/;kq|/^\<digraph.atsort_2\>/;'q;"	kind:pred	file:
attr	term_to_xml.m	/^    --->    attr(string, string).$/;kq|-;/\<attr\>/;'q;"	kind:cons
attr	term_to_xml.m	/^:- type attr$/;kq|-;/\<attr\>/;'q;"	kind:type
attr_from_source	term_to_xml.m	/^    --->    attr_from_source($/;kq|-;/\<attr_from_source\>/;'q;"	kind:cons
attr_from_source	term_to_xml.m	/^:- type attr_from_source$/;kq|-;/\<attr_from_source\>/;'q;"	kind:type
attr_from_source_to_maybe_attr	term_to_xml.m	/^:- func attr_from_source_to_maybe_attr(maybe(string), maybe(int), type_desc,$/;kq|/^\<attr_from_source_to_maybe_attr\>/;'q;"	kind:func	file:
attr_name	term_to_xml.m	/^                attr_name   :: string,$/;kq|-;/\<attr_name\>/;'q;"	kind:fld
attr_source	term_to_xml.m	/^                attr_source :: attr_source$/;kq|-;/\<attr_source\>/;'q;"	kind:fld
attr_source	term_to_xml.m	/^:- type attr_source$/;kq|-;/\<attr_source\>/;'q;"	kind:type
attributes	term_to_xml.m	/^                attributes      :: list(attr),$/;kq|-;/\<attributes\>/;'q;"	kind:fld
august	calendar.m	/^    ;       august$/;kq|-;/\<august\>/;'q;"	kind:cons
backjump	backjump.m	/^:- impure pred backjump(choice_id::in) is erroneous.$/;kq|/^\<backjump\>/;'q;"	kind:pred
backjump.builtin_backjump	backjump.m	/^:- impure pred builtin_backjump(choice_id::in) is erroneous.$/;kq|/^\<builtin_backjump\>/;'q;"	kind:pred	file:
backjump.builtin_choice_id	backjump.m	/^:- impure pred builtin_choice_id(choice_id::out) is nondet.$/;kq|/^\<builtin_choice_id\>/;'q;"	kind:pred	file:
backjump.choice_id	backjump.m	/^:- type choice_id == int.$/;kq|-;/\<backjump.choice_id\>/;'q;"	kind:type	file:
backjump.get_choice_id	backjump.m	/^:- impure pred get_choice_id(choice_id::out) is nondet.$/;kq|/^\<get_choice_id\>/;'q;"	kind:pred
backjump.to_int	backjump.m	/^:- func to_int(choice_id) = int.$/;kq|/^\<to_int\>/;'q;"	kind:func
bag	bag.m	/^    --->    bag(map(T, int)).$/;kq|-;/\<bag\>/;'q;"	kind:cons	file:
bag	bag.m	/^:- func bag.bag(list(T)) = bag(T).$/;kq|/^\<bag.bag\>/;'q;"	kind:func
bag	bag.m	/^:- type bag(T)$/;kq|-;/\<bag\>/;'q;"	kind:type	file:
bag.bag	bag.m	/^:- func bag.bag(list(T)) = bag(T).$/;kq|/^\<bag.bag\>/;'q;"	kind:func
bag.contains	bag.m	/^:- pred bag.contains(bag(T)::in, T::in) is semidet.$/;kq|/^\<bag.contains\>/;'q;"	kind:pred
bag.count	bag.m	/^:- func bag.count(bag(T)) = int.$/;kq|/^\<bag.count\>/;'q;"	kind:func
bag.count_unique	bag.m	/^:- func bag.count_unique(bag(T)) = int.$/;kq|/^\<bag.count_unique\>/;'q;"	kind:func
bag.count_value	bag.m	/^:- func bag.count_value(bag(T), T) = int.$/;kq|/^\<bag.count_value\>/;'q;"	kind:func
bag.count_value	bag.m	/^:- pred bag.count_value(bag(T)::in, T::in, int::out) is det.$/;kq|/^\<bag.count_value\>/;'q;"	kind:pred
bag.delete	bag.m	/^:- func bag.delete(bag(T), T) = bag(T).$/;kq|/^\<bag.delete\>/;'q;"	kind:func
bag.delete	bag.m	/^:- pred bag.delete(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.delete\>/;'q;"	kind:pred
bag.delete_all	bag.m	/^:- func bag.delete_all(bag(T), T) = bag(T).$/;kq|/^\<bag.delete_all\>/;'q;"	kind:func
bag.delete_all	bag.m	/^:- pred bag.delete_all(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.delete_all\>/;'q;"	kind:pred
bag.det_remove	bag.m	/^:- func bag.det_remove(bag(T), T) = bag(T).$/;kq|/^\<bag.det_remove\>/;'q;"	kind:func
bag.det_remove	bag.m	/^:- pred bag.det_remove(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.det_remove\>/;'q;"	kind:pred
bag.det_remove_list	bag.m	/^:- func bag.det_remove_list(bag(T), list(T)) = bag(T).$/;kq|/^\<bag.det_remove_list\>/;'q;"	kind:func
bag.det_remove_list	bag.m	/^:- pred bag.det_remove_list(list(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.det_remove_list\>/;'q;"	kind:pred
bag.det_remove_set	bag.m	/^:- func bag.det_remove_set(bag(T), set(T)) = bag(T).$/;kq|/^\<bag.det_remove_set\>/;'q;"	kind:func
bag.det_remove_set	bag.m	/^:- pred bag.det_remove_set(set(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.det_remove_set\>/;'q;"	kind:pred
bag.foldl	bag.m	/^:- pred bag.foldl(pred(T, int, A, A), bag(T), A, A).$/;kq|/^\<bag.foldl\>/;'q;"	kind:pred
bag.foldl2	bag.m	/^:- pred bag.foldl2(pred(T, int, A, A, B, B), bag(T), A, A, B, B).$/;kq|/^\<bag.foldl2\>/;'q;"	kind:pred
bag.from_list	bag.m	/^:- func bag.from_list(list(T)) = bag(T).$/;kq|/^\<bag.from_list\>/;'q;"	kind:func
bag.from_list	bag.m	/^:- pred bag.from_list(list(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.from_list\>/;'q;"	kind:pred
bag.from_set	bag.m	/^:- func bag.from_set(set(T)) = bag(T).$/;kq|/^\<bag.from_set\>/;'q;"	kind:func
bag.from_set	bag.m	/^:- pred bag.from_set(set(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.from_set\>/;'q;"	kind:pred
bag.from_sorted_list	bag.m	/^:- func bag.from_sorted_list(list(T)) = bag(T).$/;kq|/^\<bag.from_sorted_list\>/;'q;"	kind:func
bag.from_sorted_list	bag.m	/^:- pred bag.from_sorted_list(list(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.from_sorted_list\>/;'q;"	kind:pred
bag.init	bag.m	/^:- func bag.init = bag(T).$/;kq|/^\<bag.init\>/;'q;"	kind:func
bag.init	bag.m	/^:- pred bag.init(bag(T)::out) is det.$/;kq|/^\<bag.init\>/;'q;"	kind:pred
bag.insert	bag.m	/^:- func bag.insert(bag(T), T) = bag(T).$/;kq|/^\<bag.insert\>/;'q;"	kind:func
bag.insert	bag.m	/^:- pred bag.insert(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.insert\>/;'q;"	kind:pred
bag.insert_list	bag.m	/^:- func bag.insert_list(bag(T), list(T)) = bag(T).$/;kq|/^\<bag.insert_list\>/;'q;"	kind:func
bag.insert_list	bag.m	/^:- pred bag.insert_list(list(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.insert_list\>/;'q;"	kind:pred
bag.insert_set	bag.m	/^:- func bag.insert_set(bag(T), set(T)) = bag(T).$/;kq|/^\<bag.insert_set\>/;'q;"	kind:func
bag.insert_set	bag.m	/^:- pred bag.insert_set(set(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.insert_set\>/;'q;"	kind:pred
bag.intersect	bag.m	/^:- func bag.intersect(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.intersect\>/;'q;"	kind:func
bag.intersect	bag.m	/^:- pred bag.intersect(bag(T)::in, bag(T)::in) is semidet.$/;kq|/^\<bag.intersect\>/;'q;"	kind:pred
bag.intersect	bag.m	/^:- pred bag.intersect(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.intersect\>/;'q;"	kind:pred
bag.intersect_2	bag.m	/^:- pred bag.intersect_2(bag(T)::in, bag(T)::in, bag(T)::in, bag(T)::out)$/;kq|/^\<bag.intersect_2\>/;'q;"	kind:pred	file:
bag.is_empty	bag.m	/^:- pred bag.is_empty(bag(T)::in) is semidet.$/;kq|/^\<bag.is_empty\>/;'q;"	kind:pred
bag.is_subbag	bag.m	/^:- pred bag.is_subbag(bag(T)::in, bag(T)::in) is semidet.$/;kq|/^\<bag.is_subbag\>/;'q;"	kind:pred
bag.least_upper_bound	bag.m	/^:- func bag.least_upper_bound(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.least_upper_bound\>/;'q;"	kind:func
bag.least_upper_bound	bag.m	/^:- pred bag.least_upper_bound(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.least_upper_bound\>/;'q;"	kind:pred
bag.member	bag.m	/^:- pred bag.member(T::in, bag(T)::in) is semidet.$/;kq|/^\<bag.member\>/;'q;"	kind:pred
bag.member	bag.m	/^:- pred bag.member(T::out, bag(T)::in, bag(T)::out) is nondet.$/;kq|/^\<bag.member\>/;'q;"	kind:pred
bag.remove	bag.m	/^:- pred bag.remove(T::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove\>/;'q;"	kind:pred
bag.remove_all	bag.m	/^:- pred bag.remove_all(T::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_all\>/;'q;"	kind:pred
bag.remove_list	bag.m	/^:- pred bag.remove_list(list(T)::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_list\>/;'q;"	kind:pred
bag.remove_set	bag.m	/^:- pred bag.remove_set(set(T)::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_set\>/;'q;"	kind:pred
bag.remove_smallest	bag.m	/^:- pred bag.remove_smallest(T::out, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_smallest\>/;'q;"	kind:pred
bag.subset_compare	bag.m	/^:- pred bag.subset_compare(comparison_result::out, bag(T)::in, bag(T)::in)$/;kq|/^\<bag.subset_compare\>/;'q;"	kind:pred
bag.subtract	bag.m	/^:- func bag.subtract(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.subtract\>/;'q;"	kind:func
bag.subtract	bag.m	/^:- pred bag.subtract(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.subtract\>/;'q;"	kind:pred
bag.to_assoc_list	bag.m	/^:- func bag.to_assoc_list(bag(T)) = assoc_list(T, int).$/;kq|/^\<bag.to_assoc_list\>/;'q;"	kind:func
bag.to_assoc_list	bag.m	/^:- pred bag.to_assoc_list(bag(T)::in, assoc_list(T, int)::out) is det.$/;kq|/^\<bag.to_assoc_list\>/;'q;"	kind:pred
bag.to_list	bag.m	/^:- func bag.to_list(bag(T)) = list(T).$/;kq|/^\<bag.to_list\>/;'q;"	kind:func
bag.to_list	bag.m	/^:- pred bag.to_list(bag(T)::in, list(T)::out) is det.$/;kq|/^\<bag.to_list\>/;'q;"	kind:pred
bag.to_list_2	bag.m	/^:- pred bag.to_list_2(assoc_list(T, int)::in, list(T)::out) is det.$/;kq|/^\<bag.to_list_2\>/;'q;"	kind:pred	file:
bag.to_list_without_duplicates	bag.m	/^:- func bag.to_list_without_duplicates(bag(T)) = list(T).$/;kq|/^\<bag.to_list_without_duplicates\>/;'q;"	kind:func
bag.to_list_without_duplicates	bag.m	/^:- pred bag.to_list_without_duplicates(bag(T)::in, list(T)::out) is det.$/;kq|/^\<bag.to_list_without_duplicates\>/;'q;"	kind:pred
bag.to_set	bag.m	/^:- func bag.to_set(bag(T)) = set(T).$/;kq|/^\<bag.to_set\>/;'q;"	kind:func
bag.to_set_without_duplicates	bag.m	/^:- func bag.to_set_without_duplicates(bag(T)) = set(T).$/;kq|/^\<bag.to_set_without_duplicates\>/;'q;"	kind:func
bag.to_set_without_duplicates	bag.m	/^:- pred bag.to_set_without_duplicates(bag(T)::in, set(T)::out) is det.$/;kq|/^\<bag.to_set_without_duplicates\>/;'q;"	kind:pred
bag.union	bag.m	/^:- func bag.union(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.union\>/;'q;"	kind:func
bag.union	bag.m	/^:- pred bag.union(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.union\>/;'q;"	kind:pred
balance	set_bbbtree.m	/^:- pred set_bbbtree.balance(T::in, set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.balance\>/;'q;"	kind:pred	file:
base	integer.m	/^:- func base = int.$/;kq|/^\<base\>/;'q;"	kind:func	file:
base_string_to_int	string.m	/^:- pred string.base_string_to_int(int::in, string::in, int::out) is semidet.$/;kq|/^\<string.base_string_to_int\>/;'q;"	kind:pred
basediv2	integer.m	/^:- func basediv2 = int.$/;kq|/^\<basediv2\>/;'q;"	kind:func	file:
basemask	integer.m	/^:- func basemask = int.$/;kq|/^\<basemask\>/;'q;"	kind:func	file:
basename	dir.m	/^:- func dir.basename(string) = string is semidet.$/;kq|/^\<dir.basename\>/;'q;"	kind:func
basename	dir.m	/^:- pred dir.basename(string::in, string::out) is semidet.$/;kq|/^\<dir.basename\>/;'q;"	kind:pred
benchmark_det	benchmarking.m	/^:- pred benchmark_det(pred(T1, T2), T1, T2, int, int).$/;kq|/^\<benchmark_det\>/;'q;"	kind:pred
benchmark_det_io	benchmarking.m	/^:- pred benchmark_det_io(pred(T1, T2, T3, T3), T1, T2, T3, T3, int, int).$/;kq|/^\<benchmark_det_io\>/;'q;"	kind:pred
benchmark_det_loop	benchmarking.m	/^:- impure pred benchmark_det_loop(pred(T1, T2), T1, T2, int).$/;kq|/^\<benchmark_det_loop\>/;'q;"	kind:pred	file:
benchmark_det_loop_io	benchmarking.m	/^:- impure pred benchmark_det_loop_io(pred(T1, T2, T3, T3), T1, T2,$/;kq|/^\<benchmark_det_loop_io\>/;'q;"	kind:pred	file:
benchmark_func	benchmarking.m	/^:- pred benchmark_func(func(T1) = T2, T1, T2, int, int).$/;kq|/^\<benchmark_func\>/;'q;"	kind:pred
benchmark_func_loop	benchmarking.m	/^:- impure pred benchmark_func_loop(func(T1) = T2, T1, T2, int).$/;kq|/^\<benchmark_func_loop\>/;'q;"	kind:pred	file:
benchmark_nondet	benchmarking.m	/^:- pred benchmark_nondet(pred(T1, T2), T1, int, int, int).$/;kq|/^\<benchmark_nondet\>/;'q;"	kind:pred
benchmark_nondet_loop	benchmarking.m	/^:- impure pred benchmark_nondet_loop(pred(T1, T2), T1, int, int).$/;kq|/^\<benchmark_nondet_loop\>/;'q;"	kind:pred	file:
benchmarking.benchmark_det	benchmarking.m	/^:- pred benchmark_det(pred(T1, T2), T1, T2, int, int).$/;kq|/^\<benchmark_det\>/;'q;"	kind:pred
benchmarking.benchmark_det_io	benchmarking.m	/^:- pred benchmark_det_io(pred(T1, T2, T3, T3), T1, T2, T3, T3, int, int).$/;kq|/^\<benchmark_det_io\>/;'q;"	kind:pred
benchmarking.benchmark_func	benchmarking.m	/^:- pred benchmark_func(func(T1) = T2, T1, T2, int, int).$/;kq|/^\<benchmark_func\>/;'q;"	kind:pred
benchmarking.benchmark_nondet	benchmarking.m	/^:- pred benchmark_nondet(pred(T1, T2), T1, int, int, int).$/;kq|/^\<benchmark_nondet\>/;'q;"	kind:pred
benchmarking.do_nothing	benchmarking.m	/^:- impure pred do_nothing(T::in) is det.$/;kq|/^\<do_nothing\>/;'q;"	kind:pred	file:
benchmarking.incr_ref	benchmarking.m	/^:- impure pred incr_ref(int_reference::in) is det.$/;kq|/^\<incr_ref\>/;'q;"	kind:pred	file:
benchmarking.int_reference	benchmarking.m	/^:- type int_reference ---> int_reference(private_builtin.ref(int)).$/;kq|-;/\<benchmarking.int_reference\>/;'q;"	kind:cons	file:
benchmarking.int_reference	benchmarking.m	/^:- type int_reference ---> int_reference(private_builtin.ref(int)).$/;kq|-;/\<benchmarking.int_reference\>/;'q;"	kind:type	file:
benchmarking.new_int_reference	benchmarking.m	/^:- impure pred new_int_reference(int::in, int_reference::out) is det.$/;kq|/^\<new_int_reference\>/;'q;"	kind:pred	file:
benchmarking.ref_value	benchmarking.m	/^:- semipure pred ref_value(int_reference::in, int::out) is det.$/;kq|/^\<ref_value\>/;'q;"	kind:pred	file:
benchmarking.repeat	benchmarking.m	/^:- impure pred repeat(int::in) is nondet.$/;kq|/^\<repeat\>/;'q;"	kind:pred	file:
benchmarking.report_stats	benchmarking.m	/^:- impure pred report_stats is det.$/;kq|/^\<report_stats\>/;'q;"	kind:pred
benchmarking.turn_on_profiling	benchmarking.m	/^:- impure pred turn_on_profiling is det.$/;kq|/^\<turn_on_profiling\>/;'q;"	kind:pred
benchmarking.turn_on_profiling	benchmarking.m	/^:- pred turn_on_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_on_profiling\>/;'q;"	kind:pred
benchmarking.update_ref	benchmarking.m	/^:- impure pred update_ref(int_reference::in, int::in) is det.$/;kq|/^\<update_ref\>/;'q;"	kind:pred	file:
between	string.m	/^:- func string.between(string::in, int::in, int::in) = (string::uo) is det.$/;kq|/^\<string.between\>/;'q;"	kind:func
between	string.m	/^:- pred string.between(string::in, int::in, int::in, string::uo) is det.$/;kq|/^\<string.between\>/;'q;"	kind:pred
between_codepoints	string.m	/^:- func string.between_codepoints(string::in, int::in, int::in)$/;kq|/^\<string.between_codepoints\>/;'q;"	kind:func
between_codepoints	string.m	/^:- pred string.between_codepoints(string::in, int::in, int::in, string::uo)$/;kq|/^\<string.between_codepoints\>/;'q;"	kind:pred
big_abs	integer.m	/^:- func big_abs(integer) = integer.$/;kq|/^\<big_abs\>/;'q;"	kind:func	file:
big_and	integer.m	/^:- func big_and(integer, integer) = integer.$/;kq|/^\<big_and\>/;'q;"	kind:func	file:
big_and_not	integer.m	/^:- func big_and_not(integer, integer) = integer.$/;kq|/^\<big_and_not\>/;'q;"	kind:func	file:
big_cmp	integer.m	/^:- func big_cmp(integer, integer) = comparison_result.$/;kq|/^\<big_cmp\>/;'q;"	kind:func	file:
big_div	integer.m	/^:- func big_div(integer, integer) = integer.$/;kq|/^\<big_div\>/;'q;"	kind:func	file:
big_integer	lexer.m	/^    ;       big_integer(string) % does not fit in int$/;kq|-;/\<big_integer\>/;'q;"	kind:cons
big_isnegative	integer.m	/^:- pred big_isnegative(integer::in) is semidet.$/;kq|/^\<big_isnegative\>/;'q;"	kind:pred	file:
big_iszero	integer.m	/^:- pred big_iszero(integer::in) is semidet.$/;kq|/^\<big_iszero\>/;'q;"	kind:pred	file:
big_left_shift	integer.m	/^:- func big_left_shift(integer, int) = integer.$/;kq|/^\<big_left_shift\>/;'q;"	kind:func	file:
big_mod	integer.m	/^:- func big_mod(integer, integer) = integer.$/;kq|/^\<big_mod\>/;'q;"	kind:func	file:
big_mul	integer.m	/^:- func big_mul(integer, integer) = integer.$/;kq|/^\<big_mul\>/;'q;"	kind:func	file:
big_neg	integer.m	/^:- func big_neg(integer) = integer.$/;kq|/^\<big_neg\>/;'q;"	kind:func	file:
big_or	integer.m	/^:- func big_or(integer, integer) = integer.$/;kq|/^\<big_or\>/;'q;"	kind:func	file:
big_plus	integer.m	/^:- func big_plus(integer, integer) = integer.$/;kq|/^\<big_plus\>/;'q;"	kind:func	file:
big_pow	integer.m	/^:- func big_pow(integer, integer) = integer.$/;kq|/^\<big_pow\>/;'q;"	kind:func	file:
big_quot	integer.m	/^:- func big_quot(integer, integer) = integer.$/;kq|/^\<big_quot\>/;'q;"	kind:func	file:
big_quot_rem	integer.m	/^:- pred big_quot_rem(integer::in, integer::in, integer::out,$/;kq|/^\<big_quot_rem\>/;'q;"	kind:pred	file:
big_rem	integer.m	/^:- func big_rem(integer, integer) = integer.$/;kq|/^\<big_rem\>/;'q;"	kind:func	file:
big_right_shift	integer.m	/^:- func big_right_shift(integer, int) = integer.$/;kq|/^\<big_right_shift\>/;'q;"	kind:func	file:
big_sign	integer.m	/^:- func big_sign(int, integer) = integer.$/;kq|/^\<big_sign\>/;'q;"	kind:func	file:
big_sqr	integer.m	/^:- func big_sqr(integer) = integer.$/;kq|/^\<big_sqr\>/;'q;"	kind:func	file:
big_xor	integer.m	/^:- func big_xor(integer, integer) = integer.$/;kq|/^\<big_xor\>/;'q;"	kind:func	file:
big_xor_not	integer.m	/^:- func big_xor_not(integer, integer) = integer.$/;kq|/^\<big_xor_not\>/;'q;"	kind:func	file:
bimap	bimap.m	/^    --->    bimap(map(K, V), map(V, K)).$/;kq|-;/\<bimap\>/;'q;"	kind:cons	file:
bimap	bimap.m	/^:- type bimap(K, V)$/;kq|-;/\<bimap\>/;'q;"	kind:type	file:
bimap.contains_key	bimap.m	/^:- pred bimap.contains_key(bimap(K, V)::in, K::in) is semidet.$/;kq|/^\<bimap.contains_key\>/;'q;"	kind:pred
bimap.contains_value	bimap.m	/^:- pred bimap.contains_value(bimap(K, V)::in, V::in) is semidet.$/;kq|/^\<bimap.contains_value\>/;'q;"	kind:pred
bimap.coordinates	bimap.m	/^:- func bimap.coordinates(bimap(K, V)) = list(V).$/;kq|/^\<bimap.coordinates\>/;'q;"	kind:func
bimap.coordinates	bimap.m	/^:- pred bimap.coordinates(bimap(K, V)::in, list(V)::out) is det.$/;kq|/^\<bimap.coordinates\>/;'q;"	kind:pred
bimap.count	bimap.m	/^:- func bimap.count(bimap(K, V)) = int.$/;kq|/^\<bimap.count\>/;'q;"	kind:func
bimap.delete_key	bimap.m	/^:- func bimap.delete_key(bimap(K, V), K) = bimap(K, V).$/;kq|/^\<bimap.delete_key\>/;'q;"	kind:func
bimap.delete_key	bimap.m	/^:- pred bimap.delete_key(K::in, bimap(K, V)::in, bimap(K, V)::out) is det.$/;kq|/^\<bimap.delete_key\>/;'q;"	kind:pred
bimap.delete_keys	bimap.m	/^:- func bimap.delete_keys(bimap(K, V), list(K)) = bimap(K, V).$/;kq|/^\<bimap.delete_keys\>/;'q;"	kind:func
bimap.delete_keys	bimap.m	/^:- pred bimap.delete_keys(list(K)::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.delete_keys\>/;'q;"	kind:pred
bimap.delete_value	bimap.m	/^:- func bimap.delete_value(bimap(K, V), V) = bimap(K, V).$/;kq|/^\<bimap.delete_value\>/;'q;"	kind:func
bimap.delete_value	bimap.m	/^:- pred bimap.delete_value(V::in, bimap(K, V)::in, bimap(K, V)::out) is det.$/;kq|/^\<bimap.delete_value\>/;'q;"	kind:pred
bimap.delete_values	bimap.m	/^:- func bimap.delete_values(bimap(K, V), list(V)) = bimap(K, V).$/;kq|/^\<bimap.delete_values\>/;'q;"	kind:func
bimap.delete_values	bimap.m	/^:- pred bimap.delete_values(list(V)::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.delete_values\>/;'q;"	kind:pred
bimap.det_from_assoc_list	bimap.m	/^:- func bimap.det_from_assoc_list(assoc_list(K, V)) = bimap(K, V).$/;kq|/^\<bimap.det_from_assoc_list\>/;'q;"	kind:func
bimap.det_from_assoc_list	bimap.m	/^:- pred bimap.det_from_assoc_list(assoc_list(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.det_from_assoc_list\>/;'q;"	kind:pred
bimap.det_insert	bimap.m	/^:- func bimap.det_insert(bimap(K, V), K, V) = bimap(K, V).$/;kq|/^\<bimap.det_insert\>/;'q;"	kind:func
bimap.det_insert	bimap.m	/^:- pred bimap.det_insert(K::in, V::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.det_insert\>/;'q;"	kind:pred
bimap.equal	bimap.m	/^:- pred bimap.equal(bimap(K, V)::in, bimap(K, V)::in) is semidet.$/;kq|/^\<bimap.equal\>/;'q;"	kind:pred
bimap.foldl	bimap.m	/^:- func bimap.foldl(func(K, V, A) = A, bimap(K, V), A) = A.$/;kq|/^\<bimap.foldl\>/;'q;"	kind:func
bimap.foldl	bimap.m	/^:- pred bimap.foldl(pred(K, V, A, A), bimap(K, V), A, A).$/;kq|/^\<bimap.foldl\>/;'q;"	kind:pred
bimap.foldl2	bimap.m	/^:- pred bimap.foldl2(pred(K, V, A, A, B, B), bimap(K, V), A, A, B, B).$/;kq|/^\<bimap.foldl2\>/;'q;"	kind:pred
bimap.foldl3	bimap.m	/^:- pred bimap.foldl3(pred(K, V, A, A, B, B, C, C), bimap(K, V),$/;kq|/^\<bimap.foldl3\>/;'q;"	kind:pred
bimap.forward_map	bimap.m	/^:- func bimap.forward_map(bimap(K, V)) = map(K, V).$/;kq|/^\<bimap.forward_map\>/;'q;"	kind:func
bimap.forward_search	bimap.m	/^:- func bimap.forward_search(bimap(K, V), K) = V is semidet.$/;kq|/^\<bimap.forward_search\>/;'q;"	kind:func
bimap.forward_search	bimap.m	/^:- pred bimap.forward_search(bimap(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<bimap.forward_search\>/;'q;"	kind:pred
bimap.from_assoc_list	bimap.m	/^:- func bimap.from_assoc_list(assoc_list(K, V)) = bimap(K, V) is semidet.$/;kq|/^\<bimap.from_assoc_list\>/;'q;"	kind:func
bimap.from_assoc_list	bimap.m	/^:- pred bimap.from_assoc_list(assoc_list(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.from_assoc_list\>/;'q;"	kind:pred
bimap.from_corresponding_lists	bimap.m	/^:- func bimap.from_corresponding_lists(list(K), list(V)) = bimap(K, V)$/;kq|/^\<bimap.from_corresponding_lists\>/;'q;"	kind:func
bimap.from_corresponding_lists	bimap.m	/^:- pred bimap.from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<bimap.from_corresponding_lists\>/;'q;"	kind:pred
bimap.init	bimap.m	/^:- func bimap.init = bimap(K, V).$/;kq|/^\<bimap.init\>/;'q;"	kind:func
bimap.init	bimap.m	/^:- pred bimap.init(bimap(K, V)::out) is det.$/;kq|/^\<bimap.init\>/;'q;"	kind:pred
bimap.insert	bimap.m	/^:- func bimap.insert(bimap(K, V), K, V) = bimap(K, V) is semidet.$/;kq|/^\<bimap.insert\>/;'q;"	kind:func
bimap.insert	bimap.m	/^:- pred bimap.insert(K::in, V::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.insert\>/;'q;"	kind:pred
bimap.insert_from_assoc_list	bimap.m	/^:- func bimap.insert_from_assoc_list(assoc_list(K, V), bimap(K, V)) =$/;kq|/^\<bimap.insert_from_assoc_list\>/;'q;"	kind:func
bimap.insert_from_assoc_list	bimap.m	/^:- pred bimap.insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<bimap.insert_from_assoc_list\>/;'q;"	kind:pred
bimap.is_empty	bimap.m	/^:- pred bimap.is_empty(bimap(K, V)::in) is semidet.$/;kq|/^\<bimap.is_empty\>/;'q;"	kind:pred
bimap.lookup	bimap.m	/^:- func bimap.lookup(bimap(K, V), K) = V.$/;kq|/^\<bimap.lookup\>/;'q;"	kind:func
bimap.lookup	bimap.m	/^:- pred bimap.lookup(bimap(K, V)::in, K::in, V::out) is det.$/;kq|/^\<bimap.lookup\>/;'q;"	kind:pred
bimap.map_keys	bimap.m	/^:- func bimap.map_keys(func(V, K) = L, bimap(K, V)) = bimap(L, V).$/;kq|/^\<bimap.map_keys\>/;'q;"	kind:func
bimap.map_keys	bimap.m	/^:- pred bimap.map_keys(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_keys\>/;'q;"	kind:pred
bimap.map_keys_2	bimap.m	/^:- pred bimap.map_keys_2(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_keys_2\>/;'q;"	kind:pred	file:
bimap.map_keys_func_2	bimap.m	/^:- pred bimap.map_keys_func_2(func(V, K) = L::in(func(in, in) = out is det),$/;kq|/^\<bimap.map_keys_func_2\>/;'q;"	kind:pred	file:
bimap.map_values	bimap.m	/^:- func bimap.map_values(func(K, V) = W, bimap(K, V)) = bimap(K, W).$/;kq|/^\<bimap.map_values\>/;'q;"	kind:func
bimap.map_values	bimap.m	/^:- pred bimap.map_values(pred(K, V, W)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_values\>/;'q;"	kind:pred
bimap.map_values_2	bimap.m	/^:- pred bimap.map_values_2(pred(K, V, W)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_values_2\>/;'q;"	kind:pred	file:
bimap.map_values_func_2	bimap.m	/^:- pred bimap.map_values_func_2(func(K, V) = W::in(func(in, in) = out is det),$/;kq|/^\<bimap.map_values_func_2\>/;'q;"	kind:pred	file:
bimap.ordinates	bimap.m	/^:- func bimap.ordinates(bimap(K, V)) = list(K).$/;kq|/^\<bimap.ordinates\>/;'q;"	kind:func
bimap.ordinates	bimap.m	/^:- pred bimap.ordinates(bimap(K, V)::in, list(K)::out) is det.$/;kq|/^\<bimap.ordinates\>/;'q;"	kind:pred
bimap.overlay	bimap.m	/^:- func bimap.overlay(bimap(K, V), bimap(K, V)) = bimap(K, V).$/;kq|/^\<bimap.overlay\>/;'q;"	kind:func
bimap.overlay	bimap.m	/^:- pred bimap.overlay(bimap(K, V)::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.overlay\>/;'q;"	kind:pred
bimap.overlay_2	bimap.m	/^:- pred bimap.overlay_2(assoc_list(K, V)::in, bimap(K, V)::in,$/;kq|/^\<bimap.overlay_2\>/;'q;"	kind:pred	file:
bimap.reverse_lookup	bimap.m	/^:- func bimap.reverse_lookup(bimap(K, V), V) = K.$/;kq|/^\<bimap.reverse_lookup\>/;'q;"	kind:func
bimap.reverse_lookup	bimap.m	/^:- pred bimap.reverse_lookup(bimap(K, V)::in, K::out, V::in) is det.$/;kq|/^\<bimap.reverse_lookup\>/;'q;"	kind:pred
bimap.reverse_map	bimap.m	/^:- func bimap.reverse_map(bimap(K, V)) = map(V, K).$/;kq|/^\<bimap.reverse_map\>/;'q;"	kind:func
bimap.reverse_search	bimap.m	/^:- func bimap.reverse_search(bimap(K, V), V) = K is semidet.$/;kq|/^\<bimap.reverse_search\>/;'q;"	kind:func
bimap.reverse_search	bimap.m	/^:- pred bimap.reverse_search(bimap(K, V)::in, K::out, V::in) is semidet.$/;kq|/^\<bimap.reverse_search\>/;'q;"	kind:pred
bimap.search	bimap.m	/^:- pred bimap.search(bimap(K, V), K, V).$/;kq|/^\<bimap.search\>/;'q;"	kind:pred
bimap.search_insert	bimap.m	/^:- pred bimap.search_insert(K::in, V::in, maybe(V)::out,$/;kq|/^\<bimap.search_insert\>/;'q;"	kind:pred
bimap.set	bimap.m	/^:- func bimap.set(bimap(K, V), K, V) = bimap(K, V).$/;kq|/^\<bimap.set\>/;'q;"	kind:func
bimap.set	bimap.m	/^:- pred bimap.set(K::in, V::in, bimap(K, V)::in, bimap(K, V)::out) is det.$/;kq|/^\<bimap.set\>/;'q;"	kind:pred
bimap.set_from_assoc_list	bimap.m	/^:- func bimap.set_from_assoc_list(assoc_list(K, V), bimap(K, V))$/;kq|/^\<bimap.set_from_assoc_list\>/;'q;"	kind:func
bimap.set_from_assoc_list	bimap.m	/^:- pred bimap.set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<bimap.set_from_assoc_list\>/;'q;"	kind:pred
bimap.singleton	bimap.m	/^:- func bimap.singleton(K, V) = bimap(K, V).$/;kq|/^\<bimap.singleton\>/;'q;"	kind:func
bimap.to_assoc_list	bimap.m	/^:- func bimap.to_assoc_list(bimap(K, V)) = assoc_list(K, V).$/;kq|/^\<bimap.to_assoc_list\>/;'q;"	kind:func
bimap.to_assoc_list	bimap.m	/^:- pred bimap.to_assoc_list(bimap(K, V)::in, assoc_list(K, V)::out) is det.$/;kq|/^\<bimap.to_assoc_list\>/;'q;"	kind:pred
binary	io.m	/^    ;       binary$/;kq|-;/\<binary\>/;'q;"	kind:cons
binary_input_stream	io.m	/^:- pred io.binary_input_stream(io.binary_input_stream::out,$/;kq|/^\<io.binary_input_stream\>/;'q;"	kind:pred
binary_input_stream	io.m	/^:- type io.binary_input_stream ---> binary_input_stream(io.stream).$/;kq|-;/\<binary_input_stream\>/;'q;"	kind:cons	file:
binary_input_stream	io.m	/^:- type io.binary_input_stream ---> binary_input_stream(io.stream).$/;kq|-;/\<binary_input_stream\>/;'q;"	kind:type	file:
binary_input_stream_2	io.m	/^:- pred io.binary_input_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_input_stream_2\>/;'q;"	kind:pred	file:
binary_input_stream_file_size	io.m	/^:- pred io.binary_input_stream_file_size(io.binary_input_stream::in, int::out,$/;kq|/^\<io.binary_input_stream_file_size\>/;'q;"	kind:pred	file:
binary_input_stream_foldl	io.m	/^:- pred io.binary_input_stream_foldl(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl\>/;'q;"	kind:pred
binary_input_stream_foldl	io.m	/^:- pred io.binary_input_stream_foldl(pred(int, T, T),$/;kq|/^\<io.binary_input_stream_foldl\>/;'q;"	kind:pred
binary_input_stream_foldl2_io	io.m	/^:- pred io.binary_input_stream_foldl2_io($/;kq|/^\<io.binary_input_stream_foldl2_io\>/;'q;"	kind:pred
binary_input_stream_foldl2_io	io.m	/^:- pred io.binary_input_stream_foldl2_io(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl2_io\>/;'q;"	kind:pred
binary_input_stream_foldl2_io_chunk	io.m	/^:- pred io.binary_input_stream_foldl2_io_chunk(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl2_io_chunk\>/;'q;"	kind:pred	file:
binary_input_stream_foldl2_io_inner	io.m	/^:- pred io.binary_input_stream_foldl2_io_inner(int, io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl2_io_inner\>/;'q;"	kind:pred	file:
binary_input_stream_foldl2_io_maybe_stop	io.m	/^:- pred io.binary_input_stream_foldl2_io_maybe_stop($/;kq|/^\<io.binary_input_stream_foldl2_io_maybe_stop\>/;'q;"	kind:pred
binary_input_stream_foldl2_io_maybe_stop	io.m	/^:- pred io.binary_input_stream_foldl2_io_maybe_stop(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl2_io_maybe_stop\>/;'q;"	kind:pred
binary_input_stream_foldl2_io_maybe_stop_chunk	io.m	/^:- pred io.binary_input_stream_foldl2_io_maybe_stop_chunk($/;kq|/^\<io.binary_input_stream_foldl2_io_maybe_stop_chunk\>/;'q;"	kind:pred	file:
binary_input_stream_foldl2_io_maybe_stop_inner	io.m	/^:- pred io.binary_input_stream_foldl2_io_maybe_stop_inner(int,$/;kq|/^\<io.binary_input_stream_foldl2_io_maybe_stop_inner\>/;'q;"	kind:pred	file:
binary_input_stream_foldl2_io_maybe_stop_plain	io.m	/^:- pred io.binary_input_stream_foldl2_io_maybe_stop_plain($/;kq|/^\<io.binary_input_stream_foldl2_io_maybe_stop_plain\>/;'q;"	kind:pred	file:
binary_input_stream_foldl2_io_plain	io.m	/^:- pred io.binary_input_stream_foldl2_io_plain(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl2_io_plain\>/;'q;"	kind:pred	file:
binary_input_stream_foldl_io	io.m	/^:- pred io.binary_input_stream_foldl_io(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl_io\>/;'q;"	kind:pred
binary_input_stream_foldl_io	io.m	/^:- pred io.binary_input_stream_foldl_io(pred(int, io, io),$/;kq|/^\<io.binary_input_stream_foldl_io\>/;'q;"	kind:pred
binary_input_stream_foldl_io_chunk	io.m	/^:- pred io.binary_input_stream_foldl_io_chunk(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl_io_chunk\>/;'q;"	kind:pred	file:
binary_input_stream_foldl_io_inner	io.m	/^:- pred io.binary_input_stream_foldl_io_inner(int, io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl_io_inner\>/;'q;"	kind:pred	file:
binary_input_stream_foldl_io_plain	io.m	/^:- pred io.binary_input_stream_foldl_io_plain(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl_io_plain\>/;'q;"	kind:pred	file:
binary_input_stream_info	io.m	/^:- func io.binary_input_stream_info(io.stream_db, io.binary_input_stream)$/;kq|/^\<io.binary_input_stream_info\>/;'q;"	kind:func
binary_input_stream_name	io.m	/^:- pred io.binary_input_stream_name(io.binary_input_stream::in, string::out,$/;kq|/^\<io.binary_input_stream_name\>/;'q;"	kind:pred
binary_input_stream_name	io.m	/^:- pred io.binary_input_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_input_stream_name\>/;'q;"	kind:pred
binary_input_stream_offset	io.m	/^:- pred io.binary_input_stream_offset(io.binary_input_stream::in, int::out,$/;kq|/^\<io.binary_input_stream_offset\>/;'q;"	kind:pred
binary_output_stream	io.m	/^:- pred io.binary_output_stream(io.binary_output_stream::out,$/;kq|/^\<io.binary_output_stream\>/;'q;"	kind:pred
binary_output_stream	io.m	/^:- type io.binary_output_stream ---> binary_output_stream(io.stream).$/;kq|-;/\<binary_output_stream\>/;'q;"	kind:cons	file:
binary_output_stream	io.m	/^:- type io.binary_output_stream ---> binary_output_stream(io.stream).$/;kq|-;/\<binary_output_stream\>/;'q;"	kind:type	file:
binary_output_stream_2	io.m	/^:- pred io.binary_output_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_output_stream_2\>/;'q;"	kind:pred	file:
binary_output_stream_info	io.m	/^:- func io.binary_output_stream_info(io.stream_db, io.binary_output_stream)$/;kq|/^\<io.binary_output_stream_info\>/;'q;"	kind:func
binary_output_stream_name	io.m	/^:- pred io.binary_output_stream_name(io.binary_output_stream::in,$/;kq|/^\<io.binary_output_stream_name\>/;'q;"	kind:pred
binary_output_stream_name	io.m	/^:- pred io.binary_output_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_output_stream_name\>/;'q;"	kind:pred
binary_output_stream_offset	io.m	/^:- pred io.binary_output_stream_offset(io.binary_output_stream::in, int::out,$/;kq|/^\<io.binary_output_stream_offset\>/;'q;"	kind:pred
binary_prefix	ops.m	/^    ;       binary_prefix(ops.assoc, ops.assoc)     % Op term term$/;kq|-;/\<binary_prefix\>/;'q;"	kind:cons
binary_search	array.m	/^:- pred array.binary_search(array(T)::array_ui,$/;kq|/^\<array.binary_search\>/;'q;"	kind:pred
binary_search	array.m	/^:- pred array.binary_search(comparison_func(T)::in, array(T)::array_ui,$/;kq|/^\<array.binary_search\>/;'q;"	kind:pred
binary_stream_offset_2	io.m	/^:- pred io.binary_stream_offset_2(io.stream::in, int::out,$/;kq|/^\<io.binary_stream_offset_2\>/;'q;"	kind:pred	file:
bind_var	varset.m	/^:- func varset.bind_var(varset(T), var(T), term(T)) = varset(T).$/;kq|/^\<varset.bind_var\>/;'q;"	kind:func
bind_var	varset.m	/^:- pred varset.bind_var(var(T)::in, term(T)::in,$/;kq|/^\<varset.bind_var\>/;'q;"	kind:pred
bind_vars	varset.m	/^:- func varset.bind_vars(varset(T), substitution(T)) = varset(T).$/;kq|/^\<varset.bind_vars\>/;'q;"	kind:func
bind_vars	varset.m	/^:- pred varset.bind_vars(substitution(T)::in,$/;kq|/^\<varset.bind_vars\>/;'q;"	kind:pred
bind_vars_2	varset.m	/^:- pred varset.bind_vars_2(assoc_list(var(T), term(T))::in, varset(T)::in,$/;kq|/^\<varset.bind_vars_2\>/;'q;"	kind:pred	file:
bit_buffer	bit_buffer.m	/^    --->    bit_buffer($/;kq|-;/\<bit_buffer\>/;'q;"	kind:cons	file:
bit_buffer	bit_buffer.m	/^:- type bit_buffer(Stream, State) == bit_buffer(Stream, State, {}).$/;kq|-;/\<bit_buffer\>/;'q;"	kind:type	file:
bit_buffer	bit_buffer.m	/^:- type bit_buffer(Stream, State, Error)$/;kq|-;/\<bit_buffer\>/;'q;"	kind:type	file:
bit_buffer(Stream, _, _	bit_buffer.m	/^:- func (bit_buffer(Stream, _, _)::bit_buffer_ui) ^ stream =$/;kq|/^\<bit_buffer(Stream, _, _\>/;'q;"	kind:func	file:
bit_buffer(_, State, _	bit_buffer.m	/^:- func (bit_buffer(_, State, _)::bit_buffer_ui) ^ state = (State::uo) is det.$/;kq|/^\<bit_buffer(_, State, _\>/;'q;"	kind:func	file:
bit_buffer(_, _, Error	bit_buffer.m	/^:- func (bit_buffer(_, _, Error)::bit_buffer_ui) ^ read_status =$/;kq|/^\<bit_buffer(_, _, Error\>/;'q;"	kind:func	file:
bit_buffer(_, _, _	bit_buffer.m	/^:- func (bit_buffer(_, _, _)::bit_buffer_ui) ^ bitmap =$/;kq|/^\<bit_buffer(_, _, _\>/;'q;"	kind:func	file:
bit_buffer(_, _, _	bit_buffer.m	/^:- func (bit_buffer(_, _, _)::bit_buffer_ui) ^ filled_bitmaps =$/;kq|/^\<bit_buffer(_, _, _\>/;'q;"	kind:func	file:
bit_buffer(_, _, _	bit_buffer.m	/^:- func (bit_buffer(_, _, _)::bit_buffer_ui) ^ pos = (int::out) is det.$/;kq|/^\<bit_buffer(_, _, _\>/;'q;"	kind:func	file:
bit_buffer(_, _, _	bit_buffer.m	/^:- func (bit_buffer(_, _, _)::bit_buffer_ui) ^ size = (int::out) is det.$/;kq|/^\<bit_buffer(_, _, _\>/;'q;"	kind:func	file:
bit_buffer(_, _, _	bit_buffer.m	/^:- func (bit_buffer(_, _, _)::bit_buffer_ui) ^ use_stream = (bool::out) is det.$/;kq|/^\<bit_buffer(_, _, _\>/;'q;"	kind:func	file:
bit_buffer.error_state	bit_buffer.m	/^:- type error_state ---> error_state.$/;kq|-;/\<bit_buffer.error_state\>/;'q;"	kind:cons
bit_buffer.error_state	bit_buffer.m	/^:- type error_state ---> error_state.$/;kq|-;/\<bit_buffer.error_state\>/;'q;"	kind:type
bit_buffer.error_stream	bit_buffer.m	/^:- type error_stream ---> error_stream.$/;kq|-;/\<bit_buffer.error_stream\>/;'q;"	kind:cons
bit_buffer.error_stream	bit_buffer.m	/^:- type error_stream ---> error_stream.$/;kq|-;/\<bit_buffer.error_stream\>/;'q;"	kind:type
bit_buffer.error_stream_error	bit_buffer.m	/^:- type error_stream_error ---> error_stream_error.$/;kq|-;/\<bit_buffer.error_stream_error\>/;'q;"	kind:cons
bit_buffer.error_stream_error	bit_buffer.m	/^:- type error_stream_error ---> error_stream_error.$/;kq|-;/\<bit_buffer.error_stream_error\>/;'q;"	kind:type
bit_buffer.mer_bitmap	bit_buffer.m	/^                mer_bitmap :: bitmap,$/;kq|-;/\<bit_buffer.mer_bitmap\>/;'q;"	kind:fld	file:
bit_buffer.mer_filled_bitmaps	bit_buffer.m	/^                mer_filled_bitmaps :: list(bitmap),$/;kq|-;/\<bit_buffer.mer_filled_bitmaps\>/;'q;"	kind:fld	file:
bit_buffer.mer_pos	bit_buffer.m	/^                mer_pos :: bit_index,$/;kq|-;/\<bit_buffer.mer_pos\>/;'q;"	kind:fld	file:
bit_buffer.mer_read_status	bit_buffer.m	/^                mer_read_status :: stream.res(Error)$/;kq|-;/\<bit_buffer.mer_read_status\>/;'q;"	kind:fld	file:
bit_buffer.mer_size	bit_buffer.m	/^                mer_size :: num_bits,$/;kq|-;/\<bit_buffer.mer_size\>/;'q;"	kind:fld	file:
bit_buffer.mer_state	bit_buffer.m	/^                mer_state :: State,$/;kq|-;/\<bit_buffer.mer_state\>/;'q;"	kind:fld	file:
bit_buffer.mer_stream	bit_buffer.m	/^                mer_stream :: Stream,$/;kq|-;/\<bit_buffer.mer_stream\>/;'q;"	kind:fld	file:
bit_buffer.mer_use_stream	bit_buffer.m	/^                mer_use_stream :: bool,$/;kq|-;/\<bit_buffer.mer_use_stream\>/;'q;"	kind:fld	file:
bit_buffer.new_buffer	bit_buffer.m	/^:- func new_buffer(bitmap, bit_index, num_bits, bool, Stream, State) =$/;kq|/^\<new_buffer\>/;'q;"	kind:func	file:
bit_buffer.new_buffer_2	bit_buffer.m	/^:- func new_buffer_2(bitmap, num_bits, bit_index, bool,$/;kq|/^\<new_buffer_2\>/;'q;"	kind:func	file:
bit_buffer.read.buffer_status	bit_buffer.read.m	/^:- pred buffer_status(stream.result(Error),$/;kq|/^\<buffer_status\>/;'q;"	kind:pred
bit_buffer.read.do_get_bits	bit_buffer.read.m	/^:- pred do_get_bits(bit_index::in, num_bits::in, word::in, word::out,$/;kq|/^\<do_get_bits\>/;'q;"	kind:pred	file:
bit_buffer.read.finalize	bit_buffer.read.m	/^:- pred finalize(read_buffer(Stream, State, Error), Stream, State,$/;kq|/^\<finalize\>/;'q;"	kind:pred
bit_buffer.read.get_bit	bit_buffer.read.m	/^:- pred get_bit(stream.result(bool, Error), read_buffer(Stream, State, Error),$/;kq|/^\<get_bit\>/;'q;"	kind:pred
bit_buffer.read.get_bitmap	bit_buffer.read.m	/^:- pred get_bitmap(bit_index, num_bits, bitmap, bitmap, num_bits,$/;kq|/^\<get_bitmap\>/;'q;"	kind:pred
bit_buffer.read.get_bitmap	bit_buffer.read.m	/^:- pred get_bitmap(bitmap, bitmap, num_bits,$/;kq|/^\<get_bitmap\>/;'q;"	kind:pred
bit_buffer.read.get_bits	bit_buffer.read.m	/^:- pred get_bits(bit_index, num_bits, word, word, num_bits,$/;kq|/^\<get_bits\>/;'q;"	kind:pred
bit_buffer.read.io_read_buffer	bit_buffer.read.m	/^:- type io_read_buffer ==$/;kq|-;/\<bit_buffer.read.io_read_buffer\>/;'q;"	kind:type
bit_buffer.read.new	bit_buffer.read.m	/^:- func new(num_bytes, Stream, State) = read_buffer(Stream, State, Error)$/;kq|/^\<new\>/;'q;"	kind:func
bit_buffer.read.r	bit_buffer.read.m	/^    ---> read_buffer(bit_buffer :: bit_buffer(Stream, State, Error)).$/;kq|-;/\<bit_buffer.read.r\>/;'q;"	kind:fld	file:
bit_buffer.read.read_buffer	bit_buffer.read.m	/^    ---> read_buffer(bit_buffer :: bit_buffer(Stream, State, Error)).$/;kq|-;/\<bit_buffer.read.read_buffer\>/;'q;"	kind:cons	file:
bit_buffer.read.read_buffer	bit_buffer.read.m	/^:- type read_buffer ==$/;kq|-;/\<bit_buffer.read.read_buffer\>/;'q;"	kind:type
bit_buffer.read.read_buffer	bit_buffer.read.m	/^:- type read_buffer(Stream, State, Error)$/;kq|-;/\<bit_buffer.read.read_buffer\>/;'q;"	kind:type	file:
bit_buffer.read.read_buffer_di	bit_buffer.read.m	/^:- mode read_buffer_di == in(uniq_read_buffer).$/;kq|-;/\<bit_buffer.read.read_buffer_di\>/;'q;"	kind:mode
bit_buffer.read.read_buffer_ui	bit_buffer.read.m	/^:- mode read_buffer_ui == in(uniq_read_buffer).$/;kq|-;/\<bit_buffer.read.read_buffer_ui\>/;'q;"	kind:mode
bit_buffer.read.read_buffer_uo	bit_buffer.read.m	/^:- mode read_buffer_uo == out(uniq_read_buffer).$/;kq|-;/\<bit_buffer.read.read_buffer_uo\>/;'q;"	kind:mode
bit_buffer.read.read_stream	bit_buffer.read.m	/^    ---> read_stream.$/;kq|-;/\<bit_buffer.read.read_stream\>/;'q;"	kind:cons
bit_buffer.read.read_stream	bit_buffer.read.m	/^:- type read_stream(Stream)$/;kq|-;/\<bit_buffer.read.read_stream\>/;'q;"	kind:type
bit_buffer.read.stream.input	bit_buffer.read.m	/^:- instance stream.input(read_stream(Stream, Error),$/;kq|-;/\<bit_buffer.read.stream.input\>/;'q;"	kind:tci
bit_buffer.read.stream.reader	bit_buffer.read.m	/^:- instance stream.reader(read_stream(Stream, Error), bool,$/;kq|-;/\<bit_buffer.read.stream.reader\>/;'q;"	kind:tci
bit_buffer.read.stream.stream	bit_buffer.read.m	/^:- instance stream.stream(read_stream(Stream, Error),$/;kq|-;/\<bit_buffer.read.stream.stream\>/;'q;"	kind:tci
bit_buffer.set_all	bit_buffer.m	/^:- pred set_all(bitmap::bitmap_di, bit_index::in, num_bits::in, State::di,$/;kq|/^\<set_all\>/;'q;"	kind:pred	file:
bit_buffer.set_bitmap	bit_buffer.m	/^:- pred set_bitmap(bitmap::bitmap_di, bit_index::in,$/;kq|/^\<set_bitmap\>/;'q;"	kind:pred	file:
bit_buffer.set_read_status	bit_buffer.m	/^:- pred set_read_status(stream.res(Error)::in,$/;kq|/^\<set_read_status\>/;'q;"	kind:pred	file:
bit_buffer.set_state	bit_buffer.m	/^:- pred set_state(State::di,$/;kq|/^\<set_state\>/;'q;"	kind:pred	file:
bit_buffer.set_use_stream	bit_buffer.m	/^:- pred set_use_stream(bool::in,$/;kq|/^\<set_use_stream\>/;'q;"	kind:pred	file:
bit_buffer.stream.bulk_reader	bit_buffer.m	/^:- instance stream.bulk_reader(error_stream, byte_index, bitmap,$/;kq|-;/\<bit_buffer.stream.bulk_reader\>/;'q;"	kind:tci
bit_buffer.stream.bulk_reader	bit_buffer.m	/^:- instance stream.bulk_reader(error_stream, byte_index, bitmap,$/;kq|-;/\<bit_buffer.stream.bulk_reader\>/;'q;"	kind:tci	file:
bit_buffer.stream.error	bit_buffer.m	/^:- instance stream.error(error_stream_error) where$/;kq|-;/\<bit_buffer.stream.error\>/;'q;"	kind:tci	file:
bit_buffer.stream.input	bit_buffer.m	/^:- instance stream.input(error_stream, error_state) where$/;kq|-;/\<bit_buffer.stream.input\>/;'q;"	kind:tci	file:
bit_buffer.stream.output	bit_buffer.m	/^:- instance stream.output(error_stream, error_state) where$/;kq|-;/\<bit_buffer.stream.output\>/;'q;"	kind:tci	file:
bit_buffer.stream.stream	bit_buffer.m	/^:- instance stream.stream(error_stream, error_state) where$/;kq|-;/\<bit_buffer.stream.stream\>/;'q;"	kind:tci	file:
bit_buffer.stream.writer	bit_buffer.m	/^:- instance stream.writer(error_stream, bitmap.slice, error_state)$/;kq|-;/\<bit_buffer.stream.writer\>/;'q;"	kind:tci	file:
bit_buffer.write.finalize	bit_buffer.write.m	/^:- pred finalize(write_buffer(Stream, State), Stream, State)$/;kq|/^\<finalize\>/;'q;"	kind:pred
bit_buffer.write.flush	bit_buffer.write.m	/^:- pred flush(write_buffer(Stream, State), write_buffer(Stream, State))$/;kq|/^\<flush\>/;'q;"	kind:pred
bit_buffer.write.make_room	bit_buffer.write.m	/^:- pred make_room(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<make_room\>/;'q;"	kind:pred
bit_buffer.write.new	bit_buffer.write.m	/^:- func new(num_bytes, Stream, State) = write_buffer(Stream, State)$/;kq|/^\<new\>/;'q;"	kind:func
bit_buffer.write.put_bit	bit_buffer.write.m	/^:- pred put_bit(bool, write_buffer(Stream, State), write_buffer(Stream, State))$/;kq|/^\<put_bit\>/;'q;"	kind:pred
bit_buffer.write.put_bitmap	bit_buffer.write.m	/^:- pred put_bitmap(bitmap, bit_index, num_bits,$/;kq|/^\<put_bitmap\>/;'q;"	kind:pred
bit_buffer.write.put_bitmap	bit_buffer.write.m	/^:- pred put_bitmap(bitmap, write_buffer(Stream, State),$/;kq|/^\<put_bitmap\>/;'q;"	kind:pred
bit_buffer.write.put_bitmap_2	bit_buffer.write.m	/^:- pred put_bitmap_2(bitmap, bit_index, num_bits,$/;kq|/^\<put_bitmap_2\>/;'q;"	kind:pred
bit_buffer.write.put_bits	bit_buffer.write.m	/^:- pred put_bits(word, num_bits, write_buffer(Stream, State),$/;kq|/^\<put_bits\>/;'q;"	kind:pred
bit_buffer.write.put_byte	bit_buffer.write.m	/^:- pred put_byte(word, write_buffer(Stream, State),$/;kq|/^\<put_byte\>/;'q;"	kind:pred
bit_buffer.write.r	bit_buffer.write.m	/^        ---> write_buffer(bit_buffer :: bit_buffer(Stream, State)).$/;kq|-;/\<bit_buffer.write.r\>/;'q;"	kind:fld
bit_buffer.write.stream.output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<bit_buffer.write.stream.output\>/;'q;"	kind:tci
bit_buffer.write.stream.output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<bit_buffer.write.stream.output\>/;'q;"	kind:tci
bit_buffer.write.stream.stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<bit_buffer.write.stream.stream\>/;'q;"	kind:tci
bit_buffer.write.stream.stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<bit_buffer.write.stream.stream\>/;'q;"	kind:tci
bit_buffer.write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<bit_buffer.write.stream.writer\>/;'q;"	kind:tci
bit_buffer.write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<bit_buffer.write.stream.writer\>/;'q;"	kind:tci
bit_buffer.write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<bit_buffer.write.stream.writer\>/;'q;"	kind:tci
bit_buffer.write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<bit_buffer.write.stream.writer\>/;'q;"	kind:tci
bit_buffer.write.write_buffer	bit_buffer.write.m	/^        ---> write_buffer(bit_buffer :: bit_buffer(Stream, State)).$/;kq|-;/\<bit_buffer.write.write_buffer\>/;'q;"	kind:cons
bit_buffer.write.write_buffer	bit_buffer.write.m	/^:- type write_buffer == write_buffer(error_stream, error_state).$/;kq|-;/\<bit_buffer.write.write_buffer\>/;'q;"	kind:type
bit_buffer.write.write_buffer	bit_buffer.write.m	/^:- type write_buffer(Stream, State)$/;kq|-;/\<bit_buffer.write.write_buffer\>/;'q;"	kind:type
bit_buffer.write.write_stream	bit_buffer.write.m	/^:- type write_stream(Stream) ---> write_stream.$/;kq|-;/\<bit_buffer.write.write_stream\>/;'q;"	kind:cons
bit_buffer.write.write_stream	bit_buffer.write.m	/^:- type write_stream(Stream) ---> write_stream.$/;kq|-;/\<bit_buffer.write.write_stream\>/;'q;"	kind:type
bit_buffer_di	bit_buffer.m	/^:- mode bit_buffer_di == in.$/;kq|-;/\<bit_buffer_di\>/;'q;"	kind:mode	file:
bit_buffer_ui	bit_buffer.m	/^:- mode bit_buffer_ui == in.$/;kq|-;/\<bit_buffer_ui\>/;'q;"	kind:mode	file:
bit_buffer_uo	bit_buffer.m	/^:- mode bit_buffer_uo == out.$/;kq|-;/\<bit_buffer_uo\>/;'q;"	kind:mode	file:
bit_index	bitmap.m	/^:- type bit_index == int.$/;kq|-;/\<bit_index\>/;'q;"	kind:type
bit_index_in_byte	bitmap.m	/^:- func bit_index_in_byte(bit_index) = bit_index_in_byte.$/;kq|/^\<bit_index_in_byte\>/;'q;"	kind:func	file:
bit_index_in_byte	bitmap.m	/^:- type bit_index_in_byte == int.$/;kq|-;/\<bit_index_in_byte\>/;'q;"	kind:type	file:
bitmap	bitmap.m	/^    --->    bitmap.slice_ctor($/;kq|-;/\<bitmap\>/;'q;"	kind:cons	file:
bitmap	bitmap.m	/^:- func bitmap      ^ bit(bit_index)    = bool.$/;kq|/^\<bitmap\>/;'q;"	kind:func
bitmap	bitmap.m	/^:- func bitmap      ^ bits(bit_index, num_bits) = word.$/;kq|/^\<bitmap\>/;'q;"	kind:func
bitmap	bitmap.m	/^:- func bitmap      ^ byte(byte_index) = byte.$/;kq|/^\<bitmap\>/;'q;"	kind:func
bitmap	bitmap.m	/^:- func bitmap      ^ unsafe_bit(bit_index) = bool.$/;kq|/^\<bitmap\>/;'q;"	kind:func
bitmap	bitmap.m	/^:- func bitmap      ^ unsafe_bits(bit_index, num_bits)  = word.$/;kq|/^\<bitmap\>/;'q;"	kind:func
bitmap	bitmap.m	/^:- func bitmap      ^ unsafe_byte(byte_index)   = byte.$/;kq|/^\<bitmap\>/;'q;"	kind:func
bitmap	bitmap.m	/^:- inst bitmap == ground.$/;kq|-;/\<bitmap\>/;'q;"	kind:inst
bitmap ^ bit(bit_index	bitmap.m	/^:- func (bitmap     ^ bit(bit_index)    := bool)    = bitmap.$/;kq|/^\<bitmap ^ bit(bit_index\>/;'q;"	kind:func
bitmap ^ bits(bit_index, num_bits	bitmap.m	/^:- func (bitmap     ^ bits(bit_index, num_bits) := word) = bitmap.$/;kq|/^\<bitmap ^ bits(bit_index, num_bits\>/;'q;"	kind:func
bitmap ^ byte(byte_index	bitmap.m	/^:- func (bitmap     ^ byte(byte_index)  := byte) = bitmap.$/;kq|/^\<bitmap ^ byte(byte_index\>/;'q;"	kind:func
bitmap ^ unsafe_bit(bit_index	bitmap.m	/^:- func (bitmap     ^ unsafe_bit(bit_index) := bool) = bitmap.$/;kq|/^\<bitmap ^ unsafe_bit(bit_index\>/;'q;"	kind:func
bitmap ^ unsafe_bits(bit_index, num_bits	bitmap.m	/^:- func (bitmap     ^ unsafe_bits(bit_index, num_bits) := word) = bitmap.$/;kq|/^\<bitmap ^ unsafe_bits(bit_index, num_bits\>/;'q;"	kind:func
bitmap ^ unsafe_byte(byte_index	bitmap.m	/^:- func (bitmap     ^ unsafe_byte(byte_index)   := byte) = bitmap.$/;kq|/^\<bitmap ^ unsafe_byte(byte_index\>/;'q;"	kind:func
bitmap.'num_bits	bitmap.m	/^:- func 'num_bits :='(bitmap, num_bits) = bitmap.$/;kq|/^\<'num_bits\>/;'q;"	kind:func	file:
bitmap.allocate_bitmap	bitmap.m	/^:- func allocate_bitmap(num_bits) = bitmap.$/;kq|/^\<allocate_bitmap\>/;'q;"	kind:func	file:
bitmap.append_list	bitmap.m	/^:- func append_list(list(bitmap)) = bitmap.$/;kq|/^\<append_list\>/;'q;"	kind:func
bitmap.bit_index	bitmap.m	/^:- type bit_index == int.$/;kq|-;/\<bitmap.bit_index\>/;'q;"	kind:type
bitmap.bit_index_in_byte	bitmap.m	/^:- func bit_index_in_byte(bit_index) = bit_index_in_byte.$/;kq|/^\<bit_index_in_byte\>/;'q;"	kind:func	file:
bitmap.bit_index_in_byte	bitmap.m	/^:- type bit_index_in_byte == int.$/;kq|-;/\<bitmap.bit_index_in_byte\>/;'q;"	kind:type	file:
bitmap.bitmask	bitmap.m	/^:- func bitmask(bit_index_in_byte) = byte.$/;kq|/^\<bitmask\>/;'q;"	kind:func	file:
bitmap.bits_per_byte	bitmap.m	/^:- func bits_per_byte = int.$/;kq|/^\<bits_per_byte\>/;'q;"	kind:func
bitmap.byte	bitmap.m	/^:- type byte == int.$/;kq|-;/\<bitmap.byte\>/;'q;"	kind:type
bitmap.byte_in_range	bitmap.m	/^:- pred byte_in_range(bitmap, byte_index).$/;kq|/^\<byte_in_range\>/;'q;"	kind:pred
bitmap.byte_index	bitmap.m	/^:- type byte_index == int.$/;kq|-;/\<bitmap.byte_index\>/;'q;"	kind:type
bitmap.byte_index_for_bit	bitmap.m	/^:- func byte_index_for_bit(bit_index) = byte_index.$/;kq|/^\<byte_index_for_bit\>/;'q;"	kind:func	file:
bitmap.byte_slice	bitmap.m	/^:- func bitmap.byte_slice(bitmap, byte_index, num_bytes) = bitmap.slice.$/;kq|/^\<bitmap.byte_slice\>/;'q;"	kind:func
bitmap.bytes_compare	bitmap.m	/^:- pred bytes_compare(comparison_result, byte_index, byte_index,$/;kq|/^\<bytes_compare\>/;'q;"	kind:pred	file:
bitmap.bytes_equal	bitmap.m	/^:- pred bytes_equal(byte_index, byte_index, bitmap, bitmap).$/;kq|/^\<bytes_equal\>/;'q;"	kind:pred	file:
bitmap.choose_copy_direction	bitmap.m	/^:- func choose_copy_direction(int, bit_index, bit_index) = copy_direction.$/;kq|/^\<choose_copy_direction\>/;'q;"	kind:func	file:
bitmap.clear	bitmap.m	/^:- func clear(bitmap, bit_index) = bitmap.$/;kq|/^\<clear\>/;'q;"	kind:func
bitmap.clear	bitmap.m	/^:- pred clear(bit_index, bitmap, bitmap).$/;kq|/^\<clear\>/;'q;"	kind:pred
bitmap.clear_filler_bits	bitmap.m	/^:- func clear_filler_bits(bitmap) = bitmap.$/;kq|/^\<clear_filler_bits\>/;'q;"	kind:func	file:
bitmap.combine_hash	bitmap.m	/^:- pred combine_hash(int::in, int::in, int::out) is det.$/;kq|/^\<combine_hash\>/;'q;"	kind:pred	file:
bitmap.complement	bitmap.m	/^:- func complement(bitmap) = bitmap.$/;kq|/^\<complement\>/;'q;"	kind:func
bitmap.complement_2	bitmap.m	/^:- func complement_2(int, bitmap) = bitmap.$/;kq|/^\<complement_2\>/;'q;"	kind:func	file:
bitmap.copy	bitmap.m	/^:- func copy(bitmap) = bitmap.$/;kq|/^\<copy\>/;'q;"	kind:func
bitmap.copy_bitmap_into_place	bitmap.m	/^:- pred copy_bitmap_into_place(bitmap::in, int::in, int::out,$/;kq|/^\<copy_bitmap_into_place\>/;'q;"	kind:pred	file:
bitmap.copy_bits	bitmap.m	/^:- func copy_bits(bitmap, bit_index, bitmap, bit_index, num_bits) = bitmap.$/;kq|/^\<copy_bits\>/;'q;"	kind:func
bitmap.copy_bits	bitmap.m	/^:- func copy_bits(int, bitmap, bit_index,$/;kq|/^\<copy_bits\>/;'q;"	kind:func	file:
bitmap.copy_bits_in_bitmap	bitmap.m	/^:- func copy_bits_in_bitmap(bitmap, bit_index, bit_index, num_bits) = bitmap.$/;kq|/^\<copy_bits_in_bitmap\>/;'q;"	kind:func
bitmap.copy_bytes	bitmap.m	/^:- func copy_bytes(bitmap, byte_index, bitmap, byte_index, num_bytes) = bitmap.$/;kq|/^\<copy_bytes\>/;'q;"	kind:func
bitmap.copy_bytes	bitmap.m	/^:- func copy_bytes(int, bitmap, bit_index,$/;kq|/^\<copy_bytes\>/;'q;"	kind:func	file:
bitmap.copy_bytes_in_bitmap	bitmap.m	/^:- func copy_bytes_in_bitmap(bitmap, byte_index,$/;kq|/^\<copy_bytes_in_bitmap\>/;'q;"	kind:func
bitmap.copy_direction	bitmap.m	/^:- type copy_direction$/;kq|-;/\<bitmap.copy_direction\>/;'q;"	kind:type	file:
bitmap.det_num_bytes	bitmap.m	/^:- func det_num_bytes(bitmap) = num_bytes.$/;kq|/^\<det_num_bytes\>/;'q;"	kind:func
bitmap.difference	bitmap.m	/^:- func difference(bitmap, bitmap) = bitmap.$/;kq|/^\<difference\>/;'q;"	kind:func
bitmap.extract_bits_from_byte	bitmap.m	/^:- func extract_bits_from_byte(byte, bit_index_in_byte, num_bits) = byte.$/;kq|/^\<extract_bits_from_byte\>/;'q;"	kind:func	file:
bitmap.extract_bits_from_bytes	bitmap.m	/^:- pred extract_bits_from_bytes(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<extract_bits_from_bytes\>/;'q;"	kind:pred	file:
bitmap.first_bit_in_same_byte	bitmap.m	/^:- func first_bit_in_same_byte(bit_index) = bit_index.$/;kq|/^\<first_bit_in_same_byte\>/;'q;"	kind:func	file:
bitmap.flip	bitmap.m	/^:- func flip(bitmap, bit_index) = bitmap.$/;kq|/^\<flip\>/;'q;"	kind:func
bitmap.flip	bitmap.m	/^:- pred flip(bit_index, bitmap, bitmap).$/;kq|/^\<flip\>/;'q;"	kind:pred
bitmap.from_string	bitmap.m	/^:- func from_string(string) = bitmap.$/;kq|/^\<from_string\>/;'q;"	kind:func
bitmap.hash	bitmap.m	/^:- func hash(bitmap) = int.$/;kq|/^\<hash\>/;'q;"	kind:func
bitmap.hash_2	bitmap.m	/^:- pred hash_2(bitmap::in, byte_index::in, int::in, int::in, int::out) is det.$/;kq|/^\<hash_2\>/;'q;"	kind:pred	file:
bitmap.hex_chars_to_bitmap	bitmap.m	/^:- pred hex_chars_to_bitmap(string::in, int::in, int::in, byte_index::in,$/;kq|/^\<hex_chars_to_bitmap\>/;'q;"	kind:pred	file:
bitmap.in_range	bitmap.m	/^:- pred in_range(bitmap, bit_index).$/;kq|/^\<in_range\>/;'q;"	kind:pred
bitmap.in_range_rexcl	bitmap.m	/^:- pred in_range_rexcl(bitmap, bit_index).$/;kq|/^\<in_range_rexcl\>/;'q;"	kind:pred	file:
bitmap.init	bitmap.m	/^:- func init(num_bits::in) = (bitmap::bitmap_uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
bitmap.init	bitmap.m	/^:- func init(num_bits::in, bool::in) = (bitmap::bitmap_uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
bitmap.initialize_bitmap	bitmap.m	/^:- func initialize_bitmap(bitmap, num_bits, byte) = bitmap.$/;kq|/^\<initialize_bitmap\>/;'q;"	kind:func	file:
bitmap.initialize_bitmap_bytes	bitmap.m	/^:- func initialize_bitmap_bytes(bitmap, byte_index, byte_index,$/;kq|/^\<initialize_bitmap_bytes\>/;'q;"	kind:func	file:
bitmap.initializer	bitmap.m	/^:- func initializer(bool) = byte.$/;kq|/^\<initializer\>/;'q;"	kind:func	file:
bitmap.intersect	bitmap.m	/^:- func intersect(bitmap, bitmap) = bitmap.$/;kq|/^\<intersect\>/;'q;"	kind:func
bitmap.is_clear	bitmap.m	/^:- pred is_clear(bitmap, bit_index).$/;kq|/^\<is_clear\>/;'q;"	kind:pred
bitmap.is_set	bitmap.m	/^:- pred is_set(bitmap, bit_index).$/;kq|/^\<is_set\>/;'q;"	kind:pred
bitmap.left_to_right	bitmap.m	/^        --->    left_to_right$/;kq|-;/\<bitmap.left_to_right\>/;'q;"	kind:cons	file:
bitmap.n_bit_mask	bitmap.m	/^:- func n_bit_mask(num_bits) = byte.$/;kq|/^\<n_bit_mask\>/;'q;"	kind:func	file:
bitmap.num_bits	bitmap.m	/^:- func num_bits(bitmap) = num_bits.$/;kq|/^\<num_bits\>/;'q;"	kind:func
bitmap.num_bits	bitmap.m	/^:- type num_bits == int.$/;kq|-;/\<bitmap.num_bits\>/;'q;"	kind:type
bitmap.num_bytes	bitmap.m	/^:- func num_bytes(bitmap) = num_bytes.$/;kq|/^\<num_bytes\>/;'q;"	kind:func
bitmap.num_bytes	bitmap.m	/^:- type num_bytes == int.$/;kq|-;/\<bitmap.num_bytes\>/;'q;"	kind:type
bitmap.resize	bitmap.m	/^:- func resize(bitmap, num_bits, bool) = bitmap.$/;kq|/^\<resize\>/;'q;"	kind:func
bitmap.resize_bitmap	bitmap.m	/^:- func resize_bitmap(bitmap, num_bits) = bitmap.$/;kq|/^\<resize_bitmap\>/;'q;"	kind:func	file:
bitmap.right_to_left	bitmap.m	/^        ;       right_to_left$/;kq|-;/\<bitmap.right_to_left\>/;'q;"	kind:cons	file:
bitmap.set	bitmap.m	/^:- func set(bitmap, bit_index) = bitmap.$/;kq|/^\<set\>/;'q;"	kind:func
bitmap.set	bitmap.m	/^:- pred set(bit_index, bitmap, bitmap).$/;kq|/^\<set\>/;'q;"	kind:pred
bitmap.set_bits_in_byte	bitmap.m	/^:- func set_bits_in_byte(byte, bit_index_in_byte, num_bits, byte) = byte.$/;kq|/^\<set_bits_in_byte\>/;'q;"	kind:func	file:
bitmap.set_bits_in_byte_index	bitmap.m	/^:- pred set_bits_in_byte_index(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<set_bits_in_byte_index\>/;'q;"	kind:pred	file:
bitmap.set_bits_in_bytes	bitmap.m	/^:- pred set_bits_in_bytes(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<set_bits_in_bytes\>/;'q;"	kind:pred	file:
bitmap.shrink_without_copying	bitmap.m	/^:- func shrink_without_copying(bitmap, num_bits) = bitmap.$/;kq|/^\<shrink_without_copying\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- func bitmap.slice(bitmap, bit_index, num_bits) = bitmap.slice.$/;kq|/^\<bitmap.slice\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- func slice ^ slice_bitmap = bitmap.$/;kq|/^\<slice\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- func slice ^ slice_num_bits = num_bits.$/;kq|/^\<slice\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- func slice ^ slice_num_bytes = num_bytes.$/;kq|/^\<slice\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- func slice ^ slice_start_bit_index = bit_index.$/;kq|/^\<slice\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- func slice ^ slice_start_byte_index = byte_index.$/;kq|/^\<slice\>/;'q;"	kind:func
bitmap.slice	bitmap.m	/^:- type bitmap.slice$/;kq|-;/\<bitmap.slice\>/;'q;"	kind:type	file:
bitmap.slice_bitmap_field	bitmap.m	/^                slice_bitmap_field          :: bitmap,$/;kq|-;/\<bitmap.slice_bitmap_field\>/;'q;"	kind:fld	file:
bitmap.slice_num_bits_field	bitmap.m	/^                slice_num_bits_field        :: num_bits$/;kq|-;/\<bitmap.slice_num_bits_field\>/;'q;"	kind:fld	file:
bitmap.throw_bitmap_error	bitmap.m	/^:- func throw_bitmap_error(string) = _ is erroneous.$/;kq|/^\<throw_bitmap_error\>/;'q;"	kind:func	file:
bitmap.throw_bitmap_error	bitmap.m	/^:- pred throw_bitmap_error(string::in) is erroneous.$/;kq|/^\<throw_bitmap_error\>/;'q;"	kind:pred	file:
bitmap.throw_bounds_error	bitmap.m	/^:- func throw_bounds_error(bitmap, string, bit_index) = _ is erroneous.$/;kq|/^\<throw_bounds_error\>/;'q;"	kind:func	file:
bitmap.throw_bounds_error	bitmap.m	/^:- func throw_bounds_error(bitmap, string, bit_index, num_bits) = _$/;kq|/^\<throw_bounds_error\>/;'q;"	kind:func	file:
bitmap.throw_bounds_error	bitmap.m	/^:- pred throw_bounds_error(bitmap::in, string::in, bit_index::in, num_bits::in)$/;kq|/^\<throw_bounds_error\>/;'q;"	kind:pred
bitmap.to_byte_string	bitmap.m	/^:- func to_byte_string(bitmap) = string.$/;kq|/^\<to_byte_string\>/;'q;"	kind:func
bitmap.to_string	bitmap.m	/^:- func to_string(bitmap) = string.$/;kq|/^\<to_string\>/;'q;"	kind:func
bitmap.to_string_chars	bitmap.m	/^:- pred to_string_chars(int, bitmap, list(char), list(char)).$/;kq|/^\<to_string_chars\>/;'q;"	kind:pred	file:
bitmap.union	bitmap.m	/^:- func union(bitmap, bitmap) = bitmap.$/;kq|/^\<union\>/;'q;"	kind:func
bitmap.uniq_bitmap	bitmap.m	/^:- inst uniq_bitmap == bitmap.  % XXX should be unique$/;kq|-;/\<bitmap.uniq_bitmap\>/;'q;"	kind:inst
bitmap.unsafe_clear	bitmap.m	/^:- func unsafe_clear(bitmap, bit_index) = bitmap.$/;kq|/^\<unsafe_clear\>/;'q;"	kind:func
bitmap.unsafe_clear	bitmap.m	/^:- pred unsafe_clear(bit_index, bitmap, bitmap).$/;kq|/^\<unsafe_clear\>/;'q;"	kind:pred
bitmap.unsafe_copy_bits	bitmap.m	/^:- func unsafe_copy_bits(int, bitmap, bit_index,$/;kq|/^\<unsafe_copy_bits\>/;'q;"	kind:func	file:
bitmap.unsafe_copy_bytes	bitmap.m	/^:- func unsafe_copy_bytes(int, bitmap, byte_index,$/;kq|/^\<unsafe_copy_bytes\>/;'q;"	kind:func	file:
bitmap.unsafe_do_copy_bytes	bitmap.m	/^:- func unsafe_do_copy_bytes(bitmap, byte_index,$/;kq|/^\<unsafe_do_copy_bytes\>/;'q;"	kind:func	file:
bitmap.unsafe_flip	bitmap.m	/^:- func unsafe_flip(bitmap, bit_index) = bitmap.$/;kq|/^\<unsafe_flip\>/;'q;"	kind:func
bitmap.unsafe_flip	bitmap.m	/^:- pred unsafe_flip(bit_index, bitmap, bitmap).$/;kq|/^\<unsafe_flip\>/;'q;"	kind:pred
bitmap.unsafe_is_clear	bitmap.m	/^:- pred unsafe_is_clear(bitmap, bit_index).$/;kq|/^\<unsafe_is_clear\>/;'q;"	kind:pred
bitmap.unsafe_is_set	bitmap.m	/^:- pred unsafe_is_set(bitmap, bit_index).$/;kq|/^\<unsafe_is_set\>/;'q;"	kind:pred
bitmap.unsafe_set	bitmap.m	/^:- func unsafe_set(bitmap, bit_index) = bitmap.$/;kq|/^\<unsafe_set\>/;'q;"	kind:func
bitmap.unsafe_set	bitmap.m	/^:- pred unsafe_set(bit_index, bitmap, bitmap).$/;kq|/^\<unsafe_set\>/;'q;"	kind:pred
bitmap.word	bitmap.m	/^:- type word == int.$/;kq|-;/\<bitmap.word\>/;'q;"	kind:type
bitmap.xor	bitmap.m	/^:- func xor(bitmap, bitmap) = bitmap.$/;kq|/^\<xor\>/;'q;"	kind:func
bitmap.zip	bitmap.m	/^:- func zip(func(byte, byte) = byte,$/;kq|/^\<zip\>/;'q;"	kind:func	file:
bitmap.zip2	bitmap.m	/^:- func zip2(byte_index, func(byte, byte) = byte,$/;kq|/^\<zip2\>/;'q;"	kind:func	file:
bitmap_compare	bitmap.m	/^:- pred bitmap_compare(comparison_result, bitmap, bitmap).$/;kq|/^\<bitmap_compare\>/;'q;"	kind:pred	file:
bitmap_di	bitmap.m	/^:- mode bitmap_di == in(uniq_bitmap). % XXX should be di$/;kq|-;/\<bitmap_di\>/;'q;"	kind:mode
bitmap_equal	bitmap.m	/^:- pred bitmap_equal(bitmap, bitmap).$/;kq|/^\<bitmap_equal\>/;'q;"	kind:pred	file:
bitmap_error	bitmap.m	/^    --->    bitmap_error(string).$/;kq|-;/\<bitmap_error\>/;'q;"	kind:cons
bitmap_error	bitmap.m	/^:- type bitmap_error$/;kq|-;/\<bitmap_error\>/;'q;"	kind:type
bitmap_to_byte_strings	bitmap.m	/^:- func bitmap_to_byte_strings(bitmap) = list(string).$/;kq|/^\<bitmap_to_byte_strings\>/;'q;"	kind:func	file:
bitmap_to_byte_strings	bitmap.m	/^:- func bitmap_to_byte_strings(bitmap, int, list(string)) = list(string).$/;kq|/^\<bitmap_to_byte_strings\>/;'q;"	kind:func	file:
bitmap_ui	bitmap.m	/^:- mode bitmap_ui == in(uniq_bitmap).$/;kq|-;/\<bitmap_ui\>/;'q;"	kind:mode
bitmap_uo	bitmap.m	/^:- mode bitmap_uo == out(uniq_bitmap).$/;kq|-;/\<bitmap_uo\>/;'q;"	kind:mode
bitmask	bitmap.m	/^:- func bitmask(bit_index_in_byte) = byte.$/;kq|/^\<bitmask\>/;'q;"	kind:func	file:
bitmask	version_bitmap.m	/^:- func bitmask(int) = int.$/;kq|/^\<bitmask\>/;'q;"	kind:func	file:
bits	fat_sparse_bitset.m	/^                bits    :: int,$/;kq|-;/\<bits\>/;'q;"	kind:fld	file:
bits	sparse_bitset.m	/^                bits    :: int  % bits offset .. offset + bits_per_int - 1$/;kq|-;/\<bits\>/;'q;"	kind:fld	file:
bits_for_index	fat_sparse_bitset.m	/^:- pred bits_for_index(int::in, int::out, int::out) is det.$/;kq|/^\<bits_for_index\>/;'q;"	kind:pred	file:
bits_for_index	sparse_bitset.m	/^:- pred bits_for_index(int::in, int::out, int::out) is det.$/;kq|/^\<bits_for_index\>/;'q;"	kind:pred	file:
bits_for_index	tree_bitset.m	/^:- pred bits_for_index(int::in, int::out, int::out) is det.$/;kq|/^\<bits_for_index\>/;'q;"	kind:pred	file:
bits_per_byte	bitmap.m	/^:- func bits_per_byte = int.$/;kq|/^\<bits_per_byte\>/;'q;"	kind:func
bits_per_int	int.m	/^:- func int.bits_per_int = int.$/;kq|/^\<int.bits_per_int\>/;'q;"	kind:func
bits_per_int	int.m	/^:- pred int.bits_per_int(int::out) is det.$/;kq|/^\<int.bits_per_int\>/;'q;"	kind:pred
bits_per_level	tree_bitset.m	/^:- func bits_per_level = int.$/;kq|/^\<bits_per_level\>/;'q;"	kind:func	file:
bits_pow	integer.m	/^:- func bits_pow(int, int, integer, integer) = integer.$/;kq|/^\<bits_pow\>/;'q;"	kind:func	file:
bits_pow_head	integer.m	/^:- func bits_pow_head(int, integer) = integer.$/;kq|/^\<bits_pow_head\>/;'q;"	kind:func	file:
bits_pow_list	integer.m	/^:- func bits_pow_list(list(int), integer, integer) = integer.$/;kq|/^\<bits_pow_list\>/;'q;"	kind:func	file:
bitset_elem	sparse_bitset.m	/^    --->    bitset_elem($/;kq|-;/\<bitset_elem\>/;'q;"	kind:cons	file:
bitset_elem	sparse_bitset.m	/^:- type bitset_elem$/;kq|-;/\<bitset_elem\>/;'q;"	kind:type	file:
bitset_error	test_bitset.m	/^:- type bitset_error(T)$/;kq|-;/\<bitset_error\>/;'q;"	kind:type
bitset_impl	sparse_bitset.m	/^:- type bitset_impl == list(bitset_elem).$/;kq|-;/\<bitset_impl\>/;'q;"	kind:type	file:
bitset_to_set	test_bitset.m	/^:- func bitset_to_set(test_bitset(T)) = set(T) <= enum(T).$/;kq|/^\<bitset_to_set\>/;'q;"	kind:func
bitsmask	version_bitmap.m	/^:- func bitsmask(int) = int.$/;kq|/^\<bitsmask\>/;'q;"	kind:func	file:
black	rbtree.m	/^    ;       black(K, V, rbtree(K, V), rbtree(K, V)).$/;kq|-;/\<black\>/;'q;"	kind:cons	file:
block_device	io.m	/^    ;       block_device$/;kq|-;/\<block_device\>/;'q;"	kind:cons
bool	bool.m	/^:- type bool$/;kq|-;/\<bool\>/;'q;"	kind:type
bool	getopt.m	/^    --->    bool(bool)$/;kq|-;/\<bool\>/;'q;"	kind:cons
bool	getopt.m	/^    ;       bool(bool)$/;kq|-;/\<bool\>/;'q;"	kind:cons
bool	getopt_io.m	/^    --->    bool(bool)$/;kq|-;/\<bool\>/;'q;"	kind:cons
bool	getopt_io.m	/^    ;       bool(bool)$/;kq|-;/\<bool\>/;'q;"	kind:cons
bool.and	bool.m	/^:- func bool.and(bool, bool) = bool.$/;kq|/^\<bool.and\>/;'q;"	kind:func
bool.and	bool.m	/^:- pred bool.and(bool::in, bool::in, bool::out) is det.$/;kq|/^\<bool.and\>/;'q;"	kind:pred
bool.and_list	bool.m	/^:- func bool.and_list(list(bool)) = bool.$/;kq|/^\<bool.and_list\>/;'q;"	kind:func
bool.and_list	bool.m	/^:- pred bool.and_list(list(bool)::in, bool::out) is det.$/;kq|/^\<bool.and_list\>/;'q;"	kind:pred
bool.enum	bool.m	/^:- instance enum(bool) where [$/;kq|-;/\<bool.enum\>/;'q;"	kind:tci	file:
bool.no	bool.m	/^    --->    no$/;kq|-;/\<bool.no\>/;'q;"	kind:cons
bool.not	bool.m	/^:- func bool.not(bool) = bool.$/;kq|/^\<bool.not\>/;'q;"	kind:func
bool.not	bool.m	/^:- pred bool.not(bool::in, bool::out) is det.$/;kq|/^\<bool.not\>/;'q;"	kind:pred
bool.or	bool.m	/^:- func bool.or(bool, bool) = bool.$/;kq|/^\<bool.or\>/;'q;"	kind:func
bool.or	bool.m	/^:- pred bool.or(bool::in, bool::in, bool::out) is det.$/;kq|/^\<bool.or\>/;'q;"	kind:pred
bool.or_list	bool.m	/^:- func bool.or_list(list(bool)) = bool.$/;kq|/^\<bool.or_list\>/;'q;"	kind:func
bool.or_list	bool.m	/^:- pred bool.or_list(list(bool)::in, bool::out) is det.$/;kq|/^\<bool.or_list\>/;'q;"	kind:pred
bool.pred_to_bool	bool.m	/^:- func pred_to_bool((pred)::((pred) is semidet)) = (bool::out) is det.$/;kq|/^\<pred_to_bool\>/;'q;"	kind:func
bool.return_no	bool.m	/^:- func bool.return_no = bool.$/;kq|/^\<bool.return_no\>/;'q;"	kind:func	file:
bool.return_yes	bool.m	/^:- func bool.return_yes = bool.$/;kq|/^\<bool.return_yes\>/;'q;"	kind:func	file:
bool.xor	bool.m	/^:- func bool.xor(bool, bool) = bool.$/;kq|/^\<bool.xor\>/;'q;"	kind:func
bool.yes	bool.m	/^    ;       yes.$/;kq|-;/\<bool.yes\>/;'q;"	kind:cons
bool_special	getopt.m	/^    ;       bool_special$/;kq|-;/\<bool_special\>/;'q;"	kind:cons
bool_special	getopt_io.m	/^    ;       bool_special$/;kq|-;/\<bool_special\>/;'q;"	kind:cons
bool_to_int	bool.m	/^:- func bool_to_int(bool) = int.$/;kq|/^\<bool_to_int\>/;'q;"	kind:func	file:
bound	type_desc.m	/^    --->    bound(type_ctor_desc, list(pseudo_type_desc))$/;kq|-;/\<bound\>/;'q;"	kind:cons
bounding_region	rtree.m	/^    func bounding_region(K, K) = K,$/;kq|-;/\<bounding_region\>/;'q;"	kind:tcm
bounding_region	rtree.m	/^    func(bounding_region\/2) is box3d_bounding_region, $/;kq|-;/\<bounding_region\>/;'q;"	kind:tcim	file:
bounding_region	rtree.m	/^    func(bounding_region\/2) is box_bounding_region, $/;kq|-;/\<bounding_region\>/;'q;"	kind:tcim	file:
bounding_region	rtree.m	/^    func(bounding_region\/2) is interval_bounding_region, $/;kq|-;/\<bounding_region\>/;'q;"	kind:tcim	file:
bounding_region_size	rtree.m	/^    func bounding_region_size(K, K) = float$/;kq|-;/\<bounding_region_size\>/;'q;"	kind:tcm
bounding_region_size	rtree.m	/^    func(bounding_region_size\/2) is box3d_bounding_region_volume$/;kq|-;/\<bounding_region_size\>/;'q;"	kind:tcim	file:
bounding_region_size	rtree.m	/^    func(bounding_region_size\/2) is box_bounding_region_area$/;kq|-;/\<bounding_region_size\>/;'q;"	kind:tcim	file:
bounding_region_size	rtree.m	/^    func(bounding_region_size\/2) is interval_bounding_region_length$/;kq|-;/\<bounding_region_size\>/;'q;"	kind:tcim	file:
bounds	array.m	/^:- pred array.bounds(array(_T), int, int).$/;kq|/^\<array.bounds\>/;'q;"	kind:pred
bounds	array2d.m	/^:- pred bounds(array2d(T), int, int).$/;kq|/^\<bounds\>/;'q;"	kind:pred
bounds	bt_array.m	/^:- pred bt_array.bounds(bt_array(_T)::in, int::out, int::out) is det.$/;kq|/^\<bt_array.bounds\>/;'q;"	kind:pred
bounds	version_array2d.m	/^:- pred bounds(version_array2d(T)::in, int::out, int::out) is det.$/;kq|/^\<bounds\>/;'q;"	kind:pred
bounds_checks	array.m	/^:- pred bounds_checks is semidet.$/;kq|/^\<bounds_checks\>/;'q;"	kind:pred	file:
box	rtree.m	/^    --->    box(float, float, float, float).$/;kq|-;/\<box\>/;'q;"	kind:cons
box	rtree.m	/^:- type box$/;kq|-;/\<box\>/;'q;"	kind:type
box3d	rtree.m	/^    --->    box3d(float, float, float, float, float, float).$/;kq|-;/\<box3d\>/;'q;"	kind:cons
box3d	rtree.m	/^:- type box3d$/;kq|-;/\<box3d\>/;'q;"	kind:type
box3d_bounding_region	rtree.m	/^:- func box3d_bounding_region(box3d, box3d) = box3d.$/;kq|/^\<box3d_bounding_region\>/;'q;"	kind:func	file:
box3d_bounding_region_volume	rtree.m	/^:- func box3d_bounding_region_volume(box3d, box3d) = float.$/;kq|/^\<box3d_bounding_region_volume\>/;'q;"	kind:func	file:
box3d_contains	rtree.m	/^:- pred box3d_contains(box3d::in, box3d::in) is semidet.$/;kq|/^\<box3d_contains\>/;'q;"	kind:pred	file:
box3d_intersects	rtree.m	/^:- pred box3d_intersects(box3d::in, box3d::in) is semidet.$/;kq|/^\<box3d_intersects\>/;'q;"	kind:pred	file:
box3d_volume	rtree.m	/^:- func box3d_volume(box3d) = float.$/;kq|/^\<box3d_volume\>/;'q;"	kind:func	file:
box_area	rtree.m	/^:- func box_area(box) = float.$/;kq|/^\<box_area\>/;'q;"	kind:func	file:
box_bounding_region	rtree.m	/^:- func box_bounding_region(box, box) = box.$/;kq|/^\<box_bounding_region\>/;'q;"	kind:func	file:
box_bounding_region_area	rtree.m	/^:- func box_bounding_region_area(box, box) = float.$/;kq|/^\<box_bounding_region_area\>/;'q;"	kind:func	file:
box_contains	rtree.m	/^:- pred box_contains(box::in, box::in) is semidet.$/;kq|/^\<box_contains\>/;'q;"	kind:pred	file:
box_intersects	rtree.m	/^:- pred box_intersects(box::in, box::in) is semidet.$/;kq|/^\<box_intersects\>/;'q;"	kind:pred	file:
braces	pprint.m	/^:- func braces(T)              = doc <= (doc(T)).$/;kq|/^\<braces\>/;'q;"	kind:func
bracketed	pprint.m	/^:- func bracketed(T1, T2, T3)  = doc <= (doc(T1), doc(T2), doc(T3)).$/;kq|/^\<bracketed\>/;'q;"	kind:func
brackets	parsing_utils.m	/^:- pred brackets(string::in, string::in, parser(T)::in(parser), src::in,$/;kq|/^\<brackets\>/;'q;"	kind:pred
brackets	parsing_utils.m	/^:- pred brackets(string::in, string::in,$/;kq|/^\<brackets\>/;'q;"	kind:pred
brackets	pprint.m	/^:- func brackets(T)            = doc <= (doc(T)).$/;kq|/^\<brackets\>/;'q;"	kind:func
branch_node	cord.m	/^    ;       branch_node(cord_node(T), cord_node(T)).$/;kq|-;/\<branch_node\>/;'q;"	kind:cons	file:
break_up_string_reverse	string.m	/^:- func break_up_string_reverse(string, int, list(string)) = list(string).$/;kq|/^\<break_up_string_reverse\>/;'q;"	kind:func	file:
bsearch	array.m	/^:- func array.bsearch(array(T), T, comparison_func(T)) = maybe(int).$/;kq|/^\<array.bsearch\>/;'q;"	kind:func
bsearch	array.m	/^:- pred array.bsearch(array(T), T, comparison_pred(T), maybe(int)).$/;kq|/^\<array.bsearch\>/;'q;"	kind:pred
bsearch	bt_array.m	/^:- pred bt_array.bsearch(bt_array(T)::in, T::in,$/;kq|/^\<bt_array.bsearch\>/;'q;"	kind:pred
bsearch_2	array.m	/^:- pred array.bsearch_2(array(T)::in, int::in, int::in, T::in,$/;kq|/^\<array.bsearch_2\>/;'q;"	kind:pred	file:
bsearch_2	bt_array.m	/^:- pred bsearch_2(bt_array(T)::in, int::in, int::in, T::in,$/;kq|/^\<bsearch_2\>/;'q;"	kind:pred	file:
bt_array	bt_array.m	/^    --->    bt_array(int, int, ra_list(T)).$/;kq|-;/\<bt_array\>/;'q;"	kind:cons	file:
bt_array	bt_array.m	/^:- type bt_array(T)$/;kq|-;/\<bt_array\>/;'q;"	kind:type	file:
bt_array.'elem	bt_array.m	/^:- func 'elem :='(int, bt_array(T), T) = bt_array(T).$/;kq|/^\<'elem\>/;'q;"	kind:func
bt_array.actual_position	bt_array.m	/^:- pred actual_position(int::in, int::in, int::in, int::out) is det.$/;kq|/^\<actual_position\>/;'q;"	kind:pred	file:
bt_array.add_elements	bt_array.m	/^:- pred add_elements(int::in, T::in, ra_list(T)::in, ra_list(T)::out) is det.$/;kq|/^\<add_elements\>/;'q;"	kind:pred	file:
bt_array.bounds	bt_array.m	/^:- pred bt_array.bounds(bt_array(_T)::in, int::out, int::out) is det.$/;kq|/^\<bt_array.bounds\>/;'q;"	kind:pred
bt_array.bsearch	bt_array.m	/^:- pred bt_array.bsearch(bt_array(T)::in, T::in,$/;kq|/^\<bt_array.bsearch\>/;'q;"	kind:pred
bt_array.bsearch_2	bt_array.m	/^:- pred bsearch_2(bt_array(T)::in, int::in, int::in, T::in,$/;kq|/^\<bsearch_2\>/;'q;"	kind:pred	file:
bt_array.cons	bt_array.m	/^    ;       cons(int, ra_list_bintree(T), ra_list(T)).$/;kq|-;/\<bt_array.cons\>/;'q;"	kind:cons	file:
bt_array.elem	bt_array.m	/^:- func bt_array.elem(int, bt_array(T)) = T.$/;kq|/^\<bt_array.elem\>/;'q;"	kind:func
bt_array.fetch_items	bt_array.m	/^:- func bt_array.fetch_items(bt_array(T), int, int) = list(T).$/;kq|/^\<bt_array.fetch_items\>/;'q;"	kind:func
bt_array.fetch_items	bt_array.m	/^:- pred bt_array.fetch_items(bt_array(T)::in, int::in, int::in, list(T)::out)$/;kq|/^\<bt_array.fetch_items\>/;'q;"	kind:pred
bt_array.from_list	bt_array.m	/^:- func bt_array.from_list(int, list(T)) = bt_array(T).$/;kq|/^\<bt_array.from_list\>/;'q;"	kind:func
bt_array.from_list	bt_array.m	/^:- pred bt_array.from_list(int::in, list(T)::in, bt_array(T)::out) is det.$/;kq|/^\<bt_array.from_list\>/;'q;"	kind:pred
bt_array.in_bounds	bt_array.m	/^:- pred bt_array.in_bounds(bt_array(_T)::in, int::in) is semidet.$/;kq|/^\<bt_array.in_bounds\>/;'q;"	kind:pred
bt_array.init	bt_array.m	/^:- func bt_array.init(int, int, T) = bt_array(T).$/;kq|/^\<bt_array.init\>/;'q;"	kind:func
bt_array.init	bt_array.m	/^:- pred bt_array.init(int::in, int::in, T::in, bt_array(T)::out) is det.$/;kq|/^\<bt_array.init\>/;'q;"	kind:pred
bt_array.insert_items	bt_array.m	/^:- pred insert_items(bt_array(T)::in, int::in, list(T)::in, bt_array(T)::out)$/;kq|/^\<insert_items\>/;'q;"	kind:pred	file:
bt_array.leaf	bt_array.m	/^    --->    leaf(T)$/;kq|-;/\<bt_array.leaf\>/;'q;"	kind:cons	file:
bt_array.lookup	bt_array.m	/^:- func bt_array.lookup(bt_array(T), int) = T.$/;kq|/^\<bt_array.lookup\>/;'q;"	kind:func
bt_array.lookup	bt_array.m	/^:- pred bt_array.lookup(bt_array(T)::in, int::in, T::out) is det.$/;kq|/^\<bt_array.lookup\>/;'q;"	kind:pred
bt_array.make_empty_array	bt_array.m	/^:- func bt_array.make_empty_array(int) = bt_array(T).$/;kq|/^\<bt_array.make_empty_array\>/;'q;"	kind:func
bt_array.make_empty_array	bt_array.m	/^:- pred bt_array.make_empty_array(int::in, bt_array(T)::out) is det.$/;kq|/^\<bt_array.make_empty_array\>/;'q;"	kind:pred
bt_array.max	bt_array.m	/^:- func bt_array.max(bt_array(_T)) = int.$/;kq|/^\<bt_array.max\>/;'q;"	kind:func
bt_array.max	bt_array.m	/^:- pred bt_array.max(bt_array(_T)::in, int::out) is det.$/;kq|/^\<bt_array.max\>/;'q;"	kind:pred
bt_array.min	bt_array.m	/^:- func bt_array.min(bt_array(_T)) = int.$/;kq|/^\<bt_array.min\>/;'q;"	kind:func
bt_array.min	bt_array.m	/^:- pred bt_array.min(bt_array(_T)::in, int::out) is det.$/;kq|/^\<bt_array.min\>/;'q;"	kind:pred
bt_array.nil	bt_array.m	/^    --->    nil$/;kq|-;/\<bt_array.nil\>/;'q;"	kind:cons	file:
bt_array.node	bt_array.m	/^    ;       node(T, ra_list_bintree(T), ra_list_bintree(T)).$/;kq|-;/\<bt_array.node\>/;'q;"	kind:cons	file:
bt_array.ra_list	bt_array.m	/^:- type ra_list(T)$/;kq|-;/\<bt_array.ra_list\>/;'q;"	kind:type	file:
bt_array.ra_list_bintree	bt_array.m	/^:- type ra_list_bintree(T)$/;kq|-;/\<bt_array.ra_list_bintree\>/;'q;"	kind:type	file:
bt_array.ra_list_cons	bt_array.m	/^:- pred ra_list_cons(T::in, ra_list(T)::in, ra_list(T)::out) is det.$/;kq|/^\<ra_list_cons\>/;'q;"	kind:pred	file:
bt_array.ra_list_drop	bt_array.m	/^:- pred ra_list_drop(int::in, ra_list(T)::in, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_drop\>/;'q;"	kind:pred	file:
bt_array.ra_list_head	bt_array.m	/^:- pred ra_list_head(ra_list(T)::in, T::out) is semidet.$/;kq|/^\<ra_list_head\>/;'q;"	kind:pred	file:
bt_array.ra_list_head_tail	bt_array.m	/^:- pred ra_list_head_tail(ra_list(T)::in, T::out, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_head_tail\>/;'q;"	kind:pred	file:
bt_array.ra_list_lookup	bt_array.m	/^:- pred ra_list_lookup(int::in, ra_list(T)::in, T::out) is semidet.$/;kq|/^\<ra_list_lookup\>/;'q;"	kind:pred	file:
bt_array.ra_list_lookup_2	bt_array.m	/^:- pred ra_list_lookup_2(int::in, ra_list(T)::in, T::out) is semidet.$/;kq|/^\<ra_list_lookup_2\>/;'q;"	kind:pred	file:
bt_array.ra_list_nil	bt_array.m	/^:- pred ra_list_nil(ra_list(T)::uo) is det.$/;kq|/^\<ra_list_nil\>/;'q;"	kind:pred	file:
bt_array.ra_list_slow_drop	bt_array.m	/^:- pred ra_list_slow_drop(int::in, ra_list(T)::in, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_slow_drop\>/;'q;"	kind:pred	file:
bt_array.ra_list_tail	bt_array.m	/^:- pred ra_list_tail(ra_list(T)::in, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_tail\>/;'q;"	kind:pred	file:
bt_array.ra_list_update	bt_array.m	/^:- pred ra_list_update(ra_list(T)::in, int::in, T::in, ra_list(T)::out)$/;kq|/^\<ra_list_update\>/;'q;"	kind:pred	file:
bt_array.ra_list_update_2	bt_array.m	/^:- pred ra_list_update_2(ra_list(T)::in, int::in, T::in, ra_list(T)::out)$/;kq|/^\<ra_list_update_2\>/;'q;"	kind:pred	file:
bt_array.resize	bt_array.m	/^:- func bt_array.resize(bt_array(T), int, int, T) = bt_array(T).$/;kq|/^\<bt_array.resize\>/;'q;"	kind:func
bt_array.resize	bt_array.m	/^:- pred bt_array.resize(bt_array(T)::in, int::in, int::in, T::in,$/;kq|/^\<bt_array.resize\>/;'q;"	kind:pred
bt_array.reverse_from_ra_list	bt_array.m	/^:- pred reverse_from_ra_list(ra_list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<reverse_from_ra_list\>/;'q;"	kind:pred	file:
bt_array.reverse_into_ra_list	bt_array.m	/^:- pred reverse_into_ra_list(list(T)::in,$/;kq|/^\<reverse_into_ra_list\>/;'q;"	kind:pred	file:
bt_array.semidet_lookup	bt_array.m	/^:- pred bt_array.semidet_lookup(bt_array(T)::in, int::in, T::out) is semidet.$/;kq|/^\<bt_array.semidet_lookup\>/;'q;"	kind:pred
bt_array.semidet_set	bt_array.m	/^:- pred bt_array.semidet_set(bt_array(T)::in, int::in, T::in,$/;kq|/^\<bt_array.semidet_set\>/;'q;"	kind:pred
bt_array.set	bt_array.m	/^:- func bt_array.set(bt_array(T), int, T) = bt_array(T).$/;kq|/^\<bt_array.set\>/;'q;"	kind:func
bt_array.set	bt_array.m	/^:- pred bt_array.set(bt_array(T)::in, int::in, T::in, bt_array(T)::out)$/;kq|/^\<bt_array.set\>/;'q;"	kind:pred
bt_array.shrink	bt_array.m	/^:- func bt_array.shrink(bt_array(T), int, int) = bt_array(T).$/;kq|/^\<bt_array.shrink\>/;'q;"	kind:func
bt_array.shrink	bt_array.m	/^:- pred bt_array.shrink(bt_array(T)::in, int::in, int::in, bt_array(T)::out)$/;kq|/^\<bt_array.shrink\>/;'q;"	kind:pred
bt_array.size	bt_array.m	/^:- func bt_array.size(bt_array(_T)) = int.$/;kq|/^\<bt_array.size\>/;'q;"	kind:func
bt_array.size	bt_array.m	/^:- pred bt_array.size(bt_array(_T)::in, int::out) is det.$/;kq|/^\<bt_array.size\>/;'q;"	kind:pred
bt_array.to_list	bt_array.m	/^:- func bt_array.to_list(bt_array(T)) = list(T).$/;kq|/^\<bt_array.to_list\>/;'q;"	kind:func
bt_array.to_list	bt_array.m	/^:- pred bt_array.to_list(bt_array(T)::in, list(T)::out) is det.$/;kq|/^\<bt_array.to_list\>/;'q;"	kind:pred
buckets	hash_table.m	/^                buckets                 :: array(hash_table_alist(K, V))$/;kq|-;/\<buckets\>/;'q;"	kind:fld
buckets	hash_table.m	/^:- type buckets(K, V) == array(hash_table_alist(K, V)).$/;kq|-;/\<buckets\>/;'q;"	kind:type	file:
buckets	version_hash_table.m	/^:- type buckets(K, V) == version_array(hash_table_alist(K, V)).$/;kq|-;/\<buckets\>/;'q;"	kind:type	file:
buffer	io.m	/^:- type buffer ---> buffer(array(char)).$/;kq|-;/\<buffer\>/;'q;"	kind:cons	file:
buffer	io.m	/^:- type buffer ---> buffer(array(char)).$/;kq|-;/\<buffer\>/;'q;"	kind:type	file:
buffer_di	io.m	/^:- mode buffer_di == di(uniq_buffer).$/;kq|-;/\<buffer_di\>/;'q;"	kind:mode	file:
buffer_status	bit_buffer.read.m	/^:- pred buffer_status(stream.result(Error),$/;kq|/^\<buffer_status\>/;'q;"	kind:pred
buffer_to_string	io.m	/^:- pred io.buffer_to_string(buffer::buffer_di, int::in, string::uo) is semidet.$/;kq|/^\<io.buffer_to_string\>/;'q;"	kind:pred	file:
buffer_uo	io.m	/^:- mode buffer_uo == out(uniq_buffer).$/;kq|-;/\<buffer_uo\>/;'q;"	kind:mode	file:
build_command_line_args	io.m	/^:- pred build_command_line_args(int::in, list(string)::out) is det.$/;kq|/^\<build_command_line_args\>/;'q;"	kind:pred	file:
build_node	set_bbbtree.m	/^:- pred set_bbbtree.build_node(T::in, set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.build_node\>/;'q;"	kind:pred	file:
builder.handle	string.builder.m	/^    --->    handle.$/;kq|-;/\<builder.handle\>/;'q;"	kind:cons
builder.handle	string.builder.m	/^:- type handle$/;kq|-;/\<builder.handle\>/;'q;"	kind:type
builder.init	string.builder.m	/^:- func init = (string.builder.state::uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
builder.state	string.builder.m	/^    --->    state(list(string)).$/;kq|-;/\<builder.state\>/;'q;"	kind:cons	file:
builder.state	string.builder.m	/^:- type state$/;kq|-;/\<builder.state\>/;'q;"	kind:type	file:
builder.stream.output	string.builder.m	/^:- instance stream.output(string.builder.handle, string.builder.state)$/;kq|-;/\<builder.stream.output\>/;'q;"	kind:tci	file:
builder.stream.stream	string.builder.m	/^:- instance stream.stream(string.builder.handle, string.builder.state)$/;kq|-;/\<builder.stream.stream\>/;'q;"	kind:tci	file:
builder.stream.writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, char, string.builder.state)$/;kq|-;/\<builder.stream.writer\>/;'q;"	kind:tci	file:
builder.stream.writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, string, string.builder.state)$/;kq|-;/\<builder.stream.writer\>/;'q;"	kind:tci	file:
builder.to_string	string.builder.m	/^:- func to_string(string.builder.state::di) = (string::uo) is det.$/;kq|/^\<to_string\>/;'q;"	kind:func
builtin.<	builtin.m	/^    ;       (<)$/;kq|-;/\<builtin.<\>/;'q;"	kind:cons
builtin.=	builtin.m	/^    --->    (=)$/;kq|-;/\<builtin.=\>/;'q;"	kind:cons
builtin.>	builtin.m	/^    ;       (>).$/;kq|-;/\<builtin.>\>/;'q;"	kind:cons
builtin.T	builtin.m	/^:- pred T  @<  T.$/;kq|/^\<T\>/;'q;"	kind:pred
builtin.T	builtin.m	/^:- pred T  @=<  T.$/;kq|/^\<T\>/;'q;"	kind:pred
builtin.T	builtin.m	/^:- pred T  @>  T.$/;kq|/^\<T\>/;'q;"	kind:pred
builtin.T	builtin.m	/^:- pred T  @>=  T.$/;kq|/^\<T\>/;'q;"	kind:pred
builtin.cc_multi_equal	builtin.m	/^:- pred cc_multi_equal(T, T).$/;kq|/^\<cc_multi_equal\>/;'q;"	kind:pred
builtin.compare	builtin.m	/^:- inst compare == (pred(uo, in, in) is det).$/;kq|-;/\<builtin.compare\>/;'q;"	kind:inst
builtin.compare	builtin.m	/^:- pred compare(comparison_result, T, T).$/;kq|/^\<compare\>/;'q;"	kind:pred
builtin.compare	builtin.m	/^:- type compare(T) == pred(comparison_result, T, T).$/;kq|-;/\<builtin.compare\>/;'q;"	kind:type
builtin.compare_representation	builtin.m	/^:- pred compare_representation(comparison_result, T, T).$/;kq|/^\<compare_representation\>/;'q;"	kind:pred
builtin.comparison_func	builtin.m	/^:- inst comparison_func == comparison_func(ground).$/;kq|-;/\<builtin.comparison_func\>/;'q;"	kind:inst
builtin.comparison_func	builtin.m	/^:- inst comparison_func(I) == (func(in(I), in(I)) = out is det).$/;kq|-;/\<builtin.comparison_func\>/;'q;"	kind:inst
builtin.comparison_func	builtin.m	/^:- type comparison_func(T) == (func(T, T) = comparison_result).$/;kq|-;/\<builtin.comparison_func\>/;'q;"	kind:type
builtin.comparison_pred	builtin.m	/^:- inst comparison_pred == comparison_pred(ground).$/;kq|-;/\<builtin.comparison_pred\>/;'q;"	kind:inst
builtin.comparison_pred	builtin.m	/^:- inst comparison_pred(I) == (pred(in(I), in(I), out) is det).$/;kq|-;/\<builtin.comparison_pred\>/;'q;"	kind:inst
builtin.comparison_pred	builtin.m	/^:- type comparison_pred(T) == pred(T, T, comparison_result).$/;kq|-;/\<builtin.comparison_pred\>/;'q;"	kind:type
builtin.comparison_result	builtin.m	/^:- type comparison_result$/;kq|-;/\<builtin.comparison_result\>/;'q;"	kind:type
builtin.copy	builtin.m	/^:- pred copy(T, T).$/;kq|/^\<copy\>/;'q;"	kind:pred
builtin.dead	builtin.m	/^:- inst dead == clobbered.$/;kq|-;/\<builtin.dead\>/;'q;"	kind:inst
builtin.di	builtin.m	/^:- mode di == unique >> clobbered.$/;kq|-;/\<builtin.di\>/;'q;"	kind:mode
builtin.di	builtin.m	/^:- mode di(Inst)  == Inst >> clobbered.$/;kq|-;/\<builtin.di\>/;'q;"	kind:mode
builtin.dynamic_cast	builtin.m	/^:- pred dynamic_cast(T1::in, T2::out) is semidet.$/;kq|/^\<dynamic_cast\>/;'q;"	kind:pred
builtin.false	builtin.m	/^:- pred false is failure.$/;kq|/^\<false\>/;'q;"	kind:pred
builtin.get_one_solution	builtin.m	/^:- impure func get_one_solution(pred(T)) = T.$/;kq|/^\<get_one_solution\>/;'q;"	kind:func
builtin.get_one_solution_io	builtin.m	/^:- impure pred get_one_solution_io(pred(T, IO, IO), T, IO, IO).$/;kq|/^\<get_one_solution_io\>/;'q;"	kind:pred
builtin.ia	builtin.m	/^:- mode ia == any >> any.$/;kq|-;/\<builtin.ia\>/;'q;"	kind:mode
builtin.impure_true	builtin.m	/^:- impure pred impure_true is det.$/;kq|/^\<impure_true\>/;'q;"	kind:pred
builtin.in	builtin.m	/^:- mode in  == ground >> ground.$/;kq|-;/\<builtin.in\>/;'q;"	kind:mode
builtin.in	builtin.m	/^:- mode in(Inst)  == Inst >> Inst.$/;kq|-;/\<builtin.in\>/;'q;"	kind:mode
builtin.input	builtin.m	/^:- mode input  == ground >> ground.$/;kq|-;/\<builtin.input\>/;'q;"	kind:mode
builtin.mdi	builtin.m	/^:- mode mdi == mostly_unique >> mostly_clobbered.$/;kq|-;/\<builtin.mdi\>/;'q;"	kind:mode
builtin.mdi	builtin.m	/^:- mode mdi(Inst) == Inst >> mostly_clobbered.$/;kq|-;/\<builtin.mdi\>/;'q;"	kind:mode
builtin.mostly_dead	builtin.m	/^:- inst mostly_dead == mostly_clobbered.$/;kq|-;/\<builtin.mostly_dead\>/;'q;"	kind:inst
builtin.mui	builtin.m	/^:- mode mui == mostly_unique >> mostly_unique.$/;kq|-;/\<builtin.mui\>/;'q;"	kind:mode
builtin.muo	builtin.m	/^:- mode muo == free >> mostly_unique.$/;kq|-;/\<builtin.muo\>/;'q;"	kind:mode
builtin.new	builtin.m	/^:- inst new == free.$/;kq|-;/\<builtin.new\>/;'q;"	kind:inst
builtin.no	builtin.m	/^:- mode no == new >> old.$/;kq|-;/\<builtin.no\>/;'q;"	kind:mode
builtin.oa	builtin.m	/^:- mode oa == free >> any.$/;kq|-;/\<builtin.oa\>/;'q;"	kind:mode
builtin.old	builtin.m	/^:- inst old == any.$/;kq|-;/\<builtin.old\>/;'q;"	kind:inst
builtin.oo	builtin.m	/^:- mode oo == old >> old.$/;kq|-;/\<builtin.oo\>/;'q;"	kind:mode
builtin.ordering	builtin.m	/^:- func ordering(T, T) = comparison_result.$/;kq|/^\<ordering\>/;'q;"	kind:func
builtin.out	builtin.m	/^:- mode out == free >> ground.$/;kq|-;/\<builtin.out\>/;'q;"	kind:mode
builtin.out	builtin.m	/^:- mode out(Inst) == free >> Inst.$/;kq|-;/\<builtin.out\>/;'q;"	kind:mode
builtin.output	builtin.m	/^:- mode output == free >> ground.$/;kq|-;/\<builtin.output\>/;'q;"	kind:mode
builtin.promise_only_solution	builtin.m	/^:- func promise_only_solution(pred(T)) = T.$/;kq|/^\<promise_only_solution\>/;'q;"	kind:func
builtin.semidet_fail	builtin.m	/^:- pred semidet_fail is semidet.$/;kq|/^\<semidet_fail\>/;'q;"	kind:pred
builtin.semidet_false	builtin.m	/^:- pred semidet_false is semidet.$/;kq|/^\<semidet_false\>/;'q;"	kind:pred
builtin.semidet_succeed	builtin.m	/^:- pred semidet_succeed is semidet.$/;kq|/^\<semidet_succeed\>/;'q;"	kind:pred
builtin.semidet_true	builtin.m	/^:- pred semidet_true is semidet.$/;kq|/^\<semidet_true\>/;'q;"	kind:pred
builtin.semipure_true	builtin.m	/^:- semipure pred semipure_true is det.$/;kq|/^\<semipure_true\>/;'q;"	kind:pred
builtin.ui	builtin.m	/^:- mode ui == unique >> unique.$/;kq|-;/\<builtin.ui\>/;'q;"	kind:mode
builtin.unify	builtin.m	/^:- inst unify == (pred(in, in) is semidet).$/;kq|-;/\<builtin.unify\>/;'q;"	kind:inst
builtin.unify	builtin.m	/^:- pred unify(T::in, T::in) is semidet.$/;kq|/^\<unify\>/;'q;"	kind:pred
builtin.unify	builtin.m	/^:- type unify(T) == pred(T, T).$/;kq|-;/\<builtin.unify\>/;'q;"	kind:type
builtin.unsafe_promise_unique	builtin.m	/^:- func unsafe_promise_unique(T::in) = (T::uo) is det.$/;kq|/^\<unsafe_promise_unique\>/;'q;"	kind:func
builtin.unsafe_promise_unique	builtin.m	/^:- pred unsafe_promise_unique(T::in, T::uo) is det.$/;kq|/^\<unsafe_promise_unique\>/;'q;"	kind:pred
builtin.unused	builtin.m	/^:- mode unused == free >> free.$/;kq|-;/\<builtin.unused\>/;'q;"	kind:mode
builtin.uo	builtin.m	/^:- mode uo == free >> unique.$/;kq|-;/\<builtin.uo\>/;'q;"	kind:mode
builtin_aggregate	solutions.m	/^:- pred builtin_aggregate(pred(T), pred(T, U, U), U, U).$/;kq|/^\<builtin_aggregate\>/;'q;"	kind:pred	file:
builtin_aggregate2	solutions.m	/^:- pred builtin_aggregate2(pred(T), pred(T, U, U, V, V), U, U, V, V).$/;kq|/^\<builtin_aggregate2\>/;'q;"	kind:pred	file:
builtin_backjump	backjump.m	/^:- impure pred builtin_backjump(choice_id::in) is erroneous.$/;kq|/^\<builtin_backjump\>/;'q;"	kind:pred	file:
builtin_choice_id	backjump.m	/^:- impure pred builtin_choice_id(choice_id::out) is nondet.$/;kq|/^\<builtin_choice_id\>/;'q;"	kind:pred	file:
builtin_compare_character	private_builtin.m	/^:- pred builtin_compare_character(comparison_result::uo, character::in,$/;kq|/^\<builtin_compare_character\>/;'q;"	kind:pred
builtin_compare_float	private_builtin.m	/^:- pred builtin_compare_float(comparison_result::uo, float::in, float::in)$/;kq|/^\<builtin_compare_float\>/;'q;"	kind:pred
builtin_compare_int	private_builtin.m	/^:- pred builtin_compare_int(comparison_result::uo, int::in, int::in) is det.$/;kq|/^\<builtin_compare_int\>/;'q;"	kind:pred
builtin_compare_non_canonical_type	private_builtin.m	/^:- pred builtin_compare_non_canonical_type(comparison_result::uo,$/;kq|/^\<builtin_compare_non_canonical_type\>/;'q;"	kind:pred
builtin_compare_pred	private_builtin.m	/^:- pred builtin_compare_pred(comparison_result::uo, (pred)::in, (pred)::in)$/;kq|/^\<builtin_compare_pred\>/;'q;"	kind:pred
builtin_compare_solver_type	private_builtin.m	/^:- pred builtin_compare_solver_type(comparison_result::uo,$/;kq|/^\<builtin_compare_solver_type\>/;'q;"	kind:pred
builtin_compare_string	private_builtin.m	/^:- pred builtin_compare_string(comparison_result::uo, string::in, string::in)$/;kq|/^\<builtin_compare_string\>/;'q;"	kind:pred
builtin_compare_tuple	private_builtin.m	/^:- pred builtin_compare_tuple(comparison_result::uo, T::in, T::in) is det.$/;kq|/^\<builtin_compare_tuple\>/;'q;"	kind:pred
builtin_compound_eq	private_builtin.m	/^:- pred builtin_compound_eq(T::in, T::in) is semidet.$/;kq|/^\<builtin_compound_eq\>/;'q;"	kind:pred
builtin_compound_lt	private_builtin.m	/^:- pred builtin_compound_lt(T::in, T::in) is semidet.$/;kq|/^\<builtin_compound_lt\>/;'q;"	kind:pred
builtin_int_gt	private_builtin.m	/^:- pred builtin_int_gt(int::in, int::in) is semidet.$/;kq|/^\<builtin_int_gt\>/;'q;"	kind:pred
builtin_int_lt	private_builtin.m	/^:- pred builtin_int_lt(int::in, int::in) is semidet.$/;kq|/^\<builtin_int_lt\>/;'q;"	kind:pred
builtin_solutions	solutions.m	/^:- pred builtin_solutions(pred(T), list(T)).$/;kq|/^\<builtin_solutions\>/;'q;"	kind:pred	file:
builtin_strcmp	private_builtin.m	/^:- pred builtin_strcmp(int::out, string::in, string::in) is det.$/;kq|/^\<builtin_strcmp\>/;'q;"	kind:pred	file:
builtin_throw	exception.m	/^:- pred builtin_throw(univ::in) is erroneous.$/;kq|/^\<builtin_throw\>/;'q;"	kind:pred	file:
builtin_unify_character	private_builtin.m	/^:- pred builtin_unify_character(character::in, character::in) is semidet.$/;kq|/^\<builtin_unify_character\>/;'q;"	kind:pred
builtin_unify_float	private_builtin.m	/^:- pred builtin_unify_float(float::in, float::in) is semidet.$/;kq|/^\<builtin_unify_float\>/;'q;"	kind:pred
builtin_unify_int	private_builtin.m	/^:- pred builtin_unify_int(int::in, int::in) is semidet.$/;kq|/^\<builtin_unify_int\>/;'q;"	kind:pred
builtin_unify_pred	private_builtin.m	/^:- pred builtin_unify_pred((pred)::in, (pred)::in) is semidet.$/;kq|/^\<builtin_unify_pred\>/;'q;"	kind:pred
builtin_unify_solver_type	private_builtin.m	/^:- pred builtin_unify_solver_type(T::in, T::in) is semidet.$/;kq|/^\<builtin_unify_solver_type\>/;'q;"	kind:pred
builtin_unify_string	private_builtin.m	/^:- pred builtin_unify_string(string::in, string::in) is semidet.$/;kq|/^\<builtin_unify_string\>/;'q;"	kind:pred
builtin_unify_tuple	private_builtin.m	/^:- pred builtin_unify_tuple(T::in, T::in) is semidet.$/;kq|/^\<builtin_unify_tuple\>/;'q;"	kind:pred
bulk_get	stream.m	/^    pred bulk_get(Stream::in, Index::in, int::in,$/;kq|-;/\<bulk_get\>/;'q;"	kind:tcm
bulk_get_di	stream.m	/^:- mode bulk_get_di == in.$/;kq|-;/\<bulk_get_di\>/;'q;"	kind:mode
bulk_get_into_result_bitmap	bit_buffer.read.m	/^:- pred bulk_get_into_result_bitmap(bit_index::in, bit_index::out,$/;kq|/^\<bulk_get_into_result_bitmap\>/;'q;"	kind:pred	file:
bulk_get_uo	stream.m	/^:- mode bulk_get_uo == out.$/;kq|-;/\<bulk_get_uo\>/;'q;"	kind:mode
bulk_reader	bit_buffer.m	/^:- instance stream.bulk_reader(error_stream, byte_index, bitmap,$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tci
bulk_reader	bit_buffer.m	/^:- instance stream.bulk_reader(error_stream, byte_index, bitmap,$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tci	file:
bulk_reader	bit_buffer.read.m	/^:- instance stream.bulk_reader(read_stream(Stream, Error),$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tci
bulk_reader	bit_buffer.read.m	/^:- instance stream.bulk_reader(read_stream(Stream, Error),$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tci
bulk_reader	io.m	/^:- instance stream.bulk_reader(io.binary_input_stream, int,$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tci
bulk_reader	io.m	/^:- instance stream.bulk_reader(io.binary_input_stream, int,$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tci	file:
bulk_reader	stream.m	/^:- typeclass stream.bulk_reader(Stream, Index, Store, State, Error)$/;kq|-;/\<bulk_reader\>/;'q;"	kind:tc
bwd_map	digraph.m	/^                bwd_map             :: key_set_map(T)$/;kq|-;/\<bwd_map\>/;'q;"	kind:fld	file:
byte	bitmap.m	/^:- type byte == int.$/;kq|-;/\<byte\>/;'q;"	kind:type
byte_in_range	bitmap.m	/^:- pred byte_in_range(bitmap, byte_index).$/;kq|/^\<byte_in_range\>/;'q;"	kind:pred
byte_index	bitmap.m	/^:- type byte_index == int.$/;kq|-;/\<byte_index\>/;'q;"	kind:type
byte_index_for_bit	bitmap.m	/^:- func byte_index_for_bit(bit_index) = byte_index.$/;kq|/^\<byte_index_for_bit\>/;'q;"	kind:func	file:
byte_slice	bitmap.m	/^:- func bitmap.byte_slice(bitmap, byte_index, num_bytes) = bitmap.slice.$/;kq|/^\<bitmap.byte_slice\>/;'q;"	kind:func
bytes_compare	bitmap.m	/^:- pred bytes_compare(comparison_result, byte_index, byte_index,$/;kq|/^\<bytes_compare\>/;'q;"	kind:pred	file:
bytes_equal	bitmap.m	/^:- pred bytes_equal(byte_index, byte_index, bitmap, bitmap).$/;kq|/^\<bytes_equal\>/;'q;"	kind:pred	file:
c	string.m	/^    ;       c(char)$/;kq|-;/\<c\>/;'q;"	kind:cons	file:
c	string.m	/^    ;       c(char).$/;kq|-;/\<c\>/;'q;"	kind:cons
cE	string.m	/^    ;       cE(float)$/;kq|-;/\<cE\>/;'q;"	kind:cons	file:
cF	string.m	/^    ;       cF(float)$/;kq|-;/\<cF\>/;'q;"	kind:cons	file:
cG	string.m	/^    ;       cG(float)$/;kq|-;/\<cG\>/;'q;"	kind:cons	file:
cX	string.m	/^    ;       cX(int)$/;kq|-;/\<cX\>/;'q;"	kind:cons	file:
c_clk_tck	time.m	/^:- func time.c_clk_tck = int.$/;kq|/^\<time.c_clk_tck\>/;'q;"	kind:func	file:
c_clock	time.m	/^:- pred time.c_clock(int::out, io::di, io::uo) is det.$/;kq|/^\<time.c_clock\>/;'q;"	kind:pred	file:
c_difftime	time.m	/^:- pred time.c_difftime(time_t_rep::in, time_t_rep::in, float::out) is det.$/;kq|/^\<time.c_difftime\>/;'q;"	kind:pred	file:
c_gmtime	time.m	/^:- pred time.c_gmtime(time_t_rep::in, int::out, int::out, int::out, int::out,$/;kq|/^\<time.c_gmtime\>/;'q;"	kind:pred	file:
c_localtime	time.m	/^:- pred time.c_localtime(time_t_rep::in, int::out, int::out, int::out,$/;kq|/^\<time.c_localtime\>/;'q;"	kind:pred	file:
c_mktime	time.m	/^:- pred time.c_mktime(int::in, int::in, int::in, int::in, int::in, int::in,$/;kq|/^\<time.c_mktime\>/;'q;"	kind:pred	file:
c_pointer_to_string	string.m	/^:- func string.c_pointer_to_string(c_pointer::in) = (string::uo) is det.$/;kq|/^\<string.c_pointer_to_string\>/;'q;"	kind:func
c_pointer_to_string	string.m	/^:- pred string.c_pointer_to_string(c_pointer::in, string::uo) is det.$/;kq|/^\<string.c_pointer_to_string\>/;'q;"	kind:pred
c_time	time.m	/^:- pred time.c_time(time_t_rep::out, io::di, io::uo) is det.$/;kq|/^\<time.c_time\>/;'q;"	kind:pred	file:
c_times	time.m	/^:- pred time.c_times(int::out, int::out, int::out, int::out, int::out,$/;kq|/^\<time.c_times\>/;'q;"	kind:pred	file:
calculate_base_unsafe	string.m	/^:- func calculate_base_unsafe(string, int) = string.$/;kq|/^\<calculate_base_unsafe\>/;'q;"	kind:func	file:
calendar.add_duration	calendar.m	/^:- pred add_duration(duration::in, date::in, date::out) is det.$/;kq|/^\<add_duration\>/;'q;"	kind:pred
calendar.add_duration_loop	calendar.m	/^:- pred add_duration_loop(duration::in, date::in, date::in, date::out) is det.$/;kq|/^\<add_duration_loop\>/;'q;"	kind:pred	file:
calendar.april	calendar.m	/^    ;       april$/;kq|-;/\<calendar.april\>/;'q;"	kind:cons
calendar.ascending	calendar.m	/^    --->    ascending$/;kq|-;/\<calendar.ascending\>/;'q;"	kind:cons	file:
calendar.august	calendar.m	/^    ;       august$/;kq|-;/\<calendar.august\>/;'q;"	kind:cons
calendar.char_to_digit	calendar.m	/^:- pred char_to_digit(char::in, int::out) is semidet.$/;kq|/^\<char_to_digit\>/;'q;"	kind:pred	file:
calendar.current_local_time	calendar.m	/^:- pred current_local_time(date::out, io::di, io::uo) is det.$/;kq|/^\<current_local_time\>/;'q;"	kind:pred
calendar.current_utc_time	calendar.m	/^:- pred current_utc_time(date::out, io::di, io::uo) is det.$/;kq|/^\<current_utc_time\>/;'q;"	kind:pred
calendar.date	calendar.m	/^    --->    date($/;kq|-;/\<calendar.date\>/;'q;"	kind:cons	file:
calendar.date	calendar.m	/^:- type date$/;kq|-;/\<calendar.date\>/;'q;"	kind:type	file:
calendar.date_from_string	calendar.m	/^:- pred date_from_string(string::in, date::out) is semidet.$/;kq|/^\<date_from_string\>/;'q;"	kind:pred
calendar.date_to_string	calendar.m	/^:- func date_to_string(date) = string.$/;kq|/^\<date_to_string\>/;'q;"	kind:func
calendar.day_duration	calendar.m	/^:- func day_duration(date, date) = duration.$/;kq|/^\<day_duration\>/;'q;"	kind:func
calendar.day_of_month	calendar.m	/^:- func day_of_month(date) = day_of_month.$/;kq|/^\<day_of_month\>/;'q;"	kind:func
calendar.day_of_month	calendar.m	/^:- type day_of_month == int. % 1..31 depending on the month and year$/;kq|-;/\<calendar.day_of_month\>/;'q;"	kind:type
calendar.day_of_week	calendar.m	/^:- func day_of_week(date) = day_of_week.$/;kq|/^\<day_of_week\>/;'q;"	kind:func
calendar.day_of_week	calendar.m	/^:- type day_of_week$/;kq|-;/\<calendar.day_of_week\>/;'q;"	kind:type
calendar.day_of_week_num	calendar.m	/^:- pred day_of_week_num(day_of_week, int).$/;kq|/^\<day_of_week_num\>/;'q;"	kind:pred	file:
calendar.days	calendar.m	/^:- func days(duration) = days.$/;kq|/^\<days\>/;'q;"	kind:func
calendar.days	calendar.m	/^:- type days == int.$/;kq|-;/\<calendar.days\>/;'q;"	kind:type
calendar.december	calendar.m	/^    ;       december.$/;kq|-;/\<calendar.december\>/;'q;"	kind:cons
calendar.descending	calendar.m	/^    ;       descending.$/;kq|-;/\<calendar.descending\>/;'q;"	kind:cons	file:
calendar.det_date_from_string	calendar.m	/^:- func det_date_from_string(string) = date.$/;kq|/^\<det_date_from_string\>/;'q;"	kind:func
calendar.det_init_date	calendar.m	/^:- func det_init_date(year, month, day_of_month, hour, minute, second,$/;kq|/^\<det_init_date\>/;'q;"	kind:func
calendar.det_month	calendar.m	/^:- func det_month(int) = month.$/;kq|/^\<det_month\>/;'q;"	kind:func	file:
calendar.dt_day	calendar.m	/^                dt_day              :: int,$/;kq|-;/\<calendar.dt_day\>/;'q;"	kind:fld	file:
calendar.dt_hour	calendar.m	/^                dt_hour             :: int,$/;kq|-;/\<calendar.dt_hour\>/;'q;"	kind:fld	file:
calendar.dt_microsecond	calendar.m	/^                dt_microsecond      :: int$/;kq|-;/\<calendar.dt_microsecond\>/;'q;"	kind:fld	file:
calendar.dt_minute	calendar.m	/^                dt_minute           :: int,$/;kq|-;/\<calendar.dt_minute\>/;'q;"	kind:fld	file:
calendar.dt_month	calendar.m	/^                dt_month            :: int,$/;kq|-;/\<calendar.dt_month\>/;'q;"	kind:fld	file:
calendar.dt_second	calendar.m	/^                dt_second           :: int,$/;kq|-;/\<calendar.dt_second\>/;'q;"	kind:fld	file:
calendar.dt_year	calendar.m	/^                dt_year             :: int,$/;kq|-;/\<calendar.dt_year\>/;'q;"	kind:fld	file:
calendar.dur_days	calendar.m	/^                dur_days            :: int,$/;kq|-;/\<calendar.dur_days\>/;'q;"	kind:fld	file:
calendar.dur_microseconds	calendar.m	/^                dur_microseconds    :: int$/;kq|-;/\<calendar.dur_microseconds\>/;'q;"	kind:fld	file:
calendar.dur_months	calendar.m	/^                dur_months          :: int,$/;kq|-;/\<calendar.dur_months\>/;'q;"	kind:fld	file:
calendar.dur_seconds	calendar.m	/^                dur_seconds         :: int,$/;kq|-;/\<calendar.dur_seconds\>/;'q;"	kind:fld	file:
calendar.duration	calendar.m	/^    --->    duration($/;kq|-;/\<calendar.duration\>/;'q;"	kind:cons	file:
calendar.duration	calendar.m	/^:- func duration(date, date) = duration.$/;kq|/^\<duration\>/;'q;"	kind:func
calendar.duration	calendar.m	/^:- type duration$/;kq|-;/\<calendar.duration\>/;'q;"	kind:type	file:
calendar.duration_from_string	calendar.m	/^:- pred duration_from_string(string::in, duration::out) is semidet.$/;kq|/^\<duration_from_string\>/;'q;"	kind:pred
calendar.duration_leq	calendar.m	/^:- pred duration_leq(duration::in, duration::in) is semidet.$/;kq|/^\<duration_leq\>/;'q;"	kind:pred
calendar.duration_to_string	calendar.m	/^:- func duration_to_string(duration) = string.$/;kq|/^\<duration_to_string\>/;'q;"	kind:func
calendar.february	calendar.m	/^    ;       february$/;kq|-;/\<calendar.february\>/;'q;"	kind:cons
calendar.foldl2_days	calendar.m	/^:- pred foldl2_days(pred(date, A, A, B, B), date, date, A, A, B, B).$/;kq|/^\<foldl2_days\>/;'q;"	kind:pred
calendar.foldl3_days	calendar.m	/^:- pred foldl3_days(pred(date, A, A, B, B, C, C), date, date,$/;kq|/^\<foldl3_days\>/;'q;"	kind:pred
calendar.foldl_days	calendar.m	/^:- pred foldl_days(pred(date, A, A), date, date, A, A).$/;kq|/^\<foldl_days\>/;'q;"	kind:pred
calendar.fquotient	calendar.m	/^:- func fquotient(int, int, int) = int.$/;kq|/^\<fquotient\>/;'q;"	kind:func	file:
calendar.friday	calendar.m	/^    ;       friday$/;kq|-;/\<calendar.friday\>/;'q;"	kind:cons
calendar.hour	calendar.m	/^:- func hour(date) = hour.$/;kq|/^\<hour\>/;'q;"	kind:func
calendar.hour	calendar.m	/^:- type hour == int.         % 0..23$/;kq|-;/\<calendar.hour\>/;'q;"	kind:type
calendar.hours	calendar.m	/^:- func hours(duration) = hours.$/;kq|/^\<hours\>/;'q;"	kind:func
calendar.hours	calendar.m	/^:- type hours == int.$/;kq|-;/\<calendar.hours\>/;'q;"	kind:type
calendar.init_date	calendar.m	/^:- pred init_date(year::in, month::in, day_of_month::in, hour::in,$/;kq|/^\<init_date\>/;'q;"	kind:pred
calendar.init_duration	calendar.m	/^:- func init_duration(years, months, days, hours, minutes, seconds,$/;kq|/^\<init_duration\>/;'q;"	kind:func
calendar.january	calendar.m	/^    --->    january$/;kq|-;/\<calendar.january\>/;'q;"	kind:cons
calendar.julian_day_number	calendar.m	/^:- func julian_day_number(date) = int.$/;kq|/^\<julian_day_number\>/;'q;"	kind:func
calendar.july	calendar.m	/^    ;       july$/;kq|-;/\<calendar.july\>/;'q;"	kind:cons
calendar.june	calendar.m	/^    ;       june$/;kq|-;/\<calendar.june\>/;'q;"	kind:cons
calendar.local_time_offset	calendar.m	/^:- pred local_time_offset(duration::out, io::di, io::uo) is det.$/;kq|/^\<local_time_offset\>/;'q;"	kind:pred
calendar.march	calendar.m	/^    ;       march$/;kq|-;/\<calendar.march\>/;'q;"	kind:cons
calendar.max_day_in_month_for	calendar.m	/^:- func max_day_in_month_for(int, int) = int.$/;kq|/^\<max_day_in_month_for\>/;'q;"	kind:func	file:
calendar.may	calendar.m	/^    ;       may$/;kq|-;/\<calendar.may\>/;'q;"	kind:cons
calendar.microsecond	calendar.m	/^:- func microsecond(date) = microsecond.$/;kq|/^\<microsecond\>/;'q;"	kind:func
calendar.microsecond	calendar.m	/^:- type microsecond == int.  % 0..999999$/;kq|-;/\<calendar.microsecond\>/;'q;"	kind:type
calendar.microsecond_string	calendar.m	/^:- func microsecond_string(microseconds) = string.$/;kq|/^\<microsecond_string\>/;'q;"	kind:func	file:
calendar.microseconds	calendar.m	/^:- func microseconds(duration) = microseconds.$/;kq|/^\<microseconds\>/;'q;"	kind:func
calendar.microseconds	calendar.m	/^:- type microseconds == int.$/;kq|-;/\<calendar.microseconds\>/;'q;"	kind:type
calendar.minute	calendar.m	/^:- func minute(date) = minute.$/;kq|/^\<minute\>/;'q;"	kind:func
calendar.minute	calendar.m	/^:- type minute == int.       % 0..59$/;kq|-;/\<calendar.minute\>/;'q;"	kind:type
calendar.minutes	calendar.m	/^:- func minutes(duration) = minutes.$/;kq|/^\<minutes\>/;'q;"	kind:func
calendar.minutes	calendar.m	/^:- type minutes == int.$/;kq|-;/\<calendar.minutes\>/;'q;"	kind:type
calendar.modulo	calendar.m	/^:- func modulo(int, int) = int.$/;kq|/^\<modulo\>/;'q;"	kind:func	file:
calendar.modulo	calendar.m	/^:- func modulo(int, int, int) = int.$/;kq|/^\<modulo\>/;'q;"	kind:func	file:
calendar.monday	calendar.m	/^    --->    monday$/;kq|-;/\<calendar.monday\>/;'q;"	kind:cons
calendar.month	calendar.m	/^:- func month(date) = month.$/;kq|/^\<month\>/;'q;"	kind:func
calendar.month	calendar.m	/^:- type month$/;kq|-;/\<calendar.month\>/;'q;"	kind:type
calendar.month_num	calendar.m	/^:- func month_num(month) = int.$/;kq|/^\<month_num\>/;'q;"	kind:func	file:
calendar.months	calendar.m	/^:- func months(duration) = months.$/;kq|/^\<months\>/;'q;"	kind:func
calendar.months	calendar.m	/^:- type months == int.$/;kq|-;/\<calendar.months\>/;'q;"	kind:type
calendar.negate	calendar.m	/^:- func negate(duration) = duration.$/;kq|/^\<negate\>/;'q;"	kind:func
calendar.november	calendar.m	/^    ;       november$/;kq|-;/\<calendar.november\>/;'q;"	kind:cons
calendar.num_to_month	calendar.m	/^:- pred num_to_month(int, month).$/;kq|/^\<num_to_month\>/;'q;"	kind:pred	file:
calendar.october	calendar.m	/^    ;       october$/;kq|-;/\<calendar.october\>/;'q;"	kind:cons
calendar.order	calendar.m	/^:- type order$/;kq|-;/\<calendar.order\>/;'q;"	kind:type	file:
calendar.read_char	calendar.m	/^:- pred read_char(char::out, list(char)::in, list(char)::out) is semidet.$/;kq|/^\<read_char\>/;'q;"	kind:pred	file:
calendar.read_days	calendar.m	/^:- pred read_days(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_days\>/;'q;"	kind:pred	file:
calendar.read_hours	calendar.m	/^:- pred read_hours(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_hours\>/;'q;"	kind:pred	file:
calendar.read_int	calendar.m	/^:- pred read_int(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_int\>/;'q;"	kind:pred	file:
calendar.read_int_2	calendar.m	/^:- pred read_int_2(int::in, int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_int_2\>/;'q;"	kind:pred	file:
calendar.read_microseconds	calendar.m	/^:- pred read_microseconds(microseconds::out, list(char)::in, list(char)::out)$/;kq|/^\<read_microseconds\>/;'q;"	kind:pred	file:
calendar.read_minutes	calendar.m	/^:- pred read_minutes(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_minutes\>/;'q;"	kind:pred	file:
calendar.read_months	calendar.m	/^:- pred read_months(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_months\>/;'q;"	kind:pred	file:
calendar.read_sign	calendar.m	/^:- pred read_sign(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_sign\>/;'q;"	kind:pred	file:
calendar.read_years	calendar.m	/^:- pred read_years(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_years\>/;'q;"	kind:pred	file:
calendar.saturday	calendar.m	/^    ;       saturday$/;kq|-;/\<calendar.saturday\>/;'q;"	kind:cons
calendar.second	calendar.m	/^:- func second(date) = second.$/;kq|/^\<second\>/;'q;"	kind:func
calendar.second	calendar.m	/^:- type second == int.       % 0..61 (60 and 61 are for leap seconds)$/;kq|-;/\<calendar.second\>/;'q;"	kind:type
calendar.seconds	calendar.m	/^:- func seconds(duration) = seconds.$/;kq|/^\<seconds\>/;'q;"	kind:func
calendar.seconds	calendar.m	/^:- type seconds == int.$/;kq|-;/\<calendar.seconds\>/;'q;"	kind:type
calendar.seconds_per_day	calendar.m	/^:- func seconds_per_day = int.$/;kq|/^\<seconds_per_day\>/;'q;"	kind:func	file:
calendar.september	calendar.m	/^    ;       september$/;kq|-;/\<calendar.september\>/;'q;"	kind:cons
calendar.string_if_nonzero	calendar.m	/^:- func string_if_nonzero(int, string) = string.$/;kq|/^\<string_if_nonzero\>/;'q;"	kind:func	file:
calendar.sunday	calendar.m	/^    ;       sunday.$/;kq|-;/\<calendar.sunday\>/;'q;"	kind:cons
calendar.test_dates	calendar.m	/^:- func test_dates = list(date).$/;kq|/^\<test_dates\>/;'q;"	kind:func	file:
calendar.thursday	calendar.m	/^    ;       thursday$/;kq|-;/\<calendar.thursday\>/;'q;"	kind:cons
calendar.tm_to_date	calendar.m	/^:- func tm_to_date(time.tm) = date.$/;kq|/^\<tm_to_date\>/;'q;"	kind:func	file:
calendar.tuesday	calendar.m	/^    ;       tuesday$/;kq|-;/\<calendar.tuesday\>/;'q;"	kind:cons
calendar.unix_epoch	calendar.m	/^:- func unix_epoch = date.$/;kq|/^\<unix_epoch\>/;'q;"	kind:func
calendar.unpack_date	calendar.m	/^:- pred unpack_date(date::in,$/;kq|/^\<unpack_date\>/;'q;"	kind:pred
calendar.unpack_duration	calendar.m	/^:- pred unpack_duration(duration::in, years::out, months::out,$/;kq|/^\<unpack_duration\>/;'q;"	kind:pred
calendar.wednesday	calendar.m	/^    ;       wednesday$/;kq|-;/\<calendar.wednesday\>/;'q;"	kind:cons
calendar.year	calendar.m	/^:- func year(date) = year.$/;kq|/^\<year\>/;'q;"	kind:func
calendar.year	calendar.m	/^:- type year == int.         % Year 0 is 1 BC, -1 is 2 BC, etc.$/;kq|-;/\<calendar.year\>/;'q;"	kind:type
calendar.years	calendar.m	/^:- func years(duration) = years.$/;kq|/^\<years\>/;'q;"	kind:func
calendar.years	calendar.m	/^:- type years == int.$/;kq|-;/\<calendar.years\>/;'q;"	kind:type
calendar.zero_duration	calendar.m	/^:- func zero_duration = duration.$/;kq|/^\<zero_duration\>/;'q;"	kind:func
call_atomic_goal	stm_builtin.m	/^:- pred call_atomic_goal(pred(T, stm, stm)::in(pred(out, di, uo) is det),$/;kq|/^\<call_atomic_goal\>/;'q;"	kind:pred	file:
call_back_to_mercury	thread.m	/^:- pred call_back_to_mercury(pred(io, io), io, io).$/;kq|/^\<call_back_to_mercury\>/;'q;"	kind:pred	file:
call_goal	exception.m	/^:- pred call_goal(pred(T), T).$/;kq|/^\<call_goal\>/;'q;"	kind:pred	file:
call_handler	exception.m	/^:- pred call_handler(pred(univ, T), univ, T).$/;kq|/^\<call_handler\>/;'q;"	kind:pred	file:
call_rtti_compare_type_infos	type_desc.m	/^:- pred call_rtti_compare_type_infos(comparison_result::out,$/;kq|/^\<call_rtti_compare_type_infos\>/;'q;"	kind:pred	file:
call_rtti_generic_compare	builtin.m	/^:- pred call_rtti_generic_compare(comparison_result::out, T::in, T::in) is det.$/;kq|/^\<call_rtti_generic_compare\>/;'q;"	kind:pred
call_rtti_generic_unify	builtin.m	/^:- pred call_rtti_generic_unify(T::in, T::in) is semidet.$/;kq|/^\<call_rtti_generic_unify\>/;'q;"	kind:pred
call_site_dynamic	profiling_builtin.m	/^:- type call_site_dynamic   ---> call_site_dynamic(c_pointer).$/;kq|-;/\<call_site_dynamic\>/;'q;"	kind:cons	file:
call_site_dynamic	profiling_builtin.m	/^:- type call_site_dynamic   ---> call_site_dynamic(c_pointer).$/;kq|-;/\<call_site_dynamic\>/;'q;"	kind:type	file:
call_site_nums_2	profiling_builtin.m	/^    --->    call_site_nums_2(int, int).$/;kq|-;/\<call_site_nums_2\>/;'q;"	kind:cons
call_site_nums_2	profiling_builtin.m	/^:- type call_site_nums_2$/;kq|-;/\<call_site_nums_2\>/;'q;"	kind:type
call_site_nums_3	profiling_builtin.m	/^    --->    call_site_nums_3(int, int, int).$/;kq|-;/\<call_site_nums_3\>/;'q;"	kind:cons
call_site_nums_3	profiling_builtin.m	/^:- type call_site_nums_3$/;kq|-;/\<call_site_nums_3\>/;'q;"	kind:type
call_site_nums_4	profiling_builtin.m	/^    --->    call_site_nums_4(int, int, int, int).$/;kq|-;/\<call_site_nums_4\>/;'q;"	kind:cons
call_site_nums_4	profiling_builtin.m	/^:- type call_site_nums_4$/;kq|-;/\<call_site_nums_4\>/;'q;"	kind:type
call_site_nums_5	profiling_builtin.m	/^    --->    call_site_nums_5(int, int, int, int, int).$/;kq|-;/\<call_site_nums_5\>/;'q;"	kind:cons
call_site_nums_5	profiling_builtin.m	/^:- type call_site_nums_5$/;kq|-;/\<call_site_nums_5\>/;'q;"	kind:type
call_site_nums_6	profiling_builtin.m	/^    --->    call_site_nums_6(int, int, int, int, int, int).$/;kq|-;/\<call_site_nums_6\>/;'q;"	kind:cons
call_site_nums_6	profiling_builtin.m	/^:- type call_site_nums_6$/;kq|-;/\<call_site_nums_6\>/;'q;"	kind:type
call_site_nums_7	profiling_builtin.m	/^    --->    call_site_nums_7(int, int, int, int, int, int, int).$/;kq|-;/\<call_site_nums_7\>/;'q;"	kind:cons
call_site_nums_7	profiling_builtin.m	/^:- type call_site_nums_7$/;kq|-;/\<call_site_nums_7\>/;'q;"	kind:type
call_site_nums_8	profiling_builtin.m	/^    --->    call_site_nums_8(int, int, int, int, int, int, int, int).$/;kq|-;/\<call_site_nums_8\>/;'q;"	kind:cons
call_site_nums_8	profiling_builtin.m	/^:- type call_site_nums_8$/;kq|-;/\<call_site_nums_8\>/;'q;"	kind:type
call_site_nums_9	profiling_builtin.m	/^    --->    call_site_nums_9(int, int, int, int, int, int, int, int, int).$/;kq|-;/\<call_site_nums_9\>/;'q;"	kind:cons
call_site_nums_9	profiling_builtin.m	/^:- type call_site_nums_9$/;kq|-;/\<call_site_nums_9\>/;'q;"	kind:type
call_system	io.m	/^:- pred io.call_system(string::in, io.res(int)::out, io::di, io::uo) is det.$/;kq|/^\<io.call_system\>/;'q;"	kind:pred
call_system_code	io.m	/^:- pred io.call_system_code(string::in, int::out, string::out,$/;kq|/^\<io.call_system_code\>/;'q;"	kind:pred	file:
call_system_return_signal	io.m	/^:- pred io.call_system_return_signal(string::in,$/;kq|/^\<io.call_system_return_signal\>/;'q;"	kind:pred
call_table_stats	table_statistics.m	/^                call_table_stats            :: table_stats_curr_prev,$/;kq|-;/\<call_table_stats\>/;'q;"	kind:fld
can_format_siblings	term_to_xml.m	/^:- func can_format_siblings(xml) = bool.$/;kq|/^\<can_format_siblings\>/;'q;"	kind:func	file:
can_generate_dtd	term_to_xml.m	/^:- func can_generate_dtd(element_mapping::in(element_mapping),$/;kq|/^\<can_generate_dtd\>/;'q;"	kind:func
can_generate_dtd_2	term_to_xml.m	/^:- func can_generate_dtd_2(maybe_dtd::in, element_mapping::in(element_mapping),$/;kq|/^\<can_generate_dtd_2\>/;'q;"	kind:func	file:
can_generate_dtd_for_types	term_to_xml.m	/^:- func can_generate_dtd_for_types(element_pred::in(element_pred),$/;kq|/^\<can_generate_dtd_for_types\>/;'q;"	kind:func	file:
can_implement_dir_foldl	dir.m	/^:- pred can_implement_dir_foldl is semidet.$/;kq|/^\<can_implement_dir_foldl\>/;'q;"	kind:pred	file:
can_implement_make_directory	dir.m	/^:- pred can_implement_make_directory is semidet.$/;kq|/^\<can_implement_make_directory\>/;'q;"	kind:pred	file:
can_spawn	thread.m	/^:- pred can_spawn is semidet.$/;kq|/^\<can_spawn\>/;'q;"	kind:pred
cannot_fail	exception.m	/^:- inst cannot_fail$/;kq|-;/\<cannot_fail\>/;'q;"	kind:inst
canonicalize	deconstruct.m	/^    ;       canonicalize$/;kq|-;/\<canonicalize\>/;'q;"	kind:cons
canonicalize	deconstruct.m	/^:- inst canonicalize ---> canonicalize.$/;kq|-;/\<canonicalize\>/;'q;"	kind:inst
canonicalize_or_do_not_allow	deconstruct.m	/^:- inst canonicalize_or_do_not_allow$/;kq|-;/\<canonicalize_or_do_not_allow\>/;'q;"	kind:inst
canonicalize_path_chars	dir.m	/^:- func canonicalize_path_chars(list(char)) = list(char).$/;kq|/^\<canonicalize_path_chars\>/;'q;"	kind:func	file:
canonicalize_path_chars_2	dir.m	/^:- func canonicalize_path_chars_2(list(char), list(char)) = list(char).$/;kq|/^\<canonicalize_path_chars_2\>/;'q;"	kind:func	file:
capitalize_first	string.m	/^:- func string.capitalize_first(string) = string.$/;kq|/^\<string.capitalize_first\>/;'q;"	kind:func
capitalize_first	string.m	/^:- pred string.capitalize_first(string::in, string::out) is det.$/;kq|/^\<string.capitalize_first\>/;'q;"	kind:pred
cc_multi_equal	builtin.m	/^:- pred cc_multi_equal(T, T).$/;kq|/^\<cc_multi_equal\>/;'q;"	kind:pred
cdata	term_to_xml.m	/^    ;       cdata(string)$/;kq|-;/\<cdata\>/;'q;"	kind:cons
ceiling	math.m	/^:- func math.ceiling(float) = float.$/;kq|/^\<math.ceiling\>/;'q;"	kind:func
ceiling_to_int	float.m	/^:- func ceiling_to_int(float) = int.$/;kq|/^\<ceiling_to_int\>/;'q;"	kind:func
change_partition	eqvclass.m	/^:- pred eqvclass.change_partition(list(T)::in, partition_id::in,$/;kq|/^\<eqvclass.change_partition\>/;'q;"	kind:pred	file:
change_precision	string.m	/^:- func change_precision(int, string) = string.$/;kq|/^\<change_precision\>/;'q;"	kind:func	file:
change_to_e_notation	string.m	/^:- func change_to_e_notation(string, int, string) = string.$/;kq|/^\<change_to_e_notation\>/;'q;"	kind:func	file:
change_to_g_notation	string.m	/^:- func change_to_g_notation(string, int, string, flags) = string.$/;kq|/^\<change_to_g_notation\>/;'q;"	kind:func	file:
channel	thread.channel.m	/^    --->    channel($/;kq|-;/\<channel\>/;'q;"	kind:cons	file:
channel	thread.channel.m	/^:- type channel(T)$/;kq|-;/\<channel\>/;'q;"	kind:type	file:
channel.channel	thread.channel.m	/^    --->    channel($/;kq|-;/\<channel.channel\>/;'q;"	kind:cons	file:
channel.channel	thread.channel.m	/^:- type channel(T)$/;kq|-;/\<channel.channel\>/;'q;"	kind:type	file:
channel.channel.duplicate	thread.channel.m	/^:- pred channel.duplicate(channel(T)::in, channel(T)::out, io::di, io::uo)$/;kq|/^\<channel.duplicate\>/;'q;"	kind:pred
channel.channel.init	thread.channel.m	/^:- pred channel.init(channel(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.init\>/;'q;"	kind:pred
channel.channel.put	thread.channel.m	/^:- pred channel.put(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.put\>/;'q;"	kind:pred
channel.channel.take	thread.channel.m	/^:- pred channel.take(channel(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<channel.take\>/;'q;"	kind:pred
channel.channel.try_take	thread.channel.m	/^:- pred channel.try_take(channel(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.try_take\>/;'q;"	kind:pred
channel.channel.untake	thread.channel.m	/^:- pred channel.untake(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.untake\>/;'q;"	kind:pred
channel.duplicate	thread.channel.m	/^:- pred channel.duplicate(channel(T)::in, channel(T)::out, io::di, io::uo)$/;kq|/^\<channel.duplicate\>/;'q;"	kind:pred
channel.init	thread.channel.m	/^:- pred channel.init(channel(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.init\>/;'q;"	kind:pred
channel.item	thread.channel.m	/^    --->    item($/;kq|-;/\<channel.item\>/;'q;"	kind:cons	file:
channel.item	thread.channel.m	/^:- type item(T)$/;kq|-;/\<channel.item\>/;'q;"	kind:type	file:
channel.put	thread.channel.m	/^:- pred channel.put(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.put\>/;'q;"	kind:pred
channel.stream	thread.channel.m	/^:- type stream(T) == mvar(item(T)).$/;kq|-;/\<channel.stream\>/;'q;"	kind:type	file:
channel.take	thread.channel.m	/^:- pred channel.take(channel(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<channel.take\>/;'q;"	kind:pred
channel.try_take	thread.channel.m	/^:- pred channel.try_take(channel(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.try_take\>/;'q;"	kind:pred
channel.untake	thread.channel.m	/^:- pred channel.untake(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.untake\>/;'q;"	kind:pred
char	char.m	/^:- type char == character.$/;kq|-;/\<char\>/;'q;"	kind:type
char.char_to_doc	char.m	/^:- func char.char_to_doc(char) = pretty_printer.doc.$/;kq|/^\<char.char_to_doc\>/;'q;"	kind:func
char.det_from_int	char.m	/^:- func char.det_from_int(int) = char.$/;kq|/^\<char.det_from_int\>/;'q;"	kind:func
char.det_from_int	char.m	/^:- pred char.det_from_int(int::in, char::out) is det.$/;kq|/^\<char.det_from_int\>/;'q;"	kind:pred
char.det_int_to_digit	char.m	/^:- func char.det_int_to_digit(int) = char.$/;kq|/^\<char.det_int_to_digit\>/;'q;"	kind:func
char.det_int_to_digit	char.m	/^:- pred char.det_int_to_digit(int::in, char::out) is det.$/;kq|/^\<char.det_int_to_digit\>/;'q;"	kind:pred
char.digit_to_int	char.m	/^:- pred char.digit_to_int(char::in, int::out) is semidet.$/;kq|/^\<char.digit_to_int\>/;'q;"	kind:pred
char.enum	char.m	/^:- instance enum(character) where [$/;kq|-;/\<char.enum\>/;'q;"	kind:tci	file:
char.from_int	char.m	/^:- pred char.from_int(int::in, char::out) is semidet.$/;kq|/^\<char.from_int\>/;'q;"	kind:pred
char.int_to_digit	char.m	/^:- pred char.int_to_digit(int, char).$/;kq|/^\<char.int_to_digit\>/;'q;"	kind:pred
char.int_to_hex_char	char.m	/^:- pred char.int_to_hex_char(int, char).$/;kq|/^\<char.int_to_hex_char\>/;'q;"	kind:pred
char.is_alnum	char.m	/^:- pred char.is_alnum(char::in) is semidet.$/;kq|/^\<char.is_alnum\>/;'q;"	kind:pred
char.is_alnum_or_underscore	char.m	/^:- pred char.is_alnum_or_underscore(char::in) is semidet.$/;kq|/^\<char.is_alnum_or_underscore\>/;'q;"	kind:pred
char.is_alpha	char.m	/^:- pred char.is_alpha(char::in) is semidet.$/;kq|/^\<char.is_alpha\>/;'q;"	kind:pred
char.is_alpha_or_underscore	char.m	/^:- pred char.is_alpha_or_underscore(char::in) is semidet.$/;kq|/^\<char.is_alpha_or_underscore\>/;'q;"	kind:pred
char.is_binary_digit	char.m	/^:- pred char.is_binary_digit(char::in) is semidet.$/;kq|/^\<char.is_binary_digit\>/;'q;"	kind:pred
char.is_digit	char.m	/^:- pred char.is_digit(char::in) is semidet.$/;kq|/^\<char.is_digit\>/;'q;"	kind:pred
char.is_hex_digit	char.m	/^:- pred char.is_hex_digit(char, int).$/;kq|/^\<char.is_hex_digit\>/;'q;"	kind:pred
char.is_hex_digit	char.m	/^:- pred char.is_hex_digit(char::in) is semidet.$/;kq|/^\<char.is_hex_digit\>/;'q;"	kind:pred
char.is_lower	char.m	/^:- pred char.is_lower(char::in) is semidet.$/;kq|/^\<char.is_lower\>/;'q;"	kind:pred
char.is_noncharacter	char.m	/^:- pred char.is_noncharacter(char::in) is semidet.$/;kq|/^\<char.is_noncharacter\>/;'q;"	kind:pred
char.is_octal_digit	char.m	/^:- pred char.is_octal_digit(char::in) is semidet.$/;kq|/^\<char.is_octal_digit\>/;'q;"	kind:pred
char.is_surrogate	char.m	/^:- pred char.is_surrogate(char::in) is semidet.$/;kq|/^\<char.is_surrogate\>/;'q;"	kind:pred
char.is_upper	char.m	/^:- pred char.is_upper(char::in) is semidet.$/;kq|/^\<char.is_upper\>/;'q;"	kind:pred
char.is_whitespace	char.m	/^:- pred char.is_whitespace(char::in) is semidet.$/;kq|/^\<char.is_whitespace\>/;'q;"	kind:pred
char.lower_upper	char.m	/^:- pred char.lower_upper(char, char).$/;kq|/^\<char.lower_upper\>/;'q;"	kind:pred
char.max_char_value	char.m	/^:- func char.max_char_value = int.$/;kq|/^\<char.max_char_value\>/;'q;"	kind:func
char.max_char_value	char.m	/^:- pred char.max_char_value(int::out) is det.$/;kq|/^\<char.max_char_value\>/;'q;"	kind:pred
char.min_char_value	char.m	/^:- func char.min_char_value = int.$/;kq|/^\<char.min_char_value\>/;'q;"	kind:func
char.min_char_value	char.m	/^:- pred char.min_char_value(int::out) is det.$/;kq|/^\<char.min_char_value\>/;'q;"	kind:pred
char.to_int	char.m	/^:- func char.to_int(char) = int.$/;kq|/^\<char.to_int\>/;'q;"	kind:func
char.to_int	char.m	/^:- pred char.to_int(char, int).$/;kq|/^\<char.to_int\>/;'q;"	kind:pred
char.to_lower	char.m	/^:- func char.to_lower(char) = char.$/;kq|/^\<char.to_lower\>/;'q;"	kind:func
char.to_lower	char.m	/^:- pred char.to_lower(char::in, char::out) is det.$/;kq|/^\<char.to_lower\>/;'q;"	kind:pred
char.to_upper	char.m	/^:- func char.to_upper(char) = char.$/;kq|/^\<char.to_upper\>/;'q;"	kind:func
char.to_upper	char.m	/^:- pred char.to_upper(char::in, char::out) is det.$/;kq|/^\<char.to_upper\>/;'q;"	kind:pred
char.to_utf16	char.m	/^:- pred char.to_utf16(char::in, list(int)::out) is semidet.$/;kq|/^\<char.to_utf16\>/;'q;"	kind:pred
char.to_utf8	char.m	/^:- pred char.to_utf8(char::in, list(int)::out) is semidet.$/;kq|/^\<char.to_utf8\>/;'q;"	kind:pred
char_hash	hash_table.m	/^:- pred char_hash(char::in, int::out) is det.$/;kq|/^\<char_hash\>/;'q;"	kind:pred
char_hash	version_hash_table.m	/^:- pred char_hash(char::in, int::out) is det.$/;kq|/^\<char_hash\>/;'q;"	kind:pred
char_in_class	parsing_utils.m	/^:- pred char_in_class(string::in, src::in, char::out,$/;kq|/^\<char_in_class\>/;'q;"	kind:pred
char_list_to_lower	string.m	/^:- pred string.char_list_to_lower(list(char)::in, list(char)::out) is det.$/;kq|/^\<string.char_list_to_lower\>/;'q;"	kind:pred	file:
char_list_to_upper	string.m	/^:- pred string.char_list_to_upper(list(char)::in, list(char)::out) is det.$/;kq|/^\<string.char_list_to_upper\>/;'q;"	kind:pred	file:
char_to_digit	calendar.m	/^:- pred char_to_digit(char::in, int::out) is semidet.$/;kq|/^\<char_to_digit\>/;'q;"	kind:pred	file:
char_to_doc	char.m	/^:- func char.char_to_doc(char) = pretty_printer.doc.$/;kq|/^\<char.char_to_doc\>/;'q;"	kind:func
char_to_string	string.m	/^:- func string.char_to_string(char::in) = (string::uo) is det.$/;kq|/^\<string.char_to_string\>/;'q;"	kind:func
char_to_string	string.m	/^:- pred string.char_to_string(char, string).$/;kq|/^\<string.char_to_string\>/;'q;"	kind:pred
character_device	io.m	/^    ;       character_device$/;kq|-;/\<character_device\>/;'q;"	kind:cons
check0	test_bitset.m	/^:- pred check0(string::in, test_bitset(T)::in, test_bitset(T)::out) is det$/;kq|/^\<check0\>/;'q;"	kind:pred	file:
check1	test_bitset.m	/^:- pred check1(string::in, test_bitset(T)::in, test_bitset(T)::in,$/;kq|/^\<check1\>/;'q;"	kind:pred	file:
check2	test_bitset.m	/^:- pred check2(string::in, test_bitset(T)::in, test_bitset(T)::in,$/;kq|/^\<check2\>/;'q;"	kind:pred	file:
check_arg_types	erlang_rtti_implementation.m	/^:- pred check_arg_types(list(univ)::in, list(type_info)::in) is semidet.$/;kq|/^\<check_arg_types\>/;'q;"	kind:pred	file:
check_dir_accessibility	dir.m	/^:- pred dir.check_dir_accessibility(string::in, io.res::out, io::di, io::uo)$/;kq|/^\<dir.check_dir_accessibility\>/;'q;"	kind:pred	file:
check_dir_readable	dir.m	/^:- pred dir.check_dir_readable(string::in, int::out,$/;kq|/^\<dir.check_dir_readable\>/;'q;"	kind:pred	file:
check_directory_accessibility_dotnet	io.m	/^:- pred check_directory_accessibility_dotnet(string::in, int::in, int::in,$/;kq|/^\<check_directory_accessibility_dotnet\>/;'q;"	kind:pred	file:
check_err	io.m	/^:- pred io.check_err(stream::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.check_err\>/;'q;"	kind:pred	file:
check_file_accessibility	io.m	/^:- pred io.check_file_accessibility(string::in, list(access_type)::in,$/;kq|/^\<io.check_file_accessibility\>/;'q;"	kind:pred
check_file_accessibility_2	io.m	/^:- pred io.check_file_accessibility_2(string::in, list(access_type)::in,$/;kq|/^\<io.check_file_accessibility_2\>/;'q;"	kind:pred	file:
check_file_accessibility_dotnet	io.m	/^:- pred io.check_file_accessibility_dotnet(string::in, list(access_type)::in,$/;kq|/^\<io.check_file_accessibility_dotnet\>/;'q;"	kind:pred	file:
check_for_bad_token	parser.m	/^:- pred check_for_bad_token(token_list::in, string::out, int::out) is semidet.$/;kq|/^\<check_for_bad_token\>/;'q;"	kind:pred	file:
check_for_errors	parser.m	/^:- pred check_for_errors(parse(term(T))::in, varset(T)::in,$/;kq|/^\<check_for_errors\>/;'q;"	kind:pred	file:
check_for_floundering	solutions.m	/^:- impure pred check_for_floundering(trail_ptr::in) is det.$/;kq|/^\<check_for_floundering\>/;'q;"	kind:pred	file:
check_for_higher_order_term	parser.m	/^:- pred check_for_higher_order_term(parse(term(T))::in,$/;kq|/^\<check_for_higher_order_term\>/;'q;"	kind:pred	file:
check_for_symlink_loop	dir.m	/^:- pred check_for_symlink_loop(bool::in, string::in, io.res(bool)::out,$/;kq|/^\<check_for_symlink_loop\>/;'q;"	kind:pred	file:
check_functor	erlang_rtti_implementation.m	/^:- pred check_functor(T::in, erlang_atom::in, int::out) is semidet.$/;kq|/^\<check_functor\>/;'q;"	kind:pred	file:
check_priority	parser.m	/^:- pred check_priority(ops.assoc::in, int::in, int::in) is semidet.$/;kq|/^\<check_priority\>/;'q;"	kind:pred	file:
check_tsort	digraph.m	/^:- pred digraph.check_tsort(digraph(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.check_tsort\>/;'q;"	kind:pred	file:
check_tuple_arg_types	erlang_rtti_implementation.m	/^:- pred check_tuple_arg_types(type_info::in,$/;kq|/^\<check_tuple_arg_types\>/;'q;"	kind:pred	file:
children	term_to_xml.m	/^                children        :: list(xml)$/;kq|-;/\<children\>/;'q;"	kind:fld
choice_id	backjump.m	/^:- type choice_id == int.$/;kq|-;/\<choice_id\>/;'q;"	kind:type	file:
chomp	string.m	/^:- func string.chomp(string) = string.$/;kq|/^\<string.chomp\>/;'q;"	kind:func
choose_copy_direction	bitmap.m	/^:- func choose_copy_direction(int, bit_index, bit_index) = copy_direction.$/;kq|/^\<choose_copy_direction\>/;'q;"	kind:func	file:
choose_subtree	rtree.m	/^:- func choose_subtree(K, K, K) = min_of_two_result <= region(K).$/;kq|/^\<choose_subtree\>/;'q;"	kind:func	file:
choose_subtree	rtree.m	/^:- func choose_subtree(K, K, K, K) = min_of_three_result <= region(K).$/;kq|/^\<choose_subtree\>/;'q;"	kind:func	file:
chop	integer.m	/^:- pred chop(int::in, digit::out, digit::out) is det.$/;kq|/^\<chop\>/;'q;"	kind:pred	file:
chunk	list.m	/^:- func list.chunk(list(T), int) = list(list(T)).$/;kq|/^\<list.chunk\>/;'q;"	kind:func
chunk	list.m	/^:- pred list.chunk(list(T)::in, int::in, list(list(T))::out) is det.$/;kq|/^\<list.chunk\>/;'q;"	kind:pred
chunk_2	list.m	/^:- pred list.chunk_2(list(T)::in, int::in, list(T)::in, int::in,$/;kq|/^\<list.chunk_2\>/;'q;"	kind:pred	file:
chunk_inner_res	io.m	/^:- type chunk_inner_res(T)$/;kq|-;/\<chunk_inner_res\>/;'q;"	kind:type	file:
chunk_inner_res0	io.m	/^:- type chunk_inner_res0$/;kq|-;/\<chunk_inner_res0\>/;'q;"	kind:type	file:
chunk_size	io.m	/^:- func chunk_size = int.$/;kq|/^\<chunk_size\>/;'q;"	kind:func	file:
class	ops.m	/^:- type ops.class$/;kq|-;/\<class\>/;'q;"	kind:type
clear	bitmap.m	/^:- func clear(bitmap, bit_index) = bitmap.$/;kq|/^\<clear\>/;'q;"	kind:func
clear	bitmap.m	/^:- pred clear(bit_index, bitmap, bitmap).$/;kq|/^\<clear\>/;'q;"	kind:pred
clear	version_bitmap.m	/^:- func clear(version_bitmap, int) = version_bitmap.$/;kq|/^\<clear\>/;'q;"	kind:func
clear	version_bitmap.m	/^:- pred clear(int::in, version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<clear\>/;'q;"	kind:pred
clear_bit	fat_sparse_bitset.m	/^:- func clear_bit(int, int) = int.$/;kq|/^\<clear_bit\>/;'q;"	kind:func	file:
clear_bit	sparse_bitset.m	/^:- func clear_bit(int, int) = int.$/;kq|/^\<clear_bit\>/;'q;"	kind:func	file:
clear_bit	tree_bitset.m	/^:- func clear_bit(int, int) = int.$/;kq|/^\<clear_bit\>/;'q;"	kind:func	file:
clear_caches	robdd.m	/^:- impure pred clear_caches is det.$/;kq|/^\<clear_caches\>/;'q;"	kind:pred
clear_caches	robdd.m	/^:- pred clear_caches(io::di, io::uo) is det.$/;kq|/^\<clear_caches\>/;'q;"	kind:pred
clear_err	io.m	/^:- pred io.clear_err(stream::in, io::di, io::uo) is det.$/;kq|/^\<io.clear_err\>/;'q;"	kind:pred	file:
clear_filler_bits	bitmap.m	/^:- func clear_filler_bits(bitmap) = bitmap.$/;kq|/^\<clear_filler_bits\>/;'q;"	kind:func	file:
clear_filler_bits	version_bitmap.m	/^:- func clear_filler_bits(version_bitmap) = version_bitmap.$/;kq|/^\<clear_filler_bits\>/;'q;"	kind:func	file:
clear_mutvar	mutvar.m	/^:-        pred clear_mutvar(ui) is det.$/;kq|/^\<clear_mutvar\>/;'q;"	kind:pred
clear_mutvar	mutvar.m	/^:- impure pred clear_mutvar(mutvar(T)) is det.$/;kq|/^\<clear_mutvar\>/;'q;"	kind:pred
clique_map	digraph.m	/^:- type clique_map(T) == map(digraph_key(T), digraph_key(set(T))).$/;kq|-;/\<clique_map\>/;'q;"	kind:type	file:
cliques	digraph.m	/^:- func digraph.cliques(digraph(T)) = set(set(digraph_key(T))).$/;kq|/^\<digraph.cliques\>/;'q;"	kind:func
cliques	digraph.m	/^:- pred digraph.cliques(digraph(T)::in, set(set(digraph_key(T)))::out) is det.$/;kq|/^\<digraph.cliques\>/;'q;"	kind:pred
cliques_2	digraph.m	/^:- pred digraph.cliques_2(list(digraph_key(T))::in, digraph(T)::in,$/;kq|/^\<digraph.cliques_2\>/;'q;"	kind:pred	file:
clk_tck	time.m	/^:- func time.clk_tck = int.$/;kq|/^\<time.clk_tck\>/;'q;"	kind:func
clock	time.m	/^:- pred time.clock(clock_t::out, io::di, io::uo) is det.$/;kq|/^\<time.clock\>/;'q;"	kind:pred
clock_t	time.m	/^:- type clock_t == int.$/;kq|-;/\<clock_t\>/;'q;"	kind:type
clocks_per_sec	time.m	/^:- func time.clocks_per_sec = int.$/;kq|/^\<time.clocks_per_sec\>/;'q;"	kind:func
close	dir.m	/^:- pred dir.close(dir.stream::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<dir.close\>/;'q;"	kind:pred	file:
close	lexer.m	/^    ;       close               % ')'$/;kq|-;/\<close\>/;'q;"	kind:cons
close_2	dir.m	/^:- pred dir.close_2(dir.stream::in, int::out, io.system_error::out,$/;kq|/^\<dir.close_2\>/;'q;"	kind:pred	file:
close_binary_input	io.m	/^:- pred io.close_binary_input(io.binary_input_stream::in,$/;kq|/^\<io.close_binary_input\>/;'q;"	kind:pred
close_binary_output	io.m	/^:- pred io.close_binary_output(io.binary_output_stream::in,$/;kq|/^\<io.close_binary_output\>/;'q;"	kind:pred
close_curly	lexer.m	/^    ;       close_curly         % '}'$/;kq|-;/\<close_curly\>/;'q;"	kind:cons
close_group	pretty_printer.m	/^    ;       close_group$/;kq|-;/\<close_group\>/;'q;"	kind:cons	file:
close_input	io.m	/^:- pred io.close_input(io.input_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.close_input\>/;'q;"	kind:pred
close_list	lexer.m	/^    ;       close_list          % ']'$/;kq|-;/\<close_list\>/;'q;"	kind:cons
close_output	io.m	/^:- pred io.close_output(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.close_output\>/;'q;"	kind:pred
close_stream	io.m	/^:- pred io.close_stream(stream::in, io::di, io::uo) is det.$/;kq|/^\<io.close_stream\>/;'q;"	kind:pred	file:
closure	lazy.m	/^    ;       closure((func) = T).$/;kq|-;/\<closure\>/;'q;"	kind:cons	file:
cmp	rational.m	/^:- func cmp(rational, rational) = comparison_result.$/;kq|/^\<cmp\>/;'q;"	kind:func	file:
cmp_version_array	version_array.m	/^:- pred cmp_version_array(comparison_result::uo,$/;kq|/^\<cmp_version_array\>/;'q;"	kind:pred	file:
cmp_version_array_2	version_array.m	/^:- pred cmp_version_array_2(int::in, int::in, version_array(T)::in,$/;kq|/^\<cmp_version_array_2\>/;'q;"	kind:pred	file:
codepoint_offset	string.m	/^:- pred string.codepoint_offset(string::in, int::in, int::in, int::out)$/;kq|/^\<string.codepoint_offset\>/;'q;"	kind:pred
codepoint_offset	string.m	/^:- pred string.codepoint_offset(string::in, int::in, int::out) is semidet.$/;kq|/^\<string.codepoint_offset\>/;'q;"	kind:pred
codepoint_offset_2	string.m	/^:- pred codepoint_offset_2(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<codepoint_offset_2\>/;'q;"	kind:pred	file:
coerce	term.m	/^:- func coerce(term(T)) = term(U).$/;kq|/^\<coerce\>/;'q;"	kind:func
coerce	term.m	/^:- pred coerce(term(T)::in, term(U)::out) is det.$/;kq|/^\<coerce\>/;'q;"	kind:pred
coerce	varset.m	/^:- func varset.coerce(varset(T)) = varset(U).$/;kq|/^\<varset.coerce\>/;'q;"	kind:func
coerce	varset.m	/^:- pred varset.coerce(varset(T)::in, varset(U)::out) is det.$/;kq|/^\<varset.coerce\>/;'q;"	kind:pred
coerce_var	term.m	/^:- func coerce_var(var(T)) = var(U).$/;kq|/^\<coerce_var\>/;'q;"	kind:func
coerce_var	term.m	/^:- pred coerce_var(var(T)::in, var(U)::out) is det.$/;kq|/^\<coerce_var\>/;'q;"	kind:pred
coerce_var_supply	term.m	/^:- func coerce_var_supply(var_supply(T)) = var_supply(U).$/;kq|/^\<coerce_var_supply\>/;'q;"	kind:func
coerce_var_supply	term.m	/^:- pred coerce_var_supply(var_supply(T)::in, var_supply(U)::out) is det.$/;kq|/^\<coerce_var_supply\>/;'q;"	kind:pred
collapse_equivalences	erlang_rtti_implementation.m	/^:- func collapse_equivalences(type_info) = type_info.$/;kq|/^\<collapse_equivalences\>/;'q;"	kind:func	file:
collapse_equivalences	rtti_implementation.m	/^:- func collapse_equivalences(type_info) = type_info.$/;kq|/^\<collapse_equivalences\>/;'q;"	kind:func	file:
collapse_equivalences_pseudo	rtti_implementation.m	/^:- func collapse_equivalences_pseudo(pseudo_type_info) = pseudo_type_info.$/;kq|/^\<collapse_equivalences_pseudo\>/;'q;"	kind:func	file:
colon	pprint.m	/^:- func colon               = doc.$/;kq|/^\<colon\>/;'q;"	kind:func
colon_line	pprint.m	/^:- func colon_line          = doc.$/;kq|/^\<colon_line\>/;'q;"	kind:func
colon_space	pprint.m	/^:- func colon_space         = doc.$/;kq|/^\<colon_space\>/;'q;"	kind:func
colon_space_line	pprint.m	/^:- func colon_space_line    = doc.$/;kq|/^\<colon_space_line\>/;'q;"	kind:func
combine_hash	bitmap.m	/^:- pred combine_hash(int::in, int::in, int::out) is det.$/;kq|/^\<combine_hash\>/;'q;"	kind:pred	file:
comma	lexer.m	/^    ;       comma               % ','$/;kq|-;/\<comma\>/;'q;"	kind:cons
comma	pprint.m	/^:- func comma               = doc.$/;kq|/^\<comma\>/;'q;"	kind:func
comma_line	pprint.m	/^:- func comma_line          = doc.$/;kq|/^\<comma_line\>/;'q;"	kind:func
comma_priority	string.m	/^:- func comma_priority(ops.table) = ops.priority.$/;kq|/^\<comma_priority\>/;'q;"	kind:func	file:
comma_separated_list	parsing_utils.m	/^:- pred comma_separated_list(parser(T)::in(parser), src::in, list(T)::out,$/;kq|/^\<comma_separated_list\>/;'q;"	kind:pred
comma_separated_list	parsing_utils.m	/^:- pred comma_separated_list(parser_with_state(T, S)::in(parser_with_state),$/;kq|/^\<comma_separated_list\>/;'q;"	kind:pred
comma_space	pprint.m	/^:- func comma_space         = doc.$/;kq|/^\<comma_space\>/;'q;"	kind:func
comma_space_line	pprint.m	/^:- func comma_space_line    = doc.$/;kq|/^\<comma_space_line\>/;'q;"	kind:func
command_line_argument	io.m	/^:- pred command_line_argument(int::in, string::out) is semidet.$/;kq|/^\<command_line_argument\>/;'q;"	kind:pred	file:
command_line_arguments	io.m	/^:- pred io.command_line_arguments(list(string)::out, io::di, io::uo) is det.$/;kq|/^\<io.command_line_arguments\>/;'q;"	kind:pred
comment	term_to_xml.m	/^    ;       comment(string)$/;kq|-;/\<comment\>/;'q;"	kind:cons
common_mercury_functor	term_to_xml.m	/^:- pred common_mercury_functor(string::in, string::out) is semidet.$/;kq|/^\<common_mercury_functor\>/;'q;"	kind:pred	file:
common_subset	map.m	/^:- func map.common_subset(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.common_subset\>/;'q;"	kind:func
common_subset_2	map.m	/^:- func map.common_subset_2(assoc_list(K, V), assoc_list(K, V),$/;kq|/^\<map.common_subset_2\>/;'q;"	kind:func	file:
compare	builtin.m	/^:- inst compare == (pred(uo, in, in) is det).$/;kq|-;/\<compare\>/;'q;"	kind:inst
compare	builtin.m	/^:- pred compare(comparison_result, T, T).$/;kq|/^\<compare\>/;'q;"	kind:pred
compare	builtin.m	/^:- type compare(T) == pred(comparison_result, T, T).$/;kq|-;/\<compare\>/;'q;"	kind:type
compare_collapsed_type_infos	rtti_implementation.m	/^:- pred compare_collapsed_type_infos(comparison_result::out,$/;kq|/^\<compare_collapsed_type_infos\>/;'q;"	kind:pred	file:
compare_elements	array.m	/^:- pred array.compare_elements(int::in, int::in, array(T)::in, array(T)::in,$/;kq|/^\<array.compare_elements\>/;'q;"	kind:pred	file:
compare_error	private_builtin.m	/^:- pred compare_error is erroneous.$/;kq|/^\<compare_error\>/;'q;"	kind:pred
compare_file_id	io.m	/^:- pred compare_file_id(comparison_result::uo, file_id::in, file_id::in)$/;kq|/^\<compare_file_id\>/;'q;"	kind:pred	file:
compare_file_id_2	io.m	/^:- pred compare_file_id_2(int::out, file_id::in, file_id::in) is det.$/;kq|/^\<compare_file_id_2\>/;'q;"	kind:pred	file:
compare_item	version_hash_table.m	/^:- pred compare_item(version_hash_table(K, V)::in, K::in, V::in,$/;kq|/^\<compare_item\>/;'q;"	kind:pred	file:
compare_pseudo_type_info_args	rtti_implementation.m	/^:- pred compare_pseudo_type_info_args(comparison_result::out,$/;kq|/^\<compare_pseudo_type_info_args\>/;'q;"	kind:pred	file:
compare_pseudo_type_infos	rtti_implementation.m	/^:- pred compare_pseudo_type_infos(comparison_result::out,$/;kq|/^\<compare_pseudo_type_infos\>/;'q;"	kind:pred	file:
compare_representation	builtin.m	/^:- pred compare_representation(comparison_result, T, T).$/;kq|/^\<compare_representation\>/;'q;"	kind:pred
compare_sub_typeinfos	erlang_rtti_implementation.m	/^:- pred compare_sub_typeinfos(int::in, int::in,$/;kq|/^\<compare_sub_typeinfos\>/;'q;"	kind:pred	file:
compare_time_t_reps	time.m	/^:- pred compare_time_t_reps(comparison_result::uo,$/;kq|/^\<compare_time_t_reps\>/;'q;"	kind:pred	file:
compare_tuple	erlang_rtti_implementation.m	/^:- pred compare_tuple(type_info::in, comparison_result::out, T::in, T::in)$/;kq|/^\<compare_tuple\>/;'q;"	kind:pred	file:
compare_tuple	rtti_implementation.m	/^:- pred compare_tuple(type_info::in, comparison_result::out, T::in, T::in)$/;kq|/^\<compare_tuple\>/;'q;"	kind:pred	file:
compare_tuple_pos	erlang_rtti_implementation.m	/^:- pred compare_tuple_pos(int::in, int::in, type_info::in,$/;kq|/^\<compare_tuple_pos\>/;'q;"	kind:pred	file:
compare_tuple_pos	rtti_implementation.m	/^:- pred compare_tuple_pos(int::in, int::in, type_info::in,$/;kq|/^\<compare_tuple_pos\>/;'q;"	kind:pred	file:
compare_type_ctor_infos	rtti_implementation.m	/^:- pred compare_type_ctor_infos(comparison_result::out,$/;kq|/^\<compare_type_ctor_infos\>/;'q;"	kind:pred	file:
compare_type_info_args	rtti_implementation.m	/^:- pred compare_type_info_args(int::in, int::in, comparison_result::out,$/;kq|/^\<compare_type_info_args\>/;'q;"	kind:pred	file:
compare_type_infos	erlang_rtti_implementation.m	/^:- pred compare_type_infos(comparison_result::out,$/;kq|/^\<compare_type_infos\>/;'q;"	kind:pred
compare_type_infos	rtti_implementation.m	/^:- pred compare_type_infos(comparison_result::out,$/;kq|/^\<compare_type_infos\>/;'q;"	kind:pred
compare_values	lazy.m	/^:- pred compare_values(comparison_result::uo, lazy(T)::in, lazy(T)::in) is det.$/;kq|/^\<compare_values\>/;'q;"	kind:pred
compare_var_arity_type_info_args	rtti_implementation.m	/^:- pred compare_var_arity_type_info_args(int::in, int::in,$/;kq|/^\<compare_var_arity_type_info_args\>/;'q;"	kind:pred	file:
compare_var_arity_typeinfos	erlang_rtti_implementation.m	/^:- pred compare_var_arity_typeinfos(int::in, int::in,$/;kq|/^\<compare_var_arity_typeinfos\>/;'q;"	kind:pred	file:
comparison_func	builtin.m	/^:- inst comparison_func == comparison_func(ground).$/;kq|-;/\<comparison_func\>/;'q;"	kind:inst
comparison_func	builtin.m	/^:- inst comparison_func(I) == (func(in(I), in(I)) = out is det).$/;kq|-;/\<comparison_func\>/;'q;"	kind:inst
comparison_func	builtin.m	/^:- type comparison_func(T) == (func(T, T) = comparison_result).$/;kq|-;/\<comparison_func\>/;'q;"	kind:type
comparison_pred	builtin.m	/^:- inst comparison_pred == comparison_pred(ground).$/;kq|-;/\<comparison_pred\>/;'q;"	kind:inst
comparison_pred	builtin.m	/^:- inst comparison_pred(I) == (pred(in(I), in(I), out) is det).$/;kq|-;/\<comparison_pred\>/;'q;"	kind:inst
comparison_pred	builtin.m	/^:- type comparison_pred(T) == pred(T, T, comparison_result).$/;kq|-;/\<comparison_pred\>/;'q;"	kind:type
comparison_result	builtin.m	/^:- type comparison_result$/;kq|-;/\<comparison_result\>/;'q;"	kind:type
complement	bitmap.m	/^:- func complement(bitmap) = bitmap.$/;kq|/^\<complement\>/;'q;"	kind:func
complement	version_bitmap.m	/^:- func complement(version_bitmap) = version_bitmap.$/;kq|/^\<complement\>/;'q;"	kind:func
complement_2	bitmap.m	/^:- func complement_2(int, bitmap) = bitmap.$/;kq|/^\<complement_2\>/;'q;"	kind:func	file:
complement_2	version_bitmap.m	/^:- func complement_2(int, version_bitmap) = version_bitmap.$/;kq|/^\<complement_2\>/;'q;"	kind:func	file:
complexity_call_proc	term_size_prof_builtin.m	/^:- impure pred complexity_call_proc(complexity_slot::out) is det.$/;kq|/^\<complexity_call_proc\>/;'q;"	kind:pred
complexity_exit_proc	term_size_prof_builtin.m	/^:- impure pred complexity_exit_proc(complexity_slot::in) is det.$/;kq|/^\<complexity_exit_proc\>/;'q;"	kind:pred
complexity_fail_proc	term_size_prof_builtin.m	/^:- impure pred complexity_fail_proc(complexity_slot::in) is failure.$/;kq|/^\<complexity_fail_proc\>/;'q;"	kind:pred
complexity_is_active	term_size_prof_builtin.m	/^:- impure pred complexity_is_active(complexity_is_active::out) is det.$/;kq|/^\<complexity_is_active\>/;'q;"	kind:pred
complexity_is_active	term_size_prof_builtin.m	/^:- type complexity_is_active$/;kq|-;/\<complexity_is_active\>/;'q;"	kind:type
complexity_redo_proc	term_size_prof_builtin.m	/^:- impure pred complexity_redo_proc(complexity_slot::in) is failure.$/;kq|/^\<complexity_redo_proc\>/;'q;"	kind:pred
complexity_slot	term_size_prof_builtin.m	/^:- type complexity_slot == int.$/;kq|-;/\<complexity_slot\>/;'q;"	kind:type
components	digraph.m	/^:- func digraph.components(digraph(T)) = set(set(digraph_key(T))).$/;kq|/^\<digraph.components\>/;'q;"	kind:func
components	digraph.m	/^:- pred digraph.components(digraph(T)::in, set(set(digraph_key(T)))::out)$/;kq|/^\<digraph.components\>/;'q;"	kind:pred
components	tree_bitset.m	/^                components      :: node_list$/;kq|-;/\<components\>/;'q;"	kind:fld	file:
components_2	digraph.m	/^:- pred digraph.components_2(digraph(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.components_2\>/;'q;"	kind:pred	file:
compose	digraph.m	/^:- func digraph.compose(digraph(T), digraph(T)) = digraph(T).$/;kq|/^\<digraph.compose\>/;'q;"	kind:func
compose	digraph.m	/^:- pred digraph.compose(digraph(T)::in, digraph(T)::in, digraph(T)::out)$/;kq|/^\<digraph.compose\>/;'q;"	kind:pred
compose	std_util.m	/^:- func compose(func(T2) = T3, func(T1) = T2, T1) = T3.$/;kq|/^\<compose\>/;'q;"	kind:func
concat3	set_bbbtree.m	/^:- pred set_bbbtree.concat3(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.concat3\>/;'q;"	kind:pred	file:
concat4	set_bbbtree.m	/^:- pred set_bbbtree.concat4(set_bbbtree(T)::in, set_bbbtree(T)::in, T::in,$/;kq|/^\<set_bbbtree.concat4\>/;'q;"	kind:pred	file:
concrete_type_info	erlang_rtti_implementation.m	/^:- func concrete_type_info(ti_info(T), maybe_pseudo_type_info) = type_info.$/;kq|/^\<concrete_type_info\>/;'q;"	kind:func	file:
condense	cord.m	/^:- func condense(cord(cord(T))) = cord(T).$/;kq|/^\<condense\>/;'q;"	kind:func
condense	list.m	/^:- func list.condense(list(list(T))) = list(T).$/;kq|/^\<list.condense\>/;'q;"	kind:func
condense	list.m	/^:- pred list.condense(list(list(T))::in, list(T)::out) is det.$/;kq|/^\<list.condense\>/;'q;"	kind:pred
condense_2	cord.m	/^:- func condense_2(cord_node(cord(T))) = cord(T).$/;kq|/^\<condense_2\>/;'q;"	kind:func	file:
condense_2	list.m	/^:- pred list.condense_2(list(list(T))::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.condense_2\>/;'q;"	kind:pred	file:
conj_not_vars	robdd.m	/^:- func conj_not_vars(vars(T)) = robdd(T).$/;kq|/^\<conj_not_vars\>/;'q;"	kind:func
conj_vars	robdd.m	/^:- func conj_vars(vars(T)) = robdd(T).$/;kq|/^\<conj_vars\>/;'q;"	kind:func
conjunction_to_list	parser.m	/^:- pred conjunction_to_list(term(T)::in, list(term(T))::out) is det.$/;kq|/^\<conjunction_to_list\>/;'q;"	kind:pred	file:
cons	bt_array.m	/^    ;       cons(int, ra_list_bintree(T), ra_list(T)).$/;kq|-;/\<cons\>/;'q;"	kind:cons	file:
cons	cord.m	/^:- func cons(T, cord(T)) = cord(T).$/;kq|/^\<cons\>/;'q;"	kind:func
cons	list.m	/^:- func list.cons(T, list(T)) = list(T).$/;kq|/^\<list.cons\>/;'q;"	kind:func
cons	list.m	/^:- pred list.cons(T::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.cons\>/;'q;"	kind:pred
const	term.m	/^:- type const$/;kq|-;/\<const\>/;'q;"	kind:type
construct	construct.m	/^:- func construct(type_desc, functor_number_lex, list(univ)) = univ is semidet.$/;kq|/^\<construct\>/;'q;"	kind:func
construct	erlang_rtti_implementation.m	/^:- func construct(type_desc::in, functor_number_lex::in, list(univ)::in)$/;kq|/^\<construct\>/;'q;"	kind:func
construct	rtti_implementation.m	/^:- func construct(type_info, int, list(univ)) = univ is semidet.$/;kq|/^\<construct\>/;'q;"	kind:func
construct.det_num_functors	construct.m	/^:- func det_num_functors(type_desc) = int.$/;kq|/^\<det_num_functors\>/;'q;"	kind:func
construct.find_functor	construct.m	/^:- pred find_functor(type_desc::in, string::in, int::in,$/;kq|/^\<find_functor\>/;'q;"	kind:pred
construct.find_functor_2	construct.m	/^:- pred find_functor_2(type_desc::in, string::in, int::in,$/;kq|/^\<find_functor_2\>/;'q;"	kind:pred	file:
construct.functor_number_lex	construct.m	/^:- type functor_number_lex == int.$/;kq|-;/\<construct.functor_number_lex\>/;'q;"	kind:type
construct.get_functor	construct.m	/^:- pred get_functor(type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor\>/;'q;"	kind:pred
construct.get_functor_internal	construct.m	/^:- pred get_functor_internal(type_desc::in, int::in, string::out,$/;kq|/^\<get_functor_internal\>/;'q;"	kind:pred	file:
construct.get_functor_lex	construct.m	/^:- func get_functor_lex(type_desc, functor_number_ordinal) =$/;kq|/^\<get_functor_lex\>/;'q;"	kind:func
construct.get_functor_ordinal	construct.m	/^:- func get_functor_ordinal(type_desc, functor_number_lex) =$/;kq|/^\<get_functor_ordinal\>/;'q;"	kind:func
construct.get_functor_ordinal	construct.m	/^:- pred get_functor_ordinal(type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor_ordinal\>/;'q;"	kind:pred
construct.null	construct.m	/^:- pred null(string::in) is semidet.$/;kq|/^\<null\>/;'q;"	kind:pred	file:
construct.null_to_no	construct.m	/^:- func null_to_no(string) = maybe(string).$/;kq|/^\<null_to_no\>/;'q;"	kind:func	file:
construct.num_functors	construct.m	/^:- func num_functors(type_desc) = int is semidet.$/;kq|/^\<num_functors\>/;'q;"	kind:func
construct_empty_list_univ	erlang_rtti_implementation.m	/^:- func construct_empty_list_univ(type_info) = univ.$/;kq|/^\<construct_empty_list_univ\>/;'q;"	kind:func	file:
construct_list_cons_univ	erlang_rtti_implementation.m	/^:- func construct_list_cons_univ(type_info, univ, univ) = univ.$/;kq|/^\<construct_list_cons_univ\>/;'q;"	kind:func	file:
construct_time_t	time.m	/^:- func construct_time_t(time_t_rep) = time_t.$/;kq|/^\<construct_time_t\>/;'q;"	kind:func
construct_tuple	construct.m	/^:- func construct_tuple(list(univ)) = univ.$/;kq|/^\<construct_tuple\>/;'q;"	kind:func
construct_tuple_2	construct.m	/^:- func construct_tuple_2(list(univ), list(type_desc), int) = univ.$/;kq|/^\<construct_tuple_2\>/;'q;"	kind:func	file:
construct_tuple_2	erlang_rtti_implementation.m	/^:- func construct_tuple_2(list(univ), list(type_desc), int) = univ.$/;kq|/^\<construct_tuple_2\>/;'q;"	kind:func
construct_tuple_2	rtti_implementation.m	/^:- func construct_tuple_2(list(univ), list(type_info), int) = univ.$/;kq|/^\<construct_tuple_2\>/;'q;"	kind:func
construct_tuple_3	erlang_rtti_implementation.m	/^:- func construct_tuple_3(type_info, int, list(type_desc), list(univ)) = univ.$/;kq|/^\<construct_tuple_3\>/;'q;"	kind:func	file:
construct_tuple_univ	erlang_rtti_implementation.m	/^:- func construct_tuple_univ(type_info, list(univ)) = univ.$/;kq|/^\<construct_tuple_univ\>/;'q;"	kind:func	file:
construct_univ	erlang_rtti_implementation.m	/^:- func construct_univ(type_info, string, list(univ)) = univ.$/;kq|/^\<construct_univ\>/;'q;"	kind:func	file:
construct_univ	univ.m	/^:- pred construct_univ(T::in, univ::out) is det.$/;kq|/^\<construct_univ\>/;'q;"	kind:pred	file:
consume_io_state	exception.m	/^:- impure pred consume_io_state(io::di) is det.$/;kq|/^\<consume_io_state\>/;'q;"	kind:pred	file:
contains	bag.m	/^:- pred bag.contains(bag(T)::in, T::in) is semidet.$/;kq|/^\<bag.contains\>/;'q;"	kind:pred
contains	fat_sparse_bitset.m	/^:- pred contains(fat_sparse_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
contains	list.m	/^:- pred list.contains(list(T)::in, T::in) is semidet.$/;kq|/^\<list.contains\>/;'q;"	kind:pred
contains	map.m	/^:- pred map.contains(map(K, _V)::in, K::in) is semidet.$/;kq|/^\<map.contains\>/;'q;"	kind:pred
contains	multi_map.m	/^:- pred multi_map.contains(multi_map(K, _V)::in, K::in) is semidet.$/;kq|/^\<multi_map.contains\>/;'q;"	kind:pred
contains	rtree.m	/^    pred contains(K::in, K::in) is semidet,$/;kq|-;/\<contains\>/;'q;"	kind:tcm
contains	rtree.m	/^    pred(contains\/2) is box3d_contains, $/;kq|-;/\<contains\>/;'q;"	kind:tcim	file:
contains	rtree.m	/^    pred(contains\/2) is box_contains, $/;kq|-;/\<contains\>/;'q;"	kind:tcim	file:
contains	rtree.m	/^    pred(contains\/2) is interval_contains, $/;kq|-;/\<contains\>/;'q;"	kind:tcim	file:
contains	set.m	/^:- pred set.contains(set(T)::in, T::in) is semidet.$/;kq|/^\<set.contains\>/;'q;"	kind:pred
contains	set_bbbtree.m	/^:- pred set_bbbtree.contains(set_bbbtree(T)::in, T::in) is semidet.$/;kq|/^\<set_bbbtree.contains\>/;'q;"	kind:pred
contains	set_ctree234.m	/^:- pred set_ctree234.contains(set_ctree234(T)::in, T::in) is semidet.$/;kq|/^\<set_ctree234.contains\>/;'q;"	kind:pred
contains	set_ordlist.m	/^:- pred set_ordlist.contains(set_ordlist(T)::in, T::in) is semidet.$/;kq|/^\<set_ordlist.contains\>/;'q;"	kind:pred
contains	set_tree234.m	/^:- pred set_tree234.contains(set_tree234(T)::in, T::in) is semidet.$/;kq|/^\<set_tree234.contains\>/;'q;"	kind:pred
contains	set_unordlist.m	/^:- pred set_unordlist.contains(set_unordlist(T)::in, T::in) is semidet.$/;kq|/^\<set_unordlist.contains\>/;'q;"	kind:pred
contains	sparse_bitset.m	/^:- pred contains(sparse_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
contains	test_bitset.m	/^:- pred contains(test_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
contains	tree_bitset.m	/^:- pred contains(tree_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
contains_char	string.m	/^:- pred string.contains_char(string::in, char::in) is semidet.$/;kq|/^\<string.contains_char\>/;'q;"	kind:pred
contains_char	string.m	/^:- pred string.contains_char(string::in, char::in, int::in) is semidet.$/;kq|/^\<string.contains_char\>/;'q;"	kind:pred	file:
contains_key	bimap.m	/^:- pred bimap.contains_key(bimap(K, V)::in, K::in) is semidet.$/;kq|/^\<bimap.contains_key\>/;'q;"	kind:pred
contains_key	injection.m	/^:- pred injection.contains_key(injection(K, V)::in, K::in) is semidet.$/;kq|/^\<injection.contains_key\>/;'q;"	kind:pred
contains_noformat_xml	term_to_xml.m	/^:- pred contains_noformat_xml(list(xml)::in) is semidet.$/;kq|/^\<contains_noformat_xml\>/;'q;"	kind:pred	file:
contains_search_nodes	fat_sparse_bitset.m	/^:- pred contains_search_nodes(fat_bitset_impl::in, int::in) is semidet.$/;kq|/^\<contains_search_nodes\>/;'q;"	kind:pred	file:
contains_search_nodes	sparse_bitset.m	/^:- pred contains_search_nodes(bitset_impl::in, int::in) is semidet.$/;kq|/^\<contains_search_nodes\>/;'q;"	kind:pred	file:
contains_value	bimap.m	/^:- pred bimap.contains_value(bimap(K, V)::in, V::in) is semidet.$/;kq|/^\<bimap.contains_value\>/;'q;"	kind:pred
contains_value	injection.m	/^:- pred injection.contains_value(injection(K, V)::in, V::in) is semidet.$/;kq|/^\<injection.contains_value\>/;'q;"	kind:pred
contains_var	term.m	/^:- pred contains_var(term(T), var(T)).$/;kq|/^\<contains_var\>/;'q;"	kind:pred
contains_var_list	term.m	/^:- pred contains_var_list(list(term(T)), var(T)).$/;kq|/^\<contains_var_list\>/;'q;"	kind:pred
context	term.m	/^    --->    context(string, int).$/;kq|-;/\<context\>/;'q;"	kind:cons
context	term.m	/^:- type term.context$/;kq|-;/\<context\>/;'q;"	kind:type
context_file	term.m	/^:- func context_file(context) = string.$/;kq|/^\<context_file\>/;'q;"	kind:func
context_file	term.m	/^:- pred context_file(context::in, string::out) is det.$/;kq|/^\<context_file\>/;'q;"	kind:pred
context_init	term.m	/^:- func context_init = context.$/;kq|/^\<context_init\>/;'q;"	kind:func
context_init	term.m	/^:- func context_init(string, int) = context.$/;kq|/^\<context_init\>/;'q;"	kind:func
context_init	term.m	/^:- pred context_init(context::out) is det.$/;kq|/^\<context_init\>/;'q;"	kind:pred
context_init	term.m	/^:- pred context_init(string::in, int::in, context::out) is det.$/;kq|/^\<context_init\>/;'q;"	kind:pred
context_line	term.m	/^:- func context_line(context) = int.$/;kq|/^\<context_line\>/;'q;"	kind:func
context_line	term.m	/^:- pred context_line(context::in, int::out) is det.$/;kq|/^\<context_line\>/;'q;"	kind:pred
conv	string.m	/^:- func conv(maybe(list(character))) = maybe(int).$/;kq|/^\<conv\>/;'q;"	kind:func	file:
conv_string_to_int	lexer.m	/^:- pred conv_string_to_int(string::in, int::in, token::out) is det.$/;kq|/^\<conv_string_to_int\>/;'q;"	kind:pred	file:
conv_to_float	lexer.m	/^:- pred conv_to_float(string::in, token::out) is det.$/;kq|/^\<conv_to_float\>/;'q;"	kind:pred	file:
converse	std_util.m	/^:- func converse(func(T1, T2) = T3, T2, T1) = T3.$/;kq|/^\<converse\>/;'q;"	kind:func
conversion_specification	string.m	/^:- pred conversion_specification(string.specifier::out,$/;kq|/^\<conversion_specification\>/;'q;"	kind:pred	file:
convert_endpoints	string.m	/^:- pred convert_endpoints(int::in, int::in, int::out, int::out) is det.$/;kq|/^\<convert_endpoints\>/;'q;"	kind:pred	file:
convert_float_to_string	string.m	/^:- func convert_float_to_string(float) = string.$/;kq|/^\<convert_float_to_string\>/;'q;"	kind:func	file:
coordinates	bimap.m	/^:- func bimap.coordinates(bimap(K, V)) = list(V).$/;kq|/^\<bimap.coordinates\>/;'q;"	kind:func
coordinates	bimap.m	/^:- pred bimap.coordinates(bimap(K, V)::in, list(V)::out) is det.$/;kq|/^\<bimap.coordinates\>/;'q;"	kind:pred
copy	array.m	/^:- func array.copy(array(T)) = array(T).$/;kq|/^\<array.copy\>/;'q;"	kind:func
copy	array.m	/^:- pred array.copy(array(T), array(T)).$/;kq|/^\<array.copy\>/;'q;"	kind:pred
copy	bitmap.m	/^:- func copy(bitmap) = bitmap.$/;kq|/^\<copy\>/;'q;"	kind:func
copy	builtin.m	/^:- pred copy(T, T).$/;kq|/^\<copy\>/;'q;"	kind:pred
copy	hash_table.m	/^:- func copy(hash_table(K, V)) = hash_table(K, V).$/;kq|/^\<copy\>/;'q;"	kind:func
copy	version_array.m	/^:- func copy(version_array(T)) = version_array(T).$/;kq|/^\<copy\>/;'q;"	kind:func
copy	version_array2d.m	/^:- func copy(version_array2d(T)) = version_array2d(T).$/;kq|/^\<copy\>/;'q;"	kind:func
copy	version_bitmap.m	/^:- func copy(version_bitmap) = version_bitmap.$/;kq|/^\<copy\>/;'q;"	kind:func
copy	version_hash_table.m	/^:- func copy(version_hash_table(K, V)) = version_hash_table(K, V).$/;kq|/^\<copy\>/;'q;"	kind:func
copy_bitmap_into_place	bitmap.m	/^:- pred copy_bitmap_into_place(bitmap::in, int::in, int::out,$/;kq|/^\<copy_bitmap_into_place\>/;'q;"	kind:pred	file:
copy_bits	bitmap.m	/^:- func copy_bits(bitmap, bit_index, bitmap, bit_index, num_bits) = bitmap.$/;kq|/^\<copy_bits\>/;'q;"	kind:func
copy_bits	bitmap.m	/^:- func copy_bits(int, bitmap, bit_index,$/;kq|/^\<copy_bits\>/;'q;"	kind:func	file:
copy_bits_in_bitmap	bitmap.m	/^:- func copy_bits_in_bitmap(bitmap, bit_index, bit_index, num_bits) = bitmap.$/;kq|/^\<copy_bits_in_bitmap\>/;'q;"	kind:func
copy_buffered_bits_to_bitmap	bit_buffer.read.m	/^:- pred copy_buffered_bits_to_bitmap(bit_index::in, bit_index::out,$/;kq|/^\<copy_buffered_bits_to_bitmap\>/;'q;"	kind:pred	file:
copy_bytes	bitmap.m	/^:- func copy_bytes(bitmap, byte_index, bitmap, byte_index, num_bytes) = bitmap.$/;kq|/^\<copy_bytes\>/;'q;"	kind:func
copy_bytes	bitmap.m	/^:- func copy_bytes(int, bitmap, bit_index,$/;kq|/^\<copy_bytes\>/;'q;"	kind:func	file:
copy_bytes_in_bitmap	bitmap.m	/^:- func copy_bytes_in_bitmap(bitmap, byte_index,$/;kq|/^\<copy_bytes_in_bitmap\>/;'q;"	kind:func
copy_current_stats_to_prev	table_statistics.m	/^:- pred copy_current_stats_to_prev(ml_table_stats_ptr::in,$/;kq|/^\<copy_current_stats_to_prev\>/;'q;"	kind:pred	file:
copy_direction	bitmap.m	/^:- type copy_direction$/;kq|-;/\<copy_direction\>/;'q;"	kind:type	file:
copy_mutvar	store.m	/^:- pred store.copy_mutvar(generic_mutvar(T, S)::in, generic_mutvar(T, S)::out,$/;kq|/^\<store.copy_mutvar\>/;'q;"	kind:pred
copy_mutvar	version_store.m	/^:- pred copy_mutvar(mutvar(T, S)::in, mutvar(T, S)::out,$/;kq|/^\<copy_mutvar\>/;'q;"	kind:pred
copy_out_bitmap	bit_buffer.write.m	/^:- pred copy_out_bitmap(bitmap::in, bit_index::in,$/;kq|/^\<copy_out_bitmap\>/;'q;"	kind:pred
copy_ref_value	store.m	/^:- pred store.copy_ref_value(generic_ref(T, S)::in, T::uo,$/;kq|/^\<store.copy_ref_value\>/;'q;"	kind:pred
copy_run_ascending	array.m	/^:- pred copy_run_ascending(array(T)::array_ui,$/;kq|/^\<copy_run_ascending\>/;'q;"	kind:pred	file:
copy_subarray	array.m	/^:- pred copy_subarray(array(T)::array_ui, int::in, int::in, int::in,$/;kq|/^\<copy_subarray\>/;'q;"	kind:pred	file:
copy_subarray_reverse	array.m	/^:- pred copy_subarray_reverse(array(T)::array_ui, int::in, int::in, int::in,$/;kq|/^\<copy_subarray_reverse\>/;'q;"	kind:pred	file:
copy_var_names	varset.m	/^:- pred copy_var_names(assoc_list(var(T), string)::in, map(var(T), var(T))::in,$/;kq|/^\<copy_var_names\>/;'q;"	kind:pred	file:
copy_vertex	digraph.m	/^:- pred copy_vertex(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<copy_vertex\>/;'q;"	kind:pred	file:
cord	cord.m	/^:- func cord(T) ++ cord(T) = cord(T).$/;kq|/^\<cord\>/;'q;"	kind:func
cord	cord.m	/^:- type cord(T)$/;kq|-;/\<cord\>/;'q;"	kind:type	file:
cord.branch_node	cord.m	/^    ;       branch_node(cord_node(T), cord_node(T)).$/;kq|-;/\<cord.branch_node\>/;'q;"	kind:cons	file:
cord.condense	cord.m	/^:- func condense(cord(cord(T))) = cord(T).$/;kq|/^\<condense\>/;'q;"	kind:func
cord.condense_2	cord.m	/^:- func condense_2(cord_node(cord(T))) = cord(T).$/;kq|/^\<condense_2\>/;'q;"	kind:func	file:
cord.cons	cord.m	/^:- func cons(T, cord(T)) = cord(T).$/;kq|/^\<cons\>/;'q;"	kind:func
cord.empty	cord.m	/^:- func empty = cord(T).$/;kq|/^\<empty\>/;'q;"	kind:func
cord.empty_cord	cord.m	/^    --->    empty_cord$/;kq|-;/\<cord.empty_cord\>/;'q;"	kind:cons	file:
cord.equal	cord.m	/^:- pred equal(cord(T)::in, cord(T)::in) is semidet.$/;kq|/^\<equal\>/;'q;"	kind:pred
cord.filter	cord.m	/^:- pred filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter\>/;'q;"	kind:pred
cord.filter	cord.m	/^:- pred filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter\>/;'q;"	kind:pred
cord.filter_node	cord.m	/^:- pred filter_node(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter_node\>/;'q;"	kind:pred	file:
cord.filter_node	cord.m	/^:- pred filter_node(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter_node\>/;'q;"	kind:pred	file:
cord.foldl	cord.m	/^:- func foldl(func(T, U) = U, cord(T), U) = U.$/;kq|/^\<foldl\>/;'q;"	kind:func
cord.foldl_node	cord.m	/^:- pred foldl_node(func(T, U) = U, cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldl_node\>/;'q;"	kind:pred	file:
cord.foldl_node_pred	cord.m	/^:- pred foldl_node_pred(pred(T, U, U), cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldl_node_pred\>/;'q;"	kind:pred	file:
cord.foldl_pred	cord.m	/^:- pred foldl_pred(pred(T, U, U), cord(T), U, U).$/;kq|/^\<foldl_pred\>/;'q;"	kind:pred
cord.foldr	cord.m	/^:- func foldr(func(T, U) = U, cord(T), U) = U.$/;kq|/^\<foldr\>/;'q;"	kind:func
cord.foldr_node	cord.m	/^:- pred foldr_node(func(T, U) = U, cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldr_node\>/;'q;"	kind:pred	file:
cord.foldr_node_pred	cord.m	/^:- pred foldr_node_pred(pred(T, U, U), cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldr_node_pred\>/;'q;"	kind:pred	file:
cord.foldr_pred	cord.m	/^:- pred foldr_pred(pred(T, U, U), cord(T), U, U).$/;kq|/^\<foldr_pred\>/;'q;"	kind:pred
cord.from_list	cord.m	/^:- func from_list(list(T)) = cord(T).$/;kq|/^\<from_list\>/;'q;"	kind:func
cord.get_first	cord.m	/^:- pred get_first(cord(T)::in, T::out) is semidet.$/;kq|/^\<get_first\>/;'q;"	kind:pred
cord.get_first_node	cord.m	/^:- pred get_first_node(cord_node(T)::in, T::out) is det.$/;kq|/^\<get_first_node\>/;'q;"	kind:pred	file:
cord.get_last	cord.m	/^:- pred get_last(cord(T)::in, T::out) is semidet.$/;kq|/^\<get_last\>/;'q;"	kind:pred
cord.get_last_node	cord.m	/^:- pred get_last_node(cord_node(T)::in, T::out) is det.$/;kq|/^\<get_last_node\>/;'q;"	kind:pred	file:
cord.head_tail	cord.m	/^:- pred head_tail(cord(T)::in, T::out, cord(T)::out) is semidet.$/;kq|/^\<head_tail\>/;'q;"	kind:pred
cord.head_tail_node	cord.m	/^:- pred head_tail_node(cord_node(T)::in, T::out, cord(T)::out) is det.$/;kq|/^\<head_tail_node\>/;'q;"	kind:pred	file:
cord.init	cord.m	/^:- func init = cord(T).$/;kq|/^\<init\>/;'q;"	kind:func
cord.is_empty	cord.m	/^:- pred is_empty(cord(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
cord.length	cord.m	/^:- func length(cord(T)) = int.$/;kq|/^\<length\>/;'q;"	kind:func
cord.list	cord.m	/^:- func list(cord(T)) = list(T).$/;kq|/^\<list\>/;'q;"	kind:func
cord.list_2	cord.m	/^:- func list_2(list(cord_node(T)), list(T)) = list(T).$/;kq|/^\<list_2\>/;'q;"	kind:func	file:
cord.list_node	cord.m	/^    ;       list_node(T, list(T))$/;kq|-;/\<cord.list_node\>/;'q;"	kind:cons	file:
cord.list_reverse_2	cord.m	/^:- func list_reverse_2(list(A), list(A)) = list(A).$/;kq|/^\<list_reverse_2\>/;'q;"	kind:func	file:
cord.map	cord.m	/^:- func map(func(T) = U, cord(T)) = cord(U).$/;kq|/^\<map\>/;'q;"	kind:func
cord.map_foldl	cord.m	/^:- pred map_foldl(pred(A, B, C, C), cord(A), cord(B), C, C).$/;kq|/^\<map_foldl\>/;'q;"	kind:pred
cord.map_foldl2	cord.m	/^:- pred map_foldl2(pred(A, B, C, C, D, D)::$/;kq|/^\<map_foldl2\>/;'q;"	kind:pred
cord.map_foldl2_node	cord.m	/^:- pred map_foldl2_node(pred(A, B, C, C, D, D)::$/;kq|/^\<map_foldl2_node\>/;'q;"	kind:pred	file:
cord.map_foldl3	cord.m	/^:- pred map_foldl3(pred(A, B, C, C, D, D, E, E)::$/;kq|/^\<map_foldl3\>/;'q;"	kind:pred
cord.map_foldl3_node	cord.m	/^:- pred map_foldl3_node(pred(A, B, C, C, D, D, E, E)::$/;kq|/^\<map_foldl3_node\>/;'q;"	kind:pred	file:
cord.map_foldl_node	cord.m	/^:- pred map_foldl_node(pred(A, B, C, C), cord_node(A), cord_node(B), C, C).$/;kq|/^\<map_foldl_node\>/;'q;"	kind:pred	file:
cord.map_node	cord.m	/^:- func map_node(func(T) = U, cord_node(T)) = cord_node(U).$/;kq|/^\<map_node\>/;'q;"	kind:func	file:
cord.map_pred	cord.m	/^:- pred map_pred(pred(T, U)::in(pred(in, out) is det),$/;kq|/^\<map_pred\>/;'q;"	kind:pred
cord.map_pred_node	cord.m	/^:- pred map_pred_node(pred(T, U)::in(pred(in, out) is det),$/;kq|/^\<map_pred_node\>/;'q;"	kind:pred	file:
cord.member	cord.m	/^:- pred member(T::out, cord(T)::in) is nondet.$/;kq|/^\<member\>/;'q;"	kind:pred
cord.member_node	cord.m	/^:- pred member_node(T::out, cord_node(T)::in) is nondet.$/;kq|/^\<member_node\>/;'q;"	kind:pred	file:
cord.nonempty_cord	cord.m	/^    ;       nonempty_cord(cord_node(T)).$/;kq|-;/\<cord.nonempty_cord\>/;'q;"	kind:cons	file:
cord.rev_list	cord.m	/^:- func rev_list(cord(T)) = list(T).$/;kq|/^\<rev_list\>/;'q;"	kind:func
cord.rev_list_2	cord.m	/^:- func rev_list_2(list(cord_node(T)), list(T)) = list(T).$/;kq|/^\<rev_list_2\>/;'q;"	kind:func	file:
cord.singleton	cord.m	/^:- func singleton(T) = cord(T).$/;kq|/^\<singleton\>/;'q;"	kind:func
cord.snoc	cord.m	/^:- func snoc(cord(T), T) = cord(T).$/;kq|/^\<snoc\>/;'q;"	kind:func
cord.split_last	cord.m	/^:- pred split_last(cord(T)::in, cord(T)::out, T::out) is semidet.$/;kq|/^\<split_last\>/;'q;"	kind:pred
cord.split_last_node	cord.m	/^:- pred split_last_node(cord_node(T)::in, cord(T)::out, T::out) is det.$/;kq|/^\<split_last_node\>/;'q;"	kind:pred	file:
cord.split_list_last	cord.m	/^:- pred split_list_last(T::in, list(T)::in, list(T)::out, T::out) is det.$/;kq|/^\<split_list_last\>/;'q;"	kind:pred	file:
cord.unit_node	cord.m	/^    --->    unit_node(T)$/;kq|-;/\<cord.unit_node\>/;'q;"	kind:cons	file:
cord_list_to_cord	cord.m	/^:- func cord_list_to_cord(list(cord(T))) = cord(T).$/;kq|/^\<cord_list_to_cord\>/;'q;"	kind:func
cord_list_to_list	cord.m	/^:- func cord_list_to_list(list(cord(T))) = list(T).$/;kq|/^\<cord_list_to_list\>/;'q;"	kind:func
cord_list_to_list_2	cord.m	/^:- func cord_list_to_list_2(cord(T), list(T)) = list(T).$/;kq|/^\<cord_list_to_list_2\>/;'q;"	kind:func	file:
cord_node	cord.m	/^:- type cord_node(T)$/;kq|-;/\<cord_node\>/;'q;"	kind:type	file:
cos	math.m	/^:- func math.cos(float) = float.$/;kq|/^\<math.cos\>/;'q;"	kind:func
cosh	math.m	/^:- func math.cosh(float) = float.$/;kq|/^\<math.cosh\>/;'q;"	kind:func
could_start_term	parser.m	/^:- pred could_start_term(token::in, bool::out) is det.$/;kq|/^\<could_start_term\>/;'q;"	kind:pred	file:
count	bag.m	/^:- func bag.count(bag(T)) = int.$/;kq|/^\<bag.count\>/;'q;"	kind:func
count	bimap.m	/^:- func bimap.count(bimap(K, V)) = int.$/;kq|/^\<bimap.count\>/;'q;"	kind:func
count	fat_sparse_bitset.m	/^:- func count(fat_sparse_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
count	map.m	/^:- func map.count(map(K, V)) = int.$/;kq|/^\<map.count\>/;'q;"	kind:func
count	map.m	/^:- pred map.count(map(K, V)::in, int::out) is det.$/;kq|/^\<map.count\>/;'q;"	kind:pred
count	multi_map.m	/^:- func multi_map.count(multi_map(K, V)) = int.$/;kq|/^\<multi_map.count\>/;'q;"	kind:func
count	multi_map.m	/^:- pred multi_map.count(multi_map(K, V)::in, int::out) is det.$/;kq|/^\<multi_map.count\>/;'q;"	kind:pred
count	rbtree.m	/^:- func rbtree.count(rbtree(K, V)) = int.$/;kq|/^\<rbtree.count\>/;'q;"	kind:func
count	rbtree.m	/^:- pred rbtree.count(rbtree(K, V)::in, int::out) is det.$/;kq|/^\<rbtree.count\>/;'q;"	kind:pred
count	set.m	/^:- func set.count(set(T)) = int.$/;kq|/^\<set.count\>/;'q;"	kind:func
count	set.m	/^:- pred set.count(set(T)::in, int::out) is det.$/;kq|/^\<set.count\>/;'q;"	kind:pred
count	set_bbbtree.m	/^:- func set_bbbtree.count(set_bbbtree(T)) = int.$/;kq|/^\<set_bbbtree.count\>/;'q;"	kind:func
count	set_bbbtree.m	/^:- pred set_bbbtree.count(set_bbbtree(T)::in, int::out) is det.$/;kq|/^\<set_bbbtree.count\>/;'q;"	kind:pred
count	set_ctree234.m	/^:- func set_ctree234.count(set_ctree234(T)) = int.$/;kq|/^\<set_ctree234.count\>/;'q;"	kind:func
count	set_ordlist.m	/^:- func set_ordlist.count(set_ordlist(T)) = int.$/;kq|/^\<set_ordlist.count\>/;'q;"	kind:func
count	set_ordlist.m	/^:- pred set_ordlist.count(set_ordlist(T)::in, int::out) is det.$/;kq|/^\<set_ordlist.count\>/;'q;"	kind:pred
count	set_tree234.m	/^:- func set_tree234.count(set_tree234(T)) = int.$/;kq|/^\<set_tree234.count\>/;'q;"	kind:func
count	set_unordlist.m	/^:- func set_unordlist.count(set_unordlist(T)) = int.$/;kq|/^\<set_unordlist.count\>/;'q;"	kind:func
count	set_unordlist.m	/^:- pred set_unordlist.count(set_unordlist(T)::in, int::out) is det.$/;kq|/^\<set_unordlist.count\>/;'q;"	kind:pred
count	sparse_bitset.m	/^:- func count(sparse_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
count	test_bitset.m	/^:- func count(test_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
count	tree234.m	/^:- func tree234.count(tree234(K, V)) = int.$/;kq|/^\<tree234.count\>/;'q;"	kind:func
count	tree234.m	/^:- pred tree234.count(tree234(K, V)::in, int::out) is det.$/;kq|/^\<tree234.count\>/;'q;"	kind:pred
count	tree_bitset.m	/^:- func count(tree_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
count_bits	fat_sparse_bitset.m	/^:- pred count_bits(int::in, int::in, int::in,$/;kq|/^\<count_bits\>/;'q;"	kind:pred	file:
count_bits	sparse_bitset.m	/^:- pred count_bits(int::in, int::in, int::in,$/;kq|/^\<count_bits\>/;'q;"	kind:pred	file:
count_code_units	string.m	/^:- func string.count_code_units(string) = int.$/;kq|/^\<string.count_code_units\>/;'q;"	kind:func
count_code_units	string.m	/^:- pred string.count_code_units(string::in, int::out) is det.$/;kq|/^\<string.count_code_units\>/;'q;"	kind:pred
count_codepoints	string.m	/^:- func string.count_codepoints(string) = int.$/;kq|/^\<string.count_codepoints\>/;'q;"	kind:func
count_codepoints	string.m	/^:- pred string.count_codepoints(string::in, int::out) is det.$/;kq|/^\<string.count_codepoints\>/;'q;"	kind:pred
count_codepoints_2	string.m	/^:- pred count_codepoints_2(string::in, int::in, int::in, int::out) is det.$/;kq|/^\<count_codepoints_2\>/;'q;"	kind:pred	file:
count_list	multi_map.m	/^:- pred multi_map.count_list(list(A)::in, int::in, int::out) is det.$/;kq|/^\<multi_map.count_list\>/;'q;"	kind:pred	file:
count_unique	bag.m	/^:- func bag.count_unique(bag(T)) = int.$/;kq|/^\<bag.count_unique\>/;'q;"	kind:func
count_utf8_code_units	string.m	/^:- func string.count_utf8_code_units(string) = int.$/;kq|/^\<string.count_utf8_code_units\>/;'q;"	kind:func
count_utf8_code_units_2	string.m	/^:- pred count_utf8_code_units_2(char::in, int::in, int::out) is det.$/;kq|/^\<count_utf8_code_units_2\>/;'q;"	kind:pred	file:
count_value	bag.m	/^:- func bag.count_value(bag(T), T) = int.$/;kq|/^\<bag.count_value\>/;'q;"	kind:func
count_value	bag.m	/^:- pred bag.count_value(bag(T)::in, T::in, int::out) is det.$/;kq|/^\<bag.count_value\>/;'q;"	kind:pred
counter	counter.m	/^    --->    counter(int).$/;kq|-;/\<counter\>/;'q;"	kind:cons	file:
counter	counter.m	/^:- type counter$/;kq|-;/\<counter\>/;'q;"	kind:type	file:
counter.allocate	counter.m	/^:- pred counter.allocate(int::out, counter::in, counter::out) is det.$/;kq|/^\<counter.allocate\>/;'q;"	kind:pred
counter.init	counter.m	/^:- func counter.init(int) = counter.$/;kq|/^\<counter.init\>/;'q;"	kind:func
counter.init	counter.m	/^:- pred counter.init(int::in, counter::out) is det.$/;kq|/^\<counter.init\>/;'q;"	kind:pred
create_name_var_map	varset.m	/^:- func varset.create_name_var_map(varset(T)) = map(string, var(T)).$/;kq|/^\<varset.create_name_var_map\>/;'q;"	kind:func
create_name_var_map	varset.m	/^:- pred varset.create_name_var_map(varset(T)::in, map(string, var(T))::out)$/;kq|/^\<varset.create_name_var_map\>/;'q;"	kind:pred
create_pseudo_type_info	rtti_implementation.m	/^:- func create_pseudo_type_info(type_info, pseudo_type_info) = pseudo_type_info.$/;kq|/^\<create_pseudo_type_info\>/;'q;"	kind:func	file:
create_region	region_builtin.m	/^:- impure pred create_region(region::out) is det.$/;kq|/^\<create_region\>/;'q;"	kind:pred
create_type_info	erlang_rtti_implementation.m	/^:- func create_type_info(type_ctor_info_evaled, list(type_info)) = type_info.$/;kq|/^\<create_type_info\>/;'q;"	kind:func	file:
create_var	term.m	/^:- pred create_var(var(T)::out, var_supply(T)::in, var_supply(T)::out) is det.$/;kq|/^\<create_var\>/;'q;"	kind:pred
create_var_arity_type_info	erlang_rtti_implementation.m	/^:- func create_var_arity_type_info(type_ctor_info_evaled,$/;kq|/^\<create_var_arity_type_info\>/;'q;"	kind:func	file:
ct	set_ctree234.m	/^    --->    ct(int, set_tree234(T)).$/;kq|-;/\<ct\>/;'q;"	kind:cons	file:
ctime	time.m	/^:- func time.ctime(time_t) = string.$/;kq|/^\<time.ctime\>/;'q;"	kind:func
cur	io.m	/^    ;       cur$/;kq|-;/\<cur\>/;'q;"	kind:cons
cur	stream.m	/^    ;       cur$/;kq|-;/\<cur\>/;'q;"	kind:cons
current_directory	dir.m	/^:- pred dir.current_directory(io.res(string)::out, io::di, io::uo) is det.$/;kq|/^\<dir.current_directory\>/;'q;"	kind:pred
current_local_time	calendar.m	/^:- pred current_local_time(date::out, io::di, io::uo) is det.$/;kq|/^\<current_local_time\>/;'q;"	kind:pred
current_offset	parsing_utils.m	/^:- pred current_offset(src::in, int::out, ps::in, ps::out) is det.$/;kq|/^\<current_offset\>/;'q;"	kind:pred
current_stats	table_statistics.m	/^                current_stats               :: table_stats,$/;kq|-;/\<current_stats\>/;'q;"	kind:fld
current_utc_time	calendar.m	/^:- pred current_utc_time(date::out, io::di, io::uo) is det.$/;kq|/^\<current_utc_time\>/;'q;"	kind:pred
custom	term_to_xml.m	/^    ;       custom(element_pred).$/;kq|-;/\<custom\>/;'q;"	kind:cons
d	string.m	/^    --->    d(int)$/;kq|-;/\<d\>/;'q;"	kind:cons	file:
data	term_to_xml.m	/^    ;       data(string)$/;kq|-;/\<data\>/;'q;"	kind:cons
date	calendar.m	/^    --->    date($/;kq|-;/\<date\>/;'q;"	kind:cons	file:
date	calendar.m	/^:- type date$/;kq|-;/\<date\>/;'q;"	kind:type	file:
date_from_string	calendar.m	/^:- pred date_from_string(string::in, date::out) is semidet.$/;kq|/^\<date_from_string\>/;'q;"	kind:pred
date_to_string	calendar.m	/^:- func date_to_string(date) = string.$/;kq|/^\<date_to_string\>/;'q;"	kind:func
day_duration	calendar.m	/^:- func day_duration(date, date) = duration.$/;kq|/^\<day_duration\>/;'q;"	kind:func
day_of_month	calendar.m	/^:- func day_of_month(date) = day_of_month.$/;kq|/^\<day_of_month\>/;'q;"	kind:func
day_of_month	calendar.m	/^:- type day_of_month == int. % 1..31 depending on the month and year$/;kq|-;/\<day_of_month\>/;'q;"	kind:type
day_of_week	calendar.m	/^:- func day_of_week(date) = day_of_week.$/;kq|/^\<day_of_week\>/;'q;"	kind:func
day_of_week	calendar.m	/^:- type day_of_week$/;kq|-;/\<day_of_week\>/;'q;"	kind:type
day_of_week_num	calendar.m	/^:- pred day_of_week_num(day_of_week, int).$/;kq|/^\<day_of_week_num\>/;'q;"	kind:pred	file:
daylight_time	time.m	/^    ;       daylight_time.  % yes, DST is in effect$/;kq|-;/\<daylight_time\>/;'q;"	kind:cons
days	calendar.m	/^:- func days(duration) = days.$/;kq|/^\<days\>/;'q;"	kind:func
days	calendar.m	/^:- type days == int.$/;kq|-;/\<days\>/;'q;"	kind:type
dead	builtin.m	/^:- inst dead == clobbered.$/;kq|-;/\<dead\>/;'q;"	kind:inst
decap	integer.m	/^:- func decap(integer) = integer.$/;kq|/^\<decap\>/;'q;"	kind:func	file:
december	calendar.m	/^    ;       december.$/;kq|-;/\<december\>/;'q;"	kind:cons
decimal_pos	string.m	/^:- func decimal_pos(string) = int.$/;kq|/^\<decimal_pos\>/;'q;"	kind:func	file:
deconstruct	deconstruct.m	/^:- pred deconstruct(T, noncanon_handling, string, int, list(univ)).$/;kq|/^\<deconstruct\>/;'q;"	kind:pred
deconstruct	erlang_rtti_implementation.m	/^:- pred deconstruct(T, noncanon_handling, string, int, list(univ)).$/;kq|/^\<deconstruct\>/;'q;"	kind:pred
deconstruct	rtti_implementation.m	/^:- pred deconstruct(T, noncanon_handling, string, int, int, list(univ)).$/;kq|/^\<deconstruct\>/;'q;"	kind:pred
deconstruct.arg	deconstruct.m	/^:- some [ArgT] pred arg(T, noncanon_handling, int, ArgT).$/;kq|/^\<arg\>/;'q;"	kind:pred
deconstruct.arg_cc	deconstruct.m	/^:- pred arg_cc(T::in, int::in, maybe_arg::out) is cc_multi.$/;kq|/^\<arg_cc\>/;'q;"	kind:pred
deconstruct.canonicalize	deconstruct.m	/^    ;       canonicalize$/;kq|-;/\<deconstruct.canonicalize\>/;'q;"	kind:cons
deconstruct.canonicalize	deconstruct.m	/^:- inst canonicalize ---> canonicalize.$/;kq|-;/\<deconstruct.canonicalize\>/;'q;"	kind:inst
deconstruct.det_arg	deconstruct.m	/^:- some [ArgT] pred det_arg(T, noncanon_handling, int, ArgT).$/;kq|/^\<det_arg\>/;'q;"	kind:pred
deconstruct.det_named_arg	deconstruct.m	/^:- some [ArgT] pred det_named_arg(T, noncanon_handling, string, ArgT).$/;kq|/^\<det_named_arg\>/;'q;"	kind:pred
deconstruct.do_not_allow	deconstruct.m	/^    --->    do_not_allow$/;kq|-;/\<deconstruct.do_not_allow\>/;'q;"	kind:cons
deconstruct.do_not_allow	deconstruct.m	/^:- inst do_not_allow ---> do_not_allow.$/;kq|-;/\<deconstruct.do_not_allow\>/;'q;"	kind:inst
deconstruct.dummy_univ	deconstruct.m	/^:- func dummy_univ = univ.$/;kq|/^\<dummy_univ\>/;'q;"	kind:func	file:
deconstruct.functor	deconstruct.m	/^:- pred functor(T, noncanon_handling, string, int).$/;kq|/^\<functor\>/;'q;"	kind:pred
deconstruct.functor_can	deconstruct.m	/^:- pred functor_can(T::in, string::out, int::out) is det.$/;kq|/^\<functor_can\>/;'q;"	kind:pred	file:
deconstruct.functor_dna	deconstruct.m	/^:- pred functor_dna(T::in, string::out, int::out) is det.$/;kq|/^\<functor_dna\>/;'q;"	kind:pred	file:
deconstruct.functor_idcc	deconstruct.m	/^:- pred functor_idcc(T::in, string::out, int::out) is cc_multi.$/;kq|/^\<functor_idcc\>/;'q;"	kind:pred	file:
deconstruct.functor_number	deconstruct.m	/^:- pred functor_number(T::in, functor_number_lex::out, int::out) is semidet.$/;kq|/^\<functor_number\>/;'q;"	kind:pred
deconstruct.functor_number_cc	deconstruct.m	/^:- pred functor_number_cc(T::in, functor_number_lex::out,$/;kq|/^\<functor_number_cc\>/;'q;"	kind:pred
deconstruct.include_details_cc	deconstruct.m	/^    ;       include_details_cc.$/;kq|-;/\<deconstruct.include_details_cc\>/;'q;"	kind:cons
deconstruct.include_details_cc	deconstruct.m	/^:- inst include_details_cc ---> include_details_cc.$/;kq|-;/\<deconstruct.include_details_cc\>/;'q;"	kind:inst
deconstruct.local_deconstruct	deconstruct.m	/^:- pred local_deconstruct(T, noncanon_handling, string, int, int, list(univ)).$/;kq|/^\<local_deconstruct\>/;'q;"	kind:pred	file:
deconstruct.maybe_arg	deconstruct.m	/^:- type maybe_arg$/;kq|-;/\<deconstruct.maybe_arg\>/;'q;"	kind:type
deconstruct.named_arg	deconstruct.m	/^:- some [ArgT] pred named_arg(T, noncanon_handling, string, ArgT).$/;kq|/^\<named_arg\>/;'q;"	kind:pred
deconstruct.named_arg_cc	deconstruct.m	/^:- pred named_arg_cc(T::in, string::in, maybe_arg::out) is cc_multi.$/;kq|/^\<named_arg_cc\>/;'q;"	kind:pred
deconstruct.no_arg	deconstruct.m	/^    ;       no_arg.$/;kq|-;/\<deconstruct.no_arg\>/;'q;"	kind:cons
deconstruct.noncanon_handling	deconstruct.m	/^:- type noncanon_handling$/;kq|-;/\<deconstruct.noncanon_handling\>/;'q;"	kind:type
deconstruct.some	deconstruct.m	/^    --->    some [T] arg(T)$/;kq|-;/\<deconstruct.some\>/;'q;"	kind:cons
deconstruct.univ_arg_can	deconstruct.m	/^:- pred univ_arg_can(T::in, int::in, univ::out) is semidet.$/;kq|/^\<univ_arg_can\>/;'q;"	kind:pred	file:
deconstruct.univ_arg_dna	deconstruct.m	/^:- pred univ_arg_dna(T::in, int::in, univ::out) is semidet.$/;kq|/^\<univ_arg_dna\>/;'q;"	kind:pred	file:
deconstruct.univ_arg_idcc	deconstruct.m	/^:- pred univ_arg_idcc(T::in, int::in, univ::in, univ::out, int::out)$/;kq|/^\<univ_arg_idcc\>/;'q;"	kind:pred	file:
deconstruct.univ_named_arg_can	deconstruct.m	/^:- pred univ_named_arg_can(T::in, string::in, univ::out) is semidet.$/;kq|/^\<univ_named_arg_can\>/;'q;"	kind:pred	file:
deconstruct.univ_named_arg_dna	deconstruct.m	/^:- pred univ_named_arg_dna(T::in, string::in, univ::out) is semidet.$/;kq|/^\<univ_named_arg_dna\>/;'q;"	kind:pred	file:
deconstruct_2	erlang_rtti_implementation.m	/^:- pred deconstruct_2(T, type_info, type_ctor_info_evaled,$/;kq|/^\<deconstruct_2\>/;'q;"	kind:pred	file:
deconstruct_2	rtti_implementation.m	/^:- pred deconstruct_2(T, type_info, type_ctor_info, type_ctor_rep,$/;kq|/^\<deconstruct_2\>/;'q;"	kind:pred	file:
deconstruct_can	deconstruct.m	/^:- pred deconstruct_can(T::in, string::out, int::out, list(univ)::out) is det.$/;kq|/^\<deconstruct_can\>/;'q;"	kind:pred	file:
deconstruct_dna	deconstruct.m	/^:- pred deconstruct_dna(T::in, string::out,$/;kq|/^\<deconstruct_dna\>/;'q;"	kind:pred	file:
deconstruct_du	deconstruct.m	/^:- pred deconstruct_du(T, noncanon_handling, functor_number_lex,$/;kq|/^\<deconstruct_du\>/;'q;"	kind:pred
deconstruct_du	erlang_rtti_implementation.m	/^:- pred deconstruct_du(T, noncanon_handling, functor_number_lex,$/;kq|/^\<deconstruct_du\>/;'q;"	kind:pred
deconstruct_du_2	deconstruct.m	/^:- pred deconstruct_du_2(T, noncanon_handling, functor_number_lex,$/;kq|/^\<deconstruct_du_2\>/;'q;"	kind:pred	file:
deconstruct_idcc	deconstruct.m	/^:- pred deconstruct_idcc(T::in, string::out,$/;kq|/^\<deconstruct_idcc\>/;'q;"	kind:pred	file:
decrement_limit	pretty_printer.m	/^:- pred decrement_limit(formatting_limit::in, formatting_limit::out) is det.$/;kq|/^\<decrement_limit\>/;'q;"	kind:pred	file:
def_ratio	set_bbbtree.m	/^:- pred set_bbbtree.def_ratio(int::uo) is det.$/;kq|/^\<set_bbbtree.def_ratio\>/;'q;"	kind:pred	file:
definite_vars	robdd.m	/^:- pred definite_vars(robdd(T)::in, vars_entailed_result(T)::out,$/;kq|/^\<definite_vars\>/;'q;"	kind:pred
delay	lazy.m	/^:- func delay((func) = T) = lazy(T).$/;kq|/^\<delay\>/;'q;"	kind:func
delete	bag.m	/^:- func bag.delete(bag(T), T) = bag(T).$/;kq|/^\<bag.delete\>/;'q;"	kind:func
delete	bag.m	/^:- pred bag.delete(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.delete\>/;'q;"	kind:pred
delete	fat_sparse_bitset.m	/^:- func delete(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<delete\>/;'q;"	kind:func
delete	fat_sparse_bitset.m	/^:- pred delete(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
delete	hash_table.m	/^:- func delete(hash_table(K, V), K) = hash_table(K, V).$/;kq|/^\<delete\>/;'q;"	kind:func
delete	hash_table.m	/^:- pred delete(K::in,$/;kq|/^\<delete\>/;'q;"	kind:pred
delete	list.m	/^:- pred list.delete(list(T), T, list(T)).$/;kq|/^\<list.delete\>/;'q;"	kind:pred
delete	map.m	/^:- func map.delete(map(K, V), K) = map(K, V).$/;kq|/^\<map.delete\>/;'q;"	kind:func
delete	map.m	/^:- pred map.delete(K::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.delete\>/;'q;"	kind:pred
delete	multi_map.m	/^:- func multi_map.delete(multi_map(K, V), K) = multi_map(K, V).$/;kq|/^\<multi_map.delete\>/;'q;"	kind:func
delete	multi_map.m	/^:- func multi_map.delete(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.delete\>/;'q;"	kind:func
delete	multi_map.m	/^:- pred multi_map.delete(K::in, $/;kq|/^\<multi_map.delete\>/;'q;"	kind:pred
delete	multi_map.m	/^:- pred multi_map.delete(K::in, V::in,$/;kq|/^\<multi_map.delete\>/;'q;"	kind:pred
delete	rbtree.m	/^:- func rbtree.delete(rbtree(K, V), K) = rbtree(K, V).$/;kq|/^\<rbtree.delete\>/;'q;"	kind:func
delete	rbtree.m	/^:- pred rbtree.delete(K::in, rbtree(K, V)::in, rbtree(K, V)::out) is det.$/;kq|/^\<rbtree.delete\>/;'q;"	kind:pred
delete	rtree.m	/^:- pred rtree.delete(K::in, V::in, rtree(K, V)::in, rtree(K, V)::out) $/;kq|/^\<rtree.delete\>/;'q;"	kind:pred
delete	set.m	/^:- func set.delete(set(T), T) = set(T).$/;kq|/^\<set.delete\>/;'q;"	kind:func
delete	set.m	/^:- pred set.delete(T::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.delete\>/;'q;"	kind:pred
delete	set_bbbtree.m	/^:- func set_bbbtree.delete(set_bbbtree(T), T) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.delete\>/;'q;"	kind:func
delete	set_bbbtree.m	/^:- pred set_bbbtree.delete(T, set_bbbtree(T), set_bbbtree(T)).$/;kq|/^\<set_bbbtree.delete\>/;'q;"	kind:pred
delete	set_ctree234.m	/^:- func set_ctree234.delete(T, set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.delete\>/;'q;"	kind:func
delete	set_ctree234.m	/^:- pred set_ctree234.delete(T::in, set_ctree234(T)::in, set_ctree234(T)::out)$/;kq|/^\<set_ctree234.delete\>/;'q;"	kind:pred
delete	set_ordlist.m	/^:- func set_ordlist.delete(set_ordlist(T), T) = set_ordlist(T).$/;kq|/^\<set_ordlist.delete\>/;'q;"	kind:func
delete	set_ordlist.m	/^:- pred set_ordlist.delete(T::in, set_ordlist(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.delete\>/;'q;"	kind:pred
delete	set_tree234.m	/^:- func set_tree234.delete(T, set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.delete\>/;'q;"	kind:func
delete	set_tree234.m	/^:- pred set_tree234.delete(T::in, set_tree234(T)::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.delete\>/;'q;"	kind:pred
delete	set_unordlist.m	/^:- func set_unordlist.delete(set_unordlist(T), T) = set_unordlist(T).$/;kq|/^\<set_unordlist.delete\>/;'q;"	kind:func
delete	set_unordlist.m	/^:- pred set_unordlist.delete(T, set_unordlist(T), set_unordlist(T)).$/;kq|/^\<set_unordlist.delete\>/;'q;"	kind:pred
delete	sparse_bitset.m	/^:- func delete(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<delete\>/;'q;"	kind:func
delete	sparse_bitset.m	/^:- pred delete(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
delete	test_bitset.m	/^:- pred delete(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
delete	tree234.m	/^:- func tree234.delete(tree234(K, V), K) = tree234(K, V).$/;kq|/^\<tree234.delete\>/;'q;"	kind:func
delete	tree234.m	/^:- pred tree234.delete(K::in, tree234(K, V)::in, tree234(K, V)::out) is det.$/;kq|/^\<tree234.delete\>/;'q;"	kind:pred
delete	tree_bitset.m	/^:- func delete(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<delete\>/;'q;"	kind:func
delete	tree_bitset.m	/^:- pred delete(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
delete	version_hash_table.m	/^:- func delete(version_hash_table(K, V), K) = version_hash_table(K, V).$/;kq|/^\<delete\>/;'q;"	kind:func
delete	version_hash_table.m	/^:- pred delete(K::in, version_hash_table(K, V)::in,$/;kq|/^\<delete\>/;'q;"	kind:pred
delete_2	rbtree.m	/^:- pred rbtree.delete_2(rbtree(K, V), K, bool, maybe(V), rbtree(K, V)).$/;kq|/^\<rbtree.delete_2\>/;'q;"	kind:pred	file:
delete_2	rtree.m	/^:- pred delete_2(rtree_2(K, V)::in, K::in, V::in, int::in, K::out,$/;kq|/^\<delete_2\>/;'q;"	kind:pred	file:
delete_2	set_tree234.m	/^:- pred set_tree234.delete_2(T::in, set_tree234(T)::in, set_tree234(T)::out,$/;kq|/^\<set_tree234.delete_2\>/;'q;"	kind:pred	file:
delete_2	tree234.m	/^:- pred tree234.delete_2(tree234(K, V), K, tree234(K, V), bool).$/;kq|/^\<tree234.delete_2\>/;'q;"	kind:pred	file:
delete_all	bag.m	/^:- func bag.delete_all(bag(T), T) = bag(T).$/;kq|/^\<bag.delete_all\>/;'q;"	kind:func
delete_all	bag.m	/^:- pred bag.delete_all(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.delete_all\>/;'q;"	kind:pred
delete_all	list.m	/^:- func list.delete_all(list(T), T) = list(T).$/;kq|/^\<list.delete_all\>/;'q;"	kind:func
delete_all	list.m	/^:- pred list.delete_all(list(T), T, list(T)).$/;kq|/^\<list.delete_all\>/;'q;"	kind:pred
delete_all	queue.m	/^:- func queue.delete_all(queue(T), T) = queue(T).$/;kq|/^\<queue.delete_all\>/;'q;"	kind:func
delete_all	queue.m	/^:- pred queue.delete_all(T::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.delete_all\>/;'q;"	kind:pred
delete_assoc_list	digraph.m	/^:- func digraph.delete_assoc_list(assoc_list(digraph_key(T), digraph_key(T)),$/;kq|/^\<digraph.delete_assoc_list\>/;'q;"	kind:func
delete_assoc_list	digraph.m	/^:- pred digraph.delete_assoc_list($/;kq|/^\<digraph.delete_assoc_list\>/;'q;"	kind:pred
delete_edge	digraph.m	/^:- func digraph.delete_edge(digraph_key(T), digraph_key(T), digraph(T)) =$/;kq|/^\<digraph.delete_edge\>/;'q;"	kind:func
delete_edge	digraph.m	/^:- pred digraph.delete_edge(digraph_key(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.delete_edge\>/;'q;"	kind:pred
delete_elems	list.m	/^:- func list.delete_elems(list(T), list(T)) = list(T).$/;kq|/^\<list.delete_elems\>/;'q;"	kind:func
delete_elems	list.m	/^:- pred list.delete_elems(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.delete_elems\>/;'q;"	kind:pred
delete_first	list.m	/^:- pred list.delete_first(list(T)::in, T::in, list(T)::out) is semidet.$/;kq|/^\<list.delete_first\>/;'q;"	kind:pred
delete_info	rtree.m	/^:- type delete_info(K, V) $/;kq|-;/\<delete_info\>/;'q;"	kind:type	file:
delete_key	bimap.m	/^:- func bimap.delete_key(bimap(K, V), K) = bimap(K, V).$/;kq|/^\<bimap.delete_key\>/;'q;"	kind:func
delete_key	bimap.m	/^:- pred bimap.delete_key(K::in, bimap(K, V)::in, bimap(K, V)::out) is det.$/;kq|/^\<bimap.delete_key\>/;'q;"	kind:pred
delete_key	injection.m	/^:- func injection.delete_key(injection(K, V), K) = injection(K, V).$/;kq|/^\<injection.delete_key\>/;'q;"	kind:func
delete_key	injection.m	/^:- pred injection.delete_key(K::in, injection(K, V)::in, injection(K, V)::out)$/;kq|/^\<injection.delete_key\>/;'q;"	kind:pred
delete_keys	bimap.m	/^:- func bimap.delete_keys(bimap(K, V), list(K)) = bimap(K, V).$/;kq|/^\<bimap.delete_keys\>/;'q;"	kind:func
delete_keys	bimap.m	/^:- pred bimap.delete_keys(list(K)::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.delete_keys\>/;'q;"	kind:pred
delete_keys	injection.m	/^:- func injection.delete_keys(injection(K, V), list(K)) = injection(K, V).$/;kq|/^\<injection.delete_keys\>/;'q;"	kind:func
delete_keys	injection.m	/^:- pred injection.delete_keys(list(K)::in, injection(K, V)::in,$/;kq|/^\<injection.delete_keys\>/;'q;"	kind:pred
delete_list	fat_sparse_bitset.m	/^:- func delete_list(fat_sparse_bitset(T), list(T)) = fat_sparse_bitset(T)$/;kq|/^\<delete_list\>/;'q;"	kind:func
delete_list	fat_sparse_bitset.m	/^:- pred delete_list(list(T)::in,$/;kq|/^\<delete_list\>/;'q;"	kind:pred
delete_list	map.m	/^:- func map.delete_list(map(K, V), list(K)) = map(K, V).$/;kq|/^\<map.delete_list\>/;'q;"	kind:func
delete_list	map.m	/^:- pred map.delete_list(list(K)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.delete_list\>/;'q;"	kind:pred
delete_list	set.m	/^:- func set.delete_list(set(T), list(T)) = set(T).$/;kq|/^\<set.delete_list\>/;'q;"	kind:func
delete_list	set.m	/^:- pred set.delete_list(list(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.delete_list\>/;'q;"	kind:pred
delete_list	set_bbbtree.m	/^:- func set_bbbtree.delete_list(set_bbbtree(T), list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.delete_list\>/;'q;"	kind:func
delete_list	set_bbbtree.m	/^:- pred set_bbbtree.delete_list(list(T)::in,$/;kq|/^\<set_bbbtree.delete_list\>/;'q;"	kind:pred
delete_list	set_ctree234.m	/^:- func set_ctree234.delete_list(list(T), set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.delete_list\>/;'q;"	kind:func
delete_list	set_ctree234.m	/^:- pred set_ctree234.delete_list(list(T)::in,$/;kq|/^\<set_ctree234.delete_list\>/;'q;"	kind:pred
delete_list	set_ordlist.m	/^:- func set_ordlist.delete_list(set_ordlist(T), list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.delete_list\>/;'q;"	kind:func
delete_list	set_ordlist.m	/^:- pred set_ordlist.delete_list(list(T)::in,$/;kq|/^\<set_ordlist.delete_list\>/;'q;"	kind:pred
delete_list	set_tree234.m	/^:- func set_tree234.delete_list(list(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.delete_list\>/;'q;"	kind:func
delete_list	set_tree234.m	/^:- pred set_tree234.delete_list(list(T)::in,$/;kq|/^\<set_tree234.delete_list\>/;'q;"	kind:pred
delete_list	set_unordlist.m	/^:- func set_unordlist.delete_list(set_unordlist(T), list(T))$/;kq|/^\<set_unordlist.delete_list\>/;'q;"	kind:func
delete_list	set_unordlist.m	/^:- pred set_unordlist.delete_list(list(T)::in,$/;kq|/^\<set_unordlist.delete_list\>/;'q;"	kind:pred
delete_list	sparse_bitset.m	/^:- func delete_list(sparse_bitset(T), list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<delete_list\>/;'q;"	kind:func
delete_list	sparse_bitset.m	/^:- pred delete_list(list(T)::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<delete_list\>/;'q;"	kind:pred
delete_list	test_bitset.m	/^:- pred delete_list(list(T)::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<delete_list\>/;'q;"	kind:pred
delete_list	tree_bitset.m	/^:- func delete_list(tree_bitset(T), list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<delete_list\>/;'q;"	kind:func
delete_list	tree_bitset.m	/^:- pred delete_list(list(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<delete_list\>/;'q;"	kind:pred
delete_sorted_list	map.m	/^:- func map.delete_sorted_list(map(K, V), list(K)) = map(K, V).$/;kq|/^\<map.delete_sorted_list\>/;'q;"	kind:func
delete_sorted_list	map.m	/^:- pred map.delete_sorted_list(list(K)::in, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.delete_sorted_list\>/;'q;"	kind:pred
delete_sorted_list_loop	map.m	/^:- pred map.delete_sorted_list_loop(list(K)::in,$/;kq|/^\<map.delete_sorted_list_loop\>/;'q;"	kind:pred	file:
delete_sorted_vars	varset.m	/^:- func varset.delete_sorted_vars(varset(T), list(var(T))) = varset(T).$/;kq|/^\<varset.delete_sorted_vars\>/;'q;"	kind:func
delete_sorted_vars	varset.m	/^:- pred varset.delete_sorted_vars(list(var(T))::in,$/;kq|/^\<varset.delete_sorted_vars\>/;'q;"	kind:pred
delete_value	bimap.m	/^:- func bimap.delete_value(bimap(K, V), V) = bimap(K, V).$/;kq|/^\<bimap.delete_value\>/;'q;"	kind:func
delete_value	bimap.m	/^:- pred bimap.delete_value(V::in, bimap(K, V)::in, bimap(K, V)::out) is det.$/;kq|/^\<bimap.delete_value\>/;'q;"	kind:pred
delete_value	injection.m	/^:- func injection.delete_value(injection(K, V), V) = injection(K, V).$/;kq|/^\<injection.delete_value\>/;'q;"	kind:func
delete_value	injection.m	/^:- pred injection.delete_value(V::in, injection(K, V)::in,$/;kq|/^\<injection.delete_value\>/;'q;"	kind:pred
delete_values	bimap.m	/^:- func bimap.delete_values(bimap(K, V), list(V)) = bimap(K, V).$/;kq|/^\<bimap.delete_values\>/;'q;"	kind:func
delete_values	bimap.m	/^:- pred bimap.delete_values(list(V)::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.delete_values\>/;'q;"	kind:pred
delete_values	injection.m	/^:- func injection.delete_values(injection(K, V), list(V)) = injection(K, V).$/;kq|/^\<injection.delete_values\>/;'q;"	kind:func
delete_values	injection.m	/^:- pred injection.delete_values(list(V)::in, injection(K, V)::in,$/;kq|/^\<injection.delete_values\>/;'q;"	kind:pred
delete_var	varset.m	/^:- func varset.delete_var(varset(T), var(T)) = varset(T).$/;kq|/^\<varset.delete_var\>/;'q;"	kind:func
delete_var	varset.m	/^:- pred varset.delete_var(var(T)::in, varset(T)::in, varset(T)::out) is det.$/;kq|/^\<varset.delete_var\>/;'q;"	kind:pred
delete_vars	varset.m	/^:- func varset.delete_vars(varset(T), list(var(T))) = varset(T).$/;kq|/^\<varset.delete_vars\>/;'q;"	kind:func
delete_vars	varset.m	/^:- pred varset.delete_vars(list(var(T))::in, varset(T)::in, varset(T)::out)$/;kq|/^\<varset.delete_vars\>/;'q;"	kind:pred
deleting	rtree.m	/^    --->    deleting(orphans(K, V))$/;kq|-;/\<deleting\>/;'q;"	kind:cons	file:
denom	rational.m	/^:- func rational.denom(rational) = integer.$/;kq|/^\<rational.denom\>/;'q;"	kind:func
depth	pprint.m	/^:- type depth == int.$/;kq|-;/\<depth\>/;'q;"	kind:type	file:
depth	stack.m	/^:- func stack.depth(stack(T)) = int.$/;kq|/^\<stack.depth\>/;'q;"	kind:func
depth	stack.m	/^:- pred stack.depth(stack(T)::in, int::out) is det.$/;kq|/^\<stack.depth\>/;'q;"	kind:pred
depth_levels	tree234.m	/^:- pred depth_levels(tree234(K, V)::in, int::in,$/;kq|/^\<depth_levels\>/;'q;"	kind:pred	file:
descend_and_difference_list	tree_bitset.m	/^:- pred descend_and_difference_list(int::in, list(interior_node)::in,$/;kq|/^\<descend_and_difference_list\>/;'q;"	kind:pred	file:
descend_and_difference_one	tree_bitset.m	/^:- pred descend_and_difference_one(int::in, list(interior_node)::in,$/;kq|/^\<descend_and_difference_one\>/;'q;"	kind:pred	file:
descend_and_intersect	tree_bitset.m	/^:- pred descend_and_intersect(int::in, interior_node::in,$/;kq|/^\<descend_and_intersect\>/;'q;"	kind:pred	file:
descending	calendar.m	/^    ;       descending.$/;kq|-;/\<descending\>/;'q;"	kind:cons	file:
det_arg	deconstruct.m	/^:- some [ArgT] pred det_arg(T, noncanon_handling, int, ArgT).$/;kq|/^\<det_arg\>/;'q;"	kind:pred
det_arg	prolog.m	/^:- pred det_arg(int::in, T::in, univ::out) is det.$/;kq|/^\<det_arg\>/;'q;"	kind:pred
det_base_string_to_int	string.m	/^:- func string.det_base_string_to_int(int, string) = int.$/;kq|/^\<string.det_base_string_to_int\>/;'q;"	kind:func
det_basename	dir.m	/^:- func dir.det_basename(string) = string.$/;kq|/^\<dir.det_basename\>/;'q;"	kind:func
det_call_port_code_ac	profiling_builtin.m	/^:- impure pred det_call_port_code_ac(proc_layout::in,$/;kq|/^\<det_call_port_code_ac\>/;'q;"	kind:pred
det_call_port_code_sr	profiling_builtin.m	/^:- impure pred det_call_port_code_sr(proc_layout::in, call_site_dynamic::out,$/;kq|/^\<det_call_port_code_sr\>/;'q;"	kind:pred
det_date_from_string	calendar.m	/^:- func det_date_from_string(string) = date.$/;kq|/^\<det_date_from_string\>/;'q;"	kind:func
det_day_of_week_from_mod	calendar.m	/^:- func det_day_of_week_from_mod(int) = day_of_week.$/;kq|/^\<det_day_of_week_from_mod\>/;'q;"	kind:func	file:
det_drop	list.m	/^:- pred list.det_drop(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.det_drop\>/;'q;"	kind:pred
det_duration_from_string	calendar.m	/^:- func det_duration_from_string(string) = duration.$/;kq|/^\<det_duration_from_string\>/;'q;"	kind:func
det_dynamic_cast	erlang_rtti_implementation.m	/^:- pred det_dynamic_cast(T::in, U::out) is det.$/;kq|/^\<det_dynamic_cast\>/;'q;"	kind:pred	file:
det_dynamic_cast	rtti_implementation.m	/^:- pred det_dynamic_cast(T::in, U::out) is det.$/;kq|/^\<det_dynamic_cast\>/;'q;"	kind:pred	file:
det_dynamic_cast	string.m	/^:- pred det_dynamic_cast(T1::in, T2::out) is det.$/;kq|/^\<det_dynamic_cast\>/;'q;"	kind:pred	file:
det_elem	map.m	/^:- func map.det_elem(K, map(K, V)) = V.$/;kq|/^\<map.det_elem\>/;'q;"	kind:func
det_exit_port_code_ac	profiling_builtin.m	/^:- impure pred det_exit_port_code_ac(call_site_dynamic::in,$/;kq|/^\<det_exit_port_code_ac\>/;'q;"	kind:pred
det_exit_port_code_sr	profiling_builtin.m	/^:- impure pred det_exit_port_code_sr(call_site_dynamic::in,$/;kq|/^\<det_exit_port_code_sr\>/;'q;"	kind:pred
det_from_assoc_list	bimap.m	/^:- func bimap.det_from_assoc_list(assoc_list(K, V)) = bimap(K, V).$/;kq|/^\<bimap.det_from_assoc_list\>/;'q;"	kind:func
det_from_assoc_list	bimap.m	/^:- pred bimap.det_from_assoc_list(assoc_list(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.det_from_assoc_list\>/;'q;"	kind:pred
det_from_base_string	integer.m	/^:- func integer.det_from_base_string(int, string) = integer.$/;kq|/^\<integer.det_from_base_string\>/;'q;"	kind:func
det_from_corresponding_lists	bimap.m	/^:- func bimap.det_from_corresponding_lists(list(K), list(V)) = bimap(K, V).$/;kq|/^\<bimap.det_from_corresponding_lists\>/;'q;"	kind:func
det_from_corresponding_lists	bimap.m	/^:- pred bimap.det_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<bimap.det_from_corresponding_lists\>/;'q;"	kind:pred
det_from_int	char.m	/^:- func char.det_from_int(int) = char.$/;kq|/^\<char.det_from_int\>/;'q;"	kind:func
det_from_int	char.m	/^:- pred char.det_from_int(int::in, char::out) is det.$/;kq|/^\<char.det_from_int\>/;'q;"	kind:pred
det_from_string	integer.m	/^:- func integer.det_from_string(string) = integer.$/;kq|/^\<integer.det_from_string\>/;'q;"	kind:func
det_ground_pseudo_type_desc_to_type_desc	type_desc.m	/^:- func det_ground_pseudo_type_desc_to_type_desc(pseudo_type_desc) = type_desc.$/;kq|/^\<det_ground_pseudo_type_desc_to_type_desc\>/;'q;"	kind:func
det_head	list.m	/^:- func list.det_head(list(T)) = T.$/;kq|/^\<list.det_head\>/;'q;"	kind:func
det_index	string.m	/^:- func string.det_index(string, int) = char.$/;kq|/^\<string.det_index\>/;'q;"	kind:func
det_index	string.m	/^:- pred string.det_index(string::in, int::in, char::uo) is det.$/;kq|/^\<string.det_index\>/;'q;"	kind:pred
det_index0	list.m	/^:- func list.det_index0(list(T), int) = T.$/;kq|/^\<list.det_index0\>/;'q;"	kind:func
det_index0	list.m	/^:- pred list.det_index0(list(T)::in, int::in, T::out) is det.$/;kq|/^\<list.det_index0\>/;'q;"	kind:pred
det_index0_of_first_occurrence	list.m	/^:- func list.det_index0_of_first_occurrence(list(T), T) = int.$/;kq|/^\<list.det_index0_of_first_occurrence\>/;'q;"	kind:func
det_index1	list.m	/^:- func list.det_index1(list(T), int) = T.$/;kq|/^\<list.det_index1\>/;'q;"	kind:func
det_index1	list.m	/^:- pred list.det_index1(list(T)::in, int::in, T::out) is det.$/;kq|/^\<list.det_index1\>/;'q;"	kind:pred
det_index1_of_first_occurrence	list.m	/^:- func list.det_index1_of_first_occurrence(list(T), T) = int.$/;kq|/^\<list.det_index1_of_first_occurrence\>/;'q;"	kind:func
det_init_date	calendar.m	/^:- func det_init_date(year, month, day_of_month, hour, minute, second,$/;kq|/^\<det_init_date\>/;'q;"	kind:func
det_insert	bimap.m	/^:- func bimap.det_insert(bimap(K, V), K, V) = bimap(K, V).$/;kq|/^\<bimap.det_insert\>/;'q;"	kind:func
det_insert	bimap.m	/^:- pred bimap.det_insert(K::in, V::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.det_insert\>/;'q;"	kind:pred
det_insert	hash_table.m	/^:- func det_insert(hash_table(K, V), K, V) = hash_table(K, V).$/;kq|/^\<det_insert\>/;'q;"	kind:func
det_insert	hash_table.m	/^:- pred det_insert(K::in, V::in,$/;kq|/^\<det_insert\>/;'q;"	kind:pred
det_insert	injection.m	/^:- func injection.det_insert(injection(K, V), K, V) = injection(K, V).$/;kq|/^\<injection.det_insert\>/;'q;"	kind:func
det_insert	injection.m	/^:- pred injection.det_insert(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.det_insert\>/;'q;"	kind:pred
det_insert	map.m	/^:- func map.det_insert(map(K, V), K, V) = map(K, V).$/;kq|/^\<map.det_insert\>/;'q;"	kind:func
det_insert	map.m	/^:- pred map.det_insert(K::in, V::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.det_insert\>/;'q;"	kind:pred
det_insert	multi_map.m	/^:- func multi_map.det_insert(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.det_insert\>/;'q;"	kind:func
det_insert	multi_map.m	/^:- pred multi_map.det_insert(K::in, V::in,$/;kq|/^\<multi_map.det_insert\>/;'q;"	kind:pred
det_insert	version_hash_table.m	/^:- func det_insert(version_hash_table(K, V), K, V) = version_hash_table(K, V).$/;kq|/^\<det_insert\>/;'q;"	kind:func
det_insert	version_hash_table.m	/^:- pred det_insert(K::in, V::in,$/;kq|/^\<det_insert\>/;'q;"	kind:pred
det_insert_from_assoc_list	bimap.m	/^:- func bimap.det_insert_from_assoc_list(assoc_list(K, V), bimap(K, V))$/;kq|/^\<bimap.det_insert_from_assoc_list\>/;'q;"	kind:func
det_insert_from_assoc_list	bimap.m	/^:- pred bimap.det_insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<bimap.det_insert_from_assoc_list\>/;'q;"	kind:pred
det_insert_from_assoc_list	injection.m	/^:- func injection.det_insert_from_assoc_list(assoc_list(K, V),$/;kq|/^\<injection.det_insert_from_assoc_list\>/;'q;"	kind:func
det_insert_from_assoc_list	injection.m	/^:- pred injection.det_insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<injection.det_insert_from_assoc_list\>/;'q;"	kind:pred
det_insert_from_assoc_list	map.m	/^:- func map.det_insert_from_assoc_list(map(K, V), assoc_list(K, V))$/;kq|/^\<map.det_insert_from_assoc_list\>/;'q;"	kind:func
det_insert_from_assoc_list	map.m	/^:- pred map.det_insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<map.det_insert_from_assoc_list\>/;'q;"	kind:pred
det_insert_from_corresponding_lists	bimap.m	/^:- func bimap.det_insert_from_corresponding_lists(list(K), list(V),$/;kq|/^\<bimap.det_insert_from_corresponding_lists\>/;'q;"	kind:func
det_insert_from_corresponding_lists	bimap.m	/^:- pred bimap.det_insert_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<bimap.det_insert_from_corresponding_lists\>/;'q;"	kind:pred
det_insert_from_corresponding_lists	injection.m	/^:- func injection.det_insert_from_corresponding_lists(list(K), list(V),$/;kq|/^\<injection.det_insert_from_corresponding_lists\>/;'q;"	kind:func
det_insert_from_corresponding_lists	injection.m	/^:- pred injection.det_insert_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<injection.det_insert_from_corresponding_lists\>/;'q;"	kind:pred
det_insert_from_corresponding_lists	map.m	/^:- func map.det_insert_from_corresponding_lists(map(K, V), list(K), list(V))$/;kq|/^\<map.det_insert_from_corresponding_lists\>/;'q;"	kind:func
det_insert_from_corresponding_lists	map.m	/^:- pred map.det_insert_from_corresponding_lists(list(K)::in,$/;kq|/^\<map.det_insert_from_corresponding_lists\>/;'q;"	kind:pred
det_int_to_digit	char.m	/^:- func char.det_int_to_digit(int) = char.$/;kq|/^\<char.det_int_to_digit\>/;'q;"	kind:func
det_int_to_digit	char.m	/^:- pred char.det_int_to_digit(int::in, char::out) is det.$/;kq|/^\<char.det_int_to_digit\>/;'q;"	kind:pred
det_intersect	map.m	/^:- func map.det_intersect(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.det_intersect\>/;'q;"	kind:func
det_intersect	map.m	/^:- pred map.det_intersect(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.det_intersect\>/;'q;"	kind:pred
det_last	list.m	/^:- func list.det_last(list(T)) = T.$/;kq|/^\<list.det_last\>/;'q;"	kind:func
det_last	list.m	/^:- pred list.det_last(list(T)::in, T::out) is det.$/;kq|/^\<list.det_last\>/;'q;"	kind:pred
det_last_2	list.m	/^:- pred list.det_last_2(T::in, list(T)::in, T::out) is det.$/;kq|/^\<list.det_last_2\>/;'q;"	kind:pred	file:
det_make_type	type_desc.m	/^:- func det_make_type(type_ctor_desc, list(type_desc)) = type_desc.$/;kq|/^\<det_make_type\>/;'q;"	kind:func
det_max_key	map.m	/^:- func map.det_max_key(map(K, V)) = K.$/;kq|/^\<map.det_max_key\>/;'q;"	kind:func
det_min_key	map.m	/^:- func map.det_min_key(map(K, V)) = K.$/;kq|/^\<map.det_min_key\>/;'q;"	kind:func
det_month	calendar.m	/^:- func det_month(int) = month.$/;kq|/^\<det_month\>/;'q;"	kind:func	file:
det_named_arg	deconstruct.m	/^:- some [ArgT] pred det_named_arg(T, noncanon_handling, string, ArgT).$/;kq|/^\<det_named_arg\>/;'q;"	kind:pred
det_num_bytes	bitmap.m	/^:- func det_num_bytes(bitmap) = num_bytes.$/;kq|/^\<det_num_bytes\>/;'q;"	kind:func
det_num_functors	construct.m	/^:- func det_num_functors(type_desc) = int.$/;kq|/^\<det_num_functors\>/;'q;"	kind:func
det_peek	pqueue.m	/^:- pred pqueue.det_peek(pqueue(K, V)::in, K::out, V::out) is det.$/;kq|/^\<pqueue.det_peek\>/;'q;"	kind:pred
det_peek_key	pqueue.m	/^:- func pqueue.det_peek_key(pqueue(K, V)) = K.$/;kq|/^\<pqueue.det_peek_key\>/;'q;"	kind:func
det_peek_value	pqueue.m	/^:- func pqueue.det_peek_value(pqueue(K, V)) = V.$/;kq|/^\<pqueue.det_peek_value\>/;'q;"	kind:func
det_pop	stack.m	/^:- pred stack.det_pop(T::out, stack(T)::in, stack(T)::out) is det.$/;kq|/^\<stack.det_pop\>/;'q;"	kind:pred
det_remove	bag.m	/^:- func bag.det_remove(bag(T), T) = bag(T).$/;kq|/^\<bag.det_remove\>/;'q;"	kind:func
det_remove	bag.m	/^:- pred bag.det_remove(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.det_remove\>/;'q;"	kind:pred
det_remove	map.m	/^:- pred map.det_remove(K::in, V::out, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.det_remove\>/;'q;"	kind:pred
det_remove	multi_map.m	/^:- pred multi_map.det_remove(K::in, list(V)::out,$/;kq|/^\<multi_map.det_remove\>/;'q;"	kind:pred
det_remove	pqueue.m	/^:- pred pqueue.det_remove(K::out, V::out, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.det_remove\>/;'q;"	kind:pred
det_remove_list	bag.m	/^:- func bag.det_remove_list(bag(T), list(T)) = bag(T).$/;kq|/^\<bag.det_remove_list\>/;'q;"	kind:func
det_remove_list	bag.m	/^:- pred bag.det_remove_list(list(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.det_remove_list\>/;'q;"	kind:pred
det_remove_set	bag.m	/^:- func bag.det_remove_set(bag(T), set(T)) = bag(T).$/;kq|/^\<bag.det_remove_set\>/;'q;"	kind:func
det_remove_set	bag.m	/^:- pred bag.det_remove_set(set(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.det_remove_set\>/;'q;"	kind:pred
det_remove_suffix	string.m	/^:- func string.det_remove_suffix(string, string) = string.$/;kq|/^\<string.det_remove_suffix\>/;'q;"	kind:func
det_replace	multi_map.m	/^:- func multi_map.det_replace(multi_map(K, V), K, list(V)) = multi_map(K, V).$/;kq|/^\<multi_map.det_replace\>/;'q;"	kind:func
det_replace	multi_map.m	/^:- pred multi_map.det_replace(K::in, list(V)::in,$/;kq|/^\<multi_map.det_replace\>/;'q;"	kind:pred
det_replace_nth	list.m	/^:- func list.det_replace_nth(list(T), int, T) = list(T).$/;kq|/^\<list.det_replace_nth\>/;'q;"	kind:func
det_replace_nth	list.m	/^:- pred list.det_replace_nth(list(T)::in, int::in, T::in, list(T)::out) is det.$/;kq|/^\<list.det_replace_nth\>/;'q;"	kind:pred
det_set	injection.m	/^:- func injection.det_set(injection(K, V), K, V) = injection(K, V).$/;kq|/^\<injection.det_set\>/;'q;"	kind:func
det_set	injection.m	/^:- pred injection.det_set(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.det_set\>/;'q;"	kind:pred
det_set_2	injection.m	/^:- pred injection.det_set_2(K::in, V::in, map(K, V)::in, map(K, V)::out,$/;kq|/^\<injection.det_set_2\>/;'q;"	kind:pred	file:
det_set_char	string.m	/^:- func string.det_set_char(char, int, string) = string.$/;kq|/^\<string.det_set_char\>/;'q;"	kind:func
det_set_char	string.m	/^:- pred string.det_set_char(char, int, string, string).$/;kq|/^\<string.det_set_char\>/;'q;"	kind:pred
det_set_from_assoc_list	injection.m	/^:- func injection.det_set_from_assoc_list(assoc_list(K, V), injection(K, V)) =$/;kq|/^\<injection.det_set_from_assoc_list\>/;'q;"	kind:func
det_set_from_assoc_list	injection.m	/^:- pred injection.det_set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<injection.det_set_from_assoc_list\>/;'q;"	kind:pred
det_set_from_corresponding_lists	injection.m	/^:- func injection.det_set_from_corresponding_lists(list(K), list(V),$/;kq|/^\<injection.det_set_from_corresponding_lists\>/;'q;"	kind:func
det_set_from_corresponding_lists	injection.m	/^:- pred injection.det_set_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<injection.det_set_from_corresponding_lists\>/;'q;"	kind:pred
det_split_last	list.m	/^:- pred list.det_split_last(list(T)::in, list(T)::out, T::out) is det.$/;kq|/^\<list.det_split_last\>/;'q;"	kind:pred
det_split_last_2	list.m	/^:- pred list.det_split_last_2(T::in, list(T)::in, list(T)::out, T::out) is det.$/;kq|/^\<list.det_split_last_2\>/;'q;"	kind:pred	file:
det_split_list	list.m	/^:- pred list.det_split_list(int::in, list(T)::in, list(T)::out, list(T)::out)$/;kq|/^\<list.det_split_list\>/;'q;"	kind:pred
det_tail	list.m	/^:- func list.det_tail(list(T)) = list(T).$/;kq|/^\<list.det_tail\>/;'q;"	kind:func
det_take	list.m	/^:- pred list.det_take(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.det_take\>/;'q;"	kind:pred
det_term_to_type	term.m	/^:- func det_term_to_type(term(_)) = T.$/;kq|/^\<det_term_to_type\>/;'q;"	kind:func
det_term_to_type	term.m	/^:- pred det_term_to_type(term(_)::in, T::out) is det.$/;kq|/^\<det_term_to_type\>/;'q;"	kind:pred
det_to_float	string.m	/^:- func string.det_to_float(string) = float.$/;kq|/^\<string.det_to_float\>/;'q;"	kind:func
det_to_int	string.m	/^:- func string.det_to_int(string) = int.$/;kq|/^\<string.det_to_int\>/;'q;"	kind:func
det_top	stack.m	/^:- func stack.det_top(stack(T)) = T.$/;kq|/^\<stack.det_top\>/;'q;"	kind:func
det_top	stack.m	/^:- pred stack.det_top(stack(T)::in, T::out) is det.$/;kq|/^\<stack.det_top\>/;'q;"	kind:pred
det_transform_value	map.m	/^:- func map.det_transform_value(func(V) = V, K, map(K, V)) = map(K, V).$/;kq|/^\<map.det_transform_value\>/;'q;"	kind:func
det_transform_value	map.m	/^:- pred map.det_transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<map.det_transform_value\>/;'q;"	kind:pred
det_unimplemented	erlang_rtti_implementation.m	/^:- pred det_unimplemented(string::in) is det.$/;kq|/^\<det_unimplemented\>/;'q;"	kind:pred	file:
det_unimplemented	rtti_implementation.m	/^:- pred det_unimplemented(string::in) is det.$/;kq|/^\<det_unimplemented\>/;'q;"	kind:pred	file:
det_union	map.m	/^:- func map.det_union(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.det_union\>/;'q;"	kind:func
det_union	map.m	/^:- pred map.det_union(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.det_union\>/;'q;"	kind:pred
det_univ_to_type	univ.m	/^:- pred det_univ_to_type(univ::in, T::out) is det.$/;kq|/^\<det_univ_to_type\>/;'q;"	kind:pred
det_update	hash_table.m	/^:- func det_update(hash_table(K, V), K, V) = hash_table(K, V).$/;kq|/^\<det_update\>/;'q;"	kind:func
det_update	hash_table.m	/^:- pred det_update(K::in, V::in,$/;kq|/^\<det_update\>/;'q;"	kind:pred
det_update	injection.m	/^:- func injection.det_update(injection(K, V), K, V) = injection(K, V).$/;kq|/^\<injection.det_update\>/;'q;"	kind:func
det_update	injection.m	/^:- pred injection.det_update(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.det_update\>/;'q;"	kind:pred
det_update	map.m	/^:- func map.det_update(map(K, V), K, V) = map(K, V).$/;kq|/^\<map.det_update\>/;'q;"	kind:func
det_update	map.m	/^:- pred map.det_update(K::in, V::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.det_update\>/;'q;"	kind:pred
det_update	multi_map.m	/^:- func multi_map.det_update(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.det_update\>/;'q;"	kind:func
det_update	multi_map.m	/^:- pred multi_map.det_update(K::in, V::in,$/;kq|/^\<multi_map.det_update\>/;'q;"	kind:pred
det_update	version_hash_table.m	/^:- func det_update(version_hash_table(K, V), K, V) = version_hash_table(K, V).$/;kq|/^\<det_update\>/;'q;"	kind:func
det_update	version_hash_table.m	/^:- pred det_update(K::in, V::in,$/;kq|/^\<det_update\>/;'q;"	kind:pred
detect_fake_reflexives	digraph.m	/^:- pred digraph.detect_fake_reflexives(digraph(T)::in, digraph(T)::in,$/;kq|/^\<digraph.detect_fake_reflexives\>/;'q;"	kind:pred	file:
dfs	digraph.m	/^:- func digraph.dfs(digraph(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfs\>/;'q;"	kind:func
dfs	digraph.m	/^:- func digraph.dfs(digraph(T), digraph_key(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfs\>/;'q;"	kind:func
dfs	digraph.m	/^:- pred digraph.dfs(digraph(T)::in, digraph_key(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.dfs\>/;'q;"	kind:pred
dfs	digraph.m	/^:- pred digraph.dfs(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfs\>/;'q;"	kind:pred
dfs	digraph.m	/^:- pred digraph.dfs(digraph(T)::in, list(digraph_key(T))::out) is det.$/;kq|/^\<digraph.dfs\>/;'q;"	kind:pred
dfs_2	digraph.m	/^:- pred digraph.dfs_2(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfs_2\>/;'q;"	kind:pred	file:
dfsrev	digraph.m	/^:- func digraph.dfsrev(digraph(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:func
dfsrev	digraph.m	/^:- func digraph.dfsrev(digraph(T), digraph_key(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:func
dfsrev	digraph.m	/^:- pred digraph.dfsrev(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:pred
dfsrev	digraph.m	/^:- pred digraph.dfsrev(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:pred
dfsrev	digraph.m	/^:- pred digraph.dfsrev(digraph(T)::in, list(digraph_key(T))::out) is det.$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:pred
di	builtin.m	/^:- mode di == unique >> clobbered.$/;kq|-;/\<di\>/;'q;"	kind:mode
di	builtin.m	/^:- mode di(Inst)  == Inst >> clobbered.$/;kq|-;/\<di\>/;'q;"	kind:mode
di_four	tree234.m	/^:- mode di_four  == di(uniq_four(unique, unique, unique)).$/;kq|-;/\<di_four\>/;'q;"	kind:mode	file:
di_three	tree234.m	/^:- mode di_three  == di(uniq_three(unique, unique, unique)).$/;kq|-;/\<di_three\>/;'q;"	kind:mode	file:
di_tree234	tree234.m	/^:- mode di_tree234       == uniq_tree234(ground, ground) >> dead.$/;kq|-;/\<di_tree234\>/;'q;"	kind:mode
di_tree234	tree234.m	/^:- mode di_tree234(K, V) == uniq_tree234(K, V) >> dead.$/;kq|-;/\<di_tree234\>/;'q;"	kind:mode
di_two	tree234.m	/^:- mode di_two  == di(uniq_two(unique, unique, unique)).$/;kq|-;/\<di_two\>/;'q;"	kind:mode	file:
diff_pairs	integer.m	/^:- pred diff_pairs(digit::out, integer::in, integer::in,$/;kq|/^\<diff_pairs\>/;'q;"	kind:pred	file:
diff_pairs_equal	integer.m	/^:- pred diff_pairs_equal(digit::out, list(digit)::in, list(digit)::in,$/;kq|/^\<diff_pairs_equal\>/;'q;"	kind:pred	file:
difference	bitmap.m	/^:- func difference(bitmap, bitmap) = bitmap.$/;kq|/^\<difference\>/;'q;"	kind:func
difference	fat_sparse_bitset.m	/^:- func difference(fat_sparse_bitset(T), fat_sparse_bitset(T)) =$/;kq|/^\<difference\>/;'q;"	kind:func
difference	fat_sparse_bitset.m	/^:- pred difference(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<difference\>/;'q;"	kind:pred
difference	set.m	/^:- func set.difference(set(T), set(T)) = set(T).$/;kq|/^\<set.difference\>/;'q;"	kind:func
difference	set.m	/^:- pred set.difference(set(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.difference\>/;'q;"	kind:pred
difference	set_bbbtree.m	/^:- func set_bbbtree.difference(set_bbbtree(T), set_bbbtree(T))$/;kq|/^\<set_bbbtree.difference\>/;'q;"	kind:func
difference	set_bbbtree.m	/^:- pred set_bbbtree.difference(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.difference\>/;'q;"	kind:pred
difference	set_ctree234.m	/^:- func set_ctree234.difference(set_ctree234(T), set_ctree234(T))$/;kq|/^\<set_ctree234.difference\>/;'q;"	kind:func
difference	set_ctree234.m	/^:- pred set_ctree234.difference(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.difference\>/;'q;"	kind:pred
difference	set_ordlist.m	/^:- func set_ordlist.difference(set_ordlist(T), set_ordlist(T))$/;kq|/^\<set_ordlist.difference\>/;'q;"	kind:func
difference	set_ordlist.m	/^:- pred set_ordlist.difference(set_ordlist(T)::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.difference\>/;'q;"	kind:pred
difference	set_tree234.m	/^:- func set_tree234.difference(set_tree234(T), set_tree234(T))$/;kq|/^\<set_tree234.difference\>/;'q;"	kind:func
difference	set_tree234.m	/^:- pred set_tree234.difference(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.difference\>/;'q;"	kind:pred
difference	set_unordlist.m	/^:- func set_unordlist.difference(set_unordlist(T), set_unordlist(T))$/;kq|/^\<set_unordlist.difference\>/;'q;"	kind:func
difference	set_unordlist.m	/^:- pred set_unordlist.difference(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.difference\>/;'q;"	kind:pred
difference	sparse_bitset.m	/^:- func difference(sparse_bitset(T), sparse_bitset(T)) = sparse_bitset(T).$/;kq|/^\<difference\>/;'q;"	kind:func
difference	sparse_bitset.m	/^:- pred difference(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<difference\>/;'q;"	kind:pred
difference	test_bitset.m	/^:- func difference(test_bitset(T), test_bitset(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<difference\>/;'q;"	kind:func
difference	test_bitset.m	/^:- pred difference(test_bitset(T)::in,$/;kq|/^\<difference\>/;'q;"	kind:pred
difference	tree_bitset.m	/^:- func difference(tree_bitset(T), tree_bitset(T)) = tree_bitset(T).$/;kq|/^\<difference\>/;'q;"	kind:func
difference	tree_bitset.m	/^:- pred difference(tree_bitset(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<difference\>/;'q;"	kind:pred
difference	version_bitmap.m	/^:- func difference(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<difference\>/;'q;"	kind:func
difference_2	fat_sparse_bitset.m	/^:- func difference_2(fat_bitset_impl, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<difference_2\>/;'q;"	kind:func	file:
difference_2	set_ordlist.m	/^:- pred set_ordlist.difference_2(list(T)::in, list(T)::in, list(T)::out)$/;kq|/^\<set_ordlist.difference_2\>/;'q;"	kind:pred	file:
difference_2	set_tree234.m	/^:- pred set_tree234.difference_2(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.difference_2\>/;'q;"	kind:pred	file:
difference_2	set_unordlist.m	/^:- pred set_unordlist.difference_2(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.difference_2\>/;'q;"	kind:pred	file:
difference_2	sparse_bitset.m	/^:- func difference_2(bitset_impl, bitset_impl) = bitset_impl.$/;kq|/^\<difference_2\>/;'q;"	kind:func	file:
difference_r	set_bbbtree.m	/^:- pred set_bbbtree.difference_r(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.difference_r\>/;'q;"	kind:pred	file:
difftime	time.m	/^:- func time.difftime(time_t, time_t) = float.$/;kq|/^\<time.difftime\>/;'q;"	kind:func
digit	integer.m	/^:- type digit == int.   % base 2^14 digit$/;kq|-;/\<digit\>/;'q;"	kind:type	file:
digit	string.m	/^:- pred digit(list(char)::in, list(char)::out) is semidet.$/;kq|/^\<digit\>/;'q;"	kind:pred	file:
digit_to_int	char.m	/^:- pred char.digit_to_int(char::in, int::out) is semidet.$/;kq|/^\<char.digit_to_int\>/;'q;"	kind:pred
digit_to_string	integer.m	/^:- pred digit_to_string(digit::in, string::out) is det.$/;kq|/^\<digit_to_string\>/;'q;"	kind:pred	file:
digits	parsing_utils.m	/^:- pred digits(int::in, src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<digits\>/;'q;"	kind:pred	file:
digits_2	parsing_utils.m	/^:- pred digits_2(int::in, src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<digits_2\>/;'q;"	kind:pred	file:
digits_to_string	integer.m	/^:- func digits_to_string(list(digit)) = string.$/;kq|/^\<digits_to_string\>/;'q;"	kind:func	file:
digits_to_strings	integer.m	/^:- pred digits_to_strings(list(digit)::in, list(string)::out,$/;kq|/^\<digits_to_strings\>/;'q;"	kind:pred	file:
digraph	digraph.m	/^    --->    digraph($/;kq|-;/\<digraph\>/;'q;"	kind:cons	file:
digraph	digraph.m	/^:- type digraph(T)$/;kq|-;/\<digraph\>/;'q;"	kind:type	file:
digraph.accumulate_rev_lookup	digraph.m	/^:- pred accumulate_rev_lookup(bimap(T, digraph_key(T))::in, T::in,$/;kq|/^\<accumulate_rev_lookup\>/;'q;"	kind:pred	file:
digraph.accumulate_with_key	digraph.m	/^:- pred accumulate_with_key(digraph_key(T)::in, digraph_key(T)::in,$/;kq|/^\<accumulate_with_key\>/;'q;"	kind:pred	file:
digraph.add_assoc_list	digraph.m	/^:- func digraph.add_assoc_list(assoc_list(digraph_key(T), digraph_key(T)),$/;kq|/^\<digraph.add_assoc_list\>/;'q;"	kind:func
digraph.add_assoc_list	digraph.m	/^:- pred digraph.add_assoc_list(assoc_list(digraph_key(T), digraph_key(T))::in,$/;kq|/^\<digraph.add_assoc_list\>/;'q;"	kind:pred
digraph.add_cartesian_product	digraph.m	/^:- pred digraph.add_cartesian_product(digraph_key_set(T)::in,$/;kq|/^\<digraph.add_cartesian_product\>/;'q;"	kind:pred	file:
digraph.add_composition_edges	digraph.m	/^:- pred add_composition_edges(key_map(T)::in, key_map(T)::in,$/;kq|/^\<add_composition_edges\>/;'q;"	kind:pred	file:
digraph.add_edge	digraph.m	/^:- func digraph.add_edge(digraph_key(T), digraph_key(T), digraph(T)) =$/;kq|/^\<digraph.add_edge\>/;'q;"	kind:func
digraph.add_edge	digraph.m	/^:- pred digraph.add_edge(digraph_key(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.add_edge\>/;'q;"	kind:pred
digraph.add_vertex	digraph.m	/^:- pred digraph.add_vertex(T::in, digraph_key(T)::out,$/;kq|/^\<digraph.add_vertex\>/;'q;"	kind:pred
digraph.add_vertex_pair	digraph.m	/^:- func digraph.add_vertex_pair(pair(T), digraph(T)) = digraph(T).$/;kq|/^\<digraph.add_vertex_pair\>/;'q;"	kind:func
digraph.add_vertex_pair	digraph.m	/^:- pred digraph.add_vertex_pair(pair(T)::in,$/;kq|/^\<digraph.add_vertex_pair\>/;'q;"	kind:pred
digraph.add_vertices_and_edge	digraph.m	/^:- func digraph.add_vertices_and_edge(T, T, digraph(T)) = digraph(T).$/;kq|/^\<digraph.add_vertices_and_edge\>/;'q;"	kind:func
digraph.add_vertices_and_edge	digraph.m	/^:- pred digraph.add_vertices_and_edge(T::in, T::in,$/;kq|/^\<digraph.add_vertices_and_edge\>/;'q;"	kind:pred
digraph.allocate_key	digraph.m	/^:- pred allocate_key(digraph_key(T)::out, digraph(T)::in, digraph(T)::out)$/;kq|/^\<allocate_key\>/;'q;"	kind:pred	file:
digraph.atsort	digraph.m	/^:- func digraph.atsort(digraph(T)) = list(set(T)).$/;kq|/^\<digraph.atsort\>/;'q;"	kind:func
digraph.atsort	digraph.m	/^:- pred digraph.atsort(digraph(T)::in, list(set(T))::out) is det.$/;kq|/^\<digraph.atsort\>/;'q;"	kind:pred
digraph.atsort_2	digraph.m	/^:- pred digraph.atsort_2(list(digraph_key(T))::in, digraph(T)::in,$/;kq|/^\<digraph.atsort_2\>/;'q;"	kind:pred	file:
digraph.bwd_map	digraph.m	/^                bwd_map             :: key_set_map(T)$/;kq|-;/\<digraph.bwd_map\>/;'q;"	kind:fld	file:
digraph.check_tsort	digraph.m	/^:- pred digraph.check_tsort(digraph(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.check_tsort\>/;'q;"	kind:pred	file:
digraph.clique_map	digraph.m	/^:- type clique_map(T) == map(digraph_key(T), digraph_key(set(T))).$/;kq|-;/\<digraph.clique_map\>/;'q;"	kind:type	file:
digraph.cliques	digraph.m	/^:- func digraph.cliques(digraph(T)) = set(set(digraph_key(T))).$/;kq|/^\<digraph.cliques\>/;'q;"	kind:func
digraph.cliques	digraph.m	/^:- pred digraph.cliques(digraph(T)::in, set(set(digraph_key(T)))::out) is det.$/;kq|/^\<digraph.cliques\>/;'q;"	kind:pred
digraph.cliques_2	digraph.m	/^:- pred digraph.cliques_2(list(digraph_key(T))::in, digraph(T)::in,$/;kq|/^\<digraph.cliques_2\>/;'q;"	kind:pred	file:
digraph.components	digraph.m	/^:- func digraph.components(digraph(T)) = set(set(digraph_key(T))).$/;kq|/^\<digraph.components\>/;'q;"	kind:func
digraph.components	digraph.m	/^:- pred digraph.components(digraph(T)::in, set(set(digraph_key(T)))::out)$/;kq|/^\<digraph.components\>/;'q;"	kind:pred
digraph.components_2	digraph.m	/^:- pred digraph.components_2(digraph(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.components_2\>/;'q;"	kind:pred	file:
digraph.compose	digraph.m	/^:- func digraph.compose(digraph(T), digraph(T)) = digraph(T).$/;kq|/^\<digraph.compose\>/;'q;"	kind:func
digraph.compose	digraph.m	/^:- pred digraph.compose(digraph(T)::in, digraph(T)::in, digraph(T)::out)$/;kq|/^\<digraph.compose\>/;'q;"	kind:pred
digraph.copy_vertex	digraph.m	/^:- pred copy_vertex(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<copy_vertex\>/;'q;"	kind:pred	file:
digraph.delete_assoc_list	digraph.m	/^:- func digraph.delete_assoc_list(assoc_list(digraph_key(T), digraph_key(T)),$/;kq|/^\<digraph.delete_assoc_list\>/;'q;"	kind:func
digraph.delete_assoc_list	digraph.m	/^:- pred digraph.delete_assoc_list($/;kq|/^\<digraph.delete_assoc_list\>/;'q;"	kind:pred
digraph.delete_edge	digraph.m	/^:- func digraph.delete_edge(digraph_key(T), digraph_key(T), digraph(T)) =$/;kq|/^\<digraph.delete_edge\>/;'q;"	kind:func
digraph.delete_edge	digraph.m	/^:- pred digraph.delete_edge(digraph_key(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.delete_edge\>/;'q;"	kind:pred
digraph.detect_fake_reflexives	digraph.m	/^:- pred digraph.detect_fake_reflexives(digraph(T)::in, digraph(T)::in,$/;kq|/^\<digraph.detect_fake_reflexives\>/;'q;"	kind:pred	file:
digraph.dfs	digraph.m	/^:- func digraph.dfs(digraph(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfs\>/;'q;"	kind:func
digraph.dfs	digraph.m	/^:- func digraph.dfs(digraph(T), digraph_key(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfs\>/;'q;"	kind:func
digraph.dfs	digraph.m	/^:- pred digraph.dfs(digraph(T)::in, digraph_key(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.dfs\>/;'q;"	kind:pred
digraph.dfs	digraph.m	/^:- pred digraph.dfs(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfs\>/;'q;"	kind:pred
digraph.dfs	digraph.m	/^:- pred digraph.dfs(digraph(T)::in, list(digraph_key(T))::out) is det.$/;kq|/^\<digraph.dfs\>/;'q;"	kind:pred
digraph.dfs_2	digraph.m	/^:- pred digraph.dfs_2(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfs_2\>/;'q;"	kind:pred	file:
digraph.dfsrev	digraph.m	/^:- func digraph.dfsrev(digraph(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:func
digraph.dfsrev	digraph.m	/^:- func digraph.dfsrev(digraph(T), digraph_key(T)) = list(digraph_key(T)).$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:func
digraph.dfsrev	digraph.m	/^:- pred digraph.dfsrev(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:pred
digraph.dfsrev	digraph.m	/^:- pred digraph.dfsrev(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:pred
digraph.dfsrev	digraph.m	/^:- pred digraph.dfsrev(digraph(T)::in, list(digraph_key(T))::out) is det.$/;kq|/^\<digraph.dfsrev\>/;'q;"	kind:pred
digraph.enum	digraph.m	/^:- instance enum(digraph_key(T)) where [$/;kq|-;/\<digraph.enum\>/;'q;"	kind:tci	file:
digraph.find_followers	digraph.m	/^:- pred find_followers(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<find_followers\>/;'q;"	kind:pred	file:
digraph.find_necessary_keys	digraph.m	/^:- pred find_necessary_keys(pair(digraph_key_set(T))::in,$/;kq|/^\<find_necessary_keys\>/;'q;"	kind:pred	file:
digraph.from_assoc_list	digraph.m	/^:- func digraph.from_assoc_list(assoc_list(T, T)) = digraph(T).$/;kq|/^\<digraph.from_assoc_list\>/;'q;"	kind:func
digraph.from_assoc_list	digraph.m	/^:- pred digraph.from_assoc_list(assoc_list(T, T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.from_assoc_list\>/;'q;"	kind:pred
digraph.fwd_map	digraph.m	/^                fwd_map             :: key_set_map(T),$/;kq|-;/\<digraph.fwd_map\>/;'q;"	kind:fld	file:
digraph.init	digraph.m	/^:- func digraph.init = digraph(T).$/;kq|/^\<digraph.init\>/;'q;"	kind:func
digraph.init	digraph.m	/^:- pred digraph.init(digraph(T)::out) is det.$/;kq|/^\<digraph.init\>/;'q;"	kind:pred
digraph.inverse	digraph.m	/^:- func digraph.inverse(digraph(T)) = digraph(T).$/;kq|/^\<digraph.inverse\>/;'q;"	kind:func
digraph.inverse	digraph.m	/^:- pred digraph.inverse(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.inverse\>/;'q;"	kind:pred
digraph.is_dag	digraph.m	/^:- pred digraph.is_dag(digraph(T)::in) is semidet.$/;kq|/^\<digraph.is_dag\>/;'q;"	kind:pred
digraph.is_dag_2	digraph.m	/^:- pred digraph.is_dag_2(digraph(T)::in, list(digraph_key(T))::in,$/;kq|/^\<digraph.is_dag_2\>/;'q;"	kind:pred	file:
digraph.is_edge	digraph.m	/^:- pred digraph.is_edge(digraph(T), digraph_key(T), digraph_key(T)).$/;kq|/^\<digraph.is_edge\>/;'q;"	kind:pred
digraph.is_edge_rev	digraph.m	/^:- pred digraph.is_edge_rev(digraph(T), digraph_key(T), digraph_key(T)).$/;kq|/^\<digraph.is_edge_rev\>/;'q;"	kind:pred
digraph.key_map	digraph.m	/^:- type key_map(T)     == map(int, digraph_key(T)).$/;kq|-;/\<digraph.key_map\>/;'q;"	kind:type	file:
digraph.key_set_map	digraph.m	/^:- type key_set_map(T) == map(int, digraph_key_set(T)).$/;kq|-;/\<digraph.key_set_map\>/;'q;"	kind:type	file:
digraph.key_set_map_add	digraph.m	/^:- func key_set_map_add(key_set_map(T), int, digraph_key(T)) = key_set_map(T).$/;kq|/^\<key_set_map_add\>/;'q;"	kind:func	file:
digraph.key_set_map_delete	digraph.m	/^:- func key_set_map_delete(key_set_map(T), int, digraph_key(T)) =$/;kq|/^\<key_set_map_delete\>/;'q;"	kind:func	file:
digraph.keys	digraph.m	/^:- pred digraph.keys(digraph(T)::in, list(digraph_key(T))::out) is det.$/;kq|/^\<digraph.keys\>/;'q;"	kind:pred	file:
digraph.lookup_from	digraph.m	/^:- func digraph.lookup_from(digraph(T), digraph_key(T)) = set(digraph_key(T)).$/;kq|/^\<digraph.lookup_from\>/;'q;"	kind:func
digraph.lookup_from	digraph.m	/^:- pred digraph.lookup_from(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_from\>/;'q;"	kind:pred
digraph.lookup_key	digraph.m	/^:- func digraph.lookup_key(digraph(T), T) = digraph_key(T).$/;kq|/^\<digraph.lookup_key\>/;'q;"	kind:func
digraph.lookup_key	digraph.m	/^:- pred digraph.lookup_key(digraph(T)::in, T::in, digraph_key(T)::out)$/;kq|/^\<digraph.lookup_key\>/;'q;"	kind:pred
digraph.lookup_key_set_from	digraph.m	/^:- func digraph.lookup_key_set_from(digraph(T), digraph_key(T)) =$/;kq|/^\<digraph.lookup_key_set_from\>/;'q;"	kind:func
digraph.lookup_key_set_from	digraph.m	/^:- pred digraph.lookup_key_set_from(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_key_set_from\>/;'q;"	kind:pred
digraph.lookup_key_set_to	digraph.m	/^:- func digraph.lookup_key_set_to(digraph(T), digraph_key(T)) =$/;kq|/^\<digraph.lookup_key_set_to\>/;'q;"	kind:func
digraph.lookup_key_set_to	digraph.m	/^:- pred digraph.lookup_key_set_to(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_key_set_to\>/;'q;"	kind:pred
digraph.lookup_to	digraph.m	/^:- func digraph.lookup_to(digraph(T), digraph_key(T)) = set(digraph_key(T)).$/;kq|/^\<digraph.lookup_to\>/;'q;"	kind:func
digraph.lookup_to	digraph.m	/^:- pred digraph.lookup_to(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_to\>/;'q;"	kind:pred
digraph.lookup_vertex	digraph.m	/^:- func digraph.lookup_vertex(digraph(T), digraph_key(T)) = T.$/;kq|/^\<digraph.lookup_vertex\>/;'q;"	kind:func
digraph.lookup_vertex	digraph.m	/^:- pred digraph.lookup_vertex(digraph(T)::in, digraph_key(T)::in, T::out)$/;kq|/^\<digraph.lookup_vertex\>/;'q;"	kind:pred
digraph.make_clique_map	digraph.m	/^:- pred digraph.make_clique_map(digraph(T)::in,$/;kq|/^\<digraph.make_clique_map\>/;'q;"	kind:pred	file:
digraph.make_clique_map_2	digraph.m	/^:- pred digraph.make_clique_map_2(digraph_key(set(T))::in, digraph_key(T)::in,$/;kq|/^\<digraph.make_clique_map_2\>/;'q;"	kind:pred	file:
digraph.make_reduced_graph	digraph.m	/^:- pred digraph.make_reduced_graph(clique_map(T)::in,$/;kq|/^\<digraph.make_reduced_graph\>/;'q;"	kind:pred	file:
digraph.map_digraph_key_set	digraph.m	/^:- func map_digraph_key_set(key_map(T), digraph_key_set(T)) =$/;kq|/^\<map_digraph_key_set\>/;'q;"	kind:func	file:
digraph.next_key	digraph.m	/^                next_key            :: int,$/;kq|-;/\<digraph.next_key\>/;'q;"	kind:fld	file:
digraph.reachable_from	digraph.m	/^:- pred digraph.reachable_from(digraph(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.reachable_from\>/;'q;"	kind:pred	file:
digraph.reduced	digraph.m	/^:- func digraph.reduced(digraph(T)) = digraph(set(T)).$/;kq|/^\<digraph.reduced\>/;'q;"	kind:func
digraph.reduced	digraph.m	/^:- pred digraph.reduced(digraph(T)::in, digraph(set(T))::out) is det.$/;kq|/^\<digraph.reduced\>/;'q;"	kind:pred
digraph.reduced	digraph.m	/^:- pred digraph.reduced(digraph(T)::in, digraph(set(T))::out,$/;kq|/^\<digraph.reduced\>/;'q;"	kind:pred
digraph.rtc	digraph.m	/^:- func digraph.rtc(digraph(T)) = digraph(T).$/;kq|/^\<digraph.rtc\>/;'q;"	kind:func
digraph.rtc	digraph.m	/^:- pred digraph.rtc(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.rtc\>/;'q;"	kind:pred
digraph.rtc_2	digraph.m	/^:- pred digraph.rtc_2(list(digraph_key(T))::in, digraph(T)::in,$/;kq|/^\<digraph.rtc_2\>/;'q;"	kind:pred	file:
digraph.sc	digraph.m	/^:- func digraph.sc(digraph(T)) = digraph(T).$/;kq|/^\<digraph.sc\>/;'q;"	kind:func
digraph.sc	digraph.m	/^:- pred digraph.sc(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.sc\>/;'q;"	kind:pred
digraph.search_key	digraph.m	/^:- pred digraph.search_key(digraph(T)::in, T::in, digraph_key(T)::out)$/;kq|/^\<digraph.search_key\>/;'q;"	kind:pred
digraph.tc	digraph.m	/^:- func digraph.tc(digraph(T)) = digraph(T).$/;kq|/^\<digraph.tc\>/;'q;"	kind:func
digraph.tc	digraph.m	/^:- pred digraph.tc(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.tc\>/;'q;"	kind:pred
digraph.to_assoc_list	digraph.m	/^:- func digraph.to_assoc_list(digraph(T)) = assoc_list(T, T).$/;kq|/^\<digraph.to_assoc_list\>/;'q;"	kind:func
digraph.to_assoc_list	digraph.m	/^:- pred digraph.to_assoc_list(digraph(T)::in, assoc_list(T, T)::out) is det.$/;kq|/^\<digraph.to_assoc_list\>/;'q;"	kind:pred
digraph.to_assoc_list_2	digraph.m	/^:- pred digraph.to_assoc_list_2(key_set_map(T)::in, list(int)::in,$/;kq|/^\<digraph.to_assoc_list_2\>/;'q;"	kind:pred	file:
digraph.to_key_assoc_list	digraph.m	/^:- func digraph.to_key_assoc_list(digraph(T)) =$/;kq|/^\<digraph.to_key_assoc_list\>/;'q;"	kind:func
digraph.to_key_assoc_list	digraph.m	/^:- pred digraph.to_key_assoc_list(digraph(T)::in,$/;kq|/^\<digraph.to_key_assoc_list\>/;'q;"	kind:pred
digraph.to_key_assoc_list_2	digraph.m	/^:- pred digraph.to_key_assoc_list_2(key_set_map(T)::in, list(int)::in,$/;kq|/^\<digraph.to_key_assoc_list_2\>/;'q;"	kind:pred	file:
digraph.traverse	digraph.m	/^:- pred digraph.traverse(digraph(T), pred(T, A, A), pred(T, T, A, A), A, A).$/;kq|/^\<digraph.traverse\>/;'q;"	kind:pred
digraph.traverse_2	digraph.m	/^:- pred digraph.traverse_2(list(digraph_key(T)), digraph(T), pred(T, A, A),$/;kq|/^\<digraph.traverse_2\>/;'q;"	kind:pred	file:
digraph.traverse_children	digraph.m	/^:- pred digraph.traverse_children(list(digraph_key(T)), T, digraph(T),$/;kq|/^\<digraph.traverse_children\>/;'q;"	kind:pred	file:
digraph.tsort	digraph.m	/^:- pred digraph.tsort(digraph(T)::in, list(T)::out) is semidet.$/;kq|/^\<digraph.tsort\>/;'q;"	kind:pred
digraph.vertex_map	digraph.m	/^                vertex_map          :: bimap(T, digraph_key(T)),$/;kq|-;/\<digraph.vertex_map\>/;'q;"	kind:fld	file:
digraph.vertices	digraph.m	/^:- func digraph.vertices(digraph(T)) = set(T).$/;kq|/^\<digraph.vertices\>/;'q;"	kind:func
digraph.vertices	digraph.m	/^:- pred digraph.vertices(digraph(T)::in, set(T)::out) is det.$/;kq|/^\<digraph.vertices\>/;'q;"	kind:pred
digraph_key	digraph.m	/^    --->    digraph_key(int).$/;kq|-;/\<digraph_key\>/;'q;"	kind:cons	file:
digraph_key	digraph.m	/^:- type digraph_key(T)$/;kq|-;/\<digraph_key\>/;'q;"	kind:type	file:
digraph_key_set	digraph.m	/^:- type digraph_key_set(T) == sparse_bitset(digraph_key(T)).$/;kq|-;/\<digraph_key_set\>/;'q;"	kind:type
dir	dir.m	/^:- type dir.stream ---> dir.stream.$/;kq|-;/\<dir\>/;'q;"	kind:cons	file:
dir.add_alternatives	dir.m	/^:- func add_alternatives(list(list(char)), list(char)) = list(list(char)).$/;kq|/^\<add_alternatives\>/;'q;"	kind:func	file:
dir.add_char_at_end	dir.m	/^:- func add_char_at_end(char, list(char)) = list(char).$/;kq|/^\<add_char_at_end\>/;'q;"	kind:func	file:
dir.alt_directory_separator	dir.m	/^:- func dir.alt_directory_separator = char.$/;kq|/^\<dir.alt_directory_separator\>/;'q;"	kind:func	file:
dir.basename	dir.m	/^:- func dir.basename(string) = string is semidet.$/;kq|/^\<dir.basename\>/;'q;"	kind:func
dir.basename	dir.m	/^:- pred dir.basename(string::in, string::out) is semidet.$/;kq|/^\<dir.basename\>/;'q;"	kind:pred
dir.can_implement_dir_foldl	dir.m	/^:- pred can_implement_dir_foldl is semidet.$/;kq|/^\<can_implement_dir_foldl\>/;'q;"	kind:pred	file:
dir.canonicalize_path_chars	dir.m	/^:- func canonicalize_path_chars(list(char)) = list(char).$/;kq|/^\<canonicalize_path_chars\>/;'q;"	kind:func	file:
dir.canonicalize_path_chars_2	dir.m	/^:- func canonicalize_path_chars_2(list(char), list(char)) = list(char).$/;kq|/^\<canonicalize_path_chars_2\>/;'q;"	kind:func	file:
dir.check_dir_accessibility	dir.m	/^:- pred dir.check_dir_accessibility(string::in, io.res::out, io::di, io::uo)$/;kq|/^\<dir.check_dir_accessibility\>/;'q;"	kind:pred	file:
dir.check_dir_readable	dir.m	/^:- pred dir.check_dir_readable(string::in, int::out,$/;kq|/^\<dir.check_dir_readable\>/;'q;"	kind:pred	file:
dir.check_for_symlink_loop	dir.m	/^:- pred check_for_symlink_loop(bool::in, string::in, io.res(bool)::out,$/;kq|/^\<check_for_symlink_loop\>/;'q;"	kind:pred	file:
dir.close	dir.m	/^:- pred dir.close(dir.stream::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<dir.close\>/;'q;"	kind:pred	file:
dir.close_2	dir.m	/^:- pred dir.close_2(dir.stream::in, int::out, io.system_error::out,$/;kq|/^\<dir.close_2\>/;'q;"	kind:pred	file:
dir.current_directory	dir.m	/^:- pred dir.current_directory(io.res(string)::out, io::di, io::uo) is det.$/;kq|/^\<dir.current_directory\>/;'q;"	kind:pred
dir.det_basename	dir.m	/^:- func dir.det_basename(string) = string.$/;kq|/^\<dir.det_basename\>/;'q;"	kind:func
dir.directory_separator	dir.m	/^:- func dir.directory_separator = character.$/;kq|/^\<dir.directory_separator\>/;'q;"	kind:func
dir.directory_separator	dir.m	/^:- pred dir.directory_separator(character::out) is det.$/;kq|/^\<dir.directory_separator\>/;'q;"	kind:pred
dir.dirname	dir.m	/^:- func dir.dirname(string) = string.$/;kq|/^\<dir.dirname\>/;'q;"	kind:func
dir.dirname	dir.m	/^:- pred dir.dirname(string::in, string::out) is det.$/;kq|/^\<dir.dirname\>/;'q;"	kind:pred
dir.expand	dir.m	/^:- func expand(list(char)) = list(list(char)).$/;kq|/^\<expand\>/;'q;"	kind:func	file:
dir.expand_acc	dir.m	/^:- func expand_acc(list(char), list(list(char))) = list(list(char)).$/;kq|/^\<expand_acc\>/;'q;"	kind:func	file:
dir.expand_braces	dir.m	/^:- func expand_braces(string) = list(string).$/;kq|/^\<expand_braces\>/;'q;"	kind:func
dir.find_matching_brace	dir.m	/^:- pred find_matching_brace(list(char)::in, list(list(char))::out,$/;kq|/^\<find_matching_brace\>/;'q;"	kind:pred	file:
dir.fixup_dirname	dir.m	/^:- func fixup_dirname(string) = string.$/;kq|/^\<fixup_dirname\>/;'q;"	kind:func	file:
dir.foldl2	dir.m	/^:- pred dir.foldl2(dir.foldl_pred(T)::in(dir.foldl_pred), string::in,$/;kq|/^\<dir.foldl2\>/;'q;"	kind:pred
dir.foldl2_process_dir	dir.m	/^:- pred dir.foldl2_process_dir(bool::in,$/;kq|/^\<dir.foldl2_process_dir\>/;'q;"	kind:pred	file:
dir.foldl2_process_dir2	dir.m	/^:- pred dir.foldl2_process_dir2(dir.stream::in, dir.stream::out, bool::in,$/;kq|/^\<dir.foldl2_process_dir2\>/;'q;"	kind:pred	file:
dir.foldl2_process_entries	dir.m	/^:- pred dir.foldl2_process_entries(dir.stream::in, dir.stream::out, bool::in,$/;kq|/^\<dir.foldl2_process_entries\>/;'q;"	kind:pred	file:
dir.foldl_pred	dir.m	/^:- inst dir.foldl_pred == (pred(in, in, in, out, in, out, di, uo) is det).$/;kq|-;/\<dir.foldl_pred\>/;'q;"	kind:inst
dir.foldl_pred	dir.m	/^:- type dir.foldl_pred(T) ==$/;kq|-;/\<dir.foldl_pred\>/;'q;"	kind:type
dir.is_directory_separator	dir.m	/^:- pred dir.is_directory_separator(character).$/;kq|/^\<dir.is_directory_separator\>/;'q;"	kind:pred
dir.is_dotnet_root_directory	dir.m	/^:- pred is_dotnet_root_directory(string::in) is semidet.$/;kq|/^\<is_dotnet_root_directory\>/;'q;"	kind:pred	file:
dir.is_dotnet_root_directory_2	dir.m	/^:- pred is_dotnet_root_directory_2(string::in) is semidet.$/;kq|/^\<is_dotnet_root_directory_2\>/;'q;"	kind:pred	file:
dir.is_root_directory	dir.m	/^:- pred is_root_directory(list(char)::in) is semidet.$/;kq|/^\<is_root_directory\>/;'q;"	kind:pred	file:
dir.make_dir_open_result_eof	dir.m	/^:- func make_dir_open_result_eof = io.result({dir.stream, string}).$/;kq|/^\<make_dir_open_result_eof\>/;'q;"	kind:func	file:
dir.make_dir_open_result_error	dir.m	/^:- pred make_dir_open_result_error(io.system_error::in,$/;kq|/^\<make_dir_open_result_error\>/;'q;"	kind:pred	file:
dir.make_directory	dir.m	/^:- pred dir.make_directory(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<dir.make_directory\>/;'q;"	kind:pred
dir.make_mkdir_res_error	dir.m	/^:- pred dir.make_mkdir_res_error(io.system_error::in, io.res::out,$/;kq|/^\<dir.make_mkdir_res_error\>/;'q;"	kind:pred	file:
dir.make_mkdir_res_exists	dir.m	/^:- pred dir.make_mkdir_res_exists(io.system_error::in,$/;kq|/^\<dir.make_mkdir_res_exists\>/;'q;"	kind:pred	file:
dir.make_mkdir_res_ok	dir.m	/^:- func dir.make_mkdir_res_ok = io.res.$/;kq|/^\<dir.make_mkdir_res_ok\>/;'q;"	kind:func	file:
dir.make_path_name	dir.m	/^:- func dir.make_path_name(string, string) = string.$/;kq|/^\<dir.make_path_name\>/;'q;"	kind:func
dir.make_single_directory	dir.m	/^:- pred dir.make_single_directory(string::in, io.res::out, io::di, io::uo)$/;kq|/^\<dir.make_single_directory\>/;'q;"	kind:pred
dir.make_single_directory_2	dir.m	/^:- pred dir.make_single_directory_2(int::in, string::in, io.res::out,$/;kq|/^\<dir.make_single_directory_2\>/;'q;"	kind:pred	file:
dir.open	dir.m	/^:- pred dir.open(string::in, io.result({dir.stream, string})::out,$/;kq|/^\<dir.open\>/;'q;"	kind:pred	file:
dir.open_2	dir.m	/^:- pred dir.open_2(string::in, io.result({dir.stream, string})::out,$/;kq|/^\<dir.open_2\>/;'q;"	kind:pred	file:
dir.parent_directory	dir.m	/^:- func dir.parent_directory = string.$/;kq|/^\<dir.parent_directory\>/;'q;"	kind:func
dir.parent_directory	dir.m	/^:- pred dir.parent_directory(string::out) is det.$/;kq|/^\<dir.parent_directory\>/;'q;"	kind:pred
dir.path_name_is_absolute	dir.m	/^:- pred dir.path_name_is_absolute(string::in) is semidet.$/;kq|/^\<dir.path_name_is_absolute\>/;'q;"	kind:pred
dir.read_entry	dir.m	/^:- pred dir.read_entry(dir.stream::in, io.result({dir.stream, string})::out,$/;kq|/^\<dir.read_entry\>/;'q;"	kind:pred	file:
dir.read_entry_2	dir.m	/^:- pred dir.read_entry_2(dir.stream::in, dir.stream::out, int::out,$/;kq|/^\<dir.read_entry_2\>/;'q;"	kind:pred	file:
dir.read_first_entry	dir.m	/^:- pred dir.read_first_entry(dir.stream::in,$/;kq|/^\<dir.read_first_entry\>/;'q;"	kind:pred	file:
dir.recursive_foldl2	dir.m	/^:- pred dir.recursive_foldl2(dir.foldl_pred(T)::in(dir.foldl_pred),$/;kq|/^\<dir.recursive_foldl2\>/;'q;"	kind:pred
dir.split_name	dir.m	/^:- pred dir.split_name(string::in, string::out, string::out) is semidet.$/;kq|/^\<dir.split_name\>/;'q;"	kind:pred
dir.split_name_2	dir.m	/^:- pred dir.split_name_2(list(char)::in, string::out, string::out) is semidet.$/;kq|/^\<dir.split_name_2\>/;'q;"	kind:pred	file:
dir.split_name_3	dir.m	/^:- pred dir.split_name_3(list(char)::in, string::out, string::out) is semidet.$/;kq|/^\<dir.split_name_3\>/;'q;"	kind:pred	file:
dir.split_name_dotnet	dir.m	/^:- pred dir.split_name_dotnet(string::in, string::out, string::out)$/;kq|/^\<dir.split_name_dotnet\>/;'q;"	kind:pred	file:
dir.stream	dir.m	/^:- type dir.stream ---> dir.stream.$/;kq|-;/\<dir.stream\>/;'q;"	kind:type	file:
dir.string	dir.m	/^:- func string \/ string = string.$/;kq|/^\<string\>/;'q;"	kind:func
dir.this_directory	dir.m	/^:- func dir.this_directory = string.$/;kq|/^\<dir.this_directory\>/;'q;"	kind:func
dir.this_directory	dir.m	/^:- pred dir.this_directory(string::out) is det.$/;kq|/^\<dir.this_directory\>/;'q;"	kind:pred
dir.use_windows_paths	dir.m	/^:- pred dir.use_windows_paths is semidet.$/;kq|/^\<dir.use_windows_paths\>/;'q;"	kind:pred
directory	io.m	/^    ;       directory$/;kq|-;/\<directory\>/;'q;"	kind:cons
directory_separator	dir.m	/^:- func dir.directory_separator = character.$/;kq|/^\<dir.directory_separator\>/;'q;"	kind:func
directory_separator	dir.m	/^:- pred dir.directory_separator(character::out) is det.$/;kq|/^\<dir.directory_separator\>/;'q;"	kind:pred
dirname	dir.m	/^:- func dir.dirname(string) = string.$/;kq|/^\<dir.dirname\>/;'q;"	kind:func
dirname	dir.m	/^:- pred dir.dirname(string::in, string::out) is det.$/;kq|/^\<dir.dirname\>/;'q;"	kind:pred
dis_imps	robdd.m	/^                dis_imps        :: imp_map(T), %  K => ~V  (~K \\\/ ~V)$/;kq|-;/\<dis_imps\>/;'q;"	kind:fld
discard_ticket	private_builtin.m	/^:- impure pred discard_ticket is det.$/;kq|/^\<discard_ticket\>/;'q;"	kind:pred
discard_trail_ticket	solutions.m	/^:- impure pred discard_trail_ticket is det.$/;kq|/^\<discard_trail_ticket\>/;'q;"	kind:pred	file:
disj_vars	robdd.m	/^:- func disj_vars(vars(T)) = robdd(T).$/;kq|/^\<disj_vars\>/;'q;"	kind:func
div	int.m	/^:- func div(int::in, int::in) = (int::uo) is det.$/;kq|/^\<div\>/;'q;"	kind:func
div_by_digit	integer.m	/^:- func div_by_digit(digit, integer) = integer.$/;kq|/^\<div_by_digit\>/;'q;"	kind:func	file:
div_by_digit_1	integer.m	/^:- func div_by_digit_1(digit, list(digit), digit) = integer.$/;kq|/^\<div_by_digit_1\>/;'q;"	kind:func	file:
div_by_digit_2	integer.m	/^:- func div_by_digit_2(digit, list(digit), digit) = integer.$/;kq|/^\<div_by_digit_2\>/;'q;"	kind:func	file:
divide	fat_sparse_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), fat_sparse_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
divide	set.m	/^:- pred set.divide(pred(T)::in(pred(in) is semidet), set(T)::in,$/;kq|/^\<set.divide\>/;'q;"	kind:pred
divide	set_ctree234.m	/^:- pred set_ctree234.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.divide\>/;'q;"	kind:pred
divide	set_ordlist.m	/^:- pred set_ordlist.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ordlist.divide\>/;'q;"	kind:pred
divide	set_tree234.m	/^:- pred set_tree234.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.divide\>/;'q;"	kind:pred
divide	set_unordlist.m	/^:- pred set_unordlist.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.divide\>/;'q;"	kind:pred
divide	sparse_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), sparse_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
divide	test_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), test_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
divide	tree_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), tree_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
divide_2	set_ordlist.m	/^:- pred set_ordlist.divide_2(pred(T)::in(pred(in) is semidet), list(T)::in,$/;kq|/^\<set_ordlist.divide_2\>/;'q;"	kind:pred	file:
divide_2	set_tree234.m	/^:- pred set_tree234.divide_2(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.divide_2\>/;'q;"	kind:pred	file:
divide_2	set_unordlist.m	/^:- pred set_unordlist.divide_2(pred(T1)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.divide_2\>/;'q;"	kind:pred	file:
divide_bits	fat_sparse_bitset.m	/^:- pred divide_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_bits\>/;'q;"	kind:pred	file:
divide_bits	sparse_bitset.m	/^:- pred divide_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_bits\>/;'q;"	kind:pred	file:
divide_bits_by_set	fat_sparse_bitset.m	/^:- pred divide_bits_by_set(int::in,$/;kq|/^\<divide_bits_by_set\>/;'q;"	kind:pred	file:
divide_bits_by_set	sparse_bitset.m	/^:- pred divide_bits_by_set(int::in,$/;kq|/^\<divide_bits_by_set\>/;'q;"	kind:pred	file:
divide_by_set	fat_sparse_bitset.m	/^:- pred divide_by_set(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
divide_by_set	set.m	/^:- pred set.divide_by_set(set(T)::in, set(T)::in, set(T)::out, set(T)::out)$/;kq|/^\<set.divide_by_set\>/;'q;"	kind:pred
divide_by_set	set_ctree234.m	/^:- pred set_ctree234.divide_by_set(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.divide_by_set\>/;'q;"	kind:pred
divide_by_set	set_ordlist.m	/^:- pred set_ordlist.divide_by_set(set_ordlist(T)::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.divide_by_set\>/;'q;"	kind:pred
divide_by_set	set_tree234.m	/^:- pred set_tree234.divide_by_set(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.divide_by_set\>/;'q;"	kind:pred
divide_by_set	sparse_bitset.m	/^:- pred divide_by_set(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
divide_by_set	test_bitset.m	/^:- pred divide_by_set(test_bitset(T)::in, test_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
divide_by_set	tree_bitset.m	/^:- pred divide_by_set(tree_bitset(T)::in, tree_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
divide_by_set_2	set_ordlist.m	/^:- pred set_ordlist.divide_by_set_2(list(T1)::in, list(T1)::in,$/;kq|/^\<set_ordlist.divide_by_set_2\>/;'q;"	kind:pred	file:
divide_by_set_descend_divide_by	tree_bitset.m	/^:- pred divide_by_set_descend_divide_by(int::in,$/;kq|/^\<divide_by_set_descend_divide_by\>/;'q;"	kind:pred	file:
divide_equivalence_classes	eqvclass.m	/^:- func eqvclass.divide_equivalence_classes(func(T) = U, eqvclass(T))$/;kq|/^\<eqvclass.divide_equivalence_classes\>/;'q;"	kind:func
divide_equivalence_classes_2	eqvclass.m	/^:- pred divide_equivalence_classes_2((func(T) = U)::in,$/;kq|/^\<divide_equivalence_classes_2\>/;'q;"	kind:pred	file:
divide_equivalence_classes_3	eqvclass.m	/^:- pred divide_equivalence_classes_3((func(T) = U)::in, partition_id::in,$/;kq|/^\<divide_equivalence_classes_3\>/;'q;"	kind:pred	file:
divide_nodes	fat_sparse_bitset.m	/^:- pred divide_nodes(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_nodes\>/;'q;"	kind:pred	file:
divide_nodes	sparse_bitset.m	/^:- pred divide_nodes(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_nodes\>/;'q;"	kind:pred	file:
divide_nodes_by_set	fat_sparse_bitset.m	/^:- pred divide_nodes_by_set(fat_bitset_impl::in, fat_bitset_impl::in,$/;kq|/^\<divide_nodes_by_set\>/;'q;"	kind:pred	file:
divide_nodes_by_set	sparse_bitset.m	/^:- pred divide_nodes_by_set(list(bitset_elem)::in, list(bitset_elem)::in,$/;kq|/^\<divide_nodes_by_set\>/;'q;"	kind:pred	file:
divide_with_rem	integer.m	/^:- pred divide_with_rem(integer::in, integer::in,$/;kq|/^\<divide_with_rem\>/;'q;"	kind:pred
dnf	robdd.m	/^:- func dnf(robdd(T)) = list(list(literal(T))).$/;kq|/^\<dnf\>/;'q;"	kind:func
do_all_false	array.m	/^:- pred do_all_false(pred(T), int, int, array(T)).$/;kq|/^\<do_all_false\>/;'q;"	kind:pred	file:
do_all_false	version_array.m	/^:- pred do_all_false(pred(T)::in(pred(in) is semidet), int::in, int::in,$/;kq|/^\<do_all_false\>/;'q;"	kind:pred	file:
do_all_true	array.m	/^:- pred do_all_true(pred(T), int, int, array(T)).$/;kq|/^\<do_all_true\>/;'q;"	kind:pred	file:
do_all_true	version_array.m	/^:- pred do_all_true(pred(T)::in(pred(in) is semidet), int::in, int::in,$/;kq|/^\<do_all_true\>/;'q;"	kind:pred	file:
do_contains	set_ctree234.m	/^:- pred set_ctree234.do_contains(set_tree234(T)::in, T::in) is semidet.$/;kq|/^\<set_ctree234.do_contains\>/;'q;"	kind:pred	file:
do_count	set_ctree234.m	/^:- func set_ctree234.do_count(set_tree234(T)) = int.$/;kq|/^\<set_ctree234.do_count\>/;'q;"	kind:func	file:
do_delete	set_ctree234.m	/^:- pred set_ctree234.do_delete(T::in, int::out, set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_delete\>/;'q;"	kind:pred	file:
do_delete_list	set_ctree234.m	/^:- pred set_ctree234.do_delete_list(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_delete_list\>/;'q;"	kind:pred	file:
do_difference	set_ctree234.m	/^:- pred set_ctree234.do_difference(set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_difference\>/;'q;"	kind:pred	file:
do_divide	set_ctree234.m	/^:- pred set_ctree234.do_divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.do_divide\>/;'q;"	kind:pred	file:
do_fold2_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold2_pred($/;kq|/^\<set_ctree234.do_fold2_pred\>/;'q;"	kind:pred	file:
do_fold3_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold3_pred($/;kq|/^\<set_ctree234.do_fold3_pred\>/;'q;"	kind:pred	file:
do_fold4_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold4_pred($/;kq|/^\<set_ctree234.do_fold4_pred\>/;'q;"	kind:pred	file:
do_fold5_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold5_pred($/;kq|/^\<set_ctree234.do_fold5_pred\>/;'q;"	kind:pred	file:
do_fold6_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold6_pred($/;kq|/^\<set_ctree234.do_fold6_pred\>/;'q;"	kind:pred	file:
do_fold_func	set_ctree234.m	/^:- pred set_ctree234.do_fold_func($/;kq|/^\<set_ctree234.do_fold_func\>/;'q;"	kind:pred	file:
do_fold_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold_pred(pred(T1, T2, T2), set_tree234(T1),$/;kq|/^\<set_ctree234.do_fold_pred\>/;'q;"	kind:pred	file:
do_foldl2	array.m	/^:- pred do_foldl2(pred(T1, T2, T2, T3, T3), int, int, array(T1), T2, T2,$/;kq|/^\<do_foldl2\>/;'q;"	kind:pred	file:
do_foldl2	version_array.m	/^:- pred do_foldl2(pred(T1, T2, T2, T3, T3), version_array(T1), int, int,$/;kq|/^\<do_foldl2\>/;'q;"	kind:pred	file:
do_foldl2_pred	fat_sparse_bitset.m	/^:- pred do_foldl2_pred(pred(T, U, U, V, V), fat_bitset_impl, U, U, V, V)$/;kq|/^\<do_foldl2_pred\>/;'q;"	kind:pred	file:
do_foldl2_pred	sparse_bitset.m	/^:- pred do_foldl2_pred(pred(T, U, U, V, V), bitset_impl, U, U, V, V)$/;kq|/^\<do_foldl2_pred\>/;'q;"	kind:pred	file:
do_foldl2_pred	tree_bitset.m	/^:- pred do_foldl2_pred(pred(T, U, U, V, V), list(interior_node), U, U, V, V)$/;kq|/^\<do_foldl2_pred\>/;'q;"	kind:pred	file:
do_foldl3	array.m	/^:- pred do_foldl3(pred(T1, T2, T2, T3, T3, T4, T4), int, int, array(T1),$/;kq|/^\<do_foldl3\>/;'q;"	kind:pred	file:
do_foldl4	array.m	/^:- pred do_foldl4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), int, int,$/;kq|/^\<do_foldl4\>/;'q;"	kind:pred	file:
do_foldl5	array.m	/^:- pred do_foldl5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<do_foldl5\>/;'q;"	kind:pred	file:
do_foldl_func	array.m	/^:- func do_foldl_func(func(T1, T2) = T2, array(T1), T2, int, int) = T2.$/;kq|/^\<do_foldl_func\>/;'q;"	kind:func	file:
do_foldl_func	version_array.m	/^:- func do_foldl_func(func(T1, T2) = T2, version_array(T1), T2, int, int) = T2.$/;kq|/^\<do_foldl_func\>/;'q;"	kind:func	file:
do_foldl_pred	array.m	/^:- pred do_foldl_pred(pred(T1, T2, T2), array(T1), int, int, T2, T2).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
do_foldl_pred	fat_sparse_bitset.m	/^:- pred do_foldl_pred(pred(T, U, U), fat_bitset_impl, U, U) <= enum(T).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
do_foldl_pred	sparse_bitset.m	/^:- pred do_foldl_pred(pred(T, U, U), bitset_impl, U, U) <= enum(T).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
do_foldl_pred	tree_bitset.m	/^:- pred do_foldl_pred(pred(T, U, U), list(interior_node), U, U) <= enum(T).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
do_foldl_pred	version_array.m	/^:- pred do_foldl_pred(pred(T1, T2, T2), version_array(T1), int, int, T2, T2).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
do_foldr2	array.m	/^:- pred do_foldr2(pred(T1, T2, T2, T3, T3), int, int, array(T1), T2, T2,$/;kq|/^\<do_foldr2\>/;'q;"	kind:pred	file:
do_foldr2	version_array.m	/^:- pred do_foldr2(pred(T1, T2, T2, T3, T3), version_array(T1), int,$/;kq|/^\<do_foldr2\>/;'q;"	kind:pred	file:
do_foldr2_pred	fat_sparse_bitset.m	/^:- pred do_foldr2_pred(pred(T, U, U, V, V), fat_bitset_impl, U, U, V, V)$/;kq|/^\<do_foldr2_pred\>/;'q;"	kind:pred	file:
do_foldr2_pred	sparse_bitset.m	/^:- pred do_foldr2_pred(pred(T, U, U, V, V), bitset_impl, U, U, V, V)$/;kq|/^\<do_foldr2_pred\>/;'q;"	kind:pred	file:
do_foldr2_pred	tree_bitset.m	/^:- pred do_foldr2_pred(pred(T, U, U, V, V), list(interior_node), U, U, V, V)$/;kq|/^\<do_foldr2_pred\>/;'q;"	kind:pred	file:
do_foldr3	array.m	/^:- pred do_foldr3(pred(T1, T2, T2, T3, T3, T4, T4), int, int, array(T1),$/;kq|/^\<do_foldr3\>/;'q;"	kind:pred	file:
do_foldr4	array.m	/^:- pred do_foldr4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), int, int,$/;kq|/^\<do_foldr4\>/;'q;"	kind:pred	file:
do_foldr5	array.m	/^:- pred do_foldr5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<do_foldr5\>/;'q;"	kind:pred	file:
do_foldr_func	array.m	/^:- func do_foldr_func(func(T1, T2) = T2, array(T1), T2, int, int) = T2.$/;kq|/^\<do_foldr_func\>/;'q;"	kind:func	file:
do_foldr_func	version_array.m	/^:- func do_foldr_func(func(T1, T2) = T2, version_array(T1), T2, int) = T2.$/;kq|/^\<do_foldr_func\>/;'q;"	kind:func	file:
do_foldr_pred	array.m	/^:- pred do_foldr_pred(pred(T1, T2, T2), int, int, array(T1), T2, T2).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
do_foldr_pred	fat_sparse_bitset.m	/^:- pred do_foldr_pred(pred(T, U, U), fat_bitset_impl, U, U) <= enum(T).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
do_foldr_pred	sparse_bitset.m	/^:- pred do_foldr_pred(pred(T, U, U), bitset_impl, U, U) <= enum(T).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
do_foldr_pred	tree_bitset.m	/^:- pred do_foldr_pred(pred(T, U, U), list(interior_node), U, U) <= enum(T).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
do_foldr_pred	version_array.m	/^:- pred do_foldr_pred(pred(T1, T2, T2), version_array(T1), int, T2, T2).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
do_from_rev_sorted_assoc_list	tree234.m	/^:- pred do_from_rev_sorted_assoc_list(int::in,$/;kq|/^\<do_from_rev_sorted_assoc_list\>/;'q;"	kind:pred	file:
do_from_sorted_assoc_list	tree234.m	/^:- pred do_from_sorted_assoc_list(int::in,$/;kq|/^\<do_from_sorted_assoc_list\>/;'q;"	kind:pred	file:
do_get_bits	bit_buffer.read.m	/^:- pred do_get_bits(bit_index::in, num_bits::in, word::in, word::out,$/;kq|/^\<do_get_bits\>/;'q;"	kind:pred	file:
do_init	store.m	/^:- some [S] pred store.do_init(store(S)::uo) is det.$/;kq|/^\<store.do_init\>/;'q;"	kind:pred	file:
do_insert	set_ctree234.m	/^:- pred set_ctree234.do_insert(T::in, int::out,$/;kq|/^\<set_ctree234.do_insert\>/;'q;"	kind:pred	file:
do_insert_list	set_ctree234.m	/^:- pred set_ctree234.do_insert_list(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_insert_list\>/;'q;"	kind:pred	file:
do_insert_new	set_ctree234.m	/^:- pred set_ctree234.do_insert_new(T::in,$/;kq|/^\<set_ctree234.do_insert_new\>/;'q;"	kind:pred	file:
do_intersect	set_ctree234.m	/^:- pred set_ctree234.do_intersect(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_intersect\>/;'q;"	kind:pred	file:
do_intersect	set_tree234.m	/^:- pred set_tree234.do_intersect(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.do_intersect\>/;'q;"	kind:pred	file:
do_intersect_list	set_ctree234.m	/^:- pred set_ctree234.do_intersect_list(int::in, set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_intersect_list\>/;'q;"	kind:pred	file:
do_is_member	set_ctree234.m	/^:- pred set_ctree234.do_is_member(set_tree234(T)::in, T::in, bool::out)$/;kq|/^\<set_ctree234.do_is_member\>/;'q;"	kind:pred	file:
do_list_to_set	set_ctree234.m	/^:- pred set_ctree234.do_list_to_set(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_list_to_set\>/;'q;"	kind:pred	file:
do_make_temp	io.m	/^:- pred io.do_make_temp(string::in, string::in, string::in,$/;kq|/^\<io.do_make_temp\>/;'q;"	kind:pred	file:
do_merge	pqueue.m	/^:- pred do_merge(pqueue(K, V)::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<do_merge\>/;'q;"	kind:pred	file:
do_not_allow	deconstruct.m	/^    --->    do_not_allow$/;kq|-;/\<do_not_allow\>/;'q;"	kind:cons
do_not_allow	deconstruct.m	/^:- inst do_not_allow ---> do_not_allow.$/;kq|-;/\<do_not_allow\>/;'q;"	kind:inst
do_not_allow_or_include_details_cc	deconstruct.m	/^:- inst do_not_allow_or_include_details_cc$/;kq|-;/\<do_not_allow_or_include_details_cc\>/;'q;"	kind:inst
do_nothing	benchmarking.m	/^:- impure pred do_nothing(T::in) is det.$/;kq|/^\<do_nothing\>/;'q;"	kind:pred	file:
do_one_member	set_ctree234.m	/^:- pred set_ctree234.do_one_member(set_tree234(T)::in, T::out) is nondet.$/;kq|/^\<set_ctree234.do_one_member\>/;'q;"	kind:pred	file:
do_open_binary	io.m	/^:- pred io.do_open_binary(string::in, string::in, int::out, int::out,$/;kq|/^\<io.do_open_binary\>/;'q;"	kind:pred	file:
do_open_text	io.m	/^:- pred io.do_open_text(string::in, string::in, int::out, int::out,$/;kq|/^\<io.do_open_text\>/;'q;"	kind:pred	file:
do_power_union	set_ctree234.m	/^:- pred set_ctree234.do_power_union(set_tree234(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.do_power_union\>/;'q;"	kind:pred	file:
do_read_bitmap	io.m	/^:- pred io.do_read_bitmap(io.stream::in, byte_index::in, num_bytes::in,$/;kq|/^\<io.do_read_bitmap\>/;'q;"	kind:pred	file:
do_refill_read_buffer	bit_buffer.read.m	/^:- pred do_refill_read_buffer(stream.res(Error)::out,$/;kq|/^\<do_refill_read_buffer\>/;'q;"	kind:pred	file:
do_remove	set_ctree234.m	/^:- pred set_ctree234.do_remove(T::in, set_tree234(T)::in, set_tree234(T)::out,$/;kq|/^\<set_ctree234.do_remove\>/;'q;"	kind:pred	file:
do_remove_least	set_ctree234.m	/^:- pred set_ctree234.do_remove_least(set_tree234(T)::in, T::out,$/;kq|/^\<set_ctree234.do_remove_least\>/;'q;"	kind:pred	file:
do_remove_list	set_ctree234.m	/^:- pred set_ctree234.do_remove_list(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_remove_list\>/;'q;"	kind:pred	file:
do_set_buffer_error	bit_buffer.read.m	/^:- pred do_set_buffer_error(stream.res(Error)::in,$/;kq|/^\<do_set_buffer_error\>/;'q;"	kind:pred	file:
do_sorted_list_to_set	set_ctree234.m	/^:- pred set_ctree234.do_sorted_list_to_set(list(T)::in, list(T)::out,$/;kq|/^\<set_ctree234.do_sorted_list_to_set\>/;'q;"	kind:pred	file:
do_subset	set_ctree234.m	/^:- pred set_ctree234.do_subset(set_tree234(T)::in, set_tree234(T)::in)$/;kq|/^\<set_ctree234.do_subset\>/;'q;"	kind:pred	file:
do_to_sorted_list	set_ctree234.m	/^:- pred set_ctree234.do_to_sorted_list(set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_to_sorted_list\>/;'q;"	kind:pred	file:
do_union	set_ctree234.m	/^:- pred set_ctree234.do_union(set_tree234(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_union\>/;'q;"	kind:pred	file:
do_union	set_tree234.m	/^:- pred set_tree234.do_union(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.do_union\>/;'q;"	kind:pred	file:
do_union_list	set_ctree234.m	/^:- pred set_ctree234.do_union_list(list(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.do_union_list\>/;'q;"	kind:pred	file:
do_verify_depths	set_ctree234.m	/^:- pred do_verify_depths(set_tree234(T)::in, int::in,$/;kq|/^\<do_verify_depths\>/;'q;"	kind:pred	file:
do_while	solutions.m	/^:- pred do_while(pred(T), pred(T, bool, T2, T2), T2, T2).$/;kq|/^\<do_while\>/;'q;"	kind:pred
do_write_bitmap	io.m	/^:- pred io.do_write_bitmap(io.stream, bitmap, int, int, io, io).$/;kq|/^\<io.do_write_bitmap\>/;'q;"	kind:pred	file:
do_write_univ	stream.string_writer.m	/^:- pred do_write_univ(Stream, deconstruct.noncanon_handling, univ,$/;kq|/^\<do_write_univ\>/;'q;"	kind:pred	file:
do_write_univ_prio	stream.string_writer.m	/^:- pred do_write_univ_prio(Stream, deconstruct.noncanon_handling, univ,$/;kq|/^\<do_write_univ_prio\>/;'q;"	kind:pred	file:
doc	pprint.m	/^    func doc(int, T) = doc$/;kq|-;/\<doc\>/;'q;"	kind:tcm
doc	pprint.m	/^:- func doc `<>` doc        = doc.$/;kq|/^\<doc\>/;'q;"	kind:func
doc	pprint.m	/^:- func doc `<\/>` doc       = doc.$/;kq|/^\<doc\>/;'q;"	kind:func
doc	pprint.m	/^:- func doc(T) = doc <= (doc(T)).$/;kq|/^\<doc\>/;'q;"	kind:func
doc	pprint.m	/^:- instance doc(char)      where [ doc(_, Char)   = poly(c(Char))  ].$/;kq|-;/\<doc\>/;'q;"	kind:tci	file:
doc	pprint.m	/^:- instance doc(doc)       where [ doc(_, Doc)    = Doc            ].$/;kq|-;/\<doc\>/;'q;"	kind:tci	file:
doc	pprint.m	/^:- instance doc(float)     where [ doc(_, Float)  = poly(f(Float)) ].$/;kq|-;/\<doc\>/;'q;"	kind:tci	file:
doc	pprint.m	/^:- instance doc(int)       where [ doc(_, Int)    = poly(i(Int))   ].$/;kq|-;/\<doc\>/;'q;"	kind:tci	file:
doc	pprint.m	/^:- instance doc(string)    where [ doc(_, String) = text(String)   ].$/;kq|-;/\<doc\>/;'q;"	kind:tci	file:
doc	pprint.m	/^:- type doc$/;kq|-;/\<doc\>/;'q;"	kind:type	file:
doc	pprint.m	/^:- typeclass doc(T) where [$/;kq|-;/\<doc\>/;'q;"	kind:tc
doc	pretty_printer.m	/^:- type doc$/;kq|-;/\<doc\>/;'q;"	kind:type
docs	pretty_printer.m	/^    ;       docs(docs)$/;kq|-;/\<docs\>/;'q;"	kind:cons
docs	pretty_printer.m	/^:- type docs == list(doc).$/;kq|-;/\<docs\>/;'q;"	kind:type
doctype	term_to_xml.m	/^:- type doctype$/;kq|-;/\<doctype\>/;'q;"	kind:type
domain_error	math.m	/^:- type domain_error ---> domain_error(string).$/;kq|-;/\<domain_error\>/;'q;"	kind:cons
domain_error	math.m	/^:- type domain_error ---> domain_error(string).$/;kq|-;/\<domain_error\>/;'q;"	kind:type
dotnet_path_name_is_absolute	dir.m	/^:- pred dir.dotnet_path_name_is_absolute(string::in) is semidet.$/;kq|/^\<dir.dotnet_path_name_is_absolute\>/;'q;"	kind:pred	file:
dotnet_path_name_is_absolute_2	dir.m	/^:- pred dir.dotnet_path_name_is_absolute_2(string::in) is semidet.$/;kq|/^\<dir.dotnet_path_name_is_absolute_2\>/;'q;"	kind:pred	file:
double_rot_l	set_bbbtree.m	/^:- pred set_bbbtree.double_rot_l(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.double_rot_l\>/;'q;"	kind:pred	file:
double_rot_r	set_bbbtree.m	/^:- pred set_bbbtree.double_rot_r(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.double_rot_r\>/;'q;"	kind:pred	file:
drop	list.m	/^:- pred list.drop(int::in, list(T)::in, list(T)::out) is semidet.$/;kq|/^\<list.drop\>/;'q;"	kind:pred
dst	time.m	/^:- type dst$/;kq|-;/\<dst\>/;'q;"	kind:type
dt_day	calendar.m	/^                dt_day              :: int,$/;kq|-;/\<dt_day\>/;'q;"	kind:fld	file:
dt_hour	calendar.m	/^                dt_hour             :: int,$/;kq|-;/\<dt_hour\>/;'q;"	kind:fld	file:
dt_microsecond	calendar.m	/^                dt_microsecond      :: int$/;kq|-;/\<dt_microsecond\>/;'q;"	kind:fld	file:
dt_minute	calendar.m	/^                dt_minute           :: int,$/;kq|-;/\<dt_minute\>/;'q;"	kind:fld	file:
dt_month	calendar.m	/^                dt_month            :: int,$/;kq|-;/\<dt_month\>/;'q;"	kind:fld	file:
dt_second	calendar.m	/^                dt_second           :: int,$/;kq|-;/\<dt_second\>/;'q;"	kind:fld	file:
dt_year	calendar.m	/^                dt_year             :: int,$/;kq|-;/\<dt_year\>/;'q;"	kind:fld	file:
dtd_allowed_functors_regex	term_to_xml.m	/^:- func dtd_allowed_functors_regex(element_pred::in(element_pred),$/;kq|/^\<dtd_allowed_functors_regex\>/;'q;"	kind:func	file:
dtd_generation_result	term_to_xml.m	/^:- type dtd_generation_result$/;kq|-;/\<dtd_generation_result\>/;'q;"	kind:type
du	rtti_implementation.m	/^:- inst du == bound(tcr_du ; tcr_du_usereq ; tcr_reserved_addr ;$/;kq|-;/\<du\>/;'q;"	kind:inst	file:
du_arg_info	erlang_rtti_implementation.m	/^    --->    du_arg_info($/;kq|-;/\<du_arg_info\>/;'q;"	kind:cons	file:
du_arg_info	erlang_rtti_implementation.m	/^:- type du_arg_info$/;kq|-;/\<du_arg_info\>/;'q;"	kind:type	file:
du_arg_name	erlang_rtti_implementation.m	/^                du_arg_name         :: maybe(list(char)),$/;kq|-;/\<du_arg_name\>/;'q;"	kind:fld	file:
du_arg_type	erlang_rtti_implementation.m	/^                du_arg_type         :: maybe_pseudo_type_info$/;kq|-;/\<du_arg_type\>/;'q;"	kind:fld	file:
du_enum_num_node_allocs	table_statistics.m	/^                du_enum_num_node_allocs             :: int,$/;kq|-;/\<du_enum_num_node_allocs\>/;'q;"	kind:fld
du_enum_num_node_bytes	table_statistics.m	/^                du_enum_num_node_bytes              :: int,$/;kq|-;/\<du_enum_num_node_bytes\>/;'q;"	kind:fld
du_functor	term_to_xml.m	/^    --->    du_functor($/;kq|-;/\<du_functor\>/;'q;"	kind:cons
du_functor_arg_type_contains_var	rtti_implementation.m	/^:- func du_functor_arg_type_contains_var(du_functor_desc) = int.$/;kq|/^\<du_functor_arg_type_contains_var\>/;'q;"	kind:func	file:
du_functor_arg_types	rtti_implementation.m	/^:- func du_functor_arg_types(du_functor_desc) = arg_types.$/;kq|/^\<du_functor_arg_types\>/;'q;"	kind:func	file:
du_functor_arity	rtti_implementation.m	/^:- func du_functor_arity(du_functor_desc) = int.$/;kq|/^\<du_functor_arity\>/;'q;"	kind:func	file:
du_functor_desc	rtti_implementation.m	/^:- func du_functor_desc(type_ctor_rep, int, type_functors) = du_functor_desc.$/;kq|/^\<du_functor_desc\>/;'q;"	kind:func	file:
du_functor_desc	rtti_implementation.m	/^:- type du_functor_desc ---> du_functor_desc(c_pointer).$/;kq|-;/\<du_functor_desc\>/;'q;"	kind:cons	file:
du_functor_desc	rtti_implementation.m	/^:- type du_functor_desc ---> du_functor_desc(c_pointer).$/;kq|-;/\<du_functor_desc\>/;'q;"	kind:type	file:
du_functor_name	rtti_implementation.m	/^:- func du_functor_name(du_functor_desc) = string.$/;kq|/^\<du_functor_name\>/;'q;"	kind:func	file:
du_functor_ordinal	rtti_implementation.m	/^:- func du_functor_ordinal(du_functor_desc) = int.$/;kq|/^\<du_functor_ordinal\>/;'q;"	kind:func	file:
du_functor_primary	rtti_implementation.m	/^:- func du_functor_primary(du_functor_desc) = int.$/;kq|/^\<du_functor_primary\>/;'q;"	kind:func	file:
du_functor_secondary	rtti_implementation.m	/^:- func du_functor_secondary(du_functor_desc) = int.$/;kq|/^\<du_functor_secondary\>/;'q;"	kind:func	file:
du_functor_sectag_locn	rtti_implementation.m	/^:- func du_functor_sectag_locn(du_functor_desc) = sectag_locn.$/;kq|/^\<du_functor_sectag_locn\>/;'q;"	kind:func	file:
du_hash_num_link_chunk_allocs	table_statistics.m	/^                du_hash_num_link_chunk_allocs       :: int,$/;kq|-;/\<du_hash_num_link_chunk_allocs\>/;'q;"	kind:fld
du_hash_num_link_chunk_bytes	table_statistics.m	/^                du_hash_num_link_chunk_bytes        :: int,$/;kq|-;/\<du_hash_num_link_chunk_bytes\>/;'q;"	kind:fld
du_hash_num_num_key_compares_dupl	table_statistics.m	/^                du_hash_num_num_key_compares_dupl   :: int,$/;kq|-;/\<du_hash_num_num_key_compares_dupl\>/;'q;"	kind:fld
du_hash_num_num_key_compares_not_dupl	table_statistics.m	/^                du_hash_num_num_key_compares_not_dupl :: int,$/;kq|-;/\<du_hash_num_num_key_compares_not_dupl\>/;'q;"	kind:fld
du_hash_num_resizes	table_statistics.m	/^                du_hash_num_resizes                 :: int,$/;kq|-;/\<du_hash_num_resizes\>/;'q;"	kind:fld
du_hash_num_table_allocs	table_statistics.m	/^                du_hash_num_table_allocs            :: int,$/;kq|-;/\<du_hash_num_table_allocs\>/;'q;"	kind:fld
du_hash_num_table_bytes	table_statistics.m	/^                du_hash_num_table_bytes             :: int,$/;kq|-;/\<du_hash_num_table_bytes\>/;'q;"	kind:fld
du_hash_resizes_num_new_entries	table_statistics.m	/^                du_hash_resizes_num_new_entries     :: int$/;kq|-;/\<du_hash_resizes_num_new_entries\>/;'q;"	kind:fld
du_hash_resizes_num_old_entries	table_statistics.m	/^                du_hash_resizes_num_old_entries     :: int,$/;kq|-;/\<du_hash_resizes_num_old_entries\>/;'q;"	kind:fld
du_num_arg_lookups	table_statistics.m	/^                du_num_arg_lookups                  :: int,$/;kq|-;/\<du_num_arg_lookups\>/;'q;"	kind:fld
du_num_exist_lookups	table_statistics.m	/^                du_num_exist_lookups                :: int,$/;kq|-;/\<du_num_exist_lookups\>/;'q;"	kind:fld
du_num_node_allocs	table_statistics.m	/^                du_num_node_allocs                  :: int,$/;kq|-;/\<du_num_node_allocs\>/;'q;"	kind:fld
du_num_node_bytes	table_statistics.m	/^                du_num_node_bytes                   :: int,$/;kq|-;/\<du_num_node_bytes\>/;'q;"	kind:fld
du_sectag_alternatives	rtti_implementation.m	/^:- func du_sectag_alternatives(int, ptag_entry) = du_functor_desc.$/;kq|/^\<du_sectag_alternatives\>/;'q;"	kind:func	file:
du_sectag_alternatives	rtti_implementation.m	/^:- type du_sectag_alternatives ---> du_sectag_alternatives(c_pointer).$/;kq|-;/\<du_sectag_alternatives\>/;'q;"	kind:cons	file:
du_sectag_alternatives	rtti_implementation.m	/^:- type du_sectag_alternatives ---> du_sectag_alternatives(c_pointer).$/;kq|-;/\<du_sectag_alternatives\>/;'q;"	kind:type	file:
dummy_univ	deconstruct.m	/^:- func dummy_univ = univ.$/;kq|/^\<dummy_univ\>/;'q;"	kind:func	file:
dump_trace_counts_to	benchmarking.m	/^:- pred dump_trace_counts_to(string::in, int::out, io::di, io::uo) is det.$/;kq|/^\<dump_trace_counts_to\>/;'q;"	kind:pred	file:
duplex	stream.m	/^:- typeclass stream.duplex(Stream, State)$/;kq|-;/\<duplex\>/;'q;"	kind:tc
duplicate	list.m	/^:- func list.duplicate(int, T) = list(T).$/;kq|/^\<list.duplicate\>/;'q;"	kind:func
duplicate	list.m	/^:- pred list.duplicate(int::in, T::in, list(T)::out) is det.$/;kq|/^\<list.duplicate\>/;'q;"	kind:pred
duplicate	thread.channel.m	/^:- pred channel.duplicate(channel(T)::in, channel(T)::out, io::di, io::uo)$/;kq|/^\<channel.duplicate\>/;'q;"	kind:pred
duplicate_2	list.m	/^:- func list.duplicate_2(int, T, list(T)) = list(T).$/;kq|/^\<list.duplicate_2\>/;'q;"	kind:func	file:
duplicate_char	string.m	/^:- func string.duplicate_char(char::in, int::in) = (string::uo) is det.$/;kq|/^\<string.duplicate_char\>/;'q;"	kind:func
duplicate_char	string.m	/^:- pred string.duplicate_char(char::in, int::in, string::uo) is det.$/;kq|/^\<string.duplicate_char\>/;'q;"	kind:pred
duplicate_element	term_to_xml.m	/^                duplicate_element   :: string,$/;kq|-;/\<duplicate_element\>/;'q;"	kind:fld
duplicate_elements	term_to_xml.m	/^    ;       duplicate_elements($/;kq|-;/\<duplicate_elements\>/;'q;"	kind:cons
duplicate_types	term_to_xml.m	/^                duplicate_types     :: list(type_desc)$/;kq|-;/\<duplicate_types\>/;'q;"	kind:fld
dur_days	calendar.m	/^                dur_days            :: int,$/;kq|-;/\<dur_days\>/;'q;"	kind:fld	file:
dur_microseconds	calendar.m	/^                dur_microseconds    :: int$/;kq|-;/\<dur_microseconds\>/;'q;"	kind:fld	file:
dur_months	calendar.m	/^                dur_months          :: int,$/;kq|-;/\<dur_months\>/;'q;"	kind:fld	file:
dur_seconds	calendar.m	/^                dur_seconds         :: int,$/;kq|-;/\<dur_seconds\>/;'q;"	kind:fld	file:
duration	calendar.m	/^    --->    duration($/;kq|-;/\<duration\>/;'q;"	kind:cons	file:
duration	calendar.m	/^:- func duration(date, date) = duration.$/;kq|/^\<duration\>/;'q;"	kind:func
duration	calendar.m	/^:- type duration$/;kq|-;/\<duration\>/;'q;"	kind:type	file:
duration_from_string	calendar.m	/^:- pred duration_from_string(string::in, duration::out) is semidet.$/;kq|/^\<duration_from_string\>/;'q;"	kind:pred
duration_leq	calendar.m	/^:- pred duration_leq(duration::in, duration::in) is semidet.$/;kq|/^\<duration_leq\>/;'q;"	kind:pred
duration_to_string	calendar.m	/^:- func duration_to_string(duration) = string.$/;kq|/^\<duration_to_string\>/;'q;"	kind:func
dynamic_cast	builtin.m	/^:- pred dynamic_cast(T1::in, T2::out) is semidet.$/;kq|/^\<dynamic_cast\>/;'q;"	kind:pred
dynamic_cast_to_array	array.m	/^:- some [T2] pred dynamic_cast_to_array(T1::in, array(T2)::out) is semidet.$/;kq|/^\<dynamic_cast_to_array\>/;'q;"	kind:pred
dynamic_cast_to_list	pprint.m	/^:- some [T2] pred dynamic_cast_to_list(T1::in, list(T2)::out) is semidet.$/;kq|/^\<dynamic_cast_to_list\>/;'q;"	kind:pred	file:
dynamic_cast_to_map	pprint.m	/^:- some [T2, T3] pred dynamic_cast_to_map(T1::in, map(T2, T3)::out) is semidet.$/;kq|/^\<dynamic_cast_to_map\>/;'q;"	kind:pred	file:
dynamic_cast_to_map_pair	pprint.m	/^:- some [T2, T3] pred dynamic_cast_to_map_pair(T1::in, map_pair(T2, T3)::out)$/;kq|/^\<dynamic_cast_to_map_pair\>/;'q;"	kind:pred	file:
dynamic_cast_to_robdd	pprint.m	/^:- some [T2] pred dynamic_cast_to_robdd(T1, robdd(T2)).$/;kq|/^\<dynamic_cast_to_robdd\>/;'q;"	kind:pred	file:
dynamic_cast_to_sparse_bitset_of_int	pprint.m	/^:- pred dynamic_cast_to_sparse_bitset_of_int(T1::in, sparse_bitset(int)::out)$/;kq|/^\<dynamic_cast_to_sparse_bitset_of_int\>/;'q;"	kind:pred	file:
dynamic_cast_to_sparse_bitset_of_var	pprint.m	/^:- some [T2] pred dynamic_cast_to_sparse_bitset_of_var(T1::in,$/;kq|/^\<dynamic_cast_to_sparse_bitset_of_var\>/;'q;"	kind:pred	file:
dynamic_cast_to_tuple	pprint.m	/^:- pred dynamic_cast_to_tuple(T::in, T::out) is semidet.$/;kq|/^\<dynamic_cast_to_tuple\>/;'q;"	kind:pred	file:
dynamic_cast_to_var	pprint.m	/^:- some [T2] pred dynamic_cast_to_var(T1::in, var(T2)::out) is semidet.$/;kq|/^\<dynamic_cast_to_var\>/;'q;"	kind:pred	file:
dynamic_cast_to_version_array	pprint.m	/^:- some [T2] pred dynamic_cast_to_version_array(T1::in,$/;kq|/^\<dynamic_cast_to_version_array\>/;'q;"	kind:pred	file:
e	math.m	/^:- func math.e = float.$/;kq|/^\<math.e\>/;'q;"	kind:func
e	string.m	/^    ;       e(float)$/;kq|-;/\<e\>/;'q;"	kind:cons	file:
edu_arg_infos	erlang_rtti_implementation.m	/^                edu_arg_infos       :: list(du_arg_info),$/;kq|-;/\<edu_arg_infos\>/;'q;"	kind:fld	file:
edu_exist_info	erlang_rtti_implementation.m	/^                edu_exist_info      :: maybe(exist_info)$/;kq|-;/\<edu_exist_info\>/;'q;"	kind:fld	file:
edu_lex	erlang_rtti_implementation.m	/^                edu_lex             :: int,$/;kq|-;/\<edu_lex\>/;'q;"	kind:fld	file:
edu_name	erlang_rtti_implementation.m	/^                edu_name            :: list(char),$/;kq|-;/\<edu_name\>/;'q;"	kind:fld	file:
edu_ordinal	erlang_rtti_implementation.m	/^                edu_ordinal         :: int,$/;kq|-;/\<edu_ordinal\>/;'q;"	kind:fld	file:
edu_orig_arity	erlang_rtti_implementation.m	/^                edu_orig_arity      :: int,$/;kq|-;/\<edu_orig_arity\>/;'q;"	kind:fld	file:
edu_rep	erlang_rtti_implementation.m	/^                edu_rep             :: erlang_atom,$/;kq|-;/\<edu_rep\>/;'q;"	kind:fld	file:
elem	array.m	/^:- func array.elem(int, array(T)) = T.$/;kq|/^\<array.elem\>/;'q;"	kind:func
elem	bt_array.m	/^:- func bt_array.elem(int, bt_array(T)) = T.$/;kq|/^\<bt_array.elem\>/;'q;"	kind:func
elem	hash_table.m	/^:- func elem(K, hash_table(K, V)) = V.$/;kq|/^\<elem\>/;'q;"	kind:func
elem	map.m	/^:- func map.elem(K, map(K, V)) = V is semidet.$/;kq|/^\<map.elem\>/;'q;"	kind:func
elem	term_to_xml.m	/^    --->    elem($/;kq|-;/\<elem\>/;'q;"	kind:cons
element_mapping	term_to_xml.m	/^:- inst element_mapping$/;kq|-;/\<element_mapping\>/;'q;"	kind:inst
element_mapping	term_to_xml.m	/^:- type element_mapping$/;kq|-;/\<element_mapping\>/;'q;"	kind:type
element_name	term_to_xml.m	/^                element_name    :: string,$/;kq|-;/\<element_name\>/;'q;"	kind:fld
element_pred	term_to_xml.m	/^:- inst element_pred == (pred(in, in, out, out) is det).$/;kq|-;/\<element_pred\>/;'q;"	kind:inst
element_pred	term_to_xml.m	/^:- type element_pred == (pred(type_desc, maybe_functor_info, string,$/;kq|-;/\<element_pred\>/;'q;"	kind:type
ellipsis	pprint.m	/^:- func ellipsis            = doc.      % "...".$/;kq|/^\<ellipsis\>/;'q;"	kind:func
ellipsis	pretty_printer.m	/^:- func ellipsis = doc.$/;kq|/^\<ellipsis\>/;'q;"	kind:func	file:
embed_dtd	term_to_xml.m	/^    --->    embed_dtd$/;kq|-;/\<embed_dtd\>/;'q;"	kind:cons
empty	cord.m	/^:- func empty = cord(T).$/;kq|/^\<empty\>/;'q;"	kind:func
empty	fat_sparse_bitset.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	fat_sparse_bitset.m	/^:- pred empty(fat_sparse_bitset(T)).$/;kq|/^\<empty\>/;'q;"	kind:pred
empty	pqueue.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	rbtree.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	rtree.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	set.m	/^:- pred set.empty(set(T)::in) is semidet.$/;kq|/^\<set.empty\>/;'q;"	kind:pred
empty	set_bbbtree.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	set_bbbtree.m	/^:- pred set_bbbtree.empty(set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.empty\>/;'q;"	kind:pred
empty	set_ctree234.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	set_ctree234.m	/^:- pred set_ctree234.empty(set_ctree234(_T)::in) is semidet.$/;kq|/^\<set_ctree234.empty\>/;'q;"	kind:pred
empty	set_ordlist.m	/^:- pred set_ordlist.empty(set_ordlist(_T)::in) is semidet.$/;kq|/^\<set_ordlist.empty\>/;'q;"	kind:pred
empty	set_tree234.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	set_tree234.m	/^:- pred set_tree234.empty(set_tree234(_T)::in) is semidet.$/;kq|/^\<set_tree234.empty\>/;'q;"	kind:pred
empty	set_unordlist.m	/^:- pred set_unordlist.empty(set_unordlist(_T)::in) is semidet.$/;kq|/^\<set_unordlist.empty\>/;'q;"	kind:pred
empty	sparse_bitset.m	/^:- pred empty(sparse_bitset(T)).$/;kq|/^\<empty\>/;'q;"	kind:pred
empty	tree234.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons
empty	tree234.m	/^    --->    empty$/;kq|-;/\<empty\>/;'q;"	kind:cons	file:
empty	tree_bitset.m	/^:- pred empty(tree_bitset(T)).$/;kq|/^\<empty\>/;'q;"	kind:pred
empty	version_array.m	/^:- func empty = version_array(T).$/;kq|/^\<empty\>/;'q;"	kind:func
empty_cord	cord.m	/^    --->    empty_cord$/;kq|-;/\<empty_cord\>/;'q;"	kind:cons	file:
empty_list	list.m	/^:- func empty_list = list(T).$/;kq|/^\<empty_list\>/;'q;"	kind:func	file:
empty_vars_set	robdd.m	/^:- func empty_vars_set = vars(T).$/;kq|/^\<empty_vars_set\>/;'q;"	kind:func
encode_escaped_char	term_io.m	/^:- pred encode_escaped_char(char, string).$/;kq|/^\<encode_escaped_char\>/;'q;"	kind:pred
end	io.m	/^    ;       end.$/;kq|-;/\<end\>/;'q;"	kind:cons
end	lexer.m	/^    ;       end                 % '.'$/;kq|-;/\<end\>/;'q;"	kind:cons
end	stream.m	/^    ;       end.$/;kq|-;/\<end\>/;'q;"	kind:cons
end_all_soln_neg_context_more	solutions.m	/^:- impure pred end_all_soln_neg_context_more is det.$/;kq|/^\<end_all_soln_neg_context_more\>/;'q;"	kind:pred	file:
end_all_soln_neg_context_no_more	solutions.m	/^:- impure pred end_all_soln_neg_context_no_more is det.$/;kq|/^\<end_all_soln_neg_context_no_more\>/;'q;"	kind:pred	file:
ends_with_directory_separator	dir.m	/^:- pred dir.ends_with_directory_separator(string::in, int::in, int::out)$/;kq|/^\<dir.ends_with_directory_separator\>/;'q;"	kind:pred	file:
ensure_corresponding_equivalences	eqvclass.m	/^:- func eqvclass.ensure_corresponding_equivalences(list(T), list(T),$/;kq|/^\<eqvclass.ensure_corresponding_equivalences\>/;'q;"	kind:func
ensure_corresponding_equivalences	eqvclass.m	/^:- pred eqvclass.ensure_corresponding_equivalences(list(T)::in, list(T)::in,$/;kq|/^\<eqvclass.ensure_corresponding_equivalences\>/;'q;"	kind:pred
ensure_element	eqvclass.m	/^:- func eqvclass.ensure_element(eqvclass(T), T) = eqvclass(T).$/;kq|/^\<eqvclass.ensure_element\>/;'q;"	kind:func
ensure_element	eqvclass.m	/^:- pred eqvclass.ensure_element(T::in, eqvclass(T)::in, eqvclass(T)::out)$/;kq|/^\<eqvclass.ensure_element\>/;'q;"	kind:pred
ensure_element_partition_id	eqvclass.m	/^:- pred eqvclass.ensure_element_partition_id(T::in, partition_id::out,$/;kq|/^\<eqvclass.ensure_element_partition_id\>/;'q;"	kind:pred
ensure_equivalence	eqvclass.m	/^:- func eqvclass.ensure_equivalence(eqvclass(T), T, T) = eqvclass(T).$/;kq|/^\<eqvclass.ensure_equivalence\>/;'q;"	kind:func
ensure_equivalence	eqvclass.m	/^:- pred eqvclass.ensure_equivalence(T::in, T::in,$/;kq|/^\<eqvclass.ensure_equivalence\>/;'q;"	kind:pred
ensure_unique_names	varset.m	/^:- func varset.ensure_unique_names(list(var(T)), string, varset(T))$/;kq|/^\<varset.ensure_unique_names\>/;'q;"	kind:func
ensure_unique_names	varset.m	/^:- pred varset.ensure_unique_names(list(var(T))::in,$/;kq|/^\<varset.ensure_unique_names\>/;'q;"	kind:pred
ensure_unique_names_2	varset.m	/^:- pred varset.ensure_unique_names_2(list(var(T))::in, string::in,$/;kq|/^\<varset.ensure_unique_names_2\>/;'q;"	kind:pred	file:
entailment_result	robdd.m	/^:- type entailment_result(T)$/;kq|-;/\<entailment_result\>/;'q;"	kind:type
entity	term_to_xml.m	/^    ;       entity(string)$/;kq|-;/\<entity\>/;'q;"	kind:cons
enum	bool.m	/^:- instance enum(bool) where [$/;kq|-;/\<enum\>/;'q;"	kind:tci	file:
enum	char.m	/^:- instance enum(character) where [$/;kq|-;/\<enum\>/;'q;"	kind:tci	file:
enum	digraph.m	/^:- instance enum(digraph_key(T)) where [$/;kq|-;/\<enum\>/;'q;"	kind:tci	file:
enum	enum.m	/^:- typeclass enum(T) where [$/;kq|-;/\<enum\>/;'q;"	kind:tc
enum	int.m	/^:- instance enum(int) where [$/;kq|-;/\<enum\>/;'q;"	kind:tci	file:
enum	rtti_implementation.m	/^:- inst enum == bound(tcr_enum ; tcr_enum_usereq ; tcr_dummy).$/;kq|-;/\<enum\>/;'q;"	kind:inst	file:
enum	term.m	/^:- instance enum(var(_)) where [$/;kq|-;/\<enum\>/;'q;"	kind:tci	file:
enum.from_int	enum.m	/^	func from_int(int) = T is semidet$/;kq|-;/\<enum.from_int\>/;'q;"	kind:tcm
enum.to_int	enum.m	/^	func to_int(T) = int,$/;kq|-;/\<enum.to_int\>/;'q;"	kind:tcm
enum_functor_desc	rtti_implementation.m	/^:- type enum_functor_desc ---> enum_functor_desc(c_pointer).$/;kq|-;/\<enum_functor_desc\>/;'q;"	kind:cons	file:
enum_functor_desc	rtti_implementation.m	/^:- type enum_functor_desc ---> enum_functor_desc(c_pointer).$/;kq|-;/\<enum_functor_desc\>/;'q;"	kind:type	file:
enum_functor_name	rtti_implementation.m	/^:- func enum_functor_name(enum_functor_desc) = string.$/;kq|/^\<enum_functor_name\>/;'q;"	kind:func	file:
enum_functor_ordinal	rtti_implementation.m	/^:- func enum_functor_ordinal(enum_functor_desc) = int.$/;kq|/^\<enum_functor_ordinal\>/;'q;"	kind:func	file:
enum_num_node_allocs	table_statistics.m	/^                enum_num_node_allocs                :: int,$/;kq|-;/\<enum_num_node_allocs\>/;'q;"	kind:fld
enum_num_node_bytes	table_statistics.m	/^                enum_num_node_bytes                 :: int$/;kq|-;/\<enum_num_node_bytes\>/;'q;"	kind:fld
enum_to_index	tree_bitset.m	/^:- func enum_to_index(T) = int <= enum(T).$/;kq|/^\<enum_to_index\>/;'q;"	kind:func	file:
eof	io.m	/^    ;       eof$/;kq|-;/\<eof\>/;'q;"	kind:cons
eof	io.m	/^    ;       eof$/;kq|-;/\<eof\>/;'q;"	kind:cons
eof	io.m	/^    ;       eof$/;kq|-;/\<eof\>/;'q;"	kind:cons
eof	lexer.m	/^    ;       eof                 % end-of-file$/;kq|-;/\<eof\>/;'q;"	kind:cons
eof	parsing_utils.m	/^:- pred eof(src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<eof\>/;'q;"	kind:pred
eof	stream.m	/^    ;       eof$/;kq|-;/\<eof\>/;'q;"	kind:cons
eof	stream.m	/^    ;       eof$/;kq|-;/\<eof\>/;'q;"	kind:cons
eof	term_io.m	/^    --->    eof$/;kq|-;/\<eof\>/;'q;"	kind:cons
epsilon	float.m	/^:- func float.epsilon = float.$/;kq|/^\<float.epsilon\>/;'q;"	kind:func
eq_vars	robdd.m	/^:- func eq_vars(var(T), var(T)) = robdd(T).$/;kq|/^\<eq_vars\>/;'q;"	kind:func
eq_version_array	version_array.m	/^:- pred eq_version_array(version_array(T)::in, version_array(T)::in)$/;kq|/^\<eq_version_array\>/;'q;"	kind:pred	file:
eq_version_array_2	version_array.m	/^:- pred eq_version_array_2(int::in,$/;kq|/^\<eq_version_array_2\>/;'q;"	kind:pred	file:
equal	bimap.m	/^:- pred bimap.equal(bimap(K, V)::in, bimap(K, V)::in) is semidet.$/;kq|/^\<bimap.equal\>/;'q;"	kind:pred
equal	cord.m	/^:- pred equal(cord(T)::in, cord(T)::in) is semidet.$/;kq|/^\<equal\>/;'q;"	kind:pred
equal	fat_sparse_bitset.m	/^:- pred equal(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<equal\>/;'q;"	kind:pred
equal	map.m	/^:- pred map.equal(map(K, V)::in, map(K, V)::in) is semidet.$/;kq|/^\<map.equal\>/;'q;"	kind:pred
equal	queue.m	/^:- pred queue.equal(queue(T)::in, queue(T)::in) is semidet.$/;kq|/^\<queue.equal\>/;'q;"	kind:pred
equal	set.m	/^:- pred set.equal(set(T)::in, set(T)::in) is semidet.$/;kq|/^\<set.equal\>/;'q;"	kind:pred
equal	set_bbbtree.m	/^:- pred set_bbbtree.equal(set_bbbtree(T)::in, set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.equal\>/;'q;"	kind:pred
equal	set_ctree234.m	/^:- pred set_ctree234.equal(set_ctree234(T)::in, set_ctree234(T)::in)$/;kq|/^\<set_ctree234.equal\>/;'q;"	kind:pred
equal	set_ordlist.m	/^:- pred set_ordlist.equal(set_ordlist(T)::in, set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.equal\>/;'q;"	kind:pred
equal	set_tree234.m	/^:- pred set_tree234.equal(set_tree234(T)::in, set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.equal\>/;'q;"	kind:pred
equal	set_unordlist.m	/^:- pred set_unordlist.equal(set_unordlist(T)::in, set_unordlist(T)::in)$/;kq|/^\<set_unordlist.equal\>/;'q;"	kind:pred
equal	sparse_bitset.m	/^:- pred equal(sparse_bitset(T)::in, sparse_bitset(T)::in) is semidet.$/;kq|/^\<equal\>/;'q;"	kind:pred
equal	test_bitset.m	/^:- pred equal(test_bitset(T)::in, test_bitset(T)::in) is semidet <= enum(T).$/;kq|/^\<equal\>/;'q;"	kind:pred
equal	tree234.m	/^:- pred tree234.equal(tree234(K, V)::in, tree234(K, V)::in) is semidet.$/;kq|/^\<tree234.equal\>/;'q;"	kind:pred
equal	tree_bitset.m	/^:- pred equal(tree_bitset(T)::in, tree_bitset(T)::in) is semidet <= enum(T).$/;kq|/^\<equal\>/;'q;"	kind:pred
equal	version_hash_table.m	/^:- pred equal(version_hash_table(K, V)::in, version_hash_table(K, V)::in)$/;kq|/^\<equal\>/;'q;"	kind:pred
equal_elements	array.m	/^:- pred array.equal_elements(int, int, array(T), array(T)).$/;kq|/^\<array.equal_elements\>/;'q;"	kind:pred	file:
equal_values	lazy.m	/^:- pred equal_values(lazy(T)::in, lazy(T)::in) is semidet.$/;kq|/^\<equal_values\>/;'q;"	kind:pred
equiv_vars	robdd.m	/^    --->    equiv_vars($/;kq|-;/\<equiv_vars\>/;'q;"	kind:cons
equiv_vars	robdd.m	/^:- type equiv_vars(T)$/;kq|-;/\<equiv_vars\>/;'q;"	kind:type
equivalent_result	robdd.m	/^:- type equivalent_result(T) == entailment_result(equiv_vars(T)).$/;kq|-;/\<equivalent_result\>/;'q;"	kind:type
equivalent_vars	robdd.m	/^:- func equivalent_vars(robdd(T)) = equivalent_result(T).$/;kq|/^\<equivalent_vars\>/;'q;"	kind:func
equivalent_vars_2	robdd.m	/^:- func equivalent_vars_2(robdd(T)) =$/;kq|/^\<equivalent_vars_2\>/;'q;"	kind:func	file:
eqvclass	eqvclass.m	/^    --->    eqvclass($/;kq|-;/\<eqvclass\>/;'q;"	kind:cons	file:
eqvclass	eqvclass.m	/^:- type eqvclass(T)$/;kq|-;/\<eqvclass\>/;'q;"	kind:type	file:
eqvclass.add_element	eqvclass.m	/^:- pred eqvclass.add_element(T::in, partition_id::out,$/;kq|/^\<eqvclass.add_element\>/;'q;"	kind:pred	file:
eqvclass.add_equivalence	eqvclass.m	/^:- pred eqvclass.add_equivalence(partition_id::in, partition_id::in,$/;kq|/^\<eqvclass.add_equivalence\>/;'q;"	kind:pred	file:
eqvclass.change_partition	eqvclass.m	/^:- pred eqvclass.change_partition(list(T)::in, partition_id::in,$/;kq|/^\<eqvclass.change_partition\>/;'q;"	kind:pred	file:
eqvclass.ensure_element	eqvclass.m	/^:- func eqvclass.ensure_element(eqvclass(T), T) = eqvclass(T).$/;kq|/^\<eqvclass.ensure_element\>/;'q;"	kind:func
eqvclass.ensure_element	eqvclass.m	/^:- pred eqvclass.ensure_element(T::in, eqvclass(T)::in, eqvclass(T)::out)$/;kq|/^\<eqvclass.ensure_element\>/;'q;"	kind:pred
eqvclass.ensure_equivalence	eqvclass.m	/^:- func eqvclass.ensure_equivalence(eqvclass(T), T, T) = eqvclass(T).$/;kq|/^\<eqvclass.ensure_equivalence\>/;'q;"	kind:func
eqvclass.ensure_equivalence	eqvclass.m	/^:- pred eqvclass.ensure_equivalence(T::in, T::in,$/;kq|/^\<eqvclass.ensure_equivalence\>/;'q;"	kind:pred
eqvclass.get_minimum_element	eqvclass.m	/^:- func eqvclass.get_minimum_element(eqvclass(T), T) = T.$/;kq|/^\<eqvclass.get_minimum_element\>/;'q;"	kind:func
eqvclass.id_to_partition	eqvclass.m	/^:- pred eqvclass.id_to_partition(eqvclass(T)::in, partition_id::in,$/;kq|/^\<eqvclass.id_to_partition\>/;'q;"	kind:pred	file:
eqvclass.init	eqvclass.m	/^:- func eqvclass.init = eqvclass(T).$/;kq|/^\<eqvclass.init\>/;'q;"	kind:func
eqvclass.init	eqvclass.m	/^:- pred eqvclass.init(eqvclass(T)::out) is det.$/;kq|/^\<eqvclass.init\>/;'q;"	kind:pred
eqvclass.is_member	eqvclass.m	/^:- pred eqvclass.is_member(eqvclass(T)::in, T::in) is semidet.$/;kq|/^\<eqvclass.is_member\>/;'q;"	kind:pred
eqvclass.keys	eqvclass.m	/^                keys        :: map(T, partition_id)$/;kq|-;/\<eqvclass.keys\>/;'q;"	kind:fld	file:
eqvclass.make_partition	eqvclass.m	/^:- pred eqvclass.make_partition(list(T)::in, partition_id::in,$/;kq|/^\<eqvclass.make_partition\>/;'q;"	kind:pred	file:
eqvclass.new_element	eqvclass.m	/^:- func eqvclass.new_element(eqvclass(T), T) = eqvclass(T).$/;kq|/^\<eqvclass.new_element\>/;'q;"	kind:func
eqvclass.new_element	eqvclass.m	/^:- pred eqvclass.new_element(T::in, eqvclass(T)::in, eqvclass(T)::out) is det.$/;kq|/^\<eqvclass.new_element\>/;'q;"	kind:pred
eqvclass.new_equivalence	eqvclass.m	/^:- func eqvclass.new_equivalence(eqvclass(T), T, T) = eqvclass(T).$/;kq|/^\<eqvclass.new_equivalence\>/;'q;"	kind:func
eqvclass.new_equivalence	eqvclass.m	/^:- pred eqvclass.new_equivalence(T::in, T::in,$/;kq|/^\<eqvclass.new_equivalence\>/;'q;"	kind:pred
eqvclass.next_id	eqvclass.m	/^                next_id     :: counter,$/;kq|-;/\<eqvclass.next_id\>/;'q;"	kind:fld	file:
eqvclass.partition_id	eqvclass.m	/^:- pred eqvclass.partition_id(eqvclass(T)::in, T::in, partition_id::out)$/;kq|/^\<eqvclass.partition_id\>/;'q;"	kind:pred
eqvclass.partition_id	eqvclass.m	/^:- type partition_id    ==  int.$/;kq|-;/\<eqvclass.partition_id\>/;'q;"	kind:type	file:
eqvclass.partition_ids	eqvclass.m	/^:- pred eqvclass.partition_ids(eqvclass(T)::in, list(partition_id)::out)$/;kq|/^\<eqvclass.partition_ids\>/;'q;"	kind:pred	file:
eqvclass.partition_list	eqvclass.m	/^:- func eqvclass.partition_list(eqvclass(T)) = list(set(T)).$/;kq|/^\<eqvclass.partition_list\>/;'q;"	kind:func
eqvclass.partition_list	eqvclass.m	/^:- pred eqvclass.partition_list(eqvclass(T)::in, list(set(T))::out) is det.$/;kq|/^\<eqvclass.partition_list\>/;'q;"	kind:pred
eqvclass.partition_set	eqvclass.m	/^:- func eqvclass.partition_set(eqvclass(T)) = set(set(T)).$/;kq|/^\<eqvclass.partition_set\>/;'q;"	kind:func
eqvclass.partition_set	eqvclass.m	/^:- pred eqvclass.partition_set(eqvclass(T)::in, set(set(T))::out) is det.$/;kq|/^\<eqvclass.partition_set\>/;'q;"	kind:pred
eqvclass.partitions	eqvclass.m	/^                partitions  :: map(partition_id, set(T)),$/;kq|-;/\<eqvclass.partitions\>/;'q;"	kind:fld	file:
eqvclass.partitions	eqvclass.m	/^:- pred eqvclass.partitions(eqvclass(T)::in, list(partition_id)::in,$/;kq|/^\<eqvclass.partitions\>/;'q;"	kind:pred	file:
eqvclass.same_eqvclass	eqvclass.m	/^:- pred eqvclass.same_eqvclass(eqvclass(T)::in, T::in, T::in) is semidet.$/;kq|/^\<eqvclass.same_eqvclass\>/;'q;"	kind:pred
eqvclass.same_eqvclass_list	eqvclass.m	/^:- pred eqvclass.same_eqvclass_list(eqvclass(T)::in, list(T)::in) is semidet.$/;kq|/^\<eqvclass.same_eqvclass_list\>/;'q;"	kind:pred
eqvclass.same_eqvclass_list_2	eqvclass.m	/^:- pred eqvclass.same_eqvclass_list_2(map(T, partition_id)::in,$/;kq|/^\<eqvclass.same_eqvclass_list_2\>/;'q;"	kind:pred	file:
erlang_atom	erlang_rtti_implementation.m	/^    --->    erlang_atom.$/;kq|-;/\<erlang_atom\>/;'q;"	kind:cons	file:
erlang_atom	erlang_rtti_implementation.m	/^:- type erlang_atom$/;kq|-;/\<erlang_atom\>/;'q;"	kind:type	file:
erlang_du_functor	erlang_rtti_implementation.m	/^    --->    erlang_du_functor($/;kq|-;/\<erlang_du_functor\>/;'q;"	kind:cons	file:
erlang_du_functor	erlang_rtti_implementation.m	/^:- type erlang_du_functor$/;kq|-;/\<erlang_du_functor\>/;'q;"	kind:type	file:
erlang_type_ctor_rep	erlang_rtti_implementation.m	/^:- type erlang_type_ctor_rep$/;kq|-;/\<erlang_type_ctor_rep\>/;'q;"	kind:type	file:
error	bit_buffer.m	/^:- instance stream.error(error_stream_error) where$/;kq|-;/\<error\>/;'q;"	kind:tci	file:
error	getopt.m	/^    ;       error(string).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	getopt_io.m	/^    ;       error(string).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^    ;       error(T, io.error)$/;kq|-;/\<error\>/;'q;"	kind:cons	file:
error	io.m	/^    ;       error(T, io.error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^    ;       error(io.error)$/;kq|-;/\<error\>/;'q;"	kind:cons	file:
error	io.m	/^    ;       error(io.error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^    ;       error(io.error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^    ;       error(io.error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^    ;       error(io.error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^    ;       error(string, int). % error message, line number$/;kq|-;/\<error\>/;'q;"	kind:cons
error	io.m	/^:- instance stream.error(io.error) where [$/;kq|-;/\<error\>/;'q;"	kind:tci	file:
error	io.m	/^:- type io.error$/;kq|-;/\<error\>/;'q;"	kind:type	file:
error	lexer.m	/^    ;       error(string)       % some other invalid token$/;kq|-;/\<error\>/;'q;"	kind:cons
error	maybe.m	/^    ;       error(E).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	maybe.m	/^    ;       error(string).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	parser.m	/^    ;       error(string, token_list).$/;kq|-;/\<error\>/;'q;"	kind:cons	file:
error	parsing_utils.m	/^    ;       error($/;kq|-;/\<error\>/;'q;"	kind:cons
error	require.m	/^:- pred error(string::in) is erroneous.$/;kq|/^\<error\>/;'q;"	kind:pred
error	stream.m	/^    ;       error(Error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	stream.m	/^    ;       error(Error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	stream.m	/^    ;       error(Error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	stream.m	/^    ;       error(Error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	stream.m	/^    ;       error(T, Error).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	stream.m	/^:- typeclass stream.error(Error) where$/;kq|-;/\<error\>/;'q;"	kind:tc
error	term.m	/^    ;       error(term_to_type_error(U)).$/;kq|-;/\<error\>/;'q;"	kind:cons
error	term_io.m	/^    ;       error(string, int)$/;kq|-;/\<error\>/;'q;"	kind:cons
error_col	parsing_utils.m	/^                error_col     :: int$/;kq|-;/\<error_col\>/;'q;"	kind:fld
error_line	parsing_utils.m	/^                error_line    :: int,$/;kq|-;/\<error_line\>/;'q;"	kind:fld
error_message	io.m	/^    func(stream.error_message\/1) is io.error_message$/;kq|-;/\<error_message\>/;'q;"	kind:tcim	file:
error_message	io.m	/^:- func io.error_message(io.error) = string.$/;kq|/^\<io.error_message\>/;'q;"	kind:func
error_message	io.m	/^:- pred io.error_message(io.error::in, string::out) is det.$/;kq|/^\<io.error_message\>/;'q;"	kind:pred
error_message	parsing_utils.m	/^                error_message :: maybe(string),$/;kq|-;/\<error_message\>/;'q;"	kind:fld
error_message	stream.m	/^    func error_message(Error) = string$/;kq|-;/\<error_message\>/;'q;"	kind:tcm
error_state	bit_buffer.m	/^:- type error_state ---> error_state.$/;kq|-;/\<error_state\>/;'q;"	kind:cons
error_state	bit_buffer.m	/^:- type error_state ---> error_state.$/;kq|-;/\<error_state\>/;'q;"	kind:type
error_stream	bit_buffer.m	/^:- type error_stream ---> error_stream.$/;kq|-;/\<error_stream\>/;'q;"	kind:cons
error_stream	bit_buffer.m	/^:- type error_stream ---> error_stream.$/;kq|-;/\<error_stream\>/;'q;"	kind:type
error_stream_error	bit_buffer.m	/^:- type error_stream_error ---> error_stream_error.$/;kq|-;/\<error_stream_error\>/;'q;"	kind:cons
error_stream_error	bit_buffer.m	/^:- type error_stream_error ---> error_stream_error.$/;kq|-;/\<error_stream_error\>/;'q;"	kind:type
escape_char	lexer.m	/^:- pred escape_char(char::in, char::out) is semidet.$/;kq|/^\<escape_char\>/;'q;"	kind:pred	file:
escaped_char	term_io.m	/^:- func term_io.escaped_char(char) = string.$/;kq|/^\<term_io.escaped_char\>/;'q;"	kind:func
escaped_string	term_io.m	/^:- func term_io.escaped_string(string) = string.$/;kq|/^\<term_io.escaped_string\>/;'q;"	kind:func
etcr_array	erlang_rtti_implementation.m	/^    ;       etcr_array$/;kq|-;/\<etcr_array\>/;'q;"	kind:cons	file:
etcr_base_typeclass_info	erlang_rtti_implementation.m	/^    ;       etcr_base_typeclass_info$/;kq|-;/\<etcr_base_typeclass_info\>/;'q;"	kind:cons	file:
etcr_c_pointer	erlang_rtti_implementation.m	/^    ;       etcr_c_pointer$/;kq|-;/\<etcr_c_pointer\>/;'q;"	kind:cons	file:
etcr_char	erlang_rtti_implementation.m	/^    ;       etcr_char$/;kq|-;/\<etcr_char\>/;'q;"	kind:cons	file:
etcr_du	erlang_rtti_implementation.m	/^    --->    etcr_du$/;kq|-;/\<etcr_du\>/;'q;"	kind:cons	file:
etcr_dummy	erlang_rtti_implementation.m	/^    ;       etcr_dummy$/;kq|-;/\<etcr_dummy\>/;'q;"	kind:cons	file:
etcr_eqv	erlang_rtti_implementation.m	/^    ;       etcr_eqv$/;kq|-;/\<etcr_eqv\>/;'q;"	kind:cons	file:
etcr_float	erlang_rtti_implementation.m	/^    ;       etcr_float$/;kq|-;/\<etcr_float\>/;'q;"	kind:cons	file:
etcr_foreign	erlang_rtti_implementation.m	/^    ;       etcr_foreign$/;kq|-;/\<etcr_foreign\>/;'q;"	kind:cons	file:
etcr_func	erlang_rtti_implementation.m	/^    ;       etcr_func$/;kq|-;/\<etcr_func\>/;'q;"	kind:cons	file:
etcr_hp	erlang_rtti_implementation.m	/^    ;       etcr_hp$/;kq|-;/\<etcr_hp\>/;'q;"	kind:cons	file:
etcr_int	erlang_rtti_implementation.m	/^    ;       etcr_int$/;kq|-;/\<etcr_int\>/;'q;"	kind:cons	file:
etcr_list	erlang_rtti_implementation.m	/^    ;       etcr_list$/;kq|-;/\<etcr_list\>/;'q;"	kind:cons	file:
etcr_pred	erlang_rtti_implementation.m	/^    ;       etcr_pred$/;kq|-;/\<etcr_pred\>/;'q;"	kind:cons	file:
etcr_pseudo_type_desc	erlang_rtti_implementation.m	/^    ;       etcr_pseudo_type_desc$/;kq|-;/\<etcr_pseudo_type_desc\>/;'q;"	kind:cons	file:
etcr_ref	erlang_rtti_implementation.m	/^    ;       etcr_ref$/;kq|-;/\<etcr_ref\>/;'q;"	kind:cons	file:
etcr_stable_c_pointer	erlang_rtti_implementation.m	/^    ;       etcr_stable_c_pointer$/;kq|-;/\<etcr_stable_c_pointer\>/;'q;"	kind:cons	file:
etcr_string	erlang_rtti_implementation.m	/^    ;       etcr_string$/;kq|-;/\<etcr_string\>/;'q;"	kind:cons	file:
etcr_subgoal	erlang_rtti_implementation.m	/^    ;       etcr_subgoal$/;kq|-;/\<etcr_subgoal\>/;'q;"	kind:cons	file:
etcr_ticket	erlang_rtti_implementation.m	/^    ;       etcr_ticket$/;kq|-;/\<etcr_ticket\>/;'q;"	kind:cons	file:
etcr_tuple	erlang_rtti_implementation.m	/^    ;       etcr_tuple$/;kq|-;/\<etcr_tuple\>/;'q;"	kind:cons	file:
etcr_type_ctor_desc	erlang_rtti_implementation.m	/^    ;       etcr_type_ctor_desc$/;kq|-;/\<etcr_type_ctor_desc\>/;'q;"	kind:cons	file:
etcr_type_ctor_info	erlang_rtti_implementation.m	/^    ;       etcr_type_ctor_info$/;kq|-;/\<etcr_type_ctor_info\>/;'q;"	kind:cons	file:
etcr_type_desc	erlang_rtti_implementation.m	/^    ;       etcr_type_desc$/;kq|-;/\<etcr_type_desc\>/;'q;"	kind:cons	file:
etcr_type_info	erlang_rtti_implementation.m	/^    ;       etcr_type_info$/;kq|-;/\<etcr_type_info\>/;'q;"	kind:cons	file:
etcr_typeclass_info	erlang_rtti_implementation.m	/^    ;       etcr_typeclass_info$/;kq|-;/\<etcr_typeclass_info\>/;'q;"	kind:cons	file:
etcr_void	erlang_rtti_implementation.m	/^    ;       etcr_void$/;kq|-;/\<etcr_void\>/;'q;"	kind:cons	file:
eval_pseudo_type_info	erlang_rtti_implementation.m	/^:- func eval_pseudo_type_info(type_info,$/;kq|/^\<eval_pseudo_type_info\>/;'q;"	kind:func	file:
eval_pseudo_type_info_thunk	erlang_rtti_implementation.m	/^:- func eval_pseudo_type_info_thunk(pseudo_type_info_thunk) =$/;kq|/^\<eval_pseudo_type_info_thunk\>/;'q;"	kind:func	file:
eval_type_info	erlang_rtti_implementation.m	/^:- func eval_type_info(ti_info(T), type_info) = type_info.$/;kq|/^\<eval_type_info\>/;'q;"	kind:func	file:
eval_type_info_thunk	erlang_rtti_implementation.m	/^:- func eval_type_info_thunk(ti_info(T), type_info_thunk) = type_info.$/;kq|/^\<eval_type_info_thunk\>/;'q;"	kind:func	file:
eval_type_info_thunk_2	erlang_rtti_implementation.m	/^:- func eval_type_info_thunk_2(type_info_thunk) = type_info.$/;kq|/^\<eval_type_info_thunk_2\>/;'q;"	kind:func	file:
evaluate_parallelism_condition	par_builtin.m	/^:- impure pred evaluate_parallelism_condition is semidet.$/;kq|/^\<evaluate_parallelism_condition\>/;'q;"	kind:pred
evaluated_pseudo_type_info_thunk	erlang_rtti_implementation.m	/^:- type evaluated_pseudo_type_info_thunk$/;kq|-;/\<evaluated_pseudo_type_info_thunk\>/;'q;"	kind:type	file:
even	int.m	/^:- pred even(int::in) is semidet.$/;kq|/^\<even\>/;'q;"	kind:pred
evenmask	integer.m	/^:- func evenmask = int.$/;kq|/^\<evenmask\>/;'q;"	kind:func	file:
exc_univ_to_type	exception.m	/^:- pred exc_univ_to_type(univ, T).$/;kq|/^\<exc_univ_to_type\>/;'q;"	kind:pred
exc_univ_value	exception.m	/^:- some [T] func exc_univ_value(univ) = T.$/;kq|/^\<exc_univ_value\>/;'q;"	kind:func
exception	exception.m	/^    ;       exception(univ).$/;kq|-;/\<exception\>/;'q;"	kind:cons
exception.[]	exception.m	/^:- inst [] ---> [].$/;kq|-;/\<exception.[]\>/;'q;"	kind:inst
exception.builtin_throw	exception.m	/^:- pred builtin_throw(univ::in) is erroneous.$/;kq|/^\<builtin_throw\>/;'q;"	kind:pred	file:
exception.call_goal	exception.m	/^:- pred call_goal(pred(T), T).$/;kq|/^\<call_goal\>/;'q;"	kind:pred	file:
exception.call_handler	exception.m	/^:- pred call_handler(pred(univ, T), univ, T).$/;kq|/^\<call_handler\>/;'q;"	kind:pred	file:
exception.cannot_fail	exception.m	/^:- inst cannot_fail$/;kq|-;/\<exception.cannot_fail\>/;'q;"	kind:inst
exception.consume_io_state	exception.m	/^:- impure pred consume_io_state(io::di) is det.$/;kq|/^\<consume_io_state\>/;'q;"	kind:pred	file:
exception.exc_univ_to_type	exception.m	/^:- pred exc_univ_to_type(univ, T).$/;kq|/^\<exc_univ_to_type\>/;'q;"	kind:pred
exception.exc_univ_value	exception.m	/^:- some [T] func exc_univ_value(univ) = T.$/;kq|/^\<exc_univ_value\>/;'q;"	kind:func
exception.exp_determinism	exception.m	/^:- type exp_determinism$/;kq|-;/\<exception.exp_determinism\>/;'q;"	kind:type	file:
exception.exp_detism_cc_multi	exception.m	/^    ;       exp_detism_cc_multi$/;kq|-;/\<exception.exp_detism_cc_multi\>/;'q;"	kind:cons	file:
exception.exp_detism_cc_nondet	exception.m	/^    ;       exp_detism_cc_nondet$/;kq|-;/\<exception.exp_detism_cc_nondet\>/;'q;"	kind:cons	file:
exception.exp_detism_det	exception.m	/^    --->    exp_detism_det$/;kq|-;/\<exception.exp_detism_det\>/;'q;"	kind:cons	file:
exception.exp_detism_erroneous	exception.m	/^    ;       exp_detism_erroneous$/;kq|-;/\<exception.exp_detism_erroneous\>/;'q;"	kind:cons	file:
exception.exp_detism_failure	exception.m	/^    ;       exp_detism_failure.$/;kq|-;/\<exception.exp_detism_failure\>/;'q;"	kind:cons	file:
exception.exp_detism_multi	exception.m	/^    ;       exp_detism_multi$/;kq|-;/\<exception.exp_detism_multi\>/;'q;"	kind:cons	file:
exception.exp_detism_nondet	exception.m	/^    ;       exp_detism_nondet$/;kq|-;/\<exception.exp_detism_nondet\>/;'q;"	kind:cons	file:
exception.exp_detism_semidet	exception.m	/^    ;       exp_detism_semidet$/;kq|-;/\<exception.exp_detism_semidet\>/;'q;"	kind:cons	file:
exception.failed	exception.m	/^    ;       failed$/;kq|-;/\<exception.failed\>/;'q;"	kind:cons
exception.finally	exception.m	/^:- pred finally(pred(T, io, io), T, pred(io.res, io, io), io.res, io, io).$/;kq|/^\<finally\>/;'q;"	kind:pred
exception.finally_2	exception.m	/^:- pred finally_2(pred(T, io, io), pred(io.res, io, io), T, io.res,$/;kq|/^\<finally_2\>/;'q;"	kind:pred	file:
exception.get_determinism	exception.m	/^:- pred get_determinism(pred(T), exp_determinism).$/;kq|/^\<get_determinism\>/;'q;"	kind:pred	file:
exception.get_determinism_2	exception.m	/^:- pred get_determinism_2(pred(T, S, S), exp_determinism).$/;kq|/^\<get_determinism_2\>/;'q;"	kind:pred	file:
exception.handle_stm_result	exception.m	/^:- pred handle_stm_result(exception_result({T, stm})::in(cannot_fail),$/;kq|/^\<handle_stm_result\>/;'q;"	kind:pred	file:
exception.handle_store_result	exception.m	/^:- pred handle_store_result(exception_result({T, store(S)})::in(cannot_fail),$/;kq|/^\<handle_store_result\>/;'q;"	kind:pred	file:
exception.handler	exception.m	/^:- inst handler == (pred(in, out) is det).$/;kq|-;/\<exception.handler\>/;'q;"	kind:inst	file:
exception.handler	exception.m	/^:- type handler(T) == pred(univ, T).$/;kq|-;/\<exception.handler\>/;'q;"	kind:type	file:
exception.incremental_try_all	exception.m	/^:- pred incremental_try_all(pred(T), pred(exception_result(T), A, A), A, A).$/;kq|/^\<incremental_try_all\>/;'q;"	kind:pred
exception.make_io_state	exception.m	/^:- impure pred make_io_state(io::uo) is det.$/;kq|/^\<make_io_state\>/;'q;"	kind:pred	file:
exception.near_stack_limits	exception.m	/^    --->    near_stack_limits.$/;kq|-;/\<exception.near_stack_limits\>/;'q;"	kind:cons
exception.near_stack_limits	exception.m	/^:- type near_stack_limits$/;kq|-;/\<exception.near_stack_limits\>/;'q;"	kind:type
exception.rethrow	exception.m	/^:- func rethrow(exception_result(T)) = _.$/;kq|/^\<rethrow\>/;'q;"	kind:func
exception.rethrow	exception.m	/^:- pred rethrow(exception_result(T)).$/;kq|/^\<rethrow\>/;'q;"	kind:pred
exception.set_get_message_hook	exception.m	/^:- pred set_get_message_hook(io::di, io::uo) is det.$/;kq|/^\<set_get_message_hook\>/;'q;"	kind:pred	file:
exception.software_error	exception.m	/^    --->    software_error(string).$/;kq|-;/\<exception.software_error\>/;'q;"	kind:cons
exception.software_error	exception.m	/^:- type software_error$/;kq|-;/\<exception.software_error\>/;'q;"	kind:type
exception.succeeded	exception.m	/^    --->    succeeded(T)$/;kq|-;/\<exception.succeeded\>/;'q;"	kind:cons
exception.throw	exception.m	/^:- func throw(T) = _ is erroneous.$/;kq|/^\<throw\>/;'q;"	kind:func
exception.throw	exception.m	/^:- pred throw(T::in) is erroneous.$/;kq|/^\<throw\>/;'q;"	kind:pred
exception.throw_impl	exception.m	/^:- pred throw_impl(univ::in) is erroneous.$/;kq|/^\<throw_impl\>/;'q;"	kind:pred	file:
exception.try	exception.m	/^:- pred try(pred(T),                exception_result(T)).$/;kq|/^\<try\>/;'q;"	kind:pred
exception.try_all	exception.m	/^:- pred try_all(pred(T), maybe(univ), list(T)).$/;kq|/^\<try_all\>/;'q;"	kind:pred
exception.try_all_det	exception.m	/^:- pred try_all_det(exp_determinism, pred(T), maybe(univ), list(T)).$/;kq|/^\<try_all_det\>/;'q;"	kind:pred	file:
exception.try_det	exception.m	/^:- pred try_det(exp_determinism, pred(T), exception_result(T)).$/;kq|/^\<try_det\>/;'q;"	kind:pred	file:
exception.try_io	exception.m	/^:- pred try_io(pred(T, io, io), exception_result(T), io, io).$/;kq|/^\<try_io\>/;'q;"	kind:pred
exception.try_io_det	exception.m	/^:- pred try_io_det(exp_determinism, pred(T, io, io), exception_result(T),$/;kq|/^\<try_io_det\>/;'q;"	kind:pred	file:
exception.try_stm	exception.m	/^:- pred try_stm(pred(A, stm, stm), exception_result(A), stm, stm).$/;kq|/^\<try_stm\>/;'q;"	kind:pred
exception.try_stm_cc_multi	exception.m	/^:- pred try_stm_cc_multi(exp_determinism, pred(T, stm, stm),$/;kq|/^\<try_stm_cc_multi\>/;'q;"	kind:pred	file:
exception.try_stm_det	exception.m	/^:- pred try_stm_det(exp_determinism, pred(T, stm, stm),$/;kq|/^\<try_stm_det\>/;'q;"	kind:pred	file:
exception.try_store	exception.m	/^:- pred try_store(pred(T, store(S), store(S)),$/;kq|/^\<try_store\>/;'q;"	kind:pred
exception.try_store_det	exception.m	/^:- pred try_store_det(exp_determinism, pred(T, store(S), store(S)),$/;kq|/^\<try_store_det\>/;'q;"	kind:pred	file:
exception.unreachable	exception.m	/^:- pred unreachable is erroneous.$/;kq|/^\<unreachable\>/;'q;"	kind:pred
exception.unsafe_try_stm	exception.m	/^:- pred unsafe_try_stm(pred(A, stm, stm),$/;kq|/^\<unsafe_try_stm\>/;'q;"	kind:pred
exception.use	exception.m	/^:- impure pred use(T::in) is det.$/;kq|/^\<use\>/;'q;"	kind:pred	file:
exception.wrap_exception	exception.m	/^:- pred wrap_exception(univ::in, exception_result(T)::out) is det.$/;kq|/^\<wrap_exception\>/;'q;"	kind:pred	file:
exception.wrap_success	exception.m	/^:- pred wrap_success(pred(T), exception_result(T)) is det.$/;kq|/^\<wrap_success\>/;'q;"	kind:pred	file:
exception_result	exception.m	/^:- type exception_result(T)$/;kq|-;/\<exception_result\>/;'q;"	kind:type
exception_to_string	exception.m	/^:- func exception_to_string(univ) = string.$/;kq|/^\<exception_to_string\>/;'q;"	kind:func	file:
execute	io.m	/^    ;       execute.$/;kq|-;/\<execute\>/;'q;"	kind:cons
execute_get_token_action	lexer.m	/^:- pred execute_get_token_action(io.input_stream::in, char::in,$/;kq|/^\<execute_get_token_action\>/;'q;"	kind:pred	file:
execute_string_get_token_action	lexer.m	/^:- pred execute_string_get_token_action(string::in, int::in, posn::in,$/;kq|/^\<execute_string_get_token_action\>/;'q;"	kind:pred	file:
exist_arg_num	rtti_implementation.m	/^:- func exist_arg_num(typeinfo_locn) = int.$/;kq|/^\<exist_arg_num\>/;'q;"	kind:func	file:
exist_info	erlang_rtti_implementation.m	/^    --->    exist_info($/;kq|-;/\<exist_info\>/;'q;"	kind:cons	file:
exist_info	erlang_rtti_implementation.m	/^:- type exist_info$/;kq|-;/\<exist_info\>/;'q;"	kind:type	file:
exist_info	rtti_implementation.m	/^:- type exist_info ---> exist_info(c_pointer).$/;kq|-;/\<exist_info\>/;'q;"	kind:cons	file:
exist_info	rtti_implementation.m	/^:- type exist_info ---> exist_info(c_pointer).$/;kq|-;/\<exist_info\>/;'q;"	kind:type	file:
exist_info_tcis	rtti_implementation.m	/^:- func exist_info_tcis(exist_info) = int.$/;kq|/^\<exist_info_tcis\>/;'q;"	kind:func	file:
exist_info_typeinfos_plain	rtti_implementation.m	/^:- func exist_info_typeinfos_plain(exist_info) = int.$/;kq|/^\<exist_info_typeinfos_plain\>/;'q;"	kind:func	file:
exist_num_plain_typeinfos	erlang_rtti_implementation.m	/^                exist_num_plain_typeinfos   :: int,$/;kq|-;/\<exist_num_plain_typeinfos\>/;'q;"	kind:fld	file:
exist_num_typeinfos_in_tcis	erlang_rtti_implementation.m	/^                exist_num_typeinfos_in_tcis :: int,$/;kq|-;/\<exist_num_typeinfos_in_tcis\>/;'q;"	kind:fld	file:
exist_offset_in_tci	rtti_implementation.m	/^:- func exist_offset_in_tci(typeinfo_locn) = int.$/;kq|/^\<exist_offset_in_tci\>/;'q;"	kind:func	file:
exist_tvar	type_desc.m	/^    ;       exist_tvar(int).$/;kq|-;/\<exist_tvar\>/;'q;"	kind:cons
exist_type_info	erlang_rtti_implementation.m	/^:- func exist_type_info(type_info, erlang_du_functor, T, int) = type_info.$/;kq|/^\<exist_type_info\>/;'q;"	kind:func	file:
exist_typeclass_constraints	erlang_rtti_implementation.m	/^                exist_typeclass_constraints :: list(tc_constraint),$/;kq|-;/\<exist_typeclass_constraints\>/;'q;"	kind:fld	file:
exist_typeinfo_locn	erlang_rtti_implementation.m	/^:- type exist_typeinfo_locn$/;kq|-;/\<exist_typeinfo_locn\>/;'q;"	kind:type	file:
exist_typeinfo_locns	erlang_rtti_implementation.m	/^                exist_typeinfo_locns        :: list(exist_typeinfo_locn)$/;kq|-;/\<exist_typeinfo_locns\>/;'q;"	kind:fld	file:
existential_type_info	erlang_rtti_implementation.m	/^    ;       existential_type_info(int)$/;kq|-;/\<existential_type_info\>/;'q;"	kind:cons	file:
exited	io.m	/^    --->    exited(int)$/;kq|-;/\<exited\>/;'q;"	kind:cons
exp	math.m	/^:- func math.exp(float) = float.$/;kq|/^\<math.exp\>/;'q;"	kind:func
exp_determinism	exception.m	/^:- type exp_determinism$/;kq|-;/\<exp_determinism\>/;'q;"	kind:type	file:
exp_detism_cc_multi	exception.m	/^    ;       exp_detism_cc_multi$/;kq|-;/\<exp_detism_cc_multi\>/;'q;"	kind:cons	file:
exp_detism_cc_nondet	exception.m	/^    ;       exp_detism_cc_nondet$/;kq|-;/\<exp_detism_cc_nondet\>/;'q;"	kind:cons	file:
exp_detism_det	exception.m	/^    --->    exp_detism_det$/;kq|-;/\<exp_detism_det\>/;'q;"	kind:cons	file:
exp_detism_erroneous	exception.m	/^    ;       exp_detism_erroneous$/;kq|-;/\<exp_detism_erroneous\>/;'q;"	kind:cons	file:
exp_detism_failure	exception.m	/^    ;       exp_detism_failure.$/;kq|-;/\<exp_detism_failure\>/;'q;"	kind:cons	file:
exp_detism_multi	exception.m	/^    ;       exp_detism_multi$/;kq|-;/\<exp_detism_multi\>/;'q;"	kind:cons	file:
exp_detism_nondet	exception.m	/^    ;       exp_detism_nondet$/;kq|-;/\<exp_detism_nondet\>/;'q;"	kind:cons	file:
exp_detism_semidet	exception.m	/^    ;       exp_detism_semidet$/;kq|-;/\<exp_detism_semidet\>/;'q;"	kind:cons	file:
expand	dir.m	/^:- func expand(list(char)) = list(list(char)).$/;kq|/^\<expand\>/;'q;"	kind:func	file:
expand	hash_table.m	/^:- func expand(int::in, int::in, hash_pred(K)::in(hash_pred),$/;kq|/^\<expand\>/;'q;"	kind:func	file:
expand	version_hash_table.m	/^:- func expand(int, int, hash_pred(K), buckets(K, V)) =$/;kq|/^\<expand\>/;'q;"	kind:func	file:
expand_acc	dir.m	/^:- func expand_acc(list(char), list(list(char))) = list(list(char)).$/;kq|/^\<expand_acc\>/;'q;"	kind:func	file:
expand_braces	dir.m	/^:- func expand_braces(string) = list(string).$/;kq|/^\<expand_braces\>/;'q;"	kind:func
expand_docs	pretty_printer.m	/^:- pred expand_docs(noncanon_handling, formatter_map, docs, docs, int,$/;kq|/^\<expand_docs\>/;'q;"	kind:pred	file:
expand_format_list	pretty_printer.m	/^:- pred expand_format_list(list(univ)::in, doc::in, doc::out,$/;kq|/^\<expand_format_list\>/;'q;"	kind:pred	file:
expand_format_op	pretty_printer.m	/^:- pred expand_format_op(string::in, list(univ)::in, ops.priority::in,$/;kq|/^\<expand_format_op\>/;'q;"	kind:pred	file:
expand_format_susp	pretty_printer.m	/^:- pred expand_format_susp(((func) = doc)::in, doc::out,$/;kq|/^\<expand_format_susp\>/;'q;"	kind:pred	file:
expand_format_term	pretty_printer.m	/^:- pred expand_format_term(string::in, list(univ)::in, doc::out,$/;kq|/^\<expand_format_term\>/;'q;"	kind:pred	file:
expand_pp	pretty_printer.m	/^:- pred expand_pp(noncanon_handling, formatter_map, univ, doc,$/;kq|/^\<expand_pp\>/;'q;"	kind:pred	file:
expand_range	tree_bitset.m	/^:- pred expand_range(int::in, node_list::in, int::in, int::in, int::in,$/;kq|/^\<expand_range\>/;'q;"	kind:pred	file:
expand_type_name	rtti_implementation.m	/^:- func expand_type_name(type_ctor_info, bool) = string.$/;kq|/^\<expand_type_name\>/;'q;"	kind:func	file:
expect	require.m	/^:- pred expect((pred)::((pred) is semidet), string::in, string::in) is det.$/;kq|/^\<expect\>/;'q;"	kind:pred
expect	require.m	/^:- pred expect((pred)::((pred) is semidet), string::in, string::in,$/;kq|/^\<expect\>/;'q;"	kind:pred
expect_not	require.m	/^:- pred expect_not((pred)::((pred) is semidet), string::in, string::in) is det.$/;kq|/^\<expect_not\>/;'q;"	kind:pred
expect_not	require.m	/^:- pred expect_not((pred)::((pred) is semidet), string::in, string::in,$/;kq|/^\<expect_not\>/;'q;"	kind:pred
extend	pprint.m	/^:- func extend(string, int) = string.$/;kq|/^\<extend\>/;'q;"	kind:func	file:
external_dtd	term_to_xml.m	/^    ;       external_dtd(doctype)$/;kq|-;/\<external_dtd\>/;'q;"	kind:cons
extra_args	erlang_rtti_implementation.m	/^:- func extra_args(erlang_du_functor) = int.$/;kq|/^\<extra_args\>/;'q;"	kind:func	file:
extract_bits_from_byte	bitmap.m	/^:- func extract_bits_from_byte(byte, bit_index_in_byte, num_bits) = byte.$/;kq|/^\<extract_bits_from_byte\>/;'q;"	kind:func	file:
extract_bits_from_byte_index	bitmap.m	/^:- pred extract_bits_from_byte_index(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<extract_bits_from_byte_index\>/;'q;"	kind:pred	file:
extract_bits_from_bytes	bitmap.m	/^:- pred extract_bits_from_bytes(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<extract_bits_from_bytes\>/;'q;"	kind:pred	file:
extract_implications	robdd.m	/^:- func extract_implications(robdd(T)) = imp_vars(T).$/;kq|/^\<extract_implications\>/;'q;"	kind:func
extract_ref_value	store.m	/^:- pred store.extract_ref_value(S::di, generic_ref(T, S)::in, T::out)$/;kq|/^\<store.extract_ref_value\>/;'q;"	kind:pred
f	string.m	/^    --->    f(float)$/;kq|-;/\<f\>/;'q;"	kind:cons
f	string.m	/^    ;       f(float)$/;kq|-;/\<f\>/;'q;"	kind:cons	file:
fa	robdd.m	/^:- func fa(robdd(T)) = robdd(T).$/;kq|/^\<fa\>/;'q;"	kind:func	file:
fail_message_info	parsing_utils.m	/^    --->    fail_message_info(int, maybe(string)).$/;kq|-;/\<fail_message_info\>/;'q;"	kind:cons	file:
fail_message_info	parsing_utils.m	/^:- type fail_message_info$/;kq|-;/\<fail_message_info\>/;'q;"	kind:type	file:
fail_with_message	parsing_utils.m	/^:- pred fail_with_message(string::in, int::in, src::in, T::out,$/;kq|/^\<fail_with_message\>/;'q;"	kind:pred
fail_with_message	parsing_utils.m	/^:- pred fail_with_message(string::in, src::in, T::out, ps::in, ps::out)$/;kq|/^\<fail_with_message\>/;'q;"	kind:pred
failed	exception.m	/^    ;       failed$/;kq|-;/\<failed\>/;'q;"	kind:cons
false	builtin.m	/^:- pred false is failure.$/;kq|/^\<false\>/;'q;"	kind:pred
fat_bitset_impl	fat_sparse_bitset.m	/^:- type fat_bitset_impl$/;kq|-;/\<fat_bitset_impl\>/;'q;"	kind:type	file:
fat_sparse_bitset	fat_sparse_bitset.m	/^    --->    fat_sparse_bitset(fat_bitset_impl).$/;kq|-;/\<fat_sparse_bitset\>/;'q;"	kind:cons	file:
fat_sparse_bitset	fat_sparse_bitset.m	/^:- type fat_sparse_bitset(T)    % <= enum(T)$/;kq|-;/\<fat_sparse_bitset\>/;'q;"	kind:type	file:
fat_sparse_bitset	fat_sparse_bitset.m	/^:- type fat_sparse_bitset(T). % <= enum(T).$/;kq|-;/\<fat_sparse_bitset\>/;'q;"	kind:type
fat_sparse_bitset.all_true	fat_sparse_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), fat_sparse_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
fat_sparse_bitset.bits	fat_sparse_bitset.m	/^                bits    :: int,$/;kq|-;/\<fat_sparse_bitset.bits\>/;'q;"	kind:fld	file:
fat_sparse_bitset.clear_bit	fat_sparse_bitset.m	/^:- func clear_bit(int, int) = int.$/;kq|/^\<clear_bit\>/;'q;"	kind:func	file:
fat_sparse_bitset.contains	fat_sparse_bitset.m	/^:- pred contains(fat_sparse_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
fat_sparse_bitset.count	fat_sparse_bitset.m	/^:- func count(fat_sparse_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
fat_sparse_bitset.count_bits	fat_sparse_bitset.m	/^:- pred count_bits(int::in, int::in, int::in,$/;kq|/^\<count_bits\>/;'q;"	kind:pred	file:
fat_sparse_bitset.delete	fat_sparse_bitset.m	/^:- func delete(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<delete\>/;'q;"	kind:func
fat_sparse_bitset.delete	fat_sparse_bitset.m	/^:- pred delete(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
fat_sparse_bitset.delete_list	fat_sparse_bitset.m	/^:- func delete_list(fat_sparse_bitset(T), list(T)) = fat_sparse_bitset(T)$/;kq|/^\<delete_list\>/;'q;"	kind:func
fat_sparse_bitset.delete_list	fat_sparse_bitset.m	/^:- pred delete_list(list(T)::in,$/;kq|/^\<delete_list\>/;'q;"	kind:pred
fat_sparse_bitset.difference	fat_sparse_bitset.m	/^:- func difference(fat_sparse_bitset(T), fat_sparse_bitset(T)) =$/;kq|/^\<difference\>/;'q;"	kind:func
fat_sparse_bitset.difference	fat_sparse_bitset.m	/^:- pred difference(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<difference\>/;'q;"	kind:pred
fat_sparse_bitset.difference_2	fat_sparse_bitset.m	/^:- func difference_2(fat_bitset_impl, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<difference_2\>/;'q;"	kind:func	file:
fat_sparse_bitset.divide	fat_sparse_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), fat_sparse_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
fat_sparse_bitset.divide_bits	fat_sparse_bitset.m	/^:- pred divide_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_bits\>/;'q;"	kind:pred	file:
fat_sparse_bitset.divide_nodes	fat_sparse_bitset.m	/^:- pred divide_nodes(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_nodes\>/;'q;"	kind:pred	file:
fat_sparse_bitset.empty	fat_sparse_bitset.m	/^    --->    empty$/;kq|-;/\<fat_sparse_bitset.empty\>/;'q;"	kind:cons	file:
fat_sparse_bitset.empty	fat_sparse_bitset.m	/^:- pred empty(fat_sparse_bitset(T)).$/;kq|/^\<empty\>/;'q;"	kind:pred
fat_sparse_bitset.equal	fat_sparse_bitset.m	/^:- pred equal(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<equal\>/;'q;"	kind:pred
fat_sparse_bitset.filter	fat_sparse_bitset.m	/^:- func filter(pred(T), fat_sparse_bitset(T)) = fat_sparse_bitset(T)$/;kq|/^\<filter\>/;'q;"	kind:func
fat_sparse_bitset.filter	fat_sparse_bitset.m	/^:- pred filter(pred(T), fat_sparse_bitset(T),$/;kq|/^\<filter\>/;'q;"	kind:pred
fat_sparse_bitset.fold2_bits	fat_sparse_bitset.m	/^:- pred fold2_bits(fold_direction, pred(T, U, U, V, V),$/;kq|/^\<fold2_bits\>/;'q;"	kind:pred	file:
fat_sparse_bitset.fold_bits	fat_sparse_bitset.m	/^:- pred fold_bits(fold_direction, pred(T, U, U),$/;kq|/^\<fold_bits\>/;'q;"	kind:pred	file:
fat_sparse_bitset.foldl	fat_sparse_bitset.m	/^:- func foldl(func(T, U) = U, fat_sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
fat_sparse_bitset.foldl	fat_sparse_bitset.m	/^:- pred foldl(pred(T, U, U), fat_sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
fat_sparse_bitset.foldl2	fat_sparse_bitset.m	/^:- pred foldl2(pred(T, U, U, V, V), fat_sparse_bitset(T), U, U, V, V)$/;kq|/^\<foldl2\>/;'q;"	kind:pred
fat_sparse_bitset.foldr	fat_sparse_bitset.m	/^:- func foldr(func(T, U) = U, fat_sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:func
fat_sparse_bitset.foldr	fat_sparse_bitset.m	/^:- pred foldr(pred(T, U, U), fat_sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:pred
fat_sparse_bitset.foldr2	fat_sparse_bitset.m	/^:- pred foldr2(pred(T, U, U, V, V), fat_sparse_bitset(T), U, U, V, V)$/;kq|/^\<foldr2\>/;'q;"	kind:pred
fat_sparse_bitset.from_set	fat_sparse_bitset.m	/^:- func from_set(set.set(T)) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
fat_sparse_bitset.get_bit	fat_sparse_bitset.m	/^:- func get_bit(int, int) = int.$/;kq|/^\<get_bit\>/;'q;"	kind:func	file:
fat_sparse_bitset.high_to_low	fat_sparse_bitset.m	/^    ;       high_to_low.$/;kq|-;/\<fat_sparse_bitset.high_to_low\>/;'q;"	kind:cons	file:
fat_sparse_bitset.init	fat_sparse_bitset.m	/^:- func init = fat_sparse_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
fat_sparse_bitset.init	fat_sparse_bitset.m	/^:- pred init(fat_sparse_bitset(T)::out) is det.$/;kq|/^\<init\>/;'q;"	kind:pred
fat_sparse_bitset.insert	fat_sparse_bitset.m	/^:- func insert(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<insert\>/;'q;"	kind:func
fat_sparse_bitset.insert	fat_sparse_bitset.m	/^:- pred insert(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
fat_sparse_bitset.insert_2	fat_sparse_bitset.m	/^:- pred insert_2(fat_bitset_impl::in, int::in, fat_bitset_impl::out) is det.$/;kq|/^\<insert_2\>/;'q;"	kind:pred	file:
fat_sparse_bitset.insert_list	fat_sparse_bitset.m	/^:- func insert_list(fat_sparse_bitset(T), list(T)) = fat_sparse_bitset(T)$/;kq|/^\<insert_list\>/;'q;"	kind:func
fat_sparse_bitset.insert_list	fat_sparse_bitset.m	/^:- pred insert_list(list(T)::in,$/;kq|/^\<insert_list\>/;'q;"	kind:pred
fat_sparse_bitset.insert_new	fat_sparse_bitset.m	/^:- pred insert_new(T::in,$/;kq|/^\<insert_new\>/;'q;"	kind:pred
fat_sparse_bitset.insert_new_2	fat_sparse_bitset.m	/^:- pred insert_new_2(fat_bitset_impl::in, int::in, fat_bitset_impl::out)$/;kq|/^\<insert_new_2\>/;'q;"	kind:pred	file:
fat_sparse_bitset.insert_node	fat_sparse_bitset.m	/^:- func insert_node(int, int, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<insert_node\>/;'q;"	kind:func	file:
fat_sparse_bitset.intersect	fat_sparse_bitset.m	/^:- func intersect(fat_sparse_bitset(T), fat_sparse_bitset(T)) =$/;kq|/^\<intersect\>/;'q;"	kind:func
fat_sparse_bitset.intersect	fat_sparse_bitset.m	/^:- pred intersect(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<intersect\>/;'q;"	kind:pred
fat_sparse_bitset.intersect_2	fat_sparse_bitset.m	/^:- func intersect_2(fat_bitset_impl, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<intersect_2\>/;'q;"	kind:func	file:
fat_sparse_bitset.is_empty	fat_sparse_bitset.m	/^:- pred is_empty(fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
fat_sparse_bitset.is_non_empty	fat_sparse_bitset.m	/^:- pred is_non_empty(fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
fat_sparse_bitset.is_singleton	fat_sparse_bitset.m	/^:- pred is_singleton(fat_sparse_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
fat_sparse_bitset.list_to_set	fat_sparse_bitset.m	/^:- func list_to_set(list(T)) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
fat_sparse_bitset.list_to_set	fat_sparse_bitset.m	/^:- pred list_to_set(list(T)::in, fat_sparse_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
fat_sparse_bitset.low_to_high	fat_sparse_bitset.m	/^    --->    low_to_high$/;kq|-;/\<fat_sparse_bitset.low_to_high\>/;'q;"	kind:cons	file:
fat_sparse_bitset.mask	fat_sparse_bitset.m	/^:- func mask(int) = int.$/;kq|/^\<mask\>/;'q;"	kind:func	file:
fat_sparse_bitset.member	fat_sparse_bitset.m	/^:- pred member(T, fat_sparse_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
fat_sparse_bitset.node	fat_sparse_bitset.m	/^    ;       node($/;kq|-;/\<fat_sparse_bitset.node\>/;'q;"	kind:cons	file:
fat_sparse_bitset.offset	fat_sparse_bitset.m	/^                offset  :: int,$/;kq|-;/\<fat_sparse_bitset.offset\>/;'q;"	kind:fld	file:
fat_sparse_bitset.remove	fat_sparse_bitset.m	/^:- pred remove(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
fat_sparse_bitset.remove_gt	fat_sparse_bitset.m	/^:- func remove_gt(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_gt\>/;'q;"	kind:func
fat_sparse_bitset.remove_gt	fat_sparse_bitset.m	/^:- pred remove_gt(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<remove_gt\>/;'q;"	kind:pred
fat_sparse_bitset.remove_gt_2	fat_sparse_bitset.m	/^:- func remove_gt_2(fat_bitset_impl, int) = fat_bitset_impl.$/;kq|/^\<remove_gt_2\>/;'q;"	kind:func	file:
fat_sparse_bitset.remove_least	fat_sparse_bitset.m	/^:- pred remove_least(T::out,$/;kq|/^\<remove_least\>/;'q;"	kind:pred
fat_sparse_bitset.remove_leq	fat_sparse_bitset.m	/^:- func remove_leq(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_leq\>/;'q;"	kind:func
fat_sparse_bitset.remove_leq	fat_sparse_bitset.m	/^:- pred remove_leq(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<remove_leq\>/;'q;"	kind:pred
fat_sparse_bitset.remove_leq_2	fat_sparse_bitset.m	/^:- func remove_leq_2(fat_bitset_impl, int) = fat_bitset_impl.$/;kq|/^\<remove_leq_2\>/;'q;"	kind:func	file:
fat_sparse_bitset.remove_list	fat_sparse_bitset.m	/^:- pred remove_list(list(T)::in,$/;kq|/^\<remove_list\>/;'q;"	kind:pred
fat_sparse_bitset.rest	fat_sparse_bitset.m	/^                rest    :: fat_bitset_impl$/;kq|-;/\<fat_sparse_bitset.rest\>/;'q;"	kind:fld	file:
fat_sparse_bitset.set_bit	fat_sparse_bitset.m	/^:- func set_bit(int, int) = int.$/;kq|/^\<set_bit\>/;'q;"	kind:func	file:
fat_sparse_bitset.subset	fat_sparse_bitset.m	/^:- pred subset(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
fat_sparse_bitset.superset	fat_sparse_bitset.m	/^:- pred superset(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in)$/;kq|/^\<superset\>/;'q;"	kind:pred
fat_sparse_bitset.to_set	fat_sparse_bitset.m	/^:- func to_set(fat_sparse_bitset(T)) = set.set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
fat_sparse_bitset.union	fat_sparse_bitset.m	/^:- func union(fat_sparse_bitset(T), fat_sparse_bitset(T)) =$/;kq|/^\<union\>/;'q;"	kind:func
fat_sparse_bitset.union	fat_sparse_bitset.m	/^:- pred union(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<union\>/;'q;"	kind:pred
fat_sparse_bitset.union_2	fat_sparse_bitset.m	/^:- func union_2(fat_bitset_impl, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<union_2\>/;'q;"	kind:func	file:
fat_sparse_bitset.union_list	fat_sparse_bitset.m	/^:- func union_list(list(fat_sparse_bitset(T))) = fat_sparse_bitset(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
fat_sparse_bitset.union_list	fat_sparse_bitset.m	/^:- pred union_list(list(fat_sparse_bitset(T))::in,$/;kq|/^\<union_list\>/;'q;"	kind:pred
february	calendar.m	/^    ;       february$/;kq|-;/\<february\>/;'q;"	kind:cons
ferror	io.m	/^:- pred io.ferror(stream::in, int::out, string::out, io::di, io::uo) is det.$/;kq|/^\<io.ferror\>/;'q;"	kind:pred	file:
fetch_items	array.m	/^:- func array.fetch_items(array(T), int, int) = list(T).$/;kq|/^\<array.fetch_items\>/;'q;"	kind:func
fetch_items	array.m	/^:- pred array.fetch_items(array(T), int, int, list(T)).$/;kq|/^\<array.fetch_items\>/;'q;"	kind:pred
fetch_items	bt_array.m	/^:- func bt_array.fetch_items(bt_array(T), int, int) = list(T).$/;kq|/^\<bt_array.fetch_items\>/;'q;"	kind:func
fetch_items	bt_array.m	/^:- pred bt_array.fetch_items(bt_array(T)::in, int::in, int::in, list(T)::out)$/;kq|/^\<bt_array.fetch_items\>/;'q;"	kind:pred
ff	pprint.m	/^:- func ff(doc, int) = int is semidet.$/;kq|/^\<ff\>/;'q;"	kind:func	file:
field_name	term_to_xml.m	/^    ;       field_name$/;kq|-;/\<field_name\>/;'q;"	kind:cons
file	io.m	/^    --->    file(string)    % the file name$/;kq|-;/\<file\>/;'q;"	kind:cons
file_id	io.m	/^:- pred io.file_id(string::in, io.res(file_id)::out, io::di, io::uo) is det.$/;kq|/^\<io.file_id\>/;'q;"	kind:pred
file_id	io.m	/^:- type file_id ---> file_id.$/;kq|-;/\<file_id\>/;'q;"	kind:cons	file:
file_id	io.m	/^:- type file_id ---> file_id.$/;kq|-;/\<file_id\>/;'q;"	kind:type	file:
file_id_2	io.m	/^:- pred io.file_id_2(string::in, int::out, string::out, file_id::out,$/;kq|/^\<io.file_id_2\>/;'q;"	kind:pred	file:
file_modification_time	io.m	/^:- pred io.file_modification_time(string::in, io.res(time_t)::out,$/;kq|/^\<io.file_modification_time\>/;'q;"	kind:pred
file_modification_time_2	io.m	/^:- pred io.file_modification_time_2(string::in, int::out, string::out,$/;kq|/^\<io.file_modification_time_2\>/;'q;"	kind:pred	file:
file_special	getopt_io.m	/^    ;       file_special.$/;kq|-;/\<file_special\>/;'q;"	kind:cons
file_type	io.m	/^:- pred io.file_type(bool::in, string::in, io.res(file_type)::out,$/;kq|/^\<io.file_type\>/;'q;"	kind:pred
file_type	io.m	/^:- type io.file_type$/;kq|-;/\<file_type\>/;'q;"	kind:type
file_type_2	io.m	/^:- pred io.file_type_2(int::in, string::in, io.res(io.file_type)::out,$/;kq|/^\<io.file_type_2\>/;'q;"	kind:pred	file:
file_type_block_device	io.m	/^:- func file_type_block_device = file_type.$/;kq|/^\<file_type_block_device\>/;'q;"	kind:func	file:
file_type_character_device	io.m	/^:- func file_type_character_device = file_type.$/;kq|/^\<file_type_character_device\>/;'q;"	kind:func	file:
file_type_directory	io.m	/^:- func file_type_directory = file_type.$/;kq|/^\<file_type_directory\>/;'q;"	kind:func	file:
file_type_fifo	io.m	/^:- func file_type_fifo = file_type.$/;kq|/^\<file_type_fifo\>/;'q;"	kind:func	file:
file_type_implemented	io.m	/^:- pred file_type_implemented is semidet.$/;kq|/^\<file_type_implemented\>/;'q;"	kind:pred	file:
file_type_message_queue	io.m	/^:- func file_type_message_queue = file_type.$/;kq|/^\<file_type_message_queue\>/;'q;"	kind:func	file:
file_type_regular	io.m	/^:- func file_type_regular = file_type.$/;kq|/^\<file_type_regular\>/;'q;"	kind:func	file:
file_type_semaphore	io.m	/^:- func file_type_semaphore = file_type.$/;kq|/^\<file_type_semaphore\>/;'q;"	kind:func	file:
file_type_shared_memory	io.m	/^:- func file_type_shared_memory = file_type.$/;kq|/^\<file_type_shared_memory\>/;'q;"	kind:func	file:
file_type_socket	io.m	/^:- func file_type_socket = file_type.$/;kq|/^\<file_type_socket\>/;'q;"	kind:func	file:
file_type_symbolic_link	io.m	/^:- func file_type_symbolic_link = file_type.$/;kq|/^\<file_type_symbolic_link\>/;'q;"	kind:func	file:
file_type_unknown	io.m	/^:- func file_type_unknown = file_type.$/;kq|/^\<file_type_unknown\>/;'q;"	kind:func	file:
filter	assoc_list.m	/^:- func assoc_list.filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.filter\>/;'q;"	kind:func
filter	assoc_list.m	/^:- pred assoc_list.filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.filter\>/;'q;"	kind:pred
filter	assoc_list.m	/^:- pred assoc_list.filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.filter\>/;'q;"	kind:pred
filter	cord.m	/^:- pred filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter\>/;'q;"	kind:pred
filter	cord.m	/^:- pred filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter\>/;'q;"	kind:pred
filter	fat_sparse_bitset.m	/^:- func filter(pred(T), fat_sparse_bitset(T)) = fat_sparse_bitset(T)$/;kq|/^\<filter\>/;'q;"	kind:func
filter	fat_sparse_bitset.m	/^:- pred filter(pred(T), fat_sparse_bitset(T),$/;kq|/^\<filter\>/;'q;"	kind:pred
filter	list.m	/^:- func list.filter(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.filter\>/;'q;"	kind:func
filter	list.m	/^:- pred list.filter(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.filter\>/;'q;"	kind:pred
filter	list.m	/^:- pred list.filter(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.filter\>/;'q;"	kind:pred
filter	set.m	/^:- func set.filter(pred(T1), set(T1)) = set(T1).$/;kq|/^\<set.filter\>/;'q;"	kind:func
filter	set.m	/^:- pred set.filter(pred(T1), set(T1), set(T1)).$/;kq|/^\<set.filter\>/;'q;"	kind:pred
filter	set.m	/^:- pred set.filter(pred(T1), set(T1), set(T1), set(T1)).$/;kq|/^\<set.filter\>/;'q;"	kind:pred
filter	set_bbbtree.m	/^:- pred set_bbbtree.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_bbbtree.filter\>/;'q;"	kind:pred
filter	set_bbbtree.m	/^:- pred set_bbbtree.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_bbbtree.filter\>/;'q;"	kind:pred
filter	set_ctree234.m	/^:- pred set_ctree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.filter\>/;'q;"	kind:pred
filter	set_ctree234.m	/^:- pred set_ctree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.filter\>/;'q;"	kind:pred
filter	set_ordlist.m	/^:- func set_ordlist.filter(pred(T1), set_ordlist(T1)) = set_ordlist(T1).$/;kq|/^\<set_ordlist.filter\>/;'q;"	kind:func
filter	set_ordlist.m	/^:- pred set_ordlist.filter(pred(T1), set_ordlist(T1), set_ordlist(T1)).$/;kq|/^\<set_ordlist.filter\>/;'q;"	kind:pred
filter	set_ordlist.m	/^:- pred set_ordlist.filter(pred(T1), set_ordlist(T1),$/;kq|/^\<set_ordlist.filter\>/;'q;"	kind:pred
filter	set_tree234.m	/^:- func set_tree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.filter\>/;'q;"	kind:func
filter	set_tree234.m	/^:- pred set_tree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.filter\>/;'q;"	kind:pred
filter	set_tree234.m	/^:- pred set_tree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.filter\>/;'q;"	kind:pred
filter	set_unordlist.m	/^:- pred set_unordlist.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.filter\>/;'q;"	kind:pred
filter	set_unordlist.m	/^:- pred set_unordlist.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.filter\>/;'q;"	kind:pred
filter	sparse_bitset.m	/^:- func filter(pred(T), sparse_bitset(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<filter\>/;'q;"	kind:func
filter	sparse_bitset.m	/^:- pred filter(pred(T), sparse_bitset(T), sparse_bitset(T), sparse_bitset(T))$/;kq|/^\<filter\>/;'q;"	kind:pred
filter	test_bitset.m	/^:- func filter(pred(T)::in(pred(in) is semidet), test_bitset(T)::in)$/;kq|/^\<filter\>/;'q;"	kind:func
filter	test_bitset.m	/^:- pred filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter\>/;'q;"	kind:pred
filter	tree_bitset.m	/^:- func filter(pred(T), tree_bitset(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<filter\>/;'q;"	kind:func
filter	tree_bitset.m	/^:- pred filter(pred(T), tree_bitset(T), tree_bitset(T), tree_bitset(T))$/;kq|/^\<filter\>/;'q;"	kind:pred
filter_2	robdd.m	/^:- pred filter_2(pred(var(T)), pred(var(T)), robdd(T), robdd(T),$/;kq|/^\<filter_2\>/;'q;"	kind:pred	file:
filter_map	list.m	/^:- func list.filter_map(func(X) = Y, list(X)) = list(Y).$/;kq|/^\<list.filter_map\>/;'q;"	kind:func
filter_map	list.m	/^:- pred list.filter_map(pred(X, Y)::in(pred(in, out) is semidet),$/;kq|/^\<list.filter_map\>/;'q;"	kind:pred
filter_map	list.m	/^:- pred list.filter_map(pred(X, Y)::in(pred(in, out) is semidet),$/;kq|/^\<list.filter_map\>/;'q;"	kind:pred
filter_map	set.m	/^:- func set.filter_map(func(T1) = T2, set(T1)) = set(T2).$/;kq|/^\<set.filter_map\>/;'q;"	kind:func
filter_map	set.m	/^:- pred set.filter_map(pred(T1, T2), set(T1), set(T2)).$/;kq|/^\<set.filter_map\>/;'q;"	kind:pred
filter_map	set_bbbtree.m	/^:- func set_bbbtree.filter_map(func(T1) = T2, set_bbbtree(T1))$/;kq|/^\<set_bbbtree.filter_map\>/;'q;"	kind:func
filter_map	set_ctree234.m	/^:- func set_ctree234.filter_map(func(T1) = T2, set_ctree234(T1))$/;kq|/^\<set_ctree234.filter_map\>/;'q;"	kind:func
filter_map	set_ctree234.m	/^:- pred set_ctree234.filter_map(pred(T1, T2)::in(pred(in, out) is semidet),$/;kq|/^\<set_ctree234.filter_map\>/;'q;"	kind:pred
filter_map	set_ordlist.m	/^:- func set_ordlist.filter_map(func(T1) = T2, set_ordlist(T1))$/;kq|/^\<set_ordlist.filter_map\>/;'q;"	kind:func
filter_map	set_ordlist.m	/^:- pred set_ordlist.filter_map(pred(T1, T2), set_ordlist(T1),$/;kq|/^\<set_ordlist.filter_map\>/;'q;"	kind:pred
filter_map	set_tree234.m	/^:- func set_tree234.filter_map(func(T1) = T2, set_tree234(T1))$/;kq|/^\<set_tree234.filter_map\>/;'q;"	kind:func
filter_map	set_tree234.m	/^:- pred set_tree234.filter_map(pred(T1, T2)::in(pred(in, out) is semidet),$/;kq|/^\<set_tree234.filter_map\>/;'q;"	kind:pred
filter_map	set_unordlist.m	/^:- func set_unordlist.filter_map(func(T1) = T2, set_unordlist(T1))$/;kq|/^\<set_unordlist.filter_map\>/;'q;"	kind:func
filter_map_corresponding	list.m	/^:- func list.filter_map_corresponding(func(A, B) = C, list(A), list(B))$/;kq|/^\<list.filter_map_corresponding\>/;'q;"	kind:func
filter_map_corresponding3	list.m	/^:- func list.filter_map_corresponding3(func(A, B, C) = D,$/;kq|/^\<list.filter_map_corresponding3\>/;'q;"	kind:func
filter_map_foldl	list.m	/^:- pred list.filter_map_foldl(pred(X, Y, A, A)::in(pred(in, out, in, out)$/;kq|/^\<list.filter_map_foldl\>/;'q;"	kind:pred
filter_map_func	set_ctree234.m	/^:- pred set_ctree234.filter_map_func($/;kq|/^\<set_ctree234.filter_map_func\>/;'q;"	kind:pred	file:
filter_map_func	set_tree234.m	/^:- pred set_tree234.filter_map_func(func(T1) = T2, set_tree234(T1),$/;kq|/^\<set_tree234.filter_map_func\>/;'q;"	kind:pred	file:
filter_map_keys	injection.m	/^:- pred injection.filter_map_keys($/;kq|/^\<injection.filter_map_keys\>/;'q;"	kind:pred
filter_map_pred	set_ctree234.m	/^:- pred set_ctree234.filter_map_pred($/;kq|/^\<set_ctree234.filter_map_pred\>/;'q;"	kind:pred	file:
filter_map_pred	set_tree234.m	/^:- pred set_tree234.filter_map_pred($/;kq|/^\<set_tree234.filter_map_pred\>/;'q;"	kind:pred	file:
filter_node	cord.m	/^:- pred filter_node(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter_node\>/;'q;"	kind:pred	file:
filter_node	cord.m	/^:- pred filter_node(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter_node\>/;'q;"	kind:pred	file:
filter_values_with_key	injection.m	/^:- pred filter_values_with_key(K::in, V::in, K::in, map(V, K)::in,$/;kq|/^\<filter_values_with_key\>/;'q;"	kind:pred	file:
final_parser_state	parser.m	/^:- pred final_parser_state(state(Ops, T)::in, varset(T)::out,$/;kq|/^\<final_parser_state\>/;'q;"	kind:pred	file:
finalize	bit_buffer.read.m	/^:- pred finalize(read_buffer(Stream, State, Error), Stream, State,$/;kq|/^\<finalize\>/;'q;"	kind:pred
finalize	bit_buffer.write.m	/^:- pred finalize(write_buffer(Stream, State), Stream, State)$/;kq|/^\<finalize\>/;'q;"	kind:pred
finalize_state	io.m	/^:- pred io.finalize_state(io::di, io::uo) is det.$/;kq|/^\<io.finalize_state\>/;'q;"	kind:pred	file:
finalize_to_bitmap	bit_buffer.write.m	/^:- func finalize_to_bitmap(write_buffer) = bitmap.$/;kq|/^\<finalize_to_bitmap\>/;'q;"	kind:func
finally	exception.m	/^:- pred finally(pred(T, io, io), T, pred(io.res, io, io), io.res, io, io).$/;kq|/^\<finally\>/;'q;"	kind:pred
finally_2	exception.m	/^:- pred finally_2(pred(T, io, io), pred(io.res, io, io), T, io.res,$/;kq|/^\<finally_2\>/;'q;"	kind:pred	file:
find_depth	tree234.m	/^:- pred find_depth(tree234(K, V)::in, int::out) is det.$/;kq|/^\<find_depth\>/;'q;"	kind:pred	file:
find_field_names	term_to_xml.m	/^:- pred find_field_names(type_desc::in, list(int)::in, string::in,$/;kq|/^\<find_field_names\>/;'q;"	kind:pred	file:
find_first_map	list.m	/^:- pred list.find_first_map(pred(X, Y)::in(pred(in, out) is semidet),$/;kq|/^\<list.find_first_map\>/;'q;"	kind:pred
find_first_map2	list.m	/^:- pred list.find_first_map2(pred(X, A, B)::in(pred(in, out, out) is semidet),$/;kq|/^\<list.find_first_map2\>/;'q;"	kind:pred
find_first_map3	list.m	/^:- pred list.find_first_map3($/;kq|/^\<list.find_first_map3\>/;'q;"	kind:pred
find_first_match	list.m	/^:- pred list.find_first_match(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.find_first_match\>/;'q;"	kind:pred
find_followers	digraph.m	/^:- pred find_followers(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<find_followers\>/;'q;"	kind:pred	file:
find_functor	construct.m	/^:- pred find_functor(type_desc::in, string::in, int::in,$/;kq|/^\<find_functor\>/;'q;"	kind:pred
find_functor_2	construct.m	/^:- pred find_functor_2(type_desc::in, string::in, int::in,$/;kq|/^\<find_functor_2\>/;'q;"	kind:pred	file:
find_index_of_match	list.m	/^:- pred list.find_index_of_match(pred(T), list(T), int, int).$/;kq|/^\<list.find_index_of_match\>/;'q;"	kind:pred
find_interior_nodes_at_parent_offset	tree_bitset.m	/^:- pred find_interior_nodes_at_parent_offset(int::in, list(interior_node)::in,$/;kq|/^\<find_interior_nodes_at_parent_offset\>/;'q;"	kind:pred	file:
find_leaf_nodes_at_parent_offset	tree_bitset.m	/^:- pred find_leaf_nodes_at_parent_offset(int::in, list(interior_node)::in,$/;kq|/^\<find_leaf_nodes_at_parent_offset\>/;'q;"	kind:pred	file:
find_least_bit	fat_sparse_bitset.m	/^:- func find_least_bit(int) = int.$/;kq|/^\<find_least_bit\>/;'q;"	kind:func	file:
find_least_bit	sparse_bitset.m	/^:- func find_least_bit(int) = int.$/;kq|/^\<find_least_bit\>/;'q;"	kind:func	file:
find_least_bit	tree_bitset.m	/^:- func find_least_bit(int) = int.$/;kq|/^\<find_least_bit\>/;'q;"	kind:func	file:
find_least_bit_2	fat_sparse_bitset.m	/^:- func find_least_bit_2(int, int, int) = int.$/;kq|/^\<find_least_bit_2\>/;'q;"	kind:func	file:
find_least_bit_2	sparse_bitset.m	/^:- func find_least_bit_2(int, int, int) = int.$/;kq|/^\<find_least_bit_2\>/;'q;"	kind:func	file:
find_least_bit_2	tree_bitset.m	/^:- func find_least_bit_2(int, int, int) = int.$/;kq|/^\<find_least_bit_2\>/;'q;"	kind:func	file:
find_level	tree234.m	/^:- pred find_level(int::in, int::in, int::out,$/;kq|/^\<find_level\>/;'q;"	kind:pred	file:
find_matching_brace	dir.m	/^:- pred find_matching_brace(list(char)::in, list(list(char))::out,$/;kq|/^\<find_matching_brace\>/;'q;"	kind:pred	file:
find_matching_brace_or_comma	dir.m	/^:- pred find_matching_brace_or_comma(list(char)::in, list(list(char))::in,$/;kq|/^\<find_matching_brace_or_comma\>/;'q;"	kind:pred	file:
find_max_length	string.m	/^:- func find_max_length(justified_column) = int.$/;kq|/^\<find_max_length\>/;'q;"	kind:func	file:
find_max_length_with_limit	string.m	/^:- func find_max_length_with_limit(pair(justified_column, maybe(int)))$/;kq|/^\<find_max_length_with_limit\>/;'q;"	kind:func	file:
find_min_size_based_on_depth	tree234.m	/^:- pred find_min_size_based_on_depth(tree234(K, V)::in, int::out) is det.$/;kq|/^\<find_min_size_based_on_depth\>/;'q;"	kind:pred
find_necessary_keys	digraph.m	/^:- pred find_necessary_keys(pair(digraph_key_set(T))::in,$/;kq|/^\<find_necessary_keys\>/;'q;"	kind:pred	file:
find_non_zero_pos	string.m	/^:- func find_non_zero_pos(list(char), int) = int.$/;kq|/^\<find_non_zero_pos\>/;'q;"	kind:func	file:
find_slot	hash_table.m	/^:- func find_slot(hash_table(K, V), K) = int.$/;kq|/^\<find_slot\>/;'q;"	kind:func	file:
find_slot	version_hash_table.m	/^:- func find_slot(version_hash_table(K, V), K) = int.$/;kq|/^\<find_slot\>/;'q;"	kind:func	file:
find_slot_2	hash_table.m	/^:- pred find_slot_2(hash_pred(K)::in(hash_pred), K::in, int::in, int::out)$/;kq|/^\<find_slot_2\>/;'q;"	kind:pred	file:
find_slot_2	version_hash_table.m	/^:- pred find_slot_2(hash_pred(K)::in(hash_pred), K::in, int::in, int::out)$/;kq|/^\<find_slot_2\>/;'q;"	kind:pred	file:
finish_hex_escape	lexer.m	/^:- pred finish_hex_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<finish_hex_escape\>/;'q;"	kind:pred	file:
finish_octal_escape	lexer.m	/^:- pred finish_octal_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<finish_octal_escape\>/;'q;"	kind:pred	file:
finish_quoted_name	lexer.m	/^:- pred finish_quoted_name(char::in, list(char)::in, token::out) is det.$/;kq|/^\<finish_quoted_name\>/;'q;"	kind:pred	file:
finished	rtree.m	/^    ;       finished(int, orphans(K, V)).$/;kq|-;/\<finished\>/;'q;"	kind:cons	file:
first	queue.m	/^:- pred queue.first(queue(T)::in, T::out) is semidet.$/;kq|/^\<queue.first\>/;'q;"	kind:pred
first_bit_in_same_byte	bitmap.m	/^:- func first_bit_in_same_byte(bit_index) = bit_index.$/;kq|/^\<first_bit_in_same_byte\>/;'q;"	kind:func	file:
first_char	string.m	/^:- pred string.first_char(string, char, string).$/;kq|/^\<string.first_char\>/;'q;"	kind:pred
first_exist_quant_varnum	rtti_implementation.m	/^:- func first_exist_quant_varnum = int.$/;kq|/^\<first_exist_quant_varnum\>/;'q;"	kind:func	file:
fits_flat	pprint.m	/^:- pred fits_flat(doc::in, int::in) is semidet.$/;kq|/^\<fits_flat\>/;'q;"	kind:pred	file:
fix_2node_t0	set_ctree234.m	/^:- pred fix_2node_t0(T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_2node_t0\>/;'q;"	kind:pred	file:
fix_2node_t0	set_tree234.m	/^:- pred fix_2node_t0(E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_2node_t0\>/;'q;"	kind:pred	file:
fix_2node_t0	tree234.m	/^:- pred fix_2node_t0(K, V, tree234(K, V), tree234(K, V), tree234(K, V), bool).$/;kq|/^\<fix_2node_t0\>/;'q;"	kind:pred	file:
fix_2node_t1	set_ctree234.m	/^:- pred fix_2node_t1(T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_2node_t1\>/;'q;"	kind:pred	file:
fix_2node_t1	set_tree234.m	/^:- pred fix_2node_t1(E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_2node_t1\>/;'q;"	kind:pred	file:
fix_2node_t1	tree234.m	/^:- pred fix_2node_t1(K, V, tree234(K, V), tree234(K, V), tree234(K, V), bool).$/;kq|/^\<fix_2node_t1\>/;'q;"	kind:pred	file:
fix_3node_t0	set_ctree234.m	/^:- pred fix_3node_t0(T::in, T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_3node_t0\>/;'q;"	kind:pred	file:
fix_3node_t0	set_tree234.m	/^:- pred fix_3node_t0(E::in, E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_3node_t0\>/;'q;"	kind:pred	file:
fix_3node_t0	tree234.m	/^:- pred fix_3node_t0(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V),$/;kq|/^\<fix_3node_t0\>/;'q;"	kind:pred	file:
fix_3node_t1	set_ctree234.m	/^:- pred fix_3node_t1(T::in, T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_3node_t1\>/;'q;"	kind:pred	file:
fix_3node_t1	set_tree234.m	/^:- pred fix_3node_t1(E::in, E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_3node_t1\>/;'q;"	kind:pred	file:
fix_3node_t1	tree234.m	/^:- pred fix_3node_t1(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V),$/;kq|/^\<fix_3node_t1\>/;'q;"	kind:pred	file:
fix_3node_t2	set_ctree234.m	/^:- pred fix_3node_t2(T::in, T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_3node_t2\>/;'q;"	kind:pred	file:
fix_3node_t2	set_tree234.m	/^:- pred fix_3node_t2(E::in, E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_3node_t2\>/;'q;"	kind:pred	file:
fix_3node_t2	tree234.m	/^:- pred fix_3node_t2(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V),$/;kq|/^\<fix_3node_t2\>/;'q;"	kind:pred	file:
fix_4node_t0	set_ctree234.m	/^:- pred fix_4node_t0(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t0\>/;'q;"	kind:pred	file:
fix_4node_t0	set_tree234.m	/^:- pred fix_4node_t0(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t0\>/;'q;"	kind:pred	file:
fix_4node_t0	tree234.m	/^:- pred fix_4node_t0(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t0\>/;'q;"	kind:pred	file:
fix_4node_t1	set_ctree234.m	/^:- pred fix_4node_t1(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t1\>/;'q;"	kind:pred	file:
fix_4node_t1	set_tree234.m	/^:- pred fix_4node_t1(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t1\>/;'q;"	kind:pred	file:
fix_4node_t1	tree234.m	/^:- pred fix_4node_t1(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t1\>/;'q;"	kind:pred	file:
fix_4node_t2	set_ctree234.m	/^:- pred fix_4node_t2(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t2\>/;'q;"	kind:pred	file:
fix_4node_t2	set_tree234.m	/^:- pred fix_4node_t2(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t2\>/;'q;"	kind:pred	file:
fix_4node_t2	tree234.m	/^:- pred fix_4node_t2(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t2\>/;'q;"	kind:pred	file:
fix_4node_t3	set_ctree234.m	/^:- pred fix_4node_t3(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t3\>/;'q;"	kind:pred	file:
fix_4node_t3	set_tree234.m	/^:- pred fix_4node_t3(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t3\>/;'q;"	kind:pred	file:
fix_4node_t3	tree234.m	/^:- pred fix_4node_t3(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t3\>/;'q;"	kind:pred	file:
fixup_dirname	dir.m	/^:- func fixup_dirname(string) = string.$/;kq|/^\<fixup_dirname\>/;'q;"	kind:func	file:
flag	string.m	/^:- pred flag(char::in) is semidet.$/;kq|/^\<flag\>/;'q;"	kind:pred	file:
flags	string.m	/^                flags       :: list(char),$/;kq|-;/\<flags\>/;'q;"	kind:fld	file:
flags	string.m	/^:- pred flags(list(char)::out, list(char)::in, list(char)::out) is semidet.$/;kq|/^\<flags\>/;'q;"	kind:pred	file:
flags	string.m	/^:- type flags == list(char).$/;kq|-;/\<flags\>/;'q;"	kind:type	file:
flip	bitmap.m	/^:- func flip(bitmap, bit_index) = bitmap.$/;kq|/^\<flip\>/;'q;"	kind:func
flip	bitmap.m	/^:- pred flip(bit_index, bitmap, bitmap).$/;kq|/^\<flip\>/;'q;"	kind:pred
flip	version_bitmap.m	/^:- func flip(version_bitmap, int) = version_bitmap.$/;kq|/^\<flip\>/;'q;"	kind:func
flip	version_bitmap.m	/^:- pred flip(int::in, version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<flip\>/;'q;"	kind:pred
float	float.m	/^:- func float(int) = float.$/;kq|/^\<float\>/;'q;"	kind:func
float	integer.m	/^:- func integer.float(integer) = float.$/;kq|/^\<integer.float\>/;'q;"	kind:func
float	lexer.m	/^    ;       float(float)$/;kq|-;/\<float\>/;'q;"	kind:cons
float	term.m	/^    ;       float(float)$/;kq|-;/\<float\>/;'q;"	kind:cons
float.+	float.m	/^:- func + (float::in) = (float::uo) is det.$/;kq|/^\<+\>/;'q;"	kind:func
float.-	float.m	/^:- func - (float::in) = (float::uo) is det.$/;kq|/^\<-\>/;'q;"	kind:func
float.abs	float.m	/^:- func abs(float) = float.$/;kq|/^\<abs\>/;'q;"	kind:func
float.ceiling_to_int	float.m	/^:- func ceiling_to_int(float) = int.$/;kq|/^\<ceiling_to_int\>/;'q;"	kind:func
float.epsilon	float.m	/^:- func float.epsilon = float.$/;kq|/^\<float.epsilon\>/;'q;"	kind:func
float.float_to_doc	float.m	/^:- func float.float_to_doc(float) = doc.$/;kq|/^\<float.float_to_doc\>/;'q;"	kind:func
float.floor_to_int	float.m	/^:- func floor_to_int(float) = int.$/;kq|/^\<floor_to_int\>/;'q;"	kind:func
float.hash	float.m	/^:- func hash(float) = int.$/;kq|/^\<hash\>/;'q;"	kind:func
float.is_inf	float.m	/^:- pred is_inf(float::in) is semidet.$/;kq|/^\<is_inf\>/;'q;"	kind:pred
float.is_nan	float.m	/^:- pred is_nan(float::in) is semidet.$/;kq|/^\<is_nan\>/;'q;"	kind:pred
float.is_nan_or_inf	float.m	/^:- pred is_nan_or_inf(float::in) is semidet.$/;kq|/^\<is_nan_or_inf\>/;'q;"	kind:pred
float.mantissa_digits	float.m	/^:- func float.mantissa_digits = int.$/;kq|/^\<float.mantissa_digits\>/;'q;"	kind:func
float.max	float.m	/^:- func float.max = float.$/;kq|/^\<float.max\>/;'q;"	kind:func
float.max	float.m	/^:- func max(float, float) = float.$/;kq|/^\<max\>/;'q;"	kind:func
float.max_exponent	float.m	/^:- func float.max_exponent = int.$/;kq|/^\<float.max_exponent\>/;'q;"	kind:func
float.min	float.m	/^:- func float.min = float.$/;kq|/^\<float.min\>/;'q;"	kind:func
float.min	float.m	/^:- func min(float, float) = float.$/;kq|/^\<min\>/;'q;"	kind:func
float.min_exponent	float.m	/^:- func float.min_exponent = int.$/;kq|/^\<float.min_exponent\>/;'q;"	kind:func
float.multiply_by_pow	float.m	/^:- func float.multiply_by_pow(float, float, int) = float.$/;kq|/^\<float.multiply_by_pow\>/;'q;"	kind:func	file:
float.pow	float.m	/^:- func pow(float, int) = float.$/;kq|/^\<pow\>/;'q;"	kind:func
float.radix	float.m	/^:- func float.radix = int.$/;kq|/^\<float.radix\>/;'q;"	kind:func
float.round_to_int	float.m	/^:- func round_to_int(float) = int.$/;kq|/^\<round_to_int\>/;'q;"	kind:func
float.truncate_to_int	float.m	/^:- func truncate_to_int(float) = int.$/;kq|/^\<truncate_to_int\>/;'q;"	kind:func
float.unchecked_quotient	float.m	/^:- func unchecked_quotient(float::in, float::in) = (float::uo) is det.$/;kq|/^\<unchecked_quotient\>/;'q;"	kind:func
float32_bits_string	float.m	/^:- func float32_bits_string(float::in) = (string::uo) is det.$/;kq|/^\<float32_bits_string\>/;'q;"	kind:func
float64_bits_string	float.m	/^:- func float64_bits_string(float::in) = (string::uo) is det.$/;kq|/^\<float64_bits_string\>/;'q;"	kind:func
float::in	float.m	/^:- func (float::in) * (float::in) = (float::uo) is det.$/;kq|/^\<float::in\>/;'q;"	kind:func
float::in	float.m	/^:- func (float::in) + (float::in) = (float::uo) is det.$/;kq|/^\<float::in\>/;'q;"	kind:func
float::in	float.m	/^:- func (float::in) - (float::in) = (float::uo) is det.$/;kq|/^\<float::in\>/;'q;"	kind:func
float::in	float.m	/^:- func (float::in) \/ (float::in) = (float::uo) is det.$/;kq|/^\<float::in\>/;'q;"	kind:func
float::in	float.m	/^:- pred (float::in)  < (float::in) is semidet.$/;kq|/^\<float::in\>/;'q;"	kind:pred
float::in	float.m	/^:- pred (float::in) =< (float::in) is semidet.$/;kq|/^\<float::in\>/;'q;"	kind:pred
float::in	float.m	/^:- pred (float::in) >  (float::in) is semidet.$/;kq|/^\<float::in\>/;'q;"	kind:pred
float::in	float.m	/^:- pred (float::in) >= (float::in) is semidet.$/;kq|/^\<float::in\>/;'q;"	kind:pred
float_box	private_builtin.m	/^    --->    float_box(float).$/;kq|-;/\<float_box\>/;'q;"	kind:cons
float_box	private_builtin.m	/^:- type float_box$/;kq|-;/\<float_box\>/;'q;"	kind:type
float_domain_checks	float.m	/^:- pred float_domain_checks is semidet.$/;kq|/^\<float_domain_checks\>/;'q;"	kind:pred	file:
float_hash	hash_table.m	/^:- pred float_hash(float::in, int::out) is det.$/;kq|/^\<float_hash\>/;'q;"	kind:pred
float_hash	version_hash_table.m	/^:- pred float_hash(float::in, int::out) is det.$/;kq|/^\<float_hash\>/;'q;"	kind:pred
float_list	integer.m	/^:- func float_list(float, float, list(int)) = float.$/;kq|/^\<float_list\>/;'q;"	kind:func	file:
float_literal	parsing_utils.m	/^:- pred float_literal(src::in, float::out,$/;kq|/^\<float_literal\>/;'q;"	kind:pred
float_literal_as_string	parsing_utils.m	/^:- pred float_literal_as_string(src::in, string::out,$/;kq|/^\<float_literal_as_string\>/;'q;"	kind:pred
float_to_doc	float.m	/^:- func float.float_to_doc(float) = doc.$/;kq|/^\<float.float_to_doc\>/;'q;"	kind:func
float_to_string	string.m	/^:- func string.float_to_string(float::in) = (string::uo) is det.$/;kq|/^\<string.float_to_string\>/;'q;"	kind:func
float_to_string	string.m	/^:- pred string.float_to_string(float::in, string::uo) is det.$/;kq|/^\<string.float_to_string\>/;'q;"	kind:pred
float_to_string_2	string.m	/^:- func string.float_to_string_2(int, float) = (string) is det.$/;kq|/^\<string.float_to_string_2\>/;'q;"	kind:func	file:
floor	math.m	/^:- func math.floor(float) = float.$/;kq|/^\<math.floor\>/;'q;"	kind:func
floor_to_int	float.m	/^:- func floor_to_int(float) = int.$/;kq|/^\<floor_to_int\>/;'q;"	kind:func
floor_to_multiple_of_bits_per_byte	bitmap.m	/^:- func floor_to_multiple_of_bits_per_byte(int) = int.$/;kq|/^\<floor_to_multiple_of_bits_per_byte\>/;'q;"	kind:func	file:
floor_to_multiple_of_bits_per_int	int.m	/^:- func floor_to_multiple_of_bits_per_int(int) = int.$/;kq|/^\<floor_to_multiple_of_bits_per_int\>/;'q;"	kind:func
flush	bit_buffer.write.m	/^:- pred flush(write_buffer(Stream, State), write_buffer(Stream, State))$/;kq|/^\<flush\>/;'q;"	kind:pred
flush	io.m	/^    pred(flush\/3) is io.flush_binary_output$/;kq|-;/\<flush\>/;'q;"	kind:tcim	file:
flush	io.m	/^    pred(flush\/3) is io.flush_output$/;kq|-;/\<flush\>/;'q;"	kind:tcim	file:
flush	stream.m	/^    pred flush(Stream::in, State::di, State::uo) is det$/;kq|-;/\<flush\>/;'q;"	kind:tcm
flush_all_to_stream	bit_buffer.write.m	/^:- pred flush_all_to_stream(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<flush_all_to_stream\>/;'q;"	kind:pred
flush_binary_output	io.m	/^:- pred io.flush_binary_output(io.binary_output_stream::in,$/;kq|/^\<io.flush_binary_output\>/;'q;"	kind:pred
flush_binary_output	io.m	/^:- pred io.flush_binary_output(io::di, io::uo) is det.$/;kq|/^\<io.flush_binary_output\>/;'q;"	kind:pred
flush_binary_output_2	io.m	/^:- pred io.flush_binary_output_2(io.stream::in, io::di, io::uo) is det.$/;kq|/^\<io.flush_binary_output_2\>/;'q;"	kind:pred	file:
flush_chunk_to_stream	bit_buffer.write.m	/^:- pred flush_chunk_to_stream(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<flush_chunk_to_stream\>/;'q;"	kind:pred
flush_output	io.m	/^:- pred io.flush_output(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.flush_output\>/;'q;"	kind:pred
flush_output	io.m	/^:- pred io.flush_output(io::di, io::uo) is det.$/;kq|/^\<io.flush_output\>/;'q;"	kind:pred
flush_output_2	io.m	/^:- pred io.flush_output_2(io.stream::in, io::di, io::uo) is det.$/;kq|/^\<io.flush_output_2\>/;'q;"	kind:pred	file:
fmt_array	pretty_printer.m	/^:- func fmt_array(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_array\>/;'q;"	kind:func	file:
fmt_char	pretty_printer.m	/^:- func fmt_char(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_char\>/;'q;"	kind:func	file:
fmt_float	pretty_printer.m	/^:- func fmt_float(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_float\>/;'q;"	kind:func	file:
fmt_int	pretty_printer.m	/^:- func fmt_int(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_int\>/;'q;"	kind:func	file:
fmt_list	pretty_printer.m	/^:- func fmt_list(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_list\>/;'q;"	kind:func	file:
fmt_string	pretty_printer.m	/^:- func fmt_string(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_string\>/;'q;"	kind:func	file:
fmt_tree234	pretty_printer.m	/^:- func fmt_tree234(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_tree234\>/;'q;"	kind:func	file:
fmt_version_array	pretty_printer.m	/^:- func fmt_version_array(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_version_array\>/;'q;"	kind:func	file:
fold	hash_table.m	/^:- func fold(func(K, V, T) = T, hash_table(K, V), T) = T.$/;kq|/^\<fold\>/;'q;"	kind:func
fold	hash_table.m	/^:- pred fold(pred(K, V, T, T), hash_table(K, V), T, T).$/;kq|/^\<fold\>/;'q;"	kind:pred
fold	rtree.m	/^:- pred rtree.fold(pred(K, V, A, A), rtree(K, V), A, A).$/;kq|/^\<rtree.fold\>/;'q;"	kind:pred
fold	set.m	/^:- func set.fold(func(T, A) = A, set(T), A) = A.$/;kq|/^\<set.fold\>/;'q;"	kind:func
fold	set.m	/^:- pred set.fold(pred(T, A, A), set(T), A, A).$/;kq|/^\<set.fold\>/;'q;"	kind:pred
fold	set_bbbtree.m	/^:- func set_bbbtree.fold(func(T1, T2) = T2, set_bbbtree(T1), T2) = T2.$/;kq|/^\<set_bbbtree.fold\>/;'q;"	kind:func
fold	set_bbbtree.m	/^:- pred set_bbbtree.fold(pred(T1, T2, T2), set_bbbtree(T1), T2, T2).$/;kq|/^\<set_bbbtree.fold\>/;'q;"	kind:pred
fold	set_ctree234.m	/^:- func set_ctree234.fold(func(T1, T2) = T2, set_ctree234(T1), T2) = T2.$/;kq|/^\<set_ctree234.fold\>/;'q;"	kind:func
fold	set_ctree234.m	/^:- pred set_ctree234.fold(pred(T1, T2, T2), set_ctree234(T1), T2, T2).$/;kq|/^\<set_ctree234.fold\>/;'q;"	kind:pred
fold	set_ordlist.m	/^:- func set_ordlist.fold(func(T1, T2) = T2, set_ordlist(T1), T2) = T2.$/;kq|/^\<set_ordlist.fold\>/;'q;"	kind:func
fold	set_ordlist.m	/^:- pred set_ordlist.fold(pred(T1, T2, T2), set_ordlist(T1), T2, T2).$/;kq|/^\<set_ordlist.fold\>/;'q;"	kind:pred
fold	set_tree234.m	/^:- func set_tree234.fold(func(T1, T2) = T2, set_tree234(T1), T2) = T2.$/;kq|/^\<set_tree234.fold\>/;'q;"	kind:func
fold	set_tree234.m	/^:- pred set_tree234.fold(pred(T1, T2, T2), set_tree234(T1), T2, T2).$/;kq|/^\<set_tree234.fold\>/;'q;"	kind:pred
fold	set_unordlist.m	/^:- func set_unordlist.fold(func(T1, T2) = T2, set_unordlist(T1), T2) = T2.$/;kq|/^\<set_unordlist.fold\>/;'q;"	kind:func
fold	set_unordlist.m	/^:- pred set_unordlist.fold(pred(T1, T2, T2), set_unordlist(T1), T2, T2).$/;kq|/^\<set_unordlist.fold\>/;'q;"	kind:pred
fold	version_hash_table.m	/^:- func fold(func(K, V, T) = T, version_hash_table(K, V), T) = T.$/;kq|/^\<fold\>/;'q;"	kind:func
fold	version_hash_table.m	/^:- pred fold(pred(K, V, T, T), version_hash_table(K, V), T, T).$/;kq|/^\<fold\>/;'q;"	kind:pred
fold2	set.m	/^:- pred set.fold2(pred(T, A, A, B, B), set(T), A, A, B, B).$/;kq|/^\<set.fold2\>/;'q;"	kind:pred
fold2	set_bbbtree.m	/^:- pred set_bbbtree.fold2(pred(T1, T2, T2, T3, T3), set_bbbtree(T1),$/;kq|/^\<set_bbbtree.fold2\>/;'q;"	kind:pred
fold2	set_ctree234.m	/^:- pred set_ctree234.fold2(pred(T1, T2, T2, T3, T3), set_ctree234(T1),$/;kq|/^\<set_ctree234.fold2\>/;'q;"	kind:pred
fold2	set_ordlist.m	/^:- pred set_ordlist.fold2(pred(T1, T2, T2, T3, T3), set_ordlist(T1),$/;kq|/^\<set_ordlist.fold2\>/;'q;"	kind:pred
fold2	set_tree234.m	/^:- pred set_tree234.fold2(pred(T1, T2, T2, T3, T3), set_tree234(T1),$/;kq|/^\<set_tree234.fold2\>/;'q;"	kind:pred
fold2	set_unordlist.m	/^:- pred set_unordlist.fold2(pred(T1, T2, T2, T3, T3), set_unordlist(T1),$/;kq|/^\<set_unordlist.fold2\>/;'q;"	kind:pred
fold2_bits	fat_sparse_bitset.m	/^:- pred fold2_bits(fold_direction, pred(T, U, U, V, V),$/;kq|/^\<fold2_bits\>/;'q;"	kind:pred	file:
fold2_bits	sparse_bitset.m	/^:- pred fold2_bits(fold_direction, pred(T, U, U, V, V),$/;kq|/^\<fold2_bits\>/;'q;"	kind:pred	file:
fold2_bits	tree_bitset.m	/^:- pred fold2_bits(fold_direction, pred(T, U, U, V, V),$/;kq|/^\<fold2_bits\>/;'q;"	kind:pred	file:
fold3	set.m	/^:- pred set.fold3(pred(T, A, A, B, B, C, C), set(T), A, A, B, B, C, C).$/;kq|/^\<set.fold3\>/;'q;"	kind:pred
fold3	set_bbbtree.m	/^:- pred set_bbbtree.fold3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_bbbtree.fold3\>/;'q;"	kind:pred
fold3	set_ctree234.m	/^:- pred set_ctree234.fold3($/;kq|/^\<set_ctree234.fold3\>/;'q;"	kind:pred
fold3	set_ordlist.m	/^:- pred set_ordlist.fold3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_ordlist.fold3\>/;'q;"	kind:pred
fold3	set_tree234.m	/^:- pred set_tree234.fold3($/;kq|/^\<set_tree234.fold3\>/;'q;"	kind:pred
fold3	set_unordlist.m	/^:- pred set_unordlist.fold3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_unordlist.fold3\>/;'q;"	kind:pred
fold4	set.m	/^:- pred set.fold4(pred(T, A, A, B, B, C, C, D, D), set(T), A, A, B, B,$/;kq|/^\<set.fold4\>/;'q;"	kind:pred
fold4	set_bbbtree.m	/^:- pred set_bbbtree.fold4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_bbbtree.fold4\>/;'q;"	kind:pred
fold4	set_ctree234.m	/^:- pred set_ctree234.fold4($/;kq|/^\<set_ctree234.fold4\>/;'q;"	kind:pred
fold4	set_ordlist.m	/^:- pred set_ordlist.fold4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_ordlist.fold4\>/;'q;"	kind:pred
fold4	set_tree234.m	/^:- pred set_tree234.fold4($/;kq|/^\<set_tree234.fold4\>/;'q;"	kind:pred
fold4	set_unordlist.m	/^:- pred set_unordlist.fold4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_unordlist.fold4\>/;'q;"	kind:pred
fold5	set.m	/^:- pred set.fold5(pred(T, A, A, B, B, C, C, D, D, E, E), set(T), A, A, B, B,$/;kq|/^\<set.fold5\>/;'q;"	kind:pred
fold5	set_bbbtree.m	/^:- pred set_bbbtree.fold5($/;kq|/^\<set_bbbtree.fold5\>/;'q;"	kind:pred
fold5	set_ctree234.m	/^:- pred set_ctree234.fold5($/;kq|/^\<set_ctree234.fold5\>/;'q;"	kind:pred
fold5	set_ordlist.m	/^:- pred set_ordlist.fold5($/;kq|/^\<set_ordlist.fold5\>/;'q;"	kind:pred
fold5	set_tree234.m	/^:- pred set_tree234.fold5($/;kq|/^\<set_tree234.fold5\>/;'q;"	kind:pred
fold5	set_unordlist.m	/^:- pred set_unordlist.fold5($/;kq|/^\<set_unordlist.fold5\>/;'q;"	kind:pred
fold6	set.m	/^:- pred set.fold6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F), set(T),$/;kq|/^\<set.fold6\>/;'q;"	kind:pred
fold6	set_bbbtree.m	/^:- pred set_bbbtree.fold6($/;kq|/^\<set_bbbtree.fold6\>/;'q;"	kind:pred
fold6	set_ctree234.m	/^:- pred set_ctree234.fold6($/;kq|/^\<set_ctree234.fold6\>/;'q;"	kind:pred
fold6	set_ordlist.m	/^:- pred set_ordlist.fold6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F),$/;kq|/^\<set_ordlist.fold6\>/;'q;"	kind:pred
fold6	set_tree234.m	/^:- pred set_tree234.fold6($/;kq|/^\<set_tree234.fold6\>/;'q;"	kind:pred
fold6	set_unordlist.m	/^:- pred set_unordlist.fold6($/;kq|/^\<set_unordlist.fold6\>/;'q;"	kind:pred
fold_2	rtree.m	/^:- pred fold_2(pred(K, V, A, A), rtree_2(K, V), A, A).$/;kq|/^\<fold_2\>/;'q;"	kind:pred	file:
fold_bits	fat_sparse_bitset.m	/^:- pred fold_bits(fold_direction, pred(T, U, U),$/;kq|/^\<fold_bits\>/;'q;"	kind:pred	file:
fold_bits	sparse_bitset.m	/^:- pred fold_bits(fold_direction, pred(T, U, U),$/;kq|/^\<fold_bits\>/;'q;"	kind:pred	file:
fold_bits	tree_bitset.m	/^:- pred fold_bits(fold_direction, pred(T, U, U),$/;kq|/^\<fold_bits\>/;'q;"	kind:pred	file:
fold_direction	fat_sparse_bitset.m	/^:- type fold_direction$/;kq|-;/\<fold_direction\>/;'q;"	kind:type	file:
fold_direction	sparse_bitset.m	/^:- type fold_direction$/;kq|-;/\<fold_direction\>/;'q;"	kind:type	file:
fold_direction	tree_bitset.m	/^:- type fold_direction$/;kq|-;/\<fold_direction\>/;'q;"	kind:type	file:
fold_down	int.m	/^:- func int.fold_down(func(int, T) = T, int, int, T) = T.$/;kq|/^\<int.fold_down\>/;'q;"	kind:func
fold_down	int.m	/^:- pred int.fold_down(pred(int, T, T), int, int, T, T).$/;kq|/^\<int.fold_down\>/;'q;"	kind:pred
fold_down2	int.m	/^:- pred int.fold_down2(pred(int, T, T, U, U), int, int, T, T, U, U).$/;kq|/^\<int.fold_down2\>/;'q;"	kind:pred
fold_down3	int.m	/^:- pred int.fold_down3(pred(int, T, T, U, U, V, V), int, int, T, T, U, U, V, V).$/;kq|/^\<int.fold_down3\>/;'q;"	kind:pred
fold_f	hash_table.m	/^:- pred fold_f(func(K, V, T) = T, hash_table_alist(K, V), T, T).$/;kq|/^\<fold_f\>/;'q;"	kind:pred	file:
fold_f	version_hash_table.m	/^:- pred fold_f(func(K, V, T) = T, hash_table_alist(K, V), T, T).$/;kq|/^\<fold_f\>/;'q;"	kind:pred	file:
fold_maybe	maybe.m	/^:- func fold_maybe(func(T, U) = U, maybe(T), U) = U.$/;kq|/^\<fold_maybe\>/;'q;"	kind:func
fold_maybe	maybe.m	/^:- pred fold_maybe(pred(T, U, U), maybe(T), U, U).$/;kq|/^\<fold_maybe\>/;'q;"	kind:pred
fold_p	hash_table.m	/^:- pred fold_p(pred(K, V, T, T), hash_table_alist(K, V), T, T).$/;kq|/^\<fold_p\>/;'q;"	kind:pred	file:
fold_p	version_hash_table.m	/^:- pred fold_p(pred(K, V, T, T), hash_table_alist(K, V), T, T).$/;kq|/^\<fold_p\>/;'q;"	kind:pred	file:
fold_subtree	rtree.m	/^:- pred fold_subtree(pred(K, V, A, A), K, rtree_2(K, V), A, A).$/;kq|/^\<fold_subtree\>/;'q;"	kind:pred	file:
fold_up	int.m	/^:- func int.fold_up(func(int, T) = T, int, int, T) = T.$/;kq|/^\<int.fold_up\>/;'q;"	kind:func
fold_up	int.m	/^:- pred int.fold_up(pred(int, T, T), int, int, T, T).$/;kq|/^\<int.fold_up\>/;'q;"	kind:pred
fold_up2	int.m	/^:- pred int.fold_up2(pred(int, T, T, U, U), int, int, T, T, U, U).$/;kq|/^\<int.fold_up2\>/;'q;"	kind:pred
fold_up3	int.m	/^:- pred int.fold_up3(pred(int, T, T, U, U, V, V), int, int, T, T, U, U, V, V).$/;kq|/^\<int.fold_up3\>/;'q;"	kind:pred
foldl	array.m	/^:- func array.foldl(func(T1, T2) = T2, array(T1), T2) = T2.$/;kq|/^\<array.foldl\>/;'q;"	kind:func
foldl	array.m	/^:- pred array.foldl(pred(T1, T2, T2), array(T1), T2, T2).$/;kq|/^\<array.foldl\>/;'q;"	kind:pred
foldl	bag.m	/^:- pred bag.foldl(pred(T, int, A, A), bag(T), A, A).$/;kq|/^\<bag.foldl\>/;'q;"	kind:pred
foldl	bimap.m	/^:- func bimap.foldl(func(K, V, A) = A, bimap(K, V), A) = A.$/;kq|/^\<bimap.foldl\>/;'q;"	kind:func
foldl	bimap.m	/^:- pred bimap.foldl(pred(K, V, A, A), bimap(K, V), A, A).$/;kq|/^\<bimap.foldl\>/;'q;"	kind:pred
foldl	cord.m	/^:- func foldl(func(T, U) = U, cord(T), U) = U.$/;kq|/^\<foldl\>/;'q;"	kind:func
foldl	fat_sparse_bitset.m	/^:- func foldl(func(T, U) = U, fat_sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
foldl	fat_sparse_bitset.m	/^:- pred foldl(pred(T, U, U), fat_sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
foldl	list.m	/^:- func list.foldl(func(L, A) = A, list(L), A) = A.$/;kq|/^\<list.foldl\>/;'q;"	kind:func
foldl	list.m	/^:- pred list.foldl(pred(L, A, A), list(L), A, A).$/;kq|/^\<list.foldl\>/;'q;"	kind:pred
foldl	map.m	/^:- func map.foldl(func(K, V, A) = A, map(K, V), A) = A.$/;kq|/^\<map.foldl\>/;'q;"	kind:func
foldl	map.m	/^:- pred map.foldl(pred(K, V, A, A), map(K, V), A, A).$/;kq|/^\<map.foldl\>/;'q;"	kind:pred
foldl	rbtree.m	/^:- func rbtree.foldl(func(K, V, T) = T, rbtree(K, V), T) = T.$/;kq|/^\<rbtree.foldl\>/;'q;"	kind:func
foldl	rbtree.m	/^:- pred rbtree.foldl(pred(K, V, T, T), rbtree(K, V), T, T).$/;kq|/^\<rbtree.foldl\>/;'q;"	kind:pred
foldl	set.m	/^:- func set.foldl(func(T, A) = A, set(T), A) = A.$/;kq|/^\<set.foldl\>/;'q;"	kind:func
foldl	set.m	/^:- pred set.foldl(pred(T, A, A), set(T), A, A).$/;kq|/^\<set.foldl\>/;'q;"	kind:pred
foldl	set_ordlist.m	/^:- func set_ordlist.foldl(func(T1, T2) = T2, set_ordlist(T1), T2) = T2.$/;kq|/^\<set_ordlist.foldl\>/;'q;"	kind:func
foldl	set_ordlist.m	/^:- pred set_ordlist.foldl(pred(T1, T2, T2), set_ordlist(T1), T2, T2).$/;kq|/^\<set_ordlist.foldl\>/;'q;"	kind:pred
foldl	set_tree234.m	/^:- func set_tree234.foldl(func(T1, T2) = T2, set_tree234(T1), T2) = T2.$/;kq|/^\<set_tree234.foldl\>/;'q;"	kind:func
foldl	set_tree234.m	/^:- pred set_tree234.foldl(pred(T1, T2, T2), set_tree234(T1), T2, T2).$/;kq|/^\<set_tree234.foldl\>/;'q;"	kind:pred
foldl	sparse_bitset.m	/^:- func foldl(func(T, U) = U, sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
foldl	sparse_bitset.m	/^:- pred foldl(pred(T, U, U), sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
foldl	string.m	/^:- func string.foldl(func(char, A) = A, string, A) = A.$/;kq|/^\<string.foldl\>/;'q;"	kind:func
foldl	string.m	/^:- pred string.foldl(pred(char, A, A), string, A, A).$/;kq|/^\<string.foldl\>/;'q;"	kind:pred
foldl	test_bitset.m	/^:- func foldl(func(T, Acc) = Acc, test_bitset(T), Acc) = Acc <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
foldl	test_bitset.m	/^:- pred foldl(pred(T, Acc, Acc), test_bitset(T), Acc, Acc) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
foldl	tree234.m	/^:- func tree234.foldl(func(K, V, A) = A, tree234(K, V), A) = A.$/;kq|/^\<tree234.foldl\>/;'q;"	kind:func
foldl	tree234.m	/^:- pred tree234.foldl(pred(K, V, A, A), tree234(K, V), A, A).$/;kq|/^\<tree234.foldl\>/;'q;"	kind:pred
foldl	tree_bitset.m	/^:- func foldl(func(T, U) = U, tree_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
foldl	tree_bitset.m	/^:- pred foldl(pred(T, U, U), tree_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
foldl	version_array.m	/^:- func foldl(func(T1, T2) = T2, version_array(T1), T2) = T2.$/;kq|/^\<foldl\>/;'q;"	kind:func
foldl	version_array.m	/^:- pred foldl(pred(T1, T2, T2), version_array(T1), T2, T2).$/;kq|/^\<foldl\>/;'q;"	kind:pred
foldl2	array.m	/^:- pred array.foldl2(pred(T1, T2, T2, T3, T3), array(T1), T2, T2, T3, T3).$/;kq|/^\<array.foldl2\>/;'q;"	kind:pred
foldl2	bag.m	/^:- pred bag.foldl2(pred(T, int, A, A, B, B), bag(T), A, A, B, B).$/;kq|/^\<bag.foldl2\>/;'q;"	kind:pred
foldl2	bimap.m	/^:- pred bimap.foldl2(pred(K, V, A, A, B, B), bimap(K, V), A, A, B, B).$/;kq|/^\<bimap.foldl2\>/;'q;"	kind:pred
foldl2	dir.m	/^:- pred dir.foldl2(dir.foldl_pred(T)::in(dir.foldl_pred), string::in,$/;kq|/^\<dir.foldl2\>/;'q;"	kind:pred
foldl2	fat_sparse_bitset.m	/^:- pred foldl2(pred(T, U, U, V, V), fat_sparse_bitset(T), U, U, V, V)$/;kq|/^\<foldl2\>/;'q;"	kind:pred
foldl2	list.m	/^:- pred list.foldl2(pred(L, A, A, Z, Z), list(L), A, A, Z, Z).$/;kq|/^\<list.foldl2\>/;'q;"	kind:pred
foldl2	map.m	/^:- pred map.foldl2(pred(K, V, A, A, B, B), map(K, V), A, A, B, B).$/;kq|/^\<map.foldl2\>/;'q;"	kind:pred
foldl2	rbtree.m	/^:- pred rbtree.foldl2(pred(K, V, T, T, U, U), rbtree(K, V), T, T, U, U).$/;kq|/^\<rbtree.foldl2\>/;'q;"	kind:pred
foldl2	set.m	/^:- pred set.foldl2(pred(T, A, A, B, B), set(T), A, A, B, B).$/;kq|/^\<set.foldl2\>/;'q;"	kind:pred
foldl2	set_ordlist.m	/^:- pred set_ordlist.foldl2(pred(T1, T2, T2, T3, T3), set_ordlist(T1),$/;kq|/^\<set_ordlist.foldl2\>/;'q;"	kind:pred
foldl2	set_tree234.m	/^:- pred set_tree234.foldl2(pred(T1, T2, T2, T3, T3), set_tree234(T1),$/;kq|/^\<set_tree234.foldl2\>/;'q;"	kind:pred
foldl2	sparse_bitset.m	/^:- pred foldl2(pred(T, U, U, V, V), sparse_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldl2\>/;'q;"	kind:pred
foldl2	string.m	/^:- pred string.foldl2(pred(char, A, A, B, B), string, A, A, B, B).$/;kq|/^\<string.foldl2\>/;'q;"	kind:pred
foldl2	tree234.m	/^:- pred tree234.foldl2(pred(K, V, A, A, B, B), tree234(K, V), A, A, B, B).$/;kq|/^\<tree234.foldl2\>/;'q;"	kind:pred
foldl2	tree_bitset.m	/^:- pred foldl2(pred(T, U, U, V, V), tree_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldl2\>/;'q;"	kind:pred
foldl2	version_array.m	/^:- pred foldl2(pred(T1, T2, T2, T3, T3), version_array(T1), T2, T2, T3, T3).$/;kq|/^\<foldl2\>/;'q;"	kind:pred
foldl2_between	string.m	/^:- pred string.foldl2_between(pred(char, A, A, B, B),$/;kq|/^\<string.foldl2_between\>/;'q;"	kind:pred
foldl2_between_2	string.m	/^:- pred string.foldl2_between_2(pred(char, A, A, B, B), string, int, int,$/;kq|/^\<string.foldl2_between_2\>/;'q;"	kind:pred	file:
foldl2_corresponding	list.m	/^:- pred list.foldl2_corresponding(pred(A, B, C, C, D, D), list(A), list(B),$/;kq|/^\<list.foldl2_corresponding\>/;'q;"	kind:pred
foldl2_corresponding3	list.m	/^:- pred list.foldl2_corresponding3(pred(A, B, C, D, D, E, E),$/;kq|/^\<list.foldl2_corresponding3\>/;'q;"	kind:pred
foldl2_days	calendar.m	/^:- pred foldl2_days(pred(date, A, A, B, B), date, date, A, A, B, B).$/;kq|/^\<foldl2_days\>/;'q;"	kind:pred
foldl2_process_dir	dir.m	/^:- pred dir.foldl2_process_dir(bool::in,$/;kq|/^\<dir.foldl2_process_dir\>/;'q;"	kind:pred	file:
foldl2_process_dir2	dir.m	/^:- pred dir.foldl2_process_dir2(dir.stream::in, dir.stream::out, bool::in,$/;kq|/^\<dir.foldl2_process_dir2\>/;'q;"	kind:pred	file:
foldl2_process_entries	dir.m	/^:- pred dir.foldl2_process_entries(dir.stream::in, dir.stream::out, bool::in,$/;kq|/^\<dir.foldl2_process_entries\>/;'q;"	kind:pred	file:
foldl2_substring	string.m	/^:- pred string.foldl2_substring(pred(char, A, A, B, B),$/;kq|/^\<string.foldl2_substring\>/;'q;"	kind:pred
foldl2_values	assoc_list.m	/^:- pred assoc_list.foldl2_values(pred(V, A, A, B, B), assoc_list(K, V),$/;kq|/^\<assoc_list.foldl2_values\>/;'q;"	kind:pred
foldl2_values	map.m	/^:- pred map.foldl2_values(pred(V, A, A, B, B), map(K, V), A, A, B, B).$/;kq|/^\<map.foldl2_values\>/;'q;"	kind:pred
foldl2_values	tree234.m	/^:- pred tree234.foldl2_values(pred(V, A, A, B, B), tree234(K, V), A, A, B, B).$/;kq|/^\<tree234.foldl2_values\>/;'q;"	kind:pred
foldl3	array.m	/^:- pred array.foldl3(pred(T1, T2, T2, T3, T3, T4, T4), array(T1),$/;kq|/^\<array.foldl3\>/;'q;"	kind:pred
foldl3	bimap.m	/^:- pred bimap.foldl3(pred(K, V, A, A, B, B, C, C), bimap(K, V),$/;kq|/^\<bimap.foldl3\>/;'q;"	kind:pred
foldl3	list.m	/^:- pred list.foldl3(pred(L, A, A, B, B, C, C), list(L),$/;kq|/^\<list.foldl3\>/;'q;"	kind:pred
foldl3	map.m	/^:- pred map.foldl3(pred(K, V, A, A, B, B, C, C), map(K, V), A, A, B, B, C, C).$/;kq|/^\<map.foldl3\>/;'q;"	kind:pred
foldl3	rbtree.m	/^:- pred rbtree.foldl3(pred(K, V, T, T, U, U, W, W), rbtree(K, V),$/;kq|/^\<rbtree.foldl3\>/;'q;"	kind:pred
foldl3	set.m	/^:- pred set.foldl3(pred(T, A, A, B, B, C, C), set(T), A, A, B, B, C, C).$/;kq|/^\<set.foldl3\>/;'q;"	kind:pred
foldl3	set_ordlist.m	/^:- pred set_ordlist.foldl3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_ordlist.foldl3\>/;'q;"	kind:pred
foldl3	set_tree234.m	/^:- pred set_tree234.foldl3($/;kq|/^\<set_tree234.foldl3\>/;'q;"	kind:pred
foldl3	tree234.m	/^:- pred tree234.foldl3(pred(K, V, A, A, B, B, C, C), tree234(K, V),$/;kq|/^\<tree234.foldl3\>/;'q;"	kind:pred
foldl3_corresponding	list.m	/^:- pred list.foldl3_corresponding(pred(A, B, C, C, D, D, E, E),$/;kq|/^\<list.foldl3_corresponding\>/;'q;"	kind:pred
foldl3_corresponding3	list.m	/^:- pred list.foldl3_corresponding3(pred(A, B, C, D, D, E, E, F, F),$/;kq|/^\<list.foldl3_corresponding3\>/;'q;"	kind:pred
foldl3_days	calendar.m	/^:- pred foldl3_days(pred(date, A, A, B, B, C, C), date, date,$/;kq|/^\<foldl3_days\>/;'q;"	kind:pred
foldl3_values	assoc_list.m	/^:- pred assoc_list.foldl3_values(pred(V, A, A, B, B, C, C), assoc_list(K, V),$/;kq|/^\<assoc_list.foldl3_values\>/;'q;"	kind:pred
foldl3_values	map.m	/^:- pred map.foldl3_values(pred(V, A, A, B, B, C, C), map(K, V),$/;kq|/^\<map.foldl3_values\>/;'q;"	kind:pred
foldl3_values	tree234.m	/^:- pred tree234.foldl3_values(pred(V, A, A, B, B, C, C), tree234(K, V),$/;kq|/^\<tree234.foldl3_values\>/;'q;"	kind:pred
foldl4	array.m	/^:- pred array.foldl4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), array(T1),$/;kq|/^\<array.foldl4\>/;'q;"	kind:pred
foldl4	list.m	/^:- pred list.foldl4(pred(L, A, A, B, B, C, C, D, D), list(L),$/;kq|/^\<list.foldl4\>/;'q;"	kind:pred
foldl4	map.m	/^:- pred map.foldl4(pred(K, V, A, A, B, B, C, C, D, D), map(K, V),$/;kq|/^\<map.foldl4\>/;'q;"	kind:pred
foldl4	set.m	/^:- pred set.foldl4(pred(T, A, A, B, B, C, C, D, D), set(T), A, A, B, B,$/;kq|/^\<set.foldl4\>/;'q;"	kind:pred
foldl4	set_ordlist.m	/^:- pred set_ordlist.foldl4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_ordlist.foldl4\>/;'q;"	kind:pred
foldl4	set_tree234.m	/^:- pred set_tree234.foldl4($/;kq|/^\<set_tree234.foldl4\>/;'q;"	kind:pred
foldl4	tree234.m	/^:- pred tree234.foldl4(pred(K, V, A, A, B, B, C, C, D, D), tree234(K, V),$/;kq|/^\<tree234.foldl4\>/;'q;"	kind:pred
foldl4_corresponding3	list.m	/^:- pred list.foldl4_corresponding3(pred(A, B, C, D, D, E, E, F, F, G, G),$/;kq|/^\<list.foldl4_corresponding3\>/;'q;"	kind:pred
foldl5	array.m	/^:- pred array.foldl5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<array.foldl5\>/;'q;"	kind:pred
foldl5	list.m	/^:- pred list.foldl5(pred(L, A, A, B, B, C, C, D, D, E, E), list(L),$/;kq|/^\<list.foldl5\>/;'q;"	kind:pred
foldl5	set.m	/^:- pred set.foldl5(pred(T, A, A, B, B, C, C, D, D, E, E), set(T), A, A, B, B,$/;kq|/^\<set.foldl5\>/;'q;"	kind:pred
foldl5	set_ordlist.m	/^:- pred set_ordlist.foldl5($/;kq|/^\<set_ordlist.foldl5\>/;'q;"	kind:pred
foldl5	set_tree234.m	/^:- pred set_tree234.foldl5($/;kq|/^\<set_tree234.foldl5\>/;'q;"	kind:pred
foldl6	list.m	/^:- pred list.foldl6(pred(L, A, A, B, B, C, C, D, D, E, E, F, F), list(L),$/;kq|/^\<list.foldl6\>/;'q;"	kind:pred
foldl6	set.m	/^:- pred set.foldl6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F), set(T),$/;kq|/^\<set.foldl6\>/;'q;"	kind:pred
foldl6	set_ordlist.m	/^:- pred set_ordlist.foldl6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F),$/;kq|/^\<set_ordlist.foldl6\>/;'q;"	kind:pred
foldl6	set_tree234.m	/^:- pred set_tree234.foldl6($/;kq|/^\<set_tree234.foldl6\>/;'q;"	kind:pred
foldl_between	string.m	/^:- func string.foldl_between(func(char, A) = A, string, int, int, A) = A.$/;kq|/^\<string.foldl_between\>/;'q;"	kind:func
foldl_between	string.m	/^:- pred string.foldl_between(pred(char, A, A), string, int, int, A, A).$/;kq|/^\<string.foldl_between\>/;'q;"	kind:pred
foldl_between_2	string.m	/^:- pred string.foldl_between_2(pred(char, A, A), string, int, int, A, A).$/;kq|/^\<string.foldl_between_2\>/;'q;"	kind:pred	file:
foldl_corresponding	list.m	/^:- func list.foldl_corresponding(func(A, B, C) = C, list(A), list(B), C) = C.$/;kq|/^\<list.foldl_corresponding\>/;'q;"	kind:func
foldl_corresponding	list.m	/^:- pred list.foldl_corresponding(pred(A, B, C, C), list(A), list(B), C, C).$/;kq|/^\<list.foldl_corresponding\>/;'q;"	kind:pred
foldl_corresponding3	list.m	/^:- pred list.foldl_corresponding3(pred(A, B, C, D, D),$/;kq|/^\<list.foldl_corresponding3\>/;'q;"	kind:pred
foldl_days	calendar.m	/^:- pred foldl_days(pred(date, A, A), date, date, A, A).$/;kq|/^\<foldl_days\>/;'q;"	kind:pred
foldl_keys	assoc_list.m	/^:- pred assoc_list.foldl_keys(pred(K, A, A), assoc_list(K, V), A, A).$/;kq|/^\<assoc_list.foldl_keys\>/;'q;"	kind:pred
foldl_node	cord.m	/^:- pred foldl_node(func(T, U) = U, cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldl_node\>/;'q;"	kind:pred	file:
foldl_node_pred	cord.m	/^:- pred foldl_node_pred(pred(T, U, U), cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldl_node_pred\>/;'q;"	kind:pred	file:
foldl_pred	cord.m	/^:- pred foldl_pred(pred(T, U, U), cord(T), U, U).$/;kq|/^\<foldl_pred\>/;'q;"	kind:pred
foldl_pred	dir.m	/^:- inst dir.foldl_pred == (pred(in, in, in, out, in, out, di, uo) is det).$/;kq|-;/\<foldl_pred\>/;'q;"	kind:inst
foldl_pred	dir.m	/^:- type dir.foldl_pred(T) ==$/;kq|-;/\<foldl_pred\>/;'q;"	kind:type
foldl_substring	string.m	/^:- func string.foldl_substring(func(char, A) = A, string, int, int, A) = A.$/;kq|/^\<string.foldl_substring\>/;'q;"	kind:func
foldl_substring	string.m	/^:- pred string.foldl_substring(pred(char, A, A), string, int, int, A, A).$/;kq|/^\<string.foldl_substring\>/;'q;"	kind:pred
foldl_values	assoc_list.m	/^:- pred assoc_list.foldl_values(pred(V, A, A), assoc_list(K, V), A, A).$/;kq|/^\<assoc_list.foldl_values\>/;'q;"	kind:pred
foldl_values	map.m	/^:- pred map.foldl_values(pred(V, A, A), map(K, V), A, A).$/;kq|/^\<map.foldl_values\>/;'q;"	kind:pred
foldl_values	tree234.m	/^:- pred tree234.foldl_values(pred(V, A, A), tree234(K, V), A, A).$/;kq|/^\<tree234.foldl_values\>/;'q;"	kind:pred
foldr	array.m	/^:- func array.foldr(func(T1, T2) = T2, array(T1), T2) = T2.$/;kq|/^\<array.foldr\>/;'q;"	kind:func
foldr	array.m	/^:- pred array.foldr(pred(T1, T2, T2), array(T1), T2, T2).$/;kq|/^\<array.foldr\>/;'q;"	kind:pred
foldr	cord.m	/^:- func foldr(func(T, U) = U, cord(T), U) = U.$/;kq|/^\<foldr\>/;'q;"	kind:func
foldr	fat_sparse_bitset.m	/^:- func foldr(func(T, U) = U, fat_sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:func
foldr	fat_sparse_bitset.m	/^:- pred foldr(pred(T, U, U), fat_sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:pred
foldr	list.m	/^:- func list.foldr(func(L, A) = A, list(L), A) = A.$/;kq|/^\<list.foldr\>/;'q;"	kind:func
foldr	list.m	/^:- pred list.foldr(pred(L, A, A), list(L), A, A).$/;kq|/^\<list.foldr\>/;'q;"	kind:pred
foldr	map.m	/^:- func map.foldr(func(K, V, A) = A, map(K, V), A) = A.$/;kq|/^\<map.foldr\>/;'q;"	kind:func
foldr	map.m	/^:- pred map.foldr(pred(K, V, A, A), map(K, V), A, A).$/;kq|/^\<map.foldr\>/;'q;"	kind:pred
foldr	sparse_bitset.m	/^:- func foldr(func(T, U) = U, sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:func
foldr	sparse_bitset.m	/^:- pred foldr(pred(T, U, U), sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:pred
foldr	string.m	/^:- func string.foldr(func(char, T) = T, string, T) = T.$/;kq|/^\<string.foldr\>/;'q;"	kind:func
foldr	string.m	/^:- pred string.foldr(pred(char, T, T), string, T, T).$/;kq|/^\<string.foldr\>/;'q;"	kind:pred
foldr	tree234.m	/^:- func tree234.foldr(func(K, V, A) = A, tree234(K, V), A) = A.$/;kq|/^\<tree234.foldr\>/;'q;"	kind:func
foldr	tree234.m	/^:- pred tree234.foldr(pred(K, V, A, A), tree234(K, V), A, A).$/;kq|/^\<tree234.foldr\>/;'q;"	kind:pred
foldr	tree_bitset.m	/^:- func foldr(func(T, U) = U, tree_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:func
foldr	tree_bitset.m	/^:- pred foldr(pred(T, U, U), tree_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:pred
foldr	version_array.m	/^:- func foldr(func(T1, T2) = T2, version_array(T1), T2) = T2.$/;kq|/^\<foldr\>/;'q;"	kind:func
foldr	version_array.m	/^:- pred foldr(pred(T1, T2, T2), version_array(T1), T2, T2).$/;kq|/^\<foldr\>/;'q;"	kind:pred
foldr2	array.m	/^:- pred array.foldr2(pred(T1, T2, T2, T3, T3), array(T1), T2, T2, T3, T3).$/;kq|/^\<array.foldr2\>/;'q;"	kind:pred
foldr2	fat_sparse_bitset.m	/^:- pred foldr2(pred(T, U, U, V, V), fat_sparse_bitset(T), U, U, V, V)$/;kq|/^\<foldr2\>/;'q;"	kind:pred
foldr2	list.m	/^:- pred list.foldr2(pred(L, A, A, B, B), list(L), A, A, B, B).$/;kq|/^\<list.foldr2\>/;'q;"	kind:pred
foldr2	map.m	/^:- pred map.foldr2(pred(K, V, A, A, B, B), map(K, V), A, A, B, B).$/;kq|/^\<map.foldr2\>/;'q;"	kind:pred
foldr2	sparse_bitset.m	/^:- pred foldr2(pred(T, U, U, V, V), sparse_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldr2\>/;'q;"	kind:pred
foldr2	tree234.m	/^:- pred tree234.foldr2(pred(K, V, A, A, B, B), tree234(K, V), A, A, B, B).$/;kq|/^\<tree234.foldr2\>/;'q;"	kind:pred
foldr2	tree_bitset.m	/^:- pred foldr2(pred(T, U, U, V, V), tree_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldr2\>/;'q;"	kind:pred
foldr2	version_array.m	/^:- pred foldr2(pred(T1, T2, T2, T3, T3), version_array(T1), T2, T2, T3, T3).$/;kq|/^\<foldr2\>/;'q;"	kind:pred
foldr3	array.m	/^:- pred array.foldr3(pred(T1, T2, T2, T3, T3, T4, T4), array(T1),$/;kq|/^\<array.foldr3\>/;'q;"	kind:pred
foldr3	list.m	/^:- pred list.foldr3(pred(L, A, A, B, B, C, C), list(L), A, A, B, B, C, C).$/;kq|/^\<list.foldr3\>/;'q;"	kind:pred
foldr3	map.m	/^:- pred map.foldr3(pred(K, V, A, A, B, B, C, C), map(K, V), A, A, B, B, C, C).$/;kq|/^\<map.foldr3\>/;'q;"	kind:pred
foldr3	tree234.m	/^:- pred tree234.foldr3(pred(K, V, A, A, B, B, C, C), tree234(K, V),$/;kq|/^\<tree234.foldr3\>/;'q;"	kind:pred
foldr4	array.m	/^:- pred array.foldr4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5), array(T1),$/;kq|/^\<array.foldr4\>/;'q;"	kind:pred
foldr4	map.m	/^:- pred map.foldr4(pred(K, V, A, A, B, B, C, C, D, D), map(K, V),$/;kq|/^\<map.foldr4\>/;'q;"	kind:pred
foldr4	tree234.m	/^:- pred tree234.foldr4(pred(K, V, A, A, B, B, C, C, D, D), tree234(K, V),$/;kq|/^\<tree234.foldr4\>/;'q;"	kind:pred
foldr5	array.m	/^:- pred array.foldr5(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5, T6, T6),$/;kq|/^\<array.foldr5\>/;'q;"	kind:pred
foldr_between	string.m	/^:- func string.foldr_between(func(char, T) = T, string, int, int, T) = T.$/;kq|/^\<string.foldr_between\>/;'q;"	kind:func
foldr_between	string.m	/^:- pred string.foldr_between(pred(char, T, T), string, int, int, T, T).$/;kq|/^\<string.foldr_between\>/;'q;"	kind:pred
foldr_between_2	string.m	/^:- pred string.foldr_between_2(pred(char, T, T), string, int, int, T, T).$/;kq|/^\<string.foldr_between_2\>/;'q;"	kind:pred	file:
foldr_node	cord.m	/^:- pred foldr_node(func(T, U) = U, cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldr_node\>/;'q;"	kind:pred	file:
foldr_node_pred	cord.m	/^:- pred foldr_node_pred(pred(T, U, U), cord_node(T), list(cord_node(T)), U, U).$/;kq|/^\<foldr_node_pred\>/;'q;"	kind:pred	file:
foldr_pred	cord.m	/^:- pred foldr_pred(pred(T, U, U), cord(T), U, U).$/;kq|/^\<foldr_pred\>/;'q;"	kind:pred
foldr_substring	string.m	/^:- func string.foldr_substring(func(char, T) = T, string, int, int, T) = T.$/;kq|/^\<string.foldr_substring\>/;'q;"	kind:func
foldr_substring	string.m	/^:- pred string.foldr_substring(pred(char, T, T), string, int, int, T, T).$/;kq|/^\<string.foldr_substring\>/;'q;"	kind:pred
force	lazy.m	/^:- func force(lazy(T)) = T.$/;kq|/^\<force\>/;'q;"	kind:func
foreign_enum	rtti_implementation.m	/^:- inst foreign_enum == bound(tcr_foreign_enum ; tcr_foreign_enum_usereq).$/;kq|-;/\<foreign_enum\>/;'q;"	kind:inst	file:
foreign_enum_functor_desc	rtti_implementation.m	/^:- func foreign_enum_functor_desc(type_ctor_rep, int, type_functors)$/;kq|/^\<foreign_enum_functor_desc\>/;'q;"	kind:func	file:
foreign_enum_functor_desc	rtti_implementation.m	/^:- type foreign_enum_functor_desc ---> foreign_enum_functor_desc(c_pointer).$/;kq|-;/\<foreign_enum_functor_desc\>/;'q;"	kind:cons	file:
foreign_enum_functor_desc	rtti_implementation.m	/^:- type foreign_enum_functor_desc ---> foreign_enum_functor_desc(c_pointer).$/;kq|-;/\<foreign_enum_functor_desc\>/;'q;"	kind:type	file:
foreign_enum_functor_name	rtti_implementation.m	/^:- func foreign_enum_functor_name(foreign_enum_functor_desc) = string.$/;kq|/^\<foreign_enum_functor_name\>/;'q;"	kind:func	file:
foreign_enum_functor_ordinal	rtti_implementation.m	/^:- func foreign_enum_functor_ordinal(foreign_enum_functor_desc) = int.$/;kq|/^\<foreign_enum_functor_ordinal\>/;'q;"	kind:func	file:
format	io.m	/^:- pred io.format(io.output_stream::in, string::in, list(io.poly_type)::in,$/;kq|/^\<io.format\>/;'q;"	kind:pred
format	io.m	/^:- pred io.format(string::in, list(io.poly_type)::in, io::di, io::uo) is det.$/;kq|/^\<io.format\>/;'q;"	kind:pred
format	pretty_printer.m	/^:- func format(T) = doc.$/;kq|/^\<format\>/;'q;"	kind:func
format	stream.string_writer.m	/^:- pred format(Stream::in, string::in, list(string.poly_type)::in,$/;kq|/^\<format\>/;'q;"	kind:pred
format	string.m	/^:- func string.format(string, list(string.poly_type)) = string.$/;kq|/^\<string.format\>/;'q;"	kind:func
format	string.m	/^:- pred string.format(string::in, list(string.poly_type)::in, string::out)$/;kq|/^\<string.format\>/;'q;"	kind:pred
format	term_to_xml.m	/^    --->    format$/;kq|-;/\<format\>/;'q;"	kind:cons	file:
format_arg	pretty_printer.m	/^:- func format_arg(doc) = doc.$/;kq|/^\<format_arg\>/;'q;"	kind:func
format_char	string.m	/^:- func format_char(flags, maybe_width, char) = string.$/;kq|/^\<format_char\>/;'q;"	kind:func	file:
format_constant	term_io.m	/^:- func term_io.format_constant(const) = string.$/;kq|/^\<term_io.format_constant\>/;'q;"	kind:func
format_constant_agt	term_io.m	/^:- func term_io.format_constant_agt(const, adjacent_to_graphic_token) = string.$/;kq|/^\<term_io.format_constant_agt\>/;'q;"	kind:func	file:
format_float	string.m	/^:- func format_float(flags, spec_case, maybe_width, maybe_precision, float)$/;kq|/^\<format_float\>/;'q;"	kind:func	file:
format_inf	string.m	/^:- func format_inf(float, spec_case) = string.$/;kq|/^\<format_inf\>/;'q;"	kind:func	file:
format_int	string.m	/^:- func format_int(flags, maybe_width, maybe_precision, int) = string.$/;kq|/^\<format_int\>/;'q;"	kind:func	file:
format_list	pretty_printer.m	/^    ;       format_list(list(univ), doc)$/;kq|-;/\<format_list\>/;'q;"	kind:cons
format_nan	string.m	/^:- func format_nan(spec_case) = string.$/;kq|/^\<format_nan\>/;'q;"	kind:func	file:
format_nl	pretty_printer.m	/^:- pred format_nl(Stream::in, int::in, indents::in, int::out,$/;kq|/^\<format_nl\>/;'q;"	kind:pred	file:
format_scientific_number	string.m	/^:- func format_scientific_number(flags, spec_case, maybe_width,$/;kq|/^\<format_scientific_number\>/;'q;"	kind:func	file:
format_scientific_number_g	string.m	/^:- func format_scientific_number_g(flags, spec_case, maybe_width,$/;kq|/^\<format_scientific_number_g\>/;'q;"	kind:func	file:
format_string	string.m	/^:- func format_string(flags, maybe_width, maybe_precision, string) = string.$/;kq|/^\<format_string\>/;'q;"	kind:func	file:
format_string_to_specifiers	string.m	/^:- pred format_string_to_specifiers(list(string.specifier)::out,$/;kq|/^\<format_string_to_specifiers\>/;'q;"	kind:pred	file:
format_susp	pretty_printer.m	/^    ;       format_susp((func) = doc)$/;kq|-;/\<format_susp\>/;'q;"	kind:cons
format_table	string.m	/^:- func string.format_table(list(justified_column), string) = string.$/;kq|/^\<string.format_table\>/;'q;"	kind:func
format_table_max	string.m	/^:- func string.format_table_max(assoc_list(justified_column, maybe(int)),$/;kq|/^\<string.format_table_max\>/;'q;"	kind:func
format_term	pretty_printer.m	/^    ;       format_term(string, list(univ))$/;kq|-;/\<format_term\>/;'q;"	kind:cons
format_univ	pretty_printer.m	/^    ;       format_univ(univ)$/;kq|-;/\<format_univ\>/;'q;"	kind:cons
format_unsigned_int	string.m	/^:- func format_unsigned_int(flags, maybe_width, maybe_precision,$/;kq|/^\<format_unsigned_int\>/;'q;"	kind:func	file:
formatter	pretty_printer.m	/^:- type formatter == ( func(univ, list(type_desc)) = doc ).$/;kq|-;/\<formatter\>/;'q;"	kind:type
formatter_map	pretty_printer.m	/^:- type formatter_map == map(string, map(string, map(int, formatter))).$/;kq|-;/\<formatter_map\>/;'q;"	kind:type	file:
formatting_limit	pretty_printer.m	/^:- type formatting_limit$/;kq|-;/\<formatting_limit\>/;'q;"	kind:type
forward_map	bimap.m	/^:- func bimap.forward_map(bimap(K, V)) = map(K, V).$/;kq|/^\<bimap.forward_map\>/;'q;"	kind:func
forward_map	injection.m	/^:- func injection.forward_map(injection(K, V)) = map(K, V).$/;kq|/^\<injection.forward_map\>/;'q;"	kind:func
forward_map	injection.m	/^:- pred injection.forward_map(injection(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<injection.forward_map\>/;'q;"	kind:pred
forward_search	bimap.m	/^:- func bimap.forward_search(bimap(K, V), K) = V is semidet.$/;kq|/^\<bimap.forward_search\>/;'q;"	kind:func
forward_search	bimap.m	/^:- pred bimap.forward_search(bimap(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<bimap.forward_search\>/;'q;"	kind:pred
forward_search	injection.m	/^:- func injection.forward_search(injection(K, V), K) = V is semidet.$/;kq|/^\<injection.forward_search\>/;'q;"	kind:func
forward_search	injection.m	/^:- pred injection.forward_search(injection(K, V)::in, K::in, V::out)$/;kq|/^\<injection.forward_search\>/;'q;"	kind:pred
four	rtree.m	/^    ;       four(K, rtree_2(K, V), K, rtree_2(K, V), K, rtree_2(K, V), K,$/;kq|-;/\<four\>/;'q;"	kind:cons	file:
four	rtree.m	/^:- inst four ==$/;kq|-;/\<four\>/;'q;"	kind:inst	file:
four	set_ctree234.m	/^    ;       four(T, T, T, set_tree234(T), set_tree234(T),$/;kq|-;/\<four\>/;'q;"	kind:cons	file:
four	set_ctree234.m	/^:- inst four(E, T)  ---> four(E, E, E, T, T, T, T).$/;kq|-;/\<four\>/;'q;"	kind:inst	file:
four	set_tree234.m	/^    ;       four(T, T, T, set_tree234(T), set_tree234(T),$/;kq|-;/\<four\>/;'q;"	kind:cons	file:
four	set_tree234.m	/^:- inst four(E, T)  ---> four(E, E, E, T, T, T, T).$/;kq|-;/\<four\>/;'q;"	kind:inst	file:
four	tree234.m	/^    ;       four(K, V, K, V, K, V, tree234(K, V), tree234(K, V),$/;kq|-;/\<four\>/;'q;"	kind:cons
four	tree234.m	/^:- inst four(K, V, T)  ---> four(K, V, K, V, K, V, T, T, T, T).$/;kq|-;/\<four\>/;'q;"	kind:inst	file:
fquotient	calendar.m	/^:- func fquotient(int, int, int) = int.$/;kq|/^\<fquotient\>/;'q;"	kind:func	file:
free_heap	private_builtin.m	/^:- impure pred free_heap(T::di) is det.$/;kq|/^\<free_heap\>/;'q;"	kind:pred
friday	calendar.m	/^    ;       friday$/;kq|-;/\<friday\>/;'q;"	kind:cons
from_assoc_list	bimap.m	/^:- func bimap.from_assoc_list(assoc_list(K, V)) = bimap(K, V) is semidet.$/;kq|/^\<bimap.from_assoc_list\>/;'q;"	kind:func
from_assoc_list	bimap.m	/^:- pred bimap.from_assoc_list(assoc_list(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.from_assoc_list\>/;'q;"	kind:pred
from_assoc_list	digraph.m	/^:- func digraph.from_assoc_list(assoc_list(T, T)) = digraph(T).$/;kq|/^\<digraph.from_assoc_list\>/;'q;"	kind:func
from_assoc_list	digraph.m	/^:- pred digraph.from_assoc_list(assoc_list(T, T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.from_assoc_list\>/;'q;"	kind:pred
from_assoc_list	hash_table.m	/^:- func from_assoc_list(hash_pred(K), int, float, assoc_list(K, V)) =$/;kq|/^\<from_assoc_list\>/;'q;"	kind:func
from_assoc_list	hash_table.m	/^:- func from_assoc_list(hash_pred(K)::in(hash_pred), assoc_list(K, V)::in) =$/;kq|/^\<from_assoc_list\>/;'q;"	kind:func
from_assoc_list	map.m	/^:- func map.from_assoc_list(assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.from_assoc_list\>/;'q;"	kind:func
from_assoc_list	map.m	/^:- pred map.from_assoc_list(assoc_list(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.from_assoc_list\>/;'q;"	kind:pred
from_assoc_list	multi_map.m	/^:- func multi_map.from_assoc_list(assoc_list(K, list(V))) = multi_map(K, V).$/;kq|/^\<multi_map.from_assoc_list\>/;'q;"	kind:func
from_assoc_list	multi_map.m	/^:- pred multi_map.from_assoc_list(assoc_list(K, list(V))::in,$/;kq|/^\<multi_map.from_assoc_list\>/;'q;"	kind:pred
from_assoc_list	pqueue.m	/^:- func pqueue.from_assoc_list(assoc_list(K, V)) = pqueue(K, V).$/;kq|/^\<pqueue.from_assoc_list\>/;'q;"	kind:func
from_assoc_list	rbtree.m	/^:- func rbtree.from_assoc_list(assoc_list(K, V)) = rbtree(K, V).$/;kq|/^\<rbtree.from_assoc_list\>/;'q;"	kind:func
from_assoc_list	version_hash_table.m	/^:- func from_assoc_list(hash_pred(K)::in(hash_pred), assoc_list(K, V)::in) =$/;kq|/^\<from_assoc_list\>/;'q;"	kind:func
from_assoc_list	version_hash_table.m	/^:- func from_assoc_list(hash_pred(K)::in(hash_pred), int::in, float::in,$/;kq|/^\<from_assoc_list\>/;'q;"	kind:func
from_assoc_list_2	hash_table.m	/^:- pred from_assoc_list_2(assoc_list(K, V)::in,$/;kq|/^\<from_assoc_list_2\>/;'q;"	kind:pred	file:
from_assoc_list_2	version_hash_table.m	/^:- pred from_assoc_list_2(assoc_list(K, V)::in,$/;kq|/^\<from_assoc_list_2\>/;'q;"	kind:pred	file:
from_base_string	integer.m	/^:- func integer.from_base_string(int, string) = integer is semidet.$/;kq|/^\<integer.from_base_string\>/;'q;"	kind:func
from_c_pointer	string.m	/^:- func string.from_c_pointer(c_pointer::in) = (string::uo) is det.$/;kq|/^\<string.from_c_pointer\>/;'q;"	kind:func
from_char	string.m	/^:- func string.from_char(char::in) = (string::uo) is det.$/;kq|/^\<string.from_char\>/;'q;"	kind:func
from_char_list	string.m	/^:- func string.from_char_list(list(char)::in) = (string::uo) is det.$/;kq|/^\<string.from_char_list\>/;'q;"	kind:func
from_char_list	string.m	/^:- pred string.from_char_list(list(char), string).$/;kq|/^\<string.from_char_list\>/;'q;"	kind:pred
from_code_unit_list	string.m	/^:- pred string.from_code_unit_list(list(int)::in, string::uo) is semidet.$/;kq|/^\<string.from_code_unit_list\>/;'q;"	kind:pred
from_corresponding_2	assoc_list.m	/^:- pred assoc_list.from_corresponding_2(list(K)::in, list(V)::in,$/;kq|/^\<assoc_list.from_corresponding_2\>/;'q;"	kind:pred	file:
from_corresponding_list_lists	multi_map.m	/^:- func multi_map.from_corresponding_list_lists(list(K), list(list(V)))$/;kq|/^\<multi_map.from_corresponding_list_lists\>/;'q;"	kind:func
from_corresponding_list_lists	multi_map.m	/^:- pred multi_map.from_corresponding_list_lists(list(K)::in, list(list(V))::in,$/;kq|/^\<multi_map.from_corresponding_list_lists\>/;'q;"	kind:pred
from_corresponding_lists	assoc_list.m	/^:- func assoc_list.from_corresponding_lists(list(K), list(V))$/;kq|/^\<assoc_list.from_corresponding_lists\>/;'q;"	kind:func
from_corresponding_lists	assoc_list.m	/^:- pred assoc_list.from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<assoc_list.from_corresponding_lists\>/;'q;"	kind:pred
from_corresponding_lists	bimap.m	/^:- func bimap.from_corresponding_lists(list(K), list(V)) = bimap(K, V)$/;kq|/^\<bimap.from_corresponding_lists\>/;'q;"	kind:func
from_corresponding_lists	bimap.m	/^:- pred bimap.from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<bimap.from_corresponding_lists\>/;'q;"	kind:pred
from_corresponding_lists	map.m	/^:- func map.from_corresponding_lists(list(K), list(V)) = map(K, V).$/;kq|/^\<map.from_corresponding_lists\>/;'q;"	kind:func
from_corresponding_lists	map.m	/^:- pred map.from_corresponding_lists(list(K)::in, list(V)::in, map(K, V)::out)$/;kq|/^\<map.from_corresponding_lists\>/;'q;"	kind:pred
from_corresponding_lists	multi_map.m	/^:- func multi_map.from_corresponding_lists(list(K), list(V))$/;kq|/^\<multi_map.from_corresponding_lists\>/;'q;"	kind:func
from_corresponding_lists	multi_map.m	/^:- pred multi_map.from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<multi_map.from_corresponding_lists\>/;'q;"	kind:pred
from_corresponding_lists_2	multi_map.m	/^:- pred multi_map.from_corresponding_lists_2(list(K)::in, list(V)::in,$/;kq|/^\<multi_map.from_corresponding_lists_2\>/;'q;"	kind:pred	file:
from_flat_assoc_list	multi_map.m	/^:- func multi_map.from_flat_assoc_list(assoc_list(K, V)) = multi_map(K, V).$/;kq|/^\<multi_map.from_flat_assoc_list\>/;'q;"	kind:func
from_flat_assoc_list	multi_map.m	/^:- pred multi_map.from_flat_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<multi_map.from_flat_assoc_list\>/;'q;"	kind:pred
from_float	string.m	/^:- func string.from_float(float::in) = (string::uo) is det.$/;kq|/^\<string.from_float\>/;'q;"	kind:func
from_int	char.m	/^:- pred char.from_int(int::in, char::out) is semidet.$/;kq|/^\<char.from_int\>/;'q;"	kind:pred
from_int	enum.m	/^	func from_int(int) = T is semidet$/;kq|-;/\<from_int\>/;'q;"	kind:tcm
from_int	string.m	/^:- func string.from_int(int::in) = (string::uo) is det.$/;kq|/^\<string.from_int\>/;'q;"	kind:func
from_integer	rational.m	/^:- func rational.from_integer(integer) = rational.$/;kq|/^\<rational.from_integer\>/;'q;"	kind:func
from_integers	rational.m	/^:- func rational.from_integers(integer, integer) = rational.$/;kq|/^\<rational.from_integers\>/;'q;"	kind:func
from_list	array.m	/^:- func array.from_list(list(T)::in) = (array(T)::array_uo) is det.$/;kq|/^\<array.from_list\>/;'q;"	kind:func
from_list	array.m	/^:- pred array.from_list(list(T)::in, array(T)::array_uo) is det.$/;kq|/^\<array.from_list\>/;'q;"	kind:pred
from_list	bag.m	/^:- func bag.from_list(list(T)) = bag(T).$/;kq|/^\<bag.from_list\>/;'q;"	kind:func
from_list	bag.m	/^:- pred bag.from_list(list(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.from_list\>/;'q;"	kind:pred
from_list	bt_array.m	/^:- func bt_array.from_list(int, list(T)) = bt_array(T).$/;kq|/^\<bt_array.from_list\>/;'q;"	kind:func
from_list	bt_array.m	/^:- pred bt_array.from_list(int::in, list(T)::in, bt_array(T)::out) is det.$/;kq|/^\<bt_array.from_list\>/;'q;"	kind:pred
from_list	cord.m	/^:- func from_list(list(T)) = cord(T).$/;kq|/^\<from_list\>/;'q;"	kind:func
from_list	queue.m	/^:- func queue.from_list(list(T)) = queue(T).$/;kq|/^\<queue.from_list\>/;'q;"	kind:func
from_list	set.m	/^:- func set.from_list(list(T)) = set(T).$/;kq|/^\<set.from_list\>/;'q;"	kind:func
from_list	set_bbbtree.m	/^:- func set_bbbtree.from_list(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.from_list\>/;'q;"	kind:func
from_list	set_ctree234.m	/^:- func set_ctree234.from_list(list(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.from_list\>/;'q;"	kind:func
from_list	set_ordlist.m	/^:- func set_ordlist.from_list(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.from_list\>/;'q;"	kind:func
from_list	set_tree234.m	/^:- func set_tree234.from_list(list(T)) = set_tree234(T).$/;kq|/^\<set_tree234.from_list\>/;'q;"	kind:func
from_list	set_tree234.m	/^:- pred set_tree234.from_list(list(T)::in, set_tree234(T)::out) is det.$/;kq|/^\<set_tree234.from_list\>/;'q;"	kind:pred
from_list	set_unordlist.m	/^:- func set_unordlist.from_list(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.from_list\>/;'q;"	kind:func
from_list	version_array.m	/^:- func from_list(list(T)) = version_array(T).$/;kq|/^\<from_list\>/;'q;"	kind:func
from_lists	array2d.m	/^:- func from_lists(list(list(T))) = array2d(T).$/;kq|/^\<from_lists\>/;'q;"	kind:func
from_rev_char_list	string.m	/^:- func string.from_rev_char_list(list(char)::in) = (string::uo) is det.$/;kq|/^\<string.from_rev_char_list\>/;'q;"	kind:func
from_rev_char_list	string.m	/^:- pred string.from_rev_char_list(list(char)::in, string::uo) is det.$/;kq|/^\<string.from_rev_char_list\>/;'q;"	kind:pred
from_rev_sorted_assoc_list	map.m	/^:- func map.from_rev_sorted_assoc_list(assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.from_rev_sorted_assoc_list\>/;'q;"	kind:func
from_rev_sorted_assoc_list	map.m	/^:- pred map.from_rev_sorted_assoc_list(assoc_list(K, V)::in, map(K, V)::out)$/;kq|/^\<map.from_rev_sorted_assoc_list\>/;'q;"	kind:pred
from_rev_sorted_assoc_list	tree234.m	/^:- pred tree234.from_rev_sorted_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<tree234.from_rev_sorted_assoc_list\>/;'q;"	kind:pred
from_reverse_list	array.m	/^:- func array.from_reverse_list(list(T)::in) = (array(T)::array_uo) is det.$/;kq|/^\<array.from_reverse_list\>/;'q;"	kind:func
from_set	bag.m	/^:- func bag.from_set(set(T)) = bag(T).$/;kq|/^\<bag.from_set\>/;'q;"	kind:func
from_set	bag.m	/^:- pred bag.from_set(set(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.from_set\>/;'q;"	kind:pred
from_set	fat_sparse_bitset.m	/^:- func from_set(set.set(T)) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
from_set	set_tree234.m	/^:- func from_set(set.set(T)) = set_tree234(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
from_set	sparse_bitset.m	/^:- func from_set(set.set(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
from_set	test_bitset.m	/^:- func from_set(set(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
from_set	tree_bitset.m	/^:- func from_set(set.set(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
from_sorted_assoc_list	map.m	/^:- func map.from_sorted_assoc_list(assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.from_sorted_assoc_list\>/;'q;"	kind:func
from_sorted_assoc_list	map.m	/^:- pred map.from_sorted_assoc_list(assoc_list(K, V)::in, map(K, V)::out)$/;kq|/^\<map.from_sorted_assoc_list\>/;'q;"	kind:pred
from_sorted_assoc_list	multi_map.m	/^:- func multi_map.from_sorted_assoc_list(assoc_list(K, list(V)))$/;kq|/^\<multi_map.from_sorted_assoc_list\>/;'q;"	kind:func
from_sorted_assoc_list	multi_map.m	/^:- pred multi_map.from_sorted_assoc_list(assoc_list(K, list(V))::in,$/;kq|/^\<multi_map.from_sorted_assoc_list\>/;'q;"	kind:pred
from_sorted_assoc_list	tree234.m	/^:- pred tree234.from_sorted_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<tree234.from_sorted_assoc_list\>/;'q;"	kind:pred
from_sorted_list	bag.m	/^:- func bag.from_sorted_list(list(T)) = bag(T).$/;kq|/^\<bag.from_sorted_list\>/;'q;"	kind:func
from_sorted_list	bag.m	/^:- pred bag.from_sorted_list(list(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.from_sorted_list\>/;'q;"	kind:pred
from_sorted_list	set.m	/^:- func set.from_sorted_list(list(T)) = set(T).$/;kq|/^\<set.from_sorted_list\>/;'q;"	kind:func
from_sorted_list	set_bbbtree.m	/^:- func set_bbbtree.from_sorted_list(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.from_sorted_list\>/;'q;"	kind:func
from_sorted_list	set_ordlist.m	/^:- func set_ordlist.from_sorted_list(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.from_sorted_list\>/;'q;"	kind:func
from_sorted_list	set_unordlist.m	/^:- func set_unordlist.from_sorted_list(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.from_sorted_list\>/;'q;"	kind:func
from_string	bitmap.m	/^:- func from_string(string) = bitmap.$/;kq|/^\<from_string\>/;'q;"	kind:func
from_string	integer.m	/^:- func integer.from_string(string::in) = (integer::out) is semidet.$/;kq|/^\<integer.from_string\>/;'q;"	kind:func
fst	pair.m	/^:- func fst(pair(X, Y)) = X.$/;kq|/^\<fst\>/;'q;"	kind:func
fst	pair.m	/^:- pred fst(pair(X, Y)::in, X::out) is det.$/;kq|/^\<fst\>/;'q;"	kind:pred
func_error	require.m	/^:- func func_error(string) = _ is erroneous.$/;kq|/^\<func_error\>/;'q;"	kind:func
functor	deconstruct.m	/^:- pred functor(T, noncanon_handling, string, int).$/;kq|/^\<functor\>/;'q;"	kind:pred
functor	term.m	/^    --->    functor($/;kq|-;/\<functor\>/;'q;"	kind:cons
functor	term_to_xml.m	/^    --->    functor$/;kq|-;/\<functor\>/;'q;"	kind:cons
functor_arity	term_to_xml.m	/^                functor_arity   :: int$/;kq|-;/\<functor_arity\>/;'q;"	kind:fld
functor_can	deconstruct.m	/^:- pred functor_can(T::in, string::out, int::out) is det.$/;kq|/^\<functor_can\>/;'q;"	kind:pred	file:
functor_dna	deconstruct.m	/^:- pred functor_dna(T::in, string::out, int::out) is det.$/;kq|/^\<functor_dna\>/;'q;"	kind:pred	file:
functor_idcc	deconstruct.m	/^:- pred functor_idcc(T::in, string::out, int::out) is cc_multi.$/;kq|/^\<functor_idcc\>/;'q;"	kind:pred	file:
functor_name	term_to_xml.m	/^                functor_name    :: string,$/;kq|-;/\<functor_name\>/;'q;"	kind:fld
functor_number	deconstruct.m	/^:- pred functor_number(T::in, functor_number_lex::out, int::out) is semidet.$/;kq|/^\<functor_number\>/;'q;"	kind:pred
functor_number	erlang_rtti_implementation.m	/^:- pred functor_number(T::in, functor_number_lex::out, int::out) is semidet.$/;kq|/^\<functor_number\>/;'q;"	kind:pred
functor_number_cc	deconstruct.m	/^:- pred functor_number_cc(T::in, functor_number_lex::out,$/;kq|/^\<functor_number_cc\>/;'q;"	kind:pred
functor_number_cc	erlang_rtti_implementation.m	/^:- pred functor_number_cc(T::in, functor_number_lex::out,$/;kq|/^\<functor_number_cc\>/;'q;"	kind:pred
functor_number_cc	rtti_implementation.m	/^:- pred functor_number_cc(T::in, int::out, int::out)$/;kq|/^\<functor_number_cc\>/;'q;"	kind:pred
functor_number_lex	construct.m	/^:- type functor_number_lex == int.$/;kq|-;/\<functor_number_lex\>/;'q;"	kind:type
functor_number_ordinal	construct.m	/^:- type functor_number_ordinal == int.$/;kq|-;/\<functor_number_ordinal\>/;'q;"	kind:type
furthest_offset	parsing_utils.m	/^                furthest_offset     ::  mutvar(int),$/;kq|-;/\<furthest_offset\>/;'q;"	kind:fld	file:
fwd_map	digraph.m	/^                fwd_map             :: key_set_map(T),$/;kq|-;/\<fwd_map\>/;'q;"	kind:fld	file:
g	string.m	/^    ;       g(float)$/;kq|-;/\<g\>/;'q;"	kind:cons	file:
garbage_collect	gc.m	/^:- impure pred garbage_collect is det.$/;kq|/^\<garbage_collect\>/;'q;"	kind:pred
garbage_collect	gc.m	/^:- pred garbage_collect(io.state::di, io.state::uo) is det.$/;kq|/^\<garbage_collect\>/;'q;"	kind:pred
gather_bits_for_leaf	tree_bitset.m	/^:- pred gather_bits_for_leaf(list(int)::in, int::in, int::in, int::out,$/;kq|/^\<gather_bits_for_leaf\>/;'q;"	kind:pred	file:
gc.garbage_collect	gc.m	/^:- impure pred garbage_collect is det.$/;kq|/^\<garbage_collect\>/;'q;"	kind:pred
gc.garbage_collect	gc.m	/^:- pred garbage_collect(io.state::di, io.state::uo) is det.$/;kq|/^\<garbage_collect\>/;'q;"	kind:pred
gc_init	io.m	/^:- pred io.gc_init(type_desc::in, type_desc::in, io::di, io::uo) is det.$/;kq|/^\<io.gc_init\>/;'q;"	kind:pred	file:
gc_trace	private_builtin.m	/^:- impure pred gc_trace(mutvar(T)::in) is det.$/;kq|/^\<gc_trace\>/;'q;"	kind:pred
gcd	rational.m	/^:- func gcd(integer, integer) = integer.$/;kq|/^\<gcd\>/;'q;"	kind:func	file:
gcd_2	rational.m	/^:- func gcd_2(integer, integer) = integer.$/;kq|/^\<gcd_2\>/;'q;"	kind:func	file:
generate	array.m	/^:- func array.generate(int::in, (func(int) = T)::in) = (array(T)::array_uo)$/;kq|/^\<array.generate\>/;'q;"	kind:func
generate_2	array.m	/^:- func generate_2(int::in, int::in, (func(int) = T)::in, array(T)::array_di)$/;kq|/^\<generate_2\>/;'q;"	kind:func	file:
generate_foldl	array.m	/^:- pred array.generate_foldl(int, pred(int, T, A, A), array(T), A, A).$/;kq|/^\<array.generate_foldl\>/;'q;"	kind:pred
generate_foldl_2	array.m	/^:- pred generate_foldl_2(int, int, pred(int, T, A, A),$/;kq|/^\<generate_foldl_2\>/;'q;"	kind:pred	file:
generate_rows	string.m	/^:- pred generate_rows(assoc_list(justify_sense, int)::in, string::in, int::in,$/;kq|/^\<generate_rows\>/;'q;"	kind:pred	file:
generic	term.m	/^    --->    generic.$/;kq|-;/\<generic\>/;'q;"	kind:cons
generic	term.m	/^:- type generic$/;kq|-;/\<generic\>/;'q;"	kind:type
generic_compare	erlang_rtti_implementation.m	/^:- pred generic_compare(comparison_result::out, T::in, T::in) is det.$/;kq|/^\<generic_compare\>/;'q;"	kind:pred
generic_compare	rtti_implementation.m	/^:- pred generic_compare(comparison_result::out, T::in, T::in) is det.$/;kq|/^\<generic_compare\>/;'q;"	kind:pred
generic_hash	hash_table.m	/^:- pred generic_hash(T::in, int::out) is det.$/;kq|/^\<generic_hash\>/;'q;"	kind:pred
generic_hash	version_hash_table.m	/^:- pred generic_hash(T::in, int::out) is det.$/;kq|/^\<generic_hash\>/;'q;"	kind:pred
generic_mutvar	store.m	/^:- type generic_mutvar(T, S) ---> mutvar(private_builtin.ref(T)).$/;kq|-;/\<generic_mutvar\>/;'q;"	kind:type	file:
generic_ref	store.m	/^:- type generic_ref(T, S) ---> ref(private_builtin.ref(T)).$/;kq|-;/\<generic_ref\>/;'q;"	kind:type	file:
generic_term	term.m	/^:- pred generic_term(term::in) is det.$/;kq|/^\<generic_term\>/;'q;"	kind:pred
generic_term_to_doc	pprint.m	/^:- func generic_term_to_doc(depth, priority, T) = doc.$/;kq|/^\<generic_term_to_doc\>/;'q;"	kind:func	file:
generic_unify	erlang_rtti_implementation.m	/^:- pred generic_unify(T::in, T::in) is semidet.$/;kq|/^\<generic_unify\>/;'q;"	kind:pred
generic_unify	rtti_implementation.m	/^:- pred generic_unify(T::in, T::in) is semidet.$/;kq|/^\<generic_unify\>/;'q;"	kind:pred
get	queue.m	/^:- pred queue.get(T::out, queue(T)::in, queue(T)::out) is semidet.$/;kq|/^\<queue.get\>/;'q;"	kind:pred
get	robdd.m	/^:- func get(var(T), imp_map(T)) = vars(T).$/;kq|/^\<get\>/;'q;"	kind:func	file:
get	stream.m	/^    pred get(Stream::in, stream.result(Unit, Error)::out,$/;kq|-;/\<get\>/;'q;"	kind:tcm
get_arg	rtti_implementation.m	/^:- some [T] pred get_arg(U::in, sectag_locn::in, du_functor_desc::in,$/;kq|/^\<get_arg\>/;'q;"	kind:pred	file:
get_arg_type_info	rtti_implementation.m	/^:- pred get_arg_type_info(type_info::in, pseudo_type_info::in, T::in,$/;kq|/^\<get_arg_type_info\>/;'q;"	kind:pred	file:
get_arg_type_info_2	rtti_implementation.m	/^:- pred get_arg_type_info_2(type_info::in, type_info::in, T::in,$/;kq|/^\<get_arg_type_info_2\>/;'q;"	kind:pred	file:
get_arg_univ	rtti_implementation.m	/^:- func get_arg_univ(U, sectag_locn, du_functor_desc, type_info, int) = univ.$/;kq|/^\<get_arg_univ\>/;'q;"	kind:func	file:
get_binary	lexer.m	/^:- pred get_binary(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_binary\>/;'q;"	kind:pred	file:
get_binary_2	lexer.m	/^:- pred get_binary_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_binary_2\>/;'q;"	kind:pred	file:
get_bindings	varset.m	/^:- func varset.get_bindings(varset(T)) = substitution(T).$/;kq|/^\<varset.get_bindings\>/;'q;"	kind:func
get_bindings	varset.m	/^:- pred varset.get_bindings(varset(T)::in, substitution(T)::out) is det.$/;kq|/^\<varset.get_bindings\>/;'q;"	kind:pred
get_bit	bit_buffer.read.m	/^:- pred get_bit(stream.result(bool, Error), read_buffer(Stream, State, Error),$/;kq|/^\<get_bit\>/;'q;"	kind:pred
get_bit	fat_sparse_bitset.m	/^:- func get_bit(int, int) = int.$/;kq|/^\<get_bit\>/;'q;"	kind:func	file:
get_bit	sparse_bitset.m	/^:- func get_bit(int, int) = int.$/;kq|/^\<get_bit\>/;'q;"	kind:func	file:
get_bit	tree_bitset.m	/^:- func get_bit(int, int) = int.$/;kq|/^\<get_bit\>/;'q;"	kind:func	file:
get_bitmap	bit_buffer.read.m	/^:- pred get_bitmap(bit_index, num_bits, bitmap, bitmap, num_bits,$/;kq|/^\<get_bitmap\>/;'q;"	kind:pred
get_bitmap	bit_buffer.read.m	/^:- pred get_bitmap(bitmap, bitmap, num_bits,$/;kq|/^\<get_bitmap\>/;'q;"	kind:pred
get_bits	bit_buffer.read.m	/^:- pred get_bits(bit_index, num_bits, word, word, num_bits,$/;kq|/^\<get_bits\>/;'q;"	kind:pred
get_capital_hex_int	string.m	/^:- func get_capital_hex_int(integer) = string.$/;kq|/^\<get_capital_hex_int\>/;'q;"	kind:func	file:
get_char_code	lexer.m	/^:- pred get_char_code(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_char_code\>/;'q;"	kind:pred	file:
get_choice_id	backjump.m	/^:- impure pred get_choice_id(choice_id::out) is nondet.$/;kq|/^\<get_choice_id\>/;'q;"	kind:pred
get_comment	lexer.m	/^:- pred get_comment(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_comment\>/;'q;"	kind:pred	file:
get_comment_2	lexer.m	/^:- pred get_comment_2(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_comment_2\>/;'q;"	kind:pred	file:
get_context	lexer.m	/^:- pred get_context(io.input_stream::in, token_context::out, io::di, io::uo)$/;kq|/^\<get_context\>/;'q;"	kind:pred	file:
get_default_formatter_map	pretty_printer.m	/^:- pred get_default_formatter_map(formatter_map::out, io::di, io::uo) is det.$/;kq|/^\<get_default_formatter_map\>/;'q;"	kind:pred
get_default_params	pretty_printer.m	/^:- pred get_default_params(pp_params::out, io::di, io::uo) is det.$/;kq|/^\<get_default_params\>/;'q;"	kind:pred
get_determinism	exception.m	/^:- pred get_determinism(pred(T), exp_determinism).$/;kq|/^\<get_determinism\>/;'q;"	kind:pred	file:
get_determinism_2	exception.m	/^:- pred get_determinism_2(pred(T, S, S), exp_determinism).$/;kq|/^\<get_determinism_2\>/;'q;"	kind:pred	file:
get_dot	lexer.m	/^:- pred get_dot(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_dot\>/;'q;"	kind:pred	file:
get_du_functor_arg	erlang_rtti_implementation.m	/^:- func get_du_functor_arg(type_info, erlang_du_functor, T, int) = univ.$/;kq|/^\<get_du_functor_arg\>/;'q;"	kind:func	file:
get_du_functor_arg_names	rtti_implementation.m	/^:- pred get_du_functor_arg_names(du_functor_desc::in, arg_names::out)$/;kq|/^\<get_du_functor_arg_names\>/;'q;"	kind:pred	file:
get_du_functor_exist_info	rtti_implementation.m	/^:- pred get_du_functor_exist_info(du_functor_desc::in, exist_info::out)$/;kq|/^\<get_du_functor_exist_info\>/;'q;"	kind:pred	file:
get_element_pred	term_to_xml.m	/^:- pred get_element_pred(element_mapping::in(element_mapping),$/;kq|/^\<get_element_pred\>/;'q;"	kind:pred	file:
get_elements_and_args	term_to_xml.m	/^:- pred get_elements_and_args(element_pred::in(element_pred),$/;kq|/^\<get_elements_and_args\>/;'q;"	kind:pred	file:
get_enum_functor_desc	rtti_implementation.m	/^:- func get_enum_functor_desc(type_ctor_rep::in(enum), int::in,$/;kq|/^\<get_enum_functor_desc\>/;'q;"	kind:func	file:
get_enum_functor_desc_from_layout_enum	rtti_implementation.m	/^:- func get_enum_functor_desc_from_layout_enum(type_ctor_rep::in(enum),$/;kq|/^\<get_enum_functor_desc_from_layout_enum\>/;'q;"	kind:func	file:
get_environment_var	io.m	/^:- pred io.get_environment_var(string::in, maybe(string)::out,$/;kq|/^\<io.get_environment_var\>/;'q;"	kind:pred
get_equivalent_elements	eqvclass.m	/^:- func eqvclass.get_equivalent_elements(eqvclass(T), T) = set(T).$/;kq|/^\<eqvclass.get_equivalent_elements\>/;'q;"	kind:func
get_exit_status	io.m	/^:- pred io.get_exit_status(int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_exit_status\>/;'q;"	kind:pred
get_field_names	term_to_xml.m	/^:- func get_field_names(type_desc, string, int) = list(maybe(string)).$/;kq|/^\<get_field_names\>/;'q;"	kind:func	file:
get_first	cord.m	/^:- pred get_first(cord(T)::in, T::out) is semidet.$/;kq|/^\<get_first\>/;'q;"	kind:pred
get_first_node	cord.m	/^:- pred get_first_node(cord_node(T)::in, T::out) is det.$/;kq|/^\<get_first_node\>/;'q;"	kind:pred	file:
get_fixed_arity_arg_type_infos	erlang_rtti_implementation.m	/^:- func get_fixed_arity_arg_type_infos(type_info) = list(type_info).$/;kq|/^\<get_fixed_arity_arg_type_infos\>/;'q;"	kind:func	file:
get_float_decimals	lexer.m	/^:- pred get_float_decimals(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_decimals\>/;'q;"	kind:pred	file:
get_float_exponent	lexer.m	/^:- pred get_float_exponent(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_exponent\>/;'q;"	kind:pred	file:
get_float_exponent_2	lexer.m	/^:- pred get_float_exponent_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_exponent_2\>/;'q;"	kind:pred	file:
get_float_exponent_3	lexer.m	/^:- pred get_float_exponent_3(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_exponent_3\>/;'q;"	kind:pred	file:
get_formatter	pretty_printer.m	/^:- pred get_formatter(formatter_map::in, string::in, string::in, int::in,$/;kq|/^\<get_formatter\>/;'q;"	kind:pred	file:
get_from_back	queue.m	/^:- pred queue.get_from_back(T::out, queue(T)::in, queue(T)::out) is semidet.$/;kq|/^\<queue.get_from_back\>/;'q;"	kind:pred
get_functor	construct.m	/^:- pred get_functor(type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor\>/;'q;"	kind:pred
get_functor	erlang_rtti_implementation.m	/^:- pred get_functor(type_desc.type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor\>/;'q;"	kind:pred
get_functor_du	rtti_implementation.m	/^:- pred get_functor_du(type_ctor_rep::in(du), type_info::in,$/;kq|/^\<get_functor_du\>/;'q;"	kind:pred	file:
get_functor_enum	rtti_implementation.m	/^:- pred get_functor_enum(type_ctor_rep::in(enum), type_ctor_info::in, int::in,$/;kq|/^\<get_functor_enum\>/;'q;"	kind:pred	file:
get_functor_impl	rtti_implementation.m	/^:- pred get_functor_impl(type_info::in, int::in, string::out, int::out,$/;kq|/^\<get_functor_impl\>/;'q;"	kind:pred	file:
get_functor_internal	construct.m	/^:- pred get_functor_internal(type_desc::in, int::in, string::out,$/;kq|/^\<get_functor_internal\>/;'q;"	kind:pred	file:
get_functor_lex	construct.m	/^:- func get_functor_lex(type_desc, functor_number_ordinal) =$/;kq|/^\<get_functor_lex\>/;'q;"	kind:func
get_functor_lex	erlang_rtti_implementation.m	/^:- pred get_functor_lex(type_desc.type_desc::in, functor_number_ordinal::in,$/;kq|/^\<get_functor_lex\>/;'q;"	kind:pred
get_functor_notag	rtti_implementation.m	/^:- pred get_functor_notag(type_ctor_rep::in(notag), type_ctor_info::in,$/;kq|/^\<get_functor_notag\>/;'q;"	kind:pred	file:
get_functor_ordinal	construct.m	/^:- func get_functor_ordinal(type_desc, functor_number_lex) =$/;kq|/^\<get_functor_ordinal\>/;'q;"	kind:func
get_functor_ordinal	construct.m	/^:- pred get_functor_ordinal(type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor_ordinal\>/;'q;"	kind:pred
get_functor_ordinal	erlang_rtti_implementation.m	/^:- pred get_functor_ordinal(type_desc.type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor_ordinal\>/;'q;"	kind:pred
get_functor_with_names	construct.m	/^:- pred get_functor_with_names(type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor_with_names\>/;'q;"	kind:pred
get_functor_with_names	erlang_rtti_implementation.m	/^:- func get_functor_with_names(type_info, int) =$/;kq|/^\<get_functor_with_names\>/;'q;"	kind:func	file:
get_functor_with_names	erlang_rtti_implementation.m	/^:- pred get_functor_with_names(type_desc.type_desc::in, functor_number_lex::in,$/;kq|/^\<get_functor_with_names\>/;'q;"	kind:pred
get_functor_with_names_internal	construct.m	/^:- pred get_functor_with_names_internal(type_desc::in, int::in,$/;kq|/^\<get_functor_with_names_internal\>/;'q;"	kind:pred	file:
get_future	par_builtin.m	/^:- pred get_future(future(T)::in, T::out) is det.$/;kq|/^\<get_future\>/;'q;"	kind:pred
get_globals	io.m	/^:- pred io.get_globals(univ::out, io::di, io::uo) is det.$/;kq|/^\<io.get_globals\>/;'q;"	kind:pred
get_graphic	lexer.m	/^:- pred get_graphic(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_graphic\>/;'q;"	kind:pred	file:
get_hex	lexer.m	/^:- pred get_hex(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_hex\>/;'q;"	kind:pred	file:
get_hex_2	lexer.m	/^:- pred get_hex_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_hex_2\>/;'q;"	kind:pred	file:
get_hex_escape	lexer.m	/^:- pred get_hex_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_hex_escape\>/;'q;"	kind:pred	file:
get_hex_int	string.m	/^:- func get_hex_int(integer) = string.$/;kq|/^\<get_hex_int\>/;'q;"	kind:func	file:
get_if_in_range	version_array.m	/^:- pred get_if_in_range(version_array(T)::in, int::in, T::out) is semidet.$/;kq|/^\<get_if_in_range\>/;'q;"	kind:pred	file:
get_implementation_defined_literal_rest	lexer.m	/^:- pred get_implementation_defined_literal_rest(io.input_stream::in,$/;kq|/^\<get_implementation_defined_literal_rest\>/;'q;"	kind:pred	file:
get_int_dot	lexer.m	/^:- pred get_int_dot(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_int_dot\>/;'q;"	kind:pred	file:
get_io_input_stream_type	io.m	/^:- pred io.get_io_input_stream_type(type_desc::out, io::di, io::uo) is det.$/;kq|/^\<io.get_io_input_stream_type\>/;'q;"	kind:pred	file:
get_io_output_stream_type	io.m	/^:- pred io.get_io_output_stream_type(type_desc::out, io::di, io::uo) is det.$/;kq|/^\<io.get_io_output_stream_type\>/;'q;"	kind:pred	file:
get_io_stream_info	io.m	/^:- func get_io_stream_info(io.stream_db, T) = maybe_stream_info is semidet.$/;kq|/^\<get_io_stream_info\>/;'q;"	kind:func
get_last	cord.m	/^:- pred get_last(cord(T)::in, T::out) is semidet.$/;kq|/^\<get_last\>/;'q;"	kind:pred
get_last_node	cord.m	/^:- pred get_last_node(cord_node(T)::in, T::out) is det.$/;kq|/^\<get_last_node\>/;'q;"	kind:pred	file:
get_layout_equiv	rtti_implementation.m	/^:- func get_layout_equiv(type_layout) = type_info.$/;kq|/^\<get_layout_equiv\>/;'q;"	kind:func	file:
get_line	io.m	/^    pred(get_line\/4) is io.get_line_number,$/;kq|-;/\<get_line\>/;'q;"	kind:tcim	file:
get_line	io.m	/^    pred(get_line\/4) is io.get_output_line_number,$/;kq|-;/\<get_line\>/;'q;"	kind:tcim	file:
get_line	stream.m	/^    pred get_line(Stream::in, int::out, State::di, State::uo) is det,$/;kq|-;/\<get_line\>/;'q;"	kind:tcm
get_line_number	io.m	/^:- pred io.get_line_number(int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_line_number\>/;'q;"	kind:pred
get_line_number	io.m	/^:- pred io.get_line_number(io.input_stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.get_line_number\>/;'q;"	kind:pred
get_line_number_2	io.m	/^:- pred io.get_line_number_2(io.stream::in, int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_line_number_2\>/;'q;"	kind:pred	file:
get_minimum_element	eqvclass.m	/^:- func eqvclass.get_minimum_element(eqvclass(T), T) = T.$/;kq|/^\<eqvclass.get_minimum_element\>/;'q;"	kind:func
get_mutvar	mutvar.m	/^:- impure pred get_mutvar(mutvar(T), T) is det.$/;kq|/^\<get_mutvar\>/;'q;"	kind:pred
get_mutvar	store.m	/^:- pred store.get_mutvar(generic_mutvar(T, S)::in, T::out,$/;kq|/^\<store.get_mutvar\>/;'q;"	kind:pred
get_mutvar	version_store.m	/^:- pred get_mutvar(mutvar(T, S)::in, T::out,$/;kq|/^\<get_mutvar\>/;'q;"	kind:pred
get_name	lexer.m	/^:- pred get_name(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_name\>/;'q;"	kind:pred	file:
get_next_line	string.m	/^:- pred get_next_line(list(list(string))::in,$/;kq|/^\<get_next_line\>/;'q;"	kind:pred	file:
get_number	lexer.m	/^:- pred get_number(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_number\>/;'q;"	kind:pred	file:
get_octal	lexer.m	/^:- pred get_octal(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_octal\>/;'q;"	kind:pred	file:
get_octal_2	lexer.m	/^:- pred get_octal_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_octal_2\>/;'q;"	kind:pred	file:
get_octal_escape	lexer.m	/^:- pred get_octal_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_octal_escape\>/;'q;"	kind:pred	file:
get_one_solution	builtin.m	/^:- impure func get_one_solution(pred(T)) = T.$/;kq|/^\<get_one_solution\>/;'q;"	kind:func
get_one_solution_io	builtin.m	/^:- impure pred get_one_solution_io(pred(T, IO, IO), T, IO, IO).$/;kq|/^\<get_one_solution_io\>/;'q;"	kind:pred
get_one_table_overall_stats	table_statistics.m	/^:- pred get_one_table_overall_stats(ml_table_stats_ptr::in,$/;kq|/^\<get_one_table_overall_stats\>/;'q;"	kind:pred	file:
get_one_table_stats	table_statistics.m	/^:- pred get_one_table_stats(ml_table_step_desc_ptr::in, ml_table_stats_ptr::in,$/;kq|/^\<get_one_table_stats\>/;'q;"	kind:pred	file:
get_one_table_stats_step_loop	table_statistics.m	/^:- pred get_one_table_stats_step_loop(ml_table_step_desc_ptr::in,$/;kq|/^\<get_one_table_stats_step_loop\>/;'q;"	kind:pred	file:
get_one_table_step_stat_details	table_statistics.m	/^:- pred get_one_table_step_stat_details(ml_table_step_desc_ptr::in,$/;kq|/^\<get_one_table_step_stat_details\>/;'q;"	kind:pred	file:
get_one_table_step_stats	table_statistics.m	/^:- pred get_one_table_step_stats(ml_table_step_desc_ptr::in,$/;kq|/^\<get_one_table_step_stats\>/;'q;"	kind:pred	file:
get_op_table	io.m	/^:- pred io.get_op_table(ops.table::out, io::di, io::uo) is det.$/;kq|/^\<io.get_op_table\>/;'q;"	kind:pred
get_ops_table	parser.m	/^:- pred get_ops_table(state(Ops, T)::in, Ops::out) is det$/;kq|/^\<get_ops_table\>/;'q;"	kind:pred	file:
get_output_line_number	io.m	/^:- pred io.get_output_line_number(int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_output_line_number\>/;'q;"	kind:pred
get_output_line_number	io.m	/^:- pred io.get_output_line_number(io.output_stream::in, int::out,$/;kq|/^\<io.get_output_line_number\>/;'q;"	kind:pred
get_output_line_number_2	io.m	/^:- pred io.get_output_line_number_2(io.stream::in, int::out,$/;kq|/^\<io.get_output_line_number_2\>/;'q;"	kind:pred	file:
get_primary_tag	rtti_implementation.m	/^:- func get_primary_tag(T) = int.$/;kq|/^\<get_primary_tag\>/;'q;"	kind:func	file:
get_proc_info_direct_fields	table_statistics.m	/^:- pred get_proc_info_direct_fields(ml_proc_table_info::in,$/;kq|/^\<get_proc_info_direct_fields\>/;'q;"	kind:pred	file:
get_pti_from_arg_types	rtti_implementation.m	/^:- func get_pti_from_arg_types(arg_types, int) = pseudo_type_info.$/;kq|/^\<get_pti_from_arg_types\>/;'q;"	kind:func	file:
get_pti_from_type_info_index	rtti_implementation.m	/^:- pred get_pti_from_type_info_index(type_info::in, int::in, int::in,$/;kq|/^\<get_pti_from_type_info_index\>/;'q;"	kind:pred	file:
get_quoted_name	lexer.m	/^:- pred get_quoted_name(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_quoted_name\>/;'q;"	kind:pred	file:
get_quoted_name_escape	lexer.m	/^:- pred get_quoted_name_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_quoted_name_escape\>/;'q;"	kind:pred	file:
get_quoted_name_quote	lexer.m	/^:- pred get_quoted_name_quote(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_quoted_name_quote\>/;'q;"	kind:pred	file:
get_registers	solutions.m	/^:- impure pred get_registers(heap_ptr::out, heap_ptr::out, trail_ptr::out)$/;kq|/^\<get_registers\>/;'q;"	kind:pred	file:
get_remote_secondary_tag	rtti_implementation.m	/^:- func get_remote_secondary_tag(T) = int.$/;kq|/^\<get_remote_secondary_tag\>/;'q;"	kind:func	file:
get_sets	test_bitset.m	/^:- pred get_sets(string::in, list(pair(tree_bitset(T), set_ordlist(T)))::in,$/;kq|/^\<get_sets\>/;'q;"	kind:pred	file:
get_short_option_arg	getopt.m	/^:- pred getopt.get_short_option_arg(list(char)::in, string::out,$/;kq|/^\<getopt.get_short_option_arg\>/;'q;"	kind:pred	file:
get_short_option_arg	getopt_io.m	/^:- pred getopt_io.get_short_option_arg(list(char)::in, string::out,$/;kq|/^\<getopt_io.get_short_option_arg\>/;'q;"	kind:pred	file:
get_skip_whitespace_pred	parsing_utils.m	/^:- pred get_skip_whitespace_pred(src::in, skip_whitespace_pred::out(parser))$/;kq|/^\<get_skip_whitespace_pred\>/;'q;"	kind:pred
get_slash	lexer.m	/^:- pred get_slash(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_slash\>/;'q;"	kind:pred	file:
get_source_line_number	lexer.m	/^:- pred get_source_line_number(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_source_line_number\>/;'q;"	kind:pred	file:
get_stream_db	io.m	/^:- pred io.get_stream_db(io.stream_db::out, io::di, io::uo) is det.$/;kq|/^\<io.get_stream_db\>/;'q;"	kind:pred
get_stream_db_with_locking	io.m	/^:- impure pred io.get_stream_db_with_locking(io.stream_db::out) is det.$/;kq|/^\<io.get_stream_db_with_locking\>/;'q;"	kind:pred
get_stream_id	io.m	/^:- func io.get_stream_id(io.stream) = io.stream_id.$/;kq|/^\<io.get_stream_id\>/;'q;"	kind:func	file:
get_subterm	erlang_rtti_implementation.m	/^:- some [T] func get_subterm(type_info, U, int, int) = T.$/;kq|/^\<get_subterm\>/;'q;"	kind:func	file:
get_subterm	rtti_implementation.m	/^:- some [T] func get_subterm(du_functor_desc, type_info, U, int, int) = T.$/;kq|/^\<get_subterm\>/;'q;"	kind:func	file:
get_system_error	io.m	/^:- pred io.get_system_error(io.system_error::out, io::di, io::uo) is det.$/;kq|/^\<io.get_system_error\>/;'q;"	kind:pred	file:
get_tabling_stats	table_statistics.m	/^:- pred get_tabling_stats(ml_proc_table_info::in, proc_table_statistics::out,$/;kq|/^\<get_tabling_stats\>/;'q;"	kind:pred	file:
get_term_context	parser.m	/^:- pred get_term_context(state(Ops, T)::in, token_context::in,$/;kq|/^\<get_term_context\>/;'q;"	kind:pred	file:
get_term_context	term.m	/^:- func get_term_context(term(T)) = term.context.$/;kq|/^\<get_term_context\>/;'q;"	kind:func
get_token	lexer.m	/^:- pred get_token(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_token\>/;'q;"	kind:pred	file:
get_token_2	lexer.m	/^:- pred get_token_2(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_token_2\>/;'q;"	kind:pred	file:
get_token_action	lexer.m	/^:- type get_token_action$/;kq|-;/\<get_token_action\>/;'q;"	kind:type	file:
get_token_list	lexer.m	/^:- pred get_token_list(token_list::out, io::di, io::uo) is det.$/;kq|/^\<get_token_list\>/;'q;"	kind:pred
get_token_list_2	lexer.m	/^:- pred get_token_list_2(io.input_stream::in, token::in, token_context::in,$/;kq|/^\<get_token_list_2\>/;'q;"	kind:pred	file:
get_tuple_arg	erlang_rtti_implementation.m	/^:- func get_tuple_arg(type_info, U, int) = univ.$/;kq|/^\<get_tuple_arg\>/;'q;"	kind:func	file:
get_tuple_subterm	rtti_implementation.m	/^:- some [T] func get_tuple_subterm(type_info, U, int) = T.$/;kq|/^\<get_tuple_subterm\>/;'q;"	kind:func	file:
get_type_ctor_functors	rtti_implementation.m	/^:- func get_type_ctor_functors(type_ctor_info) = type_functors.$/;kq|/^\<get_type_ctor_functors\>/;'q;"	kind:func	file:
get_type_ctor_info	rtti_implementation.m	/^:- func get_type_ctor_info(type_info) = type_ctor_info.$/;kq|/^\<get_type_ctor_info\>/;'q;"	kind:func
get_type_ctor_rep	rtti_implementation.m	/^:- func get_type_ctor_rep(type_ctor_info) = type_ctor_rep.$/;kq|/^\<get_type_ctor_rep\>/;'q;"	kind:func	file:
get_type_functors	rtti_implementation.m	/^:- func get_type_functors(type_ctor_info) = type_functors.$/;kq|/^\<get_type_functors\>/;'q;"	kind:func	file:
get_type_info	erlang_rtti_implementation.m	/^:- func get_type_info(T::unused) = (type_info::out) is det.$/;kq|/^\<get_type_info\>/;'q;"	kind:func
get_type_info	rtti_implementation.m	/^:- func get_type_info(T::unused) = (type_info::out) is det.$/;kq|/^\<get_type_info\>/;'q;"	kind:func
get_type_info_for_type_info	type_desc.m	/^:- func get_type_info_for_type_info = type_desc.$/;kq|/^\<get_type_info_for_type_info\>/;'q;"	kind:func	file:
get_type_info_for_var	rtti_implementation.m	/^:- pred get_type_info_for_var(type_info::in, int::in, T::in,$/;kq|/^\<get_type_info_for_var\>/;'q;"	kind:pred	file:
get_type_info_from_term	rtti_implementation.m	/^:- func get_type_info_from_term(U, int) = type_info.$/;kq|/^\<get_type_info_from_term\>/;'q;"	kind:func	file:
get_type_layout	rtti_implementation.m	/^:- func get_type_layout(type_ctor_info) = type_layout.$/;kq|/^\<get_type_layout\>/;'q;"	kind:func	file:
get_typeclass_info_from_term	rtti_implementation.m	/^:- func get_typeclass_info_from_term(U, int) = typeclass_info.$/;kq|/^\<get_typeclass_info_from_term\>/;'q;"	kind:func	file:
get_unicode_escape	lexer.m	/^:- pred get_unicode_escape(io.input_stream::in, int::in, char::in,$/;kq|/^\<get_unicode_escape\>/;'q;"	kind:pred	file:
get_user_cpu_milliseconds	benchmarking.m	/^:- impure pred get_user_cpu_milliseconds(int::out) is det.$/;kq|/^\<get_user_cpu_milliseconds\>/;'q;"	kind:pred	file:
get_var_arity_arg_type_infos	erlang_rtti_implementation.m	/^:- func get_var_arity_arg_type_infos(type_info) = list(type_info).$/;kq|/^\<get_var_arity_arg_type_infos\>/;'q;"	kind:func	file:
get_var_arity_typeinfo_arity	rtti_implementation.m	/^:- func get_var_arity_typeinfo_arity(type_info) = int.$/;kq|/^\<get_var_arity_typeinfo_arity\>/;'q;"	kind:func	file:
get_variable	lexer.m	/^:- pred get_variable(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_variable\>/;'q;"	kind:pred	file:
get_zero	lexer.m	/^:- pred get_zero(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_zero\>/;'q;"	kind:pred	file:
getenv	io.m	/^:- semipure pred io.getenv(string::in, string::out) is semidet.$/;kq|/^\<io.getenv\>/;'q;"	kind:pred	file:
getopt.accumulating	getopt.m	/^    ;       accumulating(list(string))$/;kq|-;/\<getopt.accumulating\>/;'q;"	kind:cons
getopt.bool	getopt.m	/^    --->    bool(bool)$/;kq|-;/\<getopt.bool\>/;'q;"	kind:cons
getopt.bool	getopt.m	/^    ;       bool(bool)$/;kq|-;/\<getopt.bool\>/;'q;"	kind:cons
getopt.bool_special	getopt.m	/^    ;       bool_special$/;kq|-;/\<getopt.bool_special\>/;'q;"	kind:cons
getopt.error	getopt.m	/^    ;       error(string).$/;kq|-;/\<getopt.error\>/;'q;"	kind:cons
getopt.get_short_option_arg	getopt.m	/^:- pred getopt.get_short_option_arg(list(char)::in, string::out,$/;kq|/^\<getopt.get_short_option_arg\>/;'q;"	kind:pred	file:
getopt.handle_long_option	getopt.m	/^:- pred getopt.handle_long_option(string::in, OptionType::in, option_data::in,$/;kq|/^\<getopt.handle_long_option\>/;'q;"	kind:pred	file:
getopt.handle_short_options	getopt.m	/^:- pred getopt.handle_short_options(list(char)::in,$/;kq|/^\<getopt.handle_short_options\>/;'q;"	kind:pred	file:
getopt.init_option_table	getopt.m	/^:- pred init_option_table($/;kq|/^\<init_option_table\>/;'q;"	kind:pred
getopt.init_option_table_multi	getopt.m	/^:- pred init_option_table_multi($/;kq|/^\<init_option_table_multi\>/;'q;"	kind:pred
getopt.int	getopt.m	/^    ;       int(int)$/;kq|-;/\<getopt.int\>/;'q;"	kind:cons
getopt.int	getopt.m	/^    ;       int(int)$/;kq|-;/\<getopt.int\>/;'q;"	kind:cons
getopt.int_special	getopt.m	/^    ;       int_special$/;kq|-;/\<getopt.int_special\>/;'q;"	kind:cons
getopt.long_option	getopt.m	/^                long_option     :: pred(string, OptionType),$/;kq|-;/\<getopt.long_option\>/;'q;"	kind:fld	file:
getopt.lookup_bool_option	getopt.m	/^:- func getopt.lookup_bool_option(option_table(Option), Option) = bool.$/;kq|/^\<getopt.lookup_bool_option\>/;'q;"	kind:func
getopt.lookup_bool_option	getopt.m	/^:- pred getopt.lookup_bool_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_bool_option\>/;'q;"	kind:pred
getopt.lookup_int_option	getopt.m	/^:- func getopt.lookup_int_option(option_table(Option), Option) = int.$/;kq|/^\<getopt.lookup_int_option\>/;'q;"	kind:func
getopt.lookup_int_option	getopt.m	/^:- pred getopt.lookup_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_int_option\>/;'q;"	kind:pred
getopt.lookup_maybe_int_option	getopt.m	/^:- func getopt.lookup_maybe_int_option(option_table(Option), Option) =$/;kq|/^\<getopt.lookup_maybe_int_option\>/;'q;"	kind:func
getopt.lookup_maybe_int_option	getopt.m	/^:- pred getopt.lookup_maybe_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_maybe_int_option\>/;'q;"	kind:pred
getopt.lookup_string_option	getopt.m	/^:- func getopt.lookup_string_option(option_table(Option), Option) = string.$/;kq|/^\<getopt.lookup_string_option\>/;'q;"	kind:func
getopt.lookup_string_option	getopt.m	/^:- pred getopt.lookup_string_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_string_option\>/;'q;"	kind:pred
getopt.maybe_int	getopt.m	/^    ;       maybe_int(maybe(int))$/;kq|-;/\<getopt.maybe_int\>/;'q;"	kind:cons
getopt.maybe_option_table	getopt.m	/^:- type maybe_option_table(OptionType)$/;kq|-;/\<getopt.maybe_option_table\>/;'q;"	kind:type
getopt.maybe_string	getopt.m	/^    ;       maybe_string(maybe(string))$/;kq|-;/\<getopt.maybe_string\>/;'q;"	kind:cons
getopt.maybe_string	getopt.m	/^    ;       maybe_string(maybe(string)).$/;kq|-;/\<getopt.maybe_string\>/;'q;"	kind:cons
getopt.maybe_string_special	getopt.m	/^    ;       maybe_string_special.$/;kq|-;/\<getopt.maybe_string_special\>/;'q;"	kind:cons
getopt.need_arg	getopt.m	/^:- pred getopt.need_arg(option_data::in, bool::out) is det.$/;kq|/^\<getopt.need_arg\>/;'q;"	kind:pred	file:
getopt.none	getopt.m	/^    --->    none$/;kq|-;/\<getopt.none\>/;'q;"	kind:cons
getopt.none	getopt.m	/^    --->    none$/;kq|-;/\<getopt.none\>/;'q;"	kind:cons	file:
getopt.notrack	getopt.m	/^    ;       notrack($/;kq|-;/\<getopt.notrack\>/;'q;"	kind:cons	file:
getopt.numeric_argument	getopt.m	/^:- pred getopt.numeric_argument(string::in, string::in,$/;kq|/^\<getopt.numeric_argument\>/;'q;"	kind:pred	file:
getopt.ok	getopt.m	/^    --->    ok(option_table(OptionType))$/;kq|-;/\<getopt.ok\>/;'q;"	kind:cons
getopt.option_data	getopt.m	/^:- type option_data$/;kq|-;/\<getopt.option_data\>/;'q;"	kind:type
getopt.option_ops	getopt.m	/^    --->    option_ops($/;kq|-;/\<getopt.option_ops\>/;'q;"	kind:cons
getopt.option_ops	getopt.m	/^    ;       option_ops($/;kq|-;/\<getopt.option_ops\>/;'q;"	kind:cons
getopt.option_ops	getopt.m	/^:- inst option_ops ==$/;kq|-;/\<getopt.option_ops\>/;'q;"	kind:inst
getopt.option_ops	getopt.m	/^:- type option_ops(OptionType)$/;kq|-;/\<getopt.option_ops\>/;'q;"	kind:type
getopt.option_ops_internal	getopt.m	/^    --->    option_ops_internal($/;kq|-;/\<getopt.option_ops_internal\>/;'q;"	kind:cons	file:
getopt.option_ops_internal	getopt.m	/^:- inst option_ops_internal ==$/;kq|-;/\<getopt.option_ops_internal\>/;'q;"	kind:inst	file:
getopt.option_ops_internal	getopt.m	/^:- type option_ops_internal(OptionType)$/;kq|-;/\<getopt.option_ops_internal\>/;'q;"	kind:type	file:
getopt.option_ops_multi	getopt.m	/^    ;       option_ops_multi($/;kq|-;/\<getopt.option_ops_multi\>/;'q;"	kind:cons
getopt.option_ops_multi	getopt.m	/^    ;       option_ops_multi($/;kq|-;/\<getopt.option_ops_multi\>/;'q;"	kind:cons
getopt.option_ops_special	getopt.m	/^:- type option_ops_special(OptionType)$/;kq|-;/\<getopt.option_ops_special\>/;'q;"	kind:type	file:
getopt.option_ops_track	getopt.m	/^    --->    option_ops_track($/;kq|-;/\<getopt.option_ops_track\>/;'q;"	kind:cons
getopt.option_ops_track	getopt.m	/^:- inst option_ops_track ==$/;kq|-;/\<getopt.option_ops_track\>/;'q;"	kind:inst
getopt.option_ops_track	getopt.m	/^:- type option_ops_track(OptionType)$/;kq|-;/\<getopt.option_ops_track\>/;'q;"	kind:type
getopt.option_table	getopt.m	/^:- type option_table(OptionType) ==  map(OptionType, option_data).$/;kq|-;/\<getopt.option_table\>/;'q;"	kind:type
getopt.process_arguments	getopt.m	/^:- pred getopt.process_arguments(list(string)::in, list(string)::out,$/;kq|/^\<getopt.process_arguments\>/;'q;"	kind:pred	file:
getopt.process_negated_option	getopt.m	/^:- pred process_negated_option(string::in, OptionType::in,$/;kq|/^\<process_negated_option\>/;'q;"	kind:pred	file:
getopt.process_option	getopt.m	/^:- pred getopt.process_option(option_data::in, string::in, OptionType::in,$/;kq|/^\<getopt.process_option\>/;'q;"	kind:pred	file:
getopt.process_options	getopt.m	/^:- pred getopt.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt.process_options\>/;'q;"	kind:pred
getopt.process_options	getopt.m	/^:- pred getopt.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt.process_options\>/;'q;"	kind:pred
getopt.process_options_track	getopt.m	/^:- pred getopt.process_options_track($/;kq|/^\<getopt.process_options_track\>/;'q;"	kind:pred
getopt.process_special	getopt.m	/^:- pred getopt.process_special(string::in, OptionType::in, special_data::in,$/;kq|/^\<getopt.process_special\>/;'q;"	kind:pred	file:
getopt.short_option	getopt.m	/^                short_option    :: pred(char, OptionType),$/;kq|-;/\<getopt.short_option\>/;'q;"	kind:fld	file:
getopt.special	getopt.m	/^    ;       special$/;kq|-;/\<getopt.special\>/;'q;"	kind:cons
getopt.special_data	getopt.m	/^:- type special_data$/;kq|-;/\<getopt.special_data\>/;'q;"	kind:type
getopt.special_handler	getopt.m	/^                special_handler :: option_ops_special(OptionType)$/;kq|-;/\<getopt.special_handler\>/;'q;"	kind:fld	file:
getopt.string	getopt.m	/^    ;       string(string)$/;kq|-;/\<getopt.string\>/;'q;"	kind:cons
getopt.string	getopt.m	/^    ;       string(string)$/;kq|-;/\<getopt.string\>/;'q;"	kind:cons
getopt.string_special	getopt.m	/^    ;       string_special$/;kq|-;/\<getopt.string_special\>/;'q;"	kind:cons
getopt.track	getopt.m	/^    ;       track($/;kq|-;/\<getopt.track\>/;'q;"	kind:cons	file:
getopt_io.accumulating	getopt_io.m	/^    ;       accumulating(list(string))$/;kq|-;/\<getopt_io.accumulating\>/;'q;"	kind:cons
getopt_io.bool	getopt_io.m	/^    --->    bool(bool)$/;kq|-;/\<getopt_io.bool\>/;'q;"	kind:cons
getopt_io.bool	getopt_io.m	/^    ;       bool(bool)$/;kq|-;/\<getopt_io.bool\>/;'q;"	kind:cons
getopt_io.bool_special	getopt_io.m	/^    ;       bool_special$/;kq|-;/\<getopt_io.bool_special\>/;'q;"	kind:cons
getopt_io.error	getopt_io.m	/^    ;       error(string).$/;kq|-;/\<getopt_io.error\>/;'q;"	kind:cons
getopt_io.file_special	getopt_io.m	/^    ;       file_special.$/;kq|-;/\<getopt_io.file_special\>/;'q;"	kind:cons
getopt_io.get_short_option_arg	getopt_io.m	/^:- pred getopt_io.get_short_option_arg(list(char)::in, string::out,$/;kq|/^\<getopt_io.get_short_option_arg\>/;'q;"	kind:pred	file:
getopt_io.handle_long_option	getopt_io.m	/^:- pred getopt_io.handle_long_option(string::in,$/;kq|/^\<getopt_io.handle_long_option\>/;'q;"	kind:pred	file:
getopt_io.handle_short_options	getopt_io.m	/^:- pred getopt_io.handle_short_options(list(char)::in,$/;kq|/^\<getopt_io.handle_short_options\>/;'q;"	kind:pred	file:
getopt_io.init_option_table	getopt_io.m	/^:- pred init_option_table($/;kq|/^\<init_option_table\>/;'q;"	kind:pred
getopt_io.int	getopt_io.m	/^    ;       int(int)$/;kq|-;/\<getopt_io.int\>/;'q;"	kind:cons
getopt_io.int	getopt_io.m	/^    ;       int(int)$/;kq|-;/\<getopt_io.int\>/;'q;"	kind:cons
getopt_io.int_special	getopt_io.m	/^    ;       int_special$/;kq|-;/\<getopt_io.int_special\>/;'q;"	kind:cons
getopt_io.long_option	getopt_io.m	/^                long_option     :: pred(string, OptionType),$/;kq|-;/\<getopt_io.long_option\>/;'q;"	kind:fld	file:
getopt_io.lookup_bool_option	getopt_io.m	/^:- func getopt_io.lookup_bool_option(option_table(Option), Option) = bool.$/;kq|/^\<getopt_io.lookup_bool_option\>/;'q;"	kind:func
getopt_io.lookup_bool_option	getopt_io.m	/^:- pred getopt_io.lookup_bool_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_bool_option\>/;'q;"	kind:pred
getopt_io.lookup_int_option	getopt_io.m	/^:- func getopt_io.lookup_int_option(option_table(Option), Option) = int.$/;kq|/^\<getopt_io.lookup_int_option\>/;'q;"	kind:func
getopt_io.lookup_int_option	getopt_io.m	/^:- pred getopt_io.lookup_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_int_option\>/;'q;"	kind:pred
getopt_io.lookup_string_option	getopt_io.m	/^:- func getopt_io.lookup_string_option(option_table(Option), Option) = string.$/;kq|/^\<getopt_io.lookup_string_option\>/;'q;"	kind:func
getopt_io.lookup_string_option	getopt_io.m	/^:- pred getopt_io.lookup_string_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_string_option\>/;'q;"	kind:pred
getopt_io.maybe_int	getopt_io.m	/^    ;       maybe_int(maybe(int))$/;kq|-;/\<getopt_io.maybe_int\>/;'q;"	kind:cons
getopt_io.maybe_option_table	getopt_io.m	/^:- type maybe_option_table(OptionType)$/;kq|-;/\<getopt_io.maybe_option_table\>/;'q;"	kind:type
getopt_io.maybe_string	getopt_io.m	/^    ;       maybe_string(maybe(string))$/;kq|-;/\<getopt_io.maybe_string\>/;'q;"	kind:cons
getopt_io.maybe_string	getopt_io.m	/^    ;       maybe_string(maybe(string)).$/;kq|-;/\<getopt_io.maybe_string\>/;'q;"	kind:cons
getopt_io.maybe_string_special	getopt_io.m	/^    ;       maybe_string_special$/;kq|-;/\<getopt_io.maybe_string_special\>/;'q;"	kind:cons
getopt_io.need_arg	getopt_io.m	/^:- pred getopt_io.need_arg(option_data::in, bool::out) is det.$/;kq|/^\<getopt_io.need_arg\>/;'q;"	kind:pred	file:
getopt_io.none	getopt_io.m	/^    --->    none$/;kq|-;/\<getopt_io.none\>/;'q;"	kind:cons
getopt_io.none	getopt_io.m	/^    --->    none$/;kq|-;/\<getopt_io.none\>/;'q;"	kind:cons	file:
getopt_io.notrack	getopt_io.m	/^    ;       notrack($/;kq|-;/\<getopt_io.notrack\>/;'q;"	kind:cons	file:
getopt_io.numeric_argument	getopt_io.m	/^:- pred getopt_io.numeric_argument(string::in, string::in,$/;kq|/^\<getopt_io.numeric_argument\>/;'q;"	kind:pred	file:
getopt_io.ok	getopt_io.m	/^    --->    ok(option_table(OptionType))$/;kq|-;/\<getopt_io.ok\>/;'q;"	kind:cons
getopt_io.option_data	getopt_io.m	/^:- type option_data$/;kq|-;/\<getopt_io.option_data\>/;'q;"	kind:type
getopt_io.option_ops	getopt_io.m	/^    --->    option_ops($/;kq|-;/\<getopt_io.option_ops\>/;'q;"	kind:cons
getopt_io.option_ops	getopt_io.m	/^    ;       option_ops($/;kq|-;/\<getopt_io.option_ops\>/;'q;"	kind:cons
getopt_io.option_ops	getopt_io.m	/^:- inst option_ops ==$/;kq|-;/\<getopt_io.option_ops\>/;'q;"	kind:inst
getopt_io.option_ops	getopt_io.m	/^:- type option_ops(OptionType)$/;kq|-;/\<getopt_io.option_ops\>/;'q;"	kind:type
getopt_io.option_ops_internal	getopt_io.m	/^    --->    option_ops_internal($/;kq|-;/\<getopt_io.option_ops_internal\>/;'q;"	kind:cons	file:
getopt_io.option_ops_internal	getopt_io.m	/^:- inst option_ops_internal ==$/;kq|-;/\<getopt_io.option_ops_internal\>/;'q;"	kind:inst	file:
getopt_io.option_ops_internal	getopt_io.m	/^:- type option_ops_internal(OptionType)$/;kq|-;/\<getopt_io.option_ops_internal\>/;'q;"	kind:type	file:
getopt_io.option_ops_multi	getopt_io.m	/^    ;       option_ops_multi($/;kq|-;/\<getopt_io.option_ops_multi\>/;'q;"	kind:cons
getopt_io.option_ops_multi	getopt_io.m	/^    ;       option_ops_multi($/;kq|-;/\<getopt_io.option_ops_multi\>/;'q;"	kind:cons
getopt_io.option_ops_special	getopt_io.m	/^:- type option_ops_special(OptionType)$/;kq|-;/\<getopt_io.option_ops_special\>/;'q;"	kind:type	file:
getopt_io.option_ops_track	getopt_io.m	/^    --->    option_ops_track($/;kq|-;/\<getopt_io.option_ops_track\>/;'q;"	kind:cons
getopt_io.option_ops_track	getopt_io.m	/^:- inst option_ops_track ==$/;kq|-;/\<getopt_io.option_ops_track\>/;'q;"	kind:inst
getopt_io.option_ops_track	getopt_io.m	/^:- type option_ops_track(OptionType)$/;kq|-;/\<getopt_io.option_ops_track\>/;'q;"	kind:type
getopt_io.option_table	getopt_io.m	/^:- type option_table(OptionType) ==  map(OptionType, option_data).$/;kq|-;/\<getopt_io.option_table\>/;'q;"	kind:type
getopt_io.process_arguments	getopt_io.m	/^:- pred getopt_io.process_arguments(list(string)::in, list(string)::out,$/;kq|/^\<getopt_io.process_arguments\>/;'q;"	kind:pred	file:
getopt_io.process_option	getopt_io.m	/^:- pred getopt_io.process_option(option_data::in, string::in, OptionType::in,$/;kq|/^\<getopt_io.process_option\>/;'q;"	kind:pred	file:
getopt_io.process_options	getopt_io.m	/^:- pred getopt_io.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt_io.process_options\>/;'q;"	kind:pred
getopt_io.process_options	getopt_io.m	/^:- pred getopt_io.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt_io.process_options\>/;'q;"	kind:pred
getopt_io.process_special	getopt_io.m	/^:- pred getopt_io.process_special(string::in, OptionType::in, special_data::in,$/;kq|/^\<getopt_io.process_special\>/;'q;"	kind:pred	file:
getopt_io.short_option	getopt_io.m	/^                short_option    :: pred(char, OptionType),$/;kq|-;/\<getopt_io.short_option\>/;'q;"	kind:fld	file:
getopt_io.special	getopt_io.m	/^    ;       special$/;kq|-;/\<getopt_io.special\>/;'q;"	kind:cons
getopt_io.special_data	getopt_io.m	/^:- type special_data$/;kq|-;/\<getopt_io.special_data\>/;'q;"	kind:type
getopt_io.special_handler	getopt_io.m	/^                special_handler :: option_ops_special(OptionType)$/;kq|-;/\<getopt_io.special_handler\>/;'q;"	kind:fld	file:
getopt_io.string	getopt_io.m	/^    ;       string(string)$/;kq|-;/\<getopt_io.string\>/;'q;"	kind:cons
getopt_io.string	getopt_io.m	/^    ;       string(string)$/;kq|-;/\<getopt_io.string\>/;'q;"	kind:cons
getopt_io.string_special	getopt_io.m	/^    ;       string_special$/;kq|-;/\<getopt_io.string_special\>/;'q;"	kind:cons
getopt_io.track	getopt_io.m	/^    ;       track($/;kq|-;/\<getopt_io.track\>/;'q;"	kind:cons	file:
glb	robdd.m	/^:- func glb(robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<glb\>/;'q;"	kind:func	file:
gmtime	time.m	/^:- func time.gmtime(time_t) = tm.$/;kq|/^\<time.gmtime\>/;'q;"	kind:func
grab_string	lexer.m	/^:- pred grab_string(string::in, posn::in, string::out,$/;kq|/^\<grab_string\>/;'q;"	kind:pred	file:
graphic_token_char	lexer.m	/^:- pred graphic_token_char(char::in) is semidet.$/;kq|/^\<graphic_token_char\>/;'q;"	kind:pred
greatest_index	array.m	/^:- func array.greatest_index(array(T)) = int.$/;kq|/^\<array.greatest_index\>/;'q;"	kind:func
greedy_subtract_descending	calendar.m	/^:- pred greedy_subtract_descending(order::in, date::in, date::in,$/;kq|/^\<greedy_subtract_descending\>/;'q;"	kind:pred	file:
ground_pseudo_type_desc_to_type_desc	type_desc.m	/^:- func ground_pseudo_type_desc_to_type_desc(pseudo_type_desc) = type_desc$/;kq|/^\<ground_pseudo_type_desc_to_type_desc\>/;'q;"	kind:func
group	pprint.m	/^:- func group(T)            = doc <= (doc(T)).$/;kq|/^\<group\>/;'q;"	kind:func
group	pretty_printer.m	/^:- func group(docs) = doc.$/;kq|/^\<group\>/;'q;"	kind:func
group_interior_nodes	tree_bitset.m	/^:- pred group_interior_nodes(int::in, interior_node::in,$/;kq|/^\<group_interior_nodes\>/;'q;"	kind:pred	file:
group_interior_nodes_in_range	tree_bitset.m	/^:- pred group_interior_nodes_in_range(int::in, int::in, int::in,$/;kq|/^\<group_interior_nodes_in_range\>/;'q;"	kind:pred	file:
group_leaf_nodes	tree_bitset.m	/^:- pred group_leaf_nodes(leaf_node::in, list(leaf_node)::in,$/;kq|/^\<group_leaf_nodes\>/;'q;"	kind:pred	file:
group_leaf_nodes_in_range	tree_bitset.m	/^:- pred group_leaf_nodes_in_range(int::in, int::in,$/;kq|/^\<group_leaf_nodes_in_range\>/;'q;"	kind:pred	file:
handle	string.builder.m	/^    --->    handle.$/;kq|-;/\<handle\>/;'q;"	kind:cons
handle	string.builder.m	/^:- type handle$/;kq|-;/\<handle\>/;'q;"	kind:type
handle_long_option	getopt.m	/^:- pred getopt.handle_long_option(string::in, OptionType::in, option_data::in,$/;kq|/^\<getopt.handle_long_option\>/;'q;"	kind:pred	file:
handle_long_option	getopt_io.m	/^:- pred getopt_io.handle_long_option(string::in,$/;kq|/^\<getopt_io.handle_long_option\>/;'q;"	kind:pred	file:
handle_short_options	getopt.m	/^:- pred getopt.handle_short_options(list(char)::in,$/;kq|/^\<getopt.handle_short_options\>/;'q;"	kind:pred	file:
handle_short_options	getopt_io.m	/^:- pred getopt_io.handle_short_options(list(char)::in,$/;kq|/^\<getopt_io.handle_short_options\>/;'q;"	kind:pred	file:
handle_special_token	lexer.m	/^:- pred handle_special_token(char::in, scanned_past_whitespace::in, token::out)$/;kq|/^\<handle_special_token\>/;'q;"	kind:pred	file:
handle_stm_result	exception.m	/^:- pred handle_stm_result(exception_result({T, stm})::in(cannot_fail),$/;kq|/^\<handle_stm_result\>/;'q;"	kind:pred	file:
handle_store_result	exception.m	/^:- pred handle_store_result(exception_result({T, store(S)})::in(cannot_fail),$/;kq|/^\<handle_store_result\>/;'q;"	kind:pred	file:
handle_system_command_exit_code	io.m	/^:- func io.handle_system_command_exit_code(int) = int.$/;kq|/^\<io.handle_system_command_exit_code\>/;'q;"	kind:func	file:
handle_system_command_exit_status	io.m	/^:- func io.handle_system_command_exit_status(int) = io.res(io.system_result).$/;kq|/^\<io.handle_system_command_exit_status\>/;'q;"	kind:func
handle_usereq_type	rtti_implementation.m	/^:- pred handle_usereq_type(T, type_info, type_ctor_info, type_ctor_rep,$/;kq|/^\<handle_usereq_type\>/;'q;"	kind:pred	file:
handler	exception.m	/^:- inst handler == (pred(in, out) is det).$/;kq|-;/\<handler\>/;'q;"	kind:inst	file:
handler	exception.m	/^:- type handler(T) == pred(univ, T).$/;kq|-;/\<handler\>/;'q;"	kind:type	file:
hard_nl	pretty_printer.m	/^    ;       hard_nl$/;kq|-;/\<hard_nl\>/;'q;"	kind:cons
has_type	type_desc.m	/^:- some [T] pred has_type(T::unused, type_desc::in) is det.$/;kq|/^\<has_type\>/;'q;"	kind:pred
hash	bitmap.m	/^:- func hash(bitmap) = int.$/;kq|/^\<hash\>/;'q;"	kind:func
hash	float.m	/^:- func hash(float) = int.$/;kq|/^\<hash\>/;'q;"	kind:func
hash	string.m	/^:- func string.hash(string) = int.$/;kq|/^\<string.hash\>/;'q;"	kind:func
hash	string.m	/^:- pred string.hash(string::in, int::out) is det.$/;kq|/^\<string.hash\>/;'q;"	kind:pred
hash2	string.m	/^:- func string.hash2(string) = int.$/;kq|/^\<string.hash2\>/;'q;"	kind:func
hash2_loop	string.m	/^:- pred string.hash2_loop(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<string.hash2_loop\>/;'q;"	kind:pred	file:
hash3	string.m	/^:- func string.hash3(string) = int.$/;kq|/^\<string.hash3\>/;'q;"	kind:func
hash3_loop	string.m	/^:- pred string.hash3_loop(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<string.hash3_loop\>/;'q;"	kind:pred	file:
hash_2	bitmap.m	/^:- pred hash_2(bitmap::in, byte_index::in, int::in, int::in, int::out) is det.$/;kq|/^\<hash_2\>/;'q;"	kind:pred	file:
hash_loop	string.m	/^:- pred string.hash_loop(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<string.hash_loop\>/;'q;"	kind:pred	file:
hash_num_link_chunk_allocs	table_statistics.m	/^                hash_num_link_chunk_allocs          :: int,$/;kq|-;/\<hash_num_link_chunk_allocs\>/;'q;"	kind:fld
hash_num_link_chunk_bytes	table_statistics.m	/^                hash_num_link_chunk_bytes           :: int,$/;kq|-;/\<hash_num_link_chunk_bytes\>/;'q;"	kind:fld
hash_num_num_key_compares_dupl	table_statistics.m	/^                hash_num_num_key_compares_dupl      :: int,$/;kq|-;/\<hash_num_num_key_compares_dupl\>/;'q;"	kind:fld
hash_num_num_key_compares_not_dupl	table_statistics.m	/^                hash_num_num_key_compares_not_dupl  :: int,$/;kq|-;/\<hash_num_num_key_compares_not_dupl\>/;'q;"	kind:fld
hash_num_resizes	table_statistics.m	/^                hash_num_resizes                    :: int,$/;kq|-;/\<hash_num_resizes\>/;'q;"	kind:fld
hash_num_table_allocs	table_statistics.m	/^                hash_num_table_allocs               :: int,$/;kq|-;/\<hash_num_table_allocs\>/;'q;"	kind:fld
hash_num_table_bytes	table_statistics.m	/^                hash_num_table_bytes                :: int,$/;kq|-;/\<hash_num_table_bytes\>/;'q;"	kind:fld
hash_pred	hash_table.m	/^                hash_pred               :: hash_pred(K),$/;kq|-;/\<hash_pred\>/;'q;"	kind:fld
hash_pred	hash_table.m	/^:- func hash_pred(hash_table(K, V)) = hash_pred(K).$/;kq|/^\<hash_pred\>/;'q;"	kind:func
hash_pred	hash_table.m	/^:- inst hash_pred    == ( pred(in, out) is det ).$/;kq|-;/\<hash_pred\>/;'q;"	kind:inst
hash_pred	hash_table.m	/^:- type hash_pred(K) == ( pred(K, int) ).$/;kq|-;/\<hash_pred\>/;'q;"	kind:type
hash_pred	version_hash_table.m	/^:- inst hash_pred    == ( pred(in, out) is det ).$/;kq|-;/\<hash_pred\>/;'q;"	kind:inst
hash_pred	version_hash_table.m	/^:- type hash_pred(K) == ( pred(K,  int)        ).$/;kq|-;/\<hash_pred\>/;'q;"	kind:type
hash_resizes_num_new_entries	table_statistics.m	/^                hash_resizes_num_new_entries        :: int$/;kq|-;/\<hash_resizes_num_new_entries\>/;'q;"	kind:fld
hash_resizes_num_old_entries	table_statistics.m	/^                hash_resizes_num_old_entries        :: int,$/;kq|-;/\<hash_resizes_num_old_entries\>/;'q;"	kind:fld
hash_table	hash_table.m	/^:- inst hash_table == bound(ht(ground, ground, hash_pred, array)).$/;kq|-;/\<hash_table\>/;'q;"	kind:inst
hash_table	hash_table.m	/^:- type hash_table(K, V)$/;kq|-;/\<hash_table\>/;'q;"	kind:type
hash_table.'elem	hash_table.m	/^:- func 'elem :='(K, hash_table(K, V), V) = hash_table(K, V).$/;kq|/^\<'elem\>/;'q;"	kind:func
hash_table.alist_remove	hash_table.m	/^:- pred alist_remove(hash_table_alist(K, V)::in, K::in,$/;kq|/^\<alist_remove\>/;'q;"	kind:pred	file:
hash_table.alist_replace	hash_table.m	/^:- pred alist_replace(hash_table_alist(K, V)::in, K::in, V::in,$/;kq|/^\<alist_replace\>/;'q;"	kind:pred	file:
hash_table.alist_search	hash_table.m	/^:- pred alist_search(hash_table_alist(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<alist_search\>/;'q;"	kind:pred	file:
hash_table.buckets	hash_table.m	/^                buckets                 :: array(hash_table_alist(K, V))$/;kq|-;/\<hash_table.buckets\>/;'q;"	kind:fld
hash_table.buckets	hash_table.m	/^:- type buckets(K, V) == array(hash_table_alist(K, V)).$/;kq|-;/\<hash_table.buckets\>/;'q;"	kind:type	file:
hash_table.char_hash	hash_table.m	/^:- pred char_hash(char::in, int::out) is det.$/;kq|/^\<char_hash\>/;'q;"	kind:pred
hash_table.copy	hash_table.m	/^:- func copy(hash_table(K, V)) = hash_table(K, V).$/;kq|/^\<copy\>/;'q;"	kind:func
hash_table.delete	hash_table.m	/^:- func delete(hash_table(K, V), K) = hash_table(K, V).$/;kq|/^\<delete\>/;'q;"	kind:func
hash_table.delete	hash_table.m	/^:- pred delete(K::in,$/;kq|/^\<delete\>/;'q;"	kind:pred
hash_table.det_insert	hash_table.m	/^:- func det_insert(hash_table(K, V), K, V) = hash_table(K, V).$/;kq|/^\<det_insert\>/;'q;"	kind:func
hash_table.det_insert	hash_table.m	/^:- pred det_insert(K::in, V::in,$/;kq|/^\<det_insert\>/;'q;"	kind:pred
hash_table.det_update	hash_table.m	/^:- func det_update(hash_table(K, V), K, V) = hash_table(K, V).$/;kq|/^\<det_update\>/;'q;"	kind:func
hash_table.det_update	hash_table.m	/^:- pred det_update(K::in, V::in,$/;kq|/^\<det_update\>/;'q;"	kind:pred
hash_table.elem	hash_table.m	/^:- func elem(K, hash_table(K, V)) = V.$/;kq|/^\<elem\>/;'q;"	kind:func
hash_table.expand	hash_table.m	/^:- func expand(int::in, int::in, hash_pred(K)::in(hash_pred),$/;kq|/^\<expand\>/;'q;"	kind:func	file:
hash_table.find_slot	hash_table.m	/^:- func find_slot(hash_table(K, V), K) = int.$/;kq|/^\<find_slot\>/;'q;"	kind:func	file:
hash_table.find_slot_2	hash_table.m	/^:- pred find_slot_2(hash_pred(K)::in(hash_pred), K::in, int::in, int::out)$/;kq|/^\<find_slot_2\>/;'q;"	kind:pred	file:
hash_table.float_hash	hash_table.m	/^:- pred float_hash(float::in, int::out) is det.$/;kq|/^\<float_hash\>/;'q;"	kind:pred
hash_table.fold	hash_table.m	/^:- func fold(func(K, V, T) = T, hash_table(K, V), T) = T.$/;kq|/^\<fold\>/;'q;"	kind:func
hash_table.fold	hash_table.m	/^:- pred fold(pred(K, V, T, T), hash_table(K, V), T, T).$/;kq|/^\<fold\>/;'q;"	kind:pred
hash_table.fold_f	hash_table.m	/^:- pred fold_f(func(K, V, T) = T, hash_table_alist(K, V), T, T).$/;kq|/^\<fold_f\>/;'q;"	kind:pred	file:
hash_table.fold_p	hash_table.m	/^:- pred fold_p(pred(K, V, T, T), hash_table_alist(K, V), T, T).$/;kq|/^\<fold_p\>/;'q;"	kind:pred	file:
hash_table.from_assoc_list	hash_table.m	/^:- func from_assoc_list(hash_pred(K), int, float, assoc_list(K, V)) =$/;kq|/^\<from_assoc_list\>/;'q;"	kind:func
hash_table.from_assoc_list	hash_table.m	/^:- func from_assoc_list(hash_pred(K)::in(hash_pred), assoc_list(K, V)::in) =$/;kq|/^\<from_assoc_list\>/;'q;"	kind:func
hash_table.from_assoc_list_2	hash_table.m	/^:- pred from_assoc_list_2(assoc_list(K, V)::in,$/;kq|/^\<from_assoc_list_2\>/;'q;"	kind:pred	file:
hash_table.generic_hash	hash_table.m	/^:- pred generic_hash(T::in, int::out) is det.$/;kq|/^\<generic_hash\>/;'q;"	kind:pred
hash_table.hash_pred	hash_table.m	/^                hash_pred               :: hash_pred(K),$/;kq|-;/\<hash_table.hash_pred\>/;'q;"	kind:fld
hash_table.hash_pred	hash_table.m	/^:- func hash_pred(hash_table(K, V)) = hash_pred(K).$/;kq|/^\<hash_pred\>/;'q;"	kind:func
hash_table.hash_pred	hash_table.m	/^:- inst hash_pred    == ( pred(in, out) is det ).$/;kq|-;/\<hash_table.hash_pred\>/;'q;"	kind:inst
hash_table.hash_pred	hash_table.m	/^:- type hash_pred(K) == ( pred(K, int) ).$/;kq|-;/\<hash_table.hash_pred\>/;'q;"	kind:type
hash_table.ht	hash_table.m	/^    --->    ht($/;kq|-;/\<hash_table.ht\>/;'q;"	kind:cons
hash_table.ht_cons	hash_table.m	/^    ;       ht_cons(K, V, hash_table_alist(K, V)).$/;kq|-;/\<hash_table.ht_cons\>/;'q;"	kind:cons	file:
hash_table.ht_nil	hash_table.m	/^    --->    ht_nil$/;kq|-;/\<hash_table.ht_nil\>/;'q;"	kind:cons	file:
hash_table.ht_single	hash_table.m	/^    ;       ht_single(K, V)$/;kq|-;/\<hash_table.ht_single\>/;'q;"	kind:cons	file:
hash_table.init	hash_table.m	/^:- func init(hash_pred(K), int, float) = hash_table(K, V).$/;kq|/^\<init\>/;'q;"	kind:func
hash_table.init_default	hash_table.m	/^:- func init_default(hash_pred(K)) = hash_table(K, V).$/;kq|/^\<init_default\>/;'q;"	kind:func
hash_table.int_hash	hash_table.m	/^:- pred int_hash(int::in, int::out) is det.$/;kq|/^\<int_hash\>/;'q;"	kind:pred
hash_table.lookup	hash_table.m	/^:- func lookup(hash_table(K, V), K) = V.$/;kq|/^\<lookup\>/;'q;"	kind:func
hash_table.max_occupants	hash_table.m	/^                max_occupants           :: int,$/;kq|-;/\<hash_table.max_occupants\>/;'q;"	kind:fld
hash_table.munge	hash_table.m	/^:- func munge(int, int) = int.$/;kq|/^\<munge\>/;'q;"	kind:func	file:
hash_table.new	hash_table.m	/^:- func new(hash_pred(K), int, float) = hash_table(K, V).$/;kq|/^\<new\>/;'q;"	kind:func
hash_table.new_default	hash_table.m	/^:- func new_default(hash_pred(K)) = hash_table(K, V).$/;kq|/^\<new_default\>/;'q;"	kind:func
hash_table.num_buckets	hash_table.m	/^:- func num_buckets(hash_table(K, V)) = int.$/;kq|/^\<num_buckets\>/;'q;"	kind:func
hash_table.num_occupants	hash_table.m	/^                num_occupants           :: int,$/;kq|-;/\<hash_table.num_occupants\>/;'q;"	kind:fld
hash_table.num_occupants	hash_table.m	/^:- func num_occupants(hash_table(K, V)) = int.$/;kq|/^\<num_occupants\>/;'q;"	kind:func
hash_table.reinsert_alist	hash_table.m	/^:- pred reinsert_alist(hash_table_alist(K, V)::in, hash_pred(K)::in(hash_pred),$/;kq|/^\<reinsert_alist\>/;'q;"	kind:pred	file:
hash_table.reinsert_bindings	hash_table.m	/^:- pred reinsert_bindings(int::in, buckets(K, V)::array_ui,$/;kq|/^\<reinsert_bindings\>/;'q;"	kind:pred	file:
hash_table.search	hash_table.m	/^:- func search(hash_table(K, V), K) = V.$/;kq|/^\<search\>/;'q;"	kind:func
hash_table.search	hash_table.m	/^:- pred search(hash_table(K, V), K, V).$/;kq|/^\<search\>/;'q;"	kind:pred
hash_table.set	hash_table.m	/^:- func set(hash_table(K, V), K, V) = hash_table(K, V).$/;kq|/^\<set\>/;'q;"	kind:func
hash_table.set	hash_table.m	/^:- pred set(K::in, V::in,$/;kq|/^\<set\>/;'q;"	kind:pred
hash_table.string_hash	hash_table.m	/^:- pred string_hash(string::in, int::out) is det.$/;kq|/^\<string_hash\>/;'q;"	kind:pred
hash_table.to_assoc_list	hash_table.m	/^:- func to_assoc_list(hash_table(K, V)) = assoc_list(K, V).$/;kq|/^\<to_assoc_list\>/;'q;"	kind:func
hash_table.to_assoc_list_2	hash_table.m	/^:- pred to_assoc_list_2(hash_table_alist(K, V)::in,$/;kq|/^\<to_assoc_list_2\>/;'q;"	kind:pred	file:
hash_table.unsafe_insert	hash_table.m	/^:- pred unsafe_insert(K::in, V::in, hash_pred(K)::in(hash_pred), int::in,$/;kq|/^\<unsafe_insert\>/;'q;"	kind:pred	file:
hash_table_alist	hash_table.m	/^:- type hash_table_alist(K, V)$/;kq|-;/\<hash_table_alist\>/;'q;"	kind:type	file:
hash_table_alist	version_hash_table.m	/^:- type hash_table_alist(K, V)$/;kq|-;/\<hash_table_alist\>/;'q;"	kind:type	file:
hash_table_di	hash_table.m	/^:- mode hash_table_di == di(hash_table).$/;kq|-;/\<hash_table_di\>/;'q;"	kind:mode
hash_table_ui	hash_table.m	/^:- mode hash_table_ui == in(hash_table).$/;kq|-;/\<hash_table_ui\>/;'q;"	kind:mode
hash_table_uo	hash_table.m	/^:- mode hash_table_uo == out(hash_table).$/;kq|-;/\<hash_table_uo\>/;'q;"	kind:mode
have_cygwin	io.m	/^:- pred have_cygwin is semidet.$/;kq|/^\<have_cygwin\>/;'q;"	kind:pred
have_dotnet	io.m	/^:- pred have_dotnet is semidet.$/;kq|/^\<have_dotnet\>/;'q;"	kind:pred
have_dotnet_exec_permission	io.m	/^:- pred have_dotnet_exec_permission(io.res::out, io::di, io::uo) is det.$/;kq|/^\<have_dotnet_exec_permission\>/;'q;"	kind:pred	file:
have_file_ids	io.m	/^:- pred io.have_file_ids is semidet.$/;kq|/^\<io.have_file_ids\>/;'q;"	kind:pred
have_symlinks	io.m	/^:- pred io.have_symlinks is semidet.$/;kq|/^\<io.have_symlinks\>/;'q;"	kind:pred
have_win32	io.m	/^:- pred have_win32 is semidet.$/;kq|/^\<have_win32\>/;'q;"	kind:pred
head	integer.m	/^:- func head(integer) = digit.$/;kq|/^\<head\>/;'q;"	kind:func	file:
head	list.m	/^:- func list.head(list(T)) = T is semidet.$/;kq|/^\<list.head\>/;'q;"	kind:func
head_and_tail	tree_bitset.m	/^:- pred head_and_tail(list(interior_node)::in,$/;kq|/^\<head_and_tail\>/;'q;"	kind:pred	file:
head_tail	cord.m	/^:- pred head_tail(cord(T)::in, T::out, cord(T)::out) is semidet.$/;kq|/^\<head_tail\>/;'q;"	kind:pred
head_tail	integer.m	/^:- func head_tail(integer) = digit.$/;kq|/^\<head_tail\>/;'q;"	kind:func	file:
head_tail_node	cord.m	/^:- pred head_tail_node(cord_node(T)::in, T::out, cord(T)::out) is det.$/;kq|/^\<head_tail_node\>/;'q;"	kind:pred	file:
heap_ptr	solutions.m	/^:- type heap_ptr == private_builtin.heap_pointer.$/;kq|-;/\<heap_ptr\>/;'q;"	kind:type	file:
height	set_tree234.m	/^:- pred set_tree234.height(set_tree234(T)::in, int::out) is det.$/;kq|/^\<set_tree234.height\>/;'q;"	kind:pred	file:
hex_chars_to_bitmap	bitmap.m	/^:- pred hex_chars_to_bitmap(string::in, int::in, int::in, byte_index::in,$/;kq|/^\<hex_chars_to_bitmap\>/;'q;"	kind:pred	file:
high_level_data	rtti_implementation.m	/^:- pred high_level_data is semidet.$/;kq|/^\<high_level_data\>/;'q;"	kind:pred	file:
high_to_low	fat_sparse_bitset.m	/^    ;       high_to_low.$/;kq|-;/\<high_to_low\>/;'q;"	kind:cons	file:
high_to_low	sparse_bitset.m	/^    ;       high_to_low.$/;kq|-;/\<high_to_low\>/;'q;"	kind:cons	file:
high_to_low	tree_bitset.m	/^    ;       high_to_low.$/;kq|-;/\<high_to_low\>/;'q;"	kind:cons	file:
highbitmask	integer.m	/^:- func highbitmask = int.$/;kq|/^\<highbitmask\>/;'q;"	kind:func	file:
hosort	list.m	/^:- pred list.hosort(comparison_pred(X)::in(comparison_pred), int::in,$/;kq|/^\<list.hosort\>/;'q;"	kind:pred	file:
hour	calendar.m	/^:- func hour(date) = hour.$/;kq|/^\<hour\>/;'q;"	kind:func
hour	calendar.m	/^:- type hour == int.         % 0..23$/;kq|-;/\<hour\>/;'q;"	kind:type
hours	calendar.m	/^:- func hours(duration) = hours.$/;kq|/^\<hours\>/;'q;"	kind:func
hours	calendar.m	/^:- type hours == int.$/;kq|-;/\<hours\>/;'q;"	kind:type
ht	hash_table.m	/^    --->    ht($/;kq|-;/\<ht\>/;'q;"	kind:cons
ht	version_hash_table.m	/^    --->    ht($/;kq|-;/\<ht\>/;'q;"	kind:cons	file:
ht_buckets	version_hash_table.m	/^                ht_buckets              :: buckets(K, V)$/;kq|-;/\<ht_buckets\>/;'q;"	kind:fld	file:
ht_cons	hash_table.m	/^    ;       ht_cons(K, V, hash_table_alist(K, V)).$/;kq|-;/\<ht_cons\>/;'q;"	kind:cons	file:
ht_cons	version_hash_table.m	/^    ;       ht_cons(K, V, hash_table_alist(K, V)).$/;kq|-;/\<ht_cons\>/;'q;"	kind:cons	file:
ht_hash_pred	version_hash_table.m	/^                ht_hash_pred            :: hash_pred(K),$/;kq|-;/\<ht_hash_pred\>/;'q;"	kind:fld	file:
ht_max_occupants	version_hash_table.m	/^                ht_max_occupants        :: int,$/;kq|-;/\<ht_max_occupants\>/;'q;"	kind:fld	file:
ht_nil	hash_table.m	/^    --->    ht_nil$/;kq|-;/\<ht_nil\>/;'q;"	kind:cons	file:
ht_nil	version_hash_table.m	/^    --->    ht_nil$/;kq|-;/\<ht_nil\>/;'q;"	kind:cons	file:
ht_num_occupants	version_hash_table.m	/^                ht_num_occupants        :: int,$/;kq|-;/\<ht_num_occupants\>/;'q;"	kind:fld	file:
ht_sep	lexer.m	/^    ;       ht_sep              % '|'$/;kq|-;/\<ht_sep\>/;'q;"	kind:cons
ht_single	hash_table.m	/^    ;       ht_single(K, V)$/;kq|-;/\<ht_single\>/;'q;"	kind:cons	file:
ht_single	version_hash_table.m	/^    ;       ht_single(K, V)$/;kq|-;/\<ht_single\>/;'q;"	kind:cons	file:
i	integer.m	/^    --->    i(sign, list(digit)).$/;kq|-;/\<i\>/;'q;"	kind:cons	file:
i	string.m	/^    ;       i(int)$/;kq|-;/\<i\>/;'q;"	kind:cons
i	string.m	/^    ;       i(int)$/;kq|-;/\<i\>/;'q;"	kind:cons	file:
ia	builtin.m	/^:- mode ia == any >> any.$/;kq|-;/\<ia\>/;'q;"	kind:mode
id	std_util.m	/^:- func id(T) = T.$/;kq|/^\<id\>/;'q;"	kind:func
id_to_partition	eqvclass.m	/^:- pred eqvclass.id_to_partition(eqvclass(T)::in, partition_id::in,$/;kq|/^\<eqvclass.id_to_partition\>/;'q;"	kind:pred	file:
identifier	parsing_utils.m	/^:- pred identifier(string::in, string::in, src::in, string::out,$/;kq|/^\<identifier\>/;'q;"	kind:pred
identifier_2	parsing_utils.m	/^:- pred identifier_2(string::in, src::in, unit::out,$/;kq|/^\<identifier_2\>/;'q;"	kind:pred	file:
ignore_whitespace	io.m	/^:- pred io.ignore_whitespace(io.input_stream::in, io.result::out,$/;kq|/^\<io.ignore_whitespace\>/;'q;"	kind:pred
ignore_whitespace	io.m	/^:- pred io.ignore_whitespace(io.result::out, io::di, io::uo) is det.$/;kq|/^\<io.ignore_whitespace\>/;'q;"	kind:pred
ignore_whitespace	stream.m	/^:- pred stream.ignore_whitespace(Stream::in, stream.result(Error)::out,$/;kq|/^\<stream.ignore_whitespace\>/;'q;"	kind:pred
ikeyword	parsing_utils.m	/^:- pred ikeyword(string::in, string::in, src::in, unit::out,$/;kq|/^\<ikeyword\>/;'q;"	kind:pred
imatch_string	parsing_utils.m	/^:- pred imatch_string(string::in, src::in, ps::in, ps::out) is semidet.$/;kq|/^\<imatch_string\>/;'q;"	kind:pred	file:
imatch_string_2	parsing_utils.m	/^:- pred imatch_string_2(int::in, int::in, string::in, int::in, string::in)$/;kq|/^\<imatch_string_2\>/;'q;"	kind:pred	file:
imp	private_builtin.m	/^:- impure pred imp is det.$/;kq|/^\<imp\>/;'q;"	kind:pred
imp_map	robdd.m	/^:- type imp_map(T) == map(var(T), vars(T)).$/;kq|-;/\<imp_map\>/;'q;"	kind:type
imp_res	robdd.m	/^:- type imp_res(T) == entailment_result(imp_res_2(T)).$/;kq|-;/\<imp_res\>/;'q;"	kind:type	file:
imp_res_2	robdd.m	/^:- type imp_res_2(T)$/;kq|-;/\<imp_res_2\>/;'q;"	kind:type	file:
imp_res_to_imp_map	robdd.m	/^:- func imp_res_to_imp_map(imp_res(T)) = imp_map(T).$/;kq|/^\<imp_res_to_imp_map\>/;'q;"	kind:func	file:
imp_vars	robdd.m	/^    --->    imp_vars($/;kq|-;/\<imp_vars\>/;'q;"	kind:cons
imp_vars	robdd.m	/^:- func imp_vars(var(T), var(T)) = robdd(T).$/;kq|/^\<imp_vars\>/;'q;"	kind:func
imp_vars	robdd.m	/^:- type imp_vars(T)$/;kq|-;/\<imp_vars\>/;'q;"	kind:type
implementation_defined	lexer.m	/^    ;       implementation_defined(string) % $name$/;kq|-;/\<implementation_defined\>/;'q;"	kind:cons
implementation_defined	term.m	/^    ;       implementation_defined(string).$/;kq|-;/\<implementation_defined\>/;'q;"	kind:cons
implication_result	robdd.m	/^    --->    implication_result($/;kq|-;/\<implication_result\>/;'q;"	kind:cons	file:
implication_result	robdd.m	/^:- type implication_result(T)$/;kq|-;/\<implication_result\>/;'q;"	kind:type	file:
implication_result_to_imp_vars	robdd.m	/^:- func implication_result_to_imp_vars(implication_result(T)) = imp_vars(T).$/;kq|/^\<implication_result_to_imp_vars\>/;'q;"	kind:func	file:
implications_2	robdd.m	/^:- func implications_2(robdd(T)) = implication_result(T).$/;kq|/^\<implications_2\>/;'q;"	kind:func	file:
imps	robdd.m	/^                imps            :: imp_map(T), %  K =>  V  (~K \\\/  V)$/;kq|-;/\<imps\>/;'q;"	kind:fld
imps	robdd.m	/^    --->    imps(map(var(T), vars_entailed_result(T))).$/;kq|-;/\<imps\>/;'q;"	kind:cons	file:
impure_true	builtin.m	/^:- impure pred impure_true is det.$/;kq|/^\<impure_true\>/;'q;"	kind:pred
in	builtin.m	/^:- mode in  == ground >> ground.$/;kq|-;/\<in\>/;'q;"	kind:mode
in	builtin.m	/^:- mode in(Inst)  == Inst >> Inst.$/;kq|-;/\<in\>/;'q;"	kind:mode
in	prolog.m	/^:- mode in == in is semidet.$/;kq|-;/\<in\>/;'q;"	kind:mode
in	prolog.m	/^:- mode in \\== in is semidet.$/;kq|-;/\<in\>/;'q;"	kind:mode
in_bounds	array.m	/^:- pred array.in_bounds(array(_T), int).$/;kq|/^\<array.in_bounds\>/;'q;"	kind:pred
in_bounds	array2d.m	/^:- pred in_bounds(array2d(T), int, int).$/;kq|/^\<in_bounds\>/;'q;"	kind:pred
in_bounds	bt_array.m	/^:- pred bt_array.in_bounds(bt_array(_T)::in, int::in) is semidet.$/;kq|/^\<bt_array.in_bounds\>/;'q;"	kind:pred
in_bounds	version_array2d.m	/^:- pred in_bounds(version_array2d(T)::in, int::in, int::in) is semidet.$/;kq|/^\<in_bounds\>/;'q;"	kind:pred
in_four	set_ctree234.m	/^:- mode in_four  == in(four(ground, ground)).$/;kq|-;/\<in_four\>/;'q;"	kind:mode	file:
in_four	set_tree234.m	/^:- mode in_four  == in(four(ground, ground)).$/;kq|-;/\<in_four\>/;'q;"	kind:mode	file:
in_four	tree234.m	/^:- mode in_four  == in(four(ground, ground, ground)).$/;kq|-;/\<in_four\>/;'q;"	kind:mode	file:
in_list_skel	list.m	/^:- mode in_list_skel  == list_skel >> list_skel.$/;kq|-;/\<in_list_skel\>/;'q;"	kind:mode
in_range	bitmap.m	/^:- pred in_range(bitmap, bit_index).$/;kq|/^\<in_range\>/;'q;"	kind:pred
in_range	version_bitmap.m	/^:- pred in_range(version_bitmap::in, int::in) is semidet.$/;kq|/^\<in_range\>/;'q;"	kind:pred	file:
in_range_rexcl	bitmap.m	/^:- pred in_range_rexcl(bitmap, bit_index).$/;kq|/^\<in_range_rexcl\>/;'q;"	kind:pred	file:
in_three	set_ctree234.m	/^:- mode in_three  == in(three(ground, ground)).$/;kq|-;/\<in_three\>/;'q;"	kind:mode	file:
in_three	set_tree234.m	/^:- mode in_three  == in(three(ground, ground)).$/;kq|-;/\<in_three\>/;'q;"	kind:mode	file:
in_three	tree234.m	/^:- mode in_three  == in(three(ground, ground, ground)).$/;kq|-;/\<in_three\>/;'q;"	kind:mode	file:
in_two	set_ctree234.m	/^:- mode in_two  == in(two(ground, ground)).$/;kq|-;/\<in_two\>/;'q;"	kind:mode	file:
in_two	set_tree234.m	/^:- mode in_two  == in(two(ground, ground)).$/;kq|-;/\<in_two\>/;'q;"	kind:mode	file:
in_two	tree234.m	/^:- mode in_two  == in(two(ground, ground, ground)).$/;kq|-;/\<in_two\>/;'q;"	kind:mode	file:
include_details_cc	deconstruct.m	/^    ;       include_details_cc.$/;kq|-;/\<include_details_cc\>/;'q;"	kind:cons
include_details_cc	deconstruct.m	/^:- inst include_details_cc ---> include_details_cc.$/;kq|-;/\<include_details_cc\>/;'q;"	kind:inst
include_min	rtree.m	/^:- pred include_min(float::in, float::in, float::in, float::in,$/;kq|/^\<include_min\>/;'q;"	kind:pred	file:
incr_ref	benchmarking.m	/^:- impure pred incr_ref(int_reference::in) is det.$/;kq|/^\<incr_ref\>/;'q;"	kind:pred	file:
increment_dynamic_coverage_point_count	profiling_builtin.m	/^:- impure pred increment_dynamic_coverage_point_count(int::in) is det.$/;kq|/^\<increment_dynamic_coverage_point_count\>/;'q;"	kind:pred
increment_size	term_size_prof_builtin.m	/^:- impure pred increment_size(T::in, int::in) is det.$/;kq|/^\<increment_size\>/;'q;"	kind:pred
increment_static_coverage_point_count	profiling_builtin.m	/^:- impure pred increment_static_coverage_point_count(proc_layout::in, int::in)$/;kq|/^\<increment_static_coverage_point_count\>/;'q;"	kind:pred
incremental_try_all	exception.m	/^:- pred incremental_try_all(pred(T), pred(exception_result(T), A, A), A, A).$/;kq|/^\<incremental_try_all\>/;'q;"	kind:pred
indent	pretty_printer.m	/^    ;       indent(string)$/;kq|-;/\<indent\>/;'q;"	kind:cons	file:
indent	pretty_printer.m	/^:- func indent(docs) = doc.$/;kq|/^\<indent\>/;'q;"	kind:func
indent	pretty_printer.m	/^:- func indent(string, docs) = doc.$/;kq|/^\<indent\>/;'q;"	kind:func
indent	term_to_xml.m	/^:- pred indent(Stream::in, int::in, State::di, State::uo) is det$/;kq|/^\<indent\>/;'q;"	kind:pred	file:
indents	pretty_printer.m	/^:- type indents == list(string).$/;kq|-;/\<indents\>/;'q;"	kind:type	file:
index	string.m	/^:- pred string.index(string::in, int::in, char::uo) is semidet.$/;kq|/^\<string.index\>/;'q;"	kind:pred
index0	list.m	/^:- pred list.index0(list(T)::in, int::in, T::out) is semidet.$/;kq|/^\<list.index0\>/;'q;"	kind:pred
index0_of_first_occurrence	list.m	/^:- pred list.index0_of_first_occurrence(list(T)::in, T::in, int::out)$/;kq|/^\<list.index0_of_first_occurrence\>/;'q;"	kind:pred
index0_of_first_occurrence_2	list.m	/^:- pred list.index0_of_first_occurrence_2(list(T)::in, T::in,$/;kq|/^\<list.index0_of_first_occurrence_2\>/;'q;"	kind:pred	file:
index1	list.m	/^:- pred list.index1(list(T)::in, int::in, T::out) is semidet.$/;kq|/^\<list.index1\>/;'q;"	kind:pred
index1_of_first_occurrence	list.m	/^:- pred list.index1_of_first_occurrence(list(T)::in, T::in, int::out)$/;kq|/^\<list.index1_of_first_occurrence\>/;'q;"	kind:pred
index_check	string.m	/^:- pred string.index_check(int::in, int::in) is semidet.$/;kq|/^\<string.index_check\>/;'q;"	kind:pred	file:
index_next	string.m	/^:- pred string.index_next(string::in, int::in, int::out, char::uo) is semidet.$/;kq|/^\<string.index_next\>/;'q;"	kind:pred
index_out_of_bounds	array.m	/^:- type array.index_out_of_bounds$/;kq|-;/\<index_out_of_bounds\>/;'q;"	kind:type
index_out_of_bounds	version_array.m	/^:- type version_array.index_out_of_bounds$/;kq|-;/\<index_out_of_bounds\>/;'q;"	kind:type
index_to_enum	tree_bitset.m	/^:- func index_to_enum(int) = T <= enum(T).$/;kq|/^\<index_to_enum\>/;'q;"	kind:func	file:
infix	ops.m	/^    --->    infix(ops.assoc, ops.assoc)             % term Op term$/;kq|-;/\<infix\>/;'q;"	kind:cons
init	array.m	/^:- func array.init(int, T) = array(T).$/;kq|/^\<array.init\>/;'q;"	kind:func
init	array.m	/^:- pred array.init(int, T, array(T)).$/;kq|/^\<array.init\>/;'q;"	kind:pred
init	array2d.m	/^:- func init(int, int, T) = array2d(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	bag.m	/^:- func bag.init = bag(T).$/;kq|/^\<bag.init\>/;'q;"	kind:func
init	bag.m	/^:- pred bag.init(bag(T)::out) is det.$/;kq|/^\<bag.init\>/;'q;"	kind:pred
init	bimap.m	/^:- func bimap.init = bimap(K, V).$/;kq|/^\<bimap.init\>/;'q;"	kind:func
init	bimap.m	/^:- pred bimap.init(bimap(K, V)::out) is det.$/;kq|/^\<bimap.init\>/;'q;"	kind:pred
init	bitmap.m	/^:- func init(num_bits::in) = (bitmap::bitmap_uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
init	bitmap.m	/^:- func init(num_bits::in, bool::in) = (bitmap::bitmap_uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
init	bt_array.m	/^:- func bt_array.init(int, int, T) = bt_array(T).$/;kq|/^\<bt_array.init\>/;'q;"	kind:func
init	bt_array.m	/^:- pred bt_array.init(int::in, int::in, T::in, bt_array(T)::out) is det.$/;kq|/^\<bt_array.init\>/;'q;"	kind:pred
init	cord.m	/^:- func init = cord(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	counter.m	/^:- func counter.init(int) = counter.$/;kq|/^\<counter.init\>/;'q;"	kind:func
init	counter.m	/^:- pred counter.init(int::in, counter::out) is det.$/;kq|/^\<counter.init\>/;'q;"	kind:pred
init	digraph.m	/^:- func digraph.init = digraph(T).$/;kq|/^\<digraph.init\>/;'q;"	kind:func
init	digraph.m	/^:- pred digraph.init(digraph(T)::out) is det.$/;kq|/^\<digraph.init\>/;'q;"	kind:pred
init	eqvclass.m	/^:- func eqvclass.init = eqvclass(T).$/;kq|/^\<eqvclass.init\>/;'q;"	kind:func
init	eqvclass.m	/^:- pred eqvclass.init(eqvclass(T)::out) is det.$/;kq|/^\<eqvclass.init\>/;'q;"	kind:pred
init	fat_sparse_bitset.m	/^:- func init = fat_sparse_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	fat_sparse_bitset.m	/^:- pred init(fat_sparse_bitset(T)::out) is det.$/;kq|/^\<init\>/;'q;"	kind:pred
init	hash_table.m	/^:- func init(hash_pred(K), int, float) = hash_table(K, V).$/;kq|/^\<init\>/;'q;"	kind:func
init	injection.m	/^:- func injection.init = injection(K, V).$/;kq|/^\<injection.init\>/;'q;"	kind:func
init	injection.m	/^:- pred injection.init(injection(K, V)::out) is det.$/;kq|/^\<injection.init\>/;'q;"	kind:pred
init	map.m	/^:- func map.init = (map(K, V)::uo) is det.$/;kq|/^\<map.init\>/;'q;"	kind:func
init	map.m	/^:- pred map.init(map(_, _)::uo) is det.$/;kq|/^\<map.init\>/;'q;"	kind:pred
init	multi_map.m	/^:- func multi_map.init = multi_map(_, _).$/;kq|/^\<multi_map.init\>/;'q;"	kind:func
init	multi_map.m	/^:- pred multi_map.init(multi_map(_, _)::uo) is det.$/;kq|/^\<multi_map.init\>/;'q;"	kind:pred
init	pqueue.m	/^:- func pqueue.init = pqueue(K, V).$/;kq|/^\<pqueue.init\>/;'q;"	kind:func
init	pqueue.m	/^:- pred pqueue.init(pqueue(K, V)::out) is det.$/;kq|/^\<pqueue.init\>/;'q;"	kind:pred
init	queue.m	/^:- func queue.init = queue(T).$/;kq|/^\<queue.init\>/;'q;"	kind:func
init	queue.m	/^:- pred queue.init(queue(T)::out) is det.$/;kq|/^\<queue.init\>/;'q;"	kind:pred
init	random.m	/^:- pred random.init(int::in, random.supply::uo) is det.$/;kq|/^\<random.init\>/;'q;"	kind:pred
init	rbtree.m	/^:- func rbtree.init = rbtree(K, V).$/;kq|/^\<rbtree.init\>/;'q;"	kind:func
init	rbtree.m	/^:- pred rbtree.init(rbtree(K, V)::uo) is det.$/;kq|/^\<rbtree.init\>/;'q;"	kind:pred
init	rtree.m	/^:- func rtree.init = (rtree(K, V)::uo) is det <= region(K).$/;kq|/^\<rtree.init\>/;'q;"	kind:func
init	set.m	/^:- func set.init = set(T).$/;kq|/^\<set.init\>/;'q;"	kind:func
init	set.m	/^:- pred set.init(set(T)::uo) is det.$/;kq|/^\<set.init\>/;'q;"	kind:pred
init	set_bbbtree.m	/^:- func set_bbbtree.init = set_bbbtree(T).$/;kq|/^\<set_bbbtree.init\>/;'q;"	kind:func
init	set_bbbtree.m	/^:- pred set_bbbtree.init(set_bbbtree(T)::uo) is det.$/;kq|/^\<set_bbbtree.init\>/;'q;"	kind:pred
init	set_ctree234.m	/^:- func set_ctree234.init = set_ctree234(T).$/;kq|/^\<set_ctree234.init\>/;'q;"	kind:func
init	set_ordlist.m	/^:- func set_ordlist.init = set_ordlist(T).$/;kq|/^\<set_ordlist.init\>/;'q;"	kind:func
init	set_ordlist.m	/^:- pred set_ordlist.init(set_ordlist(_T)::uo) is det.$/;kq|/^\<set_ordlist.init\>/;'q;"	kind:pred
init	set_tree234.m	/^:- func set_tree234.init = set_tree234(T).$/;kq|/^\<set_tree234.init\>/;'q;"	kind:func
init	set_unordlist.m	/^:- func set_unordlist.init = set_unordlist(T).$/;kq|/^\<set_unordlist.init\>/;'q;"	kind:func
init	set_unordlist.m	/^:- pred set_unordlist.init(set_unordlist(_T)::uo) is det.$/;kq|/^\<set_unordlist.init\>/;'q;"	kind:pred
init	sparse_bitset.m	/^:- func init = sparse_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	sparse_bitset.m	/^:- pred init(sparse_bitset(T)::out) is det.$/;kq|/^\<init\>/;'q;"	kind:pred
init	stack.m	/^:- func stack.init = stack(T).$/;kq|/^\<stack.init\>/;'q;"	kind:func
init	stack.m	/^:- pred stack.init(stack(T)::out) is det.$/;kq|/^\<stack.init\>/;'q;"	kind:pred
init	store.m	/^:- some [S] pred store.init(store(S)::uo) is det.$/;kq|/^\<store.init\>/;'q;"	kind:pred
init	string.builder.m	/^:- func init = (string.builder.state::uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
init	test_bitset.m	/^:- func init = test_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	test_bitset.m	/^:- pred init(test_bitset(T)::out) is det.$/;kq|/^\<init\>/;'q;"	kind:pred
init	thread.channel.m	/^:- pred channel.init(channel(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.init\>/;'q;"	kind:pred
init	thread.mvar.m	/^:- impure func mvar.init = (mvar(T)::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:func
init	thread.mvar.m	/^:- pred mvar.init(mvar(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:pred
init	thread.semaphore.m	/^:- impure func semaphore.init(int::in) = (semaphore::uo) is det.$/;kq|/^\<semaphore.init\>/;'q;"	kind:func
init	thread.semaphore.m	/^:- pred semaphore.init(semaphore::out, io::di, io::uo) is det.$/;kq|/^\<semaphore.init\>/;'q;"	kind:pred
init	tree234.m	/^:- func tree234.init = tree234(K, V).$/;kq|/^\<tree234.init\>/;'q;"	kind:func
init	tree234.m	/^:- pred tree234.init(tree234(K, V)::uo) is det.$/;kq|/^\<tree234.init\>/;'q;"	kind:pred
init	tree_bitset.m	/^:- func init = tree_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	varset.m	/^:- func varset.init = varset(T).$/;kq|/^\<varset.init\>/;'q;"	kind:func
init	varset.m	/^:- pred varset.init(varset(T)::out) is det.$/;kq|/^\<varset.init\>/;'q;"	kind:pred
init	version_array.m	/^:- func init(int, T) = version_array(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	version_array2d.m	/^:- func init(int, int, T) = version_array2d(T).$/;kq|/^\<init\>/;'q;"	kind:func
init	version_bitmap.m	/^:- func init(int, bool) = version_bitmap.$/;kq|/^\<init\>/;'q;"	kind:func
init	version_hash_table.m	/^:- func init(hash_pred(K)::in(hash_pred), int::in, float::in) =$/;kq|/^\<init\>/;'q;"	kind:func
init	version_store.m	/^:- some [S] func init = version_store(S).$/;kq|/^\<init\>/;'q;"	kind:func
init_2	array.m	/^:- pred array.init_2(int::in, T::in, array(T)::array_uo) is det.$/;kq|/^\<array.init_2\>/;'q;"	kind:pred	file:
init_2	version_hash_table.m	/^:- func init_2(hash_pred(K)::in(hash_pred), int::in, float::in, bool::in) =$/;kq|/^\<init_2\>/;'q;"	kind:func	file:
init_date	calendar.m	/^:- pred init_date(year::in, month::in, day_of_month::in, hour::in,$/;kq|/^\<init_date\>/;'q;"	kind:pred
init_default	hash_table.m	/^:- func init_default(hash_pred(K)) = hash_table(K, V).$/;kq|/^\<init_default\>/;'q;"	kind:func
init_default	version_hash_table.m	/^:- func init_default(hash_pred(K)::in(hash_pred)) =$/;kq|/^\<init_default\>/;'q;"	kind:func
init_duration	calendar.m	/^:- func init_duration(years, months, days, hours, minutes, seconds,$/;kq|/^\<init_duration\>/;'q;"	kind:func
init_mercury_op_table	ops.m	/^:- func ops.init_mercury_op_table = (ops.mercury_op_table::uo) is det.$/;kq|/^\<ops.init_mercury_op_table\>/;'q;"	kind:func
init_offset	tree_bitset.m	/^                init_offset     :: int,$/;kq|-;/\<init_offset\>/;'q;"	kind:fld	file:
init_option_table	getopt.m	/^:- pred init_option_table($/;kq|/^\<init_option_table\>/;'q;"	kind:pred
init_option_table	getopt_io.m	/^:- pred init_option_table($/;kq|/^\<init_option_table\>/;'q;"	kind:pred
init_option_table_multi	getopt.m	/^:- pred init_option_table_multi($/;kq|/^\<init_option_table_multi\>/;'q;"	kind:pred
init_option_table_multi	getopt_io.m	/^:- pred init_option_table_multi($/;kq|/^\<init_option_table_multi\>/;'q;"	kind:pred
init_parser_state	parser.m	/^:- pred init_parser_state(Ops::in, string::in, token_list::in,$/;kq|/^\<init_parser_state\>/;'q;"	kind:pred	file:
init_state	io.m	/^:- pred io.init_state(io::di, io::uo) is det.$/;kq|/^\<io.init_state\>/;'q;"	kind:pred
init_std_streams	io.m	/^:- pred init_std_streams(io::di, io::uo) is det.$/;kq|/^\<init_std_streams\>/;'q;"	kind:pred	file:
init_var_supply	term.m	/^:- func init_var_supply = var_supply(T).$/;kq|/^\<init_var_supply\>/;'q;"	kind:func
init_var_supply	term.m	/^:- pred init_var_supply(var_supply(T)).$/;kq|/^\<init_var_supply\>/;'q;"	kind:pred
initial_formatter_map	pretty_printer.m	/^:- func initial_formatter_map = formatter_map.$/;kq|/^\<initial_formatter_map\>/;'q;"	kind:func	file:
initialize_bitmap	bitmap.m	/^:- func initialize_bitmap(bitmap, num_bits, byte) = bitmap.$/;kq|/^\<initialize_bitmap\>/;'q;"	kind:func	file:
initialize_bitmap_bytes	bitmap.m	/^:- func initialize_bitmap_bytes(bitmap, byte_index, byte_index,$/;kq|/^\<initialize_bitmap_bytes\>/;'q;"	kind:func	file:
initializer	bitmap.m	/^:- func initializer(bool) = byte.$/;kq|/^\<initializer\>/;'q;"	kind:func	file:
initializer	version_bitmap.m	/^:- func initializer(bool) = int.$/;kq|/^\<initializer\>/;'q;"	kind:func	file:
injection	injection.m	/^    --->    injection(map(K, V), map(V, K)).$/;kq|-;/\<injection\>/;'q;"	kind:cons	file:
injection	injection.m	/^:- type injection(K, V)$/;kq|-;/\<injection\>/;'q;"	kind:type	file:
injection.contains_key	injection.m	/^:- pred injection.contains_key(injection(K, V)::in, K::in) is semidet.$/;kq|/^\<injection.contains_key\>/;'q;"	kind:pred
injection.contains_value	injection.m	/^:- pred injection.contains_value(injection(K, V)::in, V::in) is semidet.$/;kq|/^\<injection.contains_value\>/;'q;"	kind:pred
injection.delete_key	injection.m	/^:- func injection.delete_key(injection(K, V), K) = injection(K, V).$/;kq|/^\<injection.delete_key\>/;'q;"	kind:func
injection.delete_key	injection.m	/^:- pred injection.delete_key(K::in, injection(K, V)::in, injection(K, V)::out)$/;kq|/^\<injection.delete_key\>/;'q;"	kind:pred
injection.delete_keys	injection.m	/^:- func injection.delete_keys(injection(K, V), list(K)) = injection(K, V).$/;kq|/^\<injection.delete_keys\>/;'q;"	kind:func
injection.delete_keys	injection.m	/^:- pred injection.delete_keys(list(K)::in, injection(K, V)::in,$/;kq|/^\<injection.delete_keys\>/;'q;"	kind:pred
injection.delete_value	injection.m	/^:- func injection.delete_value(injection(K, V), V) = injection(K, V).$/;kq|/^\<injection.delete_value\>/;'q;"	kind:func
injection.delete_value	injection.m	/^:- pred injection.delete_value(V::in, injection(K, V)::in,$/;kq|/^\<injection.delete_value\>/;'q;"	kind:pred
injection.delete_values	injection.m	/^:- func injection.delete_values(injection(K, V), list(V)) = injection(K, V).$/;kq|/^\<injection.delete_values\>/;'q;"	kind:func
injection.delete_values	injection.m	/^:- pred injection.delete_values(list(V)::in, injection(K, V)::in,$/;kq|/^\<injection.delete_values\>/;'q;"	kind:pred
injection.det_insert	injection.m	/^:- func injection.det_insert(injection(K, V), K, V) = injection(K, V).$/;kq|/^\<injection.det_insert\>/;'q;"	kind:func
injection.det_insert	injection.m	/^:- pred injection.det_insert(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.det_insert\>/;'q;"	kind:pred
injection.det_set	injection.m	/^:- func injection.det_set(injection(K, V), K, V) = injection(K, V).$/;kq|/^\<injection.det_set\>/;'q;"	kind:func
injection.det_set	injection.m	/^:- pred injection.det_set(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.det_set\>/;'q;"	kind:pred
injection.det_set_2	injection.m	/^:- pred injection.det_set_2(K::in, V::in, map(K, V)::in, map(K, V)::out,$/;kq|/^\<injection.det_set_2\>/;'q;"	kind:pred	file:
injection.det_update	injection.m	/^:- func injection.det_update(injection(K, V), K, V) = injection(K, V).$/;kq|/^\<injection.det_update\>/;'q;"	kind:func
injection.det_update	injection.m	/^:- pred injection.det_update(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.det_update\>/;'q;"	kind:pred
injection.filter_map_keys	injection.m	/^:- pred injection.filter_map_keys($/;kq|/^\<injection.filter_map_keys\>/;'q;"	kind:pred
injection.forward_map	injection.m	/^:- func injection.forward_map(injection(K, V)) = map(K, V).$/;kq|/^\<injection.forward_map\>/;'q;"	kind:func
injection.forward_map	injection.m	/^:- pred injection.forward_map(injection(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<injection.forward_map\>/;'q;"	kind:pred
injection.forward_search	injection.m	/^:- func injection.forward_search(injection(K, V), K) = V is semidet.$/;kq|/^\<injection.forward_search\>/;'q;"	kind:func
injection.forward_search	injection.m	/^:- pred injection.forward_search(injection(K, V)::in, K::in, V::out)$/;kq|/^\<injection.forward_search\>/;'q;"	kind:pred
injection.init	injection.m	/^:- func injection.init = injection(K, V).$/;kq|/^\<injection.init\>/;'q;"	kind:func
injection.init	injection.m	/^:- pred injection.init(injection(K, V)::out) is det.$/;kq|/^\<injection.init\>/;'q;"	kind:pred
injection.insert	injection.m	/^:- func injection.insert(injection(K, V), K, V) = injection(K, V) is semidet.$/;kq|/^\<injection.insert\>/;'q;"	kind:func
injection.insert	injection.m	/^:- pred injection.insert(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.insert\>/;'q;"	kind:pred
injection.is_empty	injection.m	/^:- pred injection.is_empty(injection(K, V)::in) is semidet.$/;kq|/^\<injection.is_empty\>/;'q;"	kind:pred
injection.keys	injection.m	/^:- func injection.keys(injection(K, V)) = list(K).$/;kq|/^\<injection.keys\>/;'q;"	kind:func
injection.keys	injection.m	/^:- pred injection.keys(injection(K, V)::in, list(K)::out) is det.$/;kq|/^\<injection.keys\>/;'q;"	kind:pred
injection.lookup	injection.m	/^:- func injection.lookup(injection(K, V), K) = V.$/;kq|/^\<injection.lookup\>/;'q;"	kind:func
injection.lookup	injection.m	/^:- pred injection.lookup(injection(K, V)::in, K::in, V::out) is det.$/;kq|/^\<injection.lookup\>/;'q;"	kind:pred
injection.map_keys	injection.m	/^:- func injection.map_keys(func(V, K) = L, injection(K, V)) = injection(L, V).$/;kq|/^\<injection.map_keys\>/;'q;"	kind:func
injection.map_keys	injection.m	/^:- pred injection.map_keys(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<injection.map_keys\>/;'q;"	kind:pred
injection.map_values	injection.m	/^:- func injection.map_values(func(K, V) = W, injection(K, V)) =$/;kq|/^\<injection.map_values\>/;'q;"	kind:func
injection.map_values	injection.m	/^:- pred injection.map_values(pred(K, V, W)::in(pred(in, in, out) is det),$/;kq|/^\<injection.map_values\>/;'q;"	kind:pred
injection.maybe_transform_key	injection.m	/^:- pred maybe_transform_key(pred(V, K, L)::in(pred(in, in, out) is semidet),$/;kq|/^\<maybe_transform_key\>/;'q;"	kind:pred	file:
injection.merge	injection.m	/^:- func injection.merge(injection(K, V), injection(K, V)) = injection(K, V).$/;kq|/^\<injection.merge\>/;'q;"	kind:func
injection.merge	injection.m	/^:- pred injection.merge(injection(K, V)::in, injection(K, V)::in,$/;kq|/^\<injection.merge\>/;'q;"	kind:pred
injection.overlay	injection.m	/^:- func injection.overlay(injection(K, V), injection(K, V)) = injection(K, V).$/;kq|/^\<injection.overlay\>/;'q;"	kind:func
injection.overlay	injection.m	/^:- pred injection.overlay(injection(K, V)::in, injection(K, V)::in,$/;kq|/^\<injection.overlay\>/;'q;"	kind:pred
injection.reverse_lookup	injection.m	/^:- func injection.reverse_lookup(injection(K, V), V) = K.$/;kq|/^\<injection.reverse_lookup\>/;'q;"	kind:func
injection.reverse_lookup	injection.m	/^:- pred injection.reverse_lookup(injection(K, V)::in, K::out, V::in) is det.$/;kq|/^\<injection.reverse_lookup\>/;'q;"	kind:pred
injection.reverse_map	injection.m	/^:- func injection.reverse_map(injection(K, V)) = map(V, K).$/;kq|/^\<injection.reverse_map\>/;'q;"	kind:func
injection.reverse_map	injection.m	/^:- pred injection.reverse_map(injection(K, V)::in, map(V, K)::out) is det.$/;kq|/^\<injection.reverse_map\>/;'q;"	kind:pred
injection.reverse_search	injection.m	/^:- func injection.reverse_search(injection(K, V), V) = K is semidet.$/;kq|/^\<injection.reverse_search\>/;'q;"	kind:func
injection.reverse_search	injection.m	/^:- pred injection.reverse_search(injection(K, V)::in, K::out, V::in)$/;kq|/^\<injection.reverse_search\>/;'q;"	kind:pred
injection.search	injection.m	/^:- pred injection.search(injection(K, V), K, V).$/;kq|/^\<injection.search\>/;'q;"	kind:pred
injection.set	injection.m	/^:- func injection.set(injection(K, V), K, V) = injection(K, V) is semidet.$/;kq|/^\<injection.set\>/;'q;"	kind:func
injection.set	injection.m	/^:- pred injection.set(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.set\>/;'q;"	kind:pred
injection.set_2	injection.m	/^:- pred injection.set_2(K::in, V::in, map(K, V)::in, map(K, V)::out,$/;kq|/^\<injection.set_2\>/;'q;"	kind:pred	file:
injection.set_from_assoc_list	injection.m	/^:- func injection.set_from_assoc_list(assoc_list(K, V), injection(K, V)) =$/;kq|/^\<injection.set_from_assoc_list\>/;'q;"	kind:func
injection.set_from_assoc_list	injection.m	/^:- pred injection.set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<injection.set_from_assoc_list\>/;'q;"	kind:pred
injection.singleton	injection.m	/^:- func injection.singleton(K, V) = injection(K, V).$/;kq|/^\<injection.singleton\>/;'q;"	kind:func
injection.update	injection.m	/^:- func injection.update(injection(K, V), K, V) = injection(K, V) is semidet.$/;kq|/^\<injection.update\>/;'q;"	kind:func
injection.update	injection.m	/^:- pred injection.update(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.update\>/;'q;"	kind:pred
injection.values	injection.m	/^:- func injection.values(injection(K, V)) = list(V).$/;kq|/^\<injection.values\>/;'q;"	kind:func
injection.values	injection.m	/^:- pred injection.values(injection(K, V)::in, list(V)::out) is det.$/;kq|/^\<injection.values\>/;'q;"	kind:pred
input	bit_buffer.m	/^:- instance stream.input(error_stream, error_state) where$/;kq|-;/\<input\>/;'q;"	kind:tci	file:
input	bit_buffer.read.m	/^:- instance stream.input(read_stream(Stream, Error),$/;kq|-;/\<input\>/;'q;"	kind:tci
input	builtin.m	/^:- mode input  == ground >> ground.$/;kq|-;/\<input\>/;'q;"	kind:mode
input	io.m	/^    --->    input$/;kq|-;/\<input\>/;'q;"	kind:cons
input	io.m	/^:- instance stream.input(io.binary_input_stream, io)$/;kq|-;/\<input\>/;'q;"	kind:tci	file:
input	stream.m	/^:- typeclass stream.input(Stream, State) <= stream(Stream, State) where [].$/;kq|-;/\<input\>/;'q;"	kind:tc
input_check_err	io.m	/^:- pred io.input_check_err(io.input_stream::in, io.res::out, io::di, io::uo)$/;kq|/^\<io.input_check_err\>/;'q;"	kind:pred	file:
input_clear_err	io.m	/^:- pred io.input_clear_err(io.input_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.input_clear_err\>/;'q;"	kind:pred	file:
input_length	parsing_utils.m	/^                input_length        ::  int,$/;kq|-;/\<input_length\>/;'q;"	kind:fld	file:
input_stream	io.m	/^:- pred io.input_stream(io.input_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.input_stream\>/;'q;"	kind:pred
input_stream	io.m	/^:- type io.input_stream  ---> input_stream(io.stream).$/;kq|-;/\<input_stream\>/;'q;"	kind:cons	file:
input_stream	io.m	/^:- type io.input_stream  ---> input_stream(io.stream).$/;kq|-;/\<input_stream\>/;'q;"	kind:type	file:
input_stream_2	io.m	/^:- pred io.input_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.input_stream_2\>/;'q;"	kind:pred	file:
input_stream_file_size	io.m	/^:- pred io.input_stream_file_size(io.input_stream::in, int::out,$/;kq|/^\<io.input_stream_file_size\>/;'q;"	kind:pred	file:
input_stream_fold	stream.m	/^:- pred stream.input_stream_fold(Stream, pred(Unit, T, T), T,$/;kq|/^\<stream.input_stream_fold\>/;'q;"	kind:pred
input_stream_fold2_state	stream.m	/^:- pred stream.input_stream_fold2_state(Stream,$/;kq|/^\<stream.input_stream_fold2_state\>/;'q;"	kind:pred
input_stream_fold2_state_maybe_stop	stream.m	/^:- pred stream.input_stream_fold2_state_maybe_stop(Stream,$/;kq|/^\<stream.input_stream_fold2_state_maybe_stop\>/;'q;"	kind:pred
input_stream_fold_state	stream.m	/^:- pred stream.input_stream_fold_state(Stream, pred(Unit, State, State),$/;kq|/^\<stream.input_stream_fold_state\>/;'q;"	kind:pred
input_stream_foldl	io.m	/^:- pred io.input_stream_foldl(io.input_stream, pred(char, T, T),$/;kq|/^\<io.input_stream_foldl\>/;'q;"	kind:pred
input_stream_foldl	io.m	/^:- pred io.input_stream_foldl(pred(char, T, T), T, io.maybe_partial_res(T),$/;kq|/^\<io.input_stream_foldl\>/;'q;"	kind:pred
input_stream_foldl2_io	io.m	/^:- pred io.input_stream_foldl2_io(io.input_stream,$/;kq|/^\<io.input_stream_foldl2_io\>/;'q;"	kind:pred
input_stream_foldl2_io	io.m	/^:- pred io.input_stream_foldl2_io(pred(char, T, T, io, io),$/;kq|/^\<io.input_stream_foldl2_io\>/;'q;"	kind:pred
input_stream_foldl2_io_maybe_stop	io.m	/^:- pred io.input_stream_foldl2_io_maybe_stop($/;kq|/^\<io.input_stream_foldl2_io_maybe_stop\>/;'q;"	kind:pred
input_stream_foldl2_io_maybe_stop	io.m	/^:- pred io.input_stream_foldl2_io_maybe_stop(io.input_stream,$/;kq|/^\<io.input_stream_foldl2_io_maybe_stop\>/;'q;"	kind:pred
input_stream_foldl_io	io.m	/^:- pred io.input_stream_foldl_io(io.input_stream, pred(char, io, io),$/;kq|/^\<io.input_stream_foldl_io\>/;'q;"	kind:pred
input_stream_foldl_io	io.m	/^:- pred io.input_stream_foldl_io(pred(char, io, io), io.res, io, io).$/;kq|/^\<io.input_stream_foldl_io\>/;'q;"	kind:pred
input_stream_info	io.m	/^:- func io.input_stream_info(io.stream_db, io.input_stream)$/;kq|/^\<io.input_stream_info\>/;'q;"	kind:func
input_stream_name	io.m	/^:- pred io.input_stream_name(io.input_stream::in, string::out,$/;kq|/^\<io.input_stream_name\>/;'q;"	kind:pred
input_stream_name	io.m	/^:- pred io.input_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.input_stream_name\>/;'q;"	kind:pred
input_string	parsing_utils.m	/^                input_string        ::  string,$/;kq|-;/\<input_string\>/;'q;"	kind:fld	file:
input_string	parsing_utils.m	/^:- pred input_string(src::in, string::out, int::out) is det.$/;kq|/^\<input_string\>/;'q;"	kind:pred
input_substring	parsing_utils.m	/^:- pred input_substring(src::in, int::in, int::in, string::out) is semidet.$/;kq|/^\<input_substring\>/;'q;"	kind:pred
insert	bag.m	/^:- func bag.insert(bag(T), T) = bag(T).$/;kq|/^\<bag.insert\>/;'q;"	kind:func
insert	bag.m	/^:- pred bag.insert(T::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.insert\>/;'q;"	kind:pred
insert	bimap.m	/^:- func bimap.insert(bimap(K, V), K, V) = bimap(K, V) is semidet.$/;kq|/^\<bimap.insert\>/;'q;"	kind:func
insert	bimap.m	/^:- pred bimap.insert(K::in, V::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.insert\>/;'q;"	kind:pred
insert	fat_sparse_bitset.m	/^:- func insert(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<insert\>/;'q;"	kind:func
insert	fat_sparse_bitset.m	/^:- pred insert(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
insert	injection.m	/^:- func injection.insert(injection(K, V), K, V) = injection(K, V) is semidet.$/;kq|/^\<injection.insert\>/;'q;"	kind:func
insert	injection.m	/^:- pred injection.insert(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.insert\>/;'q;"	kind:pred
insert	list.m	/^:- pred list.insert(T, list(T), list(T)).$/;kq|/^\<list.insert\>/;'q;"	kind:pred
insert	map.m	/^:- func map.insert(map(K, V), K, V) = map(K, V) is semidet.$/;kq|/^\<map.insert\>/;'q;"	kind:func
insert	map.m	/^:- pred map.insert(K::in, V::in, map(K, V)::in, map(K, V)::out) is semidet.$/;kq|/^\<map.insert\>/;'q;"	kind:pred
insert	multi_map.m	/^:- pred multi_map.insert(K::in, V::in,$/;kq|/^\<multi_map.insert\>/;'q;"	kind:pred
insert	pqueue.m	/^:- func pqueue.insert(pqueue(K, V), K, V) = pqueue(K, V).$/;kq|/^\<pqueue.insert\>/;'q;"	kind:func
insert	pqueue.m	/^:- pred pqueue.insert(K::in, V::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.insert\>/;'q;"	kind:pred
insert	rbtree.m	/^:- pred rbtree.insert(K::in, V::in, rbtree(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.insert\>/;'q;"	kind:pred
insert	rtree.m	/^:- func rtree.insert(K, V, rtree(K, V)) = rtree(K, V) <= region(K).$/;kq|/^\<rtree.insert\>/;'q;"	kind:func
insert	rtree.m	/^:- pred rtree.insert(K::in, V::in, rtree(K, V)::in, rtree(K, V)::out)$/;kq|/^\<rtree.insert\>/;'q;"	kind:pred
insert	set.m	/^:- func set.insert(set(T), T) = set(T).$/;kq|/^\<set.insert\>/;'q;"	kind:func
insert	set.m	/^:- pred set.insert(T::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.insert\>/;'q;"	kind:pred
insert	set_bbbtree.m	/^:- func set_bbbtree.insert(set_bbbtree(T), T) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.insert\>/;'q;"	kind:func
insert	set_bbbtree.m	/^:- pred set_bbbtree.insert(T, set_bbbtree(T), set_bbbtree(T)).$/;kq|/^\<set_bbbtree.insert\>/;'q;"	kind:pred
insert	set_ctree234.m	/^:- func set_ctree234.insert(T, set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.insert\>/;'q;"	kind:func
insert	set_ctree234.m	/^:- pred set_ctree234.insert(T::in, set_ctree234(T)::in, set_ctree234(T)::out)$/;kq|/^\<set_ctree234.insert\>/;'q;"	kind:pred
insert	set_ordlist.m	/^:- func set_ordlist.insert(set_ordlist(T), T) = set_ordlist(T).$/;kq|/^\<set_ordlist.insert\>/;'q;"	kind:func
insert	set_ordlist.m	/^:- pred set_ordlist.insert(T::in, set_ordlist(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.insert\>/;'q;"	kind:pred
insert	set_tree234.m	/^:- func set_tree234.insert(T, set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.insert\>/;'q;"	kind:func
insert	set_tree234.m	/^:- pred set_tree234.insert(T::in, set_tree234(T)::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.insert\>/;'q;"	kind:pred
insert	set_unordlist.m	/^:- func set_unordlist.insert(set_unordlist(T), T) = set_unordlist(T).$/;kq|/^\<set_unordlist.insert\>/;'q;"	kind:func
insert	set_unordlist.m	/^:- pred set_unordlist.insert(T, set_unordlist(T), set_unordlist(T)).$/;kq|/^\<set_unordlist.insert\>/;'q;"	kind:pred
insert	sparse_bitset.m	/^:- func insert(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<insert\>/;'q;"	kind:func
insert	sparse_bitset.m	/^:- pred insert(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
insert	test_bitset.m	/^:- pred insert(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
insert	tree234.m	/^:- pred tree234.insert(K::in, V::in, tree234(K, V)::in, tree234(K, V)::out)$/;kq|/^\<tree234.insert\>/;'q;"	kind:pred
insert	tree_bitset.m	/^:- func insert(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<insert\>/;'q;"	kind:func
insert	tree_bitset.m	/^:- pred insert(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
insert2	set_ctree234.m	/^:- pred set_ctree234.insert2(T::in, int::out,$/;kq|/^\<set_ctree234.insert2\>/;'q;"	kind:pred	file:
insert2	set_tree234.m	/^:- pred set_tree234.insert2(T::in,$/;kq|/^\<set_tree234.insert2\>/;'q;"	kind:pred	file:
insert2	tree234.m	/^:- pred tree234.insert2(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.insert2\>/;'q;"	kind:pred	file:
insert3	set_ctree234.m	/^:- pred set_ctree234.insert3(T::in, int::out,$/;kq|/^\<set_ctree234.insert3\>/;'q;"	kind:pred	file:
insert3	set_tree234.m	/^:- pred set_tree234.insert3(T::in,$/;kq|/^\<set_tree234.insert3\>/;'q;"	kind:pred	file:
insert3	tree234.m	/^:- pred tree234.insert3(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.insert3\>/;'q;"	kind:pred	file:
insert_2	fat_sparse_bitset.m	/^:- pred insert_2(fat_bitset_impl::in, int::in, fat_bitset_impl::out) is det.$/;kq|/^\<insert_2\>/;'q;"	kind:pred	file:
insert_2	pqueue.m	/^:- pred pqueue.insert_2(K::in, V::in, pqueue(K, V)::in, pqueue(K, V)::in,$/;kq|/^\<pqueue.insert_2\>/;'q;"	kind:pred	file:
insert_2	rbtree.m	/^:- pred rbtree.insert_2(rbtree(K, V)::in, K::in, V::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.insert_2\>/;'q;"	kind:pred	file:
insert_2	rtree.m	/^:- pred insert_2(rtree_2(K, V)::in, K::in, V::in, rtree_2(K, V)::out)$/;kq|/^\<insert_2\>/;'q;"	kind:pred	file:
insert_2	set_ordlist.m	/^:- pred set_ordlist.insert_2(list(T)::in, T::in, list(T)::out)$/;kq|/^\<set_ordlist.insert_2\>/;'q;"	kind:pred	file:
insert_2	sparse_bitset.m	/^:- pred insert_2(bitset_impl::in, int::in, bitset_impl::out) is det.$/;kq|/^\<insert_2\>/;'q;"	kind:pred	file:
insert_and_split_child2	rtree.m	/^:- pred insert_and_split_child2(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<insert_and_split_child2\>/;'q;"	kind:pred	file:
insert_and_split_child3	rtree.m	/^:- pred insert_and_split_child3(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<insert_and_split_child3\>/;'q;"	kind:pred	file:
insert_bitset_elem	sparse_bitset.m	/^:- func insert_bitset_elem(bitset_elem, bitset_impl) = bitset_impl.$/;kq|/^\<insert_bitset_elem\>/;'q;"	kind:func	file:
insert_duplicate	rbtree.m	/^:- func rbtree.insert_duplicate(rbtree(K, V), K, V) = rbtree(K, V).$/;kq|/^\<rbtree.insert_duplicate\>/;'q;"	kind:func
insert_duplicate	rbtree.m	/^:- pred rbtree.insert_duplicate(K::in, V::in,$/;kq|/^\<rbtree.insert_duplicate\>/;'q;"	kind:pred
insert_duplicate_2	rbtree.m	/^:- pred rbtree.insert_duplicate_2(rbtree(K, V), K, V, rbtree(K, V)).$/;kq|/^\<rbtree.insert_duplicate_2\>/;'q;"	kind:pred	file:
insert_from_assoc_list	bimap.m	/^:- func bimap.insert_from_assoc_list(assoc_list(K, V), bimap(K, V)) =$/;kq|/^\<bimap.insert_from_assoc_list\>/;'q;"	kind:func
insert_from_assoc_list	bimap.m	/^:- pred bimap.insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<bimap.insert_from_assoc_list\>/;'q;"	kind:pred
insert_from_assoc_list	injection.m	/^:- func injection.insert_from_assoc_list(assoc_list(K, V), injection(K, V)) =$/;kq|/^\<injection.insert_from_assoc_list\>/;'q;"	kind:func
insert_from_assoc_list	injection.m	/^:- pred injection.insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<injection.insert_from_assoc_list\>/;'q;"	kind:pred
insert_from_corresponding_lists	injection.m	/^:- func injection.insert_from_corresponding_lists(list(K), list(V),$/;kq|/^\<injection.insert_from_corresponding_lists\>/;'q;"	kind:func
insert_from_corresponding_lists	injection.m	/^:- pred injection.insert_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<injection.insert_from_corresponding_lists\>/;'q;"	kind:pred
insert_items	bt_array.m	/^:- pred insert_items(bt_array(T)::in, int::in, list(T)::in, bt_array(T)::out)$/;kq|/^\<insert_items\>/;'q;"	kind:pred	file:
insert_list	bag.m	/^:- func bag.insert_list(bag(T), list(T)) = bag(T).$/;kq|/^\<bag.insert_list\>/;'q;"	kind:func
insert_list	bag.m	/^:- pred bag.insert_list(list(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.insert_list\>/;'q;"	kind:pred
insert_list	fat_sparse_bitset.m	/^:- func insert_list(fat_sparse_bitset(T), list(T)) = fat_sparse_bitset(T)$/;kq|/^\<insert_list\>/;'q;"	kind:func
insert_list	fat_sparse_bitset.m	/^:- pred insert_list(list(T)::in,$/;kq|/^\<insert_list\>/;'q;"	kind:pred
insert_list	set.m	/^:- func set.insert_list(set(T), list(T)) = set(T).$/;kq|/^\<set.insert_list\>/;'q;"	kind:func
insert_list	set.m	/^:- pred set.insert_list(list(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.insert_list\>/;'q;"	kind:pred
insert_list	set_bbbtree.m	/^:- func set_bbbtree.insert_list(set_bbbtree(T), list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.insert_list\>/;'q;"	kind:func
insert_list	set_bbbtree.m	/^:- pred set_bbbtree.insert_list(list(T)::in,$/;kq|/^\<set_bbbtree.insert_list\>/;'q;"	kind:pred
insert_list	set_ctree234.m	/^:- func set_ctree234.insert_list(list(T), set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.insert_list\>/;'q;"	kind:func
insert_list	set_ctree234.m	/^:- pred set_ctree234.insert_list(list(T)::in,$/;kq|/^\<set_ctree234.insert_list\>/;'q;"	kind:pred
insert_list	set_ordlist.m	/^:- func set_ordlist.insert_list(set_ordlist(T), list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.insert_list\>/;'q;"	kind:func
insert_list	set_ordlist.m	/^:- pred set_ordlist.insert_list(list(T)::in,$/;kq|/^\<set_ordlist.insert_list\>/;'q;"	kind:pred
insert_list	set_tree234.m	/^:- func set_tree234.insert_list(list(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.insert_list\>/;'q;"	kind:func
insert_list	set_tree234.m	/^:- pred set_tree234.insert_list(list(T)::in,$/;kq|/^\<set_tree234.insert_list\>/;'q;"	kind:pred
insert_list	set_unordlist.m	/^:- func set_unordlist.insert_list(set_unordlist(T), list(T))$/;kq|/^\<set_unordlist.insert_list\>/;'q;"	kind:func
insert_list	set_unordlist.m	/^:- pred set_unordlist.insert_list(list(T)::in,$/;kq|/^\<set_unordlist.insert_list\>/;'q;"	kind:pred
insert_list	sparse_bitset.m	/^:- func insert_list(sparse_bitset(T), list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<insert_list\>/;'q;"	kind:func
insert_list	sparse_bitset.m	/^:- pred insert_list(list(T)::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<insert_list\>/;'q;"	kind:pred
insert_list	test_bitset.m	/^:- pred insert_list(list(T)::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<insert_list\>/;'q;"	kind:pred
insert_list	tree_bitset.m	/^:- func insert_list(tree_bitset(T), list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<insert_list\>/;'q;"	kind:func
insert_list	tree_bitset.m	/^:- pred insert_list(list(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<insert_list\>/;'q;"	kind:pred
insert_list_r	set_bbbtree.m	/^:- pred set_bbbtree.insert_list_r(set_bbbtree(T)::in, list(T)::in,$/;kq|/^\<set_bbbtree.insert_list_r\>/;'q;"	kind:pred	file:
insert_new	fat_sparse_bitset.m	/^:- pred insert_new(T::in,$/;kq|/^\<insert_new\>/;'q;"	kind:pred
insert_new	set.m	/^:- pred set.insert_new(T::in, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.insert_new\>/;'q;"	kind:pred
insert_new	set_bbbtree.m	/^:- pred set_bbbtree.insert_new(T::in,$/;kq|/^\<set_bbbtree.insert_new\>/;'q;"	kind:pred
insert_new	set_ctree234.m	/^:- pred set_ctree234.insert_new(T::in,$/;kq|/^\<set_ctree234.insert_new\>/;'q;"	kind:pred
insert_new	set_ordlist.m	/^:- pred set_ordlist.insert_new(T::in,$/;kq|/^\<set_ordlist.insert_new\>/;'q;"	kind:pred
insert_new	set_tree234.m	/^:- pred set_tree234.insert_new(T::in,$/;kq|/^\<set_tree234.insert_new\>/;'q;"	kind:pred
insert_new	set_unordlist.m	/^:- pred set_unordlist.insert_new(T::in,$/;kq|/^\<set_unordlist.insert_new\>/;'q;"	kind:pred
insert_new	sparse_bitset.m	/^:- pred insert_new(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<insert_new\>/;'q;"	kind:pred
insert_new	test_bitset.m	/^:- pred insert_new(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<insert_new\>/;'q;"	kind:pred
insert_new	tree_bitset.m	/^:- pred insert_new(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<insert_new\>/;'q;"	kind:pred
insert_new2	set_ctree234.m	/^:- pred set_ctree234.insert_new2(T::in,$/;kq|/^\<set_ctree234.insert_new2\>/;'q;"	kind:pred	file:
insert_new2	set_tree234.m	/^:- pred set_tree234.insert_new2(T::in,$/;kq|/^\<set_tree234.insert_new2\>/;'q;"	kind:pred	file:
insert_new3	set_ctree234.m	/^:- pred set_ctree234.insert_new3(T::in,$/;kq|/^\<set_ctree234.insert_new3\>/;'q;"	kind:pred	file:
insert_new3	set_tree234.m	/^:- pred set_tree234.insert_new3(T::in,$/;kq|/^\<set_tree234.insert_new3\>/;'q;"	kind:pred	file:
insert_new_2	fat_sparse_bitset.m	/^:- pred insert_new_2(fat_bitset_impl::in, int::in, fat_bitset_impl::out)$/;kq|/^\<insert_new_2\>/;'q;"	kind:pred	file:
insert_new_2	set_ordlist.m	/^:- pred set_ordlist.insert_new_2(list(T)::in, T::in, list(T)::out)$/;kq|/^\<set_ordlist.insert_new_2\>/;'q;"	kind:pred	file:
insert_new_2	sparse_bitset.m	/^:- pred insert_new_2(int::in, bitset_impl::in, bitset_impl::out)$/;kq|/^\<insert_new_2\>/;'q;"	kind:pred	file:
insert_new_r	set_bbbtree.m	/^:- pred set_bbbtree.insert_new_r($/;kq|/^\<set_bbbtree.insert_new_r\>/;'q;"	kind:pred	file:
insert_node	fat_sparse_bitset.m	/^:- func insert_node(int, int, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<insert_node\>/;'q;"	kind:func	file:
insert_r	set_bbbtree.m	/^:- pred set_bbbtree.insert_r(set_bbbtree(T)::in, T::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.insert_r\>/;'q;"	kind:pred	file:
insert_set	bag.m	/^:- func bag.insert_set(bag(T), set(T)) = bag(T).$/;kq|/^\<bag.insert_set\>/;'q;"	kind:func
insert_set	bag.m	/^:- pred bag.insert_set(set(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.insert_set\>/;'q;"	kind:pred
insert_std_stream_names	io.m	/^:- pred io.insert_std_stream_names(io::di, io::uo) is det.$/;kq|/^\<io.insert_std_stream_names\>/;'q;"	kind:pred	file:
insert_stream_info	io.m	/^:- pred io.insert_stream_info(io.stream::in, stream_info::in,$/;kq|/^\<io.insert_stream_info\>/;'q;"	kind:pred	file:
insert_transformed_key_f	injection.m	/^:- func insert_transformed_key_f(func(V, K) = L, K, V, map(L, V)) = map(L, V).$/;kq|/^\<insert_transformed_key_f\>/;'q;"	kind:func	file:
insert_transformed_key_p	injection.m	/^:- pred insert_transformed_key_p(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<insert_transformed_key_p\>/;'q;"	kind:pred	file:
insert_transformed_value_f	injection.m	/^:- func insert_transformed_value_f(func(K, V) = W, V, K, map(W, K)) =$/;kq|/^\<insert_transformed_value_f\>/;'q;"	kind:func	file:
insert_tree	rtree.m	/^:- func insert_tree(rtree_2(K, V), K, rtree_2(K, V), int, int) =$/;kq|/^\<insert_tree\>/;'q;"	kind:func	file:
insert_tree_and_split_child2	rtree.m	/^:- pred insert_tree_and_split_child2(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<insert_tree_and_split_child2\>/;'q;"	kind:pred	file:
insert_tree_and_split_child3	rtree.m	/^:- pred insert_tree_and_split_child3(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<insert_tree_and_split_child3\>/;'q;"	kind:pred	file:
inst_preserving_append	list.m	/^:- func inst_preserving_append(list(T)::in(list_skel(I =< ground)),$/;kq|/^\<inst_preserving_append\>/;'q;"	kind:func
instance_constraint_from_typeclass_info	private_builtin.m	/^:- pred instance_constraint_from_typeclass_info(typeclass_info::in,$/;kq|/^\<instance_constraint_from_typeclass_info\>/;'q;"	kind:pred
int	getopt.m	/^    ;       int(int)$/;kq|-;/\<int\>/;'q;"	kind:cons
int	getopt.m	/^    ;       int(int)$/;kq|-;/\<int\>/;'q;"	kind:cons
int	getopt_io.m	/^    ;       int(int)$/;kq|-;/\<int\>/;'q;"	kind:cons
int	getopt_io.m	/^    ;       int(int)$/;kq|-;/\<int\>/;'q;"	kind:cons
int	int.m	/^:- func int + int = int.$/;kq|/^\<int\>/;'q;"	kind:func
int	int.m	/^:- func int - int = int.$/;kq|/^\<int\>/;'q;"	kind:func
int	integer.m	/^:- func integer.int(integer) = int.$/;kq|/^\<integer.int\>/;'q;"	kind:func
int	list.m	/^:- func int `..` int = list(int).$/;kq|/^\<int\>/;'q;"	kind:func
int.+	int.m	/^:- func + (int::in) = (int::uo) is det.$/;kq|/^\<+\>/;'q;"	kind:func
int.-	int.m	/^:- func - (int::in) = (int::uo) is det.$/;kq|/^\<-\>/;'q;"	kind:func
int.\	int.m	/^:- func \\ (int::in) = (int::uo) is det.$/;kq|/^\<\\>/;'q;"	kind:func
int.abs	int.m	/^:- func int.abs(int) = int.$/;kq|/^\<int.abs\>/;'q;"	kind:func
int.abs	int.m	/^:- pred int.abs(int::in, int::out) is det.$/;kq|/^\<int.abs\>/;'q;"	kind:pred
int.bits_per_int	int.m	/^:- func int.bits_per_int = int.$/;kq|/^\<int.bits_per_int\>/;'q;"	kind:func
int.bits_per_int	int.m	/^:- pred int.bits_per_int(int::out) is det.$/;kq|/^\<int.bits_per_int\>/;'q;"	kind:pred
int.div	int.m	/^:- func div(int::in, int::in) = (int::uo) is det.$/;kq|/^\<div\>/;'q;"	kind:func
int.enum	int.m	/^:- instance enum(int) where [$/;kq|-;/\<int.enum\>/;'q;"	kind:tci	file:
int.even	int.m	/^:- pred even(int::in) is semidet.$/;kq|/^\<even\>/;'q;"	kind:pred
int.fold_down	int.m	/^:- func int.fold_down(func(int, T) = T, int, int, T) = T.$/;kq|/^\<int.fold_down\>/;'q;"	kind:func
int.fold_down	int.m	/^:- pred int.fold_down(pred(int, T, T), int, int, T, T).$/;kq|/^\<int.fold_down\>/;'q;"	kind:pred
int.fold_down2	int.m	/^:- pred int.fold_down2(pred(int, T, T, U, U), int, int, T, T, U, U).$/;kq|/^\<int.fold_down2\>/;'q;"	kind:pred
int.fold_down3	int.m	/^:- pred int.fold_down3(pred(int, T, T, U, U, V, V), int, int, T, T, U, U, V, V).$/;kq|/^\<int.fold_down3\>/;'q;"	kind:pred
int.fold_up	int.m	/^:- func int.fold_up(func(int, T) = T, int, int, T) = T.$/;kq|/^\<int.fold_up\>/;'q;"	kind:func
int.fold_up	int.m	/^:- pred int.fold_up(pred(int, T, T), int, int, T, T).$/;kq|/^\<int.fold_up\>/;'q;"	kind:pred
int.fold_up2	int.m	/^:- pred int.fold_up2(pred(int, T, T, U, U), int, int, T, T, U, U).$/;kq|/^\<int.fold_up2\>/;'q;"	kind:pred
int.fold_up3	int.m	/^:- pred int.fold_up3(pred(int, T, T, U, U, V, V), int, int, T, T, U, U, V, V).$/;kq|/^\<int.fold_up3\>/;'q;"	kind:pred
int.int_to_doc	int.m	/^:- func int.int_to_doc(int) = pretty_printer.doc.$/;kq|/^\<int.int_to_doc\>/;'q;"	kind:func
int.is	int.m	/^:- pred is(T, T) is det.$/;kq|/^\<is\>/;'q;"	kind:pred
int.log2	int.m	/^:- func int.log2(int) = int.$/;kq|/^\<int.log2\>/;'q;"	kind:func
int.log2	int.m	/^:- pred int.log2(int::in, int::out) is det.$/;kq|/^\<int.log2\>/;'q;"	kind:pred
int.log2_2	int.m	/^:- pred int.log2_2(int, int, int).$/;kq|/^\<int.log2_2\>/;'q;"	kind:pred	file:
int.max	int.m	/^:- func int.max(int, int) = int.$/;kq|/^\<int.max\>/;'q;"	kind:func
int.max	int.m	/^:- pred int.max(int::in, int::in, int::out) is det.$/;kq|/^\<int.max\>/;'q;"	kind:pred
int.max_int	int.m	/^:- func int.max_int = int.$/;kq|/^\<int.max_int\>/;'q;"	kind:func
int.max_int	int.m	/^:- pred int.max_int(int::out) is det.$/;kq|/^\<int.max_int\>/;'q;"	kind:pred
int.min	int.m	/^:- func int.min(int, int) = int.$/;kq|/^\<int.min\>/;'q;"	kind:func
int.min	int.m	/^:- pred int.min(int::in, int::in, int::out) is det.$/;kq|/^\<int.min\>/;'q;"	kind:pred
int.min_int	int.m	/^:- func int.min_int = int.$/;kq|/^\<int.min_int\>/;'q;"	kind:func
int.min_int	int.m	/^:- pred int.min_int(int::out) is det.$/;kq|/^\<int.min_int\>/;'q;"	kind:pred
int.minus	int.m	/^:- func int.minus(int, int) = int.$/;kq|/^\<int.minus\>/;'q;"	kind:func
int.multiply_by_pow	int.m	/^:- func int.multiply_by_pow(int, int, int) = int.$/;kq|/^\<int.multiply_by_pow\>/;'q;"	kind:func	file:
int.nondet_int_in_range	int.m	/^:- pred nondet_int_in_range(int::in, int::in, int::out) is nondet.$/;kq|/^\<nondet_int_in_range\>/;'q;"	kind:pred
int.odd	int.m	/^:- pred odd(int::in) is semidet.$/;kq|/^\<odd\>/;'q;"	kind:pred
int.plus	int.m	/^:- func int.plus(int, int) = int.$/;kq|/^\<int.plus\>/;'q;"	kind:func
int.pow	int.m	/^:- func int.pow(int, int) = int.$/;kq|/^\<int.pow\>/;'q;"	kind:func
int.pow	int.m	/^:- pred int.pow(int::in, int::in, int::out) is det.$/;kq|/^\<int.pow\>/;'q;"	kind:pred
int.quot_bits_per_int	int.m	/^:- func int.quot_bits_per_int(int) = int.$/;kq|/^\<int.quot_bits_per_int\>/;'q;"	kind:func
int.rem_bits_per_int	int.m	/^:- func int.rem_bits_per_int(int) = int.$/;kq|/^\<int.rem_bits_per_int\>/;'q;"	kind:func
int.times	int.m	/^:- func int.times(int, int) = int.$/;kq|/^\<int.times\>/;'q;"	kind:func
int.times_bits_per_int	int.m	/^:- func int.times_bits_per_int(int) = int.$/;kq|/^\<int.times_bits_per_int\>/;'q;"	kind:func
int.unchecked_left_shift	int.m	/^:- func unchecked_left_shift(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_left_shift\>/;'q;"	kind:func
int.unchecked_quotient	int.m	/^:- func unchecked_quotient(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_quotient\>/;'q;"	kind:func
int.unchecked_rem	int.m	/^:- func unchecked_rem(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_rem\>/;'q;"	kind:func
int.unchecked_right_shift	int.m	/^:- func unchecked_right_shift(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_right_shift\>/;'q;"	kind:func
int.xor	int.m	/^:- func int.xor(int, int) = int.$/;kq|/^\<int.xor\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) * (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) << (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) >> (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) \/ (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) \/\/ (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) \/\\ (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) \\\/ (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) mod (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- func (int::in) rem (int::in) = (int::uo) is det.$/;kq|/^\<int::in\>/;'q;"	kind:func
int::in	int.m	/^:- pred (int::in) < (int::in) is semidet.$/;kq|/^\<int::in\>/;'q;"	kind:pred
int::in	int.m	/^:- pred (int::in) =< (int::in) is semidet.$/;kq|/^\<int::in\>/;'q;"	kind:pred
int::in	int.m	/^:- pred (int::in) > (int::in) is semidet.$/;kq|/^\<int::in\>/;'q;"	kind:pred
int::in	int.m	/^:- pred (int::in) >= (int::in) is semidet.$/;kq|/^\<int::in\>/;'q;"	kind:pred
int_domain_checks	int.m	/^:- pred int_domain_checks is semidet.$/;kq|/^\<int_domain_checks\>/;'q;"	kind:pred	file:
int_hash	hash_table.m	/^:- pred int_hash(int::in, int::out) is det.$/;kq|/^\<int_hash\>/;'q;"	kind:pred
int_hash	version_hash_table.m	/^:- pred int_hash(int::in, int::out) is det.$/;kq|/^\<int_hash\>/;'q;"	kind:pred
int_length_modifer	string.m	/^:- func int_length_modifer = string.$/;kq|/^\<int_length_modifer\>/;'q;"	kind:func	file:
int_list	integer.m	/^:- func int_list(list(int), int) = int.$/;kq|/^\<int_list\>/;'q;"	kind:func	file:
int_literal	parsing_utils.m	/^:- pred int_literal(src::in, int::out,$/;kq|/^\<int_literal\>/;'q;"	kind:pred
int_literal_as_string	parsing_utils.m	/^:- pred int_literal_as_string(src::in, string::out,$/;kq|/^\<int_literal_as_string\>/;'q;"	kind:pred
int_offset	version_bitmap.m	/^:- func int_offset(int) = int.$/;kq|/^\<int_offset\>/;'q;"	kind:func	file:
int_reference	benchmarking.m	/^:- type int_reference ---> int_reference(private_builtin.ref(int)).$/;kq|-;/\<int_reference\>/;'q;"	kind:cons	file:
int_reference	benchmarking.m	/^:- type int_reference ---> int_reference(private_builtin.ref(int)).$/;kq|-;/\<int_reference\>/;'q;"	kind:type	file:
int_special	getopt.m	/^    ;       int_special$/;kq|-;/\<int_special\>/;'q;"	kind:cons
int_special	getopt_io.m	/^    ;       int_special$/;kq|-;/\<int_special\>/;'q;"	kind:cons
int_to_base_string	string.m	/^:- func string.int_to_base_string(int::in, int::in) = (string::uo) is det.$/;kq|/^\<string.int_to_base_string\>/;'q;"	kind:func
int_to_base_string	string.m	/^:- pred string.int_to_base_string(int::in, int::in, string::uo) is det.$/;kq|/^\<string.int_to_base_string\>/;'q;"	kind:pred
int_to_base_string_1	string.m	/^:- pred string.int_to_base_string_1(int::in, int::in, string::uo) is det.$/;kq|/^\<string.int_to_base_string_1\>/;'q;"	kind:pred	file:
int_to_base_string_2	string.m	/^:- pred string.int_to_base_string_2(int::in, int::in,$/;kq|/^\<string.int_to_base_string_2\>/;'q;"	kind:pred	file:
int_to_base_string_group	string.m	/^:- func string.int_to_base_string_group(int, int, int, string) = string.$/;kq|/^\<string.int_to_base_string_group\>/;'q;"	kind:func
int_to_base_string_group_1	string.m	/^:- pred string.int_to_base_string_group_1(int::in, int::in, int::in,$/;kq|/^\<string.int_to_base_string_group_1\>/;'q;"	kind:pred	file:
int_to_base_string_group_2	string.m	/^:- pred string.int_to_base_string_group_2(int::in, int::in, int::in, int::in,$/;kq|/^\<string.int_to_base_string_group_2\>/;'q;"	kind:pred	file:
int_to_digit	char.m	/^:- pred char.int_to_digit(int, char).$/;kq|/^\<char.int_to_digit\>/;'q;"	kind:pred
int_to_doc	int.m	/^:- func int.int_to_doc(int) = pretty_printer.doc.$/;kq|/^\<int.int_to_doc\>/;'q;"	kind:func
int_to_hex_char	char.m	/^:- pred char.int_to_hex_char(int, char).$/;kq|/^\<char.int_to_hex_char\>/;'q;"	kind:pred
int_to_integer	integer.m	/^:- func int_to_integer(int) = integer.$/;kq|/^\<int_to_integer\>/;'q;"	kind:func	file:
int_to_maybe_dst	time.m	/^:- func int_to_maybe_dst(int) = maybe(dst).$/;kq|/^\<int_to_maybe_dst\>/;'q;"	kind:func	file:
int_to_string	string.m	/^:- func string.int_to_string(int::in) = (string::uo) is det.$/;kq|/^\<string.int_to_string\>/;'q;"	kind:func
int_to_string	string.m	/^:- pred string.int_to_string(int::in, string::uo) is det.$/;kq|/^\<string.int_to_string\>/;'q;"	kind:pred
int_to_string_thousands	string.m	/^:- func string.int_to_string_thousands(int::in) = (string::uo) is det.$/;kq|/^\<string.int_to_string_thousands\>/;'q;"	kind:func
integer	integer.m	/^:- func integer * integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer + integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer - integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer << int = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer >> int = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer \/\/ integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer \/\\ integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer \\\/ integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer `xor` integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer div integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer mod integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer rem integer = integer.$/;kq|/^\<integer\>/;'q;"	kind:func
integer	integer.m	/^:- func integer.integer(int) = integer.$/;kq|/^\<integer.integer\>/;'q;"	kind:func
integer	integer.m	/^:- type integer$/;kq|-;/\<integer\>/;'q;"	kind:type	file:
integer	lexer.m	/^    ;       integer(int)$/;kq|-;/\<integer\>/;'q;"	kind:cons
integer	term.m	/^    ;       integer(int)$/;kq|-;/\<integer\>/;'q;"	kind:cons
integer.'+'	integer.m	/^:- func '+'(integer) = integer.$/;kq|/^\<'+'\>/;'q;"	kind:func
integer.'-'	integer.m	/^:- func '-'(integer) = integer.$/;kq|/^\<'-'\>/;'q;"	kind:func
integer.'<'	integer.m	/^:- pred '<'(integer::in, integer::in) is semidet.$/;kq|/^\<'<'\>/;'q;"	kind:pred
integer.'=<'	integer.m	/^:- pred '=<'(integer::in, integer::in) is semidet.$/;kq|/^\<'=<'\>/;'q;"	kind:pred
integer.'>'	integer.m	/^:- pred '>'(integer::in, integer::in) is semidet.$/;kq|/^\<'>'\>/;'q;"	kind:pred
integer.'>='	integer.m	/^:- pred '>='(integer::in, integer::in) is semidet.$/;kq|/^\<'>='\>/;'q;"	kind:pred
integer.\	integer.m	/^:- func \\ integer = integer.$/;kq|/^\<\\>/;'q;"	kind:func
integer.abs	integer.m	/^:- func integer.abs(integer) = integer.$/;kq|/^\<integer.abs\>/;'q;"	kind:func
integer.accumulate_integer	integer.m	/^:- pred accumulate_integer(integer::in, char::in, integer::in, integer::out)$/;kq|/^\<accumulate_integer\>/;'q;"	kind:pred	file:
integer.add_pairs	integer.m	/^:- pred add_pairs(digit::out, integer::in, integer::in,$/;kq|/^\<add_pairs\>/;'q;"	kind:pred	file:
integer.add_pairs_equal	integer.m	/^:- pred add_pairs_equal(digit::out, list(digit)::in, list(digit)::in,$/;kq|/^\<add_pairs_equal\>/;'q;"	kind:pred	file:
integer.and_not_pairs	integer.m	/^:- func and_not_pairs(integer, integer) = integer.$/;kq|/^\<and_not_pairs\>/;'q;"	kind:func	file:
integer.and_not_pairs_equal	integer.m	/^:- func and_not_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<and_not_pairs_equal\>/;'q;"	kind:func	file:
integer.and_pairs	integer.m	/^:- func and_pairs(integer, integer) = integer.$/;kq|/^\<and_pairs\>/;'q;"	kind:func	file:
integer.and_pairs_equal	integer.m	/^:- func and_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<and_pairs_equal\>/;'q;"	kind:func	file:
integer.base	integer.m	/^:- func base = int.$/;kq|/^\<base\>/;'q;"	kind:func	file:
integer.basediv2	integer.m	/^:- func basediv2 = int.$/;kq|/^\<basediv2\>/;'q;"	kind:func	file:
integer.basemask	integer.m	/^:- func basemask = int.$/;kq|/^\<basemask\>/;'q;"	kind:func	file:
integer.big_abs	integer.m	/^:- func big_abs(integer) = integer.$/;kq|/^\<big_abs\>/;'q;"	kind:func	file:
integer.big_and	integer.m	/^:- func big_and(integer, integer) = integer.$/;kq|/^\<big_and\>/;'q;"	kind:func	file:
integer.big_and_not	integer.m	/^:- func big_and_not(integer, integer) = integer.$/;kq|/^\<big_and_not\>/;'q;"	kind:func	file:
integer.big_cmp	integer.m	/^:- func big_cmp(integer, integer) = comparison_result.$/;kq|/^\<big_cmp\>/;'q;"	kind:func	file:
integer.big_div	integer.m	/^:- func big_div(integer, integer) = integer.$/;kq|/^\<big_div\>/;'q;"	kind:func	file:
integer.big_isnegative	integer.m	/^:- pred big_isnegative(integer::in) is semidet.$/;kq|/^\<big_isnegative\>/;'q;"	kind:pred	file:
integer.big_iszero	integer.m	/^:- pred big_iszero(integer::in) is semidet.$/;kq|/^\<big_iszero\>/;'q;"	kind:pred	file:
integer.big_left_shift	integer.m	/^:- func big_left_shift(integer, int) = integer.$/;kq|/^\<big_left_shift\>/;'q;"	kind:func	file:
integer.big_mod	integer.m	/^:- func big_mod(integer, integer) = integer.$/;kq|/^\<big_mod\>/;'q;"	kind:func	file:
integer.big_mul	integer.m	/^:- func big_mul(integer, integer) = integer.$/;kq|/^\<big_mul\>/;'q;"	kind:func	file:
integer.big_neg	integer.m	/^:- func big_neg(integer) = integer.$/;kq|/^\<big_neg\>/;'q;"	kind:func	file:
integer.big_or	integer.m	/^:- func big_or(integer, integer) = integer.$/;kq|/^\<big_or\>/;'q;"	kind:func	file:
integer.big_plus	integer.m	/^:- func big_plus(integer, integer) = integer.$/;kq|/^\<big_plus\>/;'q;"	kind:func	file:
integer.big_pow	integer.m	/^:- func big_pow(integer, integer) = integer.$/;kq|/^\<big_pow\>/;'q;"	kind:func	file:
integer.big_quot	integer.m	/^:- func big_quot(integer, integer) = integer.$/;kq|/^\<big_quot\>/;'q;"	kind:func	file:
integer.big_quot_rem	integer.m	/^:- pred big_quot_rem(integer::in, integer::in, integer::out,$/;kq|/^\<big_quot_rem\>/;'q;"	kind:pred	file:
integer.big_rem	integer.m	/^:- func big_rem(integer, integer) = integer.$/;kq|/^\<big_rem\>/;'q;"	kind:func	file:
integer.big_right_shift	integer.m	/^:- func big_right_shift(integer, int) = integer.$/;kq|/^\<big_right_shift\>/;'q;"	kind:func	file:
integer.big_sign	integer.m	/^:- func big_sign(int, integer) = integer.$/;kq|/^\<big_sign\>/;'q;"	kind:func	file:
integer.big_sqr	integer.m	/^:- func big_sqr(integer) = integer.$/;kq|/^\<big_sqr\>/;'q;"	kind:func	file:
integer.big_xor	integer.m	/^:- func big_xor(integer, integer) = integer.$/;kq|/^\<big_xor\>/;'q;"	kind:func	file:
integer.big_xor_not	integer.m	/^:- func big_xor_not(integer, integer) = integer.$/;kq|/^\<big_xor_not\>/;'q;"	kind:func	file:
integer.bits_pow	integer.m	/^:- func bits_pow(int, int, integer, integer) = integer.$/;kq|/^\<bits_pow\>/;'q;"	kind:func	file:
integer.bits_pow_head	integer.m	/^:- func bits_pow_head(int, integer) = integer.$/;kq|/^\<bits_pow_head\>/;'q;"	kind:func	file:
integer.bits_pow_list	integer.m	/^:- func bits_pow_list(list(int), integer, integer) = integer.$/;kq|/^\<bits_pow_list\>/;'q;"	kind:func	file:
integer.chop	integer.m	/^:- pred chop(int::in, digit::out, digit::out) is det.$/;kq|/^\<chop\>/;'q;"	kind:pred	file:
integer.decap	integer.m	/^:- func decap(integer) = integer.$/;kq|/^\<decap\>/;'q;"	kind:func	file:
integer.det_from_base_string	integer.m	/^:- func integer.det_from_base_string(int, string) = integer.$/;kq|/^\<integer.det_from_base_string\>/;'q;"	kind:func
integer.det_from_string	integer.m	/^:- func integer.det_from_string(string) = integer.$/;kq|/^\<integer.det_from_string\>/;'q;"	kind:func
integer.diff_pairs	integer.m	/^:- pred diff_pairs(digit::out, integer::in, integer::in,$/;kq|/^\<diff_pairs\>/;'q;"	kind:pred	file:
integer.diff_pairs_equal	integer.m	/^:- pred diff_pairs_equal(digit::out, list(digit)::in, list(digit)::in,$/;kq|/^\<diff_pairs_equal\>/;'q;"	kind:pred	file:
integer.digit	integer.m	/^:- type digit == int.   % base 2^14 digit$/;kq|-;/\<integer.digit\>/;'q;"	kind:type	file:
integer.digit_to_string	integer.m	/^:- pred digit_to_string(digit::in, string::out) is det.$/;kq|/^\<digit_to_string\>/;'q;"	kind:pred	file:
integer.digits_to_string	integer.m	/^:- func digits_to_string(list(digit)) = string.$/;kq|/^\<digits_to_string\>/;'q;"	kind:func	file:
integer.digits_to_strings	integer.m	/^:- pred digits_to_strings(list(digit)::in, list(string)::out,$/;kq|/^\<digits_to_strings\>/;'q;"	kind:pred	file:
integer.div_by_digit	integer.m	/^:- func div_by_digit(digit, integer) = integer.$/;kq|/^\<div_by_digit\>/;'q;"	kind:func	file:
integer.div_by_digit_1	integer.m	/^:- func div_by_digit_1(digit, list(digit), digit) = integer.$/;kq|/^\<div_by_digit_1\>/;'q;"	kind:func	file:
integer.div_by_digit_2	integer.m	/^:- func div_by_digit_2(digit, list(digit), digit) = integer.$/;kq|/^\<div_by_digit_2\>/;'q;"	kind:func	file:
integer.divide_with_rem	integer.m	/^:- pred divide_with_rem(integer::in, integer::in,$/;kq|/^\<divide_with_rem\>/;'q;"	kind:pred
integer.evenmask	integer.m	/^:- func evenmask = int.$/;kq|/^\<evenmask\>/;'q;"	kind:func	file:
integer.float	integer.m	/^:- func integer.float(integer) = float.$/;kq|/^\<integer.float\>/;'q;"	kind:func
integer.float_list	integer.m	/^:- func float_list(float, float, list(int)) = float.$/;kq|/^\<float_list\>/;'q;"	kind:func	file:
integer.from_base_string	integer.m	/^:- func integer.from_base_string(int, string) = integer is semidet.$/;kq|/^\<integer.from_base_string\>/;'q;"	kind:func
integer.from_string	integer.m	/^:- func integer.from_string(string::in) = (integer::out) is semidet.$/;kq|/^\<integer.from_string\>/;'q;"	kind:func
integer.head	integer.m	/^:- func head(integer) = digit.$/;kq|/^\<head\>/;'q;"	kind:func	file:
integer.head_tail	integer.m	/^:- func head_tail(integer) = digit.$/;kq|/^\<head_tail\>/;'q;"	kind:func	file:
integer.highbitmask	integer.m	/^:- func highbitmask = int.$/;kq|/^\<highbitmask\>/;'q;"	kind:func	file:
integer.i	integer.m	/^    --->    i(sign, list(digit)).$/;kq|-;/\<integer.i\>/;'q;"	kind:cons	file:
integer.int	integer.m	/^:- func integer.int(integer) = int.$/;kq|/^\<integer.int\>/;'q;"	kind:func
integer.int_list	integer.m	/^:- func int_list(list(int), int) = int.$/;kq|/^\<int_list\>/;'q;"	kind:func	file:
integer.int_to_integer	integer.m	/^:- func int_to_integer(int) = integer.$/;kq|/^\<int_to_integer\>/;'q;"	kind:func	file:
integer.integer	integer.m	/^:- func integer.integer(int) = integer.$/;kq|/^\<integer.integer\>/;'q;"	kind:func
integer.leftshift	integer.m	/^:- pred leftshift(int::in, int::in, int::in, list(digit)::in,$/;kq|/^\<leftshift\>/;'q;"	kind:pred	file:
integer.length	integer.m	/^:- func length(integer) = int.$/;kq|/^\<length\>/;'q;"	kind:func	file:
integer.log10printbase	integer.m	/^:- func log10printbase = int.$/;kq|/^\<log10printbase\>/;'q;"	kind:func	file:
integer.log2base	integer.m	/^:- func log2base = int.$/;kq|/^\<log2base\>/;'q;"	kind:func	file:
integer.lowbitmask	integer.m	/^:- func lowbitmask = int.$/;kq|/^\<lowbitmask\>/;'q;"	kind:func	file:
integer.mul_base	integer.m	/^:- func mul_base(integer) = integer.$/;kq|/^\<mul_base\>/;'q;"	kind:func	file:
integer.mul_base_2	integer.m	/^:- func mul_base_2(list(digit)) = list(digit).$/;kq|/^\<mul_base_2\>/;'q;"	kind:func	file:
integer.mul_by_digit	integer.m	/^:- func mul_by_digit(digit, integer) = integer.$/;kq|/^\<mul_by_digit\>/;'q;"	kind:func	file:
integer.mul_by_digit_2	integer.m	/^:- pred mul_by_digit_2(digit::in, digit::out, list(digit)::in,$/;kq|/^\<mul_by_digit_2\>/;'q;"	kind:pred	file:
integer.neg_list	integer.m	/^:- pred neg_list(list(int)::in, list(int)::out) is det.$/;kq|/^\<neg_list\>/;'q;"	kind:pred	file:
integer.one	integer.m	/^:- func integer.one = integer.$/;kq|/^\<integer.one\>/;'q;"	kind:func
integer.or_pairs	integer.m	/^:- func or_pairs(integer, integer) = integer.$/;kq|/^\<or_pairs\>/;'q;"	kind:func	file:
integer.or_pairs_equal	integer.m	/^:- func or_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<or_pairs_equal\>/;'q;"	kind:func	file:
integer.pos_cmp	integer.m	/^:- func pos_cmp(integer, integer) = comparison_result.$/;kq|/^\<pos_cmp\>/;'q;"	kind:func	file:
integer.pos_geq	integer.m	/^:- pred pos_geq(integer::in, integer::in) is semidet.$/;kq|/^\<pos_geq\>/;'q;"	kind:pred	file:
integer.pos_int_to_digits	integer.m	/^:- func pos_int_to_digits(int) = integer.$/;kq|/^\<pos_int_to_digits\>/;'q;"	kind:func	file:
integer.pos_int_to_digits_2	integer.m	/^:- func pos_int_to_digits_2(int, integer) = integer.$/;kq|/^\<pos_int_to_digits_2\>/;'q;"	kind:func	file:
integer.pos_left_shift	integer.m	/^:- func pos_left_shift(integer, int) = integer.$/;kq|/^\<pos_left_shift\>/;'q;"	kind:func	file:
integer.pos_lt	integer.m	/^:- pred pos_lt(integer::in, integer::in) is semidet.$/;kq|/^\<pos_lt\>/;'q;"	kind:pred	file:
integer.pos_minus	integer.m	/^:- func pos_minus(integer, integer) = integer.$/;kq|/^\<pos_minus\>/;'q;"	kind:func	file:
integer.pos_mul	integer.m	/^:- func pos_mul(integer, integer) = integer.$/;kq|/^\<pos_mul\>/;'q;"	kind:func	file:
integer.pos_mul_list	integer.m	/^:- func pos_mul_list(list(digit), integer, integer) = integer.$/;kq|/^\<pos_mul_list\>/;'q;"	kind:func	file:
integer.pos_plus	integer.m	/^:- func pos_plus(integer, integer) = integer.$/;kq|/^\<pos_plus\>/;'q;"	kind:func	file:
integer.pos_right_shift	integer.m	/^:- func pos_right_shift(integer, int) = integer.$/;kq|/^\<pos_right_shift\>/;'q;"	kind:func	file:
integer.pow	integer.m	/^:- func integer.pow(integer, integer) = integer.$/;kq|/^\<integer.pow\>/;'q;"	kind:func
integer.printbase	integer.m	/^:- func printbase = int.$/;kq|/^\<printbase\>/;'q;"	kind:func	file:
integer.printbase_add_pairs	integer.m	/^:- pred printbase_add_pairs(digit::out, integer::in, integer::in,$/;kq|/^\<printbase_add_pairs\>/;'q;"	kind:pred	file:
integer.printbase_chop	integer.m	/^:- pred printbase_chop(int::in, digit::out, digit::out) is det.$/;kq|/^\<printbase_chop\>/;'q;"	kind:pred	file:
integer.printbase_mul_by_digit	integer.m	/^:- func printbase_mul_by_digit(digit, integer) = integer.$/;kq|/^\<printbase_mul_by_digit\>/;'q;"	kind:func	file:
integer.printbase_pos_mul	integer.m	/^:- func printbase_pos_mul(integer, integer) = integer.$/;kq|/^\<printbase_pos_mul\>/;'q;"	kind:func	file:
integer.printbase_pos_mul_list	integer.m	/^:- func printbase_pos_mul_list(list(digit), integer, integer) = integer.$/;kq|/^\<printbase_pos_mul_list\>/;'q;"	kind:func	file:
integer.printbase_pos_plus	integer.m	/^:- func printbase_pos_plus(integer, integer) = integer.$/;kq|/^\<printbase_pos_plus\>/;'q;"	kind:func	file:
integer.printbase_rep	integer.m	/^:- pred printbase_rep(integer::in, list(digit)::in, integer::out) is det.$/;kq|/^\<printbase_rep\>/;'q;"	kind:pred	file:
integer.printbase_rep_1	integer.m	/^:- func printbase_rep_1(list(digit), integer, integer) = integer.$/;kq|/^\<printbase_rep_1\>/;'q;"	kind:func	file:
integer.quot_rem	integer.m	/^:- pred quot_rem(integer::in, integer::in, integer::out, integer::out) is det.$/;kq|/^\<quot_rem\>/;'q;"	kind:pred	file:
integer.quot_rem_2	integer.m	/^:- pred quot_rem_2(integer::in, integer::in, integer::in, integer::out,$/;kq|/^\<quot_rem_2\>/;'q;"	kind:pred	file:
integer.rightshift	integer.m	/^:- func rightshift(int, int, integer, int) = integer.$/;kq|/^\<rightshift\>/;'q;"	kind:func	file:
integer.shortint_to_integer	integer.m	/^:- func shortint_to_integer(int) = integer.$/;kq|/^\<shortint_to_integer\>/;'q;"	kind:func	file:
integer.sign	integer.m	/^:- type sign == int.    % sign of integer and length of digit list$/;kq|-;/\<integer.sign\>/;'q;"	kind:type	file:
integer.signum	integer.m	/^:- func signum(int) = int.$/;kq|/^\<signum\>/;'q;"	kind:func	file:
integer.string_to_integer	integer.m	/^:- func string_to_integer(list(char)::in) = (integer::out) is semidet.$/;kq|/^\<string_to_integer\>/;'q;"	kind:func	file:
integer.string_to_integer_acc	integer.m	/^:- func string_to_integer_acc(list(char)::in, integer::in) = (integer::out)$/;kq|/^\<string_to_integer_acc\>/;'q;"	kind:func	file:
integer.tail	integer.m	/^:- func tail(integer) = integer.$/;kq|/^\<tail\>/;'q;"	kind:func	file:
integer.to_string	integer.m	/^:- func integer.to_string(integer) = string.$/;kq|/^\<integer.to_string\>/;'q;"	kind:func
integer.xor_pairs	integer.m	/^:- func xor_pairs(integer, integer) = integer.$/;kq|/^\<xor_pairs\>/;'q;"	kind:func	file:
integer.xor_pairs_equal	integer.m	/^:- func xor_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<xor_pairs_equal\>/;'q;"	kind:func	file:
integer.zero	integer.m	/^:- func integer.zero = integer.$/;kq|/^\<integer.zero\>/;'q;"	kind:func
integer.zeros	integer.m	/^:- pred zeros(int::in, list(digit)::out, list(digit)::in) is det.$/;kq|/^\<zeros\>/;'q;"	kind:pred	file:
integer_append	integer.m	/^:- func integer_append(integer, digit) = integer.$/;kq|/^\<integer_append\>/;'q;"	kind:func	file:
integer_dot	lexer.m	/^    ;       integer_dot(int).   % the lexer will never return this.$/;kq|-;/\<integer_dot\>/;'q;"	kind:cons
integer_prepend	integer.m	/^:- func integer_prepend(digit, integer) = integer.$/;kq|/^\<integer_prepend\>/;'q;"	kind:func	file:
integer_signum	integer.m	/^:- func integer_signum(integer) = int.$/;kq|/^\<integer_signum\>/;'q;"	kind:func	file:
integrity	tree_bitset.m	/^:- func integrity(maybe(pair(int)), node_list) = bool.$/;kq|/^\<integrity\>/;'q;"	kind:func	file:
integrity_interior_nodes	tree_bitset.m	/^:- func integrity_interior_nodes(list(interior_node), int, int, int) = bool.$/;kq|/^\<integrity_interior_nodes\>/;'q;"	kind:func	file:
integrity_leaf_nodes	tree_bitset.m	/^:- func integrity_leaf_nodes(list(leaf_node), int, int) = bool.$/;kq|/^\<integrity_leaf_nodes\>/;'q;"	kind:func	file:
interior_all_true	tree_bitset.m	/^:- pred interior_all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<interior_all_true\>/;'q;"	kind:pred	file:
interior_list	tree_bitset.m	/^    ;       interior_list($/;kq|-;/\<interior_list\>/;'q;"	kind:cons	file:
interior_node	tree_bitset.m	/^    --->    interior_node($/;kq|-;/\<interior_node\>/;'q;"	kind:cons	file:
interior_node	tree_bitset.m	/^:- type interior_node$/;kq|-;/\<interior_node\>/;'q;"	kind:type	file:
interior_nodes	tree_bitset.m	/^                interior_nodes  :: list(interior_node)$/;kq|-;/\<interior_nodes\>/;'q;"	kind:fld	file:
interiorlist_contains	tree_bitset.m	/^:- pred interiorlist_contains(list(interior_node)::in, int::in) is semidet.$/;kq|/^\<interiorlist_contains\>/;'q;"	kind:pred	file:
interiorlist_delete	tree_bitset.m	/^:- pred interiorlist_delete(list(interior_node)::in, int::in,$/;kq|/^\<interiorlist_delete\>/;'q;"	kind:pred	file:
interiorlist_difference	tree_bitset.m	/^:- pred interiorlist_difference($/;kq|/^\<interiorlist_difference\>/;'q;"	kind:pred	file:
interiorlist_divide_by_set	tree_bitset.m	/^:- pred interiorlist_divide_by_set(int::in,$/;kq|/^\<interiorlist_divide_by_set\>/;'q;"	kind:pred	file:
interiorlist_insert	tree_bitset.m	/^:- pred interiorlist_insert(int::in, int::in,$/;kq|/^\<interiorlist_insert\>/;'q;"	kind:pred	file:
interiorlist_insert_new	tree_bitset.m	/^:- pred interiorlist_insert_new(int::in, int::in,$/;kq|/^\<interiorlist_insert_new\>/;'q;"	kind:pred	file:
interiorlist_intersect	tree_bitset.m	/^:- pred interiorlist_intersect($/;kq|/^\<interiorlist_intersect\>/;'q;"	kind:pred	file:
interiorlist_member	tree_bitset.m	/^:- pred interiorlist_member(int::out, list(interior_node)::in) is nondet.$/;kq|/^\<interiorlist_member\>/;'q;"	kind:pred	file:
interiorlist_union	tree_bitset.m	/^:- pred interiorlist_union(list(interior_node)::in, list(interior_node)::in,$/;kq|/^\<interiorlist_union\>/;'q;"	kind:pred	file:
interiornode_difference	tree_bitset.m	/^:- pred interiornode_difference($/;kq|/^\<interiornode_difference\>/;'q;"	kind:pred	file:
interiornode_divide	tree_bitset.m	/^:- pred interiornode_divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<interiornode_divide\>/;'q;"	kind:pred	file:
interiornode_intersect	tree_bitset.m	/^:- pred interiornode_intersect($/;kq|/^\<interiornode_intersect\>/;'q;"	kind:pred	file:
interiornode_union	tree_bitset.m	/^:- pred interiornode_union($/;kq|/^\<interiornode_union\>/;'q;"	kind:pred	file:
intersect	bag.m	/^:- func bag.intersect(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.intersect\>/;'q;"	kind:func
intersect	bag.m	/^:- pred bag.intersect(bag(T)::in, bag(T)::in) is semidet.$/;kq|/^\<bag.intersect\>/;'q;"	kind:pred
intersect	bag.m	/^:- pred bag.intersect(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.intersect\>/;'q;"	kind:pred
intersect	bitmap.m	/^:- func intersect(bitmap, bitmap) = bitmap.$/;kq|/^\<intersect\>/;'q;"	kind:func
intersect	fat_sparse_bitset.m	/^:- func intersect(fat_sparse_bitset(T), fat_sparse_bitset(T)) =$/;kq|/^\<intersect\>/;'q;"	kind:func
intersect	fat_sparse_bitset.m	/^:- pred intersect(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<intersect\>/;'q;"	kind:pred
intersect	map.m	/^:- func map.intersect(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.intersect\>/;'q;"	kind:func
intersect	map.m	/^:- pred map.intersect(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.intersect\>/;'q;"	kind:pred
intersect	set.m	/^:- func set.intersect(set(T), set(T)) = set(T).$/;kq|/^\<set.intersect\>/;'q;"	kind:func
intersect	set.m	/^:- pred set.intersect(set(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.intersect\>/;'q;"	kind:pred
intersect	set_bbbtree.m	/^:- func set_bbbtree.intersect(set_bbbtree(T), set_bbbtree(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.intersect\>/;'q;"	kind:func
intersect	set_bbbtree.m	/^:- pred set_bbbtree.intersect(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.intersect\>/;'q;"	kind:pred
intersect	set_ctree234.m	/^:- func set_ctree234.intersect(set_ctree234(T), set_ctree234(T))$/;kq|/^\<set_ctree234.intersect\>/;'q;"	kind:func
intersect	set_ctree234.m	/^:- pred set_ctree234.intersect(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.intersect\>/;'q;"	kind:pred
intersect	set_ordlist.m	/^:- func set_ordlist.intersect(set_ordlist(T), set_ordlist(T))$/;kq|/^\<set_ordlist.intersect\>/;'q;"	kind:func
intersect	set_ordlist.m	/^:- pred set_ordlist.intersect(set_ordlist(T), set_ordlist(T), set_ordlist(T)).$/;kq|/^\<set_ordlist.intersect\>/;'q;"	kind:pred
intersect	set_tree234.m	/^:- func set_tree234.intersect(set_tree234(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.intersect\>/;'q;"	kind:func
intersect	set_tree234.m	/^:- pred set_tree234.intersect(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.intersect\>/;'q;"	kind:pred
intersect	set_unordlist.m	/^:- func set_unordlist.intersect(set_unordlist(T), set_unordlist(T))$/;kq|/^\<set_unordlist.intersect\>/;'q;"	kind:func
intersect	set_unordlist.m	/^:- pred set_unordlist.intersect(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.intersect\>/;'q;"	kind:pred
intersect	sparse_bitset.m	/^:- func intersect(sparse_bitset(T), sparse_bitset(T)) = sparse_bitset(T).$/;kq|/^\<intersect\>/;'q;"	kind:func
intersect	sparse_bitset.m	/^:- pred intersect(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<intersect\>/;'q;"	kind:pred
intersect	test_bitset.m	/^:- func intersect(test_bitset(T), test_bitset(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<intersect\>/;'q;"	kind:func
intersect	test_bitset.m	/^:- pred intersect(test_bitset(T)::in,$/;kq|/^\<intersect\>/;'q;"	kind:pred
intersect	tree_bitset.m	/^:- func intersect(tree_bitset(T), tree_bitset(T)) = tree_bitset(T).$/;kq|/^\<intersect\>/;'q;"	kind:func
intersect	tree_bitset.m	/^:- pred intersect(tree_bitset(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<intersect\>/;'q;"	kind:pred
intersect	version_bitmap.m	/^:- func intersect(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<intersect\>/;'q;"	kind:func
intersect_2	bag.m	/^:- pred bag.intersect_2(bag(T)::in, bag(T)::in, bag(T)::in, bag(T)::out)$/;kq|/^\<bag.intersect_2\>/;'q;"	kind:pred	file:
intersect_2	fat_sparse_bitset.m	/^:- func intersect_2(fat_bitset_impl, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<intersect_2\>/;'q;"	kind:func	file:
intersect_2	map.m	/^:- pred map.intersect_2(assoc_list(K, V), assoc_list(K, V), pred(V, V, V),$/;kq|/^\<map.intersect_2\>/;'q;"	kind:pred	file:
intersect_2	set_ordlist.m	/^:- pred set_ordlist.intersect_2(list(T), list(T), list(T)).$/;kq|/^\<set_ordlist.intersect_2\>/;'q;"	kind:pred	file:
intersect_2	set_unordlist.m	/^:- pred set_unordlist.intersect_2(list(T)::in, list(T)::in,$/;kq|/^\<set_unordlist.intersect_2\>/;'q;"	kind:pred	file:
intersect_2	sparse_bitset.m	/^:- func intersect_2(bitset_impl, bitset_impl) = bitset_impl.$/;kq|/^\<intersect_2\>/;'q;"	kind:func	file:
intersect_list	fat_sparse_bitset.m	/^:- func intersect_list(list(fat_sparse_bitset(T))) = fat_sparse_bitset(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
intersect_list	fat_sparse_bitset.m	/^:- pred intersect_list(list(fat_sparse_bitset(T))::in,$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
intersect_list	set.m	/^:- func set.intersect_list(list(set(T))) = set(T).$/;kq|/^\<set.intersect_list\>/;'q;"	kind:func
intersect_list	set_bbbtree.m	/^:- func set_bbbtree.intersect_list(list(set_bbbtree(T))) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.intersect_list\>/;'q;"	kind:func
intersect_list	set_ctree234.m	/^:- func set_ctree234.intersect_list(list(set_ctree234(T))) = set_ctree234(T).$/;kq|/^\<set_ctree234.intersect_list\>/;'q;"	kind:func
intersect_list	set_ordlist.m	/^:- func set_ordlist.intersect_list(list(set_ordlist(T))) = set_ordlist(T).$/;kq|/^\<set_ordlist.intersect_list\>/;'q;"	kind:func
intersect_list	set_ordlist.m	/^:- pred set_ordlist.intersect_list(list(set_ordlist(T))::in,$/;kq|/^\<set_ordlist.intersect_list\>/;'q;"	kind:pred
intersect_list	set_tree234.m	/^:- func set_tree234.intersect_list(list(set_tree234(T))) = set_tree234(T).$/;kq|/^\<set_tree234.intersect_list\>/;'q;"	kind:func
intersect_list	set_tree234.m	/^:- pred set_tree234.intersect_list(list(set_tree234(T))::in,$/;kq|/^\<set_tree234.intersect_list\>/;'q;"	kind:pred
intersect_list	set_unordlist.m	/^:- func set_unordlist.intersect_list(list(set_unordlist(T)))$/;kq|/^\<set_unordlist.intersect_list\>/;'q;"	kind:func
intersect_list	sparse_bitset.m	/^:- func intersect_list(list(sparse_bitset(T))) = sparse_bitset(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
intersect_list	sparse_bitset.m	/^:- pred intersect_list(list(sparse_bitset(T))::in, sparse_bitset(T)::out)$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
intersect_list	test_bitset.m	/^:- func intersect_list(list(test_bitset(T))) = test_bitset(T) <= enum(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
intersect_list	test_bitset.m	/^:- pred intersect_list(list(test_bitset(T))::in, test_bitset(T)::out) is det$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
intersect_list	tree_bitset.m	/^:- func intersect_list(list(tree_bitset(T))) = tree_bitset(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
intersect_list	tree_bitset.m	/^:- pred intersect_list(list(tree_bitset(T))::in, tree_bitset(T)::out) is det.$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
intersect_list_2	set_tree234.m	/^:- func set_tree234.intersect_list_2(set_tree234(T), list(set_tree234(T)))$/;kq|/^\<set_tree234.intersect_list_2\>/;'q;"	kind:func	file:
intersect_list_pass	fat_sparse_bitset.m	/^:- pred intersect_list_pass(list(fat_sparse_bitset(T))::in,$/;kq|/^\<intersect_list_pass\>/;'q;"	kind:pred	file:
intersect_list_pass	sparse_bitset.m	/^:- pred intersect_list_pass(list(sparse_bitset(T))::in,$/;kq|/^\<intersect_list_pass\>/;'q;"	kind:pred	file:
intersect_list_pass	tree_bitset.m	/^:- pred intersect_list_pass(list(tree_bitset(T))::in,$/;kq|/^\<intersect_list_pass\>/;'q;"	kind:pred	file:
intersect_list_r	set_bbbtree.m	/^:- func set_bbbtree.intersect_list_r(set_bbbtree(T), list(set_bbbtree(T)),$/;kq|/^\<set_bbbtree.intersect_list_r\>/;'q;"	kind:func	file:
intersect_r	set_bbbtree.m	/^:- pred set_bbbtree.intersect_r(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.intersect_r\>/;'q;"	kind:pred	file:
intersectable	robdd.m	/^:- instance intersectable(entailment_result(T)) <= intersectable(T) where [$/;kq|-;/\<intersectable\>/;'q;"	kind:tci	file:
intersectable	robdd.m	/^:- instance intersectable(imp_res_2(T)) where [$/;kq|-;/\<intersectable\>/;'q;"	kind:tci	file:
intersectable	robdd.m	/^:- instance intersectable(leader_to_eqvclass(T)) where [$/;kq|-;/\<intersectable\>/;'q;"	kind:tci	file:
intersectable	robdd.m	/^:- instance intersectable(sparse_bitset(T)) where [$/;kq|-;/\<intersectable\>/;'q;"	kind:tci	file:
intersectable	robdd.m	/^:- typeclass intersectable(T) where [$/;kq|-;/\<intersectable\>/;'q;"	kind:tc	file:
intersection	robdd.m	/^    func(intersection\/2) is sparse_bitset.intersect$/;kq|-;/\<intersection\>/;'q;"	kind:tcim	file:
intersects	rtree.m	/^    pred intersects(K::in, K::in) is semidet,$/;kq|-;/\<intersects\>/;'q;"	kind:tcm
intersects	rtree.m	/^    pred(intersects\/2) is box3d_intersects, $/;kq|-;/\<intersects\>/;'q;"	kind:tcim	file:
intersects	rtree.m	/^    pred(intersects\/2) is box_intersects, $/;kq|-;/\<intersects\>/;'q;"	kind:tcim	file:
intersects	rtree.m	/^    pred(intersects\/2) is interval_intersects, $/;kq|-;/\<intersects\>/;'q;"	kind:tcim	file:
interval	rtree.m	/^    --->    interval(float, float).$/;kq|-;/\<interval\>/;'q;"	kind:cons
interval	rtree.m	/^:- type interval$/;kq|-;/\<interval\>/;'q;"	kind:type
interval_bounding_region	rtree.m	/^:- func interval_bounding_region(interval, interval) = interval.$/;kq|/^\<interval_bounding_region\>/;'q;"	kind:func	file:
interval_bounding_region_length	rtree.m	/^:- func interval_bounding_region_length(interval, interval) = float.$/;kq|/^\<interval_bounding_region_length\>/;'q;"	kind:func	file:
interval_contains	rtree.m	/^:- pred interval_contains(interval::in, interval::in) is semidet.$/;kq|/^\<interval_contains\>/;'q;"	kind:pred	file:
interval_intersects	rtree.m	/^:- pred interval_intersects(interval::in, interval::in) is semidet.$/;kq|/^\<interval_intersects\>/;'q;"	kind:pred	file:
interval_length	rtree.m	/^:- func interval_length(interval) = float.$/;kq|/^\<interval_length\>/;'q;"	kind:func	file:
inverse	digraph.m	/^:- func digraph.inverse(digraph(T)) = digraph(T).$/;kq|/^\<digraph.inverse\>/;'q;"	kind:func
inverse	digraph.m	/^:- pred digraph.inverse(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.inverse\>/;'q;"	kind:pred
inverse_search	map.m	/^:- pred map.inverse_search(map(K, V)::in, V::in, K::out) is nondet.$/;kq|/^\<map.inverse_search\>/;'q;"	kind:pred
inverse_search	multi_map.m	/^:- pred multi_map.inverse_search(multi_map(K, V)::in, V::in, K::out) is nondet.$/;kq|/^\<multi_map.inverse_search\>/;'q;"	kind:pred
io	io.m	/^:- type io.io == io.state.$/;kq|-;/\<io\>/;'q;"	kind:type
io.access_type	io.m	/^:- type io.access_type$/;kq|-;/\<io.access_type\>/;'q;"	kind:type
io.access_types_includes_read	io.m	/^:- pred access_types_includes_read(list(access_type)::in) is semidet.$/;kq|/^\<access_types_includes_read\>/;'q;"	kind:pred	file:
io.access_types_includes_write	io.m	/^:- pred access_types_includes_write(list(access_type)::in) is semidet.$/;kq|/^\<access_types_includes_write\>/;'q;"	kind:pred	file:
io.alloc_buffer	io.m	/^:- pred io.alloc_buffer(int::in, buffer::buffer_uo) is det.$/;kq|/^\<io.alloc_buffer\>/;'q;"	kind:pred	file:
io.append	io.m	/^    ;       append.$/;kq|-;/\<io.append\>/;'q;"	kind:cons
io.binary	io.m	/^    ;       binary$/;kq|-;/\<io.binary\>/;'q;"	kind:cons
io.binary_input_stream	io.m	/^:- pred io.binary_input_stream(io.binary_input_stream::out,$/;kq|/^\<io.binary_input_stream\>/;'q;"	kind:pred
io.binary_input_stream	io.m	/^:- type io.binary_input_stream ---> binary_input_stream(io.stream).$/;kq|-;/\<io.binary_input_stream\>/;'q;"	kind:cons	file:
io.binary_input_stream	io.m	/^:- type io.binary_input_stream ---> binary_input_stream(io.stream).$/;kq|-;/\<io.binary_input_stream\>/;'q;"	kind:type	file:
io.binary_input_stream_2	io.m	/^:- pred io.binary_input_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_input_stream_2\>/;'q;"	kind:pred	file:
io.binary_input_stream_foldl	io.m	/^:- pred io.binary_input_stream_foldl(io.binary_input_stream,$/;kq|/^\<io.binary_input_stream_foldl\>/;'q;"	kind:pred
io.binary_input_stream_foldl	io.m	/^:- pred io.binary_input_stream_foldl(pred(int, T, T),$/;kq|/^\<io.binary_input_stream_foldl\>/;'q;"	kind:pred
io.binary_input_stream_info	io.m	/^:- func io.binary_input_stream_info(io.stream_db, io.binary_input_stream)$/;kq|/^\<io.binary_input_stream_info\>/;'q;"	kind:func
io.binary_input_stream_name	io.m	/^:- pred io.binary_input_stream_name(io.binary_input_stream::in, string::out,$/;kq|/^\<io.binary_input_stream_name\>/;'q;"	kind:pred
io.binary_input_stream_name	io.m	/^:- pred io.binary_input_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_input_stream_name\>/;'q;"	kind:pred
io.binary_input_stream_offset	io.m	/^:- pred io.binary_input_stream_offset(io.binary_input_stream::in, int::out,$/;kq|/^\<io.binary_input_stream_offset\>/;'q;"	kind:pred
io.binary_output_stream	io.m	/^:- pred io.binary_output_stream(io.binary_output_stream::out,$/;kq|/^\<io.binary_output_stream\>/;'q;"	kind:pred
io.binary_output_stream	io.m	/^:- type io.binary_output_stream ---> binary_output_stream(io.stream).$/;kq|-;/\<io.binary_output_stream\>/;'q;"	kind:cons	file:
io.binary_output_stream	io.m	/^:- type io.binary_output_stream ---> binary_output_stream(io.stream).$/;kq|-;/\<io.binary_output_stream\>/;'q;"	kind:type	file:
io.binary_output_stream_2	io.m	/^:- pred io.binary_output_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_output_stream_2\>/;'q;"	kind:pred	file:
io.binary_output_stream_info	io.m	/^:- func io.binary_output_stream_info(io.stream_db, io.binary_output_stream)$/;kq|/^\<io.binary_output_stream_info\>/;'q;"	kind:func
io.binary_output_stream_name	io.m	/^:- pred io.binary_output_stream_name(io.binary_output_stream::in,$/;kq|/^\<io.binary_output_stream_name\>/;'q;"	kind:pred
io.binary_output_stream_name	io.m	/^:- pred io.binary_output_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.binary_output_stream_name\>/;'q;"	kind:pred
io.binary_output_stream_offset	io.m	/^:- pred io.binary_output_stream_offset(io.binary_output_stream::in, int::out,$/;kq|/^\<io.binary_output_stream_offset\>/;'q;"	kind:pred
io.binary_stream_offset_2	io.m	/^:- pred io.binary_stream_offset_2(io.stream::in, int::out,$/;kq|/^\<io.binary_stream_offset_2\>/;'q;"	kind:pred	file:
io.block_device	io.m	/^    ;       block_device$/;kq|-;/\<io.block_device\>/;'q;"	kind:cons
io.buffer	io.m	/^:- type buffer ---> buffer(array(char)).$/;kq|-;/\<io.buffer\>/;'q;"	kind:cons	file:
io.buffer	io.m	/^:- type buffer ---> buffer(array(char)).$/;kq|-;/\<io.buffer\>/;'q;"	kind:type	file:
io.buffer_di	io.m	/^:- mode buffer_di == di(uniq_buffer).$/;kq|-;/\<io.buffer_di\>/;'q;"	kind:mode	file:
io.buffer_to_string	io.m	/^:- pred io.buffer_to_string(buffer::buffer_di, int::in, string::uo) is semidet.$/;kq|/^\<io.buffer_to_string\>/;'q;"	kind:pred	file:
io.buffer_uo	io.m	/^:- mode buffer_uo == out(uniq_buffer).$/;kq|-;/\<io.buffer_uo\>/;'q;"	kind:mode	file:
io.build_command_line_args	io.m	/^:- pred build_command_line_args(int::in, list(string)::out) is det.$/;kq|/^\<build_command_line_args\>/;'q;"	kind:pred	file:
io.call_system	io.m	/^:- pred io.call_system(string::in, io.res(int)::out, io::di, io::uo) is det.$/;kq|/^\<io.call_system\>/;'q;"	kind:pred
io.call_system_code	io.m	/^:- pred io.call_system_code(string::in, int::out, string::out,$/;kq|/^\<io.call_system_code\>/;'q;"	kind:pred	file:
io.call_system_return_signal	io.m	/^:- pred io.call_system_return_signal(string::in,$/;kq|/^\<io.call_system_return_signal\>/;'q;"	kind:pred
io.character_device	io.m	/^    ;       character_device$/;kq|-;/\<io.character_device\>/;'q;"	kind:cons
io.check_err	io.m	/^:- pred io.check_err(stream::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.check_err\>/;'q;"	kind:pred	file:
io.check_file_accessibility	io.m	/^:- pred io.check_file_accessibility(string::in, list(access_type)::in,$/;kq|/^\<io.check_file_accessibility\>/;'q;"	kind:pred
io.check_file_accessibility_2	io.m	/^:- pred io.check_file_accessibility_2(string::in, list(access_type)::in,$/;kq|/^\<io.check_file_accessibility_2\>/;'q;"	kind:pred	file:
io.chunk_inner_res	io.m	/^:- type chunk_inner_res(T)$/;kq|-;/\<io.chunk_inner_res\>/;'q;"	kind:type	file:
io.chunk_inner_res0	io.m	/^:- type chunk_inner_res0$/;kq|-;/\<io.chunk_inner_res0\>/;'q;"	kind:type	file:
io.chunk_size	io.m	/^:- func chunk_size = int.$/;kq|/^\<chunk_size\>/;'q;"	kind:func	file:
io.clear_err	io.m	/^:- pred io.clear_err(stream::in, io::di, io::uo) is det.$/;kq|/^\<io.clear_err\>/;'q;"	kind:pred	file:
io.close_binary_input	io.m	/^:- pred io.close_binary_input(io.binary_input_stream::in,$/;kq|/^\<io.close_binary_input\>/;'q;"	kind:pred
io.close_binary_output	io.m	/^:- pred io.close_binary_output(io.binary_output_stream::in,$/;kq|/^\<io.close_binary_output\>/;'q;"	kind:pred
io.close_input	io.m	/^:- pred io.close_input(io.input_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.close_input\>/;'q;"	kind:pred
io.close_output	io.m	/^:- pred io.close_output(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.close_output\>/;'q;"	kind:pred
io.close_stream	io.m	/^:- pred io.close_stream(stream::in, io::di, io::uo) is det.$/;kq|/^\<io.close_stream\>/;'q;"	kind:pred	file:
io.command_line_argument	io.m	/^:- pred command_line_argument(int::in, string::out) is semidet.$/;kq|/^\<command_line_argument\>/;'q;"	kind:pred	file:
io.command_line_arguments	io.m	/^:- pred io.command_line_arguments(list(string)::out, io::di, io::uo) is det.$/;kq|/^\<io.command_line_arguments\>/;'q;"	kind:pred
io.compare_file_id	io.m	/^:- pred compare_file_id(comparison_result::uo, file_id::in, file_id::in)$/;kq|/^\<compare_file_id\>/;'q;"	kind:pred	file:
io.compare_file_id_2	io.m	/^:- pred compare_file_id_2(int::out, file_id::in, file_id::in) is det.$/;kq|/^\<compare_file_id_2\>/;'q;"	kind:pred	file:
io.cur	io.m	/^    ;       cur$/;kq|-;/\<io.cur\>/;'q;"	kind:cons
io.directory	io.m	/^    ;       directory$/;kq|-;/\<io.directory\>/;'q;"	kind:cons
io.do_make_temp	io.m	/^:- pred io.do_make_temp(string::in, string::in, string::in,$/;kq|/^\<io.do_make_temp\>/;'q;"	kind:pred	file:
io.do_open_binary	io.m	/^:- pred io.do_open_binary(string::in, string::in, int::out, int::out,$/;kq|/^\<io.do_open_binary\>/;'q;"	kind:pred	file:
io.do_open_text	io.m	/^:- pred io.do_open_text(string::in, string::in, int::out, int::out,$/;kq|/^\<io.do_open_text\>/;'q;"	kind:pred	file:
io.do_read_bitmap	io.m	/^:- pred io.do_read_bitmap(io.stream::in, byte_index::in, num_bytes::in,$/;kq|/^\<io.do_read_bitmap\>/;'q;"	kind:pred	file:
io.do_write_bitmap	io.m	/^:- pred io.do_write_bitmap(io.stream, bitmap, int, int, io, io).$/;kq|/^\<io.do_write_bitmap\>/;'q;"	kind:pred	file:
io.end	io.m	/^    ;       end.$/;kq|-;/\<io.end\>/;'q;"	kind:cons
io.eof	io.m	/^    ;       eof$/;kq|-;/\<io.eof\>/;'q;"	kind:cons
io.eof	io.m	/^    ;       eof$/;kq|-;/\<io.eof\>/;'q;"	kind:cons
io.eof	io.m	/^    ;       eof$/;kq|-;/\<io.eof\>/;'q;"	kind:cons
io.error	io.m	/^    ;       error(T, io.error)$/;kq|-;/\<io.error\>/;'q;"	kind:cons	file:
io.error	io.m	/^    ;       error(T, io.error).$/;kq|-;/\<io.error\>/;'q;"	kind:cons
io.error	io.m	/^    ;       error(io.error)$/;kq|-;/\<io.error\>/;'q;"	kind:cons	file:
io.error	io.m	/^    ;       error(io.error).$/;kq|-;/\<io.error\>/;'q;"	kind:cons
io.error	io.m	/^    ;       error(io.error).$/;kq|-;/\<io.error\>/;'q;"	kind:cons
io.error	io.m	/^    ;       error(io.error).$/;kq|-;/\<io.error\>/;'q;"	kind:cons
io.error	io.m	/^    ;       error(io.error).$/;kq|-;/\<io.error\>/;'q;"	kind:cons
io.error	io.m	/^    ;       error(string, int). % error message, line number$/;kq|-;/\<io.error\>/;'q;"	kind:cons
io.error	io.m	/^:- type io.error$/;kq|-;/\<io.error\>/;'q;"	kind:type	file:
io.error_message	io.m	/^:- func io.error_message(io.error) = string.$/;kq|/^\<io.error_message\>/;'q;"	kind:func
io.error_message	io.m	/^:- pred io.error_message(io.error::in, string::out) is det.$/;kq|/^\<io.error_message\>/;'q;"	kind:pred
io.execute	io.m	/^    ;       execute.$/;kq|-;/\<io.execute\>/;'q;"	kind:cons
io.exited	io.m	/^    --->    exited(int)$/;kq|-;/\<io.exited\>/;'q;"	kind:cons
io.ferror	io.m	/^:- pred io.ferror(stream::in, int::out, string::out, io::di, io::uo) is det.$/;kq|/^\<io.ferror\>/;'q;"	kind:pred	file:
io.file	io.m	/^    --->    file(string)    % the file name$/;kq|-;/\<io.file\>/;'q;"	kind:cons
io.file_id	io.m	/^:- pred io.file_id(string::in, io.res(file_id)::out, io::di, io::uo) is det.$/;kq|/^\<io.file_id\>/;'q;"	kind:pred
io.file_id	io.m	/^:- type file_id ---> file_id.$/;kq|-;/\<io.file_id\>/;'q;"	kind:cons	file:
io.file_id	io.m	/^:- type file_id ---> file_id.$/;kq|-;/\<io.file_id\>/;'q;"	kind:type	file:
io.file_id_2	io.m	/^:- pred io.file_id_2(string::in, int::out, string::out, file_id::out,$/;kq|/^\<io.file_id_2\>/;'q;"	kind:pred	file:
io.file_modification_time	io.m	/^:- pred io.file_modification_time(string::in, io.res(time_t)::out,$/;kq|/^\<io.file_modification_time\>/;'q;"	kind:pred
io.file_modification_time_2	io.m	/^:- pred io.file_modification_time_2(string::in, int::out, string::out,$/;kq|/^\<io.file_modification_time_2\>/;'q;"	kind:pred	file:
io.file_type	io.m	/^:- pred io.file_type(bool::in, string::in, io.res(file_type)::out,$/;kq|/^\<io.file_type\>/;'q;"	kind:pred
io.file_type	io.m	/^:- type io.file_type$/;kq|-;/\<io.file_type\>/;'q;"	kind:type
io.file_type_2	io.m	/^:- pred io.file_type_2(int::in, string::in, io.res(io.file_type)::out,$/;kq|/^\<io.file_type_2\>/;'q;"	kind:pred	file:
io.file_type_block_device	io.m	/^:- func file_type_block_device = file_type.$/;kq|/^\<file_type_block_device\>/;'q;"	kind:func	file:
io.file_type_character_device	io.m	/^:- func file_type_character_device = file_type.$/;kq|/^\<file_type_character_device\>/;'q;"	kind:func	file:
io.file_type_directory	io.m	/^:- func file_type_directory = file_type.$/;kq|/^\<file_type_directory\>/;'q;"	kind:func	file:
io.file_type_fifo	io.m	/^:- func file_type_fifo = file_type.$/;kq|/^\<file_type_fifo\>/;'q;"	kind:func	file:
io.file_type_implemented	io.m	/^:- pred file_type_implemented is semidet.$/;kq|/^\<file_type_implemented\>/;'q;"	kind:pred	file:
io.file_type_message_queue	io.m	/^:- func file_type_message_queue = file_type.$/;kq|/^\<file_type_message_queue\>/;'q;"	kind:func	file:
io.file_type_regular	io.m	/^:- func file_type_regular = file_type.$/;kq|/^\<file_type_regular\>/;'q;"	kind:func	file:
io.file_type_semaphore	io.m	/^:- func file_type_semaphore = file_type.$/;kq|/^\<file_type_semaphore\>/;'q;"	kind:func	file:
io.file_type_shared_memory	io.m	/^:- func file_type_shared_memory = file_type.$/;kq|/^\<file_type_shared_memory\>/;'q;"	kind:func	file:
io.file_type_socket	io.m	/^:- func file_type_socket = file_type.$/;kq|/^\<file_type_socket\>/;'q;"	kind:func	file:
io.file_type_symbolic_link	io.m	/^:- func file_type_symbolic_link = file_type.$/;kq|/^\<file_type_symbolic_link\>/;'q;"	kind:func	file:
io.file_type_unknown	io.m	/^:- func file_type_unknown = file_type.$/;kq|/^\<file_type_unknown\>/;'q;"	kind:func	file:
io.finalize_state	io.m	/^:- pred io.finalize_state(io::di, io::uo) is det.$/;kq|/^\<io.finalize_state\>/;'q;"	kind:pred	file:
io.flush	io.m	/^    pred(flush\/3) is io.flush_binary_output$/;kq|-;/\<io.flush\>/;'q;"	kind:tcim	file:
io.flush	io.m	/^    pred(flush\/3) is io.flush_output$/;kq|-;/\<io.flush\>/;'q;"	kind:tcim	file:
io.flush_binary_output	io.m	/^:- pred io.flush_binary_output(io.binary_output_stream::in,$/;kq|/^\<io.flush_binary_output\>/;'q;"	kind:pred
io.flush_binary_output	io.m	/^:- pred io.flush_binary_output(io::di, io::uo) is det.$/;kq|/^\<io.flush_binary_output\>/;'q;"	kind:pred
io.flush_binary_output_2	io.m	/^:- pred io.flush_binary_output_2(io.stream::in, io::di, io::uo) is det.$/;kq|/^\<io.flush_binary_output_2\>/;'q;"	kind:pred	file:
io.flush_output	io.m	/^:- pred io.flush_output(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.flush_output\>/;'q;"	kind:pred
io.flush_output	io.m	/^:- pred io.flush_output(io::di, io::uo) is det.$/;kq|/^\<io.flush_output\>/;'q;"	kind:pred
io.flush_output_2	io.m	/^:- pred io.flush_output_2(io.stream::in, io::di, io::uo) is det.$/;kq|/^\<io.flush_output_2\>/;'q;"	kind:pred	file:
io.format	io.m	/^:- pred io.format(io.output_stream::in, string::in, list(io.poly_type)::in,$/;kq|/^\<io.format\>/;'q;"	kind:pred
io.format	io.m	/^:- pred io.format(string::in, list(io.poly_type)::in, io::di, io::uo) is det.$/;kq|/^\<io.format\>/;'q;"	kind:pred
io.gc_init	io.m	/^:- pred io.gc_init(type_desc::in, type_desc::in, io::di, io::uo) is det.$/;kq|/^\<io.gc_init\>/;'q;"	kind:pred	file:
io.get_environment_var	io.m	/^:- pred io.get_environment_var(string::in, maybe(string)::out,$/;kq|/^\<io.get_environment_var\>/;'q;"	kind:pred
io.get_exit_status	io.m	/^:- pred io.get_exit_status(int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_exit_status\>/;'q;"	kind:pred
io.get_globals	io.m	/^:- pred io.get_globals(univ::out, io::di, io::uo) is det.$/;kq|/^\<io.get_globals\>/;'q;"	kind:pred
io.get_io_input_stream_type	io.m	/^:- pred io.get_io_input_stream_type(type_desc::out, io::di, io::uo) is det.$/;kq|/^\<io.get_io_input_stream_type\>/;'q;"	kind:pred	file:
io.get_io_output_stream_type	io.m	/^:- pred io.get_io_output_stream_type(type_desc::out, io::di, io::uo) is det.$/;kq|/^\<io.get_io_output_stream_type\>/;'q;"	kind:pred	file:
io.get_io_stream_info	io.m	/^:- func get_io_stream_info(io.stream_db, T) = maybe_stream_info is semidet.$/;kq|/^\<get_io_stream_info\>/;'q;"	kind:func
io.get_line	io.m	/^    pred(get_line\/4) is io.get_line_number,$/;kq|-;/\<io.get_line\>/;'q;"	kind:tcim	file:
io.get_line	io.m	/^    pred(get_line\/4) is io.get_output_line_number,$/;kq|-;/\<io.get_line\>/;'q;"	kind:tcim	file:
io.get_line_number	io.m	/^:- pred io.get_line_number(int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_line_number\>/;'q;"	kind:pred
io.get_line_number	io.m	/^:- pred io.get_line_number(io.input_stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.get_line_number\>/;'q;"	kind:pred
io.get_line_number_2	io.m	/^:- pred io.get_line_number_2(io.stream::in, int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_line_number_2\>/;'q;"	kind:pred	file:
io.get_op_table	io.m	/^:- pred io.get_op_table(ops.table::out, io::di, io::uo) is det.$/;kq|/^\<io.get_op_table\>/;'q;"	kind:pred
io.get_output_line_number	io.m	/^:- pred io.get_output_line_number(int::out, io::di, io::uo) is det.$/;kq|/^\<io.get_output_line_number\>/;'q;"	kind:pred
io.get_output_line_number	io.m	/^:- pred io.get_output_line_number(io.output_stream::in, int::out,$/;kq|/^\<io.get_output_line_number\>/;'q;"	kind:pred
io.get_output_line_number_2	io.m	/^:- pred io.get_output_line_number_2(io.stream::in, int::out,$/;kq|/^\<io.get_output_line_number_2\>/;'q;"	kind:pred	file:
io.get_stream_db	io.m	/^:- pred io.get_stream_db(io.stream_db::out, io::di, io::uo) is det.$/;kq|/^\<io.get_stream_db\>/;'q;"	kind:pred
io.get_stream_db_with_locking	io.m	/^:- impure pred io.get_stream_db_with_locking(io.stream_db::out) is det.$/;kq|/^\<io.get_stream_db_with_locking\>/;'q;"	kind:pred
io.get_stream_id	io.m	/^:- func io.get_stream_id(io.stream) = io.stream_id.$/;kq|/^\<io.get_stream_id\>/;'q;"	kind:func	file:
io.get_system_error	io.m	/^:- pred io.get_system_error(io.system_error::out, io::di, io::uo) is det.$/;kq|/^\<io.get_system_error\>/;'q;"	kind:pred	file:
io.getenv	io.m	/^:- semipure pred io.getenv(string::in, string::out) is semidet.$/;kq|/^\<io.getenv\>/;'q;"	kind:pred	file:
io.have_cygwin	io.m	/^:- pred have_cygwin is semidet.$/;kq|/^\<have_cygwin\>/;'q;"	kind:pred
io.have_dotnet	io.m	/^:- pred have_dotnet is semidet.$/;kq|/^\<have_dotnet\>/;'q;"	kind:pred
io.have_dotnet_exec_permission	io.m	/^:- pred have_dotnet_exec_permission(io.res::out, io::di, io::uo) is det.$/;kq|/^\<have_dotnet_exec_permission\>/;'q;"	kind:pred	file:
io.have_file_ids	io.m	/^:- pred io.have_file_ids is semidet.$/;kq|/^\<io.have_file_ids\>/;'q;"	kind:pred
io.have_symlinks	io.m	/^:- pred io.have_symlinks is semidet.$/;kq|/^\<io.have_symlinks\>/;'q;"	kind:pred
io.have_win32	io.m	/^:- pred have_win32 is semidet.$/;kq|/^\<have_win32\>/;'q;"	kind:pred
io.ignore_whitespace	io.m	/^:- pred io.ignore_whitespace(io.input_stream::in, io.result::out,$/;kq|/^\<io.ignore_whitespace\>/;'q;"	kind:pred
io.ignore_whitespace	io.m	/^:- pred io.ignore_whitespace(io.result::out, io::di, io::uo) is det.$/;kq|/^\<io.ignore_whitespace\>/;'q;"	kind:pred
io.init_state	io.m	/^:- pred io.init_state(io::di, io::uo) is det.$/;kq|/^\<io.init_state\>/;'q;"	kind:pred
io.init_std_streams	io.m	/^:- pred init_std_streams(io::di, io::uo) is det.$/;kq|/^\<init_std_streams\>/;'q;"	kind:pred	file:
io.input	io.m	/^    --->    input$/;kq|-;/\<io.input\>/;'q;"	kind:cons
io.input_check_err	io.m	/^:- pred io.input_check_err(io.input_stream::in, io.res::out, io::di, io::uo)$/;kq|/^\<io.input_check_err\>/;'q;"	kind:pred	file:
io.input_clear_err	io.m	/^:- pred io.input_clear_err(io.input_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.input_clear_err\>/;'q;"	kind:pred	file:
io.input_stream	io.m	/^:- pred io.input_stream(io.input_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.input_stream\>/;'q;"	kind:pred
io.input_stream	io.m	/^:- type io.input_stream  ---> input_stream(io.stream).$/;kq|-;/\<io.input_stream\>/;'q;"	kind:cons	file:
io.input_stream	io.m	/^:- type io.input_stream  ---> input_stream(io.stream).$/;kq|-;/\<io.input_stream\>/;'q;"	kind:type	file:
io.input_stream_2	io.m	/^:- pred io.input_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.input_stream_2\>/;'q;"	kind:pred	file:
io.input_stream_file_size	io.m	/^:- pred io.input_stream_file_size(io.input_stream::in, int::out,$/;kq|/^\<io.input_stream_file_size\>/;'q;"	kind:pred	file:
io.input_stream_foldl	io.m	/^:- pred io.input_stream_foldl(io.input_stream, pred(char, T, T),$/;kq|/^\<io.input_stream_foldl\>/;'q;"	kind:pred
io.input_stream_foldl	io.m	/^:- pred io.input_stream_foldl(pred(char, T, T), T, io.maybe_partial_res(T),$/;kq|/^\<io.input_stream_foldl\>/;'q;"	kind:pred
io.input_stream_foldl2_io	io.m	/^:- pred io.input_stream_foldl2_io(io.input_stream,$/;kq|/^\<io.input_stream_foldl2_io\>/;'q;"	kind:pred
io.input_stream_foldl2_io	io.m	/^:- pred io.input_stream_foldl2_io(pred(char, T, T, io, io),$/;kq|/^\<io.input_stream_foldl2_io\>/;'q;"	kind:pred
io.input_stream_foldl_io	io.m	/^:- pred io.input_stream_foldl_io(io.input_stream, pred(char, io, io),$/;kq|/^\<io.input_stream_foldl_io\>/;'q;"	kind:pred
io.input_stream_foldl_io	io.m	/^:- pred io.input_stream_foldl_io(pred(char, io, io), io.res, io, io).$/;kq|/^\<io.input_stream_foldl_io\>/;'q;"	kind:pred
io.input_stream_info	io.m	/^:- func io.input_stream_info(io.stream_db, io.input_stream)$/;kq|/^\<io.input_stream_info\>/;'q;"	kind:func
io.input_stream_name	io.m	/^:- pred io.input_stream_name(io.input_stream::in, string::out,$/;kq|/^\<io.input_stream_name\>/;'q;"	kind:pred
io.input_stream_name	io.m	/^:- pred io.input_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.input_stream_name\>/;'q;"	kind:pred
io.insert_std_stream_names	io.m	/^:- pred io.insert_std_stream_names(io::di, io::uo) is det.$/;kq|/^\<io.insert_std_stream_names\>/;'q;"	kind:pred	file:
io.insert_stream_info	io.m	/^:- pred io.insert_stream_info(io.stream::in, stream_info::in,$/;kq|/^\<io.insert_stream_info\>/;'q;"	kind:pred	file:
io.io	io.m	/^:- type io.io == io.state.$/;kq|-;/\<io.io\>/;'q;"	kind:type
io.lock_globals	io.m	/^:- pred io.lock_globals(io::di, io::uo) is det.$/;kq|/^\<io.lock_globals\>/;'q;"	kind:pred	file:
io.lock_stream_db	io.m	/^:- pred io.lock_stream_db(io::di, io::uo) is det.$/;kq|/^\<io.lock_stream_db\>/;'q;"	kind:pred	file:
io.make_err_msg	io.m	/^:- pred io.make_err_msg(io.system_error::in, string::in, string::out,$/;kq|/^\<io.make_err_msg\>/;'q;"	kind:pred
io.make_err_msg	io.m	/^:- pred io.make_err_msg(string::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.make_err_msg\>/;'q;"	kind:pred	file:
io.make_io_error	io.m	/^:- func io.make_io_error(string) = io.error.$/;kq|/^\<io.make_io_error\>/;'q;"	kind:func
io.make_io_res_0_error	io.m	/^:- pred make_io_res_0_error(io.system_error::in, string::in, io.res::out,$/;kq|/^\<make_io_res_0_error\>/;'q;"	kind:pred	file:
io.make_io_res_0_error_msg	io.m	/^:- func make_io_res_0_error_msg(string) = io.res.$/;kq|/^\<make_io_res_0_error_msg\>/;'q;"	kind:func	file:
io.make_io_res_0_ok	io.m	/^:- func make_io_res_0_ok = io.res.$/;kq|/^\<make_io_res_0_ok\>/;'q;"	kind:func	file:
io.make_io_res_1_error_string	io.m	/^:- pred make_io_res_1_error_string(io.system_error::in,$/;kq|/^\<make_io_res_1_error_string\>/;'q;"	kind:pred	file:
io.make_io_res_1_ok_file_type	io.m	/^:- func make_io_res_1_ok_file_type(file_type) = io.res(file_type).$/;kq|/^\<make_io_res_1_ok_file_type\>/;'q;"	kind:func	file:
io.make_io_res_1_ok_string	io.m	/^:- func make_io_res_1_ok_string(string) = io.res(string).$/;kq|/^\<make_io_res_1_ok_string\>/;'q;"	kind:func	file:
io.make_maybe_win32_err_msg	io.m	/^:- pred io.make_maybe_win32_err_msg(io.system_error::in,$/;kq|/^\<io.make_maybe_win32_err_msg\>/;'q;"	kind:pred
io.make_symlink	io.m	/^:- pred io.make_symlink(string::in, string::in, io.res::out, io::di, io::uo)$/;kq|/^\<io.make_symlink\>/;'q;"	kind:pred
io.make_symlink_2	io.m	/^:- pred io.make_symlink_2(string::in, string::in, int::out,$/;kq|/^\<io.make_symlink_2\>/;'q;"	kind:pred	file:
io.make_temp	io.m	/^:- pred io.make_temp(string::in, string::in, string::out, io::di, io::uo)$/;kq|/^\<io.make_temp\>/;'q;"	kind:pred
io.make_temp	io.m	/^:- pred io.make_temp(string::out, io::di, io::uo) is det.$/;kq|/^\<io.make_temp\>/;'q;"	kind:pred
io.make_win32_err_msg	io.m	/^:- pred io.make_win32_err_msg(io.system_error::in,$/;kq|/^\<io.make_win32_err_msg\>/;'q;"	kind:pred
io.may_delete_stream_info	io.m	/^:- pred io.may_delete_stream_info(int::out, io::di, io::uo) is det.$/;kq|/^\<io.may_delete_stream_info\>/;'q;"	kind:pred	file:
io.maybe_delete_stream_info	io.m	/^:- pred io.maybe_delete_stream_info(io.stream::in, io::di, io::uo) is det.$/;kq|/^\<io.maybe_delete_stream_info\>/;'q;"	kind:pred	file:
io.maybe_partial_res	io.m	/^:- inst io.maybe_partial_res(T)$/;kq|-;/\<io.maybe_partial_res\>/;'q;"	kind:inst
io.maybe_partial_res	io.m	/^:- type io.maybe_partial_res(T)$/;kq|-;/\<io.maybe_partial_res\>/;'q;"	kind:type
io.maybe_source_name	io.m	/^:- func maybe_source_name(maybe(stream_info)) = string.$/;kq|/^\<maybe_source_name\>/;'q;"	kind:func	file:
io.maybe_stream_content	io.m	/^                maybe_stream_content    :: stream_content,$/;kq|-;/\<io.maybe_stream_content\>/;'q;"	kind:fld
io.maybe_stream_id	io.m	/^                maybe_stream_id         :: int,$/;kq|-;/\<io.maybe_stream_id\>/;'q;"	kind:fld
io.maybe_stream_info	io.m	/^:- func io.maybe_stream_info(io.stream_db, io.stream) = maybe_stream_info.$/;kq|/^\<io.maybe_stream_info\>/;'q;"	kind:func	file:
io.maybe_stream_info	io.m	/^:- type maybe_stream_info$/;kq|-;/\<io.maybe_stream_info\>/;'q;"	kind:type
io.maybe_stream_mode	io.m	/^                maybe_stream_mode       :: stream_mode,$/;kq|-;/\<io.maybe_stream_mode\>/;'q;"	kind:fld
io.maybe_stream_source	io.m	/^                maybe_stream_source     :: stream_source$/;kq|-;/\<io.maybe_stream_source\>/;'q;"	kind:fld
io.message_queue	io.m	/^    ;       message_queue$/;kq|-;/\<io.message_queue\>/;'q;"	kind:cons
io.more	io.m	/^    ;       more(T).$/;kq|-;/\<io.more\>/;'q;"	kind:cons	file:
io.more	io.m	/^    ;       more.$/;kq|-;/\<io.more\>/;'q;"	kind:cons	file:
io.name	io.m	/^    pred(name\/4) is io.binary_input_stream_name$/;kq|-;/\<io.name\>/;'q;"	kind:tcim	file:
io.name	io.m	/^    pred(name\/4) is io.binary_output_stream_name$/;kq|-;/\<io.name\>/;'q;"	kind:tcim	file:
io.name	io.m	/^    pred(name\/4) is io.input_stream_name$/;kq|-;/\<io.name\>/;'q;"	kind:tcim	file:
io.name	io.m	/^    pred(name\/4) is io.output_stream_name$/;kq|-;/\<io.name\>/;'q;"	kind:tcim	file:
io.named_pipe	io.m	/^    ;       named_pipe$/;kq|-;/\<io.named_pipe\>/;'q;"	kind:cons
io.nl	io.m	/^:- pred io.nl(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.nl\>/;'q;"	kind:pred
io.nl	io.m	/^:- pred io.nl(io::di, io::uo) is det.$/;kq|/^\<io.nl\>/;'q;"	kind:pred
io.ok	io.m	/^    --->    ok$/;kq|-;/\<io.ok\>/;'q;"	kind:cons
io.ok	io.m	/^    --->    ok$/;kq|-;/\<io.ok\>/;'q;"	kind:cons
io.ok	io.m	/^    --->    ok$/;kq|-;/\<io.ok\>/;'q;"	kind:cons	file:
io.ok	io.m	/^    --->    ok(T)$/;kq|-;/\<io.ok\>/;'q;"	kind:cons
io.ok	io.m	/^    --->    ok(T)$/;kq|-;/\<io.ok\>/;'q;"	kind:cons
io.ok	io.m	/^    --->    ok(T)$/;kq|-;/\<io.ok\>/;'q;"	kind:cons
io.ok	io.m	/^    --->    ok(T)$/;kq|-;/\<io.ok\>/;'q;"	kind:cons
io.ok	io.m	/^    --->    ok(T)$/;kq|-;/\<io.ok\>/;'q;"	kind:cons	file:
io.open_append	io.m	/^:- pred io.open_append(string::in, io.res(io.output_stream)::out,$/;kq|/^\<io.open_append\>/;'q;"	kind:pred
io.open_binary_append	io.m	/^:- pred io.open_binary_append(string::in,$/;kq|/^\<io.open_binary_append\>/;'q;"	kind:pred
io.open_binary_input	io.m	/^:- pred io.open_binary_input(string::in,$/;kq|/^\<io.open_binary_input\>/;'q;"	kind:pred
io.open_binary_output	io.m	/^:- pred io.open_binary_output(string::in,$/;kq|/^\<io.open_binary_output\>/;'q;"	kind:pred
io.open_input	io.m	/^:- pred io.open_input(string::in, io.res(io.input_stream)::out,$/;kq|/^\<io.open_input\>/;'q;"	kind:pred
io.open_output	io.m	/^:- pred io.open_output(string::in, io.res(io.output_stream)::out,$/;kq|/^\<io.open_output\>/;'q;"	kind:pred
io.output	io.m	/^    ;       output$/;kq|-;/\<io.output\>/;'q;"	kind:cons
io.output_clear_err	io.m	/^:- pred io.output_clear_err(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.output_clear_err\>/;'q;"	kind:pred	file:
io.output_stream	io.m	/^:- pred io.output_stream(io.output_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.output_stream\>/;'q;"	kind:pred
io.output_stream	io.m	/^:- type io.output_stream ---> output_stream(io.stream).$/;kq|-;/\<io.output_stream\>/;'q;"	kind:cons	file:
io.output_stream	io.m	/^:- type io.output_stream ---> output_stream(io.stream).$/;kq|-;/\<io.output_stream\>/;'q;"	kind:type	file:
io.output_stream_2	io.m	/^:- pred io.output_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.output_stream_2\>/;'q;"	kind:pred	file:
io.output_stream_file_size	io.m	/^:- pred io.output_stream_file_size(io.output_stream::in, int::out,$/;kq|/^\<io.output_stream_file_size\>/;'q;"	kind:pred	file:
io.output_stream_info	io.m	/^:- func io.output_stream_info(io.stream_db, io.output_stream)$/;kq|/^\<io.output_stream_info\>/;'q;"	kind:func
io.output_stream_name	io.m	/^:- pred io.output_stream_name(io.output_stream::in, string::out,$/;kq|/^\<io.output_stream_name\>/;'q;"	kind:pred
io.output_stream_name	io.m	/^:- pred io.output_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.output_stream_name\>/;'q;"	kind:pred
io.poly_type	io.m	/^:- type io.poly_type == string.poly_type.$/;kq|-;/\<io.poly_type\>/;'q;"	kind:type
io.posn	io.m	/^    --->    posn(int, int, int).$/;kq|-;/\<io.posn\>/;'q;"	kind:cons
io.posn	io.m	/^:- type posn$/;kq|-;/\<io.posn\>/;'q;"	kind:type
io.preopen	io.m	/^    ;       preopen.$/;kq|-;/\<io.preopen\>/;'q;"	kind:cons
io.print	io.m	/^:- pred io.print(T::in, io::di, io::uo) is det.$/;kq|/^\<io.print\>/;'q;"	kind:pred
io.print	io.m	/^:- pred io.print(io.output_stream, deconstruct.noncanon_handling, T, io, io).$/;kq|/^\<io.print\>/;'q;"	kind:pred
io.print	io.m	/^:- pred io.print(io.output_stream::in, T::in, io::di, io::uo) is det.$/;kq|/^\<io.print\>/;'q;"	kind:pred
io.print_cc	io.m	/^:- pred io.print_cc(T::in, io::di, io::uo) is cc_multi.$/;kq|/^\<io.print_cc\>/;'q;"	kind:pred
io.print_to_stream	io.m	/^:- pred io.print_to_stream(io.stream::in, T::in, io::di, io::uo) is det.$/;kq|/^\<io.print_to_stream\>/;'q;"	kind:pred	file:
io.process_read_term	io.m	/^:- pred io.process_read_term(read_term::in, int::in, io.read_result(T)::out)$/;kq|/^\<io.process_read_term\>/;'q;"	kind:pred	file:
io.progname	io.m	/^:- pred io.progname(string::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.progname\>/;'q;"	kind:pred
io.progname_base	io.m	/^:- pred io.progname_base(string::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.progname_base\>/;'q;"	kind:pred
io.put	io.m	/^    pred(put\/4) is io.write_bitmap$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.put	io.m	/^    pred(put\/4) is io.write_byte$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.put	io.m	/^    pred(put\/4) is io.write_char$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.put	io.m	/^    pred(put\/4) is io.write_float$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.put	io.m	/^    pred(put\/4) is io.write_int$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.put	io.m	/^    pred(put\/4) is io.write_string$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.put	io.m	/^    pred(put\/4) is stream.string_writer.write_univ$/;kq|-;/\<io.put\>/;'q;"	kind:tcim	file:
io.putback_byte	io.m	/^:- pred io.putback_byte(int::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_byte\>/;'q;"	kind:pred
io.putback_byte	io.m	/^:- pred io.putback_byte(io.binary_input_stream::in, int::in,$/;kq|/^\<io.putback_byte\>/;'q;"	kind:pred
io.putback_byte_2	io.m	/^:- pred io.putback_byte_2(io.stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_byte_2\>/;'q;"	kind:pred	file:
io.putback_char	io.m	/^:- pred io.putback_char(char::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_char\>/;'q;"	kind:pred
io.putback_char	io.m	/^:- pred io.putback_char(io.input_stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_char\>/;'q;"	kind:pred
io.putback_char_2	io.m	/^:- pred io.putback_char_2(io.stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_char_2\>/;'q;"	kind:pred	file:
io.putenv	io.m	/^:- impure pred io.putenv(string::in) is semidet.$/;kq|/^\<io.putenv\>/;'q;"	kind:pred	file:
io.read	io.m	/^    --->    read$/;kq|-;/\<io.read\>/;'q;"	kind:cons
io.read	io.m	/^:- pred io.read(io.input_stream::in, io.read_result(T)::out,$/;kq|/^\<io.read\>/;'q;"	kind:pred
io.read	io.m	/^:- pred io.read(io.read_result(T)::out, io::di, io::uo) is det.$/;kq|/^\<io.read\>/;'q;"	kind:pred
io.read_binary	io.m	/^:- pred io.read_binary(io.binary_input_stream::in, io.result(T)::out,$/;kq|/^\<io.read_binary\>/;'q;"	kind:pred
io.read_binary	io.m	/^:- pred io.read_binary(io.result(T)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_binary\>/;'q;"	kind:pred
io.read_binary_file	io.m	/^:- pred io.read_binary_file(io.binary_input_stream::in,$/;kq|/^\<io.read_binary_file\>/;'q;"	kind:pred
io.read_binary_file	io.m	/^:- pred io.read_binary_file(io.result(list(int))::out, io::di, io::uo) is det.$/;kq|/^\<io.read_binary_file\>/;'q;"	kind:pred
io.read_binary_file_2	io.m	/^:- pred io.read_binary_file_2(io.binary_input_stream::in, list(int)::in,$/;kq|/^\<io.read_binary_file_2\>/;'q;"	kind:pred	file:
io.read_binary_file_as_bitmap	io.m	/^:- pred io.read_binary_file_as_bitmap(io.binary_input_stream::in,$/;kq|/^\<io.read_binary_file_as_bitmap\>/;'q;"	kind:pred
io.read_binary_file_as_bitmap	io.m	/^:- pred io.read_binary_file_as_bitmap(io.res(bitmap)::out,$/;kq|/^\<io.read_binary_file_as_bitmap\>/;'q;"	kind:pred
io.read_bitmap	io.m	/^:- pred io.read_bitmap(bitmap::bitmap_di, bitmap::bitmap_uo,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
io.read_bitmap	io.m	/^:- pred io.read_bitmap(byte_index::in, num_bytes::in,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
io.read_bitmap	io.m	/^:- pred io.read_bitmap(io.binary_input_stream::in,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
io.read_bitmap	io.m	/^:- pred io.read_bitmap(io.binary_input_stream::in,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
io.read_byte	io.m	/^:- pred io.read_byte(io.binary_input_stream::in, io.result(int)::out,$/;kq|/^\<io.read_byte\>/;'q;"	kind:pred
io.read_byte	io.m	/^:- pred io.read_byte(io.result(int)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_byte\>/;'q;"	kind:pred
io.read_byte_val	io.m	/^:- pred io.read_byte_val(io.input_stream::in, int::out,$/;kq|/^\<io.read_byte_val\>/;'q;"	kind:pred	file:
io.read_byte_val_2	io.m	/^:- pred io.read_byte_val_2(io.stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.read_byte_val_2\>/;'q;"	kind:pred	file:
io.read_char	io.m	/^:- pred io.read_char(io.input_stream::in, io.result(char)::out,$/;kq|/^\<io.read_char\>/;'q;"	kind:pred
io.read_char	io.m	/^:- pred io.read_char(io.result(char)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_char\>/;'q;"	kind:pred
io.read_char_code	io.m	/^:- pred io.read_char_code(io.input_stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.read_char_code\>/;'q;"	kind:pred	file:
io.read_char_code_2	io.m	/^:- pred io.read_char_code_2(io.stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.read_char_code_2\>/;'q;"	kind:pred	file:
io.read_char_unboxed	io.m	/^:- pred io.read_char_unboxed(io.input_stream::in, io.result::out, char::out,$/;kq|/^\<io.read_char_unboxed\>/;'q;"	kind:pred
io.read_file	io.m	/^:- pred io.read_file(io.input_stream::in,$/;kq|/^\<io.read_file\>/;'q;"	kind:pred
io.read_file	io.m	/^:- pred io.read_file(io.maybe_partial_res(list(char))::out, io::di, io::uo)$/;kq|/^\<io.read_file\>/;'q;"	kind:pred
io.read_file_2	io.m	/^:- pred io.read_file_2(io.input_stream::in, list(char)::in,$/;kq|/^\<io.read_file_2\>/;'q;"	kind:pred	file:
io.read_file_as_string	io.m	/^:- pred io.read_file_as_string(io.input_stream::in,$/;kq|/^\<io.read_file_as_string\>/;'q;"	kind:pred
io.read_file_as_string	io.m	/^:- pred io.read_file_as_string(io.maybe_partial_res(string)::out,$/;kq|/^\<io.read_file_as_string\>/;'q;"	kind:pred
io.read_file_as_string_2	io.m	/^:- pred io.read_file_as_string_2(io.input_stream::in, buffer::buffer_di,$/;kq|/^\<io.read_file_as_string_2\>/;'q;"	kind:pred	file:
io.read_from_string	io.m	/^:- pred io.read_from_string(string::in, string::in, int::in,$/;kq|/^\<io.read_from_string\>/;'q;"	kind:pred
io.read_into_array	io.m	/^:- pred io.read_into_array(stream::in,$/;kq|/^\<io.read_into_array\>/;'q;"	kind:pred	file:
io.read_into_buffer	io.m	/^:- pred io.read_into_buffer(stream::in, buffer::buffer_di, buffer::buffer_uo,$/;kq|/^\<io.read_into_buffer\>/;'q;"	kind:pred	file:
io.read_line	io.m	/^:- pred io.read_line(io.input_stream::in, io.result(list(char))::out,$/;kq|/^\<io.read_line\>/;'q;"	kind:pred
io.read_line	io.m	/^:- pred io.read_line(io.result(list(char))::out, io::di, io::uo) is det.$/;kq|/^\<io.read_line\>/;'q;"	kind:pred
io.read_line_2	io.m	/^:- pred io.read_line_2(io.input_stream::in, list(char)::out,$/;kq|/^\<io.read_line_2\>/;'q;"	kind:pred	file:
io.read_line_as_string	io.m	/^:- pred io.read_line_as_string(io.input_stream::in, io.result(string)::out,$/;kq|/^\<io.read_line_as_string\>/;'q;"	kind:pred
io.read_line_as_string	io.m	/^:- pred io.read_line_as_string(io.result(string)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_line_as_string\>/;'q;"	kind:pred
io.read_line_as_string_2	io.m	/^:- pred io.read_line_as_string_2(io.stream::in, bool::in, int::out,$/;kq|/^\<io.read_line_as_string_2\>/;'q;"	kind:pred	file:
io.read_result	io.m	/^:- type io.read_result(T)$/;kq|-;/\<io.read_result\>/;'q;"	kind:type
io.read_symlink	io.m	/^:- pred io.read_symlink(string::in, io.res(string)::out, io::di, io::uo)$/;kq|/^\<io.read_symlink\>/;'q;"	kind:pred
io.read_symlink_2	io.m	/^:- pred io.read_symlink_2(string::in, string::out, int::out,$/;kq|/^\<io.read_symlink_2\>/;'q;"	kind:pred	file:
io.read_word	io.m	/^:- pred io.read_word(io.input_stream::in, io.result(list(char))::out,$/;kq|/^\<io.read_word\>/;'q;"	kind:pred
io.read_word	io.m	/^:- pred io.read_word(io.result(list(char))::out, io::di, io::uo) is det.$/;kq|/^\<io.read_word\>/;'q;"	kind:pred
io.read_word_2	io.m	/^:- pred io.read_word_2(io.input_stream::in, io.result(list(char))::out,$/;kq|/^\<io.read_word_2\>/;'q;"	kind:pred	file:
io.regular_file	io.m	/^    --->    regular_file$/;kq|-;/\<io.regular_file\>/;'q;"	kind:cons
io.remove_directory_entry	io.m	/^:- pred remove_directory_entry(string::in, string::in, file_type::in,$/;kq|/^\<remove_directory_entry\>/;'q;"	kind:pred	file:
io.remove_file	io.m	/^:- pred io.remove_file(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.remove_file\>/;'q;"	kind:pred
io.remove_file_2	io.m	/^:- pred io.remove_file_2(string::in, int::out, string::out, io::di, io::uo)$/;kq|/^\<io.remove_file_2\>/;'q;"	kind:pred	file:
io.remove_file_recursively	io.m	/^:- pred remove_file_recursively(string::in, io.res::out, io::di, io::uo)$/;kq|/^\<remove_file_recursively\>/;'q;"	kind:pred
io.rename_file	io.m	/^:- pred io.rename_file(string::in, string::in, io.res::out, io::di, io::uo)$/;kq|/^\<io.rename_file\>/;'q;"	kind:pred
io.rename_file_2	io.m	/^:- pred io.rename_file_2(string::in, string::in, int::out, string::out,$/;kq|/^\<io.rename_file_2\>/;'q;"	kind:pred	file:
io.report_stats	io.m	/^:- pred io.report_stats(io::di, io::uo) is det.$/;kq|/^\<io.report_stats\>/;'q;"	kind:pred
io.report_stats	io.m	/^:- pred io.report_stats(string::in, io::di, io::uo) is det.$/;kq|/^\<io.report_stats\>/;'q;"	kind:pred
io.res	io.m	/^:- type io.res$/;kq|-;/\<io.res\>/;'q;"	kind:type
io.res	io.m	/^:- type io.res(T)$/;kq|-;/\<io.res\>/;'q;"	kind:type
io.res_to_stream_res	io.m	/^:- func io.res_to_stream_res(io.res) = stream.res(io.error).$/;kq|/^\<io.res_to_stream_res\>/;'q;"	kind:func	file:
io.resize_buffer	io.m	/^:- pred io.resize_buffer(int::in, int::in,$/;kq|/^\<io.resize_buffer\>/;'q;"	kind:pred	file:
io.result	io.m	/^:- type io.result$/;kq|-;/\<io.result\>/;'q;"	kind:type
io.result	io.m	/^:- type io.result(T)$/;kq|-;/\<io.result\>/;'q;"	kind:type
io.result_to_stream_result	io.m	/^:- func io.result_to_stream_result(io.result(T)) = stream.result(T, io.error).$/;kq|/^\<io.result_to_stream_result\>/;'q;"	kind:func	file:
io.see	io.m	/^:- pred io.see(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.see\>/;'q;"	kind:pred
io.see_binary	io.m	/^:- pred io.see_binary(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.see_binary\>/;'q;"	kind:pred
io.seek_binary_2	io.m	/^:- pred io.seek_binary_2(io.stream::in, int::in, int::in,$/;kq|/^\<io.seek_binary_2\>/;'q;"	kind:pred	file:
io.seek_binary_input	io.m	/^:- pred io.seek_binary_input(io.binary_input_stream::in, io.whence::in,$/;kq|/^\<io.seek_binary_input\>/;'q;"	kind:pred
io.seek_binary_output	io.m	/^:- pred io.seek_binary_output(io.binary_output_stream::in, io.whence::in,$/;kq|/^\<io.seek_binary_output\>/;'q;"	kind:pred
io.seen	io.m	/^:- pred io.seen(io::di, io::uo) is det.$/;kq|/^\<io.seen\>/;'q;"	kind:pred
io.seen_binary	io.m	/^:- pred io.seen_binary(io::di, io::uo) is det.$/;kq|/^\<io.seen_binary\>/;'q;"	kind:pred
io.semaphore	io.m	/^    ;       semaphore$/;kq|-;/\<io.semaphore\>/;'q;"	kind:cons
io.set	io.m	/^    --->    set$/;kq|-;/\<io.set\>/;'q;"	kind:cons
io.set_binary_input_stream	io.m	/^:- pred io.set_binary_input_stream(io.binary_input_stream::in,$/;kq|/^\<io.set_binary_input_stream\>/;'q;"	kind:pred
io.set_binary_input_stream_2	io.m	/^:- pred io.set_binary_input_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_binary_input_stream_2\>/;'q;"	kind:pred	file:
io.set_binary_output_stream	io.m	/^:- pred io.set_binary_output_stream(io.binary_output_stream::in,$/;kq|/^\<io.set_binary_output_stream\>/;'q;"	kind:pred
io.set_binary_output_stream_2	io.m	/^:- pred io.set_binary_output_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_binary_output_stream_2\>/;'q;"	kind:pred	file:
io.set_environment_var	io.m	/^:- pred io.set_environment_var(string::in, string::in, io::di, io::uo) is det.$/;kq|/^\<io.set_environment_var\>/;'q;"	kind:pred
io.set_exit_status	io.m	/^:- pred io.set_exit_status(int::in, io::di, io::uo) is det.$/;kq|/^\<io.set_exit_status\>/;'q;"	kind:pred
io.set_globals	io.m	/^:- pred io.set_globals(univ::in, io::di, io::uo) is det.$/;kq|/^\<io.set_globals\>/;'q;"	kind:pred
io.set_input_stream	io.m	/^:- pred io.set_input_stream(io.input_stream::in, io.input_stream::out,$/;kq|/^\<io.set_input_stream\>/;'q;"	kind:pred
io.set_input_stream_2	io.m	/^:- pred io.set_input_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_input_stream_2\>/;'q;"	kind:pred	file:
io.set_line	io.m	/^    pred(set_line\/4) is io.set_line_number$/;kq|-;/\<io.set_line\>/;'q;"	kind:tcim	file:
io.set_line	io.m	/^    pred(set_line\/4) is io.set_output_line_number$/;kq|-;/\<io.set_line\>/;'q;"	kind:tcim	file:
io.set_line_number	io.m	/^:- pred io.set_line_number(int::in, io::di, io::uo) is det.$/;kq|/^\<io.set_line_number\>/;'q;"	kind:pred
io.set_line_number	io.m	/^:- pred io.set_line_number(io.input_stream::in, int::in, io::di, io::uo)$/;kq|/^\<io.set_line_number\>/;'q;"	kind:pred
io.set_line_number_2	io.m	/^:- pred io.set_line_number_2(io.stream::in, int::in, io::di, io::uo)$/;kq|/^\<io.set_line_number_2\>/;'q;"	kind:pred	file:
io.set_op_table	io.m	/^:- pred io.set_op_table(ops.table::di, io::di, io::uo) is det.$/;kq|/^\<io.set_op_table\>/;'q;"	kind:pred
io.set_output_line_number	io.m	/^:- pred io.set_output_line_number(int::in, io::di, io::uo) is det.$/;kq|/^\<io.set_output_line_number\>/;'q;"	kind:pred
io.set_output_line_number	io.m	/^:- pred io.set_output_line_number(io.output_stream::in, int::in,$/;kq|/^\<io.set_output_line_number\>/;'q;"	kind:pred
io.set_output_line_number_2	io.m	/^:- pred io.set_output_line_number_2(io.stream::in, int::in,$/;kq|/^\<io.set_output_line_number_2\>/;'q;"	kind:pred	file:
io.set_output_stream	io.m	/^:- pred io.set_output_stream(io.output_stream::in, io.output_stream::out,$/;kq|/^\<io.set_output_stream\>/;'q;"	kind:pred
io.set_output_stream_2	io.m	/^:- pred io.set_output_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_output_stream_2\>/;'q;"	kind:pred	file:
io.set_stream_db	io.m	/^:- pred io.set_stream_db(io.stream_db::in, io::di, io::uo) is det.$/;kq|/^\<io.set_stream_db\>/;'q;"	kind:pred	file:
io.setenv	io.m	/^:- impure pred io.setenv(string::in, string::in) is semidet.$/;kq|/^\<io.setenv\>/;'q;"	kind:pred	file:
io.shared_memory	io.m	/^    ;       shared_memory$/;kq|-;/\<io.shared_memory\>/;'q;"	kind:cons
io.should_reduce_stack_usage	io.m	/^:- pred should_reduce_stack_usage(bool::out) is det.$/;kq|/^\<should_reduce_stack_usage\>/;'q;"	kind:pred	file:
io.signalled	io.m	/^    ;       signalled(int).$/;kq|-;/\<io.signalled\>/;'q;"	kind:cons
io.socket	io.m	/^    ;       socket$/;kq|-;/\<io.socket\>/;'q;"	kind:cons
io.source_name	io.m	/^:- func source_name(stream_source) = string.$/;kq|/^\<source_name\>/;'q;"	kind:func	file:
io.stderr	io.m	/^    ;       stderr.$/;kq|-;/\<io.stderr\>/;'q;"	kind:cons
io.stderr_stream	io.m	/^:- func io.stderr_stream = io.output_stream.$/;kq|/^\<io.stderr_stream\>/;'q;"	kind:func
io.stderr_stream	io.m	/^:- pred io.stderr_stream(io.output_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stderr_stream\>/;'q;"	kind:pred
io.stderr_stream_2	io.m	/^:- func io.stderr_stream_2 = io.stream.$/;kq|/^\<io.stderr_stream_2\>/;'q;"	kind:func	file:
io.stderr_stream_2	io.m	/^:- pred io.stderr_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stderr_stream_2\>/;'q;"	kind:pred	file:
io.stdin	io.m	/^    ;       stdin$/;kq|-;/\<io.stdin\>/;'q;"	kind:cons
io.stdin_binary_stream	io.m	/^:- pred io.stdin_binary_stream(io.binary_input_stream::out,$/;kq|/^\<io.stdin_binary_stream\>/;'q;"	kind:pred
io.stdin_binary_stream_2	io.m	/^:- pred io.stdin_binary_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdin_binary_stream_2\>/;'q;"	kind:pred	file:
io.stdin_stream	io.m	/^:- func io.stdin_stream = io.input_stream.$/;kq|/^\<io.stdin_stream\>/;'q;"	kind:func
io.stdin_stream	io.m	/^:- pred io.stdin_stream(io.input_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdin_stream\>/;'q;"	kind:pred
io.stdin_stream_2	io.m	/^:- func io.stdin_stream_2 = io.stream.$/;kq|/^\<io.stdin_stream_2\>/;'q;"	kind:func	file:
io.stdin_stream_2	io.m	/^:- pred io.stdin_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdin_stream_2\>/;'q;"	kind:pred	file:
io.stdout	io.m	/^    ;       stdout$/;kq|-;/\<io.stdout\>/;'q;"	kind:cons
io.stdout_binary_stream	io.m	/^:- pred io.stdout_binary_stream(io.binary_output_stream::out,$/;kq|/^\<io.stdout_binary_stream\>/;'q;"	kind:pred
io.stdout_binary_stream_2	io.m	/^:- pred io.stdout_binary_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdout_binary_stream_2\>/;'q;"	kind:pred	file:
io.stdout_stream	io.m	/^:- func io.stdout_stream = io.output_stream.$/;kq|/^\<io.stdout_stream\>/;'q;"	kind:func
io.stdout_stream	io.m	/^:- pred io.stdout_stream(io.output_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdout_stream\>/;'q;"	kind:pred
io.stdout_stream_2	io.m	/^:- func io.stdout_stream_2 = io.stream.$/;kq|/^\<io.stdout_stream_2\>/;'q;"	kind:func	file:
io.stdout_stream_2	io.m	/^:- pred io.stdout_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdout_stream_2\>/;'q;"	kind:pred	file:
io.stream	io.m	/^    --->    stream($/;kq|-;/\<io.stream\>/;'q;"	kind:cons
io.stream	io.m	/^    --->    stream($/;kq|-;/\<io.stream\>/;'q;"	kind:cons
io.stream	io.m	/^    --->    stream(c_pointer).$/;kq|-;/\<io.stream\>/;'q;"	kind:cons	file:
io.stream	io.m	/^:- type io.stream$/;kq|-;/\<io.stream\>/;'q;"	kind:type	file:
io.stream.bulk_reader	io.m	/^:- instance stream.bulk_reader(io.binary_input_stream, int,$/;kq|-;/\<io.stream.bulk_reader\>/;'q;"	kind:tci
io.stream.bulk_reader	io.m	/^:- instance stream.bulk_reader(io.binary_input_stream, int,$/;kq|-;/\<io.stream.bulk_reader\>/;'q;"	kind:tci	file:
io.stream.error	io.m	/^:- instance stream.error(io.error) where [$/;kq|-;/\<io.stream.error\>/;'q;"	kind:tci	file:
io.stream.error_message	io.m	/^    func(stream.error_message\/1) is io.error_message$/;kq|-;/\<io.stream.error_message\>/;'q;"	kind:tcim	file:
io.stream.input	io.m	/^:- instance stream.input(io.binary_input_stream, io)$/;kq|-;/\<io.stream.input\>/;'q;"	kind:tci	file:
io.stream.line_oriented	io.m	/^:- instance stream.line_oriented(io.input_stream, io) where$/;kq|-;/\<io.stream.line_oriented\>/;'q;"	kind:tci	file:
io.stream.line_oriented	io.m	/^:- instance stream.line_oriented(io.output_stream, io) where$/;kq|-;/\<io.stream.line_oriented\>/;'q;"	kind:tci	file:
io.stream.output	io.m	/^:- instance stream.output(io.binary_output_stream, io)$/;kq|-;/\<io.stream.output\>/;'q;"	kind:tci	file:
io.stream.output	io.m	/^:- instance stream.output(io.output_stream, io) where [$/;kq|-;/\<io.stream.output\>/;'q;"	kind:tci	file:
io.stream.putback	io.m	/^:- instance stream.putback(io.binary_input_stream, int, io, io.error)$/;kq|-;/\<io.stream.putback\>/;'q;"	kind:tci	file:
io.stream.putback	io.m	/^:- instance stream.putback(io.input_stream, char, io, io.error) where$/;kq|-;/\<io.stream.putback\>/;'q;"	kind:tci	file:
io.stream.reader	io.m	/^:- instance stream.reader(io.binary_input_stream, int, io, io.error)$/;kq|-;/\<io.stream.reader\>/;'q;"	kind:tci	file:
io.stream.reader	io.m	/^:- instance stream.reader(io.input_stream, char, io, io.error)$/;kq|-;/\<io.stream.reader\>/;'q;"	kind:tci	file:
io.stream.reader	io.m	/^:- instance stream.reader(io.input_stream, line, io, io.error)$/;kq|-;/\<io.stream.reader\>/;'q;"	kind:tci	file:
io.stream.reader	io.m	/^:- instance stream.reader(io.input_stream, text_file, io, io.error)$/;kq|-;/\<io.stream.reader\>/;'q;"	kind:tci	file:
io.stream.seekable	io.m	/^:- instance stream.seekable(io.binary_input_stream, io)$/;kq|-;/\<io.stream.seekable\>/;'q;"	kind:tci	file:
io.stream.seekable	io.m	/^:- instance stream.seekable(io.binary_output_stream, io)$/;kq|-;/\<io.stream.seekable\>/;'q;"	kind:tci	file:
io.stream.stream	io.m	/^:- instance stream.stream(io.binary_input_stream, io)$/;kq|-;/\<io.stream.stream\>/;'q;"	kind:tci	file:
io.stream.stream	io.m	/^:- instance stream.stream(io.binary_output_stream, io)$/;kq|-;/\<io.stream.stream\>/;'q;"	kind:tci	file:
io.stream.stream	io.m	/^:- instance stream.stream(io.input_stream, io) where [$/;kq|-;/\<io.stream.stream\>/;'q;"	kind:tci	file:
io.stream.stream	io.m	/^:- instance stream.stream(io.output_stream, io) where [$/;kq|-;/\<io.stream.stream\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.binary_output_stream, bitmap, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.binary_output_stream, bitmap.slice, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.binary_output_stream, byte, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.output_stream, char, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.output_stream, float, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.output_stream, int, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.output_stream, string, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream.writer	io.m	/^:- instance stream.writer(io.output_stream, univ, io)$/;kq|-;/\<io.stream.writer\>/;'q;"	kind:tci	file:
io.stream_content	io.m	/^                stream_content          :: stream_content,$/;kq|-;/\<io.stream_content\>/;'q;"	kind:fld
io.stream_content	io.m	/^:- type stream_content$/;kq|-;/\<io.stream_content\>/;'q;"	kind:type
io.stream_db	io.m	/^:- type io.stream_db ==    map(io.stream_id, stream_info).$/;kq|-;/\<io.stream_db\>/;'q;"	kind:type
io.stream_file_size	io.m	/^:- pred io.stream_file_size(stream::in, int::out, io::di, io::uo) is det.$/;kq|/^\<io.stream_file_size\>/;'q;"	kind:pred	file:
io.stream_id	io.m	/^                stream_id               :: int,$/;kq|-;/\<io.stream_id\>/;'q;"	kind:fld
io.stream_id	io.m	/^:- type io.stream_id == int.$/;kq|-;/\<io.stream_id\>/;'q;"	kind:type	file:
io.stream_info	io.m	/^:- pred io.stream_info(io.stream::in, maybe(stream_info)::out,$/;kq|/^\<io.stream_info\>/;'q;"	kind:pred	file:
io.stream_info	io.m	/^:- type stream_info$/;kq|-;/\<io.stream_info\>/;'q;"	kind:type
io.stream_mode	io.m	/^                stream_mode             :: stream_mode,$/;kq|-;/\<io.stream_mode\>/;'q;"	kind:fld
io.stream_mode	io.m	/^:- type stream_mode$/;kq|-;/\<io.stream_mode\>/;'q;"	kind:type
io.stream_name	io.m	/^:- pred io.stream_name(io.stream::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.stream_name\>/;'q;"	kind:pred	file:
io.stream_putback	io.m	/^:- type io.stream_putback ==  map(io.stream_id, list(char)).$/;kq|-;/\<io.stream_putback\>/;'q;"	kind:type	file:
io.stream_source	io.m	/^                stream_source           :: stream_source$/;kq|-;/\<io.stream_source\>/;'q;"	kind:fld
io.stream_source	io.m	/^:- type stream_source$/;kq|-;/\<io.stream_source\>/;'q;"	kind:type
io.stream_whence_to_io_whence	io.m	/^:- func stream_whence_to_io_whence(stream.whence) = io.whence.$/;kq|/^\<stream_whence_to_io_whence\>/;'q;"	kind:func	file:
io.symbolic_link	io.m	/^    ;       symbolic_link$/;kq|-;/\<io.symbolic_link\>/;'q;"	kind:cons
io.system_result	io.m	/^:- type io.system_result$/;kq|-;/\<io.system_result\>/;'q;"	kind:type
io.tell	io.m	/^:- pred io.tell(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.tell\>/;'q;"	kind:pred
io.tell_binary	io.m	/^:- pred io.tell_binary(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.tell_binary\>/;'q;"	kind:pred
io.text	io.m	/^    --->    text$/;kq|-;/\<io.text\>/;'q;"	kind:cons
io.text_input_stream	io.m	/^:- type io.text_input_stream == io.input_stream.$/;kq|-;/\<io.text_input_stream\>/;'q;"	kind:type
io.text_output_stream	io.m	/^:- type io.text_output_stream == io.output_stream.$/;kq|-;/\<io.text_output_stream\>/;'q;"	kind:type
io.throw_io_error	io.m	/^:- pred throw_io_error(string::in) is erroneous.$/;kq|/^\<throw_io_error\>/;'q;"	kind:pred	file:
io.told	io.m	/^:- pred io.told(io::di, io::uo) is det.$/;kq|/^\<io.told\>/;'q;"	kind:pred
io.told_binary	io.m	/^:- pred io.told_binary(io::di, io::uo) is det.$/;kq|/^\<io.told_binary\>/;'q;"	kind:pred
io.unget	io.m	/^    pred(unget\/4) is io.putback_byte$/;kq|-;/\<io.unget\>/;'q;"	kind:tcim	file:
io.unget	io.m	/^    pred(unget\/4) is io.putback_char$/;kq|-;/\<io.unget\>/;'q;"	kind:tcim	file:
io.uniq_buffer	io.m	/^:- inst uniq_buffer == bound(buffer(uniq_array)).$/;kq|-;/\<io.uniq_buffer\>/;'q;"	kind:inst	file:
io.unknown	io.m	/^    ;       unknown.$/;kq|-;/\<io.unknown\>/;'q;"	kind:cons
io.unknown_stream	io.m	/^    ;       unknown_stream.$/;kq|-;/\<io.unknown_stream\>/;'q;"	kind:cons
io.unlock_globals	io.m	/^:- impure pred io.unlock_globals is det.$/;kq|/^\<io.unlock_globals\>/;'q;"	kind:pred	file:
io.unlock_globals	io.m	/^:- pred io.unlock_globals(io::di, io::uo) is det.$/;kq|/^\<io.unlock_globals\>/;'q;"	kind:pred	file:
io.unlock_stream_db	io.m	/^:- pred io.unlock_stream_db(io::di, io::uo) is det.$/;kq|/^\<io.unlock_stream_db\>/;'q;"	kind:pred	file:
io.unsafe_get_globals	io.m	/^:- pred io.unsafe_get_globals(univ::out, io::di, io::uo) is det.$/;kq|/^\<io.unsafe_get_globals\>/;'q;"	kind:pred	file:
io.unsafe_set_globals	io.m	/^:- pred io.unsafe_set_globals(univ::in, io::di, io::uo) is det.$/;kq|/^\<io.unsafe_set_globals\>/;'q;"	kind:pred	file:
io.update_globals	io.m	/^:- pred io.update_globals(pred(univ, univ)::in(pred(in, out) is det),$/;kq|/^\<io.update_globals\>/;'q;"	kind:pred
io.whence	io.m	/^:- type io.whence$/;kq|-;/\<io.whence\>/;'q;"	kind:type
io.whence_to_int	io.m	/^:- pred whence_to_int(io.whence::in, int::out) is det.$/;kq|/^\<whence_to_int\>/;'q;"	kind:pred	file:
io.write	io.m	/^    ;       write$/;kq|-;/\<io.write\>/;'q;"	kind:cons
io.write	io.m	/^:- pred io.write(T::in, io::di, io::uo) is det.$/;kq|/^\<io.write\>/;'q;"	kind:pred
io.write	io.m	/^:- pred io.write(io.output_stream, deconstruct.noncanon_handling, T, io, io).$/;kq|/^\<io.write\>/;'q;"	kind:pred
io.write	io.m	/^:- pred io.write(io.output_stream::in, T::in, io::di, io::uo) is det.$/;kq|/^\<io.write\>/;'q;"	kind:pred
io.write_binary	io.m	/^:- pred io.write_binary(T::in, io::di, io::uo) is det.$/;kq|/^\<io.write_binary\>/;'q;"	kind:pred
io.write_binary	io.m	/^:- pred io.write_binary(io.binary_output_stream::in, T::in, io::di, io::uo)$/;kq|/^\<io.write_binary\>/;'q;"	kind:pred
io.write_bitmap	io.m	/^:- pred io.write_bitmap(bitmap, int, int, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
io.write_bitmap	io.m	/^:- pred io.write_bitmap(bitmap, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
io.write_bitmap	io.m	/^:- pred io.write_bitmap(io.binary_output_stream, bitmap, int, int, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
io.write_bitmap	io.m	/^:- pred io.write_bitmap(io.binary_output_stream, bitmap, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
io.write_byte	io.m	/^:- pred io.write_byte(int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_byte\>/;'q;"	kind:pred
io.write_byte	io.m	/^:- pred io.write_byte(io.binary_output_stream::in, int::in, io::di, io::uo)$/;kq|/^\<io.write_byte\>/;'q;"	kind:pred
io.write_byte_2	io.m	/^:- pred io.write_byte_2(io.stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_byte_2\>/;'q;"	kind:pred	file:
io.write_cc	io.m	/^:- pred io.write_cc(T::in, io::di, io::uo) is cc_multi.$/;kq|/^\<io.write_cc\>/;'q;"	kind:pred
io.write_char	io.m	/^:- pred io.write_char(char::in, io::di, io::uo) is det.$/;kq|/^\<io.write_char\>/;'q;"	kind:pred
io.write_char	io.m	/^:- pred io.write_char(io.output_stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.write_char\>/;'q;"	kind:pred
io.write_char_2	io.m	/^:- pred io.write_char_2(io.stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.write_char_2\>/;'q;"	kind:pred	file:
io.write_float	io.m	/^:- pred io.write_float(float::in, io::di, io::uo) is det.$/;kq|/^\<io.write_float\>/;'q;"	kind:pred
io.write_float	io.m	/^:- pred io.write_float(io.output_stream::in, float::in, io::di, io::uo)$/;kq|/^\<io.write_float\>/;'q;"	kind:pred
io.write_float_2	io.m	/^:- pred io.write_float_2(io.stream::in, float::in, io::di, io::uo) is det.$/;kq|/^\<io.write_float_2\>/;'q;"	kind:pred	file:
io.write_int	io.m	/^:- pred io.write_int(int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_int\>/;'q;"	kind:pred
io.write_int	io.m	/^:- pred io.write_int(io.output_stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_int\>/;'q;"	kind:pred
io.write_int_2	io.m	/^:- pred io.write_int_2(io.stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_int_2\>/;'q;"	kind:pred	file:
io.write_list	io.m	/^:- pred io.write_list(io.output_stream, list(T), string,$/;kq|/^\<io.write_list\>/;'q;"	kind:pred
io.write_list	io.m	/^:- pred io.write_list(list(T), string, pred(T, io, io), io, io).$/;kq|/^\<io.write_list\>/;'q;"	kind:pred
io.write_many	io.m	/^:- pred io.write_many(io.output_stream::in, list(io.poly_type)::in,$/;kq|/^\<io.write_many\>/;'q;"	kind:pred
io.write_many	io.m	/^:- pred io.write_many(list(io.poly_type)::in, io::di, io::uo) is det.$/;kq|/^\<io.write_many\>/;'q;"	kind:pred
io.write_string	io.m	/^:- pred io.write_string(io.output_stream::in, string::in, io::di, io::uo)$/;kq|/^\<io.write_string\>/;'q;"	kind:pred
io.write_string	io.m	/^:- pred io.write_string(string::in, io::di, io::uo) is det.$/;kq|/^\<io.write_string\>/;'q;"	kind:pred
io.write_string_2	io.m	/^:- pred io.write_string_2(io.stream::in, string::in, io::di, io::uo) is det.$/;kq|/^\<io.write_string_2\>/;'q;"	kind:pred	file:
io.write_strings	io.m	/^:- pred io.write_strings(io.output_stream::in, list(string)::in,$/;kq|/^\<io.write_strings\>/;'q;"	kind:pred
io.write_strings	io.m	/^:- pred io.write_strings(list(string)::in, io::di, io::uo) is det.$/;kq|/^\<io.write_strings\>/;'q;"	kind:pred
io_error	io.m	/^    --->    io_error(string).       % This is subject to change.$/;kq|-;/\<io_error\>/;'q;"	kind:cons	file:
io_error	lexer.m	/^    ;       io_error(io.error) % error reading from the input stream$/;kq|-;/\<io_error\>/;'q;"	kind:cons
io_mutvar	store.m	/^:- type io_mutvar(T) == generic_mutvar(T, io.state).$/;kq|-;/\<io_mutvar\>/;'q;"	kind:type
io_read_buffer	bit_buffer.read.m	/^:- type io_read_buffer ==$/;kq|-;/\<io_read_buffer\>/;'q;"	kind:type
io_ref	store.m	/^:- type io_ref(T, S) == generic_ref(T, io.state).$/;kq|-;/\<io_ref\>/;'q;"	kind:type
io_write_buffer	bit_buffer.write.m	/^:- type io_write_buffer == write_buffer(io.binary_output_stream, io.state).$/;kq|-;/\<io_write_buffer\>/;'q;"	kind:type
is	int.m	/^:- pred is(T, T) is det.$/;kq|/^\<is\>/;'q;"	kind:pred
is	prolog.m	/^:- pred is(T, T) is det.        % In Mercury, just use =$/;kq|/^\<is\>/;'q;"	kind:pred
is_active	term_size_prof_builtin.m	/^    ;       is_active.$/;kq|-;/\<is_active\>/;'q;"	kind:cons
is_all_alnum_or_underscore	string.m	/^:- pred string.is_all_alnum_or_underscore(string::in) is semidet.$/;kq|/^\<string.is_all_alnum_or_underscore\>/;'q;"	kind:pred
is_all_alpha	string.m	/^:- pred string.is_all_alpha(string::in) is semidet.$/;kq|/^\<string.is_all_alpha\>/;'q;"	kind:pred
is_all_alpha_or_underscore	string.m	/^:- pred string.is_all_alpha_or_underscore(string::in) is semidet.$/;kq|/^\<string.is_all_alpha_or_underscore\>/;'q;"	kind:pred
is_all_digits	string.m	/^:- pred string.is_all_digits(string::in) is semidet.$/;kq|/^\<string.is_all_digits\>/;'q;"	kind:pred
is_alnum	char.m	/^:- pred char.is_alnum(char::in) is semidet.$/;kq|/^\<char.is_alnum\>/;'q;"	kind:pred
is_alnum_or_underscore	char.m	/^:- pred char.is_alnum_or_underscore(char::in) is semidet.$/;kq|/^\<char.is_alnum_or_underscore\>/;'q;"	kind:pred
is_alpha	char.m	/^:- pred char.is_alpha(char::in) is semidet.$/;kq|/^\<char.is_alpha\>/;'q;"	kind:pred
is_alpha_or_underscore	char.m	/^:- pred char.is_alpha_or_underscore(char::in) is semidet.$/;kq|/^\<char.is_alpha_or_underscore\>/;'q;"	kind:pred
is_array	term_to_xml.m	/^:- pred is_array(type_desc::in, pseudo_type_desc::out) is semidet.$/;kq|/^\<is_array\>/;'q;"	kind:pred	file:
is_binary_digit	char.m	/^:- pred char.is_binary_digit(char::in) is semidet.$/;kq|/^\<char.is_binary_digit\>/;'q;"	kind:pred
is_clear	bitmap.m	/^:- pred is_clear(bitmap, bit_index).$/;kq|/^\<is_clear\>/;'q;"	kind:pred
is_clear	version_bitmap.m	/^:- pred is_clear(version_bitmap::in, int::in) is semidet.$/;kq|/^\<is_clear\>/;'q;"	kind:pred
is_dag	digraph.m	/^:- pred digraph.is_dag(digraph(T)::in) is semidet.$/;kq|/^\<digraph.is_dag\>/;'q;"	kind:pred
is_dag_2	digraph.m	/^:- pred digraph.is_dag_2(digraph(T)::in, list(digraph_key(T))::in,$/;kq|/^\<digraph.is_dag_2\>/;'q;"	kind:pred	file:
is_decimal_point	string.m	/^:- pred is_decimal_point(char :: in) is semidet.$/;kq|/^\<is_decimal_point\>/;'q;"	kind:pred	file:
is_digit	char.m	/^:- pred char.is_digit(char::in) is semidet.$/;kq|/^\<char.is_digit\>/;'q;"	kind:pred
is_directory_separator	dir.m	/^:- pred dir.is_directory_separator(character).$/;kq|/^\<dir.is_directory_separator\>/;'q;"	kind:pred
is_directory_separator_semidet	dir.m	/^:- pred dir.is_directory_separator_semidet(char::in) is semidet.$/;kq|/^\<dir.is_directory_separator_semidet\>/;'q;"	kind:pred	file:
is_discriminated_union	term_to_xml.m	/^:- pred is_discriminated_union(type_desc::in, int::out) is semidet.$/;kq|/^\<is_discriminated_union\>/;'q;"	kind:pred	file:
is_dotnet_root_directory	dir.m	/^:- pred is_dotnet_root_directory(string::in) is semidet.$/;kq|/^\<is_dotnet_root_directory\>/;'q;"	kind:pred	file:
is_dotnet_root_directory_2	dir.m	/^:- pred is_dotnet_root_directory_2(string::in) is semidet.$/;kq|/^\<is_dotnet_root_directory_2\>/;'q;"	kind:pred	file:
is_du_type	erlang_rtti_implementation.m	/^:- pred is_du_type(erlang_type_ctor_rep::in) is semidet.$/;kq|/^\<is_du_type\>/;'q;"	kind:pred	file:
is_edge	digraph.m	/^:- pred digraph.is_edge(digraph(T), digraph_key(T), digraph_key(T)).$/;kq|/^\<digraph.is_edge\>/;'q;"	kind:pred
is_edge_rev	digraph.m	/^:- pred digraph.is_edge_rev(digraph(T), digraph_key(T), digraph_key(T)).$/;kq|/^\<digraph.is_edge_rev\>/;'q;"	kind:pred
is_empty	array.m	/^:- pred array.is_empty(array(_T)).$/;kq|/^\<array.is_empty\>/;'q;"	kind:pred
is_empty	bag.m	/^:- pred bag.is_empty(bag(T)::in) is semidet.$/;kq|/^\<bag.is_empty\>/;'q;"	kind:pred
is_empty	bimap.m	/^:- pred bimap.is_empty(bimap(K, V)::in) is semidet.$/;kq|/^\<bimap.is_empty\>/;'q;"	kind:pred
is_empty	cord.m	/^:- pred is_empty(cord(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
is_empty	fat_sparse_bitset.m	/^:- pred is_empty(fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
is_empty	injection.m	/^:- pred injection.is_empty(injection(K, V)::in) is semidet.$/;kq|/^\<injection.is_empty\>/;'q;"	kind:pred
is_empty	list.m	/^:- pred list.is_empty(list(T)::in) is semidet.$/;kq|/^\<list.is_empty\>/;'q;"	kind:pred
is_empty	map.m	/^:- pred map.is_empty(map(_, _)::in) is semidet.$/;kq|/^\<map.is_empty\>/;'q;"	kind:pred
is_empty	multi_map.m	/^:- pred multi_map.is_empty(multi_map(_, _)::in) is semidet.$/;kq|/^\<multi_map.is_empty\>/;'q;"	kind:pred
is_empty	pqueue.m	/^:- pred pqueue.is_empty(pqueue(K, V)::in) is semidet.$/;kq|/^\<pqueue.is_empty\>/;'q;"	kind:pred
is_empty	queue.m	/^:- pred queue.is_empty(queue(T)::in) is semidet.$/;kq|/^\<queue.is_empty\>/;'q;"	kind:pred
is_empty	rbtree.m	/^:- pred rbtree.is_empty(rbtree(K, V)::in) is semidet.$/;kq|/^\<rbtree.is_empty\>/;'q;"	kind:pred
is_empty	rtree.m	/^:- pred rtree.is_empty(rtree(K, V)::in) is semidet.$/;kq|/^\<rtree.is_empty\>/;'q;"	kind:pred
is_empty	set.m	/^:- pred set.is_empty(set(T)::in) is semidet.$/;kq|/^\<set.is_empty\>/;'q;"	kind:pred
is_empty	set_bbbtree.m	/^:- pred set_bbbtree.is_empty(set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.is_empty\>/;'q;"	kind:pred
is_empty	set_ctree234.m	/^:- pred set_ctree234.is_empty(set_ctree234(_T)::in) is semidet.$/;kq|/^\<set_ctree234.is_empty\>/;'q;"	kind:pred
is_empty	set_ordlist.m	/^:- pred set_ordlist.is_empty(set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.is_empty\>/;'q;"	kind:pred
is_empty	set_tree234.m	/^:- pred set_tree234.is_empty(set_tree234(_T)::in) is semidet.$/;kq|/^\<set_tree234.is_empty\>/;'q;"	kind:pred
is_empty	set_unordlist.m	/^:- pred set_unordlist.is_empty(set_unordlist(_T)::in) is semidet.$/;kq|/^\<set_unordlist.is_empty\>/;'q;"	kind:pred
is_empty	sparse_bitset.m	/^:- pred is_empty(sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
is_empty	stack.m	/^:- pred stack.is_empty(stack(T)::in) is semidet.$/;kq|/^\<stack.is_empty\>/;'q;"	kind:pred
is_empty	test_bitset.m	/^:- pred is_empty(test_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
is_empty	tree234.m	/^:- pred tree234.is_empty(tree234(K, V)::in) is semidet.$/;kq|/^\<tree234.is_empty\>/;'q;"	kind:pred
is_empty	tree_bitset.m	/^:- pred is_empty(tree_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
is_empty	varset.m	/^:- pred varset.is_empty(varset(T)::in) is semidet.$/;kq|/^\<varset.is_empty\>/;'q;"	kind:pred
is_empty	version_array.m	/^:- pred is_empty(version_array(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
is_erlang_backend	erlang_rtti_implementation.m	/^:- pred is_erlang_backend is semidet.$/;kq|/^\<is_erlang_backend\>/;'q;"	kind:pred
is_exist_pseudo_type_desc	erlang_rtti_implementation.m	/^:- pred is_exist_pseudo_type_desc(pseudo_type_desc::in, int::out) is semidet.$/;kq|/^\<is_exist_pseudo_type_desc\>/;'q;"	kind:pred
is_exist_pseudo_type_desc	type_desc.m	/^:- pred is_exist_pseudo_type_desc(pseudo_type_desc::in, int::out) is semidet.$/;kq|/^\<is_exist_pseudo_type_desc\>/;'q;"	kind:pred	file:
is_exist_pseudo_type_info	rtti_implementation.m	/^:- pred is_exist_pseudo_type_info(pseudo_type_info::in, int::out) is semidet.$/;kq|/^\<is_exist_pseudo_type_info\>/;'q;"	kind:pred
is_exponent	string.m	/^:- pred is_exponent(char :: in) is semidet.$/;kq|/^\<is_exponent\>/;'q;"	kind:pred	file:
is_full	queue.m	/^:- pred queue.is_full(queue(T)::in) is semidet.$/;kq|/^\<queue.is_full\>/;'q;"	kind:pred
is_full	stack.m	/^:- pred stack.is_full(stack(T)::in) is semidet.$/;kq|/^\<stack.is_full\>/;'q;"	kind:pred
is_ground	term.m	/^:- pred is_ground(term(T)::in) is semidet.$/;kq|/^\<is_ground\>/;'q;"	kind:pred
is_ground_in_bindings	term.m	/^:- pred is_ground_in_bindings(term(T)::in, substitution(T)::in) is semidet.$/;kq|/^\<is_ground_in_bindings\>/;'q;"	kind:pred
is_ground_in_bindings_list	term.m	/^:- pred is_ground_in_bindings_list(list(term(T))::in, substitution(T)::in)$/;kq|/^\<is_ground_in_bindings_list\>/;'q;"	kind:pred	file:
is_ground_list	term.m	/^:- pred is_ground_list(list(term(T))::in) is semidet.$/;kq|/^\<is_ground_list\>/;'q;"	kind:pred	file:
is_hex_digit	char.m	/^:- pred char.is_hex_digit(char, int).$/;kq|/^\<char.is_hex_digit\>/;'q;"	kind:pred
is_hex_digit	char.m	/^:- pred char.is_hex_digit(char::in) is semidet.$/;kq|/^\<char.is_hex_digit\>/;'q;"	kind:pred
is_inactive	term_size_prof_builtin.m	/^    --->    is_inactive$/;kq|-;/\<is_inactive\>/;'q;"	kind:cons
is_inf	float.m	/^:- pred is_inf(float::in) is semidet.$/;kq|/^\<is_inf\>/;'q;"	kind:pred
is_lower	char.m	/^:- pred char.is_lower(char::in) is semidet.$/;kq|/^\<char.is_lower\>/;'q;"	kind:pred
is_maybe_yes	term_to_xml.m	/^:- pred is_maybe_yes(maybe(T)::in, T::out) is semidet.$/;kq|/^\<is_maybe_yes\>/;'q;"	kind:pred	file:
is_member	eqvclass.m	/^:- pred eqvclass.is_member(eqvclass(T)::in, T::in) is semidet.$/;kq|/^\<eqvclass.is_member\>/;'q;"	kind:pred
is_member	set.m	/^:- pred set.is_member(T::in, set(T)::in, bool::out) is det.$/;kq|/^\<set.is_member\>/;'q;"	kind:pred
is_member	set_bbbtree.m	/^:- pred set_bbbtree.is_member(T::in, set_bbbtree(T)::in, bool::out) is det.$/;kq|/^\<set_bbbtree.is_member\>/;'q;"	kind:pred
is_member	set_ctree234.m	/^:- func set_ctree234.is_member(set_ctree234(T), T) = bool.$/;kq|/^\<set_ctree234.is_member\>/;'q;"	kind:func
is_member	set_ctree234.m	/^:- pred set_ctree234.is_member(set_ctree234(T)::in, T::in, bool::out) is det.$/;kq|/^\<set_ctree234.is_member\>/;'q;"	kind:pred
is_member	set_ordlist.m	/^:- pred set_ordlist.is_member(T::in, set_ordlist(T)::in, bool::out) is det.$/;kq|/^\<set_ordlist.is_member\>/;'q;"	kind:pred
is_member	set_tree234.m	/^:- func set_tree234.is_member(set_tree234(T), T) = bool.$/;kq|/^\<set_tree234.is_member\>/;'q;"	kind:func
is_member	set_tree234.m	/^:- pred set_tree234.is_member(set_tree234(T)::in, T::in, bool::out) is det.$/;kq|/^\<set_tree234.is_member\>/;'q;"	kind:pred
is_member	set_unordlist.m	/^:- pred set_unordlist.is_member(T::in, set_unordlist(T)::in, bool::out)$/;kq|/^\<set_unordlist.is_member\>/;'q;"	kind:pred
is_member_2	set_ordlist.m	/^:- pred set_ordlist.is_member_2(T::in, list(T)::in, bool::out) is det.$/;kq|/^\<set_ordlist.is_member_2\>/;'q;"	kind:pred	file:
is_mercury_punctuation_char	term_io.m	/^:- pred is_mercury_punctuation_char(char::in) is semidet.$/;kq|/^\<is_mercury_punctuation_char\>/;'q;"	kind:pred
is_mercury_source_char	term_io.m	/^:- pred is_mercury_source_char(char::in) is semidet.$/;kq|/^\<is_mercury_source_char\>/;'q;"	kind:pred	file:
is_nan	float.m	/^:- pred is_nan(float::in) is semidet.$/;kq|/^\<is_nan\>/;'q;"	kind:pred
is_nan_or_inf	float.m	/^:- pred is_nan_or_inf(float::in) is semidet.$/;kq|/^\<is_nan_or_inf\>/;'q;"	kind:pred
is_negative	rational.m	/^:- pred is_negative(rational::in) is semidet.$/;kq|/^\<is_negative\>/;'q;"	kind:pred	file:
is_non_empty	fat_sparse_bitset.m	/^:- pred is_non_empty(fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
is_non_empty	set_ordlist.m	/^:- pred set_ordlist.is_non_empty(set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.is_non_empty\>/;'q;"	kind:pred
is_non_empty	set_tree234.m	/^:- pred set_tree234.is_non_empty(set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.is_non_empty\>/;'q;"	kind:pred
is_non_empty	sparse_bitset.m	/^:- pred is_non_empty(sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
is_non_empty	test_bitset.m	/^:- pred is_non_empty(test_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
is_non_empty	tree_bitset.m	/^:- pred is_non_empty(tree_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
is_non_empty_list	erlang_rtti_implementation.m	/^:- some [H, T] pred is_non_empty_list(type_info::in, type_info::in,$/;kq|/^\<is_non_empty_list\>/;'q;"	kind:pred	file:
is_noncharacter	char.m	/^:- pred char.is_noncharacter(char::in) is semidet.$/;kq|/^\<char.is_noncharacter\>/;'q;"	kind:pred
is_not_empty	list.m	/^:- pred list.is_not_empty(list(T)::in) is semidet.$/;kq|/^\<list.is_not_empty\>/;'q;"	kind:pred
is_octal_digit	char.m	/^:- pred char.is_octal_digit(char::in) is semidet.$/;kq|/^\<char.is_octal_digit\>/;'q;"	kind:pred
is_primitive_type	term_to_xml.m	/^:- pred is_primitive_type(type_desc::in, string::out) is semidet.$/;kq|/^\<is_primitive_type\>/;'q;"	kind:pred	file:
is_root_directory	dir.m	/^:- pred is_root_directory(list(char)::in) is semidet.$/;kq|/^\<is_root_directory\>/;'q;"	kind:pred	file:
is_set	bitmap.m	/^:- pred is_set(bitmap, bit_index).$/;kq|/^\<is_set\>/;'q;"	kind:pred
is_set	version_bitmap.m	/^:- pred is_set(version_bitmap::in, int::in) is semidet.$/;kq|/^\<is_set\>/;'q;"	kind:pred
is_singleton	fat_sparse_bitset.m	/^:- pred is_singleton(fat_sparse_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
is_singleton	set.m	/^:- pred set.is_singleton(set(T)::in, T::out) is semidet.$/;kq|/^\<set.is_singleton\>/;'q;"	kind:pred
is_singleton	set_bbbtree.m	/^:- pred set_bbbtree.is_singleton(set_bbbtree(T)::in, T::out) is semidet.$/;kq|/^\<set_bbbtree.is_singleton\>/;'q;"	kind:pred
is_singleton	set_ctree234.m	/^:- pred set_ctree234.is_singleton(set_ctree234(T)::in, T::out) is semidet.$/;kq|/^\<set_ctree234.is_singleton\>/;'q;"	kind:pred
is_singleton	set_ordlist.m	/^:- pred set_ordlist.is_singleton(set_ordlist(T)::in, T::out) is semidet.$/;kq|/^\<set_ordlist.is_singleton\>/;'q;"	kind:pred
is_singleton	set_tree234.m	/^:- pred set_tree234.is_singleton(set_tree234(T)::in, T::out) is semidet.$/;kq|/^\<set_tree234.is_singleton\>/;'q;"	kind:pred
is_singleton	set_unordlist.m	/^:- pred set_unordlist.is_singleton(set_unordlist(T)::in, T::out) is semidet.$/;kq|/^\<set_unordlist.is_singleton\>/;'q;"	kind:pred
is_singleton	sparse_bitset.m	/^:- pred is_singleton(sparse_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
is_singleton	test_bitset.m	/^:- pred is_singleton(test_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
is_singleton	tree_bitset.m	/^:- pred is_singleton(tree_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
is_subbag	bag.m	/^:- pred bag.is_subbag(bag(T)::in, bag(T)::in) is semidet.$/;kq|/^\<bag.is_subbag\>/;'q;"	kind:pred
is_surrogate	char.m	/^:- pred char.is_surrogate(char::in) is semidet.$/;kq|/^\<char.is_surrogate\>/;'q;"	kind:pred
is_terminal	robdd.m	/^:- pred is_terminal(robdd(T)::in) is semidet.$/;kq|/^\<is_terminal\>/;'q;"	kind:pred
is_univ_pseudo_type_desc	erlang_rtti_implementation.m	/^:- pred is_univ_pseudo_type_desc(pseudo_type_desc::in, int::out) is semidet.$/;kq|/^\<is_univ_pseudo_type_desc\>/;'q;"	kind:pred
is_univ_pseudo_type_desc	type_desc.m	/^:- pred is_univ_pseudo_type_desc(pseudo_type_desc::in, int::out) is semidet.$/;kq|/^\<is_univ_pseudo_type_desc\>/;'q;"	kind:pred	file:
is_univ_pseudo_type_info	rtti_implementation.m	/^:- pred is_univ_pseudo_type_info(pseudo_type_info::in, int::out) is semidet.$/;kq|/^\<is_univ_pseudo_type_info\>/;'q;"	kind:pred
is_upper	char.m	/^:- pred char.is_upper(char::in) is semidet.$/;kq|/^\<char.is_upper\>/;'q;"	kind:pred
is_whitespace	char.m	/^:- pred char.is_whitespace(char::in) is semidet.$/;kq|/^\<char.is_whitespace\>/;'q;"	kind:pred
is_zero	rational.m	/^:- pred is_zero(rational::in) is semidet.$/;kq|/^\<is_zero\>/;'q;"	kind:pred	file:
isnt	std_util.m	/^:- pred isnt(pred(T)::in(pred(in) is semidet), T::in) is semidet.$/;kq|/^\<isnt\>/;'q;"	kind:pred
ite	robdd.m	/^:- func ite(robdd(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<ite\>/;'q;"	kind:func
ite_var	robdd.m	/^:- func ite_var(var(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<ite_var\>/;'q;"	kind:func
item	thread.channel.m	/^    --->    item($/;kq|-;/\<item\>/;'q;"	kind:cons	file:
item	thread.channel.m	/^:- type item(T)$/;kq|-;/\<item\>/;'q;"	kind:type	file:
items_to_index	tree_bitset.m	/^:- pred items_to_index(list(T)::in, list(int)::out) is det <= enum(T).$/;kq|/^\<items_to_index\>/;'q;"	kind:pred	file:
iterate	rtti_implementation.m	/^:- func iterate(int, int, (func(int) = T)) = list(T).$/;kq|/^\<iterate\>/;'q;"	kind:func	file:
january	calendar.m	/^    --->    january$/;kq|-;/\<january\>/;'q;"	kind:cons
join_list	string.m	/^:- func string.join_list(string::in, list(string)::in) = (string::uo) is det.$/;kq|/^\<string.join_list\>/;'q;"	kind:func
join_list_2	string.m	/^:- func join_list_2(string::in, list(string)::in) = (string::uo) is det.$/;kq|/^\<join_list_2\>/;'q;"	kind:func	file:
join_rev_columns	string.m	/^:- func join_rev_columns(string, string, string) = string.$/;kq|/^\<join_rev_columns\>/;'q;"	kind:func	file:
julian_day_number	calendar.m	/^:- func julian_day_number(date) = int.$/;kq|/^\<julian_day_number\>/;'q;"	kind:func
july	calendar.m	/^    ;       july$/;kq|-;/\<july\>/;'q;"	kind:cons
june	calendar.m	/^    ;       june$/;kq|-;/\<june\>/;'q;"	kind:cons
junk	lexer.m	/^    ;       junk(char)          % junk character in the input stream$/;kq|-;/\<junk\>/;'q;"	kind:cons
just_left	string.m	/^    --->    just_left$/;kq|-;/\<just_left\>/;'q;"	kind:cons	file:
just_right	string.m	/^    ;       just_right.$/;kq|-;/\<just_right\>/;'q;"	kind:cons	file:
justified_column	string.m	/^:- type justified_column$/;kq|-;/\<justified_column\>/;'q;"	kind:type
justify_sense	string.m	/^:- type justify_sense$/;kq|-;/\<justify_sense\>/;'q;"	kind:type	file:
justify_string	string.m	/^:- func justify_string(flags, maybe_width, string) = string.$/;kq|/^\<justify_string\>/;'q;"	kind:func	file:
key_map	digraph.m	/^:- type key_map(T)     == map(int, digraph_key(T)).$/;kq|-;/\<key_map\>/;'q;"	kind:type	file:
key_set_map	digraph.m	/^:- type key_set_map(T) == map(int, digraph_key_set(T)).$/;kq|-;/\<key_set_map\>/;'q;"	kind:type	file:
key_set_map_add	digraph.m	/^:- func key_set_map_add(key_set_map(T), int, digraph_key(T)) = key_set_map(T).$/;kq|/^\<key_set_map_add\>/;'q;"	kind:func	file:
key_set_map_delete	digraph.m	/^:- func key_set_map_delete(key_set_map(T), int, digraph_key(T)) =$/;kq|/^\<key_set_map_delete\>/;'q;"	kind:func	file:
key_value_pair	tree234.m	/^:- type key_value_pair(K, V)$/;kq|-;/\<key_value_pair\>/;'q;"	kind:type	file:
keys	assoc_list.m	/^:- func assoc_list.keys(assoc_list(K, V)) = list(K).$/;kq|/^\<assoc_list.keys\>/;'q;"	kind:func
keys	assoc_list.m	/^:- pred assoc_list.keys(assoc_list(K, V)::in, list(K)::out) is det.$/;kq|/^\<assoc_list.keys\>/;'q;"	kind:pred
keys	digraph.m	/^:- pred digraph.keys(digraph(T)::in, list(digraph_key(T))::out) is det.$/;kq|/^\<digraph.keys\>/;'q;"	kind:pred	file:
keys	eqvclass.m	/^                keys        :: map(T, partition_id)$/;kq|-;/\<keys\>/;'q;"	kind:fld	file:
keys	injection.m	/^:- func injection.keys(injection(K, V)) = list(K).$/;kq|/^\<injection.keys\>/;'q;"	kind:func
keys	injection.m	/^:- pred injection.keys(injection(K, V)::in, list(K)::out) is det.$/;kq|/^\<injection.keys\>/;'q;"	kind:pred
keys	map.m	/^:- func map.keys(map(K, _V)) = list(K).$/;kq|/^\<map.keys\>/;'q;"	kind:func
keys	map.m	/^:- pred map.keys(map(K, _V)::in, list(K)::out) is det.$/;kq|/^\<map.keys\>/;'q;"	kind:pred
keys	multi_map.m	/^:- func multi_map.keys(multi_map(K, _V)) = list(K).$/;kq|/^\<multi_map.keys\>/;'q;"	kind:func
keys	multi_map.m	/^:- pred multi_map.keys(multi_map(K, _V)::in, list(K)::out) is det.$/;kq|/^\<multi_map.keys\>/;'q;"	kind:pred
keys	rbtree.m	/^:- func rbtree.keys(rbtree(K, V)) = list(K).$/;kq|/^\<rbtree.keys\>/;'q;"	kind:func
keys	rbtree.m	/^:- pred rbtree.keys(rbtree(K, V)::in, list(K)::out) is det.$/;kq|/^\<rbtree.keys\>/;'q;"	kind:pred
keys	tree234.m	/^:- func tree234.keys(tree234(K, V)) = list(K).$/;kq|/^\<tree234.keys\>/;'q;"	kind:func
keys	tree234.m	/^:- pred tree234.keys(tree234(K, V)::in, list(K)::out) is det.$/;kq|/^\<tree234.keys\>/;'q;"	kind:pred
keys_acc	tree234.m	/^:- pred tree234.keys_acc(tree234(K, V), list(K), list(K)).$/;kq|/^\<tree234.keys_acc\>/;'q;"	kind:pred	file:
keys_and_values	assoc_list.m	/^:- pred assoc_list.keys_and_values(assoc_list(K, V)::in,$/;kq|/^\<assoc_list.keys_and_values\>/;'q;"	kind:pred
keys_and_values	map.m	/^:- pred map.keys_and_values(map(K, V)::in, list(K)::out, list(V)::out) is det.$/;kq|/^\<map.keys_and_values\>/;'q;"	kind:pred
keys_and_values	tree234.m	/^:- pred tree234.keys_and_values(tree234(K, V)::in, list(K)::out, list(V)::out)$/;kq|/^\<tree234.keys_and_values\>/;'q;"	kind:pred
keys_and_values_acc	tree234.m	/^:- pred tree234.keys_and_values_acc(tree234(K, V)::in,$/;kq|/^\<tree234.keys_and_values_acc\>/;'q;"	kind:pred	file:
keyword	parsing_utils.m	/^:- pred keyword(string::in, string::in, src::in, unit::out,$/;kq|/^\<keyword\>/;'q;"	kind:pred
label	pprint.m	/^:- func label(string, T)    = doc <= (doc(T)).$/;kq|/^\<label\>/;'q;"	kind:func
labelling	robdd.m	/^:- pred labelling(vars(T)::in, robdd(T)::in, vars(T)::out, vars(T)::out)$/;kq|/^\<labelling\>/;'q;"	kind:pred
labelling_2	robdd.m	/^:- pred labelling_2(list(var(T))::in, robdd(T)::in, vars(T)::in,$/;kq|/^\<labelling_2\>/;'q;"	kind:pred	file:
largest	set_bbbtree.m	/^:- pred set_bbbtree.largest(set_bbbtree(T), T).$/;kq|/^\<set_bbbtree.largest\>/;'q;"	kind:pred
last	list.m	/^:- pred list.last(list(T)::in, T::out) is semidet.$/;kq|/^\<list.last\>/;'q;"	kind:pred
last_fail_message	parsing_utils.m	/^                last_fail_message   ::  mutvar(fail_message_info)$/;kq|-;/\<last_fail_message\>/;'q;"	kind:fld	file:
last_univ_quant_varnum	rtti_implementation.m	/^:- func last_univ_quant_varnum = int.$/;kq|/^\<last_univ_quant_varnum\>/;'q;"	kind:func	file:
layout_best	pprint.m	/^:- pred layout_best(pred(string, T, T), int, doc, T, T).$/;kq|/^\<layout_best\>/;'q;"	kind:pred	file:
layout_flat	pprint.m	/^:- pred layout_flat(pred(string, T, T), int, int, doc, T, T).$/;kq|/^\<layout_flat\>/;'q;"	kind:pred	file:
lazy	lazy.m	/^    --->    lazy(mutvar(lazy_state(T)))$/;kq|-;/\<lazy\>/;'q;"	kind:cons	file:
lazy	lazy.m	/^:- type lazy(T)$/;kq|-;/\<lazy\>/;'q;"	kind:type	file:
lazy.closure	lazy.m	/^    ;       closure((func) = T).$/;kq|-;/\<lazy.closure\>/;'q;"	kind:cons	file:
lazy.compare_values	lazy.m	/^:- pred compare_values(comparison_result::uo, lazy(T)::in, lazy(T)::in) is det.$/;kq|/^\<compare_values\>/;'q;"	kind:pred
lazy.delay	lazy.m	/^:- func delay((func) = T) = lazy(T).$/;kq|/^\<delay\>/;'q;"	kind:func
lazy.equal_values	lazy.m	/^:- pred equal_values(lazy(T)::in, lazy(T)::in) is semidet.$/;kq|/^\<equal_values\>/;'q;"	kind:pred
lazy.force	lazy.m	/^:- func force(lazy(T)) = T.$/;kq|/^\<force\>/;'q;"	kind:func
lazy.read_if_val	lazy.m	/^:- impure pred read_if_val(lazy(T)::in, T::out) is semidet.$/;kq|/^\<read_if_val\>/;'q;"	kind:pred
lazy.val	lazy.m	/^:- func val(T) = lazy(T).$/;kq|/^\<val\>/;'q;"	kind:func
lazy.value	lazy.m	/^    --->    value(T)$/;kq|-;/\<lazy.value\>/;'q;"	kind:cons	file:
lazy_cons	tree234.m	/^    ;       lazy_cons(K, V, (func) = lazy_list(K, V)).$/;kq|-;/\<lazy_cons\>/;'q;"	kind:cons	file:
lazy_list	tree234.m	/^:- type lazy_list(K, V)$/;kq|-;/\<lazy_list\>/;'q;"	kind:type	file:
lazy_state	lazy.m	/^:- type lazy_state(T)$/;kq|-;/\<lazy_state\>/;'q;"	kind:type	file:
lb	pprint.m	/^:- pred lb(pred(string, T, T), int, int, int, string, doc, T, T).$/;kq|/^\<lb\>/;'q;"	kind:pred	file:
lc_create	par_builtin.m	/^:- pred lc_create(int::in, loop_control::out) is det.$/;kq|/^\<lc_create\>/;'q;"	kind:pred
lc_default_num_contexts	par_builtin.m	/^:- impure pred lc_default_num_contexts(int::out) is det.$/;kq|/^\<lc_default_num_contexts\>/;'q;"	kind:pred
lc_finish	par_builtin.m	/^:- impure pred lc_finish(loop_control::in) is det.$/;kq|/^\<lc_finish\>/;'q;"	kind:pred
lc_free_slot	par_builtin.m	/^:- impure pred lc_free_slot(loop_control::in, int::out)$/;kq|/^\<lc_free_slot\>/;'q;"	kind:pred
lc_join_and_terminate	par_builtin.m	/^:- impure pred lc_join_and_terminate(loop_control::in, int::in)$/;kq|/^\<lc_join_and_terminate\>/;'q;"	kind:pred
lc_wait_free_slot	par_builtin.m	/^:- impure pred lc_wait_free_slot(loop_control::in, int::out)$/;kq|/^\<lc_wait_free_slot\>/;'q;"	kind:pred
lcm	rational.m	/^:- func lcm(integer, integer) = integer.$/;kq|/^\<lcm\>/;'q;"	kind:func	file:
leader_map	robdd.m	/^                leader_map  :: leader_map(T)$/;kq|-;/\<leader_map\>/;'q;"	kind:fld
leader_map	robdd.m	/^:- type leader_map(T) == map(var(T), var(T)).$/;kq|-;/\<leader_map\>/;'q;"	kind:type
leader_to_eqvclass	robdd.m	/^:- type leader_to_eqvclass(T) ---> leader_to_eqvclass(map(var(T), vars(T))).$/;kq|-;/\<leader_to_eqvclass\>/;'q;"	kind:cons	file:
leader_to_eqvclass	robdd.m	/^:- type leader_to_eqvclass(T) ---> leader_to_eqvclass(map(var(T), vars(T))).$/;kq|-;/\<leader_to_eqvclass\>/;'q;"	kind:type	file:
leaf	bt_array.m	/^    --->    leaf(T)$/;kq|-;/\<leaf\>/;'q;"	kind:cons	file:
leaf	rtree.m	/^    --->    leaf(V) $/;kq|-;/\<leaf\>/;'q;"	kind:cons	file:
leaf_all_true	tree_bitset.m	/^:- pred leaf_all_true(pred(T)::in(pred(in) is semidet), list(leaf_node)::in)$/;kq|/^\<leaf_all_true\>/;'q;"	kind:pred	file:
leaf_bits	tree_bitset.m	/^                leaf_bits       :: int$/;kq|-;/\<leaf_bits\>/;'q;"	kind:fld	file:
leaf_foldl2_pred	tree_bitset.m	/^:- pred leaf_foldl2_pred(pred(T, U, U, V, V), list(leaf_node), U, U, V, V)$/;kq|/^\<leaf_foldl2_pred\>/;'q;"	kind:pred	file:
leaf_foldl_pred	tree_bitset.m	/^:- pred leaf_foldl_pred(pred(T, U, U), list(leaf_node), U, U) <= enum(T).$/;kq|/^\<leaf_foldl_pred\>/;'q;"	kind:pred	file:
leaf_foldr2_pred	tree_bitset.m	/^:- pred leaf_foldr2_pred(pred(T, U, U, V, V), list(leaf_node), U, U, V, V)$/;kq|/^\<leaf_foldr2_pred\>/;'q;"	kind:pred	file:
leaf_foldr_pred	tree_bitset.m	/^:- pred leaf_foldr_pred(pred(T, U, U), list(leaf_node), U, U) <= enum(T).$/;kq|/^\<leaf_foldr_pred\>/;'q;"	kind:pred	file:
leaf_list	tree_bitset.m	/^    --->    leaf_list($/;kq|-;/\<leaf_list\>/;'q;"	kind:cons	file:
leaf_node	tree_bitset.m	/^    --->    leaf_node($/;kq|-;/\<leaf_node\>/;'q;"	kind:cons	file:
leaf_node	tree_bitset.m	/^:- type leaf_node$/;kq|-;/\<leaf_node\>/;'q;"	kind:type	file:
leaf_nodes	tree_bitset.m	/^                leaf_nodes      :: list(leaf_node)$/;kq|-;/\<leaf_nodes\>/;'q;"	kind:fld	file:
leaf_offset	tree_bitset.m	/^                leaf_offset     :: int,$/;kq|-;/\<leaf_offset\>/;'q;"	kind:fld	file:
leaflist_contains	tree_bitset.m	/^:- pred leaflist_contains(list(leaf_node)::in, int::in) is semidet.$/;kq|/^\<leaflist_contains\>/;'q;"	kind:pred	file:
leaflist_delete	tree_bitset.m	/^:- pred leaflist_delete(list(leaf_node)::in, int::in, list(leaf_node)::out)$/;kq|/^\<leaflist_delete\>/;'q;"	kind:pred	file:
leaflist_difference	tree_bitset.m	/^:- pred leaflist_difference(list(leaf_node)::in, list(leaf_node)::in,$/;kq|/^\<leaflist_difference\>/;'q;"	kind:pred	file:
leaflist_divide	tree_bitset.m	/^:- pred leaflist_divide(pred(T)::in(pred(in) is semidet), list(leaf_node)::in,$/;kq|/^\<leaflist_divide\>/;'q;"	kind:pred	file:
leaflist_divide_by_set	tree_bitset.m	/^:- pred leaflist_divide_by_set(list(leaf_node)::in, list(leaf_node)::in,$/;kq|/^\<leaflist_divide_by_set\>/;'q;"	kind:pred	file:
leaflist_insert	tree_bitset.m	/^:- pred leaflist_insert(int::in, list(leaf_node)::in, list(leaf_node)::out)$/;kq|/^\<leaflist_insert\>/;'q;"	kind:pred	file:
leaflist_insert_new	tree_bitset.m	/^:- pred leaflist_insert_new(int::in,$/;kq|/^\<leaflist_insert_new\>/;'q;"	kind:pred	file:
leaflist_intersect	tree_bitset.m	/^:- pred leaflist_intersect(list(leaf_node)::in, list(leaf_node)::in,$/;kq|/^\<leaflist_intersect\>/;'q;"	kind:pred	file:
leaflist_member	tree_bitset.m	/^:- pred leaflist_member(int::out, list(leaf_node)::in) is nondet.$/;kq|/^\<leaflist_member\>/;'q;"	kind:pred	file:
leaflist_union	tree_bitset.m	/^:- pred leaflist_union(list(leaf_node)::in, list(leaf_node)::in,$/;kq|/^\<leaflist_union\>/;'q;"	kind:pred	file:
leafnode_divide	tree_bitset.m	/^:- pred leafnode_divide(pred(T)::in(pred(in) is semidet), int::in, int::in,$/;kq|/^\<leafnode_divide\>/;'q;"	kind:pred	file:
leafnode_member	tree_bitset.m	/^:- pred leafnode_member(int::out, int::in, int::in, int::in) is nondet.$/;kq|/^\<leafnode_member\>/;'q;"	kind:pred	file:
least	set_bbbtree.m	/^:- pred set_bbbtree.least(set_bbbtree(T), T).$/;kq|/^\<set_bbbtree.least\>/;'q;"	kind:pred
least_index	array.m	/^:- func array.least_index(array(T)) = int.$/;kq|/^\<array.least_index\>/;'q;"	kind:func
least_upper_bound	bag.m	/^:- func bag.least_upper_bound(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.least_upper_bound\>/;'q;"	kind:func
least_upper_bound	bag.m	/^:- pred bag.least_upper_bound(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.least_upper_bound\>/;'q;"	kind:pred
left	string.m	/^    --->    left(list(string))$/;kq|-;/\<left\>/;'q;"	kind:cons
left	string.m	/^:- func string.left(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.left\>/;'q;"	kind:func
left	string.m	/^:- pred string.left(string::in, int::in, string::out) is det.$/;kq|/^\<string.left\>/;'q;"	kind:pred
left_by_codepoint	string.m	/^:- func string.left_by_codepoint(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.left_by_codepoint\>/;'q;"	kind:func
left_by_codepoint	string.m	/^:- pred string.left_by_codepoint(string::in, int::in, string::out) is det.$/;kq|/^\<string.left_by_codepoint\>/;'q;"	kind:pred
left_to_right	bitmap.m	/^        --->    left_to_right$/;kq|-;/\<left_to_right\>/;'q;"	kind:cons	file:
leftshift	integer.m	/^:- pred leftshift(int::in, int::in, int::in, list(digit)::in,$/;kq|/^\<leftshift\>/;'q;"	kind:pred	file:
length	cord.m	/^:- func length(cord(T)) = int.$/;kq|/^\<length\>/;'q;"	kind:func
length	integer.m	/^:- func length(integer) = int.$/;kq|/^\<length\>/;'q;"	kind:func	file:
length	list.m	/^:- func list.length(list(T)) = int.$/;kq|/^\<list.length\>/;'q;"	kind:func
length	list.m	/^:- pred list.length(list(_T), int).$/;kq|/^\<list.length\>/;'q;"	kind:pred
length	pqueue.m	/^:- func pqueue.length(pqueue(K, V)) = int.$/;kq|/^\<pqueue.length\>/;'q;"	kind:func
length	queue.m	/^:- func queue.length(queue(T)) = int.$/;kq|/^\<queue.length\>/;'q;"	kind:func
length	queue.m	/^:- pred queue.length(queue(T)::in, int::out) is det.$/;kq|/^\<queue.length\>/;'q;"	kind:pred
length	string.m	/^:- func string.length(string::in) = (int::uo) is det.$/;kq|/^\<string.length\>/;'q;"	kind:func
length	string.m	/^:- pred string.length(string, int).$/;kq|/^\<string.length\>/;'q;"	kind:pred
length_2	list.m	/^:- pred list.length_2(list(T), int, int).$/;kq|/^\<list.length_2\>/;'q;"	kind:pred	file:
level	tree_bitset.m	/^                level           :: int,$/;kq|-;/\<level\>/;'q;"	kind:fld	file:
lexer.action_alpha_lower	lexer.m	/^    ;       action_alpha_lower$/;kq|-;/\<lexer.action_alpha_lower\>/;'q;"	kind:cons	file:
lexer.action_backquote	lexer.m	/^    ;       action_backquote$/;kq|-;/\<lexer.action_backquote\>/;'q;"	kind:cons	file:
lexer.action_dollar	lexer.m	/^    ;       action_dollar$/;kq|-;/\<lexer.action_dollar\>/;'q;"	kind:cons	file:
lexer.action_dot	lexer.m	/^    ;       action_dot$/;kq|-;/\<lexer.action_dot\>/;'q;"	kind:cons	file:
lexer.action_graphic_token	lexer.m	/^    ;       action_graphic_token.$/;kq|-;/\<lexer.action_graphic_token\>/;'q;"	kind:cons	file:
lexer.action_hash	lexer.m	/^    ;       action_hash$/;kq|-;/\<lexer.action_hash\>/;'q;"	kind:cons	file:
lexer.action_nonzero_digit	lexer.m	/^    ;       action_nonzero_digit$/;kq|-;/\<lexer.action_nonzero_digit\>/;'q;"	kind:cons	file:
lexer.action_percent	lexer.m	/^    ;       action_percent$/;kq|-;/\<lexer.action_percent\>/;'q;"	kind:cons	file:
lexer.action_quote	lexer.m	/^    ;       action_quote$/;kq|-;/\<lexer.action_quote\>/;'q;"	kind:cons	file:
lexer.action_slash	lexer.m	/^    ;       action_slash$/;kq|-;/\<lexer.action_slash\>/;'q;"	kind:cons	file:
lexer.action_special_token	lexer.m	/^    ;       action_special_token$/;kq|-;/\<lexer.action_special_token\>/;'q;"	kind:cons	file:
lexer.action_whitespace	lexer.m	/^    --->    action_whitespace$/;kq|-;/\<lexer.action_whitespace\>/;'q;"	kind:cons	file:
lexer.action_zero	lexer.m	/^    ;       action_zero$/;kq|-;/\<lexer.action_zero\>/;'q;"	kind:cons	file:
lexer.big_integer	lexer.m	/^    ;       big_integer(string) % does not fit in int$/;kq|-;/\<lexer.big_integer\>/;'q;"	kind:cons
lexer.close	lexer.m	/^    ;       close               % ')'$/;kq|-;/\<lexer.close\>/;'q;"	kind:cons
lexer.close_curly	lexer.m	/^    ;       close_curly         % '}'$/;kq|-;/\<lexer.close_curly\>/;'q;"	kind:cons
lexer.close_list	lexer.m	/^    ;       close_list          % ']'$/;kq|-;/\<lexer.close_list\>/;'q;"	kind:cons
lexer.comma	lexer.m	/^    ;       comma               % ','$/;kq|-;/\<lexer.comma\>/;'q;"	kind:cons
lexer.conv_string_to_int	lexer.m	/^:- pred conv_string_to_int(string::in, int::in, token::out) is det.$/;kq|/^\<conv_string_to_int\>/;'q;"	kind:pred	file:
lexer.conv_to_float	lexer.m	/^:- pred conv_to_float(string::in, token::out) is det.$/;kq|/^\<conv_to_float\>/;'q;"	kind:pred	file:
lexer.end	lexer.m	/^    ;       end                 % '.'$/;kq|-;/\<lexer.end\>/;'q;"	kind:cons
lexer.eof	lexer.m	/^    ;       eof                 % end-of-file$/;kq|-;/\<lexer.eof\>/;'q;"	kind:cons
lexer.error	lexer.m	/^    ;       error(string)       % some other invalid token$/;kq|-;/\<lexer.error\>/;'q;"	kind:cons
lexer.escape_char	lexer.m	/^:- pred escape_char(char::in, char::out) is semidet.$/;kq|/^\<escape_char\>/;'q;"	kind:pred	file:
lexer.execute_get_token_action	lexer.m	/^:- pred execute_get_token_action(io.input_stream::in, char::in,$/;kq|/^\<execute_get_token_action\>/;'q;"	kind:pred	file:
lexer.finish_hex_escape	lexer.m	/^:- pred finish_hex_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<finish_hex_escape\>/;'q;"	kind:pred	file:
lexer.finish_octal_escape	lexer.m	/^:- pred finish_octal_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<finish_octal_escape\>/;'q;"	kind:pred	file:
lexer.finish_quoted_name	lexer.m	/^:- pred finish_quoted_name(char::in, list(char)::in, token::out) is det.$/;kq|/^\<finish_quoted_name\>/;'q;"	kind:pred	file:
lexer.float	lexer.m	/^    ;       float(float)$/;kq|-;/\<lexer.float\>/;'q;"	kind:cons
lexer.get_binary	lexer.m	/^:- pred get_binary(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_binary\>/;'q;"	kind:pred	file:
lexer.get_binary_2	lexer.m	/^:- pred get_binary_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_binary_2\>/;'q;"	kind:pred	file:
lexer.get_char_code	lexer.m	/^:- pred get_char_code(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_char_code\>/;'q;"	kind:pred	file:
lexer.get_comment	lexer.m	/^:- pred get_comment(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_comment\>/;'q;"	kind:pred	file:
lexer.get_comment_2	lexer.m	/^:- pred get_comment_2(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_comment_2\>/;'q;"	kind:pred	file:
lexer.get_context	lexer.m	/^:- pred get_context(io.input_stream::in, token_context::out, io::di, io::uo)$/;kq|/^\<get_context\>/;'q;"	kind:pred	file:
lexer.get_dot	lexer.m	/^:- pred get_dot(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_dot\>/;'q;"	kind:pred	file:
lexer.get_float_decimals	lexer.m	/^:- pred get_float_decimals(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_decimals\>/;'q;"	kind:pred	file:
lexer.get_float_exponent	lexer.m	/^:- pred get_float_exponent(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_exponent\>/;'q;"	kind:pred	file:
lexer.get_float_exponent_2	lexer.m	/^:- pred get_float_exponent_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_exponent_2\>/;'q;"	kind:pred	file:
lexer.get_float_exponent_3	lexer.m	/^:- pred get_float_exponent_3(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_float_exponent_3\>/;'q;"	kind:pred	file:
lexer.get_graphic	lexer.m	/^:- pred get_graphic(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_graphic\>/;'q;"	kind:pred	file:
lexer.get_hex	lexer.m	/^:- pred get_hex(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_hex\>/;'q;"	kind:pred	file:
lexer.get_hex_2	lexer.m	/^:- pred get_hex_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_hex_2\>/;'q;"	kind:pred	file:
lexer.get_hex_escape	lexer.m	/^:- pred get_hex_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_hex_escape\>/;'q;"	kind:pred	file:
lexer.get_int_dot	lexer.m	/^:- pred get_int_dot(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_int_dot\>/;'q;"	kind:pred	file:
lexer.get_name	lexer.m	/^:- pred get_name(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_name\>/;'q;"	kind:pred	file:
lexer.get_number	lexer.m	/^:- pred get_number(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_number\>/;'q;"	kind:pred	file:
lexer.get_octal	lexer.m	/^:- pred get_octal(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_octal\>/;'q;"	kind:pred	file:
lexer.get_octal_2	lexer.m	/^:- pred get_octal_2(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_octal_2\>/;'q;"	kind:pred	file:
lexer.get_octal_escape	lexer.m	/^:- pred get_octal_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_octal_escape\>/;'q;"	kind:pred	file:
lexer.get_quoted_name	lexer.m	/^:- pred get_quoted_name(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_quoted_name\>/;'q;"	kind:pred	file:
lexer.get_quoted_name_escape	lexer.m	/^:- pred get_quoted_name_escape(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_quoted_name_escape\>/;'q;"	kind:pred	file:
lexer.get_quoted_name_quote	lexer.m	/^:- pred get_quoted_name_quote(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<get_quoted_name_quote\>/;'q;"	kind:pred	file:
lexer.get_slash	lexer.m	/^:- pred get_slash(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_slash\>/;'q;"	kind:pred	file:
lexer.get_source_line_number	lexer.m	/^:- pred get_source_line_number(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_source_line_number\>/;'q;"	kind:pred	file:
lexer.get_token	lexer.m	/^:- pred get_token(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_token\>/;'q;"	kind:pred	file:
lexer.get_token_2	lexer.m	/^:- pred get_token_2(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<get_token_2\>/;'q;"	kind:pred	file:
lexer.get_token_action	lexer.m	/^:- type get_token_action$/;kq|-;/\<lexer.get_token_action\>/;'q;"	kind:type	file:
lexer.get_token_list	lexer.m	/^:- pred get_token_list(token_list::out, io::di, io::uo) is det.$/;kq|/^\<get_token_list\>/;'q;"	kind:pred
lexer.get_token_list_2	lexer.m	/^:- pred get_token_list_2(io.input_stream::in, token::in, token_context::in,$/;kq|/^\<get_token_list_2\>/;'q;"	kind:pred	file:
lexer.get_unicode_escape	lexer.m	/^:- pred get_unicode_escape(io.input_stream::in, int::in, char::in,$/;kq|/^\<get_unicode_escape\>/;'q;"	kind:pred	file:
lexer.get_variable	lexer.m	/^:- pred get_variable(io.input_stream::in, list(char)::in, token::out,$/;kq|/^\<get_variable\>/;'q;"	kind:pred	file:
lexer.get_zero	lexer.m	/^:- pred get_zero(io.input_stream::in, token::out, io::di, io::uo) is det.$/;kq|/^\<get_zero\>/;'q;"	kind:pred	file:
lexer.grab_string	lexer.m	/^:- pred grab_string(string::in, posn::in, string::out,$/;kq|/^\<grab_string\>/;'q;"	kind:pred	file:
lexer.graphic_token_char	lexer.m	/^:- pred graphic_token_char(char::in) is semidet.$/;kq|/^\<graphic_token_char\>/;'q;"	kind:pred
lexer.handle_special_token	lexer.m	/^:- pred handle_special_token(char::in, scanned_past_whitespace::in, token::out)$/;kq|/^\<handle_special_token\>/;'q;"	kind:pred	file:
lexer.ht_sep	lexer.m	/^    ;       ht_sep              % '|'$/;kq|-;/\<lexer.ht_sep\>/;'q;"	kind:cons
lexer.implementation_defined	lexer.m	/^    ;       implementation_defined(string) % $name$/;kq|-;/\<lexer.implementation_defined\>/;'q;"	kind:cons
lexer.integer	lexer.m	/^    ;       integer(int)$/;kq|-;/\<lexer.integer\>/;'q;"	kind:cons
lexer.integer_dot	lexer.m	/^    ;       integer_dot(int).   % the lexer will never return this.$/;kq|-;/\<lexer.integer_dot\>/;'q;"	kind:cons
lexer.io_error	lexer.m	/^    ;       io_error(io.error) % error reading from the input stream$/;kq|-;/\<lexer.io_error\>/;'q;"	kind:cons
lexer.junk	lexer.m	/^    ;       junk(char)          % junk character in the input stream$/;kq|-;/\<lexer.junk\>/;'q;"	kind:cons
lexer.lookup_token_action	lexer.m	/^:- pred lookup_token_action(char::in, get_token_action::out) is semidet.$/;kq|/^\<lookup_token_action\>/;'q;"	kind:pred	file:
lexer.name	lexer.m	/^    --->    name(string)$/;kq|-;/\<lexer.name\>/;'q;"	kind:cons
lexer.null_character_error	lexer.m	/^:- func null_character_error = token.$/;kq|/^\<null_character_error\>/;'q;"	kind:func	file:
lexer.offset	lexer.m	/^:- type offset == int.$/;kq|-;/\<lexer.offset\>/;'q;"	kind:type
lexer.open	lexer.m	/^    ;       open                % '('$/;kq|-;/\<lexer.open\>/;'q;"	kind:cons
lexer.open_ct	lexer.m	/^    ;       open_ct             % '(' without any preceding whitespace$/;kq|-;/\<lexer.open_ct\>/;'q;"	kind:cons
lexer.open_curly	lexer.m	/^    ;       open_curly          % '{'$/;kq|-;/\<lexer.open_curly\>/;'q;"	kind:cons
lexer.open_list	lexer.m	/^    ;       open_list           % '['$/;kq|-;/\<lexer.open_list\>/;'q;"	kind:cons
lexer.rev_char_list_to_float	lexer.m	/^:- pred rev_char_list_to_float(list(char)::in, token::out) is det.$/;kq|/^\<rev_char_list_to_float\>/;'q;"	kind:pred	file:
lexer.rev_char_list_to_int	lexer.m	/^:- pred rev_char_list_to_int(list(char)::in, int::in, token::out) is det.$/;kq|/^\<rev_char_list_to_int\>/;'q;"	kind:pred	file:
lexer.rev_char_list_to_string	lexer.m	/^:- pred rev_char_list_to_string(list(char)::in, string::out) is semidet.$/;kq|/^\<rev_char_list_to_string\>/;'q;"	kind:pred	file:
lexer.scanned_past_whitespace	lexer.m	/^    --->    scanned_past_whitespace$/;kq|-;/\<lexer.scanned_past_whitespace\>/;'q;"	kind:cons	file:
lexer.scanned_past_whitespace	lexer.m	/^:- type scanned_past_whitespace$/;kq|-;/\<lexer.scanned_past_whitespace\>/;'q;"	kind:type	file:
lexer.skip_to_eol	lexer.m	/^:- pred skip_to_eol(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<skip_to_eol\>/;'q;"	kind:pred	file:
lexer.special_token	lexer.m	/^:- pred special_token(char::in, token::out) is semidet.$/;kq|/^\<special_token\>/;'q;"	kind:pred	file:
lexer.start_quoted_name	lexer.m	/^:- pred start_quoted_name(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<start_quoted_name\>/;'q;"	kind:pred	file:
lexer.string	lexer.m	/^    ;       string(string)      % "...."$/;kq|-;/\<lexer.string\>/;'q;"	kind:cons
lexer.string_finish_hex_escape	lexer.m	/^:- pred string_finish_hex_escape(string::in, int::in, char::in,$/;kq|/^\<string_finish_hex_escape\>/;'q;"	kind:pred	file:
lexer.string_get_binary	lexer.m	/^:- pred string_get_binary(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_binary\>/;'q;"	kind:pred	file:
lexer.string_get_binary_2	lexer.m	/^:- pred string_get_binary_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_binary_2\>/;'q;"	kind:pred	file:
lexer.string_get_char_code	lexer.m	/^:- pred string_get_char_code(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_char_code\>/;'q;"	kind:pred	file:
lexer.string_get_comment	lexer.m	/^:- pred string_get_comment(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_comment\>/;'q;"	kind:pred	file:
lexer.string_get_comment_2	lexer.m	/^:- pred string_get_comment_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_comment_2\>/;'q;"	kind:pred	file:
lexer.string_get_context	lexer.m	/^:- pred string_get_context(posn::in, string_token_context::out,$/;kq|/^\<string_get_context\>/;'q;"	kind:pred	file:
lexer.string_get_dot	lexer.m	/^:- pred string_get_dot(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_dot\>/;'q;"	kind:pred	file:
lexer.string_get_graphic	lexer.m	/^:- pred string_get_graphic(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_graphic\>/;'q;"	kind:pred	file:
lexer.string_get_hex	lexer.m	/^:- pred string_get_hex(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_hex\>/;'q;"	kind:pred	file:
lexer.string_get_hex_2	lexer.m	/^:- pred string_get_hex_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_hex_2\>/;'q;"	kind:pred	file:
lexer.string_get_hex_escape	lexer.m	/^:- pred string_get_hex_escape(string::in, int::in, char::in,$/;kq|/^\<string_get_hex_escape\>/;'q;"	kind:pred	file:
lexer.string_get_int_dot	lexer.m	/^:- pred string_get_int_dot(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_int_dot\>/;'q;"	kind:pred	file:
lexer.string_get_name	lexer.m	/^:- pred string_get_name(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_name\>/;'q;"	kind:pred	file:
lexer.string_get_number	lexer.m	/^:- pred string_get_number(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_number\>/;'q;"	kind:pred	file:
lexer.string_get_octal	lexer.m	/^:- pred string_get_octal(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_octal\>/;'q;"	kind:pred	file:
lexer.string_get_octal_2	lexer.m	/^:- pred string_get_octal_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_octal_2\>/;'q;"	kind:pred	file:
lexer.string_get_octal_escape	lexer.m	/^:- pred string_get_octal_escape(string::in, int::in, char::in,$/;kq|/^\<string_get_octal_escape\>/;'q;"	kind:pred	file:
lexer.string_get_quoted_name	lexer.m	/^:- pred string_get_quoted_name(string::in, int::in, char::in,$/;kq|/^\<string_get_quoted_name\>/;'q;"	kind:pred	file:
lexer.string_get_slash	lexer.m	/^:- pred string_get_slash(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_slash\>/;'q;"	kind:pred	file:
lexer.string_get_token	lexer.m	/^:- pred string_get_token(string::in, int::in, token::out,$/;kq|/^\<string_get_token\>/;'q;"	kind:pred	file:
lexer.string_get_token_2	lexer.m	/^:- pred string_get_token_2(string::in, int::in, token::out,$/;kq|/^\<string_get_token_2\>/;'q;"	kind:pred	file:
lexer.string_get_token_list	lexer.m	/^:- pred string_get_token_list(string::in, token_list::out,$/;kq|/^\<string_get_token_list\>/;'q;"	kind:pred
lexer.string_get_variable	lexer.m	/^:- pred string_get_variable(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_variable\>/;'q;"	kind:pred	file:
lexer.string_get_zero	lexer.m	/^:- pred string_get_zero(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_zero\>/;'q;"	kind:pred	file:
lexer.string_read_char	lexer.m	/^:- pred string_read_char(string::in, int::in, char::out,$/;kq|/^\<string_read_char\>/;'q;"	kind:pred	file:
lexer.string_set_line_number	lexer.m	/^:- pred string_set_line_number(int::in, posn::in, posn::out) is det.$/;kq|/^\<string_set_line_number\>/;'q;"	kind:pred	file:
lexer.string_skip_to_eol	lexer.m	/^:- pred string_skip_to_eol(string::in, int::in, token::out,$/;kq|/^\<string_skip_to_eol\>/;'q;"	kind:pred	file:
lexer.string_start_quoted_name	lexer.m	/^:- pred string_start_quoted_name(string::in, int::in, char::in,$/;kq|/^\<string_start_quoted_name\>/;'q;"	kind:pred	file:
lexer.string_token_context	lexer.m	/^:- type string_token_context == token_context.$/;kq|-;/\<lexer.string_token_context\>/;'q;"	kind:type	file:
lexer.string_ungetchar	lexer.m	/^:- pred string_ungetchar(string::in, posn::in, posn::out) is det.$/;kq|/^\<string_ungetchar\>/;'q;"	kind:pred	file:
lexer.token	lexer.m	/^:- type token$/;kq|-;/\<lexer.token\>/;'q;"	kind:type
lexer.token_cons	lexer.m	/^    --->    token_cons(token, token_context, token_list)$/;kq|-;/\<lexer.token_cons\>/;'q;"	kind:cons
lexer.token_context	lexer.m	/^:- type token_context == int.   % line number$/;kq|-;/\<lexer.token_context\>/;'q;"	kind:type
lexer.token_list	lexer.m	/^:- type token_list$/;kq|-;/\<lexer.token_list\>/;'q;"	kind:type
lexer.token_nil	lexer.m	/^    ;       token_nil.$/;kq|-;/\<lexer.token_nil\>/;'q;"	kind:cons
lexer.token_to_string	lexer.m	/^:- pred token_to_string(token::in, string::out) is det.$/;kq|/^\<token_to_string\>/;'q;"	kind:pred
lexer.variable	lexer.m	/^    ;       variable(string)$/;kq|-;/\<lexer.variable\>/;'q;"	kind:cons
lexer.whitespace_after_dot	lexer.m	/^:- pred whitespace_after_dot(char::in) is semidet.$/;kq|/^\<whitespace_after_dot\>/;'q;"	kind:pred	file:
library.version	library.m	/^:- pred library.version(string::out) is det.$/;kq|/^\<library.version\>/;'q;"	kind:pred
limit_offset	tree_bitset.m	/^                limit_offset    :: int,$/;kq|-;/\<limit_offset\>/;'q;"	kind:fld	file:
limit_overrun	pretty_printer.m	/^:- pred limit_overrun(formatting_limit::in) is semidet.$/;kq|/^\<limit_overrun\>/;'q;"	kind:pred	file:
limited_deconstruct	deconstruct.m	/^:- pred limited_deconstruct(T, noncanon_handling, int, string, int,$/;kq|/^\<limited_deconstruct\>/;'q;"	kind:pred
limited_deconstruct_can	deconstruct.m	/^:- pred limited_deconstruct_can(T::in, int::in,$/;kq|/^\<limited_deconstruct_can\>/;'q;"	kind:pred	file:
limited_deconstruct_cc	deconstruct.m	/^:- pred limited_deconstruct_cc(T::in, int::in,$/;kq|/^\<limited_deconstruct_cc\>/;'q;"	kind:pred
limited_deconstruct_dna	deconstruct.m	/^:- pred limited_deconstruct_dna(T::in, int::in,$/;kq|/^\<limited_deconstruct_dna\>/;'q;"	kind:pred	file:
limited_deconstruct_idcc	deconstruct.m	/^:- pred limited_deconstruct_idcc(T::in, int::in,$/;kq|/^\<limited_deconstruct_idcc\>/;'q;"	kind:pred	file:
line	pprint.m	/^:- func line                = doc.$/;kq|/^\<line\>/;'q;"	kind:func
line	string.m	/^    --->    line(string).$/;kq|-;/\<line\>/;'q;"	kind:cons
line	string.m	/^:- type line$/;kq|-;/\<line\>/;'q;"	kind:type
line_numbers	parsing_utils.m	/^:- type line_numbers == array(int).$/;kq|-;/\<line_numbers\>/;'q;"	kind:type	file:
line_oriented	io.m	/^:- instance stream.line_oriented(io.input_stream, io) where$/;kq|-;/\<line_oriented\>/;'q;"	kind:tci	file:
line_oriented	io.m	/^:- instance stream.line_oriented(io.output_stream, io) where$/;kq|-;/\<line_oriented\>/;'q;"	kind:tci	file:
line_oriented	stream.m	/^:- typeclass stream.line_oriented(Stream, State) <= stream(Stream, State)$/;kq|-;/\<line_oriented\>/;'q;"	kind:tc
linear	pretty_printer.m	/^    --->    linear(int)                 % Print this many functors.$/;kq|-;/\<linear\>/;'q;"	kind:cons
list	cord.m	/^:- func list(cord(T)) = list(T).$/;kq|/^\<list\>/;'q;"	kind:func
list	list.m	/^:- func list(T) ++ list(T) = list(T).$/;kq|/^\<list\>/;'q;"	kind:func
list	list.m	/^:- inst list(I) == list_skel(I).$/;kq|-;/\<list\>/;'q;"	kind:inst
list	list.m	/^:- type list(T)$/;kq|-;/\<list\>/;'q;"	kind:type
list	version_array.m	/^:- func list(version_array(T)) = list(T).$/;kq|/^\<list\>/;'q;"	kind:func
list.[T	list.m	/^    ;       [T | list(T)].$/;kq|-;/\<list.[T\>/;'q;"	kind:cons
list.[]	list.m	/^    --->    []$/;kq|-;/\<list.[]\>/;'q;"	kind:cons
list.all_false	list.m	/^:- pred list.all_false(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.all_false\>/;'q;"	kind:pred
list.all_false_corresponding	list.m	/^:- pred list.all_false_corresponding(pred(X, Y)::in(pred(in, in) is semidet),$/;kq|/^\<list.all_false_corresponding\>/;'q;"	kind:pred
list.all_same	list.m	/^:- pred list.all_same(list(T)::in) is semidet.$/;kq|/^\<list.all_same\>/;'q;"	kind:pred
list.all_same_2	list.m	/^:- pred list.all_same_2(T::in, list(T)::in) is semidet.$/;kq|/^\<list.all_same_2\>/;'q;"	kind:pred	file:
list.all_true	list.m	/^:- pred list.all_true(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.all_true\>/;'q;"	kind:pred
list.all_true_corresponding	list.m	/^:- pred list.all_true_corresponding(pred(X, Y)::in(pred(in, in) is semidet),$/;kq|/^\<list.all_true_corresponding\>/;'q;"	kind:pred
list.append	list.m	/^:- func list.append(list(T), list(T)) = list(T).$/;kq|/^\<list.append\>/;'q;"	kind:func
list.append	list.m	/^:- pred list.append(list(T), list(T), list(T)).$/;kq|/^\<list.append\>/;'q;"	kind:pred
list.chunk	list.m	/^:- func list.chunk(list(T), int) = list(list(T)).$/;kq|/^\<list.chunk\>/;'q;"	kind:func
list.chunk	list.m	/^:- pred list.chunk(list(T)::in, int::in, list(list(T))::out) is det.$/;kq|/^\<list.chunk\>/;'q;"	kind:pred
list.chunk_2	list.m	/^:- pred list.chunk_2(list(T)::in, int::in, list(T)::in, int::in,$/;kq|/^\<list.chunk_2\>/;'q;"	kind:pred	file:
list.condense	list.m	/^:- func list.condense(list(list(T))) = list(T).$/;kq|/^\<list.condense\>/;'q;"	kind:func
list.condense	list.m	/^:- pred list.condense(list(list(T))::in, list(T)::out) is det.$/;kq|/^\<list.condense\>/;'q;"	kind:pred
list.condense_2	list.m	/^:- pred list.condense_2(list(list(T))::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.condense_2\>/;'q;"	kind:pred	file:
list.cons	list.m	/^:- func list.cons(T, list(T)) = list(T).$/;kq|/^\<list.cons\>/;'q;"	kind:func
list.cons	list.m	/^:- pred list.cons(T::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.cons\>/;'q;"	kind:pred
list.contains	list.m	/^:- pred list.contains(list(T)::in, T::in) is semidet.$/;kq|/^\<list.contains\>/;'q;"	kind:pred
list.delete	list.m	/^:- pred list.delete(list(T), T, list(T)).$/;kq|/^\<list.delete\>/;'q;"	kind:pred
list.delete_all	list.m	/^:- func list.delete_all(list(T), T) = list(T).$/;kq|/^\<list.delete_all\>/;'q;"	kind:func
list.delete_all	list.m	/^:- pred list.delete_all(list(T), T, list(T)).$/;kq|/^\<list.delete_all\>/;'q;"	kind:pred
list.delete_elems	list.m	/^:- func list.delete_elems(list(T), list(T)) = list(T).$/;kq|/^\<list.delete_elems\>/;'q;"	kind:func
list.delete_elems	list.m	/^:- pred list.delete_elems(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.delete_elems\>/;'q;"	kind:pred
list.delete_first	list.m	/^:- pred list.delete_first(list(T)::in, T::in, list(T)::out) is semidet.$/;kq|/^\<list.delete_first\>/;'q;"	kind:pred
list.det_drop	list.m	/^:- pred list.det_drop(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.det_drop\>/;'q;"	kind:pred
list.det_head	list.m	/^:- func list.det_head(list(T)) = T.$/;kq|/^\<list.det_head\>/;'q;"	kind:func
list.det_index0	list.m	/^:- func list.det_index0(list(T), int) = T.$/;kq|/^\<list.det_index0\>/;'q;"	kind:func
list.det_index0	list.m	/^:- pred list.det_index0(list(T)::in, int::in, T::out) is det.$/;kq|/^\<list.det_index0\>/;'q;"	kind:pred
list.det_index1	list.m	/^:- func list.det_index1(list(T), int) = T.$/;kq|/^\<list.det_index1\>/;'q;"	kind:func
list.det_index1	list.m	/^:- pred list.det_index1(list(T)::in, int::in, T::out) is det.$/;kq|/^\<list.det_index1\>/;'q;"	kind:pred
list.det_last	list.m	/^:- func list.det_last(list(T)) = T.$/;kq|/^\<list.det_last\>/;'q;"	kind:func
list.det_last	list.m	/^:- pred list.det_last(list(T)::in, T::out) is det.$/;kq|/^\<list.det_last\>/;'q;"	kind:pred
list.det_last_2	list.m	/^:- pred list.det_last_2(T::in, list(T)::in, T::out) is det.$/;kq|/^\<list.det_last_2\>/;'q;"	kind:pred	file:
list.det_replace_nth	list.m	/^:- func list.det_replace_nth(list(T), int, T) = list(T).$/;kq|/^\<list.det_replace_nth\>/;'q;"	kind:func
list.det_replace_nth	list.m	/^:- pred list.det_replace_nth(list(T)::in, int::in, T::in, list(T)::out) is det.$/;kq|/^\<list.det_replace_nth\>/;'q;"	kind:pred
list.det_split_last	list.m	/^:- pred list.det_split_last(list(T)::in, list(T)::out, T::out) is det.$/;kq|/^\<list.det_split_last\>/;'q;"	kind:pred
list.det_split_last_2	list.m	/^:- pred list.det_split_last_2(T::in, list(T)::in, list(T)::out, T::out) is det.$/;kq|/^\<list.det_split_last_2\>/;'q;"	kind:pred	file:
list.det_split_list	list.m	/^:- pred list.det_split_list(int::in, list(T)::in, list(T)::out, list(T)::out)$/;kq|/^\<list.det_split_list\>/;'q;"	kind:pred
list.det_tail	list.m	/^:- func list.det_tail(list(T)) = list(T).$/;kq|/^\<list.det_tail\>/;'q;"	kind:func
list.det_take	list.m	/^:- pred list.det_take(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.det_take\>/;'q;"	kind:pred
list.drop	list.m	/^:- pred list.drop(int::in, list(T)::in, list(T)::out) is semidet.$/;kq|/^\<list.drop\>/;'q;"	kind:pred
list.duplicate	list.m	/^:- func list.duplicate(int, T) = list(T).$/;kq|/^\<list.duplicate\>/;'q;"	kind:func
list.duplicate	list.m	/^:- pred list.duplicate(int::in, T::in, list(T)::out) is det.$/;kq|/^\<list.duplicate\>/;'q;"	kind:pred
list.duplicate_2	list.m	/^:- func list.duplicate_2(int, T, list(T)) = list(T).$/;kq|/^\<list.duplicate_2\>/;'q;"	kind:func	file:
list.empty_list	list.m	/^:- func empty_list = list(T).$/;kq|/^\<empty_list\>/;'q;"	kind:func	file:
list.filter	list.m	/^:- func list.filter(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.filter\>/;'q;"	kind:func
list.filter	list.m	/^:- pred list.filter(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.filter\>/;'q;"	kind:pred
list.filter	list.m	/^:- pred list.filter(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.filter\>/;'q;"	kind:pred
list.filter_map	list.m	/^:- func list.filter_map(func(X) = Y, list(X)) = list(Y).$/;kq|/^\<list.filter_map\>/;'q;"	kind:func
list.filter_map	list.m	/^:- pred list.filter_map(pred(X, Y)::in(pred(in, out) is semidet),$/;kq|/^\<list.filter_map\>/;'q;"	kind:pred
list.filter_map	list.m	/^:- pred list.filter_map(pred(X, Y)::in(pred(in, out) is semidet),$/;kq|/^\<list.filter_map\>/;'q;"	kind:pred
list.filter_map_corresponding	list.m	/^:- func list.filter_map_corresponding(func(A, B) = C, list(A), list(B))$/;kq|/^\<list.filter_map_corresponding\>/;'q;"	kind:func
list.filter_map_corresponding3	list.m	/^:- func list.filter_map_corresponding3(func(A, B, C) = D,$/;kq|/^\<list.filter_map_corresponding3\>/;'q;"	kind:func
list.filter_map_foldl	list.m	/^:- pred list.filter_map_foldl(pred(X, Y, A, A)::in(pred(in, out, in, out)$/;kq|/^\<list.filter_map_foldl\>/;'q;"	kind:pred
list.find_first_map	list.m	/^:- pred list.find_first_map(pred(X, Y)::in(pred(in, out) is semidet),$/;kq|/^\<list.find_first_map\>/;'q;"	kind:pred
list.find_first_map2	list.m	/^:- pred list.find_first_map2(pred(X, A, B)::in(pred(in, out, out) is semidet),$/;kq|/^\<list.find_first_map2\>/;'q;"	kind:pred
list.find_first_map3	list.m	/^:- pred list.find_first_map3($/;kq|/^\<list.find_first_map3\>/;'q;"	kind:pred
list.find_first_match	list.m	/^:- pred list.find_first_match(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.find_first_match\>/;'q;"	kind:pred
list.find_index_of_match	list.m	/^:- pred list.find_index_of_match(pred(T), list(T), int, int).$/;kq|/^\<list.find_index_of_match\>/;'q;"	kind:pred
list.foldl	list.m	/^:- func list.foldl(func(L, A) = A, list(L), A) = A.$/;kq|/^\<list.foldl\>/;'q;"	kind:func
list.foldl	list.m	/^:- pred list.foldl(pred(L, A, A), list(L), A, A).$/;kq|/^\<list.foldl\>/;'q;"	kind:pred
list.foldl2	list.m	/^:- pred list.foldl2(pred(L, A, A, Z, Z), list(L), A, A, Z, Z).$/;kq|/^\<list.foldl2\>/;'q;"	kind:pred
list.foldl2_corresponding	list.m	/^:- pred list.foldl2_corresponding(pred(A, B, C, C, D, D), list(A), list(B),$/;kq|/^\<list.foldl2_corresponding\>/;'q;"	kind:pred
list.foldl2_corresponding3	list.m	/^:- pred list.foldl2_corresponding3(pred(A, B, C, D, D, E, E),$/;kq|/^\<list.foldl2_corresponding3\>/;'q;"	kind:pred
list.foldl3	list.m	/^:- pred list.foldl3(pred(L, A, A, B, B, C, C), list(L),$/;kq|/^\<list.foldl3\>/;'q;"	kind:pred
list.foldl3_corresponding	list.m	/^:- pred list.foldl3_corresponding(pred(A, B, C, C, D, D, E, E),$/;kq|/^\<list.foldl3_corresponding\>/;'q;"	kind:pred
list.foldl3_corresponding3	list.m	/^:- pred list.foldl3_corresponding3(pred(A, B, C, D, D, E, E, F, F),$/;kq|/^\<list.foldl3_corresponding3\>/;'q;"	kind:pred
list.foldl4	list.m	/^:- pred list.foldl4(pred(L, A, A, B, B, C, C, D, D), list(L),$/;kq|/^\<list.foldl4\>/;'q;"	kind:pred
list.foldl4_corresponding3	list.m	/^:- pred list.foldl4_corresponding3(pred(A, B, C, D, D, E, E, F, F, G, G),$/;kq|/^\<list.foldl4_corresponding3\>/;'q;"	kind:pred
list.foldl5	list.m	/^:- pred list.foldl5(pred(L, A, A, B, B, C, C, D, D, E, E), list(L),$/;kq|/^\<list.foldl5\>/;'q;"	kind:pred
list.foldl6	list.m	/^:- pred list.foldl6(pred(L, A, A, B, B, C, C, D, D, E, E, F, F), list(L),$/;kq|/^\<list.foldl6\>/;'q;"	kind:pred
list.foldl_corresponding	list.m	/^:- func list.foldl_corresponding(func(A, B, C) = C, list(A), list(B), C) = C.$/;kq|/^\<list.foldl_corresponding\>/;'q;"	kind:func
list.foldl_corresponding	list.m	/^:- pred list.foldl_corresponding(pred(A, B, C, C), list(A), list(B), C, C).$/;kq|/^\<list.foldl_corresponding\>/;'q;"	kind:pred
list.foldl_corresponding3	list.m	/^:- pred list.foldl_corresponding3(pred(A, B, C, D, D),$/;kq|/^\<list.foldl_corresponding3\>/;'q;"	kind:pred
list.foldr	list.m	/^:- func list.foldr(func(L, A) = A, list(L), A) = A.$/;kq|/^\<list.foldr\>/;'q;"	kind:func
list.foldr	list.m	/^:- pred list.foldr(pred(L, A, A), list(L), A, A).$/;kq|/^\<list.foldr\>/;'q;"	kind:pred
list.foldr2	list.m	/^:- pred list.foldr2(pred(L, A, A, B, B), list(L), A, A, B, B).$/;kq|/^\<list.foldr2\>/;'q;"	kind:pred
list.foldr3	list.m	/^:- pred list.foldr3(pred(L, A, A, B, B, C, C), list(L), A, A, B, B, C, C).$/;kq|/^\<list.foldr3\>/;'q;"	kind:pred
list.head	list.m	/^:- func list.head(list(T)) = T is semidet.$/;kq|/^\<list.head\>/;'q;"	kind:func
list.hosort	list.m	/^:- pred list.hosort(comparison_pred(X)::in(comparison_pred), int::in,$/;kq|/^\<list.hosort\>/;'q;"	kind:pred	file:
list.in_list_skel	list.m	/^:- mode in_list_skel  == list_skel >> list_skel.$/;kq|-;/\<list.in_list_skel\>/;'q;"	kind:mode
list.index0	list.m	/^:- pred list.index0(list(T)::in, int::in, T::out) is semidet.$/;kq|/^\<list.index0\>/;'q;"	kind:pred
list.index1	list.m	/^:- pred list.index1(list(T)::in, int::in, T::out) is semidet.$/;kq|/^\<list.index1\>/;'q;"	kind:pred
list.insert	list.m	/^:- pred list.insert(T, list(T), list(T)).$/;kq|/^\<list.insert\>/;'q;"	kind:pred
list.inst_preserving_append	list.m	/^:- func inst_preserving_append(list(T)::in(list_skel(I =< ground)),$/;kq|/^\<inst_preserving_append\>/;'q;"	kind:func
list.int	list.m	/^:- func int `..` int = list(int).$/;kq|/^\<int\>/;'q;"	kind:func
list.is_empty	list.m	/^:- pred list.is_empty(list(T)::in) is semidet.$/;kq|/^\<list.is_empty\>/;'q;"	kind:pred
list.is_not_empty	list.m	/^:- pred list.is_not_empty(list(T)::in) is semidet.$/;kq|/^\<list.is_not_empty\>/;'q;"	kind:pred
list.last	list.m	/^:- pred list.last(list(T)::in, T::out) is semidet.$/;kq|/^\<list.last\>/;'q;"	kind:pred
list.length	list.m	/^:- func list.length(list(T)) = int.$/;kq|/^\<list.length\>/;'q;"	kind:func
list.length	list.m	/^:- pred list.length(list(_T), int).$/;kq|/^\<list.length\>/;'q;"	kind:pred
list.length_2	list.m	/^:- pred list.length_2(list(T), int, int).$/;kq|/^\<list.length_2\>/;'q;"	kind:pred	file:
list.map	list.m	/^:- func list.map(func(X) = Y, list(X)) = list(Y).$/;kq|/^\<list.map\>/;'q;"	kind:func
list.map	list.m	/^:- pred list.map(pred(X, Y), list(X), list(Y)).$/;kq|/^\<list.map\>/;'q;"	kind:pred
list.map2	list.m	/^:- pred list.map2(pred(A, B, C), list(A), list(B), list(C)).$/;kq|/^\<list.map2\>/;'q;"	kind:pred
list.map2_foldl	list.m	/^:- pred list.map2_foldl(pred(L, M, N, A, A), list(L), list(M), list(N),$/;kq|/^\<list.map2_foldl\>/;'q;"	kind:pred
list.map2_foldl2	list.m	/^:- pred list.map2_foldl2(pred(L, M, N, A, A, B, B), list(L), list(M), list(N),$/;kq|/^\<list.map2_foldl2\>/;'q;"	kind:pred
list.map2_foldl3	list.m	/^:- pred list.map2_foldl3(pred(L, M, N, A, A, B, B, C, C),$/;kq|/^\<list.map2_foldl3\>/;'q;"	kind:pred
list.map2_foldl4	list.m	/^:- pred list.map2_foldl4(pred(L, M, N, A, A, B, B, C, C, D, D),$/;kq|/^\<list.map2_foldl4\>/;'q;"	kind:pred
list.map3	list.m	/^:- pred list.map3(pred(A, B, C, D), list(A), list(B), list(C), list(D)).$/;kq|/^\<list.map3\>/;'q;"	kind:pred
list.map3_foldl	list.m	/^:- pred list.map3_foldl(pred(L, M, N, O, A, A), list(L), list(M), list(N),$/;kq|/^\<list.map3_foldl\>/;'q;"	kind:pred
list.map3_foldl2	list.m	/^:- pred list.map3_foldl2(pred(L, M, N, O, A, A, B, B), list(L),$/;kq|/^\<list.map3_foldl2\>/;'q;"	kind:pred
list.map4	list.m	/^:- pred list.map4(pred(A, B, C, D, E), list(A), list(B), list(C), list(D),$/;kq|/^\<list.map4\>/;'q;"	kind:pred
list.map4_foldl	list.m	/^:- pred list.map4_foldl(pred(L, M, N, O, P, A, A), list(L), list(M), list(N),$/;kq|/^\<list.map4_foldl\>/;'q;"	kind:pred
list.map5	list.m	/^:- pred list.map5(pred(A, B, C, D, E, F), list(A), list(B), list(C), list(D),$/;kq|/^\<list.map5\>/;'q;"	kind:pred
list.map6	list.m	/^:- pred list.map6(pred(A, B, C, D, E, F, G), list(A), list(B), list(C),$/;kq|/^\<list.map6\>/;'q;"	kind:pred
list.map7	list.m	/^:- pred list.map7(pred(A, B, C, D, E, F, G, H), list(A), list(B), list(C),$/;kq|/^\<list.map7\>/;'q;"	kind:pred
list.map8	list.m	/^:- pred list.map8(pred(A, B, C, D, E, F, G, H, I), list(A), list(B), list(C),$/;kq|/^\<list.map8\>/;'q;"	kind:pred
list.map_corresponding	list.m	/^:- func list.map_corresponding(func(A, B) = C, list(A), list(B)) = list(C).$/;kq|/^\<list.map_corresponding\>/;'q;"	kind:func
list.map_corresponding	list.m	/^:- pred list.map_corresponding(pred(A, B, C), list(A), list(B), list(C)).$/;kq|/^\<list.map_corresponding\>/;'q;"	kind:pred
list.map_corresponding3	list.m	/^:- func list.map_corresponding3(func(A, B, C) = D, list(A), list(B), list(C))$/;kq|/^\<list.map_corresponding3\>/;'q;"	kind:func
list.map_corresponding3_foldl	list.m	/^:- pred list.map_corresponding3_foldl(pred(A, B, C, D, E, E),$/;kq|/^\<list.map_corresponding3_foldl\>/;'q;"	kind:pred
list.map_corresponding_foldl	list.m	/^:- pred list.map_corresponding_foldl(pred(A, B, C, D, D),$/;kq|/^\<list.map_corresponding_foldl\>/;'q;"	kind:pred
list.map_corresponding_foldl2	list.m	/^:- pred list.map_corresponding_foldl2(pred(A, B, C, D, D, E, E),$/;kq|/^\<list.map_corresponding_foldl2\>/;'q;"	kind:pred
list.map_corresponding_foldl3	list.m	/^:- pred list.map_corresponding_foldl3(pred(A, B, C, D, D, E, E, F, F),$/;kq|/^\<list.map_corresponding_foldl3\>/;'q;"	kind:pred
list.map_foldl	list.m	/^:- pred list.map_foldl(pred(L, M, A, A), list(L), list(M), A, A).$/;kq|/^\<list.map_foldl\>/;'q;"	kind:pred
list.map_foldl2	list.m	/^:- pred list.map_foldl2(pred(L, M, A, A, B, B), list(L), list(M), A, A, B, B).$/;kq|/^\<list.map_foldl2\>/;'q;"	kind:pred
list.map_foldl3	list.m	/^:- pred list.map_foldl3(pred(L, M, A, A, B, B, C, C), list(L), list(M),$/;kq|/^\<list.map_foldl3\>/;'q;"	kind:pred
list.map_foldl4	list.m	/^:- pred list.map_foldl4(pred(L, M, A, A, B, B, C, C, D, D), list(L), list(M),$/;kq|/^\<list.map_foldl4\>/;'q;"	kind:pred
list.map_foldl5	list.m	/^:- pred list.map_foldl5(pred(L, M, A, A, B, B, C, C, D, D, E, E),$/;kq|/^\<list.map_foldl5\>/;'q;"	kind:pred
list.map_foldl6	list.m	/^:- pred list.map_foldl6(pred(L, M, A, A, B, B, C, C, D, D, E, E, F, F),$/;kq|/^\<list.map_foldl6\>/;'q;"	kind:pred
list.map_foldr	list.m	/^:- pred list.map_foldr(pred(L, M, A, A), list(L), list(M), A, A).$/;kq|/^\<list.map_foldr\>/;'q;"	kind:pred
list.member	list.m	/^:- pred list.member(T, list(T)).$/;kq|/^\<list.member\>/;'q;"	kind:pred
list.member	list.m	/^:- pred list.member(T::out, list(T)::in, list(T)::out) is nondet.$/;kq|/^\<list.member\>/;'q;"	kind:pred
list.member_index0	list.m	/^:- pred list.member_index0(T, list(T), int).$/;kq|/^\<list.member_index0\>/;'q;"	kind:pred
list.merge	list.m	/^:- func list.merge(comparison_func(X), list(X), list(X)) = list(X).$/;kq|/^\<list.merge\>/;'q;"	kind:func
list.merge	list.m	/^:- func list.merge(list(T), list(T)) = list(T).$/;kq|/^\<list.merge\>/;'q;"	kind:func
list.merge	list.m	/^:- pred list.merge(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.merge\>/;'q;"	kind:pred
list.merge	list.m	/^:- pred list.merge(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.merge\>/;'q;"	kind:pred
list.merge_and_remove_dups	list.m	/^:- func list.merge_and_remove_dups(comparison_func(X), list(X), list(X))$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:func
list.merge_and_remove_dups	list.m	/^:- func list.merge_and_remove_dups(list(T), list(T)) = list(T).$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:func
list.merge_and_remove_dups	list.m	/^:- pred list.merge_and_remove_dups(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:pred
list.merge_and_remove_dups	list.m	/^:- pred list.merge_and_remove_dups(list(T)::in, list(T)::in, list(T)::out)$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:pred
list.merge_sort	list.m	/^:- pred list.merge_sort(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.merge_sort\>/;'q;"	kind:pred	file:
list.merge_sort_2	list.m	/^:- pred list.merge_sort_2(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.merge_sort_2\>/;'q;"	kind:pred	file:
list.negated_filter	list.m	/^:- func list.negated_filter(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.negated_filter\>/;'q;"	kind:func
list.negated_filter	list.m	/^:- pred list.negated_filter(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.negated_filter\>/;'q;"	kind:pred
list.non_empty_list	list.m	/^:- inst non_empty_list ---> [ground | ground].$/;kq|-;/\<list.non_empty_list\>/;'q;"	kind:inst
list.nth_member_lookup	list.m	/^:- pred list.nth_member_lookup(list(T)::in, T::in, int::out) is det.$/;kq|/^\<list.nth_member_lookup\>/;'q;"	kind:pred
list.nth_member_search	list.m	/^:- pred list.nth_member_search(list(T)::in, T::in, int::out) is semidet.$/;kq|/^\<list.nth_member_search\>/;'q;"	kind:pred
list.nth_member_search_2	list.m	/^:- pred list.nth_member_search_2(list(T)::in, T::in, int::in, int::out)$/;kq|/^\<list.nth_member_search_2\>/;'q;"	kind:pred	file:
list.out_list_skel	list.m	/^:- mode out_list_skel == free >> list_skel.$/;kq|-;/\<list.out_list_skel\>/;'q;"	kind:mode
list.perm	list.m	/^:- pred list.perm(list(T)::in, list(T)::out) is multi.$/;kq|/^\<list.perm\>/;'q;"	kind:pred
list.remove_adjacent_dups	list.m	/^:- func list.remove_adjacent_dups(list(T)) = list(T).$/;kq|/^\<list.remove_adjacent_dups\>/;'q;"	kind:func
list.remove_adjacent_dups	list.m	/^:- pred list.remove_adjacent_dups(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.remove_adjacent_dups\>/;'q;"	kind:pred
list.remove_adjacent_dups	list.m	/^:- pred list.remove_adjacent_dups(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.remove_adjacent_dups\>/;'q;"	kind:pred
list.remove_adjacent_dups_2	list.m	/^:- pred list.remove_adjacent_dups_2(comparison_pred(T)::in(comparison_pred),$/;kq|/^\<list.remove_adjacent_dups_2\>/;'q;"	kind:pred	file:
list.remove_adjacent_dups_2	list.m	/^:- pred list.remove_adjacent_dups_2(list(T)::in, T::in, list(T)::out) is det.$/;kq|/^\<list.remove_adjacent_dups_2\>/;'q;"	kind:pred	file:
list.remove_dups	list.m	/^:- func list.remove_dups(list(T)) = list(T).$/;kq|/^\<list.remove_dups\>/;'q;"	kind:func
list.remove_dups	list.m	/^:- pred list.remove_dups(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.remove_dups\>/;'q;"	kind:pred
list.remove_dups_2	list.m	/^:- pred list.remove_dups_2(list(T)::in, set_tree234(T)::in, list(T)::out)$/;kq|/^\<list.remove_dups_2\>/;'q;"	kind:pred	file:
list.remove_suffix	list.m	/^:- pred list.remove_suffix(list(T)::in, list(T)::in, list(T)::out) is semidet.$/;kq|/^\<list.remove_suffix\>/;'q;"	kind:pred
list.replace	list.m	/^:- pred list.replace(list(T), T, T, list(T)).$/;kq|/^\<list.replace\>/;'q;"	kind:pred
list.replace_all	list.m	/^:- func list.replace_all(list(T), T, T) = list(T).$/;kq|/^\<list.replace_all\>/;'q;"	kind:func
list.replace_all	list.m	/^:- pred list.replace_all(list(T)::in, T::in, T::in, list(T)::out) is det.$/;kq|/^\<list.replace_all\>/;'q;"	kind:pred
list.replace_first	list.m	/^:- pred list.replace_first(list(T)::in, T::in, T::in, list(T)::out)$/;kq|/^\<list.replace_first\>/;'q;"	kind:pred
list.replace_nth	list.m	/^:- pred list.replace_nth(list(T)::in, int::in, T::in, list(T)::out)$/;kq|/^\<list.replace_nth\>/;'q;"	kind:pred
list.replace_nth_2	list.m	/^:- pred list.replace_nth_2(list(T)::in, int::in, T::in, list(T)::out)$/;kq|/^\<list.replace_nth_2\>/;'q;"	kind:pred	file:
list.reverse	list.m	/^:- func list.reverse(list(T)) = list(T).$/;kq|/^\<list.reverse\>/;'q;"	kind:func
list.reverse	list.m	/^:- pred list.reverse(list(T), list(T)).$/;kq|/^\<list.reverse\>/;'q;"	kind:pred
list.reverse_2	list.m	/^:- pred list.reverse_2(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.reverse_2\>/;'q;"	kind:pred	file:
list.same_length	list.m	/^:- pred list.same_length(list(T1), list(T2)).$/;kq|/^\<list.same_length\>/;'q;"	kind:pred
list.same_length3	list.m	/^:- pred list.same_length3(list(T1)::in, list(T2)::in, list(T3)::in)$/;kq|/^\<list.same_length3\>/;'q;"	kind:pred
list.series	list.m	/^:- func list.series(T, pred(T), func(T) = T) = list(T).$/;kq|/^\<list.series\>/;'q;"	kind:func
list.series_2	list.m	/^:- pred list.series_2(T, pred(T), func(T) = T, list(T), list(T)).$/;kq|/^\<list.series_2\>/;'q;"	kind:pred	file:
list.sort	list.m	/^:- func list.sort(comparison_func(X), list(X)) = list(X).$/;kq|/^\<list.sort\>/;'q;"	kind:func
list.sort	list.m	/^:- func list.sort(list(T)) = list(T).$/;kq|/^\<list.sort\>/;'q;"	kind:func
list.sort	list.m	/^:- pred list.sort(comparison_pred(X)::in(comparison_pred), list(X)::in,$/;kq|/^\<list.sort\>/;'q;"	kind:pred
list.sort	list.m	/^:- pred list.sort(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.sort\>/;'q;"	kind:pred
list.sort_and_remove_dups	list.m	/^:- func list.sort_and_remove_dups(list(T)) = list(T).$/;kq|/^\<list.sort_and_remove_dups\>/;'q;"	kind:func
list.sort_and_remove_dups	list.m	/^:- pred list.sort_and_remove_dups(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.sort_and_remove_dups\>/;'q;"	kind:pred
list.sort_and_remove_dups	list.m	/^:- pred list.sort_and_remove_dups(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.sort_and_remove_dups\>/;'q;"	kind:pred
list.split_last	list.m	/^:- pred list.split_last(list(T)::in, list(T)::out, T::out) is semidet.$/;kq|/^\<list.split_last\>/;'q;"	kind:pred
list.split_list	list.m	/^:- pred list.split_list(int::in, list(T)::in, list(T)::out, list(T)::out)$/;kq|/^\<list.split_list\>/;'q;"	kind:pred
list.split_upto	list.m	/^:- pred list.split_upto(int::in, list(T)::in, list(T)::out, list(T)::out)$/;kq|/^\<list.split_upto\>/;'q;"	kind:pred
list.sublist	list.m	/^:- pred list.sublist(list(T)::in, list(T)::in) is semidet.$/;kq|/^\<list.sublist\>/;'q;"	kind:pred
list.successive_integers	list.m	/^:- pred successive_integers(int::in, int::in, list(int)::in, list(int)::out)$/;kq|/^\<successive_integers\>/;'q;"	kind:pred	file:
list.tail	list.m	/^:- func list.tail(list(T)) = list(T) is semidet.$/;kq|/^\<list.tail\>/;'q;"	kind:func
list.take	list.m	/^:- pred list.take(int::in, list(T)::in, list(T)::out) is semidet.$/;kq|/^\<list.take\>/;'q;"	kind:pred
list.take_upto	list.m	/^:- func list.take_upto(int, list(T)) = list(T).$/;kq|/^\<list.take_upto\>/;'q;"	kind:func
list.take_upto	list.m	/^:- pred list.take_upto(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.take_upto\>/;'q;"	kind:pred
list.takewhile	list.m	/^:- pred list.takewhile(pred(T)::in(pred(in) is semidet), list(T)::in,$/;kq|/^\<list.takewhile\>/;'q;"	kind:pred
list.zip	list.m	/^:- func list.zip(list(T), list(T)) = list(T).$/;kq|/^\<list.zip\>/;'q;"	kind:func
list.zip	list.m	/^:- pred list.zip(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.zip\>/;'q;"	kind:pred
list.zip2	list.m	/^:- pred list.zip2(list(T), list(T), list(T)).$/;kq|/^\<list.zip2\>/;'q;"	kind:pred	file:
list_2	cord.m	/^:- func list_2(list(cord_node(T)), list(T)) = list(T).$/;kq|/^\<list_2\>/;'q;"	kind:func	file:
list_elem	parser.m	/^    ;       list_elem.$/;kq|-;/\<list_elem\>/;'q;"	kind:cons	file:
list_node	cord.m	/^    ;       list_node(T, list(T))$/;kq|-;/\<list_node\>/;'q;"	kind:cons	file:
list_reverse_2	cord.m	/^:- func list_reverse_2(list(A), list(A)) = list(A).$/;kq|/^\<list_reverse_2\>/;'q;"	kind:func	file:
list_skel	list.m	/^:- inst list_skel == list_skel(free).$/;kq|-;/\<list_skel\>/;'q;"	kind:inst
list_skel	list.m	/^:- inst list_skel(I) ---> [] ; [I | list_skel(I)].$/;kq|-;/\<list_skel\>/;'q;"	kind:inst
list_skel_in	list.m	/^:- mode list_skel_in(I)  == list_skel(I) >> list_skel(I).$/;kq|-;/\<list_skel_in\>/;'q;"	kind:mode
list_skel_out	list.m	/^:- mode list_skel_out == list_skel >> ground.$/;kq|-;/\<list_skel_out\>/;'q;"	kind:mode
list_skel_out	list.m	/^:- mode list_skel_out(I) == free >> list_skel(I).$/;kq|-;/\<list_skel_out\>/;'q;"	kind:mode
list_subsumes	term.m	/^:- pred list_subsumes(list(term(T))::in, list(term(T))::in,$/;kq|/^\<list_subsumes\>/;'q;"	kind:pred
list_to_doc	list.m	/^:- func list_to_doc(list(T)) = pretty_printer.doc.$/;kq|/^\<list_to_doc\>/;'q;"	kind:func
list_to_doc	pprint.m	/^:- func list_to_doc(int, list(T)) = doc.$/;kq|/^\<list_to_doc\>/;'q;"	kind:func	file:
list_to_doc_2	list.m	/^:- func list_to_doc_2(list(T)) = doc.$/;kq|/^\<list_to_doc_2\>/;'q;"	kind:func	file:
list_to_queue	queue.m	/^:- func queue.list_to_queue(list(T)) = queue(T).$/;kq|/^\<queue.list_to_queue\>/;'q;"	kind:func
list_to_queue	queue.m	/^:- pred queue.list_to_queue(list(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.list_to_queue\>/;'q;"	kind:pred
list_to_set	fat_sparse_bitset.m	/^:- func list_to_set(list(T)) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
list_to_set	fat_sparse_bitset.m	/^:- pred list_to_set(list(T)::in, fat_sparse_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
list_to_set	set.m	/^:- func set.list_to_set(list(T)) = set(T).$/;kq|/^\<set.list_to_set\>/;'q;"	kind:func
list_to_set	set.m	/^:- pred set.list_to_set(list(T)::in, set(T)::out) is det.$/;kq|/^\<set.list_to_set\>/;'q;"	kind:pred
list_to_set	set_bbbtree.m	/^:- func set_bbbtree.list_to_set(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.list_to_set\>/;'q;"	kind:func
list_to_set	set_bbbtree.m	/^:- pred set_bbbtree.list_to_set(list(T)::in, set_bbbtree(T)::out) is det.$/;kq|/^\<set_bbbtree.list_to_set\>/;'q;"	kind:pred
list_to_set	set_ctree234.m	/^:- func set_ctree234.list_to_set(list(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.list_to_set\>/;'q;"	kind:func
list_to_set	set_ordlist.m	/^:- func set_ordlist.list_to_set(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.list_to_set\>/;'q;"	kind:func
list_to_set	set_ordlist.m	/^:- pred set_ordlist.list_to_set(list(T)::in, set_ordlist(T)::out) is det.$/;kq|/^\<set_ordlist.list_to_set\>/;'q;"	kind:pred
list_to_set	set_tree234.m	/^:- func set_tree234.list_to_set(list(T)) = set_tree234(T).$/;kq|/^\<set_tree234.list_to_set\>/;'q;"	kind:func
list_to_set	set_tree234.m	/^:- pred set_tree234.list_to_set(list(T)::in, set_tree234(T)::out) is det.$/;kq|/^\<set_tree234.list_to_set\>/;'q;"	kind:pred
list_to_set	set_unordlist.m	/^:- func set_unordlist.list_to_set(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.list_to_set\>/;'q;"	kind:func
list_to_set	set_unordlist.m	/^:- pred set_unordlist.list_to_set(list(T)::in, set_unordlist(T)::out) is det.$/;kq|/^\<set_unordlist.list_to_set\>/;'q;"	kind:pred
list_to_set	sparse_bitset.m	/^:- func list_to_set(list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
list_to_set	sparse_bitset.m	/^:- pred list_to_set(list(T)::in, sparse_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
list_to_set	test_bitset.m	/^:- func list_to_set(list(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
list_to_set	test_bitset.m	/^:- pred list_to_set(list(T)::in, test_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
list_to_set	tree_bitset.m	/^:- func list_to_set(list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
list_to_set	tree_bitset.m	/^:- pred list_to_set(list(T)::in, tree_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
list_to_set_2	fat_sparse_bitset.m	/^:- func list_to_set_2(list(T), fat_bitset_impl) = fat_bitset_impl <= enum(T).$/;kq|/^\<list_to_set_2\>/;'q;"	kind:func	file:
list_to_set_2	set_tree234.m	/^:- pred set_tree234.list_to_set_2(list(E)::in, set_tree234(E)::in,$/;kq|/^\<set_tree234.list_to_set_2\>/;'q;"	kind:pred	file:
list_to_set_2	sparse_bitset.m	/^:- func list_to_set_2(list(T), bitset_impl) = bitset_impl <= enum(T).$/;kq|/^\<list_to_set_2\>/;'q;"	kind:func	file:
list_to_set_3	fat_sparse_bitset.m	/^:- pred list_to_set_3(list(T)::in, int::in, int::in, int::out,$/;kq|/^\<list_to_set_3\>/;'q;"	kind:pred	file:
list_to_set_3	sparse_bitset.m	/^:- pred list_to_set_3(list(T)::in, int::in, int::in, int::out,$/;kq|/^\<list_to_set_3\>/;'q;"	kind:pred	file:
list_to_set_r	set_bbbtree.m	/^:- pred set_bbbtree.list_to_set_r(list(T)::in, set_bbbtree(T)::out, int::in)$/;kq|/^\<set_bbbtree.list_to_set_r\>/;'q;"	kind:pred	file:
lists	array2d.m	/^:- func lists(array2d(T)) = list(list(T)).$/;kq|/^\<lists\>/;'q;"	kind:func
lists	version_array2d.m	/^:- func lists(version_array2d(T)) = list(list(T)).$/;kq|/^\<lists\>/;'q;"	kind:func
lists_2	array2d.m	/^:- func lists_2(int, int, int, array(T), list(T), list(list(T))) =$/;kq|/^\<lists_2\>/;'q;"	kind:func	file:
lists_2	version_array2d.m	/^:- func lists_2(int, int, int, version_array(T), list(T), list(list(T))) =$/;kq|/^\<lists_2\>/;'q;"	kind:func	file:
literal	robdd.m	/^:- type literal(T)$/;kq|-;/\<literal\>/;'q;"	kind:type
ln	math.m	/^:- func math.ln(float) = float.$/;kq|/^\<math.ln\>/;'q;"	kind:func
local_deconstruct	deconstruct.m	/^:- pred local_deconstruct(T, noncanon_handling, string, int, int, list(univ)).$/;kq|/^\<local_deconstruct\>/;'q;"	kind:pred	file:
local_time_offset	calendar.m	/^:- pred local_time_offset(duration::out, io::di, io::uo) is det.$/;kq|/^\<local_time_offset\>/;'q;"	kind:pred
local_univ_named_arg	deconstruct.m	/^:- pred local_univ_named_arg(T, noncanon_handling, string, univ).$/;kq|/^\<local_univ_named_arg\>/;'q;"	kind:pred	file:
localtime	time.m	/^:- func time.localtime(time_t) = tm.$/;kq|/^\<time.localtime\>/;'q;"	kind:func
lock_globals	io.m	/^:- pred io.lock_globals(io::di, io::uo) is det.$/;kq|/^\<io.lock_globals\>/;'q;"	kind:pred	file:
lock_stream_db	io.m	/^:- pred io.lock_stream_db(io::di, io::uo) is det.$/;kq|/^\<io.lock_stream_db\>/;'q;"	kind:pred	file:
log	math.m	/^:- func math.log(float, float) = float.$/;kq|/^\<math.log\>/;'q;"	kind:func
log10	math.m	/^:- func math.log10(float) = float.$/;kq|/^\<math.log10\>/;'q;"	kind:func
log10printbase	integer.m	/^:- func log10printbase = int.$/;kq|/^\<log10printbase\>/;'q;"	kind:func	file:
log2	int.m	/^:- func int.log2(int) = int.$/;kq|/^\<int.log2\>/;'q;"	kind:func
log2	int.m	/^:- pred int.log2(int::in, int::out) is det.$/;kq|/^\<int.log2\>/;'q;"	kind:pred
log2	math.m	/^:- func math.log2(float) = float.$/;kq|/^\<math.log2\>/;'q;"	kind:func
log2_2	int.m	/^:- pred int.log2_2(int, int, int).$/;kq|/^\<int.log2_2\>/;'q;"	kind:pred	file:
log2base	integer.m	/^:- func log2base = int.$/;kq|/^\<log2base\>/;'q;"	kind:func	file:
log_threadscope_message	benchmarking.m	/^:- pred log_threadscope_message(string::in, io::di, io::uo) is det.$/;kq|/^\<log_threadscope_message\>/;'q;"	kind:pred
long_option	getopt.m	/^                long_option     :: pred(string, OptionType),$/;kq|-;/\<long_option\>/;'q;"	kind:fld	file:
long_option	getopt_io.m	/^                long_option     :: pred(string, OptionType),$/;kq|-;/\<long_option\>/;'q;"	kind:fld	file:
lookup	array.m	/^:- func array.lookup(array(T), int) = T.$/;kq|/^\<array.lookup\>/;'q;"	kind:func
lookup	array.m	/^:- pred array.lookup(array(T), int, T).$/;kq|/^\<array.lookup\>/;'q;"	kind:pred
lookup	bimap.m	/^:- func bimap.lookup(bimap(K, V), K) = V.$/;kq|/^\<bimap.lookup\>/;'q;"	kind:func
lookup	bimap.m	/^:- pred bimap.lookup(bimap(K, V)::in, K::in, V::out) is det.$/;kq|/^\<bimap.lookup\>/;'q;"	kind:pred
lookup	bt_array.m	/^:- func bt_array.lookup(bt_array(T), int) = T.$/;kq|/^\<bt_array.lookup\>/;'q;"	kind:func
lookup	bt_array.m	/^:- pred bt_array.lookup(bt_array(T)::in, int::in, T::out) is det.$/;kq|/^\<bt_array.lookup\>/;'q;"	kind:pred
lookup	hash_table.m	/^:- func lookup(hash_table(K, V), K) = V.$/;kq|/^\<lookup\>/;'q;"	kind:func
lookup	injection.m	/^:- func injection.lookup(injection(K, V), K) = V.$/;kq|/^\<injection.lookup\>/;'q;"	kind:func
lookup	injection.m	/^:- pred injection.lookup(injection(K, V)::in, K::in, V::out) is det.$/;kq|/^\<injection.lookup\>/;'q;"	kind:pred
lookup	map.m	/^:- func map.lookup(map(K, V), K) = V.$/;kq|/^\<map.lookup\>/;'q;"	kind:func
lookup	map.m	/^:- pred map.lookup(map(K, V)::in, K::in, V::out) is det.$/;kq|/^\<map.lookup\>/;'q;"	kind:pred
lookup	multi_map.m	/^:- func multi_map.lookup(multi_map(K, V), K) = list(V).$/;kq|/^\<multi_map.lookup\>/;'q;"	kind:func
lookup	multi_map.m	/^:- pred multi_map.lookup(multi_map(K, V)::in, K::in, list(V)::out) is det.$/;kq|/^\<multi_map.lookup\>/;'q;"	kind:pred
lookup	rbtree.m	/^:- func rbtree.lookup(rbtree(K, V), K) = V.$/;kq|/^\<rbtree.lookup\>/;'q;"	kind:func
lookup	rbtree.m	/^:- pred rbtree.lookup(rbtree(K, V)::in, K::in, V::out) is det.$/;kq|/^\<rbtree.lookup\>/;'q;"	kind:pred
lookup	tree234.m	/^:- func tree234.lookup(tree234(K, V), K) = V.$/;kq|/^\<tree234.lookup\>/;'q;"	kind:func
lookup	tree234.m	/^:- pred tree234.lookup(tree234(K, V)::in, K::in, V::out) is det.$/;kq|/^\<tree234.lookup\>/;'q;"	kind:pred
lookup	version_array.m	/^:- func lookup(version_array(T), int) = T.$/;kq|/^\<lookup\>/;'q;"	kind:func
lookup	version_hash_table.m	/^:- func lookup(version_hash_table(K, V), K) = V.$/;kq|/^\<lookup\>/;'q;"	kind:func
lookup	version_store.m	/^:- func lookup(version_store(S), mutvar(T, S)) = T.$/;kq|/^\<lookup\>/;'q;"	kind:func
lookup_accumulating_option	getopt.m	/^:- func getopt.lookup_accumulating_option(option_table(Option), Option) =$/;kq|/^\<getopt.lookup_accumulating_option\>/;'q;"	kind:func
lookup_accumulating_option	getopt.m	/^:- pred getopt.lookup_accumulating_option(option_table(Option)::in,$/;kq|/^\<getopt.lookup_accumulating_option\>/;'q;"	kind:pred
lookup_accumulating_option	getopt_io.m	/^:- func getopt_io.lookup_accumulating_option(option_table(Option), Option) =$/;kq|/^\<getopt_io.lookup_accumulating_option\>/;'q;"	kind:func
lookup_accumulating_option	getopt_io.m	/^:- pred getopt_io.lookup_accumulating_option(option_table(Option)::in,$/;kq|/^\<getopt_io.lookup_accumulating_option\>/;'q;"	kind:pred
lookup_binary_prefix_op	ops.m	/^    pred ops.lookup_binary_prefix_op(Table::in, string::in,$/;kq|-;/\<lookup_binary_prefix_op\>/;'q;"	kind:tcm
lookup_binary_prefix_op	ops.m	/^    pred(ops.lookup_binary_prefix_op\/5) is$/;kq|-;/\<lookup_binary_prefix_op\>/;'q;"	kind:tcim	file:
lookup_bool_option	getopt.m	/^:- func getopt.lookup_bool_option(option_table(Option), Option) = bool.$/;kq|/^\<getopt.lookup_bool_option\>/;'q;"	kind:func
lookup_bool_option	getopt.m	/^:- pred getopt.lookup_bool_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_bool_option\>/;'q;"	kind:pred
lookup_bool_option	getopt_io.m	/^:- func getopt_io.lookup_bool_option(option_table(Option), Option) = bool.$/;kq|/^\<getopt_io.lookup_bool_option\>/;'q;"	kind:func
lookup_bool_option	getopt_io.m	/^:- pred getopt_io.lookup_bool_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_bool_option\>/;'q;"	kind:pred
lookup_from	digraph.m	/^:- func digraph.lookup_from(digraph(T), digraph_key(T)) = set(digraph_key(T)).$/;kq|/^\<digraph.lookup_from\>/;'q;"	kind:func
lookup_from	digraph.m	/^:- pred digraph.lookup_from(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_from\>/;'q;"	kind:pred
lookup_infix_op	ops.m	/^    pred lookup_infix_op(Table::in, string::in, ops.priority::out,$/;kq|-;/\<lookup_infix_op\>/;'q;"	kind:tcm
lookup_infix_op	ops.m	/^    pred(ops.lookup_infix_op\/5) is ops.lookup_mercury_infix_op,$/;kq|-;/\<lookup_infix_op\>/;'q;"	kind:tcim	file:
lookup_int_option	getopt.m	/^:- func getopt.lookup_int_option(option_table(Option), Option) = int.$/;kq|/^\<getopt.lookup_int_option\>/;'q;"	kind:func
lookup_int_option	getopt.m	/^:- pred getopt.lookup_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_int_option\>/;'q;"	kind:pred
lookup_int_option	getopt_io.m	/^:- func getopt_io.lookup_int_option(option_table(Option), Option) = int.$/;kq|/^\<getopt_io.lookup_int_option\>/;'q;"	kind:func
lookup_int_option	getopt_io.m	/^:- pred getopt_io.lookup_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_int_option\>/;'q;"	kind:pred
lookup_key	digraph.m	/^:- func digraph.lookup_key(digraph(T), T) = digraph_key(T).$/;kq|/^\<digraph.lookup_key\>/;'q;"	kind:func
lookup_key	digraph.m	/^:- pred digraph.lookup_key(digraph(T)::in, T::in, digraph_key(T)::out)$/;kq|/^\<digraph.lookup_key\>/;'q;"	kind:pred
lookup_key_set_from	digraph.m	/^:- func digraph.lookup_key_set_from(digraph(T), digraph_key(T)) =$/;kq|/^\<digraph.lookup_key_set_from\>/;'q;"	kind:func
lookup_key_set_from	digraph.m	/^:- pred digraph.lookup_key_set_from(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_key_set_from\>/;'q;"	kind:pred
lookup_key_set_to	digraph.m	/^:- func digraph.lookup_key_set_to(digraph(T), digraph_key(T)) =$/;kq|/^\<digraph.lookup_key_set_to\>/;'q;"	kind:func
lookup_key_set_to	digraph.m	/^:- pred digraph.lookup_key_set_to(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_key_set_to\>/;'q;"	kind:pred
lookup_maybe_int_option	getopt.m	/^:- func getopt.lookup_maybe_int_option(option_table(Option), Option) =$/;kq|/^\<getopt.lookup_maybe_int_option\>/;'q;"	kind:func
lookup_maybe_int_option	getopt.m	/^:- pred getopt.lookup_maybe_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_maybe_int_option\>/;'q;"	kind:pred
lookup_maybe_int_option	getopt_io.m	/^:- func getopt_io.lookup_maybe_int_option(option_table(Option), Option) =$/;kq|/^\<getopt_io.lookup_maybe_int_option\>/;'q;"	kind:func
lookup_maybe_int_option	getopt_io.m	/^:- pred getopt_io.lookup_maybe_int_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_maybe_int_option\>/;'q;"	kind:pred
lookup_maybe_string_option	getopt.m	/^:- func getopt.lookup_maybe_string_option(option_table(Option), Option) =$/;kq|/^\<getopt.lookup_maybe_string_option\>/;'q;"	kind:func
lookup_maybe_string_option	getopt.m	/^:- pred getopt.lookup_maybe_string_option(option_table(Option)::in,$/;kq|/^\<getopt.lookup_maybe_string_option\>/;'q;"	kind:pred
lookup_maybe_string_option	getopt_io.m	/^:- func getopt_io.lookup_maybe_string_option(option_table(Option), Option) =$/;kq|/^\<getopt_io.lookup_maybe_string_option\>/;'q;"	kind:func
lookup_maybe_string_option	getopt_io.m	/^:- pred getopt_io.lookup_maybe_string_option(option_table(Option)::in,$/;kq|/^\<getopt_io.lookup_maybe_string_option\>/;'q;"	kind:pred
lookup_mercury_binary_prefix_op	ops.m	/^:- pred ops.lookup_mercury_binary_prefix_op(mercury_op_table::in, string::in,$/;kq|/^\<ops.lookup_mercury_binary_prefix_op\>/;'q;"	kind:pred	file:
lookup_mercury_infix_op	ops.m	/^:- pred ops.lookup_mercury_infix_op(mercury_op_table::in, string::in,$/;kq|/^\<ops.lookup_mercury_infix_op\>/;'q;"	kind:pred	file:
lookup_mercury_op	ops.m	/^:- pred ops.lookup_mercury_op(mercury_op_table::in, string::in) is semidet.$/;kq|/^\<ops.lookup_mercury_op\>/;'q;"	kind:pred	file:
lookup_mercury_op_infos	ops.m	/^:- pred ops.lookup_mercury_op_infos(mercury_op_table::in, string::in,$/;kq|/^\<ops.lookup_mercury_op_infos\>/;'q;"	kind:pred	file:
lookup_mercury_operator_term	ops.m	/^:- pred ops.lookup_mercury_operator_term(mercury_op_table::in,$/;kq|/^\<ops.lookup_mercury_operator_term\>/;'q;"	kind:pred	file:
lookup_mercury_postfix_op	ops.m	/^:- pred ops.lookup_mercury_postfix_op(mercury_op_table::in,$/;kq|/^\<ops.lookup_mercury_postfix_op\>/;'q;"	kind:pred	file:
lookup_mercury_prefix_op	ops.m	/^:- pred ops.lookup_mercury_prefix_op(mercury_op_table::in,$/;kq|/^\<ops.lookup_mercury_prefix_op\>/;'q;"	kind:pred	file:
lookup_name	varset.m	/^:- func varset.lookup_name(varset(T), var(T)) = string.$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:func
lookup_name	varset.m	/^:- func varset.lookup_name(varset(T), var(T), string) = string.$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:func
lookup_name	varset.m	/^:- pred varset.lookup_name(varset(T)::in, var(T)::in, string::in, string::out)$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:pred
lookup_name	varset.m	/^:- pred varset.lookup_name(varset(T)::in, var(T)::in, string::out) is det.$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:pred
lookup_op	ops.m	/^    pred ops.lookup_op(Table::in, string::in) is semidet,$/;kq|-;/\<lookup_op\>/;'q;"	kind:tcm
lookup_op	ops.m	/^    pred(ops.lookup_op\/2) is ops.lookup_mercury_op,$/;kq|-;/\<lookup_op\>/;'q;"	kind:tcim	file:
lookup_op_infos	ops.m	/^    pred ops.lookup_op_infos(Table::in, string::in,$/;kq|-;/\<lookup_op_infos\>/;'q;"	kind:tcm
lookup_op_infos	ops.m	/^    pred(ops.lookup_op_infos\/4) is ops.lookup_mercury_op_infos,$/;kq|-;/\<lookup_op_infos\>/;'q;"	kind:tcim	file:
lookup_operator_term	ops.m	/^    pred ops.lookup_operator_term(Table::in, ops.priority::out,$/;kq|-;/\<lookup_operator_term\>/;'q;"	kind:tcm
lookup_operator_term	ops.m	/^    pred(ops.lookup_operator_term\/4) is ops.lookup_mercury_operator_term,$/;kq|-;/\<lookup_operator_term\>/;'q;"	kind:tcim	file:
lookup_postfix_op	ops.m	/^    pred ops.lookup_postfix_op(Table::in, string::in, ops.priority::out,$/;kq|-;/\<lookup_postfix_op\>/;'q;"	kind:tcm
lookup_postfix_op	ops.m	/^    pred(ops.lookup_postfix_op\/4) is ops.lookup_mercury_postfix_op,$/;kq|-;/\<lookup_postfix_op\>/;'q;"	kind:tcim	file:
lookup_prefix_op	ops.m	/^    pred ops.lookup_prefix_op(Table::in, string::in,$/;kq|-;/\<lookup_prefix_op\>/;'q;"	kind:tcm
lookup_prefix_op	ops.m	/^    pred(ops.lookup_prefix_op\/4) is ops.lookup_mercury_prefix_op,$/;kq|-;/\<lookup_prefix_op\>/;'q;"	kind:tcim	file:
lookup_string_option	getopt.m	/^:- func getopt.lookup_string_option(option_table(Option), Option) = string.$/;kq|/^\<getopt.lookup_string_option\>/;'q;"	kind:func
lookup_string_option	getopt.m	/^:- pred getopt.lookup_string_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt.lookup_string_option\>/;'q;"	kind:pred
lookup_string_option	getopt_io.m	/^:- func getopt_io.lookup_string_option(option_table(Option), Option) = string.$/;kq|/^\<getopt_io.lookup_string_option\>/;'q;"	kind:func
lookup_string_option	getopt_io.m	/^:- pred getopt_io.lookup_string_option(option_table(Option)::in, Option::in,$/;kq|/^\<getopt_io.lookup_string_option\>/;'q;"	kind:pred
lookup_to	digraph.m	/^:- func digraph.lookup_to(digraph(T), digraph_key(T)) = set(digraph_key(T)).$/;kq|/^\<digraph.lookup_to\>/;'q;"	kind:func
lookup_to	digraph.m	/^:- pred digraph.lookup_to(digraph(T)::in, digraph_key(T)::in,$/;kq|/^\<digraph.lookup_to\>/;'q;"	kind:pred
lookup_token_action	lexer.m	/^:- pred lookup_token_action(char::in, get_token_action::out) is semidet.$/;kq|/^\<lookup_token_action\>/;'q;"	kind:pred	file:
lookup_vars	varset.m	/^:- func varset.lookup_vars(varset(T)) = substitution(T).$/;kq|/^\<varset.lookup_vars\>/;'q;"	kind:func
lookup_vars	varset.m	/^:- pred varset.lookup_vars(varset(T)::in, substitution(T)::out) is det.$/;kq|/^\<varset.lookup_vars\>/;'q;"	kind:pred
lookup_vertex	digraph.m	/^:- func digraph.lookup_vertex(digraph(T), digraph_key(T)) = T.$/;kq|/^\<digraph.lookup_vertex\>/;'q;"	kind:func
lookup_vertex	digraph.m	/^:- pred digraph.lookup_vertex(digraph(T)::in, digraph_key(T)::in, T::out)$/;kq|/^\<digraph.lookup_vertex\>/;'q;"	kind:pred
loop_active	table_builtin.m	/^    ;       loop_active.$/;kq|-;/\<loop_active\>/;'q;"	kind:cons
loop_inactive	table_builtin.m	/^    --->    loop_inactive$/;kq|-;/\<loop_inactive\>/;'q;"	kind:cons
loop_status	table_builtin.m	/^:- type loop_status$/;kq|-;/\<loop_status\>/;'q;"	kind:type
low_to_high	fat_sparse_bitset.m	/^    --->    low_to_high$/;kq|-;/\<low_to_high\>/;'q;"	kind:cons	file:
low_to_high	sparse_bitset.m	/^    --->    low_to_high$/;kq|-;/\<low_to_high\>/;'q;"	kind:cons	file:
low_to_high	tree_bitset.m	/^    --->    low_to_high$/;kq|-;/\<low_to_high\>/;'q;"	kind:cons	file:
lowbitmask	integer.m	/^:- func lowbitmask = int.$/;kq|/^\<lowbitmask\>/;'q;"	kind:func	file:
lower_bound_lookup	map.m	/^:- pred map.lower_bound_lookup(map(K, V)::in, K::in, K::out, V::out) is det.$/;kq|/^\<map.lower_bound_lookup\>/;'q;"	kind:pred
lower_bound_lookup	rbtree.m	/^:- pred rbtree.lower_bound_lookup(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.lower_bound_lookup\>/;'q;"	kind:pred
lower_bound_lookup	tree234.m	/^:- pred tree234.lower_bound_lookup(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.lower_bound_lookup\>/;'q;"	kind:pred
lower_bound_search	map.m	/^:- pred map.lower_bound_search(map(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<map.lower_bound_search\>/;'q;"	kind:pred
lower_bound_search	rbtree.m	/^:- pred rbtree.lower_bound_search(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.lower_bound_search\>/;'q;"	kind:pred
lower_bound_search	tree234.m	/^:- pred tree234.lower_bound_search(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.lower_bound_search\>/;'q;"	kind:pred
lower_upper	char.m	/^:- pred char.lower_upper(char, char).$/;kq|/^\<char.lower_upper\>/;'q;"	kind:pred
lowlevel_float_to_string	string.m	/^:- pred string.lowlevel_float_to_string(float::in, string::uo) is det.$/;kq|/^\<string.lowlevel_float_to_string\>/;'q;"	kind:pred	file:
lpad	string.m	/^:- func lpad(char, int, string) = string.$/;kq|/^\<lpad\>/;'q;"	kind:func	file:
lstrip	string.m	/^:- func string.lstrip(string) = string.$/;kq|/^\<string.lstrip\>/;'q;"	kind:func
lstrip_pred	string.m	/^:- func string.lstrip_pred(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.lstrip_pred\>/;'q;"	kind:func
magic_exception_result	exception.m	/^:- pred magic_exception_result(exception_result({})::out(cannot_fail))$/;kq|/^\<magic_exception_result\>/;'q;"	kind:pred
make_attrs_from_sources	term_to_xml.m	/^:- func make_attrs_from_sources(maybe(string), maybe(int), type_desc,$/;kq|/^\<make_attrs_from_sources\>/;'q;"	kind:func	file:
make_bitset_elem	sparse_bitset.m	/^:- func make_bitset_elem(int, int) = bitset_elem.$/;kq|/^\<make_bitset_elem\>/;'q;"	kind:func	file:
make_clique_map	digraph.m	/^:- pred digraph.make_clique_map(digraph(T)::in,$/;kq|/^\<digraph.make_clique_map\>/;'q;"	kind:pred	file:
make_clique_map_2	digraph.m	/^:- pred digraph.make_clique_map_2(digraph_key(set(T))::in, digraph_key(T)::in,$/;kq|/^\<digraph.make_clique_map_2\>/;'q;"	kind:pred	file:
make_dir_open_result_eof	dir.m	/^:- func make_dir_open_result_eof = io.result({dir.stream, string}).$/;kq|/^\<make_dir_open_result_eof\>/;'q;"	kind:func	file:
make_dir_open_result_error	dir.m	/^:- pred make_dir_open_result_error(io.system_error::in,$/;kq|/^\<make_dir_open_result_error\>/;'q;"	kind:pred	file:
make_directory	dir.m	/^:- pred dir.make_directory(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<dir.make_directory\>/;'q;"	kind:pred
make_du_functor	term_to_xml.m	/^:- func make_du_functor(string, int) = maybe_functor_info.$/;kq|/^\<make_du_functor\>/;'q;"	kind:func	file:
make_empty_array	array.m	/^:- func array.make_empty_array = (array(T)::array_uo) is det.$/;kq|/^\<array.make_empty_array\>/;'q;"	kind:func
make_empty_array	array.m	/^:- pred array.make_empty_array(array(T)::array_uo) is det.$/;kq|/^\<array.make_empty_array\>/;'q;"	kind:pred
make_empty_array	bt_array.m	/^:- func bt_array.make_empty_array(int) = bt_array(T).$/;kq|/^\<bt_array.make_empty_array\>/;'q;"	kind:func
make_empty_array	bt_array.m	/^:- pred bt_array.make_empty_array(int::in, bt_array(T)::out) is det.$/;kq|/^\<bt_array.make_empty_array\>/;'q;"	kind:pred
make_equiv	robdd.m	/^:- func make_equiv(equiv_vars(T)) = robdd(T).$/;kq|/^\<make_equiv\>/;'q;"	kind:func
make_equiv_2	robdd.m	/^:- func make_equiv_2(assoc_list(var(T)), vars(T)) = robdd(T).$/;kq|/^\<make_equiv_2\>/;'q;"	kind:func	file:
make_err_msg	io.m	/^:- pred io.make_err_msg(io.system_error::in, string::in, string::out,$/;kq|/^\<io.make_err_msg\>/;'q;"	kind:pred
make_err_msg	io.m	/^:- pred io.make_err_msg(string::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.make_err_msg\>/;'q;"	kind:pred	file:
make_error	parser.m	/^:- func make_error(state(Ops, T), string) = parse(U).$/;kq|/^\<make_error\>/;'q;"	kind:func	file:
make_fixed_arity_type_ctor_desc	erlang_rtti_implementation.m	/^:- func make_fixed_arity_type_ctor_desc(type_ctor_info_evaled)$/;kq|/^\<make_fixed_arity_type_ctor_desc\>/;'q;"	kind:func	file:
make_fixed_arity_type_info	erlang_rtti_implementation.m	/^:- pred make_fixed_arity_type_info(type_ctor_info_evaled::in,$/;kq|/^\<make_fixed_arity_type_info\>/;'q;"	kind:pred	file:
make_format	string.m	/^:- func make_format(list(char), maybe(list(char)),$/;kq|/^\<make_format\>/;'q;"	kind:func	file:
make_format_dotnet	string.m	/^:- func make_format_dotnet(list(char), maybe(list(char)),$/;kq|/^\<make_format_dotnet\>/;'q;"	kind:func	file:
make_format_sprintf	string.m	/^:- func make_format_sprintf(list(char), maybe(list(char)),$/;kq|/^\<make_format_sprintf\>/;'q;"	kind:func	file:
make_func_type_ctor_desc	erlang_rtti_implementation.m	/^:- func make_func_type_ctor_desc(int) = type_ctor_desc.$/;kq|/^\<make_func_type_ctor_desc\>/;'q;"	kind:func	file:
make_io_error	io.m	/^:- func io.make_io_error(string) = io.error.$/;kq|/^\<io.make_io_error\>/;'q;"	kind:func
make_io_maybe_partial_res_1_error_string	io.m	/^:- pred make_io_maybe_partial_res_1_error_string(string::in,$/;kq|/^\<make_io_maybe_partial_res_1_error_string\>/;'q;"	kind:pred	file:
make_io_maybe_partial_res_1_ok_string	io.m	/^:- func make_io_maybe_partial_res_1_ok_string(string)$/;kq|/^\<make_io_maybe_partial_res_1_ok_string\>/;'q;"	kind:func	file:
make_io_res_0_error	io.m	/^:- pred make_io_res_0_error(io.system_error::in, string::in, io.res::out,$/;kq|/^\<make_io_res_0_error\>/;'q;"	kind:pred	file:
make_io_res_0_error_msg	io.m	/^:- func make_io_res_0_error_msg(string) = io.res.$/;kq|/^\<make_io_res_0_error_msg\>/;'q;"	kind:func	file:
make_io_res_0_ok	io.m	/^:- func make_io_res_0_ok = io.res.$/;kq|/^\<make_io_res_0_ok\>/;'q;"	kind:func	file:
make_io_res_1_error_file_type	io.m	/^:- pred make_io_res_1_error_file_type(io.system_error::in,$/;kq|/^\<make_io_res_1_error_file_type\>/;'q;"	kind:pred	file:
make_io_res_1_error_string	io.m	/^:- pred make_io_res_1_error_string(io.system_error::in,$/;kq|/^\<make_io_res_1_error_string\>/;'q;"	kind:pred	file:
make_io_res_1_ok_file_type	io.m	/^:- func make_io_res_1_ok_file_type(file_type) = io.res(file_type).$/;kq|/^\<make_io_res_1_ok_file_type\>/;'q;"	kind:func	file:
make_io_res_1_ok_string	io.m	/^:- func make_io_res_1_ok_string(string) = io.res(string).$/;kq|/^\<make_io_res_1_ok_string\>/;'q;"	kind:func	file:
make_io_state	exception.m	/^:- impure pred make_io_state(io::uo) is det.$/;kq|/^\<make_io_state\>/;'q;"	kind:pred	file:
make_leaf_node	tree_bitset.m	/^:- func make_leaf_node(int, int) = leaf_node.$/;kq|/^\<make_leaf_node\>/;'q;"	kind:func	file:
make_maybe_win32_err_msg	io.m	/^:- pred io.make_maybe_win32_err_msg(io.system_error::in,$/;kq|/^\<io.make_maybe_win32_err_msg\>/;'q;"	kind:pred
make_mkdir_res_error	dir.m	/^:- pred dir.make_mkdir_res_error(io.system_error::in, io.res::out,$/;kq|/^\<dir.make_mkdir_res_error\>/;'q;"	kind:pred	file:
make_mkdir_res_exists	dir.m	/^:- pred dir.make_mkdir_res_exists(io.system_error::in,$/;kq|/^\<dir.make_mkdir_res_exists\>/;'q;"	kind:pred	file:
make_mkdir_res_ok	dir.m	/^:- func dir.make_mkdir_res_ok = io.res.$/;kq|/^\<dir.make_mkdir_res_ok\>/;'q;"	kind:func	file:
make_node	robdd.m	/^:- func make_node(var(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<make_node\>/;'q;"	kind:func	file:
make_partition	eqvclass.m	/^:- pred eqvclass.make_partition(list(T)::in, partition_id::in,$/;kq|/^\<eqvclass.make_partition\>/;'q;"	kind:pred	file:
make_path_name	dir.m	/^:- func dir.make_path_name(string, string) = string.$/;kq|/^\<dir.make_path_name\>/;'q;"	kind:func
make_pred_type_ctor_desc	erlang_rtti_implementation.m	/^:- func make_pred_type_ctor_desc(int) = type_ctor_desc.$/;kq|/^\<make_pred_type_ctor_desc\>/;'q;"	kind:func	file:
make_reduced_graph	digraph.m	/^:- pred digraph.make_reduced_graph(clique_map(T)::in,$/;kq|/^\<digraph.make_reduced_graph\>/;'q;"	kind:pred	file:
make_room	bit_buffer.write.m	/^:- pred make_room(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<make_room\>/;'q;"	kind:pred
make_simple_element	term_to_xml.m	/^:- pred make_simple_element(type_desc::in, maybe_functor_info::in,$/;kq|/^\<make_simple_element\>/;'q;"	kind:pred	file:
make_single_directory	dir.m	/^:- pred dir.make_single_directory(string::in, io.res::out, io::di, io::uo)$/;kq|/^\<dir.make_single_directory\>/;'q;"	kind:pred
make_single_directory_2	dir.m	/^:- pred dir.make_single_directory_2(int::in, string::in, io.res::out,$/;kq|/^\<dir.make_single_directory_2\>/;'q;"	kind:pred	file:
make_singleton_set	fat_sparse_bitset.m	/^:- func make_singleton_set(T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:func
make_singleton_set	set.m	/^:- func set.make_singleton_set(T) = set(T).$/;kq|/^\<set.make_singleton_set\>/;'q;"	kind:func
make_singleton_set	set_bbbtree.m	/^:- func set_bbbtree.make_singleton_set(T) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.make_singleton_set\>/;'q;"	kind:func
make_singleton_set	set_ctree234.m	/^:- func set_ctree234.make_singleton_set(T) = set_ctree234(T).$/;kq|/^\<set_ctree234.make_singleton_set\>/;'q;"	kind:func
make_singleton_set	set_ordlist.m	/^:- func set_ordlist.make_singleton_set(T) = set_ordlist(T).$/;kq|/^\<set_ordlist.make_singleton_set\>/;'q;"	kind:func
make_singleton_set	set_tree234.m	/^:- func set_tree234.make_singleton_set(T) = set_tree234(T).$/;kq|/^\<set_tree234.make_singleton_set\>/;'q;"	kind:func
make_singleton_set	set_unordlist.m	/^:- func set_unordlist.make_singleton_set(T) = set_unordlist(T).$/;kq|/^\<set_unordlist.make_singleton_set\>/;'q;"	kind:func
make_singleton_set	sparse_bitset.m	/^:- func make_singleton_set(T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:func
make_singleton_set	test_bitset.m	/^:- func make_singleton_set(T) = test_bitset(T) <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:func
make_singleton_set	test_bitset.m	/^:- pred make_singleton_set(test_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:pred
make_singleton_set	tree_bitset.m	/^:- func make_singleton_set(T) = tree_bitset(T) <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:func
make_symlink	io.m	/^:- pred io.make_symlink(string::in, string::in, io.res::out, io::di, io::uo)$/;kq|/^\<io.make_symlink\>/;'q;"	kind:pred
make_symlink_2	io.m	/^:- pred io.make_symlink_2(string::in, string::in, int::out,$/;kq|/^\<io.make_symlink_2\>/;'q;"	kind:pred	file:
make_temp	io.m	/^:- pred io.make_temp(string::in, string::in, string::out, io::di, io::uo)$/;kq|/^\<io.make_temp\>/;'q;"	kind:pred
make_temp	io.m	/^:- pred io.make_temp(string::out, io::di, io::uo) is det.$/;kq|/^\<io.make_temp\>/;'q;"	kind:pred
make_tuple_type_ctor_desc	erlang_rtti_implementation.m	/^:- func make_tuple_type_ctor_desc(int) = type_ctor_desc.$/;kq|/^\<make_tuple_type_ctor_desc\>/;'q;"	kind:func	file:
make_type	type_desc.m	/^:- func make_type(type_ctor_desc, list(type_desc)) = type_desc.$/;kq|/^\<make_type\>/;'q;"	kind:func
make_type_ctor_desc	type_desc.m	/^:- pred make_type_ctor_desc(rtti_implementation.type_info::in,$/;kq|/^\<make_type_ctor_desc\>/;'q;"	kind:pred	file:
make_type_ctor_desc_with_arity	type_desc.m	/^:- pred make_type_ctor_desc_with_arity(int::in,$/;kq|/^\<make_type_ctor_desc_with_arity\>/;'q;"	kind:pred	file:
make_type_desc	erlang_rtti_implementation.m	/^:- pred make_type_desc(type_ctor_desc::in, list(type_desc)::in,$/;kq|/^\<make_type_desc\>/;'q;"	kind:pred
make_type_info	rtti_implementation.m	/^:- func make_type_info(type_ctor_info, int, list(pseudo_type_info)) =$/;kq|/^\<make_type_info\>/;'q;"	kind:func	file:
make_unique_element	term_to_xml.m	/^:- pred make_unique_element(type_desc::in, maybe_functor_info::in,$/;kq|/^\<make_unique_element\>/;'q;"	kind:pred	file:
make_win32_dir_open_result_ok	dir.m	/^:- pred make_win32_dir_open_result_ok(dir.stream::in, string::in,$/;kq|/^\<make_win32_dir_open_result_ok\>/;'q;"	kind:pred	file:
make_win32_err_msg	io.m	/^:- pred io.make_win32_err_msg(io.system_error::in,$/;kq|/^\<io.make_win32_err_msg\>/;'q;"	kind:pred
mangle	term_to_xml.m	/^:- func mangle(string) = string.$/;kq|/^\<mangle\>/;'q;"	kind:func	file:
mangle_char	term_to_xml.m	/^:- pred mangle_char(char::in, list(char)::in, list(char)::out) is det.$/;kq|/^\<mangle_char\>/;'q;"	kind:pred	file:
mantissa_digits	float.m	/^:- func float.mantissa_digits = int.$/;kq|/^\<float.mantissa_digits\>/;'q;"	kind:func
map	array.m	/^:- func array.map(func(T1) = T2, array(T1)) = array(T2).$/;kq|/^\<array.map\>/;'q;"	kind:func
map	array.m	/^:- pred array.map(pred(T1, T2), array(T1), array(T2)).$/;kq|/^\<array.map\>/;'q;"	kind:pred
map	cord.m	/^:- func map(func(T) = U, cord(T)) = cord(U).$/;kq|/^\<map\>/;'q;"	kind:func
map	list.m	/^:- func list.map(func(X) = Y, list(X)) = list(Y).$/;kq|/^\<list.map\>/;'q;"	kind:func
map	list.m	/^:- pred list.map(pred(X, Y), list(X), list(Y)).$/;kq|/^\<list.map\>/;'q;"	kind:pred
map	map.m	/^:- type map(K, V)   ==  tree234(K, V).$/;kq|-;/\<map\>/;'q;"	kind:type
map	set.m	/^:- func set.map(func(T1) = T2, set(T1)) = set(T2).$/;kq|/^\<set.map\>/;'q;"	kind:func
map	set.m	/^:- pred set.map(pred(T1, T2), set(T1), set(T2)).$/;kq|/^\<set.map\>/;'q;"	kind:pred
map	set_bbbtree.m	/^:- func set_bbbtree.map(func(T1) = T2, set_bbbtree(T1)) = set_bbbtree(T2).$/;kq|/^\<set_bbbtree.map\>/;'q;"	kind:func
map	set_ctree234.m	/^:- func set_ctree234.map(func(T1) = T2, set_ctree234(T1)) = set_ctree234(T2).$/;kq|/^\<set_ctree234.map\>/;'q;"	kind:func
map	set_ctree234.m	/^:- pred set_ctree234.map(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_ctree234.map\>/;'q;"	kind:pred
map	set_ordlist.m	/^:- func set_ordlist.map(func(T1) = T2, set_ordlist(T1)) = set_ordlist(T2).$/;kq|/^\<set_ordlist.map\>/;'q;"	kind:func
map	set_tree234.m	/^:- func set_tree234.map(func(T1) = T2, set_tree234(T1)) = set_tree234(T2).$/;kq|/^\<set_tree234.map\>/;'q;"	kind:func
map	set_tree234.m	/^:- pred set_tree234.map(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_tree234.map\>/;'q;"	kind:pred
map	set_unordlist.m	/^:- func set_unordlist.map(func(T1) = T2, set_unordlist(T1))$/;kq|/^\<set_unordlist.map\>/;'q;"	kind:func
map.'det_elem	map.m	/^:- func 'det_elem :='(K, map(K, V), V) = map(K, V).$/;kq|/^\<'det_elem\>/;'q;"	kind:func
map.'elem	map.m	/^:- func 'elem :='(K, map(K, V), V) = map(K, V).$/;kq|/^\<'elem\>/;'q;"	kind:func
map.apply_to_list	map.m	/^:- func map.apply_to_list(list(K), map(K, V)) = list(V).$/;kq|/^\<map.apply_to_list\>/;'q;"	kind:func
map.apply_to_list	map.m	/^:- pred map.apply_to_list(list(K)::in, map(K, V)::in, list(V)::out) is det.$/;kq|/^\<map.apply_to_list\>/;'q;"	kind:pred
map.common_subset	map.m	/^:- func map.common_subset(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.common_subset\>/;'q;"	kind:func
map.common_subset_2	map.m	/^:- func map.common_subset_2(assoc_list(K, V), assoc_list(K, V),$/;kq|/^\<map.common_subset_2\>/;'q;"	kind:func	file:
map.contains	map.m	/^:- pred map.contains(map(K, _V)::in, K::in) is semidet.$/;kq|/^\<map.contains\>/;'q;"	kind:pred
map.count	map.m	/^:- func map.count(map(K, V)) = int.$/;kq|/^\<map.count\>/;'q;"	kind:func
map.count	map.m	/^:- pred map.count(map(K, V)::in, int::out) is det.$/;kq|/^\<map.count\>/;'q;"	kind:pred
map.delete	map.m	/^:- func map.delete(map(K, V), K) = map(K, V).$/;kq|/^\<map.delete\>/;'q;"	kind:func
map.delete	map.m	/^:- pred map.delete(K::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.delete\>/;'q;"	kind:pred
map.delete_list	map.m	/^:- func map.delete_list(map(K, V), list(K)) = map(K, V).$/;kq|/^\<map.delete_list\>/;'q;"	kind:func
map.delete_list	map.m	/^:- pred map.delete_list(list(K)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.delete_list\>/;'q;"	kind:pred
map.delete_sorted_list	map.m	/^:- func map.delete_sorted_list(map(K, V), list(K)) = map(K, V).$/;kq|/^\<map.delete_sorted_list\>/;'q;"	kind:func
map.delete_sorted_list	map.m	/^:- pred map.delete_sorted_list(list(K)::in, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.delete_sorted_list\>/;'q;"	kind:pred
map.delete_sorted_list_loop	map.m	/^:- pred map.delete_sorted_list_loop(list(K)::in,$/;kq|/^\<map.delete_sorted_list_loop\>/;'q;"	kind:pred	file:
map.det_elem	map.m	/^:- func map.det_elem(K, map(K, V)) = V.$/;kq|/^\<map.det_elem\>/;'q;"	kind:func
map.det_insert	map.m	/^:- func map.det_insert(map(K, V), K, V) = map(K, V).$/;kq|/^\<map.det_insert\>/;'q;"	kind:func
map.det_insert	map.m	/^:- pred map.det_insert(K::in, V::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.det_insert\>/;'q;"	kind:pred
map.det_insert_from_assoc_list	map.m	/^:- func map.det_insert_from_assoc_list(map(K, V), assoc_list(K, V))$/;kq|/^\<map.det_insert_from_assoc_list\>/;'q;"	kind:func
map.det_insert_from_assoc_list	map.m	/^:- pred map.det_insert_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<map.det_insert_from_assoc_list\>/;'q;"	kind:pred
map.det_intersect	map.m	/^:- func map.det_intersect(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.det_intersect\>/;'q;"	kind:func
map.det_intersect	map.m	/^:- pred map.det_intersect(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.det_intersect\>/;'q;"	kind:pred
map.det_max_key	map.m	/^:- func map.det_max_key(map(K, V)) = K.$/;kq|/^\<map.det_max_key\>/;'q;"	kind:func
map.det_min_key	map.m	/^:- func map.det_min_key(map(K, V)) = K.$/;kq|/^\<map.det_min_key\>/;'q;"	kind:func
map.det_remove	map.m	/^:- pred map.det_remove(K::in, V::out, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.det_remove\>/;'q;"	kind:pred
map.det_transform_value	map.m	/^:- func map.det_transform_value(func(V) = V, K, map(K, V)) = map(K, V).$/;kq|/^\<map.det_transform_value\>/;'q;"	kind:func
map.det_transform_value	map.m	/^:- pred map.det_transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<map.det_transform_value\>/;'q;"	kind:pred
map.det_union	map.m	/^:- func map.det_union(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.det_union\>/;'q;"	kind:func
map.det_union	map.m	/^:- pred map.det_union(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.det_union\>/;'q;"	kind:pred
map.det_update	map.m	/^:- func map.det_update(map(K, V), K, V) = map(K, V).$/;kq|/^\<map.det_update\>/;'q;"	kind:func
map.det_update	map.m	/^:- pred map.det_update(K::in, V::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.det_update\>/;'q;"	kind:pred
map.elem	map.m	/^:- func map.elem(K, map(K, V)) = V is semidet.$/;kq|/^\<map.elem\>/;'q;"	kind:func
map.equal	map.m	/^:- pred map.equal(map(K, V)::in, map(K, V)::in) is semidet.$/;kq|/^\<map.equal\>/;'q;"	kind:pred
map.foldl	map.m	/^:- func map.foldl(func(K, V, A) = A, map(K, V), A) = A.$/;kq|/^\<map.foldl\>/;'q;"	kind:func
map.foldl	map.m	/^:- pred map.foldl(pred(K, V, A, A), map(K, V), A, A).$/;kq|/^\<map.foldl\>/;'q;"	kind:pred
map.foldl2	map.m	/^:- pred map.foldl2(pred(K, V, A, A, B, B), map(K, V), A, A, B, B).$/;kq|/^\<map.foldl2\>/;'q;"	kind:pred
map.foldl2_values	map.m	/^:- pred map.foldl2_values(pred(V, A, A, B, B), map(K, V), A, A, B, B).$/;kq|/^\<map.foldl2_values\>/;'q;"	kind:pred
map.foldl3	map.m	/^:- pred map.foldl3(pred(K, V, A, A, B, B, C, C), map(K, V), A, A, B, B, C, C).$/;kq|/^\<map.foldl3\>/;'q;"	kind:pred
map.foldl3_values	map.m	/^:- pred map.foldl3_values(pred(V, A, A, B, B, C, C), map(K, V),$/;kq|/^\<map.foldl3_values\>/;'q;"	kind:pred
map.foldl4	map.m	/^:- pred map.foldl4(pred(K, V, A, A, B, B, C, C, D, D), map(K, V),$/;kq|/^\<map.foldl4\>/;'q;"	kind:pred
map.foldl_values	map.m	/^:- pred map.foldl_values(pred(V, A, A), map(K, V), A, A).$/;kq|/^\<map.foldl_values\>/;'q;"	kind:pred
map.foldr	map.m	/^:- func map.foldr(func(K, V, A) = A, map(K, V), A) = A.$/;kq|/^\<map.foldr\>/;'q;"	kind:func
map.foldr	map.m	/^:- pred map.foldr(pred(K, V, A, A), map(K, V), A, A).$/;kq|/^\<map.foldr\>/;'q;"	kind:pred
map.foldr2	map.m	/^:- pred map.foldr2(pred(K, V, A, A, B, B), map(K, V), A, A, B, B).$/;kq|/^\<map.foldr2\>/;'q;"	kind:pred
map.foldr3	map.m	/^:- pred map.foldr3(pred(K, V, A, A, B, B, C, C), map(K, V), A, A, B, B, C, C).$/;kq|/^\<map.foldr3\>/;'q;"	kind:pred
map.foldr4	map.m	/^:- pred map.foldr4(pred(K, V, A, A, B, B, C, C, D, D), map(K, V),$/;kq|/^\<map.foldr4\>/;'q;"	kind:pred
map.from_assoc_list	map.m	/^:- func map.from_assoc_list(assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.from_assoc_list\>/;'q;"	kind:func
map.from_assoc_list	map.m	/^:- pred map.from_assoc_list(assoc_list(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.from_assoc_list\>/;'q;"	kind:pred
map.from_corresponding_lists	map.m	/^:- func map.from_corresponding_lists(list(K), list(V)) = map(K, V).$/;kq|/^\<map.from_corresponding_lists\>/;'q;"	kind:func
map.from_corresponding_lists	map.m	/^:- pred map.from_corresponding_lists(list(K)::in, list(V)::in, map(K, V)::out)$/;kq|/^\<map.from_corresponding_lists\>/;'q;"	kind:pred
map.from_rev_sorted_assoc_list	map.m	/^:- func map.from_rev_sorted_assoc_list(assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.from_rev_sorted_assoc_list\>/;'q;"	kind:func
map.from_rev_sorted_assoc_list	map.m	/^:- pred map.from_rev_sorted_assoc_list(assoc_list(K, V)::in, map(K, V)::out)$/;kq|/^\<map.from_rev_sorted_assoc_list\>/;'q;"	kind:pred
map.from_sorted_assoc_list	map.m	/^:- func map.from_sorted_assoc_list(assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.from_sorted_assoc_list\>/;'q;"	kind:func
map.from_sorted_assoc_list	map.m	/^:- pred map.from_sorted_assoc_list(assoc_list(K, V)::in, map(K, V)::out)$/;kq|/^\<map.from_sorted_assoc_list\>/;'q;"	kind:pred
map.init	map.m	/^:- func map.init = (map(K, V)::uo) is det.$/;kq|/^\<map.init\>/;'q;"	kind:func
map.init	map.m	/^:- pred map.init(map(_, _)::uo) is det.$/;kq|/^\<map.init\>/;'q;"	kind:pred
map.insert	map.m	/^:- func map.insert(map(K, V), K, V) = map(K, V) is semidet.$/;kq|/^\<map.insert\>/;'q;"	kind:func
map.insert	map.m	/^:- pred map.insert(K::in, V::in, map(K, V)::in, map(K, V)::out) is semidet.$/;kq|/^\<map.insert\>/;'q;"	kind:pred
map.intersect	map.m	/^:- func map.intersect(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.intersect\>/;'q;"	kind:func
map.intersect	map.m	/^:- pred map.intersect(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.intersect\>/;'q;"	kind:pred
map.intersect_2	map.m	/^:- pred map.intersect_2(assoc_list(K, V), assoc_list(K, V), pred(V, V, V),$/;kq|/^\<map.intersect_2\>/;'q;"	kind:pred	file:
map.inverse_search	map.m	/^:- pred map.inverse_search(map(K, V)::in, V::in, K::out) is nondet.$/;kq|/^\<map.inverse_search\>/;'q;"	kind:pred
map.is_empty	map.m	/^:- pred map.is_empty(map(_, _)::in) is semidet.$/;kq|/^\<map.is_empty\>/;'q;"	kind:pred
map.keys	map.m	/^:- func map.keys(map(K, _V)) = list(K).$/;kq|/^\<map.keys\>/;'q;"	kind:func
map.keys	map.m	/^:- pred map.keys(map(K, _V)::in, list(K)::out) is det.$/;kq|/^\<map.keys\>/;'q;"	kind:pred
map.keys_and_values	map.m	/^:- pred map.keys_and_values(map(K, V)::in, list(K)::out, list(V)::out) is det.$/;kq|/^\<map.keys_and_values\>/;'q;"	kind:pred
map.lookup	map.m	/^:- func map.lookup(map(K, V), K) = V.$/;kq|/^\<map.lookup\>/;'q;"	kind:func
map.lookup	map.m	/^:- pred map.lookup(map(K, V)::in, K::in, V::out) is det.$/;kq|/^\<map.lookup\>/;'q;"	kind:pred
map.lower_bound_lookup	map.m	/^:- pred map.lower_bound_lookup(map(K, V)::in, K::in, K::out, V::out) is det.$/;kq|/^\<map.lower_bound_lookup\>/;'q;"	kind:pred
map.lower_bound_search	map.m	/^:- pred map.lower_bound_search(map(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<map.lower_bound_search\>/;'q;"	kind:pred
map.map_foldl	map.m	/^:- pred map.map_foldl(pred(K, V, W, A, A), map(K, V), map(K, W), A, A).$/;kq|/^\<map.map_foldl\>/;'q;"	kind:pred
map.map_foldl2	map.m	/^:- pred map.map_foldl2(pred(K, V, W, A, A, B, B), map(K, V), map(K, W),$/;kq|/^\<map.map_foldl2\>/;'q;"	kind:pred
map.map_foldl3	map.m	/^:- pred map.map_foldl3(pred(K, V, W, A, A, B, B, C, C), map(K, V), map(K, W),$/;kq|/^\<map.map_foldl3\>/;'q;"	kind:pred
map.map_values	map.m	/^:- func map.map_values(func(K, V) = W, map(K, V)) = map(K, W).$/;kq|/^\<map.map_values\>/;'q;"	kind:func
map.map_values	map.m	/^:- pred map.map_values(pred(K, V, W), map(K, V), map(K, W)).$/;kq|/^\<map.map_values\>/;'q;"	kind:pred
map.map_values_foldl	map.m	/^:- pred map.map_values_foldl(pred(V, W, A, A), map(K, V), map(K, W), A, A).$/;kq|/^\<map.map_values_foldl\>/;'q;"	kind:pred
map.map_values_foldl2	map.m	/^:- pred map.map_values_foldl2(pred(V, W, A, A, B, B), map(K, V), map(K, W),$/;kq|/^\<map.map_values_foldl2\>/;'q;"	kind:pred
map.map_values_foldl3	map.m	/^:- pred map.map_values_foldl3(pred(V, W, A, A, B, B, C, C),$/;kq|/^\<map.map_values_foldl3\>/;'q;"	kind:pred
map.map_values_only	map.m	/^:- func map.map_values_only(func(V) = W, map(K, V)) = map(K, W).$/;kq|/^\<map.map_values_only\>/;'q;"	kind:func
map.map_values_only	map.m	/^:- pred map.map_values_only(pred(V, W), map(K, V), map(K, W)).$/;kq|/^\<map.map_values_only\>/;'q;"	kind:pred
map.max_key	map.m	/^:- func map.max_key(map(K, V)) = K is semidet.$/;kq|/^\<map.max_key\>/;'q;"	kind:func
map.member	map.m	/^:- pred map.member(map(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<map.member\>/;'q;"	kind:pred
map.merge	map.m	/^:- func map.merge(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.merge\>/;'q;"	kind:func
map.merge	map.m	/^:- pred map.merge(map(K, V)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.merge\>/;'q;"	kind:pred
map.min_key	map.m	/^:- func map.min_key(map(K,V)) = K is semidet.$/;kq|/^\<map.min_key\>/;'q;"	kind:func
map.old_merge	map.m	/^:- func map.old_merge(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.old_merge\>/;'q;"	kind:func
map.old_merge	map.m	/^:- pred map.old_merge(map(K, V)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.old_merge\>/;'q;"	kind:pred
map.optimize	map.m	/^:- func map.optimize(map(K, V)) = map(K, V).$/;kq|/^\<map.optimize\>/;'q;"	kind:func
map.optimize	map.m	/^:- pred map.optimize(map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.optimize\>/;'q;"	kind:pred
map.overlay	map.m	/^:- func map.overlay(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.overlay\>/;'q;"	kind:func
map.overlay	map.m	/^:- pred map.overlay(map(K, V)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.overlay\>/;'q;"	kind:pred
map.overlay_2	map.m	/^:- pred map.overlay_2(assoc_list(K, V)::in, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.overlay_2\>/;'q;"	kind:pred	file:
map.overlay_large_map	map.m	/^:- func map.overlay_large_map(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.overlay_large_map\>/;'q;"	kind:func
map.overlay_large_map	map.m	/^:- pred map.overlay_large_map(map(K, V)::in, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.overlay_large_map\>/;'q;"	kind:pred
map.overlay_large_map_2	map.m	/^:- pred map.overlay_large_map_2(assoc_list(K, V)::in,$/;kq|/^\<map.overlay_large_map_2\>/;'q;"	kind:pred	file:
map.remove	map.m	/^:- pred map.remove(K::in, V::out, map(K, V)::in, map(K, V)::out) is semidet.$/;kq|/^\<map.remove\>/;'q;"	kind:pred
map.remove_smallest	map.m	/^:- pred map.remove_smallest(K::out, V::out, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.remove_smallest\>/;'q;"	kind:pred
map.reverse_list_acc	map.m	/^:- pred reverse_list_acc(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<reverse_list_acc\>/;'q;"	kind:pred	file:
map.reverse_map	map.m	/^:- func map.reverse_map(map(K, V)) = map(V, set(K)).$/;kq|/^\<map.reverse_map\>/;'q;"	kind:func
map.reverse_map_2	map.m	/^:- pred map.reverse_map_2(K::in, V::in,$/;kq|/^\<map.reverse_map_2\>/;'q;"	kind:pred	file:
map.search	map.m	/^:- func map.search(map(K, V), K) = V is semidet.$/;kq|/^\<map.search\>/;'q;"	kind:func
map.search	map.m	/^:- pred map.search(map(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<map.search\>/;'q;"	kind:pred
map.search_insert	map.m	/^:- pred map.search_insert(K::in, V::in, maybe(V)::out,$/;kq|/^\<map.search_insert\>/;'q;"	kind:pred
map.select	map.m	/^:- func map.select(map(K, V), set(K)) = map(K, V).$/;kq|/^\<map.select\>/;'q;"	kind:func
map.select	map.m	/^:- pred map.select(map(K, V)::in, set(K)::in, map(K, V)::out) is det.$/;kq|/^\<map.select\>/;'q;"	kind:pred
map.select_loop	map.m	/^:- pred map.select_loop(list(K)::in, map(K, V)::in,$/;kq|/^\<map.select_loop\>/;'q;"	kind:pred	file:
map.select_sorted_list	map.m	/^:- func map.select_sorted_list(map(K, V), list(K)) = map(K, V).$/;kq|/^\<map.select_sorted_list\>/;'q;"	kind:func
map.select_sorted_list	map.m	/^:- pred map.select_sorted_list(map(K, V)::in, list(K)::in, map(K, V)::out)$/;kq|/^\<map.select_sorted_list\>/;'q;"	kind:pred
map.set	map.m	/^:- func map.set(map(K, V), K, V) = map(K, V).$/;kq|/^\<map.set\>/;'q;"	kind:func
map.set	map.m	/^:- pred map.set(K::in, V::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.set\>/;'q;"	kind:pred
map.set_from_assoc_list	map.m	/^:- func map.set_from_assoc_list(map(K, V), assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.set_from_assoc_list\>/;'q;"	kind:func
map.set_from_assoc_list	map.m	/^:- pred map.set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<map.set_from_assoc_list\>/;'q;"	kind:pred
map.singleton	map.m	/^:- func map.singleton(K, V) = map(K, V).$/;kq|/^\<map.singleton\>/;'q;"	kind:func
map.sorted_keys	map.m	/^:- func map.sorted_keys(map(K, _V)) = list(K).$/;kq|/^\<map.sorted_keys\>/;'q;"	kind:func
map.sorted_keys	map.m	/^:- pred map.sorted_keys(map(K, _V)::in, list(K)::out) is det.$/;kq|/^\<map.sorted_keys\>/;'q;"	kind:pred
map.to_assoc_list	map.m	/^:- func map.to_assoc_list(map(K, V)) = assoc_list(K, V).$/;kq|/^\<map.to_assoc_list\>/;'q;"	kind:func
map.to_assoc_list	map.m	/^:- pred map.to_assoc_list(map(K, V)::in, assoc_list(K, V)::out) is det.$/;kq|/^\<map.to_assoc_list\>/;'q;"	kind:pred
map.to_sorted_assoc_list	map.m	/^:- func map.to_sorted_assoc_list(map(K, V)) = assoc_list(K, V).$/;kq|/^\<map.to_sorted_assoc_list\>/;'q;"	kind:func
map.to_sorted_assoc_list	map.m	/^:- pred map.to_sorted_assoc_list(map(K, V)::in, assoc_list(K, V)::out) is det.$/;kq|/^\<map.to_sorted_assoc_list\>/;'q;"	kind:pred
map.transform_value	map.m	/^:- pred map.transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<map.transform_value\>/;'q;"	kind:pred
map.union	map.m	/^:- func map.union(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.union\>/;'q;"	kind:func
map.union	map.m	/^:- pred map.union(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.union\>/;'q;"	kind:pred
map.union_2	map.m	/^:- pred map.union_2(assoc_list(K, V), assoc_list(K, V), pred(V, V, V),$/;kq|/^\<map.union_2\>/;'q;"	kind:pred	file:
map.update	map.m	/^:- func map.update(map(K, V), K, V) = map(K, V) is semidet.$/;kq|/^\<map.update\>/;'q;"	kind:func
map.update	map.m	/^:- pred map.update(K::in, V::in, map(K, V)::in, map(K, V)::out) is semidet.$/;kq|/^\<map.update\>/;'q;"	kind:pred
map.upper_bound_lookup	map.m	/^:- pred map.upper_bound_lookup(map(K, V)::in, K::in, K::out, V::out) is det.$/;kq|/^\<map.upper_bound_lookup\>/;'q;"	kind:pred
map.upper_bound_search	map.m	/^:- pred map.upper_bound_search(map(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<map.upper_bound_search\>/;'q;"	kind:pred
map.values	map.m	/^:- func map.values(map(_K, V)) = list(V).$/;kq|/^\<map.values\>/;'q;"	kind:func
map.values	map.m	/^:- pred map.values(map(_K, V)::in, list(V)::out) is det.$/;kq|/^\<map.values\>/;'q;"	kind:pred
map2	list.m	/^:- pred list.map2(pred(A, B, C), list(A), list(B), list(C)).$/;kq|/^\<list.map2\>/;'q;"	kind:pred
map2_foldl	list.m	/^:- pred list.map2_foldl(pred(L, M, N, A, A), list(L), list(M), list(N),$/;kq|/^\<list.map2_foldl\>/;'q;"	kind:pred
map2_foldl2	list.m	/^:- pred list.map2_foldl2(pred(L, M, N, A, A, B, B), list(L), list(M), list(N),$/;kq|/^\<list.map2_foldl2\>/;'q;"	kind:pred
map2_foldl3	list.m	/^:- pred list.map2_foldl3(pred(L, M, N, A, A, B, B, C, C),$/;kq|/^\<list.map2_foldl3\>/;'q;"	kind:pred
map2_foldl4	list.m	/^:- pred list.map2_foldl4(pred(L, M, N, A, A, B, B, C, C, D, D),$/;kq|/^\<list.map2_foldl4\>/;'q;"	kind:pred
map3	list.m	/^:- pred list.map3(pred(A, B, C, D), list(A), list(B), list(C), list(D)).$/;kq|/^\<list.map3\>/;'q;"	kind:pred
map3_foldl	list.m	/^:- pred list.map3_foldl(pred(L, M, N, O, A, A), list(L), list(M), list(N),$/;kq|/^\<list.map3_foldl\>/;'q;"	kind:pred
map3_foldl2	list.m	/^:- pred list.map3_foldl2(pred(L, M, N, O, A, A, B, B), list(L),$/;kq|/^\<list.map3_foldl2\>/;'q;"	kind:pred
map4	list.m	/^:- pred list.map4(pred(A, B, C, D, E), list(A), list(B), list(C), list(D),$/;kq|/^\<list.map4\>/;'q;"	kind:pred
map4_foldl	list.m	/^:- pred list.map4_foldl(pred(L, M, N, O, P, A, A), list(L), list(M), list(N),$/;kq|/^\<list.map4_foldl\>/;'q;"	kind:pred
map5	list.m	/^:- pred list.map5(pred(A, B, C, D, E, F), list(A), list(B), list(C), list(D),$/;kq|/^\<list.map5\>/;'q;"	kind:pred
map6	list.m	/^:- pred list.map6(pred(A, B, C, D, E, F, G), list(A), list(B), list(C),$/;kq|/^\<list.map6\>/;'q;"	kind:pred
map7	list.m	/^:- pred list.map7(pred(A, B, C, D, E, F, G, H), list(A), list(B), list(C),$/;kq|/^\<list.map7\>/;'q;"	kind:pred
map8	list.m	/^:- pred list.map8(pred(A, B, C, D, E, F, G, H, I), list(A), list(B), list(C),$/;kq|/^\<list.map8\>/;'q;"	kind:pred
map_2	array.m	/^:- pred array.map_2(int::in, int::in, pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<array.map_2\>/;'q;"	kind:pred	file:
map_corresponding	list.m	/^:- func list.map_corresponding(func(A, B) = C, list(A), list(B)) = list(C).$/;kq|/^\<list.map_corresponding\>/;'q;"	kind:func
map_corresponding	list.m	/^:- pred list.map_corresponding(pred(A, B, C), list(A), list(B), list(C)).$/;kq|/^\<list.map_corresponding\>/;'q;"	kind:pred
map_corresponding3	list.m	/^:- func list.map_corresponding3(func(A, B, C) = D, list(A), list(B), list(C))$/;kq|/^\<list.map_corresponding3\>/;'q;"	kind:func
map_corresponding3_foldl	list.m	/^:- pred list.map_corresponding3_foldl(pred(A, B, C, D, E, E),$/;kq|/^\<list.map_corresponding3_foldl\>/;'q;"	kind:pred
map_corresponding_foldl	array.m	/^:- pred array.map_corresponding_foldl(pred(T1, T2, T3, T4, T4),$/;kq|/^\<array.map_corresponding_foldl\>/;'q;"	kind:pred
map_corresponding_foldl	list.m	/^:- pred list.map_corresponding_foldl(pred(A, B, C, D, D),$/;kq|/^\<list.map_corresponding_foldl\>/;'q;"	kind:pred
map_corresponding_foldl2	list.m	/^:- pred list.map_corresponding_foldl2(pred(A, B, C, D, D, E, E),$/;kq|/^\<list.map_corresponding_foldl2\>/;'q;"	kind:pred
map_corresponding_foldl3	list.m	/^:- pred list.map_corresponding_foldl3(pred(A, B, C, D, D, E, E, F, F),$/;kq|/^\<list.map_corresponding_foldl3\>/;'q;"	kind:pred
map_corresponding_foldl_2	array.m	/^:- pred array.map_corresponding_foldl_2(pred(T1, T2, T3, T4, T4),$/;kq|/^\<array.map_corresponding_foldl_2\>/;'q;"	kind:pred	file:
map_digraph_key_set	digraph.m	/^:- func map_digraph_key_set(key_map(T), digraph_key_set(T)) =$/;kq|/^\<map_digraph_key_set\>/;'q;"	kind:func	file:
map_fold	set.m	/^:- pred set.map_fold(pred(T1, T2, T3, T3), set(T1), set(T2), T3, T3).$/;kq|/^\<set.map_fold\>/;'q;"	kind:pred
map_fold2_maybe	maybe.m	/^:- pred map_fold2_maybe(pred(T, U, Acc1, Acc1, Acc2, Acc2),$/;kq|/^\<map_fold2_maybe\>/;'q;"	kind:pred
map_fold3_maybe	maybe.m	/^:- pred map_fold3_maybe(pred(T, U, Acc1, Acc1, Acc2, Acc2, Acc3, Acc3),$/;kq|/^\<map_fold3_maybe\>/;'q;"	kind:pred
map_fold_maybe	maybe.m	/^:- pred map_fold_maybe(pred(T, U, Acc, Acc), maybe(T), maybe(U), Acc, Acc).$/;kq|/^\<map_fold_maybe\>/;'q;"	kind:pred
map_foldl	array.m	/^:- pred map_foldl(pred(T1, T2, T3, T3), array(T1), array(T2), T3, T3).$/;kq|/^\<map_foldl\>/;'q;"	kind:pred
map_foldl	cord.m	/^:- pred map_foldl(pred(A, B, C, C), cord(A), cord(B), C, C).$/;kq|/^\<map_foldl\>/;'q;"	kind:pred
map_foldl	list.m	/^:- pred list.map_foldl(pred(L, M, A, A), list(L), list(M), A, A).$/;kq|/^\<list.map_foldl\>/;'q;"	kind:pred
map_foldl	map.m	/^:- pred map.map_foldl(pred(K, V, W, A, A), map(K, V), map(K, W), A, A).$/;kq|/^\<map.map_foldl\>/;'q;"	kind:pred
map_foldl	tree234.m	/^:- pred tree234.map_foldl(pred(K, V, W, A, A), tree234(K, V), tree234(K, W),$/;kq|/^\<tree234.map_foldl\>/;'q;"	kind:pred
map_foldl2	cord.m	/^:- pred map_foldl2(pred(A, B, C, C, D, D)::$/;kq|/^\<map_foldl2\>/;'q;"	kind:pred
map_foldl2	list.m	/^:- pred list.map_foldl2(pred(L, M, A, A, B, B), list(L), list(M), A, A, B, B).$/;kq|/^\<list.map_foldl2\>/;'q;"	kind:pred
map_foldl2	map.m	/^:- pred map.map_foldl2(pred(K, V, W, A, A, B, B), map(K, V), map(K, W),$/;kq|/^\<map.map_foldl2\>/;'q;"	kind:pred
map_foldl2	tree234.m	/^:- pred tree234.map_foldl2(pred(K, V, W, A, A, B, B),$/;kq|/^\<tree234.map_foldl2\>/;'q;"	kind:pred
map_foldl2_node	cord.m	/^:- pred map_foldl2_node(pred(A, B, C, C, D, D)::$/;kq|/^\<map_foldl2_node\>/;'q;"	kind:pred	file:
map_foldl3	cord.m	/^:- pred map_foldl3(pred(A, B, C, C, D, D, E, E)::$/;kq|/^\<map_foldl3\>/;'q;"	kind:pred
map_foldl3	list.m	/^:- pred list.map_foldl3(pred(L, M, A, A, B, B, C, C), list(L), list(M),$/;kq|/^\<list.map_foldl3\>/;'q;"	kind:pred
map_foldl3	map.m	/^:- pred map.map_foldl3(pred(K, V, W, A, A, B, B, C, C), map(K, V), map(K, W),$/;kq|/^\<map.map_foldl3\>/;'q;"	kind:pred
map_foldl3	tree234.m	/^:- pred tree234.map_foldl3(pred(K, V, W, A, A, B, B, C, C),$/;kq|/^\<tree234.map_foldl3\>/;'q;"	kind:pred
map_foldl3_node	cord.m	/^:- pred map_foldl3_node(pred(A, B, C, C, D, D, E, E)::$/;kq|/^\<map_foldl3_node\>/;'q;"	kind:pred	file:
map_foldl4	list.m	/^:- pred list.map_foldl4(pred(L, M, A, A, B, B, C, C, D, D), list(L), list(M),$/;kq|/^\<list.map_foldl4\>/;'q;"	kind:pred
map_foldl5	list.m	/^:- pred list.map_foldl5(pred(L, M, A, A, B, B, C, C, D, D, E, E),$/;kq|/^\<list.map_foldl5\>/;'q;"	kind:pred
map_foldl6	list.m	/^:- pred list.map_foldl6(pred(L, M, A, A, B, B, C, C, D, D, E, E, F, F),$/;kq|/^\<list.map_foldl6\>/;'q;"	kind:pred
map_foldl_2	array.m	/^:- pred map_foldl_2(pred(T1, T2, T3, T3),$/;kq|/^\<map_foldl_2\>/;'q;"	kind:pred	file:
map_foldl_node	cord.m	/^:- pred map_foldl_node(pred(A, B, C, C), cord_node(A), cord_node(B), C, C).$/;kq|/^\<map_foldl_node\>/;'q;"	kind:pred	file:
map_foldr	list.m	/^:- pred list.map_foldr(pred(L, M, A, A), list(L), list(M), A, A).$/;kq|/^\<list.map_foldr\>/;'q;"	kind:pred
map_func	set_ctree234.m	/^:- pred set_ctree234.map_func((func(T1) = T2)::in((func(in) = out) is det),$/;kq|/^\<set_ctree234.map_func\>/;'q;"	kind:pred	file:
map_func	set_tree234.m	/^:- pred set_tree234.map_func(func(T1) = T2, set_tree234(T1),$/;kq|/^\<set_tree234.map_func\>/;'q;"	kind:pred	file:
map_keys	bimap.m	/^:- func bimap.map_keys(func(V, K) = L, bimap(K, V)) = bimap(L, V).$/;kq|/^\<bimap.map_keys\>/;'q;"	kind:func
map_keys	bimap.m	/^:- pred bimap.map_keys(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_keys\>/;'q;"	kind:pred
map_keys	injection.m	/^:- func injection.map_keys(func(V, K) = L, injection(K, V)) = injection(L, V).$/;kq|/^\<injection.map_keys\>/;'q;"	kind:func
map_keys	injection.m	/^:- pred injection.map_keys(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<injection.map_keys\>/;'q;"	kind:pred
map_keys_2	bimap.m	/^:- pred bimap.map_keys_2(pred(V, K, L)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_keys_2\>/;'q;"	kind:pred	file:
map_keys_func_2	bimap.m	/^:- pred bimap.map_keys_func_2(func(V, K) = L::in(func(in, in) = out is det),$/;kq|/^\<bimap.map_keys_func_2\>/;'q;"	kind:pred	file:
map_keys_only	assoc_list.m	/^:- func assoc_list.map_keys_only(func(K) = L, assoc_list(K, V))$/;kq|/^\<assoc_list.map_keys_only\>/;'q;"	kind:func
map_keys_only	assoc_list.m	/^:- pred assoc_list.map_keys_only(pred(K, L), $/;kq|/^\<assoc_list.map_keys_only\>/;'q;"	kind:pred
map_maybe	maybe.m	/^:- func map_maybe(func(T) = U, maybe(T)) = maybe(U).$/;kq|/^\<map_maybe\>/;'q;"	kind:func
map_maybe	maybe.m	/^:- pred map_maybe(pred(T, U), maybe(T), maybe(U)).$/;kq|/^\<map_maybe\>/;'q;"	kind:pred
map_node	cord.m	/^:- func map_node(func(T) = U, cord_node(T)) = cord_node(U).$/;kq|/^\<map_node\>/;'q;"	kind:func	file:
map_pair	pprint.m	/^    --->    map_pair(K, V).$/;kq|-;/\<map_pair\>/;'q;"	kind:cons	file:
map_pair	pprint.m	/^:- type map_pair(K, V)$/;kq|-;/\<map_pair\>/;'q;"	kind:type	file:
map_pair_to_doc	pprint.m	/^:- func map_pair_to_doc(int, map_pair(T1, T2)) = doc.$/;kq|/^\<map_pair_to_doc\>/;'q;"	kind:func	file:
map_pred	cord.m	/^:- pred map_pred(pred(T, U)::in(pred(in, out) is det),$/;kq|/^\<map_pred\>/;'q;"	kind:pred
map_pred	set_ctree234.m	/^:- pred set_ctree234.map_pred(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_ctree234.map_pred\>/;'q;"	kind:pred	file:
map_pred	set_tree234.m	/^:- pred set_tree234.map_pred(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_tree234.map_pred\>/;'q;"	kind:pred	file:
map_pred_node	cord.m	/^:- pred map_pred_node(pred(T, U)::in(pred(in, out) is det),$/;kq|/^\<map_pred_node\>/;'q;"	kind:pred	file:
map_to_doc	pprint.m	/^:- func map_to_doc(int, map(T1, T2)) = doc.$/;kq|/^\<map_to_doc\>/;'q;"	kind:func	file:
map_values	assoc_list.m	/^:- func assoc_list.map_values(func(K, V) = W, assoc_list(K, V))$/;kq|/^\<assoc_list.map_values\>/;'q;"	kind:func
map_values	assoc_list.m	/^:- pred assoc_list.map_values(pred(K, V, W), $/;kq|/^\<assoc_list.map_values\>/;'q;"	kind:pred
map_values	bimap.m	/^:- func bimap.map_values(func(K, V) = W, bimap(K, V)) = bimap(K, W).$/;kq|/^\<bimap.map_values\>/;'q;"	kind:func
map_values	bimap.m	/^:- pred bimap.map_values(pred(K, V, W)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_values\>/;'q;"	kind:pred
map_values	injection.m	/^:- func injection.map_values(func(K, V) = W, injection(K, V)) =$/;kq|/^\<injection.map_values\>/;'q;"	kind:func
map_values	injection.m	/^:- pred injection.map_values(pred(K, V, W)::in(pred(in, in, out) is det),$/;kq|/^\<injection.map_values\>/;'q;"	kind:pred
map_values	map.m	/^:- func map.map_values(func(K, V) = W, map(K, V)) = map(K, W).$/;kq|/^\<map.map_values\>/;'q;"	kind:func
map_values	map.m	/^:- pred map.map_values(pred(K, V, W), map(K, V), map(K, W)).$/;kq|/^\<map.map_values\>/;'q;"	kind:pred
map_values	rbtree.m	/^:- func rbtree.map_values(func(K, V) = W, rbtree(K, V)) = rbtree(K, W).$/;kq|/^\<rbtree.map_values\>/;'q;"	kind:func
map_values	rbtree.m	/^:- pred rbtree.map_values(pred(K, V, W), rbtree(K, V), rbtree(K, W)).$/;kq|/^\<rbtree.map_values\>/;'q;"	kind:pred
map_values	rtree.m	/^:- pred rtree.map_values(pred(K, V, W), rtree(K, V), rtree(K, W)).$/;kq|/^\<rtree.map_values\>/;'q;"	kind:pred
map_values	tree234.m	/^:- func tree234.map_values(func(K, V) = W, tree234(K, V)) = tree234(K, W).$/;kq|/^\<tree234.map_values\>/;'q;"	kind:func
map_values	tree234.m	/^:- pred tree234.map_values(pred(K, V, W), tree234(K, V), tree234(K, W)).$/;kq|/^\<tree234.map_values\>/;'q;"	kind:pred
map_values_2	bimap.m	/^:- pred bimap.map_values_2(pred(K, V, W)::in(pred(in, in, out) is det),$/;kq|/^\<bimap.map_values_2\>/;'q;"	kind:pred	file:
map_values_2	rtree.m	/^:- pred map_values_2(pred(K, V, W), rtree_2(K, V), rtree_2(K, W)).$/;kq|/^\<map_values_2\>/;'q;"	kind:pred	file:
map_values_foldl	map.m	/^:- pred map.map_values_foldl(pred(V, W, A, A), map(K, V), map(K, W), A, A).$/;kq|/^\<map.map_values_foldl\>/;'q;"	kind:pred
map_values_foldl	tree234.m	/^:- pred tree234.map_values_foldl(pred(V, W, A, A),$/;kq|/^\<tree234.map_values_foldl\>/;'q;"	kind:pred
map_values_foldl2	map.m	/^:- pred map.map_values_foldl2(pred(V, W, A, A, B, B), map(K, V), map(K, W),$/;kq|/^\<map.map_values_foldl2\>/;'q;"	kind:pred
map_values_foldl2	tree234.m	/^:- pred tree234.map_values_foldl2(pred(V, W, A, A, B, B),$/;kq|/^\<tree234.map_values_foldl2\>/;'q;"	kind:pred
map_values_foldl3	map.m	/^:- pred map.map_values_foldl3(pred(V, W, A, A, B, B, C, C),$/;kq|/^\<map.map_values_foldl3\>/;'q;"	kind:pred
map_values_foldl3	tree234.m	/^:- pred tree234.map_values_foldl3(pred(V, W, A, A, B, B, C, C),$/;kq|/^\<tree234.map_values_foldl3\>/;'q;"	kind:pred
map_values_func_2	bimap.m	/^:- pred bimap.map_values_func_2(func(K, V) = W::in(func(in, in) = out is det),$/;kq|/^\<bimap.map_values_func_2\>/;'q;"	kind:pred	file:
map_values_key_2	rtree.m	/^:- pred map_values_key_2(pred(K, V, W), K, rtree_2(K, V), rtree_2(K, W)).$/;kq|/^\<map_values_key_2\>/;'q;"	kind:pred	file:
map_values_only	assoc_list.m	/^:- func assoc_list.map_values_only(func(V) = W, assoc_list(K, V))$/;kq|/^\<assoc_list.map_values_only\>/;'q;"	kind:func
map_values_only	assoc_list.m	/^:- pred assoc_list.map_values_only(pred(V, W), $/;kq|/^\<assoc_list.map_values_only\>/;'q;"	kind:pred
map_values_only	map.m	/^:- func map.map_values_only(func(V) = W, map(K, V)) = map(K, W).$/;kq|/^\<map.map_values_only\>/;'q;"	kind:func
map_values_only	map.m	/^:- pred map.map_values_only(pred(V, W), map(K, V), map(K, W)).$/;kq|/^\<map.map_values_only\>/;'q;"	kind:pred
map_values_only	tree234.m	/^:- func tree234.map_values_only(func(V) = W, tree234(K, V)) = tree234(K, W).$/;kq|/^\<tree234.map_values_only\>/;'q;"	kind:func
map_values_only	tree234.m	/^:- pred tree234.map_values_only(pred(V, W), tree234(K, V), tree234(K, W)).$/;kq|/^\<tree234.map_values_only\>/;'q;"	kind:pred
march	calendar.m	/^    ;       march$/;kq|-;/\<march\>/;'q;"	kind:cons
mark_hp	private_builtin.m	/^:- impure pred mark_hp(heap_pointer::out) is det.$/;kq|/^\<mark_hp\>/;'q;"	kind:pred
mark_ticket_stack	private_builtin.m	/^:- impure pred mark_ticket_stack(ticket_counter::out) is det.$/;kq|/^\<mark_ticket_stack\>/;'q;"	kind:pred
mask	fat_sparse_bitset.m	/^:- func mask(int) = int.$/;kq|/^\<mask\>/;'q;"	kind:func	file:
mask	sparse_bitset.m	/^:- func mask(int) = int.$/;kq|/^\<mask\>/;'q;"	kind:func	file:
mask	tree_bitset.m	/^:- func mask(int) = int.$/;kq|/^\<mask\>/;'q;"	kind:func	file:
match_kv_against_stack	tree234.m	/^:- pred match_kv_against_stack(K::in, V::in,$/;kq|/^\<match_kv_against_stack\>/;'q;"	kind:pred	file:
match_kv_against_subtree_and_stack	tree234.m	/^:- pred match_kv_against_subtree_and_stack(K::in, V::in,$/;kq|/^\<match_kv_against_subtree_and_stack\>/;'q;"	kind:pred	file:
match_string	parsing_utils.m	/^:- pred match_string(string::in, src::in, ps::in, ps::out) is semidet.$/;kq|/^\<match_string\>/;'q;"	kind:pred	file:
match_string_2	parsing_utils.m	/^:- pred match_string_2(int::in, int::in, string::in, int::in, string::in)$/;kq|/^\<match_string_2\>/;'q;"	kind:pred	file:
match_tree_against_stack	tree234.m	/^:- pred match_tree_against_stack(tree234(K, V)::in,$/;kq|/^\<match_tree_against_stack\>/;'q;"	kind:pred	file:
matches_du_functor	erlang_rtti_implementation.m	/^:- pred matches_du_functor(T::in, erlang_du_functor::in) is semidet.$/;kq|/^\<matches_du_functor\>/;'q;"	kind:pred	file:
matching_du_functor	erlang_rtti_implementation.m	/^:- pred matching_du_functor(list(erlang_du_functor)::in, T::in,$/;kq|/^\<matching_du_functor\>/;'q;"	kind:pred	file:
matching_du_functor_number	erlang_rtti_implementation.m	/^:- pred matching_du_functor_number(list(erlang_du_functor)::in,$/;kq|/^\<matching_du_functor_number\>/;'q;"	kind:pred	file:
matching_du_ordinal	erlang_rtti_implementation.m	/^:- pred matching_du_ordinal(list(erlang_du_functor)::in,$/;kq|/^\<matching_du_ordinal\>/;'q;"	kind:pred	file:
math.acos	math.m	/^:- func math.acos(float) = float.$/;kq|/^\<math.acos\>/;'q;"	kind:func
math.asin	math.m	/^:- func math.asin(float) = float.$/;kq|/^\<math.asin\>/;'q;"	kind:func
math.atan	math.m	/^:- func math.atan(float) = float.$/;kq|/^\<math.atan\>/;'q;"	kind:func
math.atan2	math.m	/^:- func math.atan2(float, float) = float.$/;kq|/^\<math.atan2\>/;'q;"	kind:func
math.ceiling	math.m	/^:- func math.ceiling(float) = float.$/;kq|/^\<math.ceiling\>/;'q;"	kind:func
math.cos	math.m	/^:- func math.cos(float) = float.$/;kq|/^\<math.cos\>/;'q;"	kind:func
math.cosh	math.m	/^:- func math.cosh(float) = float.$/;kq|/^\<math.cosh\>/;'q;"	kind:func
math.domain_error	math.m	/^:- type domain_error ---> domain_error(string).$/;kq|-;/\<math.domain_error\>/;'q;"	kind:cons
math.domain_error	math.m	/^:- type domain_error ---> domain_error(string).$/;kq|-;/\<math.domain_error\>/;'q;"	kind:type
math.e	math.m	/^:- func math.e = float.$/;kq|/^\<math.e\>/;'q;"	kind:func
math.exp	math.m	/^:- func math.exp(float) = float.$/;kq|/^\<math.exp\>/;'q;"	kind:func
math.floor	math.m	/^:- func math.floor(float) = float.$/;kq|/^\<math.floor\>/;'q;"	kind:func
math.ln	math.m	/^:- func math.ln(float) = float.$/;kq|/^\<math.ln\>/;'q;"	kind:func
math.log	math.m	/^:- func math.log(float, float) = float.$/;kq|/^\<math.log\>/;'q;"	kind:func
math.log10	math.m	/^:- func math.log10(float) = float.$/;kq|/^\<math.log10\>/;'q;"	kind:func
math.log2	math.m	/^:- func math.log2(float) = float.$/;kq|/^\<math.log2\>/;'q;"	kind:func
math.no_roots	math.m	/^    --->    no_roots$/;kq|-;/\<math.no_roots\>/;'q;"	kind:cons
math.one_root	math.m	/^    ;       one_root(float)$/;kq|-;/\<math.one_root\>/;'q;"	kind:cons
math.pi	math.m	/^:- func math.pi = float.$/;kq|/^\<math.pi\>/;'q;"	kind:func
math.pow	math.m	/^:- func math.pow(float, float) = float.$/;kq|/^\<math.pow\>/;'q;"	kind:func
math.quadratic_roots	math.m	/^:- type math.quadratic_roots$/;kq|-;/\<math.quadratic_roots\>/;'q;"	kind:type
math.round	math.m	/^:- func math.round(float) = float.$/;kq|/^\<math.round\>/;'q;"	kind:func
math.sin	math.m	/^:- func math.sin(float) = float.$/;kq|/^\<math.sin\>/;'q;"	kind:func
math.sinh	math.m	/^:- func math.sinh(float) = float.$/;kq|/^\<math.sinh\>/;'q;"	kind:func
math.solve_quadratic	math.m	/^:- func math.solve_quadratic(float, float, float) = quadratic_roots.$/;kq|/^\<math.solve_quadratic\>/;'q;"	kind:func
math.sqrt	math.m	/^:- func math.sqrt(float) = float.$/;kq|/^\<math.sqrt\>/;'q;"	kind:func
math.tan	math.m	/^:- func math.tan(float) = float.$/;kq|/^\<math.tan\>/;'q;"	kind:func
math.tanh	math.m	/^:- func math.tanh(float) = float.$/;kq|/^\<math.tanh\>/;'q;"	kind:func
math.truncate	math.m	/^:- func math.truncate(float) = float.$/;kq|/^\<math.truncate\>/;'q;"	kind:func
math.two_roots	math.m	/^    ;       two_roots(float, float).$/;kq|-;/\<math.two_roots\>/;'q;"	kind:cons
math.unchecked_acos	math.m	/^:- func math.unchecked_acos(float) = float.$/;kq|/^\<math.unchecked_acos\>/;'q;"	kind:func
math.unchecked_asin	math.m	/^:- func math.unchecked_asin(float) = float.$/;kq|/^\<math.unchecked_asin\>/;'q;"	kind:func
math.unchecked_ln	math.m	/^:- func math.unchecked_ln(float) = float.$/;kq|/^\<math.unchecked_ln\>/;'q;"	kind:func
math.unchecked_log	math.m	/^:- func math.unchecked_log(float, float) = float.$/;kq|/^\<math.unchecked_log\>/;'q;"	kind:func
math.unchecked_log10	math.m	/^:- func math.unchecked_log10(float) = float.$/;kq|/^\<math.unchecked_log10\>/;'q;"	kind:func
math.unchecked_log2	math.m	/^:- func math.unchecked_log2(float) = float.$/;kq|/^\<math.unchecked_log2\>/;'q;"	kind:func
math.unchecked_pow	math.m	/^:- func math.unchecked_pow(float, float) = float.$/;kq|/^\<math.unchecked_pow\>/;'q;"	kind:func
math.unchecked_sqrt	math.m	/^:- func math.unchecked_sqrt(float) = float.$/;kq|/^\<math.unchecked_sqrt\>/;'q;"	kind:func
math_domain_checks	math.m	/^:- pred math_domain_checks is semidet.$/;kq|/^\<math_domain_checks\>/;'q;"	kind:pred	file:
max	array.m	/^:- func array.max(array(_T)) = int.$/;kq|/^\<array.max\>/;'q;"	kind:func
max	array.m	/^:- pred array.max(array(_T), int).$/;kq|/^\<array.max\>/;'q;"	kind:pred
max	bt_array.m	/^:- func bt_array.max(bt_array(_T)) = int.$/;kq|/^\<bt_array.max\>/;'q;"	kind:func
max	bt_array.m	/^:- pred bt_array.max(bt_array(_T)::in, int::out) is det.$/;kq|/^\<bt_array.max\>/;'q;"	kind:pred
max	float.m	/^:- func float.max = float.$/;kq|/^\<float.max\>/;'q;"	kind:func
max	float.m	/^:- func max(float, float) = float.$/;kq|/^\<max\>/;'q;"	kind:func
max	int.m	/^:- func int.max(int, int) = int.$/;kq|/^\<int.max\>/;'q;"	kind:func
max	int.m	/^:- pred int.max(int::in, int::in, int::out) is det.$/;kq|/^\<int.max\>/;'q;"	kind:pred
max	version_array.m	/^:- func max(version_array(T)) = int.$/;kq|/^\<max\>/;'q;"	kind:func
max_char_value	char.m	/^:- func char.max_char_value = int.$/;kq|/^\<char.max_char_value\>/;'q;"	kind:func
max_char_value	char.m	/^:- pred char.max_char_value(int::out) is det.$/;kq|/^\<char.max_char_value\>/;'q;"	kind:pred
max_day_in_month_for	calendar.m	/^:- func max_day_in_month_for(int, int) = int.$/;kq|/^\<max_day_in_month_for\>/;'q;"	kind:func	file:
max_exponent	float.m	/^:- func float.max_exponent = int.$/;kq|/^\<float.max_exponent\>/;'q;"	kind:func
max_int	int.m	/^:- func int.max_int = int.$/;kq|/^\<int.max_int\>/;'q;"	kind:func
max_int	int.m	/^:- pred int.max_int(int::out) is det.$/;kq|/^\<int.max_int\>/;'q;"	kind:pred
max_int_plus_1	parser.m	/^:- pred max_int_plus_1(int::in, string::in) is semidet.$/;kq|/^\<max_int_plus_1\>/;'q;"	kind:pred	file:
max_key	map.m	/^:- func map.max_key(map(K, V)) = K is semidet.$/;kq|/^\<map.max_key\>/;'q;"	kind:func
max_key	tree234.m	/^:- func tree234.max_key(tree234(K, V)) = K is semidet.$/;kq|/^\<tree234.max_key\>/;'q;"	kind:func
max_level_sizes	set_ctree234.m	/^:- pred max_level_sizes(int::in, int::in, int::in,$/;kq|/^\<max_level_sizes\>/;'q;"	kind:pred	file:
max_occupants	hash_table.m	/^                max_occupants           :: int,$/;kq|-;/\<max_occupants\>/;'q;"	kind:fld
max_precision	string.m	/^:- func max_precision = int.$/;kq|/^\<max_precision\>/;'q;"	kind:func	file:
max_priority	ops.m	/^    func ops.max_priority(Table) = ops.priority,$/;kq|-;/\<max_priority\>/;'q;"	kind:tcm
max_priority	ops.m	/^    func(ops.max_priority\/1) is ops.mercury_max_priority,$/;kq|-;/\<max_priority\>/;'q;"	kind:tcim	file:
max_str_length	string.m	/^:- pred max_str_length(string::in, int::in, int::out) is det.$/;kq|/^\<max_str_length\>/;'q;"	kind:pred	file:
max_var	varset.m	/^:- func varset.max_var(varset(T)) = var(T).$/;kq|/^\<varset.max_var\>/;'q;"	kind:func
may	calendar.m	/^    ;       may$/;kq|-;/\<may\>/;'q;"	kind:cons
may_delete_stream_info	io.m	/^:- pred io.may_delete_stream_info(int::out, io::di, io::uo) is det.$/;kq|/^\<io.may_delete_stream_info\>/;'q;"	kind:pred	file:
maybe	maybe.m	/^:- inst maybe(I)$/;kq|-;/\<maybe\>/;'q;"	kind:inst
maybe	maybe.m	/^:- type maybe(T)$/;kq|-;/\<maybe\>/;'q;"	kind:type
maybe.error	maybe.m	/^    ;       error(E).$/;kq|-;/\<maybe.error\>/;'q;"	kind:cons
maybe.error	maybe.m	/^    ;       error(string).$/;kq|-;/\<maybe.error\>/;'q;"	kind:cons
maybe.fold_maybe	maybe.m	/^:- func fold_maybe(func(T, U) = U, maybe(T), U) = U.$/;kq|/^\<fold_maybe\>/;'q;"	kind:func
maybe.fold_maybe	maybe.m	/^:- pred fold_maybe(pred(T, U, U), maybe(T), U, U).$/;kq|/^\<fold_maybe\>/;'q;"	kind:pred
maybe.map_fold2_maybe	maybe.m	/^:- pred map_fold2_maybe(pred(T, U, Acc1, Acc1, Acc2, Acc2),$/;kq|/^\<map_fold2_maybe\>/;'q;"	kind:pred
maybe.map_fold3_maybe	maybe.m	/^:- pred map_fold3_maybe(pred(T, U, Acc1, Acc1, Acc2, Acc2, Acc3, Acc3),$/;kq|/^\<map_fold3_maybe\>/;'q;"	kind:pred
maybe.map_fold_maybe	maybe.m	/^:- pred map_fold_maybe(pred(T, U, Acc, Acc), maybe(T), maybe(U), Acc, Acc).$/;kq|/^\<map_fold_maybe\>/;'q;"	kind:pred
maybe.map_maybe	maybe.m	/^:- func map_maybe(func(T) = U, maybe(T)) = maybe(U).$/;kq|/^\<map_maybe\>/;'q;"	kind:func
maybe.map_maybe	maybe.m	/^:- pred map_maybe(pred(T, U), maybe(T), maybe(U)).$/;kq|/^\<map_maybe\>/;'q;"	kind:pred
maybe.no	maybe.m	/^    --->    no$/;kq|-;/\<maybe.no\>/;'q;"	kind:cons
maybe.ok	maybe.m	/^    --->    ok$/;kq|-;/\<maybe.ok\>/;'q;"	kind:cons
maybe.ok	maybe.m	/^    --->    ok(T)$/;kq|-;/\<maybe.ok\>/;'q;"	kind:cons
maybe.yes	maybe.m	/^    ;       yes(T).$/;kq|-;/\<maybe.yes\>/;'q;"	kind:cons
maybe_add_revstring	string.m	/^:- pred maybe_add_revstring(string::in, ops.priority::in, ops.priority::in,$/;kq|/^\<maybe_add_revstring\>/;'q;"	kind:pred	file:
maybe_adjacent_to_graphic_token	term_io.m	/^    --->    maybe_adjacent_to_graphic_token$/;kq|-;/\<maybe_adjacent_to_graphic_token\>/;'q;"	kind:cons
maybe_answer_table_stats	table_statistics.m	/^                maybe_answer_table_stats    :: maybe(table_stats_curr_prev)$/;kq|-;/\<maybe_answer_table_stats\>/;'q;"	kind:fld
maybe_arg	deconstruct.m	/^:- type maybe_arg$/;kq|-;/\<maybe_arg\>/;'q;"	kind:type
maybe_delete_stream_info	io.m	/^:- pred io.maybe_delete_stream_info(io.stream::in, io::di, io::uo) is det.$/;kq|/^\<io.maybe_delete_stream_info\>/;'q;"	kind:pred	file:
maybe_dst_to_int	time.m	/^:- func maybe_dst_to_int(maybe(dst)) = int.$/;kq|/^\<maybe_dst_to_int\>/;'q;"	kind:func	file:
maybe_dtd	term_to_xml.m	/^:- type maybe_dtd$/;kq|-;/\<maybe_dtd\>/;'q;"	kind:type
maybe_error	maybe.m	/^:- inst maybe_error(I)$/;kq|-;/\<maybe_error\>/;'q;"	kind:inst
maybe_error	maybe.m	/^:- type maybe_error$/;kq|-;/\<maybe_error\>/;'q;"	kind:type
maybe_error	maybe.m	/^:- type maybe_error(T) == maybe_error(T, string).$/;kq|-;/\<maybe_error\>/;'q;"	kind:type
maybe_error	maybe.m	/^:- type maybe_error(T, E)$/;kq|-;/\<maybe_error\>/;'q;"	kind:type
maybe_error_ok	maybe.m	/^:- inst maybe_error_ok(I)$/;kq|-;/\<maybe_error_ok\>/;'q;"	kind:inst
maybe_format	term_to_xml.m	/^:- type maybe_format$/;kq|-;/\<maybe_format\>/;'q;"	kind:type	file:
maybe_func	std_util.m	/^:- func maybe_func(func(T1) = T2, T1) = maybe(T2).$/;kq|/^\<maybe_func\>/;'q;"	kind:func
maybe_functor_info	term_to_xml.m	/^:- type maybe_functor_info$/;kq|-;/\<maybe_functor_info\>/;'q;"	kind:type
maybe_indent	term_to_xml.m	/^:- pred maybe_indent(Stream::in, maybe_format::in, int::in,$/;kq|/^\<maybe_indent\>/;'q;"	kind:pred	file:
maybe_int	getopt.m	/^    ;       maybe_int(maybe(int))$/;kq|-;/\<maybe_int\>/;'q;"	kind:cons
maybe_int	getopt_io.m	/^    ;       maybe_int(maybe(int))$/;kq|-;/\<maybe_int\>/;'q;"	kind:cons
maybe_is_yes	maybe.m	/^:- pred maybe_is_yes(maybe(T)::in, T::out) is semidet.$/;kq|/^\<maybe_is_yes\>/;'q;"	kind:pred
maybe_limit	rtree.m	/^:- pred maybe_limit(K::in, pred(K, E)::in(pred(in, out) is semidet),$/;kq|/^\<maybe_limit\>/;'q;"	kind:pred	file:
maybe_make_room	bit_buffer.write.m	/^:- pred maybe_make_room(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<maybe_make_room\>/;'q;"	kind:pred
maybe_nl	term_to_xml.m	/^:- pred maybe_nl(Stream::in, maybe_format::in, State::di, State::uo) is det$/;kq|/^\<maybe_nl\>/;'q;"	kind:pred	file:
maybe_option_table	getopt.m	/^:- type maybe_option_table(OptionType)$/;kq|-;/\<maybe_option_table\>/;'q;"	kind:type
maybe_option_table	getopt_io.m	/^:- type maybe_option_table(OptionType)$/;kq|-;/\<maybe_option_table\>/;'q;"	kind:type
maybe_parens	pprint.m	/^:- func maybe_parens(priority, priority, doc) = doc.$/;kq|/^\<maybe_parens\>/;'q;"	kind:func	file:
maybe_partial_res	io.m	/^:- inst io.maybe_partial_res(T)$/;kq|-;/\<maybe_partial_res\>/;'q;"	kind:inst
maybe_partial_res	io.m	/^:- type io.maybe_partial_res(T)$/;kq|-;/\<maybe_partial_res\>/;'q;"	kind:type
maybe_partial_res	stream.m	/^:- type stream.maybe_partial_res(T, Error)$/;kq|-;/\<maybe_partial_res\>/;'q;"	kind:type
maybe_precision	string.m	/^:- type maybe_precision == maybe(int).$/;kq|-;/\<maybe_precision\>/;'q;"	kind:type	file:
maybe_pred	std_util.m	/^:- pred maybe_pred(pred(T1, T2), T1, maybe(T2)).$/;kq|/^\<maybe_pred\>/;'q;"	kind:pred
maybe_pseudo_type_info	erlang_rtti_implementation.m	/^:- type maybe_pseudo_type_info$/;kq|-;/\<maybe_pseudo_type_info\>/;'q;"	kind:type	file:
maybe_set_transformed_key	injection.m	/^:- func maybe_set_transformed_key(pred(V, K, L), K, V, map(L, V)) = map(L, V).$/;kq|/^\<maybe_set_transformed_key\>/;'q;"	kind:func	file:
maybe_source_name	io.m	/^:- func maybe_source_name(maybe(stream_info)) = string.$/;kq|/^\<maybe_source_name\>/;'q;"	kind:func	file:
maybe_stream_content	io.m	/^                maybe_stream_content    :: stream_content,$/;kq|-;/\<maybe_stream_content\>/;'q;"	kind:fld
maybe_stream_id	io.m	/^                maybe_stream_id         :: int,$/;kq|-;/\<maybe_stream_id\>/;'q;"	kind:fld
maybe_stream_info	io.m	/^:- func io.maybe_stream_info(io.stream_db, io.stream) = maybe_stream_info.$/;kq|/^\<io.maybe_stream_info\>/;'q;"	kind:func	file:
maybe_stream_info	io.m	/^:- type maybe_stream_info$/;kq|-;/\<maybe_stream_info\>/;'q;"	kind:type
maybe_stream_mode	io.m	/^                maybe_stream_mode       :: stream_mode,$/;kq|-;/\<maybe_stream_mode\>/;'q;"	kind:fld
maybe_stream_source	io.m	/^                maybe_stream_source     :: stream_source$/;kq|-;/\<maybe_stream_source\>/;'q;"	kind:fld
maybe_string	getopt.m	/^    ;       maybe_string(maybe(string))$/;kq|-;/\<maybe_string\>/;'q;"	kind:cons
maybe_string	getopt.m	/^    ;       maybe_string(maybe(string)).$/;kq|-;/\<maybe_string\>/;'q;"	kind:cons
maybe_string	getopt_io.m	/^    ;       maybe_string(maybe(string))$/;kq|-;/\<maybe_string\>/;'q;"	kind:cons
maybe_string	getopt_io.m	/^    ;       maybe_string(maybe(string)).$/;kq|-;/\<maybe_string\>/;'q;"	kind:cons
maybe_string_special	getopt.m	/^    ;       maybe_string_special.$/;kq|-;/\<maybe_string_special\>/;'q;"	kind:cons
maybe_string_special	getopt_io.m	/^    ;       maybe_string_special$/;kq|-;/\<maybe_string_special\>/;'q;"	kind:cons
maybe_stylesheet	term_to_xml.m	/^:- type maybe_stylesheet$/;kq|-;/\<maybe_stylesheet\>/;'q;"	kind:type
maybe_transform_key	injection.m	/^:- pred maybe_transform_key(pred(V, K, L)::in(pred(in, in, out) is semidet),$/;kq|/^\<maybe_transform_key\>/;'q;"	kind:pred	file:
maybe_width	string.m	/^:- type maybe_width == maybe(int).$/;kq|-;/\<maybe_width\>/;'q;"	kind:type	file:
maybe_write_paren	stream.string_writer.m	/^:- pred maybe_write_paren(Stream::in, char::in, ops.priority::in,$/;kq|/^\<maybe_write_paren\>/;'q;"	kind:pred
maybe_yes	maybe.m	/^:- inst maybe_yes(I)$/;kq|-;/\<maybe_yes\>/;'q;"	kind:inst
mdi	builtin.m	/^:- mode mdi == mostly_unique >> mostly_clobbered.$/;kq|-;/\<mdi\>/;'q;"	kind:mode
mdi	builtin.m	/^:- mode mdi(Inst) == Inst >> mostly_clobbered.$/;kq|-;/\<mdi\>/;'q;"	kind:mode
measure_size	term_size_prof_builtin.m	/^:- pred measure_size(T::in, int::out) is det.$/;kq|/^\<measure_size\>/;'q;"	kind:pred
measure_size_acc	term_size_prof_builtin.m	/^:- pred measure_size_acc(T::in, int::in, int::out) is det.$/;kq|/^\<measure_size_acc\>/;'q;"	kind:pred
member	array.m	/^:- pred array.member(array(T)::in, T::out) is nondet.$/;kq|/^\<array.member\>/;'q;"	kind:pred
member	bag.m	/^:- pred bag.member(T::in, bag(T)::in) is semidet.$/;kq|/^\<bag.member\>/;'q;"	kind:pred
member	bag.m	/^:- pred bag.member(T::out, bag(T)::in, bag(T)::out) is nondet.$/;kq|/^\<bag.member\>/;'q;"	kind:pred
member	cord.m	/^:- pred member(T::out, cord(T)::in) is nondet.$/;kq|/^\<member\>/;'q;"	kind:pred
member	fat_sparse_bitset.m	/^:- pred member(T, fat_sparse_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
member	list.m	/^:- pred list.member(T, list(T)).$/;kq|/^\<list.member\>/;'q;"	kind:pred
member	list.m	/^:- pred list.member(T::out, list(T)::in, list(T)::out) is nondet.$/;kq|/^\<list.member\>/;'q;"	kind:pred
member	map.m	/^:- pred map.member(map(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<map.member\>/;'q;"	kind:pred
member	multi_map.m	/^:- pred multi_map.member(multi_map(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<multi_map.member\>/;'q;"	kind:pred
member	rbtree.m	/^:- pred rbtree.member(rbtree(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<rbtree.member\>/;'q;"	kind:pred
member	set.m	/^:- pred set.member(T, set(T)).$/;kq|/^\<set.member\>/;'q;"	kind:pred
member	set_bbbtree.m	/^:- pred set_bbbtree.member(T, set_bbbtree(T)).$/;kq|/^\<set_bbbtree.member\>/;'q;"	kind:pred
member	set_ctree234.m	/^:- pred set_ctree234.member(T, set_ctree234(T)).$/;kq|/^\<set_ctree234.member\>/;'q;"	kind:pred
member	set_ordlist.m	/^:- pred set_ordlist.member(T, set_ordlist(T)).$/;kq|/^\<set_ordlist.member\>/;'q;"	kind:pred
member	set_tree234.m	/^:- pred set_tree234.member(T, set_tree234(T)).$/;kq|/^\<set_tree234.member\>/;'q;"	kind:pred
member	set_unordlist.m	/^:- pred set_unordlist.member(T, set_unordlist(T)).$/;kq|/^\<set_unordlist.member\>/;'q;"	kind:pred
member	sparse_bitset.m	/^:- pred member(T, sparse_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
member	test_bitset.m	/^:- pred member(T, test_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
member	tree234.m	/^:- pred tree234.member(tree234(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<tree234.member\>/;'q;"	kind:pred
member	tree_bitset.m	/^:- pred member(T, tree_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
member_index0	list.m	/^:- pred list.member_index0(T, list(T), int).$/;kq|/^\<list.member_index0\>/;'q;"	kind:pred
member_node	cord.m	/^:- pred member_node(T::out, cord_node(T)::in) is nondet.$/;kq|/^\<member_node\>/;'q;"	kind:pred	file:
member_search_nodes	fat_sparse_bitset.m	/^:- pred member_search_nodes(int::out, fat_bitset_impl::in) is nondet.$/;kq|/^\<member_search_nodes\>/;'q;"	kind:pred	file:
member_search_nodes	sparse_bitset.m	/^:- pred member_search_nodes(int::out, bitset_impl::in) is nondet.$/;kq|/^\<member_search_nodes\>/;'q;"	kind:pred	file:
member_search_one_node	fat_sparse_bitset.m	/^:- pred member_search_one_node(int::out, int::in, int::in, int::in) is nondet.$/;kq|/^\<member_search_one_node\>/;'q;"	kind:pred	file:
member_search_one_node	sparse_bitset.m	/^:- pred member_search_one_node(int::out, int::in, int::in, int::in) is nondet.$/;kq|/^\<member_search_one_node\>/;'q;"	kind:pred	file:
memo_det_active	table_builtin.m	/^    ;       memo_det_active$/;kq|-;/\<memo_det_active\>/;'q;"	kind:cons
memo_det_inactive	table_builtin.m	/^    --->    memo_det_inactive$/;kq|-;/\<memo_det_inactive\>/;'q;"	kind:cons
memo_det_status	table_builtin.m	/^:- type memo_det_status$/;kq|-;/\<memo_det_status\>/;'q;"	kind:type
memo_det_succeeded	table_builtin.m	/^    ;       memo_det_succeeded.$/;kq|-;/\<memo_det_succeeded\>/;'q;"	kind:cons
memo_non_active	table_builtin.m	/^    ;       memo_non_active$/;kq|-;/\<memo_non_active\>/;'q;"	kind:cons
memo_non_complete	table_builtin.m	/^    ;       memo_non_complete.$/;kq|-;/\<memo_non_complete\>/;'q;"	kind:cons
memo_non_inactive	table_builtin.m	/^    --->    memo_non_inactive$/;kq|-;/\<memo_non_inactive\>/;'q;"	kind:cons
memo_non_incomplete	table_builtin.m	/^    ;       memo_non_incomplete$/;kq|-;/\<memo_non_incomplete\>/;'q;"	kind:cons
memo_non_record	table_builtin.m	/^:- type memo_non_record --->        memo_non_record(c_pointer).$/;kq|-;/\<memo_non_record\>/;'q;"	kind:cons	file:
memo_non_record	table_builtin.m	/^:- type memo_non_record --->        memo_non_record(c_pointer).$/;kq|-;/\<memo_non_record\>/;'q;"	kind:type	file:
memo_non_status	table_builtin.m	/^:- type memo_non_status$/;kq|-;/\<memo_non_status\>/;'q;"	kind:type
memo_semi_active	table_builtin.m	/^    ;       memo_semi_active$/;kq|-;/\<memo_semi_active\>/;'q;"	kind:cons
memo_semi_failed	table_builtin.m	/^    ;       memo_semi_failed.$/;kq|-;/\<memo_semi_failed\>/;'q;"	kind:cons
memo_semi_inactive	table_builtin.m	/^    --->    memo_semi_inactive$/;kq|-;/\<memo_semi_inactive\>/;'q;"	kind:cons
memo_semi_status	table_builtin.m	/^:- type memo_semi_status$/;kq|-;/\<memo_semi_status\>/;'q;"	kind:type
memo_semi_succeeded	table_builtin.m	/^    ;       memo_semi_succeeded$/;kq|-;/\<memo_semi_succeeded\>/;'q;"	kind:cons
mer_bitmap	bit_buffer.m	/^                mer_bitmap :: bitmap,$/;kq|-;/\<mer_bitmap\>/;'q;"	kind:fld	file:
mer_filled_bitmaps	bit_buffer.m	/^                mer_filled_bitmaps :: list(bitmap),$/;kq|-;/\<mer_filled_bitmaps\>/;'q;"	kind:fld	file:
mer_pos	bit_buffer.m	/^                mer_pos :: bit_index,$/;kq|-;/\<mer_pos\>/;'q;"	kind:fld	file:
mer_read_status	bit_buffer.m	/^                mer_read_status :: stream.res(Error)$/;kq|-;/\<mer_read_status\>/;'q;"	kind:fld	file:
mer_size	bit_buffer.m	/^                mer_size :: num_bits,$/;kq|-;/\<mer_size\>/;'q;"	kind:fld	file:
mer_state	bit_buffer.m	/^                mer_state :: State,$/;kq|-;/\<mer_state\>/;'q;"	kind:fld	file:
mer_stream	bit_buffer.m	/^                mer_stream :: Stream,$/;kq|-;/\<mer_stream\>/;'q;"	kind:fld	file:
mer_use_stream	bit_buffer.m	/^                mer_use_stream :: bool,$/;kq|-;/\<mer_use_stream\>/;'q;"	kind:fld	file:
mercury_append	string.m	/^:- pred string.mercury_append(string, string, string).$/;kq|/^\<string.mercury_append\>/;'q;"	kind:pred	file:
mercury_arg_priority	ops.m	/^:- func ops.mercury_arg_priority(mercury_op_table) = ops.priority.$/;kq|/^\<ops.mercury_arg_priority\>/;'q;"	kind:func	file:
mercury_escape_char	term_io.m	/^:- func mercury_escape_char(char) = string.$/;kq|/^\<mercury_escape_char\>/;'q;"	kind:func
mercury_escape_special_char	term_io.m	/^:- pred mercury_escape_special_char(char, char).$/;kq|/^\<mercury_escape_special_char\>/;'q;"	kind:pred	file:
mercury_max_priority	ops.m	/^:- func ops.mercury_max_priority(mercury_op_table) = ops.priority.$/;kq|/^\<ops.mercury_max_priority\>/;'q;"	kind:func
mercury_op_table	ops.m	/^:- type ops.mercury_op_table$/;kq|-;/\<mercury_op_table\>/;'q;"	kind:type	file:
mercury_std_library_module	library.m	/^:- pred mercury_std_library_module(string::in) is semidet.$/;kq|/^\<mercury_std_library_module\>/;'q;"	kind:pred
merge	assoc_list.m	/^:- func assoc_list.merge(assoc_list(K, V), assoc_list(K, V))$/;kq|/^\<assoc_list.merge\>/;'q;"	kind:func
merge	assoc_list.m	/^:- pred assoc_list.merge(assoc_list(K, V)::in, assoc_list(K, V)::in,$/;kq|/^\<assoc_list.merge\>/;'q;"	kind:pred
merge	injection.m	/^:- func injection.merge(injection(K, V), injection(K, V)) = injection(K, V).$/;kq|/^\<injection.merge\>/;'q;"	kind:func
merge	injection.m	/^:- pred injection.merge(injection(K, V)::in, injection(K, V)::in,$/;kq|/^\<injection.merge\>/;'q;"	kind:pred
merge	list.m	/^:- func list.merge(comparison_func(X), list(X), list(X)) = list(X).$/;kq|/^\<list.merge\>/;'q;"	kind:func
merge	list.m	/^:- func list.merge(list(T), list(T)) = list(T).$/;kq|/^\<list.merge\>/;'q;"	kind:func
merge	list.m	/^:- pred list.merge(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.merge\>/;'q;"	kind:pred
merge	list.m	/^:- pred list.merge(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.merge\>/;'q;"	kind:pred
merge	map.m	/^:- func map.merge(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.merge\>/;'q;"	kind:func
merge	map.m	/^:- pred map.merge(map(K, V)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.merge\>/;'q;"	kind:pred
merge	multi_map.m	/^:- func multi_map.merge(multi_map(K, V), multi_map(K, V))$/;kq|/^\<multi_map.merge\>/;'q;"	kind:func
merge	multi_map.m	/^:- pred multi_map.merge(multi_map(K, V)::in, multi_map(K, V)::in,$/;kq|/^\<multi_map.merge\>/;'q;"	kind:pred
merge	pqueue.m	/^:- func pqueue.merge(pqueue(K, V), pqueue(K, V)) = pqueue(K, V).$/;kq|/^\<pqueue.merge\>/;'q;"	kind:func
merge	pqueue.m	/^:- pred pqueue.merge(pqueue(K, V)::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.merge\>/;'q;"	kind:pred
merge	varset.m	/^:- pred varset.merge(varset(T)::in, varset(T)::in, list(term(T))::in,$/;kq|/^\<varset.merge\>/;'q;"	kind:pred
merge_and_remove_dups	list.m	/^:- func list.merge_and_remove_dups(comparison_func(X), list(X), list(X))$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:func
merge_and_remove_dups	list.m	/^:- func list.merge_and_remove_dups(list(T), list(T)) = list(T).$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:func
merge_and_remove_dups	list.m	/^:- pred list.merge_and_remove_dups(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:pred
merge_and_remove_dups	list.m	/^:- pred list.merge_and_remove_dups(list(T)::in, list(T)::in, list(T)::out)$/;kq|/^\<list.merge_and_remove_dups\>/;'q;"	kind:pred
merge_imp_res	robdd.m	/^:- func merge_imp_res(vars_entailed_result(T), vars_entailed_result(T),$/;kq|/^\<merge_imp_res\>/;'q;"	kind:func	file:
merge_imp_res_2	robdd.m	/^:- func merge_imp_res_2(vars_entailed_result(T), vars_entailed_result(T),$/;kq|/^\<merge_imp_res_2\>/;'q;"	kind:func	file:
merge_renaming	varset.m	/^:- pred varset.merge_renaming(varset(T)::in, varset(T)::in, varset(T)::out,$/;kq|/^\<varset.merge_renaming\>/;'q;"	kind:pred
merge_renaming_2	varset.m	/^:- pred varset.merge_renaming_2(var_supply(T)::in, var_supply(T)::in,$/;kq|/^\<varset.merge_renaming_2\>/;'q;"	kind:pred	file:
merge_renaming_without_names	varset.m	/^:- pred varset.merge_renaming_without_names(varset(T)::in,$/;kq|/^\<varset.merge_renaming_without_names\>/;'q;"	kind:pred
merge_renaming_without_names_2	varset.m	/^:- pred varset.merge_renaming_without_names_2(var_supply(T)::in,$/;kq|/^\<varset.merge_renaming_without_names_2\>/;'q;"	kind:pred	file:
merge_sort	list.m	/^:- pred list.merge_sort(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.merge_sort\>/;'q;"	kind:pred	file:
merge_sort_2	list.m	/^:- pred list.merge_sort_2(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.merge_sort_2\>/;'q;"	kind:pred	file:
merge_sort_and_remove_dups_2	list.m	/^:- pred list.merge_sort_and_remove_dups_2(int::in, list(T)::in, list(T)::out)$/;kq|/^\<list.merge_sort_and_remove_dups_2\>/;'q;"	kind:pred	file:
merge_subarrays	array.m	/^:- pred merge_subarrays(array(T)::array_ui,$/;kq|/^\<merge_subarrays\>/;'q;"	kind:pred	file:
merge_subst	varset.m	/^:- pred varset.merge_subst(varset(T)::in, varset(T)::in, varset(T)::out,$/;kq|/^\<varset.merge_subst\>/;'q;"	kind:pred
merge_subst_2	varset.m	/^:- pred varset.merge_subst_2(var_supply(T)::in, var_supply(T)::in,$/;kq|/^\<varset.merge_subst_2\>/;'q;"	kind:pred	file:
merge_subst_without_names	varset.m	/^:- pred varset.merge_subst_without_names(varset(T)::in,$/;kq|/^\<varset.merge_subst_without_names\>/;'q;"	kind:pred
merge_subst_without_names_2	varset.m	/^:- pred varset.merge_subst_without_names_2( var_supply(T)::in,$/;kq|/^\<varset.merge_subst_without_names_2\>/;'q;"	kind:pred	file:
merge_without_names	varset.m	/^:- pred varset.merge_without_names(varset(T)::in, varset(T)::in,$/;kq|/^\<varset.merge_without_names\>/;'q;"	kind:pred
message_queue	io.m	/^    ;       message_queue$/;kq|-;/\<message_queue\>/;'q;"	kind:cons
microsecond	calendar.m	/^:- func microsecond(date) = microsecond.$/;kq|/^\<microsecond\>/;'q;"	kind:func
microsecond	calendar.m	/^:- type microsecond == int.  % 0..999999$/;kq|-;/\<microsecond\>/;'q;"	kind:type
microsecond_string	calendar.m	/^:- func microsecond_string(microseconds) = string.$/;kq|/^\<microsecond_string\>/;'q;"	kind:func	file:
microseconds	calendar.m	/^:- func microseconds(duration) = microseconds.$/;kq|/^\<microseconds\>/;'q;"	kind:func
microseconds	calendar.m	/^:- type microseconds == int.$/;kq|-;/\<microseconds\>/;'q;"	kind:type
microseconds_per_second	calendar.m	/^:- func microseconds_per_second = int.$/;kq|/^\<microseconds_per_second\>/;'q;"	kind:func	file:
min	array.m	/^:- func array.min(array(_T)) = int.$/;kq|/^\<array.min\>/;'q;"	kind:func
min	array.m	/^:- pred array.min(array(_T), int).$/;kq|/^\<array.min\>/;'q;"	kind:pred
min	bt_array.m	/^:- func bt_array.min(bt_array(_T)) = int.$/;kq|/^\<bt_array.min\>/;'q;"	kind:func
min	bt_array.m	/^:- pred bt_array.min(bt_array(_T)::in, int::out) is det.$/;kq|/^\<bt_array.min\>/;'q;"	kind:pred
min	float.m	/^:- func float.min = float.$/;kq|/^\<float.min\>/;'q;"	kind:func
min	float.m	/^:- func min(float, float) = float.$/;kq|/^\<min\>/;'q;"	kind:func
min	int.m	/^:- func int.min(int, int) = int.$/;kq|/^\<int.min\>/;'q;"	kind:func
min	int.m	/^:- pred int.min(int::in, int::in, int::out) is det.$/;kq|/^\<int.min\>/;'q;"	kind:pred
min2_first	rtree.m	/^    --->    min2_first$/;kq|-;/\<min2_first\>/;'q;"	kind:cons	file:
min2_second	rtree.m	/^    ;       min2_second.$/;kq|-;/\<min2_second\>/;'q;"	kind:cons	file:
min3_first	rtree.m	/^    --->    min3_first $/;kq|-;/\<min3_first\>/;'q;"	kind:cons	file:
min3_second	rtree.m	/^    ;       min3_second $/;kq|-;/\<min3_second\>/;'q;"	kind:cons	file:
min3_third	rtree.m	/^    ;       min3_third.$/;kq|-;/\<min3_third\>/;'q;"	kind:cons	file:
min4_first	rtree.m	/^    --->    min4_first$/;kq|-;/\<min4_first\>/;'q;"	kind:cons	file:
min4_fourth	rtree.m	/^    ;       min4_fourth.$/;kq|-;/\<min4_fourth\>/;'q;"	kind:cons	file:
min4_second	rtree.m	/^    ;       min4_second $/;kq|-;/\<min4_second\>/;'q;"	kind:cons	file:
min4_third	rtree.m	/^    ;       min4_third $/;kq|-;/\<min4_third\>/;'q;"	kind:cons	file:
min_char_value	char.m	/^:- func char.min_char_value = int.$/;kq|/^\<char.min_char_value\>/;'q;"	kind:func
min_char_value	char.m	/^:- pred char.min_char_value(int::out) is det.$/;kq|/^\<char.min_char_value\>/;'q;"	kind:pred
min_exponent	float.m	/^:- func float.min_exponent = int.$/;kq|/^\<float.min_exponent\>/;'q;"	kind:func
min_int	int.m	/^:- func int.min_int = int.$/;kq|/^\<int.min_int\>/;'q;"	kind:func
min_int	int.m	/^:- pred int.min_int(int::out) is det.$/;kq|/^\<int.min_int\>/;'q;"	kind:pred
min_key	map.m	/^:- func map.min_key(map(K,V)) = K is semidet.$/;kq|/^\<map.min_key\>/;'q;"	kind:func
min_key	tree234.m	/^:- func tree234.min_key(tree234(K, V)) = K is semidet.$/;kq|/^\<tree234.min_key\>/;'q;"	kind:func
min_of_four_result	rtree.m	/^:- type min_of_four_result$/;kq|-;/\<min_of_four_result\>/;'q;"	kind:type	file:
min_of_three_result	rtree.m	/^:- type min_of_three_result $/;kq|-;/\<min_of_three_result\>/;'q;"	kind:type	file:
min_of_two_result	rtree.m	/^:- type min_of_two_result$/;kq|-;/\<min_of_two_result\>/;'q;"	kind:type	file:
min_precision	string.m	/^:- func min_precision = int.$/;kq|/^\<min_precision\>/;'q;"	kind:func	file:
min_size_based_on_depth	tree234.m	/^:- pred min_size_based_on_depth(int::in, int::out) is det.$/;kq|/^\<min_size_based_on_depth\>/;'q;"	kind:pred	file:
minimal_model	robdd.m	/^:- pred minimal_model(vars(T)::in, robdd(T)::in, vars(T)::out, vars(T)::out)$/;kq|/^\<minimal_model\>/;'q;"	kind:pred
minimal_model_2	robdd.m	/^:- pred minimal_model_2(list(var(T))::in, robdd(T)::in, vars(T)::in,$/;kq|/^\<minimal_model_2\>/;'q;"	kind:pred	file:
minimum_of_four	rtree.m	/^:- func minimum_of_four(T, T, T, T) = min_of_four_result.$/;kq|/^\<minimum_of_four\>/;'q;"	kind:func	file:
minimum_of_three	rtree.m	/^:- func minimum_of_three(T, T, T) = min_of_three_result.$/;kq|/^\<minimum_of_three\>/;'q;"	kind:func	file:
minus	int.m	/^:- func int.minus(int, int) = int.$/;kq|/^\<int.minus\>/;'q;"	kind:func
minute	calendar.m	/^:- func minute(date) = minute.$/;kq|/^\<minute\>/;'q;"	kind:func
minute	calendar.m	/^:- type minute == int.       % 0..59$/;kq|-;/\<minute\>/;'q;"	kind:type
minutes	calendar.m	/^:- func minutes(duration) = minutes.$/;kq|/^\<minutes\>/;'q;"	kind:func
minutes	calendar.m	/^:- type minutes == int.$/;kq|-;/\<minutes\>/;'q;"	kind:type
mk_map_pair	pprint.m	/^:- func mk_map_pair(pair(K, V)) = map_pair(K, V).$/;kq|/^\<mk_map_pair\>/;'q;"	kind:func	file:
mktime	time.m	/^:- func time.mktime(tm) = time_t.$/;kq|/^\<time.mktime\>/;'q;"	kind:func
ml_answer_block	table_builtin.m	/^:- type ml_answer_block --->    ml_answer_block(c_pointer).$/;kq|-;/\<ml_answer_block\>/;'q;"	kind:cons	file:
ml_answer_block	table_builtin.m	/^:- type ml_answer_block --->    ml_answer_block(c_pointer).$/;kq|-;/\<ml_answer_block\>/;'q;"	kind:type	file:
ml_answer_list	table_builtin.m	/^:- type ml_answer_list ---> ml_answer_list(c_pointer).$/;kq|-;/\<ml_answer_list\>/;'q;"	kind:cons	file:
ml_answer_list	table_builtin.m	/^:- type ml_answer_list ---> ml_answer_list(c_pointer).$/;kq|-;/\<ml_answer_list\>/;'q;"	kind:type	file:
ml_consumer	table_builtin.m	/^:- type ml_consumer --->    ml_consumer(c_pointer).$/;kq|-;/\<ml_consumer\>/;'q;"	kind:cons	file:
ml_consumer	table_builtin.m	/^:- type ml_consumer --->    ml_consumer(c_pointer).$/;kq|-;/\<ml_consumer\>/;'q;"	kind:type	file:
ml_generator	table_builtin.m	/^:- type ml_generator --->   ml_generator(c_pointer).$/;kq|-;/\<ml_generator\>/;'q;"	kind:cons	file:
ml_generator	table_builtin.m	/^:- type ml_generator --->   ml_generator(c_pointer).$/;kq|-;/\<ml_generator\>/;'q;"	kind:type	file:
ml_proc_table_info	table_builtin.m	/^:- type ml_proc_table_info ---> ml_proc_table_info(c_pointer).$/;kq|-;/\<ml_proc_table_info\>/;'q;"	kind:cons	file:
ml_proc_table_info	table_builtin.m	/^:- type ml_proc_table_info ---> ml_proc_table_info(c_pointer).$/;kq|-;/\<ml_proc_table_info\>/;'q;"	kind:type	file:
ml_subgoal	table_builtin.m	/^:- type ml_subgoal --->     ml_subgoal(c_pointer).$/;kq|-;/\<ml_subgoal\>/;'q;"	kind:cons	file:
ml_subgoal	table_builtin.m	/^:- type ml_subgoal --->     ml_subgoal(c_pointer).$/;kq|-;/\<ml_subgoal\>/;'q;"	kind:type	file:
ml_table_stats_ptr	table_statistics.m	/^:- type ml_table_stats_ptr --->   ml_table_stats_ptr(c_pointer).$/;kq|-;/\<ml_table_stats_ptr\>/;'q;"	kind:cons	file:
ml_table_stats_ptr	table_statistics.m	/^:- type ml_table_stats_ptr --->   ml_table_stats_ptr(c_pointer).$/;kq|-;/\<ml_table_stats_ptr\>/;'q;"	kind:type	file:
ml_table_step_desc_ptr	table_statistics.m	/^:- type ml_table_step_desc_ptr --->   ml_table_step_desc_ptr(c_pointer).$/;kq|-;/\<ml_table_step_desc_ptr\>/;'q;"	kind:cons	file:
ml_table_step_desc_ptr	table_statistics.m	/^:- type ml_table_step_desc_ptr --->   ml_table_step_desc_ptr(c_pointer).$/;kq|-;/\<ml_table_step_desc_ptr\>/;'q;"	kind:type	file:
ml_trie_node	table_builtin.m	/^    --->   ml_trie_node(c_pointer).$/;kq|-;/\<ml_trie_node\>/;'q;"	kind:cons	file:
ml_trie_node	table_builtin.m	/^:- type ml_trie_node$/;kq|-;/\<ml_trie_node\>/;'q;"	kind:type	file:
mm_active	table_builtin.m	/^    ;       mm_active$/;kq|-;/\<mm_active\>/;'q;"	kind:cons
mm_complete	table_builtin.m	/^    ;       mm_complete.$/;kq|-;/\<mm_complete\>/;'q;"	kind:cons
mm_inactive	table_builtin.m	/^    --->    mm_inactive$/;kq|-;/\<mm_inactive\>/;'q;"	kind:cons
mm_status	table_builtin.m	/^:- type mm_status$/;kq|-;/\<mm_status\>/;'q;"	kind:type
mode_error	term.m	/^    ;       mode_error($/;kq|-;/\<mode_error\>/;'q;"	kind:cons
module_name	erlang_rtti_implementation.m	/^:- type module_name == sym_name.$/;kq|-;/\<module_name\>/;'q;"	kind:type	file:
modulo	calendar.m	/^:- func modulo(int, int) = int.$/;kq|/^\<modulo\>/;'q;"	kind:func	file:
modulo	calendar.m	/^:- func modulo(int, int, int) = int.$/;kq|/^\<modulo\>/;'q;"	kind:func	file:
mon_name	time.m	/^:- func mon_name(int) = string.$/;kq|/^\<mon_name\>/;'q;"	kind:func	file:
mon_name	time.m	/^:- pred mon_name(int::in, string::out) is semidet.$/;kq|/^\<mon_name\>/;'q;"	kind:pred	file:
monday	calendar.m	/^    --->    monday$/;kq|-;/\<monday\>/;'q;"	kind:cons
month	calendar.m	/^:- func month(date) = month.$/;kq|/^\<month\>/;'q;"	kind:func
month	calendar.m	/^:- type month$/;kq|-;/\<month\>/;'q;"	kind:type
month_num	calendar.m	/^:- func month_num(month) = int.$/;kq|/^\<month_num\>/;'q;"	kind:func	file:
months	calendar.m	/^:- func months(duration) = months.$/;kq|/^\<months\>/;'q;"	kind:func
months	calendar.m	/^:- type months == int.$/;kq|-;/\<months\>/;'q;"	kind:type
more	io.m	/^    ;       more(T).$/;kq|-;/\<more\>/;'q;"	kind:cons	file:
more	io.m	/^    ;       more.$/;kq|-;/\<more\>/;'q;"	kind:cons	file:
mostly_dead	builtin.m	/^:- inst mostly_dead == mostly_clobbered.$/;kq|-;/\<mostly_dead\>/;'q;"	kind:inst
mostly_uniq_array	array.m	/^:- inst mostly_uniq_array == mostly_uniq_array(ground). % XXX work-around$/;kq|-;/\<mostly_uniq_array\>/;'q;"	kind:inst
mostly_uniq_array	array.m	/^:- inst mostly_uniq_array(I) == array(I).    % XXX work-around$/;kq|-;/\<mostly_uniq_array\>/;'q;"	kind:inst
mui	builtin.m	/^:- mode mui == mostly_unique >> mostly_unique.$/;kq|-;/\<mui\>/;'q;"	kind:mode
mul_base	integer.m	/^:- func mul_base(integer) = integer.$/;kq|/^\<mul_base\>/;'q;"	kind:func	file:
mul_base_2	integer.m	/^:- func mul_base_2(list(digit)) = list(digit).$/;kq|/^\<mul_base_2\>/;'q;"	kind:func	file:
mul_by_digit	integer.m	/^:- func mul_by_digit(digit, integer) = integer.$/;kq|/^\<mul_by_digit\>/;'q;"	kind:func	file:
mul_by_digit_2	integer.m	/^:- pred mul_by_digit_2(digit::in, digit::out, list(digit)::in,$/;kq|/^\<mul_by_digit_2\>/;'q;"	kind:pred	file:
multi_map	multi_map.m	/^:- type multi_map(Key, Data) == map(Key, list(Data)).$/;kq|-;/\<multi_map\>/;'q;"	kind:type
multi_map.add	multi_map.m	/^:- func multi_map.add(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.add\>/;'q;"	kind:func
multi_map.add	multi_map.m	/^:- pred multi_map.add(K::in, V::in,$/;kq|/^\<multi_map.add\>/;'q;"	kind:pred
multi_map.all_count	multi_map.m	/^:- func multi_map.all_count(multi_map(K, V)) = int.$/;kq|/^\<multi_map.all_count\>/;'q;"	kind:func
multi_map.all_count	multi_map.m	/^:- pred multi_map.all_count(multi_map(K, V)::in, int::out) is det.$/;kq|/^\<multi_map.all_count\>/;'q;"	kind:pred
multi_map.apply_to_list	multi_map.m	/^:- func multi_map.apply_to_list(list(K), multi_map(K, V)) = list(V).$/;kq|/^\<multi_map.apply_to_list\>/;'q;"	kind:func
multi_map.apply_to_list	multi_map.m	/^:- pred multi_map.apply_to_list(list(K)::in, multi_map(K, V)::in,$/;kq|/^\<multi_map.apply_to_list\>/;'q;"	kind:pred
multi_map.assoc_list_merge	multi_map.m	/^:- pred multi_map.assoc_list_merge(assoc_list(K, list(V))::in,$/;kq|/^\<multi_map.assoc_list_merge\>/;'q;"	kind:pred	file:
multi_map.contains	multi_map.m	/^:- pred multi_map.contains(multi_map(K, _V)::in, K::in) is semidet.$/;kq|/^\<multi_map.contains\>/;'q;"	kind:pred
multi_map.count	multi_map.m	/^:- func multi_map.count(multi_map(K, V)) = int.$/;kq|/^\<multi_map.count\>/;'q;"	kind:func
multi_map.count	multi_map.m	/^:- pred multi_map.count(multi_map(K, V)::in, int::out) is det.$/;kq|/^\<multi_map.count\>/;'q;"	kind:pred
multi_map.count_list	multi_map.m	/^:- pred multi_map.count_list(list(A)::in, int::in, int::out) is det.$/;kq|/^\<multi_map.count_list\>/;'q;"	kind:pred	file:
multi_map.delete	multi_map.m	/^:- func multi_map.delete(multi_map(K, V), K) = multi_map(K, V).$/;kq|/^\<multi_map.delete\>/;'q;"	kind:func
multi_map.delete	multi_map.m	/^:- func multi_map.delete(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.delete\>/;'q;"	kind:func
multi_map.delete	multi_map.m	/^:- pred multi_map.delete(K::in, $/;kq|/^\<multi_map.delete\>/;'q;"	kind:pred
multi_map.delete	multi_map.m	/^:- pred multi_map.delete(K::in, V::in,$/;kq|/^\<multi_map.delete\>/;'q;"	kind:pred
multi_map.det_insert	multi_map.m	/^:- func multi_map.det_insert(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.det_insert\>/;'q;"	kind:func
multi_map.det_insert	multi_map.m	/^:- pred multi_map.det_insert(K::in, V::in,$/;kq|/^\<multi_map.det_insert\>/;'q;"	kind:pred
multi_map.det_remove	multi_map.m	/^:- pred multi_map.det_remove(K::in, list(V)::out,$/;kq|/^\<multi_map.det_remove\>/;'q;"	kind:pred
multi_map.det_replace	multi_map.m	/^:- func multi_map.det_replace(multi_map(K, V), K, list(V)) = multi_map(K, V).$/;kq|/^\<multi_map.det_replace\>/;'q;"	kind:func
multi_map.det_replace	multi_map.m	/^:- pred multi_map.det_replace(K::in, list(V)::in,$/;kq|/^\<multi_map.det_replace\>/;'q;"	kind:pred
multi_map.det_update	multi_map.m	/^:- func multi_map.det_update(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.det_update\>/;'q;"	kind:func
multi_map.det_update	multi_map.m	/^:- pred multi_map.det_update(K::in, V::in,$/;kq|/^\<multi_map.det_update\>/;'q;"	kind:pred
multi_map.from_assoc_list	multi_map.m	/^:- func multi_map.from_assoc_list(assoc_list(K, list(V))) = multi_map(K, V).$/;kq|/^\<multi_map.from_assoc_list\>/;'q;"	kind:func
multi_map.from_assoc_list	multi_map.m	/^:- pred multi_map.from_assoc_list(assoc_list(K, list(V))::in,$/;kq|/^\<multi_map.from_assoc_list\>/;'q;"	kind:pred
multi_map.from_flat_assoc_list	multi_map.m	/^:- func multi_map.from_flat_assoc_list(assoc_list(K, V)) = multi_map(K, V).$/;kq|/^\<multi_map.from_flat_assoc_list\>/;'q;"	kind:func
multi_map.from_flat_assoc_list	multi_map.m	/^:- pred multi_map.from_flat_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<multi_map.from_flat_assoc_list\>/;'q;"	kind:pred
multi_map.init	multi_map.m	/^:- func multi_map.init = multi_map(_, _).$/;kq|/^\<multi_map.init\>/;'q;"	kind:func
multi_map.init	multi_map.m	/^:- pred multi_map.init(multi_map(_, _)::uo) is det.$/;kq|/^\<multi_map.init\>/;'q;"	kind:pred
multi_map.insert	multi_map.m	/^:- pred multi_map.insert(K::in, V::in,$/;kq|/^\<multi_map.insert\>/;'q;"	kind:pred
multi_map.inverse_search	multi_map.m	/^:- pred multi_map.inverse_search(multi_map(K, V)::in, V::in, K::out) is nondet.$/;kq|/^\<multi_map.inverse_search\>/;'q;"	kind:pred
multi_map.is_empty	multi_map.m	/^:- pred multi_map.is_empty(multi_map(_, _)::in) is semidet.$/;kq|/^\<multi_map.is_empty\>/;'q;"	kind:pred
multi_map.keys	multi_map.m	/^:- func multi_map.keys(multi_map(K, _V)) = list(K).$/;kq|/^\<multi_map.keys\>/;'q;"	kind:func
multi_map.keys	multi_map.m	/^:- pred multi_map.keys(multi_map(K, _V)::in, list(K)::out) is det.$/;kq|/^\<multi_map.keys\>/;'q;"	kind:pred
multi_map.lookup	multi_map.m	/^:- func multi_map.lookup(multi_map(K, V), K) = list(V).$/;kq|/^\<multi_map.lookup\>/;'q;"	kind:func
multi_map.lookup	multi_map.m	/^:- pred multi_map.lookup(multi_map(K, V)::in, K::in, list(V)::out) is det.$/;kq|/^\<multi_map.lookup\>/;'q;"	kind:pred
multi_map.member	multi_map.m	/^:- pred multi_map.member(multi_map(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<multi_map.member\>/;'q;"	kind:pred
multi_map.merge	multi_map.m	/^:- func multi_map.merge(multi_map(K, V), multi_map(K, V))$/;kq|/^\<multi_map.merge\>/;'q;"	kind:func
multi_map.merge	multi_map.m	/^:- pred multi_map.merge(multi_map(K, V)::in, multi_map(K, V)::in,$/;kq|/^\<multi_map.merge\>/;'q;"	kind:pred
multi_map.nondet_lookup	multi_map.m	/^:- pred multi_map.nondet_lookup(multi_map(K, V)::in, K::in, V::out) is nondet.$/;kq|/^\<multi_map.nondet_lookup\>/;'q;"	kind:pred
multi_map.nondet_search	multi_map.m	/^:- pred multi_map.nondet_search(multi_map(K, V)::in, K::in, V::out) is nondet.$/;kq|/^\<multi_map.nondet_search\>/;'q;"	kind:pred
multi_map.optimize	multi_map.m	/^:- func multi_map.optimize(multi_map(K, V)) = multi_map(K, V).$/;kq|/^\<multi_map.optimize\>/;'q;"	kind:func
multi_map.optimize	multi_map.m	/^:- pred multi_map.optimize(multi_map(K, V)::in, multi_map(K, V)::out) is det.$/;kq|/^\<multi_map.optimize\>/;'q;"	kind:pred
multi_map.remove	multi_map.m	/^:- pred multi_map.remove(K::in, list(V)::out,$/;kq|/^\<multi_map.remove\>/;'q;"	kind:pred
multi_map.remove_smallest	multi_map.m	/^:- pred multi_map.remove_smallest(K::out, list(V)::out,$/;kq|/^\<multi_map.remove_smallest\>/;'q;"	kind:pred
multi_map.replace	multi_map.m	/^:- pred multi_map.replace(K::in, list(V)::in,$/;kq|/^\<multi_map.replace\>/;'q;"	kind:pred
multi_map.search	multi_map.m	/^:- pred multi_map.search(multi_map(K, V)::in, K::in, list(V)::out) is semidet.$/;kq|/^\<multi_map.search\>/;'q;"	kind:pred
multi_map.select	multi_map.m	/^:- func multi_map.select(multi_map(K, V), set(K)) = multi_map(K, V).$/;kq|/^\<multi_map.select\>/;'q;"	kind:func
multi_map.select	multi_map.m	/^:- pred multi_map.select(multi_map(K, V)::in, set(K)::in,$/;kq|/^\<multi_map.select\>/;'q;"	kind:pred
multi_map.set	multi_map.m	/^:- func multi_map.set(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.set\>/;'q;"	kind:func
multi_map.set	multi_map.m	/^:- pred multi_map.set(K::in, V::in,$/;kq|/^\<multi_map.set\>/;'q;"	kind:pred
multi_map.to_assoc_list	multi_map.m	/^:- func multi_map.to_assoc_list(multi_map(K, V)) = assoc_list(K, list(V)).$/;kq|/^\<multi_map.to_assoc_list\>/;'q;"	kind:func
multi_map.to_assoc_list	multi_map.m	/^:- pred multi_map.to_assoc_list(multi_map(K, V)::in,$/;kq|/^\<multi_map.to_assoc_list\>/;'q;"	kind:pred
multi_map.to_flat_assoc_list	multi_map.m	/^:- func multi_map.to_flat_assoc_list(multi_map(K, V)) = assoc_list(K, V).$/;kq|/^\<multi_map.to_flat_assoc_list\>/;'q;"	kind:func
multi_map.to_flat_assoc_list	multi_map.m	/^:- pred multi_map.to_flat_assoc_list(multi_map(K, V)::in,$/;kq|/^\<multi_map.to_flat_assoc_list\>/;'q;"	kind:pred
multi_map.update	multi_map.m	/^:- pred multi_map.update(K::in, V::in,$/;kq|/^\<multi_map.update\>/;'q;"	kind:pred
multi_map.values	multi_map.m	/^:- func multi_map.values(multi_map(_K, V)) = list(V).$/;kq|/^\<multi_map.values\>/;'q;"	kind:func
multi_map.values	multi_map.m	/^:- pred multi_map.values(multi_map(_K, V)::in, list(V)::out) is det.$/;kq|/^\<multi_map.values\>/;'q;"	kind:pred
multiple_functors_for_root	term_to_xml.m	/^    ;       multiple_functors_for_root$/;kq|-;/\<multiple_functors_for_root\>/;'q;"	kind:cons
multiply_by_pow	float.m	/^:- func float.multiply_by_pow(float, float, int) = float.$/;kq|/^\<float.multiply_by_pow\>/;'q;"	kind:func	file:
multiply_by_pow	int.m	/^:- func int.multiply_by_pow(int, int, int) = int.$/;kq|/^\<int.multiply_by_pow\>/;'q;"	kind:func	file:
munge	hash_table.m	/^:- func munge(int, int) = int.$/;kq|/^\<munge\>/;'q;"	kind:func	file:
munge	version_hash_table.m	/^:- func munge(int, int) = int.$/;kq|/^\<munge\>/;'q;"	kind:func	file:
muo	builtin.m	/^:- mode muo == free >> mostly_unique.$/;kq|-;/\<muo\>/;'q;"	kind:mode
mutvar	mutvar.m	/^    --->    mutvar(private_builtin.ref(T)).$/;kq|-;/\<mutvar\>/;'q;"	kind:cons	file:
mutvar	mutvar.m	/^:- type mutvar(T)$/;kq|-;/\<mutvar\>/;'q;"	kind:type	file:
mutvar	private_builtin.m	/^:- type mutvar(T) ---> mutvar(c_pointer).$/;kq|-;/\<mutvar\>/;'q;"	kind:cons
mutvar	private_builtin.m	/^:- type mutvar(T) ---> mutvar(c_pointer).$/;kq|-;/\<mutvar\>/;'q;"	kind:type
mutvar	store.m	/^:- type generic_mutvar(T, S) ---> mutvar(private_builtin.ref(T)).$/;kq|-;/\<mutvar\>/;'q;"	kind:cons	file:
mutvar	version_store.m	/^:- type mutvar(T, S)            ---> mutvar(int).$/;kq|-;/\<mutvar\>/;'q;"	kind:cons	file:
mutvar	version_store.m	/^:- type mutvar(T, S)            ---> mutvar(int).$/;kq|-;/\<mutvar\>/;'q;"	kind:type	file:
mutvar.clear_mutvar	mutvar.m	/^:-        pred clear_mutvar(ui) is det.$/;kq|/^\<clear_mutvar\>/;'q;"	kind:pred
mutvar.clear_mutvar	mutvar.m	/^:- impure pred clear_mutvar(mutvar(T)) is det.$/;kq|/^\<clear_mutvar\>/;'q;"	kind:pred
mutvar.get_mutvar	mutvar.m	/^:- impure pred get_mutvar(mutvar(T), T) is det.$/;kq|/^\<get_mutvar\>/;'q;"	kind:pred
mutvar.new_mutvar	mutvar.m	/^:- impure pred new_mutvar(T, mutvar(T)).$/;kq|/^\<new_mutvar\>/;'q;"	kind:pred
mutvar.new_mutvar0	mutvar.m	/^:- impure pred new_mutvar0(mutvar(T)).$/;kq|/^\<new_mutvar0\>/;'q;"	kind:pred
mutvar.set_mutvar	mutvar.m	/^:-        pred set_mutvar(ui, di) is det.$/;kq|/^\<set_mutvar\>/;'q;"	kind:pred
mutvar.set_mutvar	mutvar.m	/^:- impure pred set_mutvar(mutvar(T), T) is det.$/;kq|/^\<set_mutvar\>/;'q;"	kind:pred
mvar	thread.mvar.m	/^    --->    mvar($/;kq|-;/\<mvar\>/;'q;"	kind:cons	file:
mvar	thread.mvar.m	/^:- type mvar(T)$/;kq|-;/\<mvar\>/;'q;"	kind:type	file:
mvar.init	thread.mvar.m	/^:- impure func mvar.init = (mvar(T)::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:func
mvar.init	thread.mvar.m	/^:- pred mvar.init(mvar(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:pred
mvar.mvar	thread.mvar.m	/^    --->    mvar($/;kq|-;/\<mvar.mvar\>/;'q;"	kind:cons	file:
mvar.mvar	thread.mvar.m	/^:- type mvar(T)$/;kq|-;/\<mvar.mvar\>/;'q;"	kind:type	file:
mvar.mvar.init	thread.mvar.m	/^:- impure func mvar.init = (mvar(T)::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:func
mvar.mvar.init	thread.mvar.m	/^:- pred mvar.init(mvar(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:pred
mvar.mvar.put	thread.mvar.m	/^:- pred mvar.put(mvar(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<mvar.put\>/;'q;"	kind:pred
mvar.mvar.read	thread.mvar.m	/^:- pred mvar.read(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.read\>/;'q;"	kind:pred
mvar.mvar.take	thread.mvar.m	/^:- pred mvar.take(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.take\>/;'q;"	kind:pred
mvar.mvar.try_put	thread.mvar.m	/^:- pred mvar.try_put(mvar(T)::in, T::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_put\>/;'q;"	kind:pred
mvar.mvar.try_take	thread.mvar.m	/^:- pred mvar.try_take(mvar(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_take\>/;'q;"	kind:pred
mvar.put	thread.mvar.m	/^:- pred mvar.put(mvar(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<mvar.put\>/;'q;"	kind:pred
mvar.read	thread.mvar.m	/^:- pred mvar.read(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.read\>/;'q;"	kind:pred
mvar.take	thread.mvar.m	/^:- pred mvar.take(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.take\>/;'q;"	kind:pred
mvar.try_put	thread.mvar.m	/^:- pred mvar.try_put(mvar(T)::in, T::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_put\>/;'q;"	kind:pred
mvar.try_take	thread.mvar.m	/^:- pred mvar.try_take(mvar(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_take\>/;'q;"	kind:pred
n_bit_mask	bitmap.m	/^:- func n_bit_mask(num_bits) = byte.$/;kq|/^\<n_bit_mask\>/;'q;"	kind:func	file:
name	io.m	/^    pred(name\/4) is io.binary_input_stream_name$/;kq|-;/\<name\>/;'q;"	kind:tcim	file:
name	io.m	/^    pred(name\/4) is io.binary_output_stream_name$/;kq|-;/\<name\>/;'q;"	kind:tcim	file:
name	io.m	/^    pred(name\/4) is io.input_stream_name$/;kq|-;/\<name\>/;'q;"	kind:tcim	file:
name	io.m	/^    pred(name\/4) is io.output_stream_name$/;kq|-;/\<name\>/;'q;"	kind:tcim	file:
name	lexer.m	/^    --->    name(string)$/;kq|-;/\<name\>/;'q;"	kind:cons
name	stream.m	/^        pred name(Stream::in, stream.name::out, State::di, State::uo) is det$/;kq|-;/\<name\>/;'q;"	kind:tcm
name	stream.m	/^:- type stream.name == string.$/;kq|-;/\<name\>/;'q;"	kind:type
name_var	varset.m	/^:- func varset.name_var(varset(T), var(T), string) = varset(T).$/;kq|/^\<varset.name_var\>/;'q;"	kind:func
name_var	varset.m	/^:- pred varset.name_var(var(T)::in, string::in,$/;kq|/^\<varset.name_var\>/;'q;"	kind:pred
named_arg	deconstruct.m	/^:- some [ArgT] pred named_arg(T, noncanon_handling, string, ArgT).$/;kq|/^\<named_arg\>/;'q;"	kind:pred
named_arg_cc	deconstruct.m	/^:- pred named_arg_cc(T::in, string::in, maybe_arg::out) is cc_multi.$/;kq|/^\<named_arg_cc\>/;'q;"	kind:pred
named_pipe	io.m	/^    ;       named_pipe$/;kq|-;/\<named_pipe\>/;'q;"	kind:cons
native_format_char	string.m	/^:- func native_format_char(string, char) = string.$/;kq|/^\<native_format_char\>/;'q;"	kind:func	file:
native_format_float	string.m	/^:- func native_format_float(string, float) = string.$/;kq|/^\<native_format_float\>/;'q;"	kind:func	file:
native_format_int	string.m	/^:- func native_format_int(string, int) = string.$/;kq|/^\<native_format_int\>/;'q;"	kind:func	file:
native_format_string	string.m	/^:- func native_format_string(string, string) = string.$/;kq|/^\<native_format_string\>/;'q;"	kind:func	file:
near_stack_limits	exception.m	/^    --->    near_stack_limits.$/;kq|-;/\<near_stack_limits\>/;'q;"	kind:cons
near_stack_limits	exception.m	/^:- type near_stack_limits$/;kq|-;/\<near_stack_limits\>/;'q;"	kind:type
need_arg	getopt.m	/^:- pred getopt.need_arg(option_data::in, bool::out) is det.$/;kq|/^\<getopt.need_arg\>/;'q;"	kind:pred	file:
need_arg	getopt_io.m	/^:- pred getopt_io.need_arg(option_data::in, bool::out) is det.$/;kq|/^\<getopt_io.need_arg\>/;'q;"	kind:pred	file:
neg	robdd.m	/^    ;   neg(var(T)).$/;kq|-;/\<neg\>/;'q;"	kind:cons
neg_list	integer.m	/^:- pred neg_list(list(int)::in, list(int)::out) is det.$/;kq|/^\<neg_list\>/;'q;"	kind:pred	file:
negate	calendar.m	/^:- func negate(duration) = duration.$/;kq|/^\<negate\>/;'q;"	kind:func
negate	std_util.m	/^:- pred negate((pred)::in((pred) is semidet)) is semidet.$/;kq|/^\<negate\>/;'q;"	kind:pred
negated_filter	assoc_list.m	/^:- func assoc_list.negated_filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.negated_filter\>/;'q;"	kind:func
negated_filter	assoc_list.m	/^:- pred assoc_list.negated_filter(pred(K)::in(pred(in) is semidet),$/;kq|/^\<assoc_list.negated_filter\>/;'q;"	kind:pred
negated_filter	list.m	/^:- func list.negated_filter(pred(X)::in(pred(in) is semidet), list(X)::in)$/;kq|/^\<list.negated_filter\>/;'q;"	kind:func
negated_filter	list.m	/^:- pred list.negated_filter(pred(X)::in(pred(in) is semidet), list(X)::in,$/;kq|/^\<list.negated_filter\>/;'q;"	kind:pred
neq_vars	robdd.m	/^:- func neq_vars(var(T), var(T)) = robdd(T).$/;kq|/^\<neq_vars\>/;'q;"	kind:func
nest	pprint.m	/^:- func nest(int, T)        = doc <= (doc(T)).$/;kq|/^\<nest\>/;'q;"	kind:func
new	bit_buffer.read.m	/^:- func new(num_bytes, Stream, State) = read_buffer(Stream, State, Error)$/;kq|/^\<new\>/;'q;"	kind:func
new	bit_buffer.write.m	/^:- func new(num_bytes, Stream, State) = write_buffer(Stream, State)$/;kq|/^\<new\>/;'q;"	kind:func
new	builtin.m	/^:- inst new == free.$/;kq|-;/\<new\>/;'q;"	kind:inst
new	hash_table.m	/^:- func new(hash_pred(K), int, float) = hash_table(K, V).$/;kq|/^\<new\>/;'q;"	kind:func
new_arg_ref	store.m	/^:- pred store.new_arg_ref(T::di, int::in, generic_ref(ArgT, S)::out,$/;kq|/^\<store.new_arg_ref\>/;'q;"	kind:pred
new_bitmap_builder	bit_buffer.write.m	/^:- func new_bitmap_builder(num_bytes) = write_buffer.$/;kq|/^\<new_bitmap_builder\>/;'q;"	kind:func
new_bitmap_reader	bit_buffer.read.m	/^:- func new_bitmap_reader(bitmap) = read_buffer.$/;kq|/^\<new_bitmap_reader\>/;'q;"	kind:func
new_bitmap_reader	bit_buffer.read.m	/^:- func new_bitmap_reader(bitmap, bit_index, num_bits) = read_buffer.$/;kq|/^\<new_bitmap_reader\>/;'q;"	kind:func
new_buffer	bit_buffer.m	/^:- func new_buffer(bitmap, bit_index, num_bits, bool, Stream, State) =$/;kq|/^\<new_buffer\>/;'q;"	kind:func	file:
new_buffer_2	bit_buffer.m	/^:- func new_buffer_2(bitmap, num_bits, bit_index, bool,$/;kq|/^\<new_buffer_2\>/;'q;"	kind:func	file:
new_cyclic_mutvar	store.m	/^:- pred store.new_cyclic_mutvar((func(generic_mutvar(T, S)) = T)::in,$/;kq|/^\<store.new_cyclic_mutvar\>/;'q;"	kind:pred
new_cyclic_mutvar	version_store.m	/^:- pred new_cyclic_mutvar((func(mutvar(T, S)) = T)::in, mutvar(T, S)::out,$/;kq|/^\<new_cyclic_mutvar\>/;'q;"	kind:pred
new_default	hash_table.m	/^:- func new_default(hash_pred(K)) = hash_table(K, V).$/;kq|/^\<new_default\>/;'q;"	kind:func
new_element	eqvclass.m	/^:- func eqvclass.new_element(eqvclass(T), T) = eqvclass(T).$/;kq|/^\<eqvclass.new_element\>/;'q;"	kind:func
new_element	eqvclass.m	/^:- pred eqvclass.new_element(T::in, eqvclass(T)::in, eqvclass(T)::out) is det.$/;kq|/^\<eqvclass.new_element\>/;'q;"	kind:pred
new_equivalence	eqvclass.m	/^:- func eqvclass.new_equivalence(eqvclass(T), T, T) = eqvclass(T).$/;kq|/^\<eqvclass.new_equivalence\>/;'q;"	kind:func
new_equivalence	eqvclass.m	/^:- pred eqvclass.new_equivalence(T::in, T::in,$/;kq|/^\<eqvclass.new_equivalence\>/;'q;"	kind:pred
new_formatter_map	pretty_printer.m	/^:- func new_formatter_map = formatter_map.$/;kq|/^\<new_formatter_map\>/;'q;"	kind:func
new_future	par_builtin.m	/^:- pred new_future(int::in, future(T)::uo) is det.$/;kq|/^\<new_future\>/;'q;"	kind:pred
new_int_reference	benchmarking.m	/^:- impure pred new_int_reference(int::in, int_reference::out) is det.$/;kq|/^\<new_int_reference\>/;'q;"	kind:pred	file:
new_maybe_named_var	varset.m	/^:- pred varset.new_maybe_named_var(maybe(string)::in, var(T)::out,$/;kq|/^\<varset.new_maybe_named_var\>/;'q;"	kind:pred
new_mutvar	mutvar.m	/^:- impure pred new_mutvar(T, mutvar(T)).$/;kq|/^\<new_mutvar\>/;'q;"	kind:pred
new_mutvar	store.m	/^:- pred store.new_mutvar(T::in, generic_mutvar(T, S)::out, S::di, S::uo)$/;kq|/^\<store.new_mutvar\>/;'q;"	kind:pred
new_mutvar	version_store.m	/^:- pred new_mutvar(T::in, mutvar(T, S)::out,$/;kq|/^\<new_mutvar\>/;'q;"	kind:pred
new_mutvar0	mutvar.m	/^:- impure pred new_mutvar0(mutvar(T)).$/;kq|/^\<new_mutvar0\>/;'q;"	kind:pred
new_named_var	varset.m	/^:- pred varset.new_named_var(string::in, var(T)::out,$/;kq|/^\<varset.new_named_var\>/;'q;"	kind:pred
new_ref	store.m	/^:- pred store.new_ref(T::di, generic_ref(T, S)::out,$/;kq|/^\<store.new_ref\>/;'q;"	kind:pred
new_src_and_ps	parsing_utils.m	/^:- pred new_src_and_ps(string::in, skip_whitespace_pred::in(parser),$/;kq|/^\<new_src_and_ps\>/;'q;"	kind:pred
new_src_and_ps	parsing_utils.m	/^:- pred new_src_and_ps(string::in, src::out, ps::out) is det.$/;kq|/^\<new_src_and_ps\>/;'q;"	kind:pred
new_stm_var	stm_builtin.m	/^:- pred new_stm_var(T::in, stm_var(T)::out, io::di, io::uo) is det.$/;kq|/^\<new_stm_var\>/;'q;"	kind:pred
new_stm_var_atomic	stm_builtin.m	/^:- pred new_stm_var_atomic(T::in, stm_var(T)::out, stm::di, stm::uo) is det.$/;kq|/^\<new_stm_var_atomic\>/;'q;"	kind:pred
new_type_info	rtti_implementation.m	/^:- func new_type_info(type_info::in, int::in) = (type_info::uo) is det.$/;kq|/^\<new_type_info\>/;'q;"	kind:func	file:
new_uniquely_named_var	varset.m	/^:- pred varset.new_uniquely_named_var(string::in, var(T)::out,$/;kq|/^\<varset.new_uniquely_named_var\>/;'q;"	kind:pred
new_var	varset.m	/^:- pred varset.new_var(var(T)::out, varset(T)::in, varset(T)::out) is det.$/;kq|/^\<varset.new_var\>/;'q;"	kind:pred
new_vars	varset.m	/^:- pred varset.new_vars(int::in, list(var(T))::out,$/;kq|/^\<varset.new_vars\>/;'q;"	kind:pred
new_vars_2	varset.m	/^:- pred varset.new_vars_2(int::in, list(var(T))::in,$/;kq|/^\<varset.new_vars_2\>/;'q;"	kind:pred	file:
next_boundary	string.m	/^:- pred next_boundary(pred(char)::in(pred(in) is semidet), string::in, int::in,$/;kq|/^\<next_boundary\>/;'q;"	kind:pred	file:
next_char	parsing_utils.m	/^:- pred next_char(src::in, char::out, ps::in, ps::out) is semidet.$/;kq|/^\<next_char\>/;'q;"	kind:pred
next_char_no_progress	parsing_utils.m	/^:- pred next_char_no_progress(src::in, char::out, ps::in, ps::out) is semidet.$/;kq|/^\<next_char_no_progress\>/;'q;"	kind:pred
next_id	eqvclass.m	/^                next_id     :: counter,$/;kq|-;/\<next_id\>/;'q;"	kind:fld	file:
next_key	digraph.m	/^                next_key            :: int,$/;kq|-;/\<next_key\>/;'q;"	kind:fld	file:
nil	bt_array.m	/^    --->    nil$/;kq|-;/\<nil\>/;'q;"	kind:cons	file:
nil	pprint.m	/^:- func nil                 = doc.$/;kq|/^\<nil\>/;'q;"	kind:func
nil_or_singleton_list	exception.m	/^:- inst nil_or_singleton_list ---> [] ; [ground].$/;kq|-;/\<nil_or_singleton_list\>/;'q;"	kind:inst
nl	io.m	/^:- pred io.nl(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.nl\>/;'q;"	kind:pred
nl	io.m	/^:- pred io.nl(io::di, io::uo) is det.$/;kq|/^\<io.nl\>/;'q;"	kind:pred
nl	pretty_printer.m	/^    ;       nl$/;kq|-;/\<nl\>/;'q;"	kind:cons
nl	stream.string_writer.m	/^:- pred nl(Stream::in, State::di, State::uo) is det$/;kq|/^\<nl\>/;'q;"	kind:pred
no	bool.m	/^    --->    no$/;kq|-;/\<no\>/;'q;"	kind:cons
no	builtin.m	/^:- mode no == new >> old.$/;kq|-;/\<no\>/;'q;"	kind:mode
no	maybe.m	/^    --->    no$/;kq|-;/\<no\>/;'q;"	kind:cons
no_arg	deconstruct.m	/^    ;       no_arg.$/;kq|-;/\<no_arg\>/;'q;"	kind:cons
no_clauses	private_builtin.m	/^:- pred no_clauses(string::in) is erroneous.$/;kq|/^\<no_clauses\>/;'q;"	kind:pred
no_dtd	term_to_xml.m	/^    ;       no_dtd.$/;kq|-;/\<no_dtd\>/;'q;"	kind:cons
no_dups	set_ordlist.m	/^:- pred set_ordlist.no_dups(T::in, list(T)::in) is semidet.$/;kq|/^\<set_ordlist.no_dups\>/;'q;"	kind:pred	file:
no_format	term_to_xml.m	/^    ;       no_format.$/;kq|-;/\<no_format\>/;'q;"	kind:cons	file:
no_roots	math.m	/^    --->    no_roots$/;kq|-;/\<no_roots\>/;'q;"	kind:cons
no_stylesheet	term_to_xml.m	/^    ;       no_stylesheet.$/;kq|-;/\<no_stylesheet\>/;'q;"	kind:cons
node	bt_array.m	/^    ;       node(T, ra_list_bintree(T), ra_list_bintree(T)).$/;kq|-;/\<node\>/;'q;"	kind:cons	file:
node	fat_sparse_bitset.m	/^    ;       node($/;kq|-;/\<node\>/;'q;"	kind:cons	file:
node_list	tree_bitset.m	/^:- type node_list$/;kq|-;/\<node_list\>/;'q;"	kind:type	file:
node_name	robdd.m	/^:- func node_name(robdd(T)) = string.$/;kq|/^\<node_name\>/;'q;"	kind:func	file:
node_num	robdd.m	/^:- func node_num(robdd(T)) = int.$/;kq|/^\<node_num\>/;'q;"	kind:func	file:
non_call_port_code_ac	profiling_builtin.m	/^:- impure pred non_call_port_code_ac(proc_layout::in, call_site_dynamic::out,$/;kq|/^\<non_call_port_code_ac\>/;'q;"	kind:pred
non_call_port_code_sr	profiling_builtin.m	/^:- impure pred non_call_port_code_sr(proc_layout::in, call_site_dynamic::out,$/;kq|/^\<non_call_port_code_sr\>/;'q;"	kind:pred
non_cc_call	solutions.m	/^:- impure pred non_cc_call(pred(T, Acc, Acc), T, Acc, Acc).$/;kq|/^\<non_cc_call\>/;'q;"	kind:pred	file:
non_cc_call	solutions.m	/^:- impure pred non_cc_call(pred(T1, Acc1, Acc1, Acc2, Acc2), T1,$/;kq|/^\<non_cc_call\>/;'q;"	kind:pred	file:
non_cc_call	solutions.m	/^:- impure pred non_cc_call(pred(T1, T2, Acc, Acc), T1, T2, Acc, Acc).$/;kq|/^\<non_cc_call\>/;'q;"	kind:pred	file:
non_du	term_to_xml.m	/^    ;       non_du.$/;kq|-;/\<non_du\>/;'q;"	kind:cons
non_embedded_dtd	term_to_xml.m	/^:- inst non_embedded_dtd$/;kq|-;/\<non_embedded_dtd\>/;'q;"	kind:inst
non_empty	set.m	/^:- pred set.non_empty(set(T)::in) is semidet.$/;kq|/^\<set.non_empty\>/;'q;"	kind:pred
non_empty	set_bbbtree.m	/^:- pred set_bbbtree.non_empty(set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.non_empty\>/;'q;"	kind:pred
non_empty	set_ctree234.m	/^:- pred set_ctree234.non_empty(set_ctree234(T)::in) is semidet.$/;kq|/^\<set_ctree234.non_empty\>/;'q;"	kind:pred
non_empty	set_ordlist.m	/^:- pred set_ordlist.non_empty(set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.non_empty\>/;'q;"	kind:pred
non_empty	set_tree234.m	/^:- pred set_tree234.non_empty(set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.non_empty\>/;'q;"	kind:pred
non_empty	set_unordlist.m	/^:- pred set_unordlist.non_empty(set_unordlist(_T)::in) is semidet.$/;kq|/^\<set_unordlist.non_empty\>/;'q;"	kind:pred
non_empty_list	list.m	/^:- inst non_empty_list ---> [ground | ground].$/;kq|-;/\<non_empty_list\>/;'q;"	kind:inst
non_exit_port_code_ac	profiling_builtin.m	/^:- impure pred non_exit_port_code_ac(call_site_dynamic::in,$/;kq|/^\<non_exit_port_code_ac\>/;'q;"	kind:pred
non_exit_port_code_sr	profiling_builtin.m	/^:- impure pred non_exit_port_code_sr(call_site_dynamic::in,$/;kq|/^\<non_exit_port_code_sr\>/;'q;"	kind:pred
non_fail_port_code_ac	profiling_builtin.m	/^:- impure pred non_fail_port_code_ac(call_site_dynamic::in,$/;kq|/^\<non_fail_port_code_ac\>/;'q;"	kind:pred
non_fail_port_code_sr	profiling_builtin.m	/^:- impure pred non_fail_port_code_sr(call_site_dynamic::in,$/;kq|/^\<non_fail_port_code_sr\>/;'q;"	kind:pred
non_redo_port_code_ac	profiling_builtin.m	/^:- impure pred non_redo_port_code_ac(call_site_dynamic::in, proc_dynamic::in)$/;kq|/^\<non_redo_port_code_ac\>/;'q;"	kind:pred
non_redo_port_code_sr	profiling_builtin.m	/^:- impure pred non_redo_port_code_sr(call_site_dynamic::in, proc_dynamic::in)$/;kq|/^\<non_redo_port_code_sr\>/;'q;"	kind:pred
non_zero_digit	string.m	/^:- pred non_zero_digit(list(char)::in, list(char)::out) is semidet.$/;kq|/^\<non_zero_digit\>/;'q;"	kind:pred	file:
noncanon_handling	deconstruct.m	/^:- type noncanon_handling$/;kq|-;/\<noncanon_handling\>/;'q;"	kind:type
nondet_int_in_range	int.m	/^:- pred nondet_int_in_range(int::in, int::in, int::out) is nondet.$/;kq|/^\<nondet_int_in_range\>/;'q;"	kind:pred
nondet_lookup	multi_map.m	/^:- pred multi_map.nondet_lookup(multi_map(K, V)::in, K::in, V::out) is nondet.$/;kq|/^\<multi_map.nondet_lookup\>/;'q;"	kind:pred
nondet_search	multi_map.m	/^:- pred multi_map.nondet_search(multi_map(K, V)::in, K::in, V::out) is nondet.$/;kq|/^\<multi_map.nondet_search\>/;'q;"	kind:pred
none	getopt.m	/^    --->    none$/;kq|-;/\<none\>/;'q;"	kind:cons
none	getopt.m	/^    --->    none$/;kq|-;/\<none\>/;'q;"	kind:cons	file:
none	getopt_io.m	/^    --->    none$/;kq|-;/\<none\>/;'q;"	kind:cons
none	getopt_io.m	/^    --->    none$/;kq|-;/\<none\>/;'q;"	kind:cons	file:
nonempty_cord	cord.m	/^    ;       nonempty_cord(cord_node(T)).$/;kq|-;/\<nonempty_cord\>/;'q;"	kind:cons	file:
nonvar	private_builtin.m	/^:- impure pred nonvar(T).$/;kq|/^\<nonvar\>/;'q;"	kind:pred
not	bool.m	/^:- func bool.not(bool) = bool.$/;kq|/^\<bool.not\>/;'q;"	kind:func
not	bool.m	/^:- pred bool.not(bool::in, bool::out) is det.$/;kq|/^\<bool.not\>/;'q;"	kind:pred
not_adjacent_to_graphic_token	term_io.m	/^    ;       not_adjacent_to_graphic_token.$/;kq|-;/\<not_adjacent_to_graphic_token\>/;'q;"	kind:cons
not_scanned_past_whitespace	lexer.m	/^    ;       not_scanned_past_whitespace.$/;kq|-;/\<not_scanned_past_whitespace\>/;'q;"	kind:cons	file:
not_var	robdd.m	/^:- func not_var(var(T)) = robdd(T).$/;kq|/^\<not_var\>/;'q;"	kind:func
notag	rtti_implementation.m	/^:- inst notag == bound(tcr_notag ; tcr_notag_usereq ;$/;kq|-;/\<notag\>/;'q;"	kind:inst	file:
notag_functor_arg_name	rtti_implementation.m	/^:- func notag_functor_arg_name(notag_functor_desc) = string.$/;kq|/^\<notag_functor_arg_name\>/;'q;"	kind:func	file:
notag_functor_arg_type	rtti_implementation.m	/^:- func notag_functor_arg_type(notag_functor_desc) = pseudo_type_info.$/;kq|/^\<notag_functor_arg_type\>/;'q;"	kind:func	file:
notag_functor_desc	rtti_implementation.m	/^:- func notag_functor_desc(type_ctor_rep, int, type_functors)$/;kq|/^\<notag_functor_desc\>/;'q;"	kind:func	file:
notag_functor_desc	rtti_implementation.m	/^:- type notag_functor_desc ---> notag_functor_desc(c_pointer).$/;kq|-;/\<notag_functor_desc\>/;'q;"	kind:cons	file:
notag_functor_desc	rtti_implementation.m	/^:- type notag_functor_desc ---> notag_functor_desc(c_pointer).$/;kq|-;/\<notag_functor_desc\>/;'q;"	kind:type	file:
notag_functor_name	rtti_implementation.m	/^:- func notag_functor_name(notag_functor_desc) = string.$/;kq|/^\<notag_functor_name\>/;'q;"	kind:func	file:
notrack	getopt.m	/^    ;       notrack($/;kq|-;/\<notrack\>/;'q;"	kind:cons	file:
notrack	getopt_io.m	/^    ;       notrack($/;kq|-;/\<notrack\>/;'q;"	kind:cons	file:
november	calendar.m	/^    ;       november$/;kq|-;/\<november\>/;'q;"	kind:cons
now_near_stack_limits	exception.m	/^:- impure pred now_near_stack_limits is semidet.$/;kq|/^\<now_near_stack_limits\>/;'q;"	kind:pred	file:
nth_member_lookup	list.m	/^:- pred list.nth_member_lookup(list(T)::in, T::in, int::out) is det.$/;kq|/^\<list.nth_member_lookup\>/;'q;"	kind:pred
nth_member_search	list.m	/^:- pred list.nth_member_search(list(T)::in, T::in, int::out) is semidet.$/;kq|/^\<list.nth_member_search\>/;'q;"	kind:pred
nth_member_search_2	list.m	/^:- pred list.nth_member_search_2(list(T)::in, T::in, int::in, int::out)$/;kq|/^\<list.nth_member_search_2\>/;'q;"	kind:pred	file:
null	construct.m	/^:- pred null(string::in) is semidet.$/;kq|/^\<null\>/;'q;"	kind:pred	file:
null	rtti_implementation.m	/^:- pred null(T::in) is semidet.$/;kq|/^\<null\>/;'q;"	kind:pred	file:
null_character_error	lexer.m	/^:- func null_character_error = token.$/;kq|/^\<null_character_error\>/;'q;"	kind:func	file:
null_functor_desc	rtti_implementation.m	/^:- func null_functor_desc = du_functor_desc.$/;kq|/^\<null_functor_desc\>/;'q;"	kind:func	file:
null_string	rtti_implementation.m	/^:- func null_string = string.$/;kq|/^\<null_string\>/;'q;"	kind:func	file:
null_to_no	construct.m	/^:- func null_to_no(string) = maybe(string).$/;kq|/^\<null_to_no\>/;'q;"	kind:func	file:
num_allocated	varset.m	/^:- func varset.num_allocated(varset(T)) = int.$/;kq|/^\<varset.num_allocated\>/;'q;"	kind:func
num_bits	bitmap.m	/^:- func num_bits(bitmap) = num_bits.$/;kq|/^\<num_bits\>/;'q;"	kind:func
num_bits	bitmap.m	/^:- type num_bits == int.$/;kq|-;/\<num_bits\>/;'q;"	kind:type
num_bits	version_bitmap.m	/^:- func num_bits(version_bitmap) = int.$/;kq|/^\<num_bits\>/;'q;"	kind:func
num_bits_to_byte_boundary	bit_buffer.read.m	/^:- func num_bits_to_byte_boundary(read_buffer(_, _, _)) = num_bits.$/;kq|/^\<num_bits_to_byte_boundary\>/;'q;"	kind:func
num_bits_to_byte_boundary	bit_buffer.write.m	/^:- func num_bits_to_byte_boundary(write_buffer(_, _)) = num_bits.$/;kq|/^\<num_bits_to_byte_boundary\>/;'q;"	kind:func
num_buckets	hash_table.m	/^:- func num_buckets(hash_table(K, V)) = int.$/;kq|/^\<num_buckets\>/;'q;"	kind:func
num_buckets	version_hash_table.m	/^:- func num_buckets(version_hash_table(K, V)) = int.$/;kq|/^\<num_buckets\>/;'q;"	kind:func
num_buffered_bits	bit_buffer.read.m	/^:- func num_buffered_bits(read_buffer(_, _, _)) = num_bits.$/;kq|/^\<num_buffered_bits\>/;'q;"	kind:func
num_buffered_bits	bit_buffer.write.m	/^:- func num_buffered_bits(write_buffer(_, _)) = num_bits.$/;kq|/^\<num_buffered_bits\>/;'q;"	kind:func
num_bytes	bitmap.m	/^:- func num_bytes(bitmap) = num_bytes.$/;kq|/^\<num_bytes\>/;'q;"	kind:func
num_bytes	bitmap.m	/^:- type num_bytes == int.$/;kq|-;/\<num_bytes\>/;'q;"	kind:type
num_functors	construct.m	/^:- func num_functors(type_desc) = int is semidet.$/;kq|/^\<num_functors\>/;'q;"	kind:func
num_functors	erlang_rtti_implementation.m	/^:- func num_functors(type_desc.type_desc) = int is semidet.$/;kq|/^\<num_functors\>/;'q;"	kind:func
num_functors	erlang_rtti_implementation.m	/^:- pred num_functors(type_info::in, maybe(int)::out) is det.$/;kq|/^\<num_functors\>/;'q;"	kind:pred	file:
num_ints_required	version_bitmap.m	/^:- func num_ints_required(int) = int.$/;kq|/^\<num_ints_required\>/;'q;"	kind:func	file:
num_lookups	table_statistics.m	/^                num_lookups                 :: int,$/;kq|-;/\<num_lookups\>/;'q;"	kind:fld
num_lookups_is_dupl	table_statistics.m	/^                num_lookups_is_dupl         :: int,$/;kq|-;/\<num_lookups_is_dupl\>/;'q;"	kind:fld
num_occupants	hash_table.m	/^                num_occupants           :: int,$/;kq|-;/\<num_occupants\>/;'q;"	kind:fld
num_occupants	hash_table.m	/^:- func num_occupants(hash_table(K, V)) = int.$/;kq|/^\<num_occupants\>/;'q;"	kind:func
num_occupants	version_hash_table.m	/^:- func num_occupants(version_hash_table(K, V)) = int.$/;kq|/^\<num_occupants\>/;'q;"	kind:func
num_os_threads	par_builtin.m	/^:- pred num_os_threads(int::out) is det.$/;kq|/^\<num_os_threads\>/;'q;"	kind:pred
num_to_month	calendar.m	/^:- pred num_to_month(int, month).$/;kq|/^\<num_to_month\>/;'q;"	kind:pred	file:
numer	rational.m	/^:- func rational.numer(rational) = integer.$/;kq|/^\<rational.numer\>/;'q;"	kind:func
numeric_argument	getopt.m	/^:- pred getopt.numeric_argument(string::in, string::in,$/;kq|/^\<getopt.numeric_argument\>/;'q;"	kind:pred	file:
numeric_argument	getopt_io.m	/^:- pred getopt_io.numeric_argument(string::in, string::in,$/;kq|/^\<getopt_io.numeric_argument\>/;'q;"	kind:pred	file:
nyi_foreign_type_compare	private_builtin.m	/^:- pred nyi_foreign_type_compare(comparison_result::uo, T::in, T::in) is det.$/;kq|/^\<nyi_foreign_type_compare\>/;'q;"	kind:pred
nyi_foreign_type_unify	private_builtin.m	/^:- pred nyi_foreign_type_unify(T::in, T::in) is semidet.$/;kq|/^\<nyi_foreign_type_unify\>/;'q;"	kind:pred
o	string.m	/^    ;       o(int)$/;kq|-;/\<o\>/;'q;"	kind:cons	file:
oa	builtin.m	/^:- mode oa == free >> any.$/;kq|-;/\<oa\>/;'q;"	kind:mode
occurs	term.m	/^:- pred occurs(term(T)::in, var(T)::in, substitution(T)::in) is semidet.$/;kq|/^\<occurs\>/;'q;"	kind:pred
occurs_list	term.m	/^:- pred occurs_list(list(term(T))::in, var(T)::in, substitution(T)::in)$/;kq|/^\<occurs_list\>/;'q;"	kind:pred
october	calendar.m	/^    ;       october$/;kq|-;/\<october\>/;'q;"	kind:cons
odd	int.m	/^:- pred odd(int::in) is semidet.$/;kq|/^\<odd\>/;'q;"	kind:pred
off_list	queue.m	/^                off_list :: list(T)$/;kq|-;/\<off_list\>/;'q;"	kind:fld	file:
offset	fat_sparse_bitset.m	/^                offset  :: int,$/;kq|-;/\<offset\>/;'q;"	kind:fld	file:
offset	lexer.m	/^:- type offset == int.$/;kq|-;/\<offset\>/;'q;"	kind:type
offset	sparse_bitset.m	/^                offset  :: int, % multiple of bits_per_int$/;kq|-;/\<offset\>/;'q;"	kind:fld	file:
offset_to_line_number_and_position	parsing_utils.m	/^:- pred offset_to_line_number_and_position(line_numbers::in, int::in,$/;kq|/^\<offset_to_line_number_and_position\>/;'q;"	kind:pred
offset_to_line_number_and_position_2	parsing_utils.m	/^:- pred offset_to_line_number_and_position_2(line_numbers::in, int::in,$/;kq|/^\<offset_to_line_number_and_position_2\>/;'q;"	kind:pred	file:
ok	getopt.m	/^    --->    ok(option_table(OptionType))$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	getopt_io.m	/^    --->    ok(option_table(OptionType))$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons	file:
ok	io.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	io.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons	file:
ok	maybe.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	maybe.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	parser.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons	file:
ok	parsing_utils.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	stream.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	stream.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	stream.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	stream.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	stream.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	term.m	/^    --->    ok(T)$/;kq|-;/\<ok\>/;'q;"	kind:cons
ok	term_to_xml.m	/^    --->    ok$/;kq|-;/\<ok\>/;'q;"	kind:cons
old	builtin.m	/^:- inst old == any.$/;kq|-;/\<old\>/;'q;"	kind:inst
old_merge	map.m	/^:- func map.old_merge(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.old_merge\>/;'q;"	kind:func
old_merge	map.m	/^:- pred map.old_merge(map(K, V)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.old_merge\>/;'q;"	kind:pred
on_list	queue.m	/^                on_list  :: list(T),$/;kq|-;/\<on_list\>/;'q;"	kind:fld	file:
one	integer.m	/^:- func integer.one = integer.$/;kq|/^\<integer.one\>/;'q;"	kind:func
one	rational.m	/^:- func rational.one = rational.$/;kq|/^\<rational.one\>/;'q;"	kind:func
one	robdd.m	/^:- func one = robdd(T).$/;kq|/^\<one\>/;'q;"	kind:func
one	rtree.m	/^    ;       one(K, V) $/;kq|-;/\<one\>/;'q;"	kind:cons	file:
one_argument	test_bitset.m	/^    ;       one_argument(string,$/;kq|-;/\<one_argument\>/;'q;"	kind:cons
one_member	set_ctree234.m	/^:- pred set_ctree234.one_member(set_ctree234(T)::in, T::out) is nondet.$/;kq|/^\<set_ctree234.one_member\>/;'q;"	kind:pred
one_or_more	parsing_utils.m	/^:- pred one_or_more(parser(T)::in(parser), src::in, list(T)::out,$/;kq|/^\<one_or_more\>/;'q;"	kind:pred
one_or_more	parsing_utils.m	/^:- pred one_or_more(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<one_or_more\>/;'q;"	kind:pred
one_root	math.m	/^    ;       one_root(float)$/;kq|-;/\<one_root\>/;'q;"	kind:cons
oo	builtin.m	/^:- mode oo == old >> old.$/;kq|-;/\<oo\>/;'q;"	kind:mode
op_info	ops.m	/^    --->    op_info($/;kq|-;/\<op_info\>/;'q;"	kind:cons
op_info	ops.m	/^:- type ops.op_info$/;kq|-;/\<op_info\>/;'q;"	kind:type
op_table	ops.m	/^:- instance ops.op_table(ops.mercury_op_table) where [$/;kq|-;/\<op_table\>/;'q;"	kind:tci	file:
op_table	ops.m	/^:- pred ops.op_table(string::in, op_info::out, list(op_info)::out) is semidet.$/;kq|/^\<ops.op_table\>/;'q;"	kind:pred	file:
op_table	ops.m	/^:- typeclass ops.op_table(Table) where [$/;kq|-;/\<op_table\>/;'q;"	kind:tc
open	dir.m	/^:- pred dir.open(string::in, io.result({dir.stream, string})::out,$/;kq|/^\<dir.open\>/;'q;"	kind:pred	file:
open	lexer.m	/^    ;       open                % '('$/;kq|-;/\<open\>/;'q;"	kind:cons
open_2	dir.m	/^:- pred dir.open_2(string::in, io.result({dir.stream, string})::out,$/;kq|/^\<dir.open_2\>/;'q;"	kind:pred	file:
open_append	io.m	/^:- pred io.open_append(string::in, io.res(io.output_stream)::out,$/;kq|/^\<io.open_append\>/;'q;"	kind:pred
open_binary_append	io.m	/^:- pred io.open_binary_append(string::in,$/;kq|/^\<io.open_binary_append\>/;'q;"	kind:pred
open_binary_input	io.m	/^:- pred io.open_binary_input(string::in,$/;kq|/^\<io.open_binary_input\>/;'q;"	kind:pred
open_binary_output	io.m	/^:- pred io.open_binary_output(string::in,$/;kq|/^\<io.open_binary_output\>/;'q;"	kind:pred
open_ct	lexer.m	/^    ;       open_ct             % '(' without any preceding whitespace$/;kq|-;/\<open_ct\>/;'q;"	kind:cons
open_curly	lexer.m	/^    ;       open_curly          % '{'$/;kq|-;/\<open_curly\>/;'q;"	kind:cons
open_group	pretty_printer.m	/^    --->    open_group$/;kq|-;/\<open_group\>/;'q;"	kind:cons	file:
open_input	io.m	/^:- pred io.open_input(string::in, io.res(io.input_stream)::out,$/;kq|/^\<io.open_input\>/;'q;"	kind:pred
open_list	lexer.m	/^    ;       open_list           % '['$/;kq|-;/\<open_list\>/;'q;"	kind:cons
open_output	io.m	/^:- pred io.open_output(string::in, io.res(io.output_stream)::out,$/;kq|/^\<io.open_output\>/;'q;"	kind:pred
ops	ops.m	/^    --->    ops.mercury_op_table.$/;kq|-;/\<ops\>/;'q;"	kind:cons	file:
ops.adjust_priority_for_assoc	ops.m	/^:- pred adjust_priority_for_assoc(ops.priority::in, ops.assoc::in,$/;kq|/^\<adjust_priority_for_assoc\>/;'q;"	kind:pred
ops.arg_priority	ops.m	/^    func ops.arg_priority(Table) = ops.priority$/;kq|-;/\<ops.arg_priority\>/;'q;"	kind:tcm
ops.arg_priority	ops.m	/^    func(ops.arg_priority\/1) is ops.mercury_arg_priority$/;kq|-;/\<ops.arg_priority\>/;'q;"	kind:tcim	file:
ops.assoc	ops.m	/^:- type ops.assoc$/;kq|-;/\<ops.assoc\>/;'q;"	kind:type
ops.binary_prefix	ops.m	/^    ;       binary_prefix(ops.assoc, ops.assoc)     % Op term term$/;kq|-;/\<ops.binary_prefix\>/;'q;"	kind:cons
ops.class	ops.m	/^:- type ops.class$/;kq|-;/\<ops.class\>/;'q;"	kind:type
ops.infix	ops.m	/^    --->    infix(ops.assoc, ops.assoc)             % term Op term$/;kq|-;/\<ops.infix\>/;'q;"	kind:cons
ops.init_mercury_op_table	ops.m	/^:- func ops.init_mercury_op_table = (ops.mercury_op_table::uo) is det.$/;kq|/^\<ops.init_mercury_op_table\>/;'q;"	kind:func
ops.lookup_binary_prefix_op	ops.m	/^    pred ops.lookup_binary_prefix_op(Table::in, string::in,$/;kq|-;/\<ops.lookup_binary_prefix_op\>/;'q;"	kind:tcm
ops.lookup_binary_prefix_op	ops.m	/^    pred(ops.lookup_binary_prefix_op\/5) is$/;kq|-;/\<ops.lookup_binary_prefix_op\>/;'q;"	kind:tcim	file:
ops.lookup_infix_op	ops.m	/^    pred lookup_infix_op(Table::in, string::in, ops.priority::out,$/;kq|-;/\<ops.lookup_infix_op\>/;'q;"	kind:tcm
ops.lookup_infix_op	ops.m	/^    pred(ops.lookup_infix_op\/5) is ops.lookup_mercury_infix_op,$/;kq|-;/\<ops.lookup_infix_op\>/;'q;"	kind:tcim	file:
ops.lookup_mercury_infix_op	ops.m	/^:- pred ops.lookup_mercury_infix_op(mercury_op_table::in, string::in,$/;kq|/^\<ops.lookup_mercury_infix_op\>/;'q;"	kind:pred	file:
ops.lookup_mercury_op	ops.m	/^:- pred ops.lookup_mercury_op(mercury_op_table::in, string::in) is semidet.$/;kq|/^\<ops.lookup_mercury_op\>/;'q;"	kind:pred	file:
ops.lookup_mercury_op_infos	ops.m	/^:- pred ops.lookup_mercury_op_infos(mercury_op_table::in, string::in,$/;kq|/^\<ops.lookup_mercury_op_infos\>/;'q;"	kind:pred	file:
ops.lookup_mercury_postfix_op	ops.m	/^:- pred ops.lookup_mercury_postfix_op(mercury_op_table::in,$/;kq|/^\<ops.lookup_mercury_postfix_op\>/;'q;"	kind:pred	file:
ops.lookup_mercury_prefix_op	ops.m	/^:- pred ops.lookup_mercury_prefix_op(mercury_op_table::in,$/;kq|/^\<ops.lookup_mercury_prefix_op\>/;'q;"	kind:pred	file:
ops.lookup_op	ops.m	/^    pred ops.lookup_op(Table::in, string::in) is semidet,$/;kq|-;/\<ops.lookup_op\>/;'q;"	kind:tcm
ops.lookup_op	ops.m	/^    pred(ops.lookup_op\/2) is ops.lookup_mercury_op,$/;kq|-;/\<ops.lookup_op\>/;'q;"	kind:tcim	file:
ops.lookup_op_infos	ops.m	/^    pred ops.lookup_op_infos(Table::in, string::in,$/;kq|-;/\<ops.lookup_op_infos\>/;'q;"	kind:tcm
ops.lookup_op_infos	ops.m	/^    pred(ops.lookup_op_infos\/4) is ops.lookup_mercury_op_infos,$/;kq|-;/\<ops.lookup_op_infos\>/;'q;"	kind:tcim	file:
ops.lookup_operator_term	ops.m	/^    pred ops.lookup_operator_term(Table::in, ops.priority::out,$/;kq|-;/\<ops.lookup_operator_term\>/;'q;"	kind:tcm
ops.lookup_operator_term	ops.m	/^    pred(ops.lookup_operator_term\/4) is ops.lookup_mercury_operator_term,$/;kq|-;/\<ops.lookup_operator_term\>/;'q;"	kind:tcim	file:
ops.lookup_postfix_op	ops.m	/^    pred ops.lookup_postfix_op(Table::in, string::in, ops.priority::out,$/;kq|-;/\<ops.lookup_postfix_op\>/;'q;"	kind:tcm
ops.lookup_postfix_op	ops.m	/^    pred(ops.lookup_postfix_op\/4) is ops.lookup_mercury_postfix_op,$/;kq|-;/\<ops.lookup_postfix_op\>/;'q;"	kind:tcim	file:
ops.lookup_prefix_op	ops.m	/^    pred ops.lookup_prefix_op(Table::in, string::in,$/;kq|-;/\<ops.lookup_prefix_op\>/;'q;"	kind:tcm
ops.lookup_prefix_op	ops.m	/^    pred(ops.lookup_prefix_op\/4) is ops.lookup_mercury_prefix_op,$/;kq|-;/\<ops.lookup_prefix_op\>/;'q;"	kind:tcim	file:
ops.max_priority	ops.m	/^    func ops.max_priority(Table) = ops.priority,$/;kq|-;/\<ops.max_priority\>/;'q;"	kind:tcm
ops.max_priority	ops.m	/^    func(ops.max_priority\/1) is ops.mercury_max_priority,$/;kq|-;/\<ops.max_priority\>/;'q;"	kind:tcim	file:
ops.mercury_arg_priority	ops.m	/^:- func ops.mercury_arg_priority(mercury_op_table) = ops.priority.$/;kq|/^\<ops.mercury_arg_priority\>/;'q;"	kind:func	file:
ops.mercury_max_priority	ops.m	/^:- func ops.mercury_max_priority(mercury_op_table) = ops.priority.$/;kq|/^\<ops.mercury_max_priority\>/;'q;"	kind:func
ops.mercury_op_table	ops.m	/^:- type ops.mercury_op_table$/;kq|-;/\<ops.mercury_op_table\>/;'q;"	kind:type	file:
ops.op_info	ops.m	/^    --->    op_info($/;kq|-;/\<ops.op_info\>/;'q;"	kind:cons
ops.op_info	ops.m	/^:- type ops.op_info$/;kq|-;/\<ops.op_info\>/;'q;"	kind:type
ops.op_table	ops.m	/^:- instance ops.op_table(ops.mercury_op_table) where [$/;kq|-;/\<ops.op_table\>/;'q;"	kind:tci	file:
ops.op_table	ops.m	/^:- pred ops.op_table(string::in, op_info::out, list(op_info)::out) is semidet.$/;kq|/^\<ops.op_table\>/;'q;"	kind:pred	file:
ops.op_table	ops.m	/^:- typeclass ops.op_table(Table) where [$/;kq|-;/\<ops.op_table\>/;'q;"	kind:tc
ops.postfix	ops.m	/^    ;       postfix(ops.assoc).                     % term Op$/;kq|-;/\<ops.postfix\>/;'q;"	kind:cons
ops.prefix	ops.m	/^    ;       prefix(ops.assoc)                       % Op term$/;kq|-;/\<ops.prefix\>/;'q;"	kind:cons
ops.priority	ops.m	/^:- type ops.priority == int.$/;kq|-;/\<ops.priority\>/;'q;"	kind:type
ops.table	ops.m	/^:- type ops.table == ops.mercury_op_table.$/;kq|-;/\<ops.table\>/;'q;"	kind:type
ops.x	ops.m	/^    --->    x$/;kq|-;/\<ops.x\>/;'q;"	kind:cons
ops.y	ops.m	/^    ;       y.$/;kq|-;/\<ops.y\>/;'q;"	kind:cons
ops_table	parser.m	/^                ops_table   :: Ops,$/;kq|-;/\<ops_table\>/;'q;"	kind:fld	file:
optimize	map.m	/^:- func map.optimize(map(K, V)) = map(K, V).$/;kq|/^\<map.optimize\>/;'q;"	kind:func
optimize	map.m	/^:- pred map.optimize(map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.optimize\>/;'q;"	kind:pred
optimize	multi_map.m	/^:- func multi_map.optimize(multi_map(K, V)) = multi_map(K, V).$/;kq|/^\<multi_map.optimize\>/;'q;"	kind:func
optimize	multi_map.m	/^:- pred multi_map.optimize(multi_map(K, V)::in, multi_map(K, V)::out) is det.$/;kq|/^\<multi_map.optimize\>/;'q;"	kind:pred
option_data	getopt.m	/^:- type option_data$/;kq|-;/\<option_data\>/;'q;"	kind:type
option_data	getopt_io.m	/^:- type option_data$/;kq|-;/\<option_data\>/;'q;"	kind:type
option_ops	getopt.m	/^    --->    option_ops($/;kq|-;/\<option_ops\>/;'q;"	kind:cons
option_ops	getopt.m	/^    ;       option_ops($/;kq|-;/\<option_ops\>/;'q;"	kind:cons
option_ops	getopt.m	/^:- inst option_ops ==$/;kq|-;/\<option_ops\>/;'q;"	kind:inst
option_ops	getopt.m	/^:- type option_ops(OptionType)$/;kq|-;/\<option_ops\>/;'q;"	kind:type
option_ops	getopt_io.m	/^    --->    option_ops($/;kq|-;/\<option_ops\>/;'q;"	kind:cons
option_ops	getopt_io.m	/^    ;       option_ops($/;kq|-;/\<option_ops\>/;'q;"	kind:cons
option_ops	getopt_io.m	/^:- inst option_ops ==$/;kq|-;/\<option_ops\>/;'q;"	kind:inst
option_ops	getopt_io.m	/^:- type option_ops(OptionType)$/;kq|-;/\<option_ops\>/;'q;"	kind:type
option_ops_internal	getopt.m	/^    --->    option_ops_internal($/;kq|-;/\<option_ops_internal\>/;'q;"	kind:cons	file:
option_ops_internal	getopt.m	/^:- inst option_ops_internal ==$/;kq|-;/\<option_ops_internal\>/;'q;"	kind:inst	file:
option_ops_internal	getopt.m	/^:- type option_ops_internal(OptionType)$/;kq|-;/\<option_ops_internal\>/;'q;"	kind:type	file:
option_ops_internal	getopt_io.m	/^    --->    option_ops_internal($/;kq|-;/\<option_ops_internal\>/;'q;"	kind:cons	file:
option_ops_internal	getopt_io.m	/^:- inst option_ops_internal ==$/;kq|-;/\<option_ops_internal\>/;'q;"	kind:inst	file:
option_ops_internal	getopt_io.m	/^:- type option_ops_internal(OptionType)$/;kq|-;/\<option_ops_internal\>/;'q;"	kind:type	file:
option_ops_multi	getopt.m	/^    ;       option_ops_multi($/;kq|-;/\<option_ops_multi\>/;'q;"	kind:cons
option_ops_multi	getopt.m	/^    ;       option_ops_multi($/;kq|-;/\<option_ops_multi\>/;'q;"	kind:cons
option_ops_multi	getopt_io.m	/^    ;       option_ops_multi($/;kq|-;/\<option_ops_multi\>/;'q;"	kind:cons
option_ops_multi	getopt_io.m	/^    ;       option_ops_multi($/;kq|-;/\<option_ops_multi\>/;'q;"	kind:cons
option_ops_special	getopt.m	/^:- type option_ops_special(OptionType)$/;kq|-;/\<option_ops_special\>/;'q;"	kind:type	file:
option_ops_special	getopt_io.m	/^:- type option_ops_special(OptionType)$/;kq|-;/\<option_ops_special\>/;'q;"	kind:type	file:
option_ops_track	getopt.m	/^    --->    option_ops_track($/;kq|-;/\<option_ops_track\>/;'q;"	kind:cons
option_ops_track	getopt.m	/^:- inst option_ops_track ==$/;kq|-;/\<option_ops_track\>/;'q;"	kind:inst
option_ops_track	getopt.m	/^:- type option_ops_track(OptionType)$/;kq|-;/\<option_ops_track\>/;'q;"	kind:type
option_ops_track	getopt_io.m	/^    --->    option_ops_track($/;kq|-;/\<option_ops_track\>/;'q;"	kind:cons
option_ops_track	getopt_io.m	/^:- inst option_ops_track ==$/;kq|-;/\<option_ops_track\>/;'q;"	kind:inst
option_ops_track	getopt_io.m	/^:- type option_ops_track(OptionType)$/;kq|-;/\<option_ops_track\>/;'q;"	kind:type
option_table	getopt.m	/^:- type option_table(OptionType) ==  map(OptionType, option_data).$/;kq|-;/\<option_table\>/;'q;"	kind:type
option_table	getopt_io.m	/^:- type option_table(OptionType) ==  map(OptionType, option_data).$/;kq|-;/\<option_table\>/;'q;"	kind:type
optional	parsing_utils.m	/^:- pred optional(parser(T)::in(parser), src::in, maybe(T)::out,$/;kq|/^\<optional\>/;'q;"	kind:pred
optional	parsing_utils.m	/^:- pred optional(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<optional\>/;'q;"	kind:pred
optional	string.m	/^:- pred optional($/;kq|/^\<optional\>/;'q;"	kind:pred	file:
optional_sign	parsing_utils.m	/^:- pred optional_sign(src::in, ps::in, ps::out) is det.$/;kq|/^\<optional_sign\>/;'q;"	kind:pred	file:
or	bool.m	/^:- func bool.or(bool, bool) = bool.$/;kq|/^\<bool.or\>/;'q;"	kind:func
or	bool.m	/^:- pred bool.or(bool::in, bool::in, bool::out) is det.$/;kq|/^\<bool.or\>/;'q;"	kind:pred
or_else	stm_builtin.m	/^:- pred or_else(pred(T, stm, stm)::in(pred(out, di, uo) is det),$/;kq|/^\<or_else\>/;'q;"	kind:pred
or_list	bool.m	/^:- func bool.or_list(list(bool)) = bool.$/;kq|/^\<bool.or_list\>/;'q;"	kind:func
or_list	bool.m	/^:- pred bool.or_list(list(bool)::in, bool::out) is det.$/;kq|/^\<bool.or_list\>/;'q;"	kind:pred
or_pairs	integer.m	/^:- func or_pairs(integer, integer) = integer.$/;kq|/^\<or_pairs\>/;'q;"	kind:func	file:
or_pairs_equal	integer.m	/^:- func or_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<or_pairs_equal\>/;'q;"	kind:func	file:
order	calendar.m	/^:- type order$/;kq|-;/\<order\>/;'q;"	kind:type	file:
ordering	builtin.m	/^:- func ordering(T, T) = comparison_result.$/;kq|/^\<ordering\>/;'q;"	kind:func
ordinary_term	parser.m	/^    --->    ordinary_term$/;kq|-;/\<ordinary_term\>/;'q;"	kind:cons	file:
ordinary_term_to_revstrings	string.m	/^:- pred ordinary_term_to_revstrings(noncanon_handling, ops.table,$/;kq|/^\<ordinary_term_to_revstrings\>/;'q;"	kind:pred	file:
ordinates	bimap.m	/^:- func bimap.ordinates(bimap(K, V)) = list(K).$/;kq|/^\<bimap.ordinates\>/;'q;"	kind:func
ordinates	bimap.m	/^:- pred bimap.ordinates(bimap(K, V)::in, list(K)::out) is det.$/;kq|/^\<bimap.ordinates\>/;'q;"	kind:pred
orphan	rtree.m	/^    --->    orphan(K, rtree_2(K, V)).$/;kq|-;/\<orphan\>/;'q;"	kind:cons	file:
orphan	rtree.m	/^:- type orphan(K, V)$/;kq|-;/\<orphan\>/;'q;"	kind:type	file:
orphans	rtree.m	/^:- type orphans(K, V) == list(orphan(K, V)).$/;kq|-;/\<orphans\>/;'q;"	kind:type	file:
other	string.m	/^:- pred other(list(char)::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<other\>/;'q;"	kind:pred	file:
out	builtin.m	/^:- mode out == free >> ground.$/;kq|-;/\<out\>/;'q;"	kind:mode
out	builtin.m	/^:- mode out(Inst) == free >> Inst.$/;kq|-;/\<out\>/;'q;"	kind:mode
out_list_skel	list.m	/^:- mode out_list_skel == free >> list_skel.$/;kq|-;/\<out_list_skel\>/;'q;"	kind:mode
out_of_bounds_error	array.m	/^:- pred out_of_bounds_error(array(T), int, string).$/;kq|/^\<out_of_bounds_error\>/;'q;"	kind:pred	file:
out_of_bounds_error	version_array.m	/^:- pred out_of_bounds_error(int, int, string).$/;kq|/^\<out_of_bounds_error\>/;'q;"	kind:pred	file:
out_two	set_ctree234.m	/^:- mode out_two == out(two(ground, ground)).$/;kq|-;/\<out_two\>/;'q;"	kind:mode	file:
out_two	set_tree234.m	/^:- mode out_two == out(two(ground, ground)).$/;kq|-;/\<out_two\>/;'q;"	kind:mode	file:
out_two	tree234.m	/^:- mode out_two == out(two(ground, ground, ground)).$/;kq|-;/\<out_two\>/;'q;"	kind:mode	file:
outdent	pretty_printer.m	/^    ;       outdent$/;kq|-;/\<outdent\>/;'q;"	kind:cons	file:
output	bit_buffer.m	/^:- instance stream.output(error_stream, error_state) where$/;kq|-;/\<output\>/;'q;"	kind:tci	file:
output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<output\>/;'q;"	kind:tci
output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<output\>/;'q;"	kind:tci
output	builtin.m	/^:- mode output == free >> ground.$/;kq|-;/\<output\>/;'q;"	kind:mode
output	io.m	/^    ;       output$/;kq|-;/\<output\>/;'q;"	kind:cons
output	io.m	/^:- instance stream.output(io.binary_output_stream, io)$/;kq|-;/\<output\>/;'q;"	kind:tci	file:
output	io.m	/^:- instance stream.output(io.output_stream, io) where [$/;kq|-;/\<output\>/;'q;"	kind:tci	file:
output	stream.m	/^:- typeclass stream.output(Stream, State)$/;kq|-;/\<output\>/;'q;"	kind:tc
output	string.builder.m	/^:- instance stream.output(string.builder.handle, string.builder.state)$/;kq|-;/\<output\>/;'q;"	kind:tci	file:
output_clear_err	io.m	/^:- pred io.output_clear_err(io.output_stream::in, io::di, io::uo) is det.$/;kq|/^\<io.output_clear_err\>/;'q;"	kind:pred	file:
output_current_group	pretty_printer.m	/^:- pred output_current_group(Stream::in, int::in, indents::in, int::in,$/;kq|/^\<output_current_group\>/;'q;"	kind:pred	file:
output_indentation	pretty_printer.m	/^:- pred output_indentation(Stream::in, indents::in, int::in, int::out,$/;kq|/^\<output_indentation\>/;'q;"	kind:pred	file:
output_stream	io.m	/^:- pred io.output_stream(io.output_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.output_stream\>/;'q;"	kind:pred
output_stream	io.m	/^:- type io.output_stream ---> output_stream(io.stream).$/;kq|-;/\<output_stream\>/;'q;"	kind:cons	file:
output_stream	io.m	/^:- type io.output_stream ---> output_stream(io.stream).$/;kq|-;/\<output_stream\>/;'q;"	kind:type	file:
output_stream_2	io.m	/^:- pred io.output_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.output_stream_2\>/;'q;"	kind:pred	file:
output_stream_file_size	io.m	/^:- pred io.output_stream_file_size(io.output_stream::in, int::out,$/;kq|/^\<io.output_stream_file_size\>/;'q;"	kind:pred	file:
output_stream_info	io.m	/^:- func io.output_stream_info(io.stream_db, io.output_stream)$/;kq|/^\<io.output_stream_info\>/;'q;"	kind:func
output_stream_name	io.m	/^:- pred io.output_stream_name(io.output_stream::in, string::out,$/;kq|/^\<io.output_stream_name\>/;'q;"	kind:pred
output_stream_name	io.m	/^:- pred io.output_stream_name(string::out, io::di, io::uo) is det.$/;kq|/^\<io.output_stream_name\>/;'q;"	kind:pred
overlay	bimap.m	/^:- func bimap.overlay(bimap(K, V), bimap(K, V)) = bimap(K, V).$/;kq|/^\<bimap.overlay\>/;'q;"	kind:func
overlay	bimap.m	/^:- pred bimap.overlay(bimap(K, V)::in, bimap(K, V)::in, bimap(K, V)::out)$/;kq|/^\<bimap.overlay\>/;'q;"	kind:pred
overlay	injection.m	/^:- func injection.overlay(injection(K, V), injection(K, V)) = injection(K, V).$/;kq|/^\<injection.overlay\>/;'q;"	kind:func
overlay	injection.m	/^:- pred injection.overlay(injection(K, V)::in, injection(K, V)::in,$/;kq|/^\<injection.overlay\>/;'q;"	kind:pred
overlay	map.m	/^:- func map.overlay(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.overlay\>/;'q;"	kind:func
overlay	map.m	/^:- pred map.overlay(map(K, V)::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.overlay\>/;'q;"	kind:pred
overlay_2	bimap.m	/^:- pred bimap.overlay_2(assoc_list(K, V)::in, bimap(K, V)::in,$/;kq|/^\<bimap.overlay_2\>/;'q;"	kind:pred	file:
overlay_2	map.m	/^:- pred map.overlay_2(assoc_list(K, V)::in, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.overlay_2\>/;'q;"	kind:pred	file:
overlay_large_map	map.m	/^:- func map.overlay_large_map(map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.overlay_large_map\>/;'q;"	kind:func
overlay_large_map	map.m	/^:- pred map.overlay_large_map(map(K, V)::in, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.overlay_large_map\>/;'q;"	kind:pred
overlay_large_map_2	map.m	/^:- pred map.overlay_large_map_2(assoc_list(K, V)::in,$/;kq|/^\<map.overlay_large_map_2\>/;'q;"	kind:pred	file:
p	string.m	/^    ;       p(int)$/;kq|-;/\<p\>/;'q;"	kind:cons	file:
packed	pprint.m	/^:- func packed(T1, list(T2)) = doc <= (doc(T1), doc(T2)).$/;kq|/^\<packed\>/;'q;"	kind:func
packed	pprint.m	/^:- func packed(int, T1, list(T2)) = doc <= (doc(T1), doc(T2)).$/;kq|/^\<packed\>/;'q;"	kind:func
packed_cs	pprint.m	/^:- func packed_cs(int, list(T)) = doc <= (doc(T)).$/;kq|/^\<packed_cs\>/;'q;"	kind:func
packed_cs	pprint.m	/^:- func packed_cs(list(T)) = doc <= (doc(T)).$/;kq|/^\<packed_cs\>/;'q;"	kind:func
packed_cs_to_depth	pprint.m	/^:- func packed_cs_to_depth(int, list(T)) = doc.$/;kq|/^\<packed_cs_to_depth\>/;'q;"	kind:func
packed_cs_univ_args	pprint.m	/^:- func packed_cs_univ_args(int, list(univ)) = doc.$/;kq|/^\<packed_cs_univ_args\>/;'q;"	kind:func
pad_column	string.m	/^:- func pad_column(int, justified_column) = list(string).$/;kq|/^\<pad_column\>/;'q;"	kind:func	file:
pad_left	string.m	/^:- func string.pad_left(string, char, int) = string.$/;kq|/^\<string.pad_left\>/;'q;"	kind:func
pad_left	string.m	/^:- pred string.pad_left(string::in, char::in, int::in, string::out) is det.$/;kq|/^\<string.pad_left\>/;'q;"	kind:pred
pad_right	string.m	/^:- func string.pad_right(string, char, int) = string.$/;kq|/^\<string.pad_right\>/;'q;"	kind:func
pad_right	string.m	/^:- pred string.pad_right(string::in, char::in, int::in, string::out) is det.$/;kq|/^\<string.pad_right\>/;'q;"	kind:pred
pad_row	string.m	/^:- pred pad_row(assoc_list(justify_sense, int)::in, list(string)::in,$/;kq|/^\<pad_row\>/;'q;"	kind:pred	file:
pair	pair.m	/^:- func pair(T1, T2) = pair(T1, T2).$/;kq|/^\<pair\>/;'q;"	kind:func
pair	pair.m	/^:- inst pair(I) ==  pair(I, I).$/;kq|-;/\<pair\>/;'q;"	kind:inst
pair	pair.m	/^:- inst pair(I1, I2)$/;kq|-;/\<pair\>/;'q;"	kind:inst
pair	pair.m	/^:- type pair(T) ==  pair(T, T).$/;kq|-;/\<pair\>/;'q;"	kind:type
pair	pair.m	/^:- type pair(T1, T2)$/;kq|-;/\<pair\>/;'q;"	kind:type
pair.T1	pair.m	/^    --->    (T1 - T2).$/;kq|-;/\<pair.T1\>/;'q;"	kind:cons
pair.fst	pair.m	/^:- func fst(pair(X, Y)) = X.$/;kq|/^\<fst\>/;'q;"	kind:func
pair.fst	pair.m	/^:- pred fst(pair(X, Y)::in, X::out) is det.$/;kq|/^\<fst\>/;'q;"	kind:pred
pair.snd	pair.m	/^:- func snd(pair(X, Y)) = Y.$/;kq|/^\<snd\>/;'q;"	kind:func
pair.snd	pair.m	/^:- pred snd(pair(X, Y)::in, Y::out) is det.$/;kq|/^\<snd\>/;'q;"	kind:pred
par_builtin.get_future	par_builtin.m	/^:- pred get_future(future(T)::in, T::out) is det.$/;kq|/^\<get_future\>/;'q;"	kind:pred
par_builtin.lc_create	par_builtin.m	/^:- pred lc_create(int::in, loop_control::out) is det.$/;kq|/^\<lc_create\>/;'q;"	kind:pred
par_builtin.lc_finish	par_builtin.m	/^:- impure pred lc_finish(loop_control::in) is det.$/;kq|/^\<lc_finish\>/;'q;"	kind:pred
par_builtin.lc_free_slot	par_builtin.m	/^:- impure pred lc_free_slot(loop_control::in, int::out)$/;kq|/^\<lc_free_slot\>/;'q;"	kind:pred
par_builtin.lc_wait_free_slot	par_builtin.m	/^:- impure pred lc_wait_free_slot(loop_control::in, int::out)$/;kq|/^\<lc_wait_free_slot\>/;'q;"	kind:pred
par_builtin.new_future	par_builtin.m	/^:- pred new_future(int::in, future(T)::uo) is det.$/;kq|/^\<new_future\>/;'q;"	kind:pred
par_builtin.num_os_threads	par_builtin.m	/^:- pred num_os_threads(int::out) is det.$/;kq|/^\<num_os_threads\>/;'q;"	kind:pred
par_builtin.signal_future	par_builtin.m	/^:- impure pred signal_future(future(T)::in, T::in) is det.$/;kq|/^\<signal_future\>/;'q;"	kind:pred
par_builtin.wait_future	par_builtin.m	/^:- impure pred wait_future(future(T)::in, T::out) is det.$/;kq|/^\<wait_future\>/;'q;"	kind:pred
par_cond_close_stats_file	par_builtin.m	/^:- pred par_cond_close_stats_file(io::di, io::uo) is det.$/;kq|/^\<par_cond_close_stats_file\>/;'q;"	kind:pred
params	random.m	/^:- pred random.params(int::out, int::out, int::out) is det.	% a, c, m$/;kq|/^\<random.params\>/;'q;"	kind:pred	file:
parent_directory	dir.m	/^:- func dir.parent_directory = string.$/;kq|/^\<dir.parent_directory\>/;'q;"	kind:func
parent_directory	dir.m	/^:- pred dir.parent_directory(string::out) is det.$/;kq|/^\<dir.parent_directory\>/;'q;"	kind:pred
parentheses	pprint.m	/^:- func parentheses(T)         = doc <= (doc(T)).$/;kq|/^\<parentheses\>/;'q;"	kind:func
parse	parser.m	/^:- type parse(T)$/;kq|-;/\<parse\>/;'q;"	kind:type	file:
parse	parsing_utils.m	/^:- pred parse(string::in, parser(T)::in(parser), parse_result(T)::out)$/;kq|/^\<parse\>/;'q;"	kind:pred
parse	parsing_utils.m	/^:- pred parse(string::in, skip_whitespace_pred::in(parser),$/;kq|/^\<parse\>/;'q;"	kind:pred
parse_arg	parser.m	/^:- pred parse_arg(parse(term(T))::out,$/;kq|/^\<parse_arg\>/;'q;"	kind:pred	file:
parse_args	parser.m	/^:- pred parse_args(parse(list(term(T)))::out,$/;kq|/^\<parse_args\>/;'q;"	kind:pred	file:
parse_backquoted_operator	parser.m	/^:- pred parse_backquoted_operator(maybe(term(T))::out, string::out,$/;kq|/^\<parse_backquoted_operator\>/;'q;"	kind:pred	file:
parse_backquoted_operator_2	parser.m	/^:- pred parse_backquoted_operator_2(maybe(term(T))::in, maybe(term(T))::out,$/;kq|/^\<parse_backquoted_operator_2\>/;'q;"	kind:pred	file:
parse_left_term	parser.m	/^:- pred parse_left_term(int::in, term_kind::in, int::out, parse(term(T))::out,$/;kq|/^\<parse_left_term\>/;'q;"	kind:pred	file:
parse_list	parser.m	/^:- pred parse_list(parse(term(T))::out,$/;kq|/^\<parse_list\>/;'q;"	kind:pred	file:
parse_list_2	parser.m	/^:- pred parse_list_2(term(T)::in, parse(term(T))::out,$/;kq|/^\<parse_list_2\>/;'q;"	kind:pred	file:
parse_list_elem	parser.m	/^:- pred parse_list_elem(parse(term(T))::out,$/;kq|/^\<parse_list_elem\>/;'q;"	kind:pred	file:
parse_rest	parser.m	/^:- pred parse_rest(int::in, term_kind::in, int::in, term(T)::in,$/;kq|/^\<parse_rest\>/;'q;"	kind:pred	file:
parse_result	parsing_utils.m	/^:- type parse_result(T)$/;kq|-;/\<parse_result\>/;'q;"	kind:type
parse_simple_term	parser.m	/^:- pred parse_simple_term(token::in, token_context::in, int::in,$/;kq|/^\<parse_simple_term\>/;'q;"	kind:pred	file:
parse_simple_term_2	parser.m	/^:- pred parse_simple_term_2(token::in, token_context::in, int::in,$/;kq|/^\<parse_simple_term_2\>/;'q;"	kind:pred	file:
parse_special_atom	parser.m	/^:- pred parse_special_atom(string::in, term.context::in,$/;kq|/^\<parse_special_atom\>/;'q;"	kind:pred	file:
parse_term	parser.m	/^:- pred parse_term(parse(term(T))::out,$/;kq|/^\<parse_term\>/;'q;"	kind:pred	file:
parse_term_2	parser.m	/^:- pred parse_term_2(int::in, term_kind::in, parse(term(T))::out,$/;kq|/^\<parse_term_2\>/;'q;"	kind:pred	file:
parse_tokens	parser.m	/^:- pred parse_tokens(string::in, token_list::in, read_term(T)::out) is det.$/;kq|/^\<parse_tokens\>/;'q;"	kind:pred
parse_tokens_with_op_table	parser.m	/^:- pred parse_tokens_with_op_table(Ops::in, string::in, token_list::in,$/;kq|/^\<parse_tokens_with_op_table\>/;'q;"	kind:pred
parse_whole_term	parser.m	/^:- pred parse_whole_term(parse(term(T))::out,$/;kq|/^\<parse_whole_term\>/;'q;"	kind:pred	file:
parser	parsing_utils.m	/^:- inst parser == ( pred(in, out, in, out) is semidet ).$/;kq|-;/\<parser\>/;'q;"	kind:inst
parser	parsing_utils.m	/^:- type parser(T) == pred(src, T, ps, ps).$/;kq|-;/\<parser\>/;'q;"	kind:type
parser.add_var	parser.m	/^:- pred add_var(string::in, var(T)::out,$/;kq|/^\<add_var\>/;'q;"	kind:pred	file:
parser.argument	parser.m	/^    ;       argument$/;kq|-;/\<parser.argument\>/;'q;"	kind:cons	file:
parser.check_for_bad_token	parser.m	/^:- pred check_for_bad_token(token_list::in, string::out, int::out) is semidet.$/;kq|/^\<check_for_bad_token\>/;'q;"	kind:pred	file:
parser.check_for_errors	parser.m	/^:- pred check_for_errors(parse(term(T))::in, varset(T)::in,$/;kq|/^\<check_for_errors\>/;'q;"	kind:pred	file:
parser.check_priority	parser.m	/^:- pred check_priority(ops.assoc::in, int::in, int::in) is semidet.$/;kq|/^\<check_priority\>/;'q;"	kind:pred	file:
parser.conjunction_to_list	parser.m	/^:- pred conjunction_to_list(term(T)::in, list(term(T))::out) is det.$/;kq|/^\<conjunction_to_list\>/;'q;"	kind:pred	file:
parser.could_start_term	parser.m	/^:- pred could_start_term(token::in, bool::out) is det.$/;kq|/^\<could_start_term\>/;'q;"	kind:pred	file:
parser.error	parser.m	/^    ;       error(string, token_list).$/;kq|-;/\<parser.error\>/;'q;"	kind:cons	file:
parser.final_parser_state	parser.m	/^:- pred final_parser_state(state(Ops, T)::in, varset(T)::out,$/;kq|/^\<final_parser_state\>/;'q;"	kind:pred	file:
parser.get_ops_table	parser.m	/^:- pred get_ops_table(state(Ops, T)::in, Ops::out) is det$/;kq|/^\<get_ops_table\>/;'q;"	kind:pred	file:
parser.get_term_context	parser.m	/^:- pred get_term_context(state(Ops, T)::in, token_context::in,$/;kq|/^\<get_term_context\>/;'q;"	kind:pred	file:
parser.init_parser_state	parser.m	/^:- pred init_parser_state(Ops::in, string::in, token_list::in,$/;kq|/^\<init_parser_state\>/;'q;"	kind:pred	file:
parser.list_elem	parser.m	/^    ;       list_elem.$/;kq|-;/\<parser.list_elem\>/;'q;"	kind:cons	file:
parser.make_error	parser.m	/^:- func make_error(state(Ops, T), string) = parse(U).$/;kq|/^\<make_error\>/;'q;"	kind:func	file:
parser.max_int_plus_1	parser.m	/^:- pred max_int_plus_1(int::in, string::in) is semidet.$/;kq|/^\<max_int_plus_1\>/;'q;"	kind:pred	file:
parser.ok	parser.m	/^    --->    ok(T)$/;kq|-;/\<parser.ok\>/;'q;"	kind:cons	file:
parser.ops_table	parser.m	/^                ops_table   :: Ops,$/;kq|-;/\<parser.ops_table\>/;'q;"	kind:fld	file:
parser.ordinary_term	parser.m	/^    --->    ordinary_term$/;kq|-;/\<parser.ordinary_term\>/;'q;"	kind:cons	file:
parser.parse	parser.m	/^:- type parse(T)$/;kq|-;/\<parser.parse\>/;'q;"	kind:type	file:
parser.parse_arg	parser.m	/^:- pred parse_arg(parse(term(T))::out,$/;kq|/^\<parse_arg\>/;'q;"	kind:pred	file:
parser.parse_args	parser.m	/^:- pred parse_args(parse(list(term(T)))::out,$/;kq|/^\<parse_args\>/;'q;"	kind:pred	file:
parser.parse_left_term	parser.m	/^:- pred parse_left_term(int::in, term_kind::in, int::out, parse(term(T))::out,$/;kq|/^\<parse_left_term\>/;'q;"	kind:pred	file:
parser.parse_list	parser.m	/^:- pred parse_list(parse(term(T))::out,$/;kq|/^\<parse_list\>/;'q;"	kind:pred	file:
parser.parse_list_2	parser.m	/^:- pred parse_list_2(term(T)::in, parse(term(T))::out,$/;kq|/^\<parse_list_2\>/;'q;"	kind:pred	file:
parser.parse_list_elem	parser.m	/^:- pred parse_list_elem(parse(term(T))::out,$/;kq|/^\<parse_list_elem\>/;'q;"	kind:pred	file:
parser.parse_rest	parser.m	/^:- pred parse_rest(int::in, term_kind::in, int::in, term(T)::in,$/;kq|/^\<parse_rest\>/;'q;"	kind:pred	file:
parser.parse_simple_term	parser.m	/^:- pred parse_simple_term(token::in, token_context::in, int::in,$/;kq|/^\<parse_simple_term\>/;'q;"	kind:pred	file:
parser.parse_simple_term_2	parser.m	/^:- pred parse_simple_term_2(token::in, token_context::in, int::in,$/;kq|/^\<parse_simple_term_2\>/;'q;"	kind:pred	file:
parser.parse_special_atom	parser.m	/^:- pred parse_special_atom(string::in, term.context::in,$/;kq|/^\<parse_special_atom\>/;'q;"	kind:pred	file:
parser.parse_term	parser.m	/^:- pred parse_term(parse(term(T))::out,$/;kq|/^\<parse_term\>/;'q;"	kind:pred	file:
parser.parse_term_2	parser.m	/^:- pred parse_term_2(int::in, term_kind::in, parse(term(T))::out,$/;kq|/^\<parse_term_2\>/;'q;"	kind:pred	file:
parser.parse_tokens	parser.m	/^:- pred parse_tokens(string::in, token_list::in, read_term(T)::out) is det.$/;kq|/^\<parse_tokens\>/;'q;"	kind:pred
parser.parse_whole_term	parser.m	/^:- pred parse_whole_term(parse(term(T))::out,$/;kq|/^\<parse_whole_term\>/;'q;"	kind:pred	file:
parser.read_term	parser.m	/^:- pred read_term(read_term(T)::out, io::di, io::uo) is det.$/;kq|/^\<read_term\>/;'q;"	kind:pred
parser.read_term_filename	parser.m	/^:- pred read_term_filename(string::in, read_term(T)::out, io::di, io::uo)$/;kq|/^\<read_term_filename\>/;'q;"	kind:pred
parser.read_term_from_string	parser.m	/^:- pred read_term_from_string(string::in, string::in, posn::out,$/;kq|/^\<read_term_from_string\>/;'q;"	kind:pred
parser.read_term_with_op_table	parser.m	/^:- pred read_term_with_op_table(Ops::in, read_term(T)::out, io::di, io::uo)$/;kq|/^\<read_term_with_op_table\>/;'q;"	kind:pred
parser.state	parser.m	/^    --->    state($/;kq|-;/\<parser.state\>/;'q;"	kind:cons	file:
parser.state	parser.m	/^:- type state(Ops, T)   % <= op_table(Ops)$/;kq|-;/\<parser.state\>/;'q;"	kind:type	file:
parser.stream_name	parser.m	/^                stream_name :: string,$/;kq|-;/\<parser.stream_name\>/;'q;"	kind:fld	file:
parser.term_kind	parser.m	/^:- type term_kind$/;kq|-;/\<parser.term_kind\>/;'q;"	kind:type	file:
parser.tokens_left	parser.m	/^                tokens_left :: token_list,$/;kq|-;/\<parser.tokens_left\>/;'q;"	kind:fld	file:
parser.var_names	parser.m	/^                var_names   :: map(string, var(T))$/;kq|-;/\<parser.var_names\>/;'q;"	kind:fld	file:
parser.varset	parser.m	/^                varset      :: varset(T),$/;kq|-;/\<parser.varset\>/;'q;"	kind:fld	file:
parser_get_token	parser.m	/^:- pred parser_get_token(token, state(Ops, T), state(Ops, T)).$/;kq|/^\<parser_get_token\>/;'q;"	kind:pred	file:
parser_get_token_context	parser.m	/^:- pred parser_get_token_context(token, token_context,$/;kq|/^\<parser_get_token_context\>/;'q;"	kind:pred	file:
parser_peek_token	parser.m	/^:- pred parser_peek_token(token::out,$/;kq|/^\<parser_peek_token\>/;'q;"	kind:pred	file:
parser_peek_token_context	parser.m	/^:- pred parser_peek_token_context(token::out, token_context::out,$/;kq|/^\<parser_peek_token_context\>/;'q;"	kind:pred	file:
parser_state_get_ops_table	parser.m	/^:- func parser_state_get_ops_table(state(Ops, T)) = Ops.$/;kq|/^\<parser_state_get_ops_table\>/;'q;"	kind:func	file:
parser_state_get_stream_name	parser.m	/^:- func parser_state_get_stream_name(state(Ops, T)) = string.$/;kq|/^\<parser_state_get_stream_name\>/;'q;"	kind:func	file:
parser_state_get_tokens_left	parser.m	/^:- func parser_state_get_tokens_left(state(Ops, T)) = token_list.$/;kq|/^\<parser_state_get_tokens_left\>/;'q;"	kind:func	file:
parser_state_get_var_names	parser.m	/^:- func parser_state_get_var_names(state(Ops, T)) = map(string, var(T)).$/;kq|/^\<parser_state_get_var_names\>/;'q;"	kind:func	file:
parser_state_get_varset	parser.m	/^:- func parser_state_get_varset(state(Ops, T)) = varset(T).$/;kq|/^\<parser_state_get_varset\>/;'q;"	kind:func	file:
parser_state_set_tokens_left	parser.m	/^:- func parser_state_set_tokens_left(state(Ops, T), token_list)$/;kq|/^\<parser_state_set_tokens_left\>/;'q;"	kind:func	file:
parser_state_set_var_names	parser.m	/^:- func parser_state_set_var_names(state(Ops, T), map(string, var(T)))$/;kq|/^\<parser_state_set_var_names\>/;'q;"	kind:func	file:
parser_state_set_varset	parser.m	/^:- func parser_state_set_varset(state(Ops, T), varset(T))$/;kq|/^\<parser_state_set_varset\>/;'q;"	kind:func	file:
parser_unexpected	parser.m	/^:- pred parser_unexpected(string::in, parse(U)::out,$/;kq|/^\<parser_unexpected\>/;'q;"	kind:pred	file:
parser_unexpected_tok	parser.m	/^:- pred parser_unexpected_tok(token::in, token_context::in, string::in,$/;kq|/^\<parser_unexpected_tok\>/;'q;"	kind:pred	file:
parser_unget_token	parser.m	/^:- pred parser_unget_token(token::in, token_context::in,$/;kq|/^\<parser_unget_token\>/;'q;"	kind:pred	file:
parser_with_state	parsing_utils.m	/^:- inst parser_with_state == ( pred(in, out, in, out, in, out) is semidet ).$/;kq|-;/\<parser_with_state\>/;'q;"	kind:inst
parser_with_state	parsing_utils.m	/^:- type parser_with_state(T, S) == pred(src, T, S, S, ps, ps).$/;kq|-;/\<parser_with_state\>/;'q;"	kind:type
parsing_utils.brackets	parsing_utils.m	/^:- pred brackets(string::in, string::in, parser(T)::in(parser), src::in,$/;kq|/^\<brackets\>/;'q;"	kind:pred
parsing_utils.brackets	parsing_utils.m	/^:- pred brackets(string::in, string::in,$/;kq|/^\<brackets\>/;'q;"	kind:pred
parsing_utils.char_in_class	parsing_utils.m	/^:- pred char_in_class(string::in, src::in, char::out,$/;kq|/^\<char_in_class\>/;'q;"	kind:pred
parsing_utils.current_offset	parsing_utils.m	/^:- pred current_offset(src::in, int::out, ps::in, ps::out) is det.$/;kq|/^\<current_offset\>/;'q;"	kind:pred
parsing_utils.digits	parsing_utils.m	/^:- pred digits(int::in, src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<digits\>/;'q;"	kind:pred	file:
parsing_utils.digits_2	parsing_utils.m	/^:- pred digits_2(int::in, src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<digits_2\>/;'q;"	kind:pred	file:
parsing_utils.eof	parsing_utils.m	/^:- pred eof(src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<eof\>/;'q;"	kind:pred
parsing_utils.error	parsing_utils.m	/^    ;       error($/;kq|-;/\<parsing_utils.error\>/;'q;"	kind:cons
parsing_utils.error_col	parsing_utils.m	/^                error_col     :: int$/;kq|-;/\<parsing_utils.error_col\>/;'q;"	kind:fld
parsing_utils.error_line	parsing_utils.m	/^                error_line    :: int,$/;kq|-;/\<parsing_utils.error_line\>/;'q;"	kind:fld
parsing_utils.error_message	parsing_utils.m	/^                error_message :: maybe(string),$/;kq|-;/\<parsing_utils.error_message\>/;'q;"	kind:fld
parsing_utils.float_literal	parsing_utils.m	/^:- pred float_literal(src::in, float::out,$/;kq|/^\<float_literal\>/;'q;"	kind:pred
parsing_utils.furthest_offset	parsing_utils.m	/^                furthest_offset     ::  mutvar(int),$/;kq|-;/\<parsing_utils.furthest_offset\>/;'q;"	kind:fld	file:
parsing_utils.identifier	parsing_utils.m	/^:- pred identifier(string::in, string::in, src::in, string::out,$/;kq|/^\<identifier\>/;'q;"	kind:pred
parsing_utils.identifier_2	parsing_utils.m	/^:- pred identifier_2(string::in, src::in, unit::out,$/;kq|/^\<identifier_2\>/;'q;"	kind:pred	file:
parsing_utils.ikeyword	parsing_utils.m	/^:- pred ikeyword(string::in, string::in, src::in, unit::out,$/;kq|/^\<ikeyword\>/;'q;"	kind:pred
parsing_utils.imatch_string	parsing_utils.m	/^:- pred imatch_string(string::in, src::in, ps::in, ps::out) is semidet.$/;kq|/^\<imatch_string\>/;'q;"	kind:pred	file:
parsing_utils.imatch_string_2	parsing_utils.m	/^:- pred imatch_string_2(int::in, int::in, string::in, int::in, string::in)$/;kq|/^\<imatch_string_2\>/;'q;"	kind:pred	file:
parsing_utils.input_length	parsing_utils.m	/^                input_length        ::  int,$/;kq|-;/\<parsing_utils.input_length\>/;'q;"	kind:fld	file:
parsing_utils.input_string	parsing_utils.m	/^                input_string        ::  string,$/;kq|-;/\<parsing_utils.input_string\>/;'q;"	kind:fld	file:
parsing_utils.input_string	parsing_utils.m	/^:- pred input_string(src::in, string::out, int::out) is det.$/;kq|/^\<input_string\>/;'q;"	kind:pred
parsing_utils.input_substring	parsing_utils.m	/^:- pred input_substring(src::in, int::in, int::in, string::out) is semidet.$/;kq|/^\<input_substring\>/;'q;"	kind:pred
parsing_utils.int_literal	parsing_utils.m	/^:- pred int_literal(src::in, int::out,$/;kq|/^\<int_literal\>/;'q;"	kind:pred
parsing_utils.keyword	parsing_utils.m	/^:- pred keyword(string::in, string::in, src::in, unit::out,$/;kq|/^\<keyword\>/;'q;"	kind:pred
parsing_utils.line_numbers	parsing_utils.m	/^:- type line_numbers == array(int).$/;kq|-;/\<parsing_utils.line_numbers\>/;'q;"	kind:type	file:
parsing_utils.match_string	parsing_utils.m	/^:- pred match_string(string::in, src::in, ps::in, ps::out) is semidet.$/;kq|/^\<match_string\>/;'q;"	kind:pred	file:
parsing_utils.match_string_2	parsing_utils.m	/^:- pred match_string_2(int::in, int::in, string::in, int::in, string::in)$/;kq|/^\<match_string_2\>/;'q;"	kind:pred	file:
parsing_utils.new_src_and_ps	parsing_utils.m	/^:- pred new_src_and_ps(string::in, skip_whitespace_pred::in(parser),$/;kq|/^\<new_src_and_ps\>/;'q;"	kind:pred
parsing_utils.new_src_and_ps	parsing_utils.m	/^:- pred new_src_and_ps(string::in, src::out, ps::out) is det.$/;kq|/^\<new_src_and_ps\>/;'q;"	kind:pred
parsing_utils.next_char	parsing_utils.m	/^:- pred next_char(src::in, char::out, ps::in, ps::out) is semidet.$/;kq|/^\<next_char\>/;'q;"	kind:pred
parsing_utils.ok	parsing_utils.m	/^    --->    ok(T)$/;kq|-;/\<parsing_utils.ok\>/;'q;"	kind:cons
parsing_utils.one_or_more	parsing_utils.m	/^:- pred one_or_more(parser(T)::in(parser), src::in, list(T)::out,$/;kq|/^\<one_or_more\>/;'q;"	kind:pred
parsing_utils.one_or_more	parsing_utils.m	/^:- pred one_or_more(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<one_or_more\>/;'q;"	kind:pred
parsing_utils.optional	parsing_utils.m	/^:- pred optional(parser(T)::in(parser), src::in, maybe(T)::out,$/;kq|/^\<optional\>/;'q;"	kind:pred
parsing_utils.optional	parsing_utils.m	/^:- pred optional(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<optional\>/;'q;"	kind:pred
parsing_utils.optional_sign	parsing_utils.m	/^:- pred optional_sign(src::in, ps::in, ps::out) is det.$/;kq|/^\<optional_sign\>/;'q;"	kind:pred	file:
parsing_utils.parse	parsing_utils.m	/^:- pred parse(string::in, parser(T)::in(parser), parse_result(T)::out)$/;kq|/^\<parse\>/;'q;"	kind:pred
parsing_utils.parse	parsing_utils.m	/^:- pred parse(string::in, skip_whitespace_pred::in(parser),$/;kq|/^\<parse\>/;'q;"	kind:pred
parsing_utils.parse_result	parsing_utils.m	/^:- type parse_result(T)$/;kq|-;/\<parsing_utils.parse_result\>/;'q;"	kind:type
parsing_utils.parser	parsing_utils.m	/^:- inst parser == ( pred(in, out, in, out) is semidet ).$/;kq|-;/\<parsing_utils.parser\>/;'q;"	kind:inst
parsing_utils.parser	parsing_utils.m	/^:- type parser(T) == pred(src, T, ps, ps).$/;kq|-;/\<parsing_utils.parser\>/;'q;"	kind:type
parsing_utils.ps	parsing_utils.m	/^:- type ps == int.$/;kq|-;/\<parsing_utils.ps\>/;'q;"	kind:type	file:
parsing_utils.punct	parsing_utils.m	/^:- pred punct(string::in, src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<punct\>/;'q;"	kind:pred
parsing_utils.record_progress	parsing_utils.m	/^:- impure pred record_progress(src::in, ps::in) is det.$/;kq|/^\<record_progress\>/;'q;"	kind:pred	file:
parsing_utils.separated_list	parsing_utils.m	/^:- pred separated_list(string::in, parser(T)::in(parser), src::in,$/;kq|/^\<separated_list\>/;'q;"	kind:pred
parsing_utils.separated_list	parsing_utils.m	/^:- pred separated_list(string::in,$/;kq|/^\<separated_list\>/;'q;"	kind:pred
parsing_utils.skip_to_eol	parsing_utils.m	/^:- pred skip_to_eol(src::in, unit::out,$/;kq|/^\<skip_to_eol\>/;'q;"	kind:pred
parsing_utils.skip_whitespace	parsing_utils.m	/^:- pred skip_whitespace(src::in, ps::in, ps::out) is semidet.$/;kq|/^\<skip_whitespace\>/;'q;"	kind:pred	file:
parsing_utils.skip_ws_pred	parsing_utils.m	/^                skip_ws_pred        ::  skip_whitespace_pred,$/;kq|-;/\<parsing_utils.skip_ws_pred\>/;'q;"	kind:fld	file:
parsing_utils.src	parsing_utils.m	/^    --->    src($/;kq|-;/\<parsing_utils.src\>/;'q;"	kind:cons	file:
parsing_utils.src	parsing_utils.m	/^:- type src$/;kq|-;/\<parsing_utils.src\>/;'q;"	kind:type	file:
parsing_utils.string_literal	parsing_utils.m	/^:- pred string_literal(char::in, src::in, string::out,$/;kq|/^\<string_literal\>/;'q;"	kind:pred
parsing_utils.string_literal_2	parsing_utils.m	/^:- pred string_literal_2(src::in, char::in, unit::out,$/;kq|/^\<string_literal_2\>/;'q;"	kind:pred	file:
parsing_utils.whitespace	parsing_utils.m	/^:- pred whitespace(src::in, unit::out,$/;kq|/^\<whitespace\>/;'q;"	kind:pred
parsing_utils.zero_or_more	parsing_utils.m	/^:- pred zero_or_more(parser(T)::in(parser), src::in, list(T)::out,$/;kq|/^\<zero_or_more\>/;'q;"	kind:pred
parsing_utils.zero_or_more	parsing_utils.m	/^:- pred zero_or_more(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<zero_or_more\>/;'q;"	kind:pred
parsing_utils.zero_or_more_2	parsing_utils.m	/^:- pred zero_or_more_2(parser(T)::in(parser), src::in,$/;kq|/^\<zero_or_more_2\>/;'q;"	kind:pred	file:
parsing_utils.zero_or_more_2	parsing_utils.m	/^:- pred zero_or_more_2(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<zero_or_more_2\>/;'q;"	kind:pred	file:
partial_deep_copy	solutions.m	/^:- impure pred partial_deep_copy(heap_ptr, T, T) is det.$/;kq|/^\<partial_deep_copy\>/;'q;"	kind:pred	file:
partition_id	eqvclass.m	/^:- pred eqvclass.partition_id(eqvclass(T)::in, T::in, partition_id::out)$/;kq|/^\<eqvclass.partition_id\>/;'q;"	kind:pred
partition_id	eqvclass.m	/^:- type partition_id    ==  int.$/;kq|-;/\<partition_id\>/;'q;"	kind:type	file:
partition_ids	eqvclass.m	/^:- pred eqvclass.partition_ids(eqvclass(T)::in, list(partition_id)::out)$/;kq|/^\<eqvclass.partition_ids\>/;'q;"	kind:pred	file:
partition_list	eqvclass.m	/^:- func eqvclass.partition_list(eqvclass(T)) = list(set(T)).$/;kq|/^\<eqvclass.partition_list\>/;'q;"	kind:func
partition_list	eqvclass.m	/^:- pred eqvclass.partition_list(eqvclass(T)::in, list(set(T))::out) is det.$/;kq|/^\<eqvclass.partition_list\>/;'q;"	kind:pred
partition_list_to_eqvclass	eqvclass.m	/^:- func eqvclass.partition_list_to_eqvclass(list(set(T))) = eqvclass(T).$/;kq|/^\<eqvclass.partition_list_to_eqvclass\>/;'q;"	kind:func
partition_list_to_eqvclass	eqvclass.m	/^:- pred eqvclass.partition_list_to_eqvclass(list(set(T))::in,$/;kq|/^\<eqvclass.partition_list_to_eqvclass\>/;'q;"	kind:pred
partition_set	eqvclass.m	/^:- func eqvclass.partition_set(eqvclass(T)) = set(set(T)).$/;kq|/^\<eqvclass.partition_set\>/;'q;"	kind:func
partition_set	eqvclass.m	/^:- pred eqvclass.partition_set(eqvclass(T)::in, set(set(T))::out) is det.$/;kq|/^\<eqvclass.partition_set\>/;'q;"	kind:pred
partition_set_to_eqvclass	eqvclass.m	/^:- func eqvclass.partition_set_to_eqvclass(set(set(T))) = eqvclass(T).$/;kq|/^\<eqvclass.partition_set_to_eqvclass\>/;'q;"	kind:func
partition_set_to_eqvclass	eqvclass.m	/^:- pred eqvclass.partition_set_to_eqvclass(set(set(T))::in, eqvclass(T)::out)$/;kq|/^\<eqvclass.partition_set_to_eqvclass\>/;'q;"	kind:pred
partitions	eqvclass.m	/^                partitions  :: map(partition_id, set(T)),$/;kq|-;/\<partitions\>/;'q;"	kind:fld	file:
partitions	eqvclass.m	/^:- pred eqvclass.partitions(eqvclass(T)::in, list(partition_id)::in,$/;kq|/^\<eqvclass.partitions\>/;'q;"	kind:pred	file:
path_name_is_absolute	dir.m	/^:- pred dir.path_name_is_absolute(string::in) is semidet.$/;kq|/^\<dir.path_name_is_absolute\>/;'q;"	kind:pred
path_name_is_root_directory	dir.m	/^:- pred dir.path_name_is_root_directory(string::in) is semidet.$/;kq|/^\<dir.path_name_is_root_directory\>/;'q;"	kind:pred
peek	pqueue.m	/^:- pred pqueue.peek(pqueue(K, V)::in, K::out, V::out) is semidet.$/;kq|/^\<pqueue.peek\>/;'q;"	kind:pred
peek_key	pqueue.m	/^:- pred pqueue.peek_key(pqueue(K, V)::in, K::out) is semidet.$/;kq|/^\<pqueue.peek_key\>/;'q;"	kind:pred
peek_value	pqueue.m	/^:- pred pqueue.peek_value(pqueue(K, V)::in, V::out) is semidet.$/;kq|/^\<pqueue.peek_value\>/;'q;"	kind:pred
percent	string.m	/^    ;       percent.$/;kq|-;/\<percent\>/;'q;"	kind:cons	file:
percentage_str	table_statistics.m	/^:- func percentage_str(int, int) = string.$/;kq|/^\<percentage_str\>/;'q;"	kind:func	file:
perform_sampling	random.m	/^:- pred perform_sampling(int, array(T), list(T), list(T),$/;kq|/^\<perform_sampling\>/;'q;"	kind:pred	file:
perm	list.m	/^:- pred list.perm(list(T)::in, list(T)::out) is multi.$/;kq|/^\<list.perm\>/;'q;"	kind:pred
permutation	random.m	/^:- pred random.permutation(list(T), list(T), random.supply, random.supply).$/;kq|/^\<random.permutation\>/;'q;"	kind:pred
permutation_2	array.m	/^:- pred permutation_2(int::in, int::in, int::in, int::in,$/;kq|/^\<permutation_2\>/;'q;"	kind:pred	file:
pi	math.m	/^:- func math.pi = float.$/;kq|/^\<math.pi\>/;'q;"	kind:func
plain	erlang_rtti_implementation.m	/^    ;       plain(type_info_thunk).$/;kq|-;/\<plain\>/;'q;"	kind:cons	file:
plain_term_to_revstrings	string.m	/^:- pred plain_term_to_revstrings(noncanon_handling, ops.table,$/;kq|/^\<plain_term_to_revstrings\>/;'q;"	kind:pred	file:
plain_typeinfo	erlang_rtti_implementation.m	/^    --->    plain_typeinfo($/;kq|-;/\<plain_typeinfo\>/;'q;"	kind:cons	file:
plus	int.m	/^:- func int.plus(int, int) = int.$/;kq|/^\<int.plus\>/;'q;"	kind:func
pointer_equal	private_builtin.m	/^:- pred pointer_equal(T::in, T::in) is semidet.$/;kq|/^\<pointer_equal\>/;'q;"	kind:pred
poly	pprint.m	/^:- func poly(string.poly_type) = doc.$/;kq|/^\<poly\>/;'q;"	kind:func
poly_du_num_arg_lookups	table_statistics.m	/^                poly_du_num_arg_lookups             :: int,$/;kq|-;/\<poly_du_num_arg_lookups\>/;'q;"	kind:fld
poly_du_num_exist_lookups	table_statistics.m	/^                poly_du_num_exist_lookups           :: int,$/;kq|-;/\<poly_du_num_exist_lookups\>/;'q;"	kind:fld
poly_du_num_node_allocs	table_statistics.m	/^                poly_du_num_node_allocs             :: int,$/;kq|-;/\<poly_du_num_node_allocs\>/;'q;"	kind:fld
poly_du_num_node_bytes	table_statistics.m	/^                poly_du_num_node_bytes              :: int,$/;kq|-;/\<poly_du_num_node_bytes\>/;'q;"	kind:fld
poly_enum_num_node_allocs	table_statistics.m	/^                poly_enum_num_node_allocs           :: int,$/;kq|-;/\<poly_enum_num_node_allocs\>/;'q;"	kind:fld
poly_enum_num_node_bytes	table_statistics.m	/^                poly_enum_num_node_bytes            :: int,$/;kq|-;/\<poly_enum_num_node_bytes\>/;'q;"	kind:fld
poly_hash_num_link_chunk_allocs	table_statistics.m	/^                poly_hash_num_link_chunk_allocs     :: int,$/;kq|-;/\<poly_hash_num_link_chunk_allocs\>/;'q;"	kind:fld
poly_hash_num_link_chunk_bytes	table_statistics.m	/^                poly_hash_num_link_chunk_bytes      :: int,$/;kq|-;/\<poly_hash_num_link_chunk_bytes\>/;'q;"	kind:fld
poly_hash_num_num_key_compares_dupl	table_statistics.m	/^                poly_hash_num_num_key_compares_dupl :: int,$/;kq|-;/\<poly_hash_num_num_key_compares_dupl\>/;'q;"	kind:fld
poly_hash_num_num_key_compares_not_dupl	table_statistics.m	/^                poly_hash_num_num_key_compares_not_dupl :: int,$/;kq|-;/\<poly_hash_num_num_key_compares_not_dupl\>/;'q;"	kind:fld
poly_hash_num_resizes	table_statistics.m	/^                poly_hash_num_resizes               :: int,$/;kq|-;/\<poly_hash_num_resizes\>/;'q;"	kind:fld
poly_hash_num_table_allocs	table_statistics.m	/^                poly_hash_num_table_allocs          :: int,$/;kq|-;/\<poly_hash_num_table_allocs\>/;'q;"	kind:fld
poly_hash_num_table_bytes	table_statistics.m	/^                poly_hash_num_table_bytes           :: int,$/;kq|-;/\<poly_hash_num_table_bytes\>/;'q;"	kind:fld
poly_hash_resizes_num_new_entries	table_statistics.m	/^                poly_hash_resizes_num_new_entries   :: int$/;kq|-;/\<poly_hash_resizes_num_new_entries\>/;'q;"	kind:fld
poly_hash_resizes_num_old_entries	table_statistics.m	/^                poly_hash_resizes_num_old_entries   :: int,$/;kq|-;/\<poly_hash_resizes_num_old_entries\>/;'q;"	kind:fld
poly_type	io.m	/^:- type io.poly_type == string.poly_type.$/;kq|-;/\<poly_type\>/;'q;"	kind:type
poly_type	string.m	/^:- type string.poly_type$/;kq|-;/\<poly_type\>/;'q;"	kind:type
pop	stack.m	/^:- pred stack.pop(T::out, stack(T)::in, stack(T)::out) is semidet.$/;kq|/^\<stack.pop\>/;'q;"	kind:pred
pos	robdd.m	/^    --->    pos(var(T))$/;kq|-;/\<pos\>/;'q;"	kind:cons
pos_cmp	integer.m	/^:- func pos_cmp(integer, integer) = comparison_result.$/;kq|/^\<pos_cmp\>/;'q;"	kind:func	file:
pos_geq	integer.m	/^:- pred pos_geq(integer::in, integer::in) is semidet.$/;kq|/^\<pos_geq\>/;'q;"	kind:pred	file:
pos_int_to_digits	integer.m	/^:- func pos_int_to_digits(int) = integer.$/;kq|/^\<pos_int_to_digits\>/;'q;"	kind:func	file:
pos_int_to_digits_2	integer.m	/^:- func pos_int_to_digits_2(int, integer) = integer.$/;kq|/^\<pos_int_to_digits_2\>/;'q;"	kind:func	file:
pos_left_shift	integer.m	/^:- func pos_left_shift(integer, int) = integer.$/;kq|/^\<pos_left_shift\>/;'q;"	kind:func	file:
pos_lt	integer.m	/^:- pred pos_lt(integer::in, integer::in) is semidet.$/;kq|/^\<pos_lt\>/;'q;"	kind:pred	file:
pos_minus	integer.m	/^:- func pos_minus(integer, integer) = integer.$/;kq|/^\<pos_minus\>/;'q;"	kind:func	file:
pos_mul	integer.m	/^:- func pos_mul(integer, integer) = integer.$/;kq|/^\<pos_mul\>/;'q;"	kind:func	file:
pos_mul_list	integer.m	/^:- func pos_mul_list(list(digit), integer, integer) = integer.$/;kq|/^\<pos_mul_list\>/;'q;"	kind:func	file:
pos_plus	integer.m	/^:- func pos_plus(integer, integer) = integer.$/;kq|/^\<pos_plus\>/;'q;"	kind:func	file:
pos_right_shift	integer.m	/^:- func pos_right_shift(integer, int) = integer.$/;kq|/^\<pos_right_shift\>/;'q;"	kind:func	file:
posn	io.m	/^    --->    posn(int, int, int).$/;kq|-;/\<posn\>/;'q;"	kind:cons
posn	io.m	/^:- type posn$/;kq|-;/\<posn\>/;'q;"	kind:type
postfix	ops.m	/^    ;       postfix(ops.assoc).                     % term Op$/;kq|-;/\<postfix\>/;'q;"	kind:cons
pow	float.m	/^:- func pow(float, int) = float.$/;kq|/^\<pow\>/;'q;"	kind:func
pow	int.m	/^:- func int.pow(int, int) = int.$/;kq|/^\<int.pow\>/;'q;"	kind:func
pow	int.m	/^:- pred int.pow(int::in, int::in, int::out) is det.$/;kq|/^\<int.pow\>/;'q;"	kind:pred
pow	integer.m	/^:- func integer.pow(integer, integer) = integer.$/;kq|/^\<integer.pow\>/;'q;"	kind:func
pow	math.m	/^:- func math.pow(float, float) = float.$/;kq|/^\<math.pow\>/;'q;"	kind:func
pow	std_util.m	/^:- func pow(func(T) = T, int, T) = T.$/;kq|/^\<pow\>/;'q;"	kind:func
power_intersect	set.m	/^:- func set.power_intersect(set(set(T))) = set(T).$/;kq|/^\<set.power_intersect\>/;'q;"	kind:func
power_intersect	set.m	/^:- pred set.power_intersect(set(set(T))::in, set(T)::out) is det.$/;kq|/^\<set.power_intersect\>/;'q;"	kind:pred
power_intersect	set_bbbtree.m	/^:- func set_bbbtree.power_intersect(set_bbbtree(set_bbbtree(T)))$/;kq|/^\<set_bbbtree.power_intersect\>/;'q;"	kind:func
power_intersect	set_bbbtree.m	/^:- pred set_bbbtree.power_intersect(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_intersect\>/;'q;"	kind:pred
power_intersect	set_ctree234.m	/^:- func set_ctree234.power_intersect(set_ctree234(set_ctree234(T)))$/;kq|/^\<set_ctree234.power_intersect\>/;'q;"	kind:func
power_intersect	set_ordlist.m	/^:- func set_ordlist.power_intersect(set_ordlist(set_ordlist(T)))$/;kq|/^\<set_ordlist.power_intersect\>/;'q;"	kind:func
power_intersect	set_ordlist.m	/^:- pred set_ordlist.power_intersect(set_ordlist(set_ordlist(T))::in,$/;kq|/^\<set_ordlist.power_intersect\>/;'q;"	kind:pred
power_intersect	set_tree234.m	/^:- func set_tree234.power_intersect(set_tree234(set_tree234(T)))$/;kq|/^\<set_tree234.power_intersect\>/;'q;"	kind:func
power_intersect	set_tree234.m	/^:- pred set_tree234.power_intersect(set_tree234(set_tree234(T))::in,$/;kq|/^\<set_tree234.power_intersect\>/;'q;"	kind:pred
power_intersect	set_unordlist.m	/^:- func set_unordlist.power_intersect(set_unordlist(set_unordlist(T)))$/;kq|/^\<set_unordlist.power_intersect\>/;'q;"	kind:func
power_intersect	set_unordlist.m	/^:- pred set_unordlist.power_intersect(set_unordlist(set_unordlist(T))::in,$/;kq|/^\<set_unordlist.power_intersect\>/;'q;"	kind:pred
power_intersect_r	set_bbbtree.m	/^:- pred set_bbbtree.power_intersect_r(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_intersect_r\>/;'q;"	kind:pred	file:
power_intersect_r2	set_bbbtree.m	/^:- pred set_bbbtree.power_intersect_r2(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_intersect_r2\>/;'q;"	kind:pred	file:
power_union	set.m	/^:- func set.power_union(set(set(T))) = set(T).$/;kq|/^\<set.power_union\>/;'q;"	kind:func
power_union	set.m	/^:- pred set.power_union(set(set(T))::in, set(T)::out) is det.$/;kq|/^\<set.power_union\>/;'q;"	kind:pred
power_union	set_bbbtree.m	/^:- func set_bbbtree.power_union(set_bbbtree(set_bbbtree(T))) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.power_union\>/;'q;"	kind:func
power_union	set_bbbtree.m	/^:- pred set_bbbtree.power_union(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_union\>/;'q;"	kind:pred
power_union	set_ctree234.m	/^:- func set_ctree234.power_union(set_ctree234(set_ctree234(T)))$/;kq|/^\<set_ctree234.power_union\>/;'q;"	kind:func
power_union	set_ctree234.m	/^:- pred set_ctree234.power_union(set_ctree234(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.power_union\>/;'q;"	kind:pred
power_union	set_ordlist.m	/^:- func set_ordlist.power_union(set_ordlist(set_ordlist(T))) = set_ordlist(T).$/;kq|/^\<set_ordlist.power_union\>/;'q;"	kind:func
power_union	set_ordlist.m	/^:- pred set_ordlist.power_union(set_ordlist(set_ordlist(T))::in,$/;kq|/^\<set_ordlist.power_union\>/;'q;"	kind:pred
power_union	set_tree234.m	/^:- func set_tree234.power_union(set_tree234(set_tree234(T))) = set_tree234(T).$/;kq|/^\<set_tree234.power_union\>/;'q;"	kind:func
power_union	set_tree234.m	/^:- pred set_tree234.power_union(set_tree234(set_tree234(T))::in,$/;kq|/^\<set_tree234.power_union\>/;'q;"	kind:pred
power_union	set_unordlist.m	/^:- func set_unordlist.power_union(set_unordlist(set_unordlist(T)))$/;kq|/^\<set_unordlist.power_union\>/;'q;"	kind:func
power_union	set_unordlist.m	/^:- pred set_unordlist.power_union(set_unordlist(set_unordlist(T))::in,$/;kq|/^\<set_unordlist.power_union\>/;'q;"	kind:pred
power_union_2	set_ordlist.m	/^:- pred set_ordlist.power_union_2(list(set_ordlist(T))::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.power_union_2\>/;'q;"	kind:pred	file:
power_union_2	set_tree234.m	/^:- pred set_tree234.power_union_2(set_tree234(set_tree234(T))::in,$/;kq|/^\<set_tree234.power_union_2\>/;'q;"	kind:pred	file:
power_union_2	set_unordlist.m	/^:- pred set_unordlist.power_union_2(list(set_unordlist(T))::in,$/;kq|/^\<set_unordlist.power_union_2\>/;'q;"	kind:pred	file:
power_union_r	set_bbbtree.m	/^:- pred set_bbbtree.power_union_r(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_union_r\>/;'q;"	kind:pred	file:
pp_internal	pretty_printer.m	/^    ;       pp_internal(pp_internal).$/;kq|-;/\<pp_internal\>/;'q;"	kind:cons
pp_internal	pretty_printer.m	/^:- type pp_internal$/;kq|-;/\<pp_internal\>/;'q;"	kind:type	file:
pp_limit	pretty_printer.m	/^                pp_limit        :: formatting_limit % Term formatting limit.$/;kq|-;/\<pp_limit\>/;'q;"	kind:fld
pp_line_width	pretty_printer.m	/^                pp_line_width   :: int,             % Line width in characters.$/;kq|-;/\<pp_line_width\>/;'q;"	kind:fld
pp_max_lines	pretty_printer.m	/^                pp_max_lines    :: int,             % Max lines to output.$/;kq|-;/\<pp_max_lines\>/;'q;"	kind:fld
pp_params	pretty_printer.m	/^    --->    pp_params($/;kq|-;/\<pp_params\>/;'q;"	kind:cons
pp_params	pretty_printer.m	/^:- type pp_params$/;kq|-;/\<pp_params\>/;'q;"	kind:type
pprint.'DOC'	pprint.m	/^    ;       'DOC'(int, univ).$/;kq|-;/\<pprint.'DOC'\>/;'q;"	kind:cons	file:
pprint.'GROUP'	pprint.m	/^    ;       'GROUP'(doc)$/;kq|-;/\<pprint.'GROUP'\>/;'q;"	kind:cons	file:
pprint.'LABEL'	pprint.m	/^    ;       'LABEL'(string, doc)$/;kq|-;/\<pprint.'LABEL'\>/;'q;"	kind:cons	file:
pprint.'LINE'	pprint.m	/^    ;       'LINE'$/;kq|-;/\<pprint.'LINE'\>/;'q;"	kind:cons	file:
pprint.'NEST'	pprint.m	/^    ;       'NEST'(int, doc)$/;kq|-;/\<pprint.'NEST'\>/;'q;"	kind:cons	file:
pprint.'NIL'	pprint.m	/^    --->    'NIL'$/;kq|-;/\<pprint.'NIL'\>/;'q;"	kind:cons	file:
pprint.'SEQ'	pprint.m	/^    ;       'SEQ'(doc, doc)$/;kq|-;/\<pprint.'SEQ'\>/;'q;"	kind:cons	file:
pprint.'TEXT'	pprint.m	/^    ;       'TEXT'(string)$/;kq|-;/\<pprint.'TEXT'\>/;'q;"	kind:cons	file:
pprint.T1	pprint.m	/^:- func T1 ++ T2 = doc <= (doc(T1), doc(T2)).$/;kq|/^\<T1\>/;'q;"	kind:func
pprint.array_to_doc	pprint.m	/^:- func array_to_doc(int, array(T)) = doc.$/;kq|/^\<array_to_doc\>/;'q;"	kind:func	file:
pprint.braces	pprint.m	/^:- func braces(T)              = doc <= (doc(T)).$/;kq|/^\<braces\>/;'q;"	kind:func
pprint.bracketed	pprint.m	/^:- func bracketed(T1, T2, T3)  = doc <= (doc(T1), doc(T2), doc(T3)).$/;kq|/^\<bracketed\>/;'q;"	kind:func
pprint.brackets	pprint.m	/^:- func brackets(T)            = doc <= (doc(T)).$/;kq|/^\<brackets\>/;'q;"	kind:func
pprint.colon	pprint.m	/^:- func colon               = doc.$/;kq|/^\<colon\>/;'q;"	kind:func
pprint.colon_line	pprint.m	/^:- func colon_line          = doc.$/;kq|/^\<colon_line\>/;'q;"	kind:func
pprint.colon_space	pprint.m	/^:- func colon_space         = doc.$/;kq|/^\<colon_space\>/;'q;"	kind:func
pprint.colon_space_line	pprint.m	/^:- func colon_space_line    = doc.$/;kq|/^\<colon_space_line\>/;'q;"	kind:func
pprint.comma	pprint.m	/^:- func comma               = doc.$/;kq|/^\<comma\>/;'q;"	kind:func
pprint.comma_line	pprint.m	/^:- func comma_line          = doc.$/;kq|/^\<comma_line\>/;'q;"	kind:func
pprint.comma_space	pprint.m	/^:- func comma_space         = doc.$/;kq|/^\<comma_space\>/;'q;"	kind:func
pprint.comma_space_line	pprint.m	/^:- func comma_space_line    = doc.$/;kq|/^\<comma_space_line\>/;'q;"	kind:func
pprint.depth	pprint.m	/^:- type depth == int.$/;kq|-;/\<pprint.depth\>/;'q;"	kind:type	file:
pprint.doc	pprint.m	/^    func doc(int, T) = doc$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tcm
pprint.doc	pprint.m	/^:- func doc `<>` doc        = doc.$/;kq|/^\<doc\>/;'q;"	kind:func
pprint.doc	pprint.m	/^:- func doc `<\/>` doc       = doc.$/;kq|/^\<doc\>/;'q;"	kind:func
pprint.doc	pprint.m	/^:- func doc(T) = doc <= (doc(T)).$/;kq|/^\<doc\>/;'q;"	kind:func
pprint.doc	pprint.m	/^:- instance doc(char)      where [ doc(_, Char)   = poly(c(Char))  ].$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tci	file:
pprint.doc	pprint.m	/^:- instance doc(doc)       where [ doc(_, Doc)    = Doc            ].$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tci	file:
pprint.doc	pprint.m	/^:- instance doc(float)     where [ doc(_, Float)  = poly(f(Float)) ].$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tci	file:
pprint.doc	pprint.m	/^:- instance doc(int)       where [ doc(_, Int)    = poly(i(Int))   ].$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tci	file:
pprint.doc	pprint.m	/^:- instance doc(string)    where [ doc(_, String) = text(String)   ].$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tci	file:
pprint.doc	pprint.m	/^:- type doc$/;kq|-;/\<pprint.doc\>/;'q;"	kind:type	file:
pprint.doc	pprint.m	/^:- typeclass doc(T) where [$/;kq|-;/\<pprint.doc\>/;'q;"	kind:tc
pprint.dynamic_cast_to_list	pprint.m	/^:- some [T2] pred dynamic_cast_to_list(T1::in, list(T2)::out) is semidet.$/;kq|/^\<dynamic_cast_to_list\>/;'q;"	kind:pred	file:
pprint.dynamic_cast_to_map	pprint.m	/^:- some [T2, T3] pred dynamic_cast_to_map(T1::in, map(T2, T3)::out) is semidet.$/;kq|/^\<dynamic_cast_to_map\>/;'q;"	kind:pred	file:
pprint.dynamic_cast_to_robdd	pprint.m	/^:- some [T2] pred dynamic_cast_to_robdd(T1, robdd(T2)).$/;kq|/^\<dynamic_cast_to_robdd\>/;'q;"	kind:pred	file:
pprint.dynamic_cast_to_tuple	pprint.m	/^:- pred dynamic_cast_to_tuple(T::in, T::out) is semidet.$/;kq|/^\<dynamic_cast_to_tuple\>/;'q;"	kind:pred	file:
pprint.dynamic_cast_to_var	pprint.m	/^:- some [T2] pred dynamic_cast_to_var(T1::in, var(T2)::out) is semidet.$/;kq|/^\<dynamic_cast_to_var\>/;'q;"	kind:pred	file:
pprint.ellipsis	pprint.m	/^:- func ellipsis            = doc.      % "...".$/;kq|/^\<ellipsis\>/;'q;"	kind:func
pprint.extend	pprint.m	/^:- func extend(string, int) = string.$/;kq|/^\<extend\>/;'q;"	kind:func	file:
pprint.ff	pprint.m	/^:- func ff(doc, int) = int is semidet.$/;kq|/^\<ff\>/;'q;"	kind:func	file:
pprint.fits_flat	pprint.m	/^:- pred fits_flat(doc::in, int::in) is semidet.$/;kq|/^\<fits_flat\>/;'q;"	kind:pred	file:
pprint.generic_term_to_doc	pprint.m	/^:- func generic_term_to_doc(depth, priority, T) = doc.$/;kq|/^\<generic_term_to_doc\>/;'q;"	kind:func	file:
pprint.group	pprint.m	/^:- func group(T)            = doc <= (doc(T)).$/;kq|/^\<group\>/;'q;"	kind:func
pprint.label	pprint.m	/^:- func label(string, T)    = doc <= (doc(T)).$/;kq|/^\<label\>/;'q;"	kind:func
pprint.layout_best	pprint.m	/^:- pred layout_best(pred(string, T, T), int, doc, T, T).$/;kq|/^\<layout_best\>/;'q;"	kind:pred	file:
pprint.layout_flat	pprint.m	/^:- pred layout_flat(pred(string, T, T), int, int, doc, T, T).$/;kq|/^\<layout_flat\>/;'q;"	kind:pred	file:
pprint.lb	pprint.m	/^:- pred lb(pred(string, T, T), int, int, int, string, doc, T, T).$/;kq|/^\<lb\>/;'q;"	kind:pred	file:
pprint.line	pprint.m	/^:- func line                = doc.$/;kq|/^\<line\>/;'q;"	kind:func
pprint.list_to_doc	pprint.m	/^:- func list_to_doc(int, list(T)) = doc.$/;kq|/^\<list_to_doc\>/;'q;"	kind:func	file:
pprint.map_pair	pprint.m	/^    --->    map_pair(K, V).$/;kq|-;/\<pprint.map_pair\>/;'q;"	kind:cons	file:
pprint.map_pair	pprint.m	/^:- type map_pair(K, V)$/;kq|-;/\<pprint.map_pair\>/;'q;"	kind:type	file:
pprint.map_pair_to_doc	pprint.m	/^:- func map_pair_to_doc(int, map_pair(T1, T2)) = doc.$/;kq|/^\<map_pair_to_doc\>/;'q;"	kind:func	file:
pprint.map_to_doc	pprint.m	/^:- func map_to_doc(int, map(T1, T2)) = doc.$/;kq|/^\<map_to_doc\>/;'q;"	kind:func	file:
pprint.maybe_parens	pprint.m	/^:- func maybe_parens(priority, priority, doc) = doc.$/;kq|/^\<maybe_parens\>/;'q;"	kind:func	file:
pprint.mk_map_pair	pprint.m	/^:- func mk_map_pair(pair(K, V)) = map_pair(K, V).$/;kq|/^\<mk_map_pair\>/;'q;"	kind:func	file:
pprint.nest	pprint.m	/^:- func nest(int, T)        = doc <= (doc(T)).$/;kq|/^\<nest\>/;'q;"	kind:func
pprint.nil	pprint.m	/^:- func nil                 = doc.$/;kq|/^\<nil\>/;'q;"	kind:func
pprint.packed	pprint.m	/^:- func packed(T1, list(T2)) = doc <= (doc(T1), doc(T2)).$/;kq|/^\<packed\>/;'q;"	kind:func
pprint.packed	pprint.m	/^:- func packed(int, T1, list(T2)) = doc <= (doc(T1), doc(T2)).$/;kq|/^\<packed\>/;'q;"	kind:func
pprint.packed_cs	pprint.m	/^:- func packed_cs(int, list(T)) = doc <= (doc(T)).$/;kq|/^\<packed_cs\>/;'q;"	kind:func
pprint.packed_cs	pprint.m	/^:- func packed_cs(list(T)) = doc <= (doc(T)).$/;kq|/^\<packed_cs\>/;'q;"	kind:func
pprint.packed_cs_to_depth	pprint.m	/^:- func packed_cs_to_depth(int, list(T)) = doc.$/;kq|/^\<packed_cs_to_depth\>/;'q;"	kind:func
pprint.packed_cs_univ_args	pprint.m	/^:- func packed_cs_univ_args(int, list(univ)) = doc.$/;kq|/^\<packed_cs_univ_args\>/;'q;"	kind:func
pprint.parentheses	pprint.m	/^:- func parentheses(T)         = doc <= (doc(T)).$/;kq|/^\<parentheses\>/;'q;"	kind:func
pprint.poly	pprint.m	/^:- func poly(string.poly_type) = doc.$/;kq|/^\<poly\>/;'q;"	kind:func
pprint.priority	pprint.m	/^:- func priority `adjusted_by` assoc = priority.$/;kq|/^\<priority\>/;'q;"	kind:func	file:
pprint.robdd_to_doc	pprint.m	/^:- func robdd_to_doc(int, robdd(T)) = doc.$/;kq|/^\<robdd_to_doc\>/;'q;"	kind:func	file:
pprint.semic	pprint.m	/^:- func semic               = doc.      % Semicolon.$/;kq|/^\<semic\>/;'q;"	kind:func
pprint.semic_line	pprint.m	/^:- func semic_line          = doc.$/;kq|/^\<semic_line\>/;'q;"	kind:func
pprint.semic_space	pprint.m	/^:- func semic_space         = doc.$/;kq|/^\<semic_space\>/;'q;"	kind:func
pprint.semic_space_line	pprint.m	/^:- func semic_space_line    = doc.$/;kq|/^\<semic_space_line\>/;'q;"	kind:func
pprint.separated	pprint.m	/^:- func separated(func(T1) = doc, T2, list(T1)) = doc <= (doc(T2)).$/;kq|/^\<separated\>/;'q;"	kind:func
pprint.space	pprint.m	/^:- func space               = doc.$/;kq|/^\<space\>/;'q;"	kind:func
pprint.space_line	pprint.m	/^:- func space_line          = doc.$/;kq|/^\<space_line\>/;'q;"	kind:func
pprint.sparse_bitset_to_doc	pprint.m	/^:- func sparse_bitset_to_doc(int, sparse_bitset(T)) = doc <= enum(T).$/;kq|/^\<sparse_bitset_to_doc\>/;'q;"	kind:func	file:
pprint.text	pprint.m	/^:- func text(string)        = doc.$/;kq|/^\<text\>/;'q;"	kind:func
pprint.to_doc	pprint.m	/^:- func to_doc(T)           = doc.$/;kq|/^\<to_doc\>/;'q;"	kind:func
pprint.to_doc	pprint.m	/^:- func to_doc(int, T)      = doc.$/;kq|/^\<to_doc\>/;'q;"	kind:func
pprint.to_doc	pprint.m	/^:- func to_doc(int, priority, T) = doc.$/;kq|/^\<to_doc\>/;'q;"	kind:func	file:
pprint.to_string	pprint.m	/^:- func to_string(int, doc) = string.$/;kq|/^\<to_string\>/;'q;"	kind:func
pprint.tuple_to_doc	pprint.m	/^:- func tuple_to_doc(int, T) = doc.$/;kq|/^\<tuple_to_doc\>/;'q;"	kind:func	file:
pprint.univ_to_doc	pprint.m	/^:- func univ_to_doc(int, priority, univ) = doc.$/;kq|/^\<univ_to_doc\>/;'q;"	kind:func	file:
pprint.var_to_doc	pprint.m	/^:- func var_to_doc(int, var(T)) = doc.$/;kq|/^\<var_to_doc\>/;'q;"	kind:func	file:
pprint.version_array_to_doc	pprint.m	/^:- func version_array_to_doc(int, version_array(T)) = doc.$/;kq|/^\<version_array_to_doc\>/;'q;"	kind:func	file:
pprint.word_wrapped	pprint.m	/^:- func word_wrapped(string) = doc.$/;kq|/^\<word_wrapped\>/;'q;"	kind:func
pprint.write	pprint.m	/^:- pred write(Stream::in, int::in, T::in, State::di, State::uo) is det$/;kq|/^\<write\>/;'q;"	kind:pred
pprint.write	pprint.m	/^:- pred write(int::in, T::in, io::di, io::uo) is det <= doc(T).$/;kq|/^\<write\>/;'q;"	kind:pred
pqueue	pqueue.m	/^    ;       pqueue(int, K, V, pqueue(K, V), pqueue(K, V)).$/;kq|-;/\<pqueue\>/;'q;"	kind:cons	file:
pqueue	pqueue.m	/^:- type pqueue(K, V)$/;kq|-;/\<pqueue\>/;'q;"	kind:type	file:
pqueue.assoc_list_to_pqueue	pqueue.m	/^:- func pqueue.assoc_list_to_pqueue(assoc_list(K, V)) = pqueue(K, V).$/;kq|/^\<pqueue.assoc_list_to_pqueue\>/;'q;"	kind:func
pqueue.assoc_list_to_pqueue	pqueue.m	/^:- pred pqueue.assoc_list_to_pqueue(assoc_list(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.assoc_list_to_pqueue\>/;'q;"	kind:pred
pqueue.det_peek	pqueue.m	/^:- pred pqueue.det_peek(pqueue(K, V)::in, K::out, V::out) is det.$/;kq|/^\<pqueue.det_peek\>/;'q;"	kind:pred
pqueue.det_peek_key	pqueue.m	/^:- func pqueue.det_peek_key(pqueue(K, V)) = K.$/;kq|/^\<pqueue.det_peek_key\>/;'q;"	kind:func
pqueue.det_peek_value	pqueue.m	/^:- func pqueue.det_peek_value(pqueue(K, V)) = V.$/;kq|/^\<pqueue.det_peek_value\>/;'q;"	kind:func
pqueue.det_remove	pqueue.m	/^:- pred pqueue.det_remove(K::out, V::out, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.det_remove\>/;'q;"	kind:pred
pqueue.do_merge	pqueue.m	/^:- pred do_merge(pqueue(K, V)::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<do_merge\>/;'q;"	kind:pred	file:
pqueue.empty	pqueue.m	/^    --->    empty$/;kq|-;/\<pqueue.empty\>/;'q;"	kind:cons	file:
pqueue.from_assoc_list	pqueue.m	/^:- func pqueue.from_assoc_list(assoc_list(K, V)) = pqueue(K, V).$/;kq|/^\<pqueue.from_assoc_list\>/;'q;"	kind:func
pqueue.init	pqueue.m	/^:- func pqueue.init = pqueue(K, V).$/;kq|/^\<pqueue.init\>/;'q;"	kind:func
pqueue.init	pqueue.m	/^:- pred pqueue.init(pqueue(K, V)::out) is det.$/;kq|/^\<pqueue.init\>/;'q;"	kind:pred
pqueue.insert	pqueue.m	/^:- func pqueue.insert(pqueue(K, V), K, V) = pqueue(K, V).$/;kq|/^\<pqueue.insert\>/;'q;"	kind:func
pqueue.insert	pqueue.m	/^:- pred pqueue.insert(K::in, V::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.insert\>/;'q;"	kind:pred
pqueue.insert_2	pqueue.m	/^:- pred pqueue.insert_2(K::in, V::in, pqueue(K, V)::in, pqueue(K, V)::in,$/;kq|/^\<pqueue.insert_2\>/;'q;"	kind:pred	file:
pqueue.is_empty	pqueue.m	/^:- pred pqueue.is_empty(pqueue(K, V)::in) is semidet.$/;kq|/^\<pqueue.is_empty\>/;'q;"	kind:pred
pqueue.length	pqueue.m	/^:- func pqueue.length(pqueue(K, V)) = int.$/;kq|/^\<pqueue.length\>/;'q;"	kind:func
pqueue.merge	pqueue.m	/^:- func pqueue.merge(pqueue(K, V), pqueue(K, V)) = pqueue(K, V).$/;kq|/^\<pqueue.merge\>/;'q;"	kind:func
pqueue.merge	pqueue.m	/^:- pred pqueue.merge(pqueue(K, V)::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.merge\>/;'q;"	kind:pred
pqueue.peek	pqueue.m	/^:- pred pqueue.peek(pqueue(K, V)::in, K::out, V::out) is semidet.$/;kq|/^\<pqueue.peek\>/;'q;"	kind:pred
pqueue.peek_key	pqueue.m	/^:- pred pqueue.peek_key(pqueue(K, V)::in, K::out) is semidet.$/;kq|/^\<pqueue.peek_key\>/;'q;"	kind:pred
pqueue.peek_value	pqueue.m	/^:- pred pqueue.peek_value(pqueue(K, V)::in, V::out) is semidet.$/;kq|/^\<pqueue.peek_value\>/;'q;"	kind:pred
pqueue.remove	pqueue.m	/^:- pred pqueue.remove(K::out, V::out, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.remove\>/;'q;"	kind:pred
pqueue.remove_2	pqueue.m	/^:- pred pqueue.remove_2(pqueue(K, V)::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.remove_2\>/;'q;"	kind:pred	file:
pqueue.to_assoc_list	pqueue.m	/^:- func pqueue.to_assoc_list(pqueue(K, V)) = assoc_list(K, V).$/;kq|/^\<pqueue.to_assoc_list\>/;'q;"	kind:func
pqueue.to_assoc_list	pqueue.m	/^:- pred pqueue.to_assoc_list(pqueue(K, V)::in, assoc_list(K, V)::out)$/;kq|/^\<pqueue.to_assoc_list\>/;'q;"	kind:pred
prec	string.m	/^:- pred prec(list(char)::out,$/;kq|/^\<prec\>/;'q;"	kind:pred	file:
precision	string.m	/^                precision   :: maybe(list(char)),$/;kq|-;/\<precision\>/;'q;"	kind:fld	file:
pred_to_bool	bool.m	/^:- func pred_to_bool((pred)::((pred) is semidet)) = (bool::out) is det.$/;kq|/^\<pred_to_bool\>/;'q;"	kind:func
prefix	ops.m	/^    ;       prefix(ops.assoc)                       % Op term$/;kq|-;/\<prefix\>/;'q;"	kind:cons
prefix	string.m	/^:- pred string.prefix(string, string).$/;kq|/^\<string.prefix\>/;'q;"	kind:pred
prefix_2_iii	string.m	/^:- pred prefix_2_iii(string::in, string::in, int::in) is semidet.$/;kq|/^\<prefix_2_iii\>/;'q;"	kind:pred	file:
prefix_2_ioi	string.m	/^:- pred prefix_2_ioi(string::in, string::out, int::in) is multi.$/;kq|/^\<prefix_2_ioi\>/;'q;"	kind:pred	file:
prefix_length	string.m	/^:- func string.prefix_length(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.prefix_length\>/;'q;"	kind:func
prefix_length_2	string.m	/^:- pred prefix_length_2(pred(char)::in(pred(in) is semidet),$/;kq|/^\<prefix_length_2\>/;'q;"	kind:pred	file:
preopen	io.m	/^    ;       preopen.$/;kq|-;/\<preopen\>/;'q;"	kind:cons
prepare_for_callback	profiling_builtin.m	/^:- impure pred prepare_for_callback(int::in) is det.$/;kq|/^\<prepare_for_callback\>/;'q;"	kind:pred
prepare_for_ho_call	profiling_builtin.m	/^:- impure pred prepare_for_ho_call(int::in, c_pointer::in) is det.$/;kq|/^\<prepare_for_ho_call\>/;'q;"	kind:pred
prepare_for_method_call	profiling_builtin.m	/^:- impure pred prepare_for_method_call(int::in, c_pointer::in, int::in) is det.$/;kq|/^\<prepare_for_method_call\>/;'q;"	kind:pred
prepare_for_normal_call	profiling_builtin.m	/^:- impure pred prepare_for_normal_call(int::in) is det.$/;kq|/^\<prepare_for_normal_call\>/;'q;"	kind:pred
prepare_for_special_call	profiling_builtin.m	/^:- impure pred prepare_for_special_call(int::in, c_pointer::in) is det.$/;kq|/^\<prepare_for_special_call\>/;'q;"	kind:pred
prepare_for_tail_call	profiling_builtin.m	/^:- impure pred prepare_for_tail_call(int::in) is det.$/;kq|/^\<prepare_for_tail_call\>/;'q;"	kind:pred
pretend_to_generate_value	table_builtin.m	/^:- pred pretend_to_generate_value(T::out) is det.$/;kq|/^\<pretend_to_generate_value\>/;'q;"	kind:pred	file:
pretty_printer.adjust_priority	pretty_printer.m	/^:- func adjust_priority(ops.priority, ops.assoc) = ops.priority.$/;kq|/^\<adjust_priority\>/;'q;"	kind:func	file:
pretty_printer.close_group	pretty_printer.m	/^    ;       close_group$/;kq|-;/\<pretty_printer.close_group\>/;'q;"	kind:cons	file:
pretty_printer.decrement_limit	pretty_printer.m	/^:- pred decrement_limit(formatting_limit::in, formatting_limit::out) is det.$/;kq|/^\<decrement_limit\>/;'q;"	kind:pred	file:
pretty_printer.doc	pretty_printer.m	/^:- type doc$/;kq|-;/\<pretty_printer.doc\>/;'q;"	kind:type
pretty_printer.docs	pretty_printer.m	/^    ;       docs(docs)$/;kq|-;/\<pretty_printer.docs\>/;'q;"	kind:cons
pretty_printer.docs	pretty_printer.m	/^:- type docs == list(doc).$/;kq|-;/\<pretty_printer.docs\>/;'q;"	kind:type
pretty_printer.ellipsis	pretty_printer.m	/^:- func ellipsis = doc.$/;kq|/^\<ellipsis\>/;'q;"	kind:func	file:
pretty_printer.expand_docs	pretty_printer.m	/^:- pred expand_docs(noncanon_handling, formatter_map, docs, docs, int,$/;kq|/^\<expand_docs\>/;'q;"	kind:pred	file:
pretty_printer.expand_pp	pretty_printer.m	/^:- pred expand_pp(noncanon_handling, formatter_map, univ, doc,$/;kq|/^\<expand_pp\>/;'q;"	kind:pred	file:
pretty_printer.fmt_array	pretty_printer.m	/^:- func fmt_array(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_array\>/;'q;"	kind:func	file:
pretty_printer.fmt_char	pretty_printer.m	/^:- func fmt_char(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_char\>/;'q;"	kind:func	file:
pretty_printer.fmt_float	pretty_printer.m	/^:- func fmt_float(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_float\>/;'q;"	kind:func	file:
pretty_printer.fmt_int	pretty_printer.m	/^:- func fmt_int(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_int\>/;'q;"	kind:func	file:
pretty_printer.fmt_list	pretty_printer.m	/^:- func fmt_list(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_list\>/;'q;"	kind:func	file:
pretty_printer.fmt_string	pretty_printer.m	/^:- func fmt_string(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_string\>/;'q;"	kind:func	file:
pretty_printer.fmt_tree234	pretty_printer.m	/^:- func fmt_tree234(univ, list(type_desc)) = doc.$/;kq|/^\<fmt_tree234\>/;'q;"	kind:func	file:
pretty_printer.format	pretty_printer.m	/^:- func format(T) = doc.$/;kq|/^\<format\>/;'q;"	kind:func
pretty_printer.format_arg	pretty_printer.m	/^:- func format_arg(doc) = doc.$/;kq|/^\<format_arg\>/;'q;"	kind:func
pretty_printer.format_list	pretty_printer.m	/^    ;       format_list(list(univ), doc)$/;kq|-;/\<pretty_printer.format_list\>/;'q;"	kind:cons
pretty_printer.format_nl	pretty_printer.m	/^:- pred format_nl(Stream::in, int::in, indents::in, int::out,$/;kq|/^\<format_nl\>/;'q;"	kind:pred	file:
pretty_printer.format_susp	pretty_printer.m	/^    ;       format_susp((func) = doc)$/;kq|-;/\<pretty_printer.format_susp\>/;'q;"	kind:cons
pretty_printer.format_term	pretty_printer.m	/^    ;       format_term(string, list(univ))$/;kq|-;/\<pretty_printer.format_term\>/;'q;"	kind:cons
pretty_printer.format_univ	pretty_printer.m	/^    ;       format_univ(univ)$/;kq|-;/\<pretty_printer.format_univ\>/;'q;"	kind:cons
pretty_printer.formatter	pretty_printer.m	/^:- type formatter == ( func(univ, list(type_desc)) = doc ).$/;kq|-;/\<pretty_printer.formatter\>/;'q;"	kind:type
pretty_printer.formatter_map	pretty_printer.m	/^:- type formatter_map == map(string, map(string, map(int, formatter))).$/;kq|-;/\<pretty_printer.formatter_map\>/;'q;"	kind:type	file:
pretty_printer.get_formatter	pretty_printer.m	/^:- pred get_formatter(formatter_map::in, string::in, string::in, int::in,$/;kq|/^\<get_formatter\>/;'q;"	kind:pred	file:
pretty_printer.group	pretty_printer.m	/^:- func group(docs) = doc.$/;kq|/^\<group\>/;'q;"	kind:func
pretty_printer.hard_nl	pretty_printer.m	/^    ;       hard_nl$/;kq|-;/\<pretty_printer.hard_nl\>/;'q;"	kind:cons
pretty_printer.indent	pretty_printer.m	/^    ;       indent(string)$/;kq|-;/\<pretty_printer.indent\>/;'q;"	kind:cons	file:
pretty_printer.indent	pretty_printer.m	/^:- func indent(docs) = doc.$/;kq|/^\<indent\>/;'q;"	kind:func
pretty_printer.indent	pretty_printer.m	/^:- func indent(string, docs) = doc.$/;kq|/^\<indent\>/;'q;"	kind:func
pretty_printer.indents	pretty_printer.m	/^:- type indents == list(string).$/;kq|-;/\<pretty_printer.indents\>/;'q;"	kind:type	file:
pretty_printer.limit_overrun	pretty_printer.m	/^:- pred limit_overrun(formatting_limit::in) is semidet.$/;kq|/^\<limit_overrun\>/;'q;"	kind:pred	file:
pretty_printer.linear	pretty_printer.m	/^    --->    linear(int)                 % Print this many functors.$/;kq|-;/\<pretty_printer.linear\>/;'q;"	kind:cons
pretty_printer.nl	pretty_printer.m	/^    ;       nl$/;kq|-;/\<pretty_printer.nl\>/;'q;"	kind:cons
pretty_printer.open_group	pretty_printer.m	/^    --->    open_group$/;kq|-;/\<pretty_printer.open_group\>/;'q;"	kind:cons	file:
pretty_printer.outdent	pretty_printer.m	/^    ;       outdent$/;kq|-;/\<pretty_printer.outdent\>/;'q;"	kind:cons	file:
pretty_printer.pp_internal	pretty_printer.m	/^    ;       pp_internal(pp_internal).$/;kq|-;/\<pretty_printer.pp_internal\>/;'q;"	kind:cons
pretty_printer.pp_internal	pretty_printer.m	/^:- type pp_internal$/;kq|-;/\<pretty_printer.pp_internal\>/;'q;"	kind:type	file:
pretty_printer.pp_limit	pretty_printer.m	/^                pp_limit        :: formatting_limit % Term formatting limit.$/;kq|-;/\<pretty_printer.pp_limit\>/;'q;"	kind:fld
pretty_printer.pp_line_width	pretty_printer.m	/^                pp_line_width   :: int,             % Line width in characters.$/;kq|-;/\<pretty_printer.pp_line_width\>/;'q;"	kind:fld
pretty_printer.pp_max_lines	pretty_printer.m	/^                pp_max_lines    :: int,             % Max lines to output.$/;kq|-;/\<pretty_printer.pp_max_lines\>/;'q;"	kind:fld
pretty_printer.pp_params	pretty_printer.m	/^    --->    pp_params($/;kq|-;/\<pretty_printer.pp_params\>/;'q;"	kind:cons
pretty_printer.pp_params	pretty_printer.m	/^:- type pp_params$/;kq|-;/\<pretty_printer.pp_params\>/;'q;"	kind:type
pretty_printer.set_formatter	pretty_printer.m	/^:- func set_formatter(string, string, int, formatter, formatter_map) =$/;kq|/^\<set_formatter\>/;'q;"	kind:func
pretty_printer.set_limit	pretty_printer.m	/^    ;       set_limit(formatting_limit).$/;kq|-;/\<pretty_printer.set_limit\>/;'q;"	kind:cons	file:
pretty_printer.set_op_priority	pretty_printer.m	/^    ;       set_op_priority(ops.priority)$/;kq|-;/\<pretty_printer.set_op_priority\>/;'q;"	kind:cons	file:
pretty_printer.str	pretty_printer.m	/^    --->    str(string)$/;kq|-;/\<pretty_printer.str\>/;'q;"	kind:cons
pretty_printer.triangular	pretty_printer.m	/^    ;       triangular(int).            % Print first arg with limit N-1,$/;kq|-;/\<pretty_printer.triangular\>/;'q;"	kind:cons
pretty_printer.write_doc	pretty_printer.m	/^:- pred write_doc(doc::in, io::di, io::uo) is det.$/;kq|/^\<write_doc\>/;'q;"	kind:pred
pretty_printer.write_doc	pretty_printer.m	/^:- pred write_doc(io.output_stream::in, doc::in, io::di, io::uo) is det.$/;kq|/^\<write_doc\>/;'q;"	kind:pred
pretty_printer_is_initialised	pretty_printer.m	/^:- pred pretty_printer_is_initialised(bool::out, io::di, io::uo)$/;kq|/^\<pretty_printer_is_initialised\>/;'q;"	kind:pred	file:
prev_index	string.m	/^:- pred string.prev_index(string::in, int::in, int::out, char::uo) is semidet.$/;kq|/^\<string.prev_index\>/;'q;"	kind:pred
primitive_value	term_to_xml.m	/^:- pred primitive_value(univ::in, string::out) is semidet.$/;kq|/^\<primitive_value\>/;'q;"	kind:pred	file:
print	io.m	/^:- pred io.print(T::in, io::di, io::uo) is det.$/;kq|/^\<io.print\>/;'q;"	kind:pred
print	io.m	/^:- pred io.print(io.output_stream, deconstruct.noncanon_handling, T, io, io).$/;kq|/^\<io.print\>/;'q;"	kind:pred
print	io.m	/^:- pred io.print(io.output_stream::in, T::in, io::di, io::uo) is det.$/;kq|/^\<io.print\>/;'q;"	kind:pred
print	stream.string_writer.m	/^:- pred print(Stream, deconstruct.noncanon_handling, T, State, State)$/;kq|/^\<print\>/;'q;"	kind:pred
print	stream.string_writer.m	/^:- pred print(Stream::in, T::in, State::di, State::uo) is det$/;kq|/^\<print\>/;'q;"	kind:pred
print_cc	io.m	/^:- pred io.print_cc(T::in, io::di, io::uo) is cc_multi.$/;kq|/^\<io.print_cc\>/;'q;"	kind:pred
print_cc	stream.string_writer.m	/^:- pred print_cc(Stream::in, T::in, State::di, State::uo) is cc_multi$/;kq|/^\<print_cc\>/;'q;"	kind:pred
print_quoted	stream.string_writer.m	/^:- pred print_quoted(Stream, deconstruct.noncanon_handling, T, State, State)$/;kq|/^\<print_quoted\>/;'q;"	kind:pred	file:
print_rbmm_profiling_info	region_builtin.m	/^:- pred print_rbmm_profiling_info(io::di, io::uo) is det.$/;kq|/^\<print_rbmm_profiling_info\>/;'q;"	kind:pred
print_robdd	robdd.m	/^:- pred print_robdd(robdd(T)::in, io::di, io::uo) is det.$/;kq|/^\<print_robdd\>/;'q;"	kind:pred
print_robdd_2	robdd.m	/^:- pred print_robdd_2(robdd(T)::in, set_unordlist(var(T))::in,$/;kq|/^\<print_robdd_2\>/;'q;"	kind:pred	file:
print_to_stream	io.m	/^:- pred io.print_to_stream(io.stream::in, T::in, io::di, io::uo) is det.$/;kq|/^\<io.print_to_stream\>/;'q;"	kind:pred	file:
printbase	integer.m	/^:- func printbase = int.$/;kq|/^\<printbase\>/;'q;"	kind:func	file:
printbase_add_pairs	integer.m	/^:- pred printbase_add_pairs(digit::out, integer::in, integer::in,$/;kq|/^\<printbase_add_pairs\>/;'q;"	kind:pred	file:
printbase_add_pairs_equal	integer.m	/^:- pred printbase_add_pairs_equal(digit::out, list(digit)::in, list(digit)::in,$/;kq|/^\<printbase_add_pairs_equal\>/;'q;"	kind:pred	file:
printbase_chop	integer.m	/^:- pred printbase_chop(int::in, digit::out, digit::out) is det.$/;kq|/^\<printbase_chop\>/;'q;"	kind:pred	file:
printbase_mul_by_digit	integer.m	/^:- func printbase_mul_by_digit(digit, integer) = integer.$/;kq|/^\<printbase_mul_by_digit\>/;'q;"	kind:func	file:
printbase_mul_by_digit_2	integer.m	/^:- pred printbase_mul_by_digit_2(digit::in, digit::out,$/;kq|/^\<printbase_mul_by_digit_2\>/;'q;"	kind:pred	file:
printbase_pos_int_to_digits	integer.m	/^:- func printbase_pos_int_to_digits(int) = integer.$/;kq|/^\<printbase_pos_int_to_digits\>/;'q;"	kind:func	file:
printbase_pos_int_to_digits_2	integer.m	/^:- func printbase_pos_int_to_digits_2(int, integer) = integer.$/;kq|/^\<printbase_pos_int_to_digits_2\>/;'q;"	kind:func	file:
printbase_pos_mul	integer.m	/^:- func printbase_pos_mul(integer, integer) = integer.$/;kq|/^\<printbase_pos_mul\>/;'q;"	kind:func	file:
printbase_pos_mul_list	integer.m	/^:- func printbase_pos_mul_list(list(digit), integer, integer) = integer.$/;kq|/^\<printbase_pos_mul_list\>/;'q;"	kind:func	file:
printbase_pos_plus	integer.m	/^:- func printbase_pos_plus(integer, integer) = integer.$/;kq|/^\<printbase_pos_plus\>/;'q;"	kind:func	file:
printbase_rep	integer.m	/^:- pred printbase_rep(integer::in, list(digit)::in, integer::out) is det.$/;kq|/^\<printbase_rep\>/;'q;"	kind:pred	file:
printbase_rep_1	integer.m	/^:- func printbase_rep_1(list(digit), integer, integer) = integer.$/;kq|/^\<printbase_rep_1\>/;'q;"	kind:func	file:
priority	ops.m	/^:- type ops.priority == int.$/;kq|-;/\<priority\>/;'q;"	kind:type
priority	pprint.m	/^:- func priority `adjusted_by` assoc = priority.$/;kq|/^\<priority\>/;'q;"	kind:func	file:
private_builtin.builtin_int_gt	private_builtin.m	/^:- pred builtin_int_gt(int::in, int::in) is semidet.$/;kq|/^\<builtin_int_gt\>/;'q;"	kind:pred
private_builtin.builtin_int_lt	private_builtin.m	/^:- pred builtin_int_lt(int::in, int::in) is semidet.$/;kq|/^\<builtin_int_lt\>/;'q;"	kind:pred
private_builtin.builtin_strcmp	private_builtin.m	/^:- pred builtin_strcmp(int::out, string::in, string::in) is det.$/;kq|/^\<builtin_strcmp\>/;'q;"	kind:pred	file:
private_builtin.compare_error	private_builtin.m	/^:- pred compare_error is erroneous.$/;kq|/^\<compare_error\>/;'q;"	kind:pred
private_builtin.discard_ticket	private_builtin.m	/^:- impure pred discard_ticket is det.$/;kq|/^\<discard_ticket\>/;'q;"	kind:pred
private_builtin.float_box	private_builtin.m	/^    --->    float_box(float).$/;kq|-;/\<private_builtin.float_box\>/;'q;"	kind:cons
private_builtin.float_box	private_builtin.m	/^:- type float_box$/;kq|-;/\<private_builtin.float_box\>/;'q;"	kind:type
private_builtin.free_heap	private_builtin.m	/^:- impure pred free_heap(T::di) is det.$/;kq|/^\<free_heap\>/;'q;"	kind:pred
private_builtin.gc_trace	private_builtin.m	/^:- impure pred gc_trace(mutvar(T)::in) is det.$/;kq|/^\<gc_trace\>/;'q;"	kind:pred
private_builtin.imp	private_builtin.m	/^:- impure pred imp is det.$/;kq|/^\<imp\>/;'q;"	kind:pred
private_builtin.mark_hp	private_builtin.m	/^:- impure pred mark_hp(heap_pointer::out) is det.$/;kq|/^\<mark_hp\>/;'q;"	kind:pred
private_builtin.mutvar	private_builtin.m	/^:- type mutvar(T) ---> mutvar(c_pointer).$/;kq|-;/\<private_builtin.mutvar\>/;'q;"	kind:cons
private_builtin.mutvar	private_builtin.m	/^:- type mutvar(T) ---> mutvar(c_pointer).$/;kq|-;/\<private_builtin.mutvar\>/;'q;"	kind:type
private_builtin.no_clauses	private_builtin.m	/^:- pred no_clauses(string::in) is erroneous.$/;kq|/^\<no_clauses\>/;'q;"	kind:pred
private_builtin.nonvar	private_builtin.m	/^:- impure pred nonvar(T).$/;kq|/^\<nonvar\>/;'q;"	kind:pred
private_builtin.pointer_equal	private_builtin.m	/^:- pred pointer_equal(T::in, T::in) is semidet.$/;kq|/^\<pointer_equal\>/;'q;"	kind:pred
private_builtin.prune_ticket	private_builtin.m	/^:- impure pred prune_ticket is det.$/;kq|/^\<prune_ticket\>/;'q;"	kind:pred
private_builtin.restore_hp	private_builtin.m	/^:- impure pred restore_hp(heap_pointer::in) is det.$/;kq|/^\<restore_hp\>/;'q;"	kind:pred
private_builtin.semip	private_builtin.m	/^:- semipure pred semip is det.$/;kq|/^\<semip\>/;'q;"	kind:pred
private_builtin.sorry	private_builtin.m	/^:- pred sorry(string::in) is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:pred
private_builtin.store_at_ref	private_builtin.m	/^:- pred store_at_ref(store_at_ref_type(T)::in, T::in) is det.$/;kq|/^\<store_at_ref\>/;'q;"	kind:pred
private_builtin.store_ticket	private_builtin.m	/^:- impure pred store_ticket(ticket::out) is det.$/;kq|/^\<store_ticket\>/;'q;"	kind:pred
private_builtin.ticket	private_builtin.m	/^:- type ticket == c_pointer.$/;kq|-;/\<private_builtin.ticket\>/;'q;"	kind:type
private_builtin.ticket_counter	private_builtin.m	/^:- type ticket_counter == c_pointer.$/;kq|-;/\<private_builtin.ticket_counter\>/;'q;"	kind:type
private_builtin.typed_compare	private_builtin.m	/^:- pred typed_compare(comparison_result::uo, T1::in, T2::in) is det.$/;kq|/^\<typed_compare\>/;'q;"	kind:pred
private_builtin.typed_unify	private_builtin.m	/^:- pred typed_unify(T1, T2).$/;kq|/^\<typed_unify\>/;'q;"	kind:pred
private_builtin.unused	private_builtin.m	/^:- pred unused is det.$/;kq|/^\<unused\>/;'q;"	kind:pred
private_builtin.var	private_builtin.m	/^:- impure pred var(T).$/;kq|/^\<var\>/;'q;"	kind:pred
private_builtin_type_info_to_revstrings	string.m	/^:- pred private_builtin_type_info_to_revstrings($/;kq|/^\<private_builtin_type_info_to_revstrings\>/;'q;"	kind:pred	file:
proc_dynamic	profiling_builtin.m	/^:- type proc_dynamic        ---> proc_dynamic(c_pointer).$/;kq|-;/\<proc_dynamic\>/;'q;"	kind:cons	file:
proc_dynamic	profiling_builtin.m	/^:- type proc_dynamic        ---> proc_dynamic(c_pointer).$/;kq|-;/\<proc_dynamic\>/;'q;"	kind:type	file:
proc_layout	profiling_builtin.m	/^:- type proc_layout         ---> proc_layout(c_pointer).$/;kq|-;/\<proc_layout\>/;'q;"	kind:cons	file:
proc_layout	profiling_builtin.m	/^:- type proc_layout         ---> proc_layout(c_pointer).$/;kq|-;/\<proc_layout\>/;'q;"	kind:type	file:
proc_table_statistics	table_statistics.m	/^    --->    proc_table_statistics($/;kq|-;/\<proc_table_statistics\>/;'q;"	kind:cons
proc_table_statistics	table_statistics.m	/^:- type proc_table_statistics$/;kq|-;/\<proc_table_statistics\>/;'q;"	kind:type
process_arguments	getopt.m	/^:- pred getopt.process_arguments(list(string)::in, list(string)::out,$/;kq|/^\<getopt.process_arguments\>/;'q;"	kind:pred	file:
process_arguments	getopt_io.m	/^:- pred getopt_io.process_arguments(list(string)::in, list(string)::out,$/;kq|/^\<getopt_io.process_arguments\>/;'q;"	kind:pred	file:
process_negated_option	getopt.m	/^:- pred process_negated_option(string::in, OptionType::in,$/;kq|/^\<process_negated_option\>/;'q;"	kind:pred	file:
process_negated_option	getopt_io.m	/^:- pred process_negated_option(string::in, OptionType::in,$/;kq|/^\<process_negated_option\>/;'q;"	kind:pred	file:
process_one_exception_result	exception.m	/^:- pred process_one_exception_result(exception_result(T)::in,$/;kq|/^\<process_one_exception_result\>/;'q;"	kind:pred	file:
process_option	getopt.m	/^:- pred getopt.process_option(option_data::in, string::in, OptionType::in,$/;kq|/^\<getopt.process_option\>/;'q;"	kind:pred	file:
process_option	getopt_io.m	/^:- pred getopt_io.process_option(option_data::in, string::in, OptionType::in,$/;kq|/^\<getopt_io.process_option\>/;'q;"	kind:pred	file:
process_options	getopt.m	/^:- pred getopt.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt.process_options\>/;'q;"	kind:pred
process_options	getopt.m	/^:- pred getopt.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt.process_options\>/;'q;"	kind:pred
process_options	getopt_io.m	/^:- pred getopt_io.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt_io.process_options\>/;'q;"	kind:pred
process_options	getopt_io.m	/^:- pred getopt_io.process_options(option_ops(OptionType)::in(option_ops),$/;kq|/^\<getopt_io.process_options\>/;'q;"	kind:pred
process_options_track	getopt.m	/^:- pred getopt.process_options_track($/;kq|/^\<getopt.process_options_track\>/;'q;"	kind:pred
process_options_track	getopt_io.m	/^:- pred getopt_io.process_options_track($/;kq|/^\<getopt_io.process_options_track\>/;'q;"	kind:pred
process_read_term	io.m	/^:- pred io.process_read_term(read_term::in, int::in, io.read_result(T)::out)$/;kq|/^\<io.process_read_term\>/;'q;"	kind:pred	file:
process_special	getopt.m	/^:- pred getopt.process_special(string::in, OptionType::in, special_data::in,$/;kq|/^\<getopt.process_special\>/;'q;"	kind:pred	file:
process_special	getopt_io.m	/^:- pred getopt_io.process_special(string::in, OptionType::in, special_data::in,$/;kq|/^\<getopt_io.process_special\>/;'q;"	kind:pred	file:
profiling_builtin.proc_dynamic	profiling_builtin.m	/^:- type proc_dynamic        ---> proc_dynamic(c_pointer).$/;kq|-;/\<profiling_builtin.proc_dynamic\>/;'q;"	kind:cons	file:
profiling_builtin.proc_dynamic	profiling_builtin.m	/^:- type proc_dynamic        ---> proc_dynamic(c_pointer).$/;kq|-;/\<profiling_builtin.proc_dynamic\>/;'q;"	kind:type	file:
profiling_builtin.proc_layout	profiling_builtin.m	/^:- type proc_layout         ---> proc_layout(c_pointer).$/;kq|-;/\<profiling_builtin.proc_layout\>/;'q;"	kind:cons	file:
profiling_builtin.proc_layout	profiling_builtin.m	/^:- type proc_layout         ---> proc_layout(c_pointer).$/;kq|-;/\<profiling_builtin.proc_layout\>/;'q;"	kind:type	file:
progname	io.m	/^:- pred io.progname(string::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.progname\>/;'q;"	kind:pred
progname_base	io.m	/^:- pred io.progname_base(string::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.progname_base\>/;'q;"	kind:pred
project_column_strings	string.m	/^:- func project_column_strings(pair(justified_column, maybe(int)))$/;kq|/^\<project_column_strings\>/;'q;"	kind:func	file:
prolog.T	prolog.m	/^:- pred T =.. univ_result.$/;kq|/^\<T\>/;'q;"	kind:pred
prolog.T	prolog.m	/^:- pred T =:= T.            % In Mercury, just use =$/;kq|/^\<T\>/;'q;"	kind:pred
prolog.T	prolog.m	/^:- pred T == T.             % In Mercury, just use =$/;kq|/^\<T\>/;'q;"	kind:pred
prolog.T	prolog.m	/^:- pred T =\\= T.            % In Mercury, just use \\=$/;kq|/^\<T\>/;'q;"	kind:pred
prolog.T	prolog.m	/^:- pred T \\== T.            % In Mercury, just use \\=$/;kq|/^\<T\>/;'q;"	kind:pred
prolog.arg	prolog.m	/^:- pred arg(int::in, T::in, univ::out) is semidet.$/;kq|/^\<arg\>/;'q;"	kind:pred
prolog.det_arg	prolog.m	/^:- pred det_arg(int::in, T::in, univ::out) is det.$/;kq|/^\<det_arg\>/;'q;"	kind:pred
prolog.in	prolog.m	/^:- mode in == in is semidet.$/;kq|-;/\<prolog.in\>/;'q;"	kind:mode
prolog.in	prolog.m	/^:- mode in \\== in is semidet.$/;kq|-;/\<prolog.in\>/;'q;"	kind:mode
prolog.is	prolog.m	/^:- pred is(T, T) is det.        % In Mercury, just use =$/;kq|/^\<is\>/;'q;"	kind:pred
prolog.univ_result	prolog.m	/^:- type univ_result == pair(string, list(univ)).$/;kq|-;/\<prolog.univ_result\>/;'q;"	kind:type
promise_only_solution	builtin.m	/^:- func promise_only_solution(pred(T)) = T.$/;kq|/^\<promise_only_solution\>/;'q;"	kind:func
promise_only_solution_io	builtin.m	/^:- pred promise_only_solution_io($/;kq|/^\<promise_only_solution_io\>/;'q;"	kind:pred
prune_ticket	private_builtin.m	/^:- impure pred prune_ticket is det.$/;kq|/^\<prune_ticket\>/;'q;"	kind:pred
prune_tickets_to	private_builtin.m	/^:- impure pred prune_tickets_to(ticket_counter::in) is det.$/;kq|/^\<prune_tickets_to\>/;'q;"	kind:pred
prune_top_levels	tree_bitset.m	/^:- pred prune_top_levels(node_list::in, node_list::out) is det.$/;kq|/^\<prune_top_levels\>/;'q;"	kind:pred	file:
ps	parsing_utils.m	/^:- type ps == int.$/;kq|-;/\<ps\>/;'q;"	kind:type	file:
pseudo	erlang_rtti_implementation.m	/^    --->    pseudo(pseudo_type_info_thunk)$/;kq|-;/\<pseudo\>/;'q;"	kind:cons	file:
pseudo_type_args	type_desc.m	/^:- func pseudo_type_args(pseudo_type_desc) = list(pseudo_type_desc) is semidet.$/;kq|/^\<pseudo_type_args\>/;'q;"	kind:func
pseudo_type_ctor	type_desc.m	/^:- func pseudo_type_ctor(pseudo_type_desc) = type_ctor_desc is semidet.$/;kq|/^\<pseudo_type_ctor\>/;'q;"	kind:func
pseudo_type_ctor_and_args	erlang_rtti_implementation.m	/^:- pred pseudo_type_ctor_and_args(pseudo_type_desc::in,$/;kq|/^\<pseudo_type_ctor_and_args\>/;'q;"	kind:pred
pseudo_type_ctor_and_args	rtti_implementation.m	/^:- pred pseudo_type_ctor_and_args(pseudo_type_info::in,$/;kq|/^\<pseudo_type_ctor_and_args\>/;'q;"	kind:pred
pseudo_type_ctor_and_args	type_desc.m	/^:- pred pseudo_type_ctor_and_args(pseudo_type_desc::in,$/;kq|/^\<pseudo_type_ctor_and_args\>/;'q;"	kind:pred
pseudo_type_desc_is_ground	type_desc.m	/^:- pred pseudo_type_desc_is_ground(pseudo_type_desc::in) is semidet.$/;kq|/^\<pseudo_type_desc_is_ground\>/;'q;"	kind:pred
pseudo_type_desc_to_pseudo_type_info	erlang_rtti_implementation.m	/^:- func pseudo_type_desc_to_pseudo_type_info($/;kq|/^\<pseudo_type_desc_to_pseudo_type_info\>/;'q;"	kind:func	file:
pseudo_type_desc_to_pseudo_type_info	type_desc.m	/^:- pred pseudo_type_desc_to_pseudo_type_info(pseudo_type_desc::in,$/;kq|/^\<pseudo_type_desc_to_pseudo_type_info\>/;'q;"	kind:pred	file:
pseudo_type_desc_to_rep	type_desc.m	/^:- func pseudo_type_desc_to_rep(pseudo_type_desc) = pseudo_type_rep.$/;kq|/^\<pseudo_type_desc_to_rep\>/;'q;"	kind:func
pseudo_type_descs_from_type_infos	erlang_rtti_implementation.m	/^:- func pseudo_type_descs_from_type_infos(list(type_info)) =$/;kq|/^\<pseudo_type_descs_from_type_infos\>/;'q;"	kind:func	file:
pseudo_type_info	erlang_rtti_implementation.m	/^    --->    pseudo_type_info.$/;kq|-;/\<pseudo_type_info\>/;'q;"	kind:cons	file:
pseudo_type_info	erlang_rtti_implementation.m	/^    ;       pseudo_type_info(pseudo_type_info).$/;kq|-;/\<pseudo_type_info\>/;'q;"	kind:cons	file:
pseudo_type_info	erlang_rtti_implementation.m	/^:- type pseudo_type_info$/;kq|-;/\<pseudo_type_info\>/;'q;"	kind:type	file:
pseudo_type_info	rtti_implementation.m	/^:- type pseudo_type_info ---> pseudo_type_info(int).$/;kq|-;/\<pseudo_type_info\>/;'q;"	kind:cons	file:
pseudo_type_info	rtti_implementation.m	/^:- type pseudo_type_info ---> pseudo_type_info(int).$/;kq|-;/\<pseudo_type_info\>/;'q;"	kind:type	file:
pseudo_type_info_index	erlang_rtti_implementation.m	/^:- func pseudo_type_info_index(int, T) = maybe_pseudo_type_info.$/;kq|/^\<pseudo_type_info_index\>/;'q;"	kind:func	file:
pseudo_type_info_is_variable	rtti_implementation.m	/^:- pred pseudo_type_info_is_variable(pseudo_type_info::in, int::out)$/;kq|/^\<pseudo_type_info_is_variable\>/;'q;"	kind:pred	file:
pseudo_type_info_thunk	erlang_rtti_implementation.m	/^    --->    pseudo_type_info_thunk.$/;kq|-;/\<pseudo_type_info_thunk\>/;'q;"	kind:cons	file:
pseudo_type_info_thunk	erlang_rtti_implementation.m	/^:- type pseudo_type_info_thunk$/;kq|-;/\<pseudo_type_info_thunk\>/;'q;"	kind:type	file:
pseudo_type_rep	type_desc.m	/^:- type pseudo_type_rep$/;kq|-;/\<pseudo_type_rep\>/;'q;"	kind:type
ptag_entry	rtti_implementation.m	/^:- type ptag_entry ---> ptag_entry(c_pointer).$/;kq|-;/\<ptag_entry\>/;'q;"	kind:cons	file:
ptag_entry	rtti_implementation.m	/^:- type ptag_entry ---> ptag_entry(c_pointer).$/;kq|-;/\<ptag_entry\>/;'q;"	kind:type	file:
ptag_index	rtti_implementation.m	/^:- func ptag_index(int, type_layout) = ptag_entry.$/;kq|/^\<ptag_index\>/;'q;"	kind:func	file:
pti_info	erlang_rtti_implementation.m	/^:- type pti_info(T) == maybe({erlang_du_functor, T}).$/;kq|-;/\<pti_info\>/;'q;"	kind:type	file:
public	term_to_xml.m	/^    --->    public(string)                  % Formal Public Identifier (FPI)$/;kq|-;/\<public\>/;'q;"	kind:cons
public_system	term_to_xml.m	/^    ;       public_system(string, string)   % FPI, URL$/;kq|-;/\<public_system\>/;'q;"	kind:cons
punct	parsing_utils.m	/^:- pred punct(string::in, src::in, unit::out, ps::in, ps::out) is semidet.$/;kq|/^\<punct\>/;'q;"	kind:pred
push	stack.m	/^:- func stack.push(stack(T), T) = stack(T).$/;kq|/^\<stack.push\>/;'q;"	kind:func
push	stack.m	/^:- pred stack.push(T::in, stack(T)::in, stack(T)::out) is det.$/;kq|/^\<stack.push\>/;'q;"	kind:pred
push_list	stack.m	/^:- func stack.push_list(stack(T), list(T)) = stack(T).$/;kq|/^\<stack.push_list\>/;'q;"	kind:func
push_list	stack.m	/^:- pred stack.push_list(list(T)::in, stack(T)::in, stack(T)::out) is det.$/;kq|/^\<stack.push_list\>/;'q;"	kind:pred
put	io.m	/^    pred(put\/4) is io.write_bitmap$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	io.m	/^    pred(put\/4) is io.write_byte$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	io.m	/^    pred(put\/4) is io.write_char$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	io.m	/^    pred(put\/4) is io.write_float$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	io.m	/^    pred(put\/4) is io.write_int$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	io.m	/^    pred(put\/4) is io.write_string$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	io.m	/^    pred(put\/4) is stream.string_writer.write_univ$/;kq|-;/\<put\>/;'q;"	kind:tcim	file:
put	queue.m	/^:- func queue.put(queue(T), T) = queue(T).$/;kq|/^\<queue.put\>/;'q;"	kind:func
put	queue.m	/^:- pred queue.put(T::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.put\>/;'q;"	kind:pred
put	stream.m	/^    pred put(Stream::in, Unit::in, State::di, State::uo) is det$/;kq|-;/\<put\>/;'q;"	kind:tcm
put	thread.channel.m	/^:- pred channel.put(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.put\>/;'q;"	kind:pred
put	thread.mvar.m	/^:- pred mvar.put(mvar(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<mvar.put\>/;'q;"	kind:pred
put_bit	bit_buffer.write.m	/^:- pred put_bit(bool, write_buffer(Stream, State), write_buffer(Stream, State))$/;kq|/^\<put_bit\>/;'q;"	kind:pred
put_bitmap	bit_buffer.write.m	/^:- pred put_bitmap(bitmap, bit_index, num_bits,$/;kq|/^\<put_bitmap\>/;'q;"	kind:pred
put_bitmap	bit_buffer.write.m	/^:- pred put_bitmap(bitmap, write_buffer(Stream, State),$/;kq|/^\<put_bitmap\>/;'q;"	kind:pred
put_bitmap_2	bit_buffer.write.m	/^:- pred put_bitmap_2(bitmap, bit_index, num_bits,$/;kq|/^\<put_bitmap_2\>/;'q;"	kind:pred
put_bits	bit_buffer.write.m	/^:- pred put_bits(word, num_bits, write_buffer(Stream, State),$/;kq|/^\<put_bits\>/;'q;"	kind:pred
put_byte	bit_buffer.write.m	/^:- pred put_byte(word, write_buffer(Stream, State),$/;kq|/^\<put_byte\>/;'q;"	kind:pred
put_char	stream.string_writer.m	/^:- pred put_char(Stream::in, char::in, State::di, State::uo) is det$/;kq|/^\<put_char\>/;'q;"	kind:pred
put_float	stream.string_writer.m	/^:- pred put_float(Stream::in, float::in, State::di, State::uo) is det$/;kq|/^\<put_float\>/;'q;"	kind:pred
put_int	stream.string_writer.m	/^:- pred put_int(Stream::in, int::in, State::di, State::uo) is det$/;kq|/^\<put_int\>/;'q;"	kind:pred
put_list	queue.m	/^:- func queue.put_list(queue(T), list(T)) = queue(T).$/;kq|/^\<queue.put_list\>/;'q;"	kind:func
put_list	queue.m	/^:- pred queue.put_list(list(T)::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.put_list\>/;'q;"	kind:pred
put_list	stream.m	/^:- pred put_list(Stream, pred(Stream, T, State, State),$/;kq|/^\<put_list\>/;'q;"	kind:pred
put_list_2	queue.m	/^:- pred queue.put_list_2(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<queue.put_list_2\>/;'q;"	kind:pred	file:
put_list_on_front	queue.m	/^:- func queue.put_list_on_front(queue(T), list(T)) = queue(T).$/;kq|/^\<queue.put_list_on_front\>/;'q;"	kind:func
put_list_on_front	queue.m	/^:- pred queue.put_list_on_front(list(T)::in, queue(T)::in, queue(T)::out)$/;kq|/^\<queue.put_list_on_front\>/;'q;"	kind:pred
put_on_front	queue.m	/^:- func queue.put_on_front(queue(T), T) = queue(T).$/;kq|/^\<queue.put_on_front\>/;'q;"	kind:func
put_on_front	queue.m	/^:- pred queue.put_on_front(T::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.put_on_front\>/;'q;"	kind:pred
putback	io.m	/^:- instance stream.putback(io.binary_input_stream, int, io, io.error)$/;kq|-;/\<putback\>/;'q;"	kind:tci	file:
putback	io.m	/^:- instance stream.putback(io.input_stream, char, io, io.error) where$/;kq|-;/\<putback\>/;'q;"	kind:tci	file:
putback	stream.m	/^:- typeclass stream.putback(Stream, Unit, State, Error)$/;kq|-;/\<putback\>/;'q;"	kind:tc
putback_byte	io.m	/^:- pred io.putback_byte(int::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_byte\>/;'q;"	kind:pred
putback_byte	io.m	/^:- pred io.putback_byte(io.binary_input_stream::in, int::in,$/;kq|/^\<io.putback_byte\>/;'q;"	kind:pred
putback_byte_2	io.m	/^:- pred io.putback_byte_2(io.stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_byte_2\>/;'q;"	kind:pred	file:
putback_char	io.m	/^:- pred io.putback_char(char::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_char\>/;'q;"	kind:pred
putback_char	io.m	/^:- pred io.putback_char(io.input_stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_char\>/;'q;"	kind:pred
putback_char_2	io.m	/^:- pred io.putback_char_2(io.stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.putback_char_2\>/;'q;"	kind:pred	file:
putenv	io.m	/^:- impure pred io.putenv(string::in) is semidet.$/;kq|/^\<io.putenv\>/;'q;"	kind:pred	file:
quadratic_roots	math.m	/^:- type math.quadratic_roots$/;kq|-;/\<quadratic_roots\>/;'q;"	kind:type
qualified	erlang_rtti_implementation.m	/^    ;       qualified(sym_name, list(char)).$/;kq|-;/\<qualified\>/;'q;"	kind:cons	file:
queue	queue.m	/^    --->    queue($/;kq|-;/\<queue\>/;'q;"	kind:cons	file:
queue	queue.m	/^:- type queue(T)$/;kq|-;/\<queue\>/;'q;"	kind:type	file:
queue.delete_all	queue.m	/^:- func queue.delete_all(queue(T), T) = queue(T).$/;kq|/^\<queue.delete_all\>/;'q;"	kind:func
queue.delete_all	queue.m	/^:- pred queue.delete_all(T::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.delete_all\>/;'q;"	kind:pred
queue.equal	queue.m	/^:- pred queue.equal(queue(T)::in, queue(T)::in) is semidet.$/;kq|/^\<queue.equal\>/;'q;"	kind:pred
queue.first	queue.m	/^:- pred queue.first(queue(T)::in, T::out) is semidet.$/;kq|/^\<queue.first\>/;'q;"	kind:pred
queue.from_list	queue.m	/^:- func queue.from_list(list(T)) = queue(T).$/;kq|/^\<queue.from_list\>/;'q;"	kind:func
queue.get	queue.m	/^:- pred queue.get(T::out, queue(T)::in, queue(T)::out) is semidet.$/;kq|/^\<queue.get\>/;'q;"	kind:pred
queue.get_from_back	queue.m	/^:- pred queue.get_from_back(T::out, queue(T)::in, queue(T)::out) is semidet.$/;kq|/^\<queue.get_from_back\>/;'q;"	kind:pred
queue.init	queue.m	/^:- func queue.init = queue(T).$/;kq|/^\<queue.init\>/;'q;"	kind:func
queue.init	queue.m	/^:- pred queue.init(queue(T)::out) is det.$/;kq|/^\<queue.init\>/;'q;"	kind:pred
queue.is_empty	queue.m	/^:- pred queue.is_empty(queue(T)::in) is semidet.$/;kq|/^\<queue.is_empty\>/;'q;"	kind:pred
queue.is_full	queue.m	/^:- pred queue.is_full(queue(T)::in) is semidet.$/;kq|/^\<queue.is_full\>/;'q;"	kind:pred
queue.length	queue.m	/^:- func queue.length(queue(T)) = int.$/;kq|/^\<queue.length\>/;'q;"	kind:func
queue.length	queue.m	/^:- pred queue.length(queue(T)::in, int::out) is det.$/;kq|/^\<queue.length\>/;'q;"	kind:pred
queue.list_to_queue	queue.m	/^:- func queue.list_to_queue(list(T)) = queue(T).$/;kq|/^\<queue.list_to_queue\>/;'q;"	kind:func
queue.list_to_queue	queue.m	/^:- pred queue.list_to_queue(list(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.list_to_queue\>/;'q;"	kind:pred
queue.off_list	queue.m	/^                off_list :: list(T)$/;kq|-;/\<queue.off_list\>/;'q;"	kind:fld	file:
queue.on_list	queue.m	/^                on_list  :: list(T),$/;kq|-;/\<queue.on_list\>/;'q;"	kind:fld	file:
queue.put	queue.m	/^:- func queue.put(queue(T), T) = queue(T).$/;kq|/^\<queue.put\>/;'q;"	kind:func
queue.put	queue.m	/^:- pred queue.put(T::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.put\>/;'q;"	kind:pred
queue.put_list	queue.m	/^:- func queue.put_list(queue(T), list(T)) = queue(T).$/;kq|/^\<queue.put_list\>/;'q;"	kind:func
queue.put_list	queue.m	/^:- pred queue.put_list(list(T)::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.put_list\>/;'q;"	kind:pred
queue.put_list_2	queue.m	/^:- pred queue.put_list_2(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<queue.put_list_2\>/;'q;"	kind:pred	file:
queue.put_list_on_front	queue.m	/^:- func queue.put_list_on_front(queue(T), list(T)) = queue(T).$/;kq|/^\<queue.put_list_on_front\>/;'q;"	kind:func
queue.put_list_on_front	queue.m	/^:- pred queue.put_list_on_front(list(T)::in, queue(T)::in, queue(T)::out)$/;kq|/^\<queue.put_list_on_front\>/;'q;"	kind:pred
queue.put_on_front	queue.m	/^:- func queue.put_on_front(queue(T), T) = queue(T).$/;kq|/^\<queue.put_on_front\>/;'q;"	kind:func
queue.put_on_front	queue.m	/^:- pred queue.put_on_front(T::in, queue(T)::in, queue(T)::out) is det.$/;kq|/^\<queue.put_on_front\>/;'q;"	kind:pred
queue.to_list	queue.m	/^:- func queue.to_list(queue(T)) = list(T).$/;kq|/^\<queue.to_list\>/;'q;"	kind:func
quot_bits_per_int	int.m	/^:- func int.quot_bits_per_int(int) = int.$/;kq|/^\<int.quot_bits_per_int\>/;'q;"	kind:func
quot_rem	integer.m	/^:- pred quot_rem(integer::in, integer::in, integer::out, integer::out) is det.$/;kq|/^\<quot_rem\>/;'q;"	kind:pred	file:
quot_rem_2	integer.m	/^:- pred quot_rem_2(integer::in, integer::in, integer::in, integer::out,$/;kq|/^\<quot_rem_2\>/;'q;"	kind:pred	file:
quote_atom	term_io.m	/^:- pred term_io.quote_atom(Stream::in, string::in,$/;kq|/^\<term_io.quote_atom\>/;'q;"	kind:pred
quote_atom	term_io.m	/^:- pred term_io.quote_atom(string::in, io::di, io::uo) is det.$/;kq|/^\<term_io.quote_atom\>/;'q;"	kind:pred
quote_atom_agt	term_io.m	/^:- pred term_io.quote_atom_agt(Stream::in, string::in,$/;kq|/^\<term_io.quote_atom_agt\>/;'q;"	kind:pred
quote_atom_agt	term_io.m	/^:- pred term_io.quote_atom_agt(string::in, adjacent_to_graphic_token::in,$/;kq|/^\<term_io.quote_atom_agt\>/;'q;"	kind:pred
quote_char	term_io.m	/^:- pred term_io.quote_char(Stream::in, char::in,$/;kq|/^\<term_io.quote_char\>/;'q;"	kind:pred
quote_char	term_io.m	/^:- pred term_io.quote_char(char::in, io::di, io::uo) is det.$/;kq|/^\<term_io.quote_char\>/;'q;"	kind:pred
quote_string	term_io.m	/^:- pred term_io.quote_string(Stream::in, string::in,$/;kq|/^\<term_io.quote_string\>/;'q;"	kind:pred
quote_string	term_io.m	/^:- pred term_io.quote_string(string::in, io::di, io::uo) is det.$/;kq|/^\<term_io.quote_string\>/;'q;"	kind:pred
quoted_atom	term_io.m	/^:- func term_io.quoted_atom(string) = string.$/;kq|/^\<term_io.quoted_atom\>/;'q;"	kind:func
quoted_atom_agt	term_io.m	/^:- func term_io.quoted_atom_agt(string, adjacent_to_graphic_token) = string.$/;kq|/^\<term_io.quoted_atom_agt\>/;'q;"	kind:func
quoted_char	term_io.m	/^:- func term_io.quoted_char(char) = string.$/;kq|/^\<term_io.quoted_char\>/;'q;"	kind:func
quoted_string	term_io.m	/^:- func term_io.quoted_string(string) = string.$/;kq|/^\<term_io.quoted_string\>/;'q;"	kind:func
quotient_bits_per_byte_with_rem_zero	bitmap.m	/^:- func quotient_bits_per_byte_with_rem_zero(string, int) = int is det.$/;kq|/^\<quotient_bits_per_byte_with_rem_zero\>/;'q;"	kind:func	file:
r	bit_buffer.read.m	/^    ---> read_buffer(bit_buffer :: bit_buffer(Stream, State, Error)).$/;kq|-;/\<r\>/;'q;"	kind:fld	file:
r	bit_buffer.write.m	/^        ---> write_buffer(bit_buffer :: bit_buffer(Stream, State)).$/;kq|-;/\<r\>/;'q;"	kind:fld
r	rational.m	/^    --->    r(integer, integer).$/;kq|-;/\<r\>/;'q;"	kind:cons	file:
ra_list	bt_array.m	/^:- type ra_list(T)$/;kq|-;/\<ra_list\>/;'q;"	kind:type	file:
ra_list_bintree	bt_array.m	/^:- type ra_list_bintree(T)$/;kq|-;/\<ra_list_bintree\>/;'q;"	kind:type	file:
ra_list_bintree_lookup	bt_array.m	/^:- pred ra_list_bintree_lookup(int::in, ra_list_bintree(T)::in, int::in,$/;kq|/^\<ra_list_bintree_lookup\>/;'q;"	kind:pred	file:
ra_list_bintree_update	bt_array.m	/^:- pred ra_list_bintree_update(int::in, ra_list_bintree(T)::in, int::in, T::in,$/;kq|/^\<ra_list_bintree_update\>/;'q;"	kind:pred	file:
ra_list_cons	bt_array.m	/^:- pred ra_list_cons(T::in, ra_list(T)::in, ra_list(T)::out) is det.$/;kq|/^\<ra_list_cons\>/;'q;"	kind:pred	file:
ra_list_drop	bt_array.m	/^:- pred ra_list_drop(int::in, ra_list(T)::in, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_drop\>/;'q;"	kind:pred	file:
ra_list_head	bt_array.m	/^:- pred ra_list_head(ra_list(T)::in, T::out) is semidet.$/;kq|/^\<ra_list_head\>/;'q;"	kind:pred	file:
ra_list_head_tail	bt_array.m	/^:- pred ra_list_head_tail(ra_list(T)::in, T::out, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_head_tail\>/;'q;"	kind:pred	file:
ra_list_lookup	bt_array.m	/^:- pred ra_list_lookup(int::in, ra_list(T)::in, T::out) is semidet.$/;kq|/^\<ra_list_lookup\>/;'q;"	kind:pred	file:
ra_list_lookup_2	bt_array.m	/^:- pred ra_list_lookup_2(int::in, ra_list(T)::in, T::out) is semidet.$/;kq|/^\<ra_list_lookup_2\>/;'q;"	kind:pred	file:
ra_list_nil	bt_array.m	/^:- pred ra_list_nil(ra_list(T)::uo) is det.$/;kq|/^\<ra_list_nil\>/;'q;"	kind:pred	file:
ra_list_slow_drop	bt_array.m	/^:- pred ra_list_slow_drop(int::in, ra_list(T)::in, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_slow_drop\>/;'q;"	kind:pred	file:
ra_list_tail	bt_array.m	/^:- pred ra_list_tail(ra_list(T)::in, ra_list(T)::out) is semidet.$/;kq|/^\<ra_list_tail\>/;'q;"	kind:pred	file:
ra_list_update	bt_array.m	/^:- pred ra_list_update(ra_list(T)::in, int::in, T::in, ra_list(T)::out)$/;kq|/^\<ra_list_update\>/;'q;"	kind:pred	file:
ra_list_update_2	bt_array.m	/^:- pred ra_list_update_2(ra_list(T)::in, int::in, T::in, ra_list(T)::out)$/;kq|/^\<ra_list_update_2\>/;'q;"	kind:pred	file:
radix	float.m	/^:- func float.radix = int.$/;kq|/^\<float.radix\>/;'q;"	kind:func
raise_interiors_to_level	tree_bitset.m	/^:- pred raise_interiors_to_level(int::in, int::in,$/;kq|/^\<raise_interiors_to_level\>/;'q;"	kind:pred	file:
raise_leaf_to_level	tree_bitset.m	/^:- pred raise_leaf_to_level(int::in, leaf_node::in, interior_node::out) is det.$/;kq|/^\<raise_leaf_to_level\>/;'q;"	kind:pred	file:
raise_leaves_to_interior	tree_bitset.m	/^:- pred raise_leaves_to_interior(leaf_node::in, list(leaf_node)::in,$/;kq|/^\<raise_leaves_to_interior\>/;'q;"	kind:pred	file:
raise_leaves_to_level	tree_bitset.m	/^:- pred raise_leaves_to_level(int::in, leaf_node::in, list(leaf_node)::in,$/;kq|/^\<raise_leaves_to_level\>/;'q;"	kind:pred	file:
raise_one_interior_to_level	tree_bitset.m	/^:- pred raise_one_interior_to_level(int::in, int::in,$/;kq|/^\<raise_one_interior_to_level\>/;'q;"	kind:pred	file:
raise_to_common_level	tree_bitset.m	/^:- pred raise_to_common_level(int::in,$/;kq|/^\<raise_to_common_level\>/;'q;"	kind:pred	file:
randcount	random.m	/^:- pred random.randcount(int, random.supply, random.supply).$/;kq|/^\<random.randcount\>/;'q;"	kind:pred
randmax	random.m	/^:- pred random.randmax(int, random.supply, random.supply).$/;kq|/^\<random.randmax\>/;'q;"	kind:pred
random	random.m	/^:- pred random.random(int, int, int, random.supply, random.supply).$/;kq|/^\<random.random\>/;'q;"	kind:pred
random	random.m	/^:- pred random.random(int, random.supply, random.supply).$/;kq|/^\<random.random\>/;'q;"	kind:pred
random.init	random.m	/^:- pred random.init(int::in, random.supply::uo) is det.$/;kq|/^\<random.init\>/;'q;"	kind:pred
random.params	random.m	/^:- pred random.params(int::out, int::out, int::out) is det.	% a, c, m$/;kq|/^\<random.params\>/;'q;"	kind:pred	file:
random.perform_sampling	random.m	/^:- pred perform_sampling(int, array(T), list(T), list(T),$/;kq|/^\<perform_sampling\>/;'q;"	kind:pred	file:
random.permutation	random.m	/^:- pred random.permutation(list(T), list(T), random.supply, random.supply).$/;kq|/^\<random.permutation\>/;'q;"	kind:pred
random.randcount	random.m	/^:- pred random.randcount(int, random.supply, random.supply).$/;kq|/^\<random.randcount\>/;'q;"	kind:pred
random.randmax	random.m	/^:- pred random.randmax(int, random.supply, random.supply).$/;kq|/^\<random.randmax\>/;'q;"	kind:pred
random.random	random.m	/^:- pred random.random(int, int, int, random.supply, random.supply).$/;kq|/^\<random.random\>/;'q;"	kind:pred
random.random	random.m	/^:- pred random.random(int, random.supply, random.supply).$/;kq|/^\<random.random\>/;'q;"	kind:pred
random.rs	random.m	/^    --->    rs(int). % I(j)$/;kq|-;/\<random.rs\>/;'q;"	kind:cons	file:
random.supply	random.m	/^:- type random.supply$/;kq|-;/\<random.supply\>/;'q;"	kind:type	file:
random.test	random.m	/^:- pred random.test(int::in, int::in, list(int)::out, int::out) is det.$/;kq|/^\<random.test\>/;'q;"	kind:pred
random.test_2	random.m	/^:- pred random.test_2(int, list(int), random.supply, random.supply).$/;kq|/^\<random.test_2\>/;'q;"	kind:pred	file:
random_permutation	array.m	/^:- pred array.random_permutation(array(T)::array_di, array(T)::array_uo,$/;kq|/^\<array.random_permutation\>/;'q;"	kind:pred
range_of_parent_node	tree_bitset.m	/^:- pred range_of_parent_node(int::in, int::in, int::out, int::out) is det.$/;kq|/^\<range_of_parent_node\>/;'q;"	kind:pred	file:
rational	rational.m	/^:- func rational * rational = rational.$/;kq|/^\<rational\>/;'q;"	kind:func
rational	rational.m	/^:- func rational + rational = rational.$/;kq|/^\<rational\>/;'q;"	kind:func
rational	rational.m	/^:- func rational - rational = rational.$/;kq|/^\<rational\>/;'q;"	kind:func
rational	rational.m	/^:- func rational \/ rational = rational.$/;kq|/^\<rational\>/;'q;"	kind:func
rational	rational.m	/^:- func rational.rational(int) = rational.$/;kq|/^\<rational.rational\>/;'q;"	kind:func
rational	rational.m	/^:- func rational.rational(int, int) = rational.$/;kq|/^\<rational.rational\>/;'q;"	kind:func
rational	rational.m	/^:- type rational$/;kq|-;/\<rational\>/;'q;"	kind:type	file:
rational.'+'	rational.m	/^:- func '+'(rational) = rational.$/;kq|/^\<'+'\>/;'q;"	kind:func
rational.'-'	rational.m	/^:- func '-'(rational) = rational.$/;kq|/^\<'-'\>/;'q;"	kind:func
rational.'<'	rational.m	/^:- pred '<'(rational::in, rational::in) is semidet.$/;kq|/^\<'<'\>/;'q;"	kind:pred
rational.'=<'	rational.m	/^:- pred '=<'(rational::in, rational::in) is semidet.$/;kq|/^\<'=<'\>/;'q;"	kind:pred
rational.'>'	rational.m	/^:- pred '>'(rational::in, rational::in) is semidet.$/;kq|/^\<'>'\>/;'q;"	kind:pred
rational.'>='	rational.m	/^:- pred '>='(rational::in, rational::in) is semidet.$/;kq|/^\<'>='\>/;'q;"	kind:pred
rational.abs	rational.m	/^:- func rational.abs(rational) = rational.$/;kq|/^\<rational.abs\>/;'q;"	kind:func
rational.cmp	rational.m	/^:- func cmp(rational, rational) = comparison_result.$/;kq|/^\<cmp\>/;'q;"	kind:func	file:
rational.denom	rational.m	/^:- func rational.denom(rational) = integer.$/;kq|/^\<rational.denom\>/;'q;"	kind:func
rational.from_integer	rational.m	/^:- func rational.from_integer(integer) = rational.$/;kq|/^\<rational.from_integer\>/;'q;"	kind:func
rational.from_integers	rational.m	/^:- func rational.from_integers(integer, integer) = rational.$/;kq|/^\<rational.from_integers\>/;'q;"	kind:func
rational.gcd	rational.m	/^:- func gcd(integer, integer) = integer.$/;kq|/^\<gcd\>/;'q;"	kind:func	file:
rational.gcd_2	rational.m	/^:- func gcd_2(integer, integer) = integer.$/;kq|/^\<gcd_2\>/;'q;"	kind:func	file:
rational.is_negative	rational.m	/^:- pred is_negative(rational::in) is semidet.$/;kq|/^\<is_negative\>/;'q;"	kind:pred	file:
rational.is_zero	rational.m	/^:- pred is_zero(rational::in) is semidet.$/;kq|/^\<is_zero\>/;'q;"	kind:pred	file:
rational.lcm	rational.m	/^:- func lcm(integer, integer) = integer.$/;kq|/^\<lcm\>/;'q;"	kind:func	file:
rational.numer	rational.m	/^:- func rational.numer(rational) = integer.$/;kq|/^\<rational.numer\>/;'q;"	kind:func
rational.one	rational.m	/^:- func rational.one = rational.$/;kq|/^\<rational.one\>/;'q;"	kind:func
rational.r	rational.m	/^    --->    r(integer, integer).$/;kq|-;/\<rational.r\>/;'q;"	kind:cons	file:
rational.rational	rational.m	/^:- func rational.rational(int) = rational.$/;kq|/^\<rational.rational\>/;'q;"	kind:func
rational.rational	rational.m	/^:- func rational.rational(int, int) = rational.$/;kq|/^\<rational.rational\>/;'q;"	kind:func
rational.reciprocal	rational.m	/^:- func rational.reciprocal(rational) = rational.$/;kq|/^\<rational.reciprocal\>/;'q;"	kind:func
rational.signum	rational.m	/^:- func signum(integer) = integer.$/;kq|/^\<signum\>/;'q;"	kind:func	file:
rational.zero	rational.m	/^:- func rational.zero = rational.$/;kq|/^\<rational.zero\>/;'q;"	kind:func
rational_norm	rational.m	/^:- func rational_norm(integer, integer) = rational.$/;kq|/^\<rational_norm\>/;'q;"	kind:func	file:
raw	term_to_xml.m	/^    ;       raw(string).$/;kq|-;/\<raw\>/;'q;"	kind:cons
rbtree	rbtree.m	/^:- type rbtree(K,V)$/;kq|-;/\<rbtree\>/;'q;"	kind:type	file:
rbtree.assoc_list_to_rbtree	rbtree.m	/^:- func rbtree.assoc_list_to_rbtree(assoc_list(K, V)) = rbtree(K, V).$/;kq|/^\<rbtree.assoc_list_to_rbtree\>/;'q;"	kind:func
rbtree.assoc_list_to_rbtree	rbtree.m	/^:- pred rbtree.assoc_list_to_rbtree(assoc_list(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.assoc_list_to_rbtree\>/;'q;"	kind:pred
rbtree.black	rbtree.m	/^    ;       black(K, V, rbtree(K, V), rbtree(K, V)).$/;kq|-;/\<rbtree.black\>/;'q;"	kind:cons	file:
rbtree.count	rbtree.m	/^:- func rbtree.count(rbtree(K, V)) = int.$/;kq|/^\<rbtree.count\>/;'q;"	kind:func
rbtree.count	rbtree.m	/^:- pred rbtree.count(rbtree(K, V)::in, int::out) is det.$/;kq|/^\<rbtree.count\>/;'q;"	kind:pred
rbtree.delete	rbtree.m	/^:- func rbtree.delete(rbtree(K, V), K) = rbtree(K, V).$/;kq|/^\<rbtree.delete\>/;'q;"	kind:func
rbtree.delete	rbtree.m	/^:- pred rbtree.delete(K::in, rbtree(K, V)::in, rbtree(K, V)::out) is det.$/;kq|/^\<rbtree.delete\>/;'q;"	kind:pred
rbtree.delete_2	rbtree.m	/^:- pred rbtree.delete_2(rbtree(K, V), K, bool, maybe(V), rbtree(K, V)).$/;kq|/^\<rbtree.delete_2\>/;'q;"	kind:pred	file:
rbtree.empty	rbtree.m	/^    --->    empty$/;kq|-;/\<rbtree.empty\>/;'q;"	kind:cons	file:
rbtree.foldl	rbtree.m	/^:- func rbtree.foldl(func(K, V, T) = T, rbtree(K, V), T) = T.$/;kq|/^\<rbtree.foldl\>/;'q;"	kind:func
rbtree.foldl	rbtree.m	/^:- pred rbtree.foldl(pred(K, V, T, T), rbtree(K, V), T, T).$/;kq|/^\<rbtree.foldl\>/;'q;"	kind:pred
rbtree.foldl2	rbtree.m	/^:- pred rbtree.foldl2(pred(K, V, T, T, U, U), rbtree(K, V), T, T, U, U).$/;kq|/^\<rbtree.foldl2\>/;'q;"	kind:pred
rbtree.foldl3	rbtree.m	/^:- pred rbtree.foldl3(pred(K, V, T, T, U, U, W, W), rbtree(K, V),$/;kq|/^\<rbtree.foldl3\>/;'q;"	kind:pred
rbtree.from_assoc_list	rbtree.m	/^:- func rbtree.from_assoc_list(assoc_list(K, V)) = rbtree(K, V).$/;kq|/^\<rbtree.from_assoc_list\>/;'q;"	kind:func
rbtree.init	rbtree.m	/^:- func rbtree.init = rbtree(K, V).$/;kq|/^\<rbtree.init\>/;'q;"	kind:func
rbtree.init	rbtree.m	/^:- pred rbtree.init(rbtree(K, V)::uo) is det.$/;kq|/^\<rbtree.init\>/;'q;"	kind:pred
rbtree.insert	rbtree.m	/^:- pred rbtree.insert(K::in, V::in, rbtree(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.insert\>/;'q;"	kind:pred
rbtree.insert_2	rbtree.m	/^:- pred rbtree.insert_2(rbtree(K, V)::in, K::in, V::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.insert_2\>/;'q;"	kind:pred	file:
rbtree.insert_duplicate	rbtree.m	/^:- func rbtree.insert_duplicate(rbtree(K, V), K, V) = rbtree(K, V).$/;kq|/^\<rbtree.insert_duplicate\>/;'q;"	kind:func
rbtree.insert_duplicate	rbtree.m	/^:- pred rbtree.insert_duplicate(K::in, V::in,$/;kq|/^\<rbtree.insert_duplicate\>/;'q;"	kind:pred
rbtree.insert_duplicate_2	rbtree.m	/^:- pred rbtree.insert_duplicate_2(rbtree(K, V), K, V, rbtree(K, V)).$/;kq|/^\<rbtree.insert_duplicate_2\>/;'q;"	kind:pred	file:
rbtree.is_empty	rbtree.m	/^:- pred rbtree.is_empty(rbtree(K, V)::in) is semidet.$/;kq|/^\<rbtree.is_empty\>/;'q;"	kind:pred
rbtree.keys	rbtree.m	/^:- func rbtree.keys(rbtree(K, V)) = list(K).$/;kq|/^\<rbtree.keys\>/;'q;"	kind:func
rbtree.keys	rbtree.m	/^:- pred rbtree.keys(rbtree(K, V)::in, list(K)::out) is det.$/;kq|/^\<rbtree.keys\>/;'q;"	kind:pred
rbtree.lookup	rbtree.m	/^:- func rbtree.lookup(rbtree(K, V), K) = V.$/;kq|/^\<rbtree.lookup\>/;'q;"	kind:func
rbtree.lookup	rbtree.m	/^:- pred rbtree.lookup(rbtree(K, V)::in, K::in, V::out) is det.$/;kq|/^\<rbtree.lookup\>/;'q;"	kind:pred
rbtree.lower_bound_lookup	rbtree.m	/^:- pred rbtree.lower_bound_lookup(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.lower_bound_lookup\>/;'q;"	kind:pred
rbtree.lower_bound_search	rbtree.m	/^:- pred rbtree.lower_bound_search(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.lower_bound_search\>/;'q;"	kind:pred
rbtree.map_values	rbtree.m	/^:- func rbtree.map_values(func(K, V) = W, rbtree(K, V)) = rbtree(K, W).$/;kq|/^\<rbtree.map_values\>/;'q;"	kind:func
rbtree.map_values	rbtree.m	/^:- pred rbtree.map_values(pred(K, V, W), rbtree(K, V), rbtree(K, W)).$/;kq|/^\<rbtree.map_values\>/;'q;"	kind:pred
rbtree.member	rbtree.m	/^:- pred rbtree.member(rbtree(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<rbtree.member\>/;'q;"	kind:pred
rbtree.rbtree_to_assoc_list	rbtree.m	/^:- func rbtree.rbtree_to_assoc_list(rbtree(K, V)) = assoc_list(K, V).$/;kq|/^\<rbtree.rbtree_to_assoc_list\>/;'q;"	kind:func
rbtree.rbtree_to_assoc_list	rbtree.m	/^:- pred rbtree.rbtree_to_assoc_list(rbtree(K, V)::in, assoc_list(K, V)::out)$/;kq|/^\<rbtree.rbtree_to_assoc_list\>/;'q;"	kind:pred
rbtree.red	rbtree.m	/^    ;       red(K, V, rbtree(K,V), rbtree(K,V))$/;kq|-;/\<rbtree.red\>/;'q;"	kind:cons	file:
rbtree.remove	rbtree.m	/^:- pred rbtree.remove(K::in, V::out, rbtree(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.remove\>/;'q;"	kind:pred
rbtree.remove_largest	rbtree.m	/^:- pred rbtree.remove_largest(K::out, V::out,$/;kq|/^\<rbtree.remove_largest\>/;'q;"	kind:pred
rbtree.remove_smallest	rbtree.m	/^:- pred rbtree.remove_smallest(K::out, V::out,$/;kq|/^\<rbtree.remove_smallest\>/;'q;"	kind:pred
rbtree.search	rbtree.m	/^:- pred rbtree.search(rbtree(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<rbtree.search\>/;'q;"	kind:pred
rbtree.set	rbtree.m	/^:- func rbtree.set(rbtree(K, V), K, V) = rbtree(K, V).$/;kq|/^\<rbtree.set\>/;'q;"	kind:func
rbtree.set	rbtree.m	/^:- pred rbtree.set(K::in, V::in, rbtree(K, V)::in, rbtree(K, V)::out) is det.$/;kq|/^\<rbtree.set\>/;'q;"	kind:pred
rbtree.set_2	rbtree.m	/^:- pred rbtree.set_2(rbtree(K, V), K, V, rbtree(K, V)).$/;kq|/^\<rbtree.set_2\>/;'q;"	kind:pred	file:
rbtree.singleton	rbtree.m	/^:- func rbtree.singleton(K, V) = rbtree(K, V).$/;kq|/^\<rbtree.singleton\>/;'q;"	kind:func
rbtree.to_assoc_list	rbtree.m	/^:- func rbtree.to_assoc_list(rbtree(K, V)) = assoc_list(K, V).$/;kq|/^\<rbtree.to_assoc_list\>/;'q;"	kind:func
rbtree.transform_value	rbtree.m	/^:- pred rbtree.transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<rbtree.transform_value\>/;'q;"	kind:pred
rbtree.update	rbtree.m	/^:- pred rbtree.update(K::in, V::in, rbtree(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.update\>/;'q;"	kind:pred
rbtree.upper_bound_lookup	rbtree.m	/^:- pred rbtree.upper_bound_lookup(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.upper_bound_lookup\>/;'q;"	kind:pred
rbtree.upper_bound_search	rbtree.m	/^:- pred rbtree.upper_bound_search(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.upper_bound_search\>/;'q;"	kind:pred
rbtree.values	rbtree.m	/^:- func rbtree.values(rbtree(K, V)) = list(V).$/;kq|/^\<rbtree.values\>/;'q;"	kind:func
rbtree.values	rbtree.m	/^:- pred rbtree.values(rbtree(K, V)::in, list(V)::out) is det.$/;kq|/^\<rbtree.values\>/;'q;"	kind:pred
rbtree_to_assoc_list	rbtree.m	/^:- func rbtree.rbtree_to_assoc_list(rbtree(K, V)) = assoc_list(K, V).$/;kq|/^\<rbtree.rbtree_to_assoc_list\>/;'q;"	kind:func
rbtree_to_assoc_list	rbtree.m	/^:- pred rbtree.rbtree_to_assoc_list(rbtree(K, V)::in, assoc_list(K, V)::out)$/;kq|/^\<rbtree.rbtree_to_assoc_list\>/;'q;"	kind:pred
reachable_from	digraph.m	/^:- pred digraph.reachable_from(digraph(T)::in, digraph_key_set(T)::in,$/;kq|/^\<digraph.reachable_from\>/;'q;"	kind:pred	file:
read	io.m	/^    --->    read$/;kq|-;/\<read\>/;'q;"	kind:cons
read	io.m	/^:- pred io.read(io.input_stream::in, io.read_result(T)::out,$/;kq|/^\<io.read\>/;'q;"	kind:pred
read	io.m	/^:- pred io.read(io.read_result(T)::out, io::di, io::uo) is det.$/;kq|/^\<io.read\>/;'q;"	kind:pred
read	thread.mvar.m	/^:- pred mvar.read(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.read\>/;'q;"	kind:pred
read.buffer_status	bit_buffer.read.m	/^:- pred buffer_status(stream.result(Error),$/;kq|/^\<buffer_status\>/;'q;"	kind:pred
read.do_get_bits	bit_buffer.read.m	/^:- pred do_get_bits(bit_index::in, num_bits::in, word::in, word::out,$/;kq|/^\<do_get_bits\>/;'q;"	kind:pred	file:
read.do_refill_read_buffer	bit_buffer.read.m	/^:- pred do_refill_read_buffer(stream.res(Error)::out,$/;kq|/^\<do_refill_read_buffer\>/;'q;"	kind:pred	file:
read.do_set_buffer_error	bit_buffer.read.m	/^:- pred do_set_buffer_error(stream.res(Error)::in,$/;kq|/^\<do_set_buffer_error\>/;'q;"	kind:pred	file:
read.finalize	bit_buffer.read.m	/^:- pred finalize(read_buffer(Stream, State, Error), Stream, State,$/;kq|/^\<finalize\>/;'q;"	kind:pred
read.get_bit	bit_buffer.read.m	/^:- pred get_bit(stream.result(bool, Error), read_buffer(Stream, State, Error),$/;kq|/^\<get_bit\>/;'q;"	kind:pred
read.get_bitmap	bit_buffer.read.m	/^:- pred get_bitmap(bit_index, num_bits, bitmap, bitmap, num_bits,$/;kq|/^\<get_bitmap\>/;'q;"	kind:pred
read.get_bitmap	bit_buffer.read.m	/^:- pred get_bitmap(bitmap, bitmap, num_bits,$/;kq|/^\<get_bitmap\>/;'q;"	kind:pred
read.get_bits	bit_buffer.read.m	/^:- pred get_bits(bit_index, num_bits, word, word, num_bits,$/;kq|/^\<get_bits\>/;'q;"	kind:pred
read.io_read_buffer	bit_buffer.read.m	/^:- type io_read_buffer ==$/;kq|-;/\<read.io_read_buffer\>/;'q;"	kind:type
read.new	bit_buffer.read.m	/^:- func new(num_bytes, Stream, State) = read_buffer(Stream, State, Error)$/;kq|/^\<new\>/;'q;"	kind:func
read.new_bitmap_reader	bit_buffer.read.m	/^:- func new_bitmap_reader(bitmap) = read_buffer.$/;kq|/^\<new_bitmap_reader\>/;'q;"	kind:func
read.new_bitmap_reader	bit_buffer.read.m	/^:- func new_bitmap_reader(bitmap, bit_index, num_bits) = read_buffer.$/;kq|/^\<new_bitmap_reader\>/;'q;"	kind:func
read.num_bits_to_byte_boundary	bit_buffer.read.m	/^:- func num_bits_to_byte_boundary(read_buffer(_, _, _)) = num_bits.$/;kq|/^\<num_bits_to_byte_boundary\>/;'q;"	kind:func
read.num_buffered_bits	bit_buffer.read.m	/^:- func num_buffered_bits(read_buffer(_, _, _)) = num_bits.$/;kq|/^\<num_buffered_bits\>/;'q;"	kind:func
read.r	bit_buffer.read.m	/^    ---> read_buffer(bit_buffer :: bit_buffer(Stream, State, Error)).$/;kq|-;/\<read.r\>/;'q;"	kind:fld	file:
read.read_buffer	bit_buffer.read.m	/^    ---> read_buffer(bit_buffer :: bit_buffer(Stream, State, Error)).$/;kq|-;/\<read.read_buffer\>/;'q;"	kind:cons	file:
read.read_buffer	bit_buffer.read.m	/^:- type read_buffer ==$/;kq|-;/\<read.read_buffer\>/;'q;"	kind:type
read.read_buffer	bit_buffer.read.m	/^:- type read_buffer(Stream, State, Error)$/;kq|-;/\<read.read_buffer\>/;'q;"	kind:type	file:
read.read_buffer_di	bit_buffer.read.m	/^:- mode read_buffer_di == in(uniq_read_buffer).$/;kq|-;/\<read.read_buffer_di\>/;'q;"	kind:mode
read.read_buffer_ui	bit_buffer.read.m	/^:- mode read_buffer_ui == in(uniq_read_buffer).$/;kq|-;/\<read.read_buffer_ui\>/;'q;"	kind:mode
read.read_buffer_uo	bit_buffer.read.m	/^:- mode read_buffer_uo == out(uniq_read_buffer).$/;kq|-;/\<read.read_buffer_uo\>/;'q;"	kind:mode
read.read_stream	bit_buffer.read.m	/^    ---> read_stream.$/;kq|-;/\<read.read_stream\>/;'q;"	kind:cons
read.read_stream	bit_buffer.read.m	/^:- type read_stream(Stream)$/;kq|-;/\<read.read_stream\>/;'q;"	kind:type
read.recursively_get_bitmap	bit_buffer.read.m	/^:- pred recursively_get_bitmap(bit_index::in, num_bits::in,$/;kq|/^\<recursively_get_bitmap\>/;'q;"	kind:pred	file:
read.refill_read_buffer	bit_buffer.read.m	/^:- pred refill_read_buffer(stream.res(Error)::out,$/;kq|/^\<refill_read_buffer\>/;'q;"	kind:pred	file:
read.set_buffer_error	bit_buffer.read.m	/^:- pred set_buffer_error(stream.res(Error)::in,$/;kq|/^\<set_buffer_error\>/;'q;"	kind:pred	file:
read.stream.bulk_reader	bit_buffer.read.m	/^:- instance stream.bulk_reader(read_stream(Stream, Error),$/;kq|-;/\<read.stream.bulk_reader\>/;'q;"	kind:tci
read.stream.bulk_reader	bit_buffer.read.m	/^:- instance stream.bulk_reader(read_stream(Stream, Error),$/;kq|-;/\<read.stream.bulk_reader\>/;'q;"	kind:tci
read.stream.input	bit_buffer.read.m	/^:- instance stream.input(read_stream(Stream, Error),$/;kq|-;/\<read.stream.input\>/;'q;"	kind:tci
read.stream.reader	bit_buffer.read.m	/^:- instance stream.reader(read_stream(Stream, Error), bool,$/;kq|-;/\<read.stream.reader\>/;'q;"	kind:tci
read.stream.stream	bit_buffer.read.m	/^:- instance stream.stream(read_stream(Stream, Error),$/;kq|-;/\<read.stream.stream\>/;'q;"	kind:tci
read.uniq_read_buffer	bit_buffer.read.m	/^:- inst uniq_read_buffer == ground.   % XXX Should be unique.$/;kq|-;/\<read.uniq_read_buffer\>/;'q;"	kind:inst
read_binary	io.m	/^:- pred io.read_binary(io.binary_input_stream::in, io.result(T)::out,$/;kq|/^\<io.read_binary\>/;'q;"	kind:pred
read_binary	io.m	/^:- pred io.read_binary(io.result(T)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_binary\>/;'q;"	kind:pred
read_binary_file	io.m	/^:- pred io.read_binary_file(io.binary_input_stream::in,$/;kq|/^\<io.read_binary_file\>/;'q;"	kind:pred
read_binary_file	io.m	/^:- pred io.read_binary_file(io.result(list(int))::out, io::di, io::uo) is det.$/;kq|/^\<io.read_binary_file\>/;'q;"	kind:pred
read_binary_file_2	io.m	/^:- pred io.read_binary_file_2(io.binary_input_stream::in, list(int)::in,$/;kq|/^\<io.read_binary_file_2\>/;'q;"	kind:pred	file:
read_binary_file_as_bitmap	io.m	/^:- pred io.read_binary_file_as_bitmap(io.binary_input_stream::in,$/;kq|/^\<io.read_binary_file_as_bitmap\>/;'q;"	kind:pred
read_binary_file_as_bitmap	io.m	/^:- pred io.read_binary_file_as_bitmap(io.res(bitmap)::out,$/;kq|/^\<io.read_binary_file_as_bitmap\>/;'q;"	kind:pred
read_binary_file_as_bitmap_2	io.m	/^:- pred io.read_binary_file_as_bitmap_2(io.binary_input_stream::in,$/;kq|/^\<io.read_binary_file_as_bitmap_2\>/;'q;"	kind:pred	file:
read_bitmap	io.m	/^:- pred io.read_bitmap(bitmap::bitmap_di, bitmap::bitmap_uo,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
read_bitmap	io.m	/^:- pred io.read_bitmap(byte_index::in, num_bytes::in,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
read_bitmap	io.m	/^:- pred io.read_bitmap(io.binary_input_stream::in,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
read_bitmap	io.m	/^:- pred io.read_bitmap(io.binary_input_stream::in,$/;kq|/^\<io.read_bitmap\>/;'q;"	kind:pred
read_buffer	bit_buffer.read.m	/^    ---> read_buffer(bit_buffer :: bit_buffer(Stream, State, Error)).$/;kq|-;/\<read_buffer\>/;'q;"	kind:cons	file:
read_buffer	bit_buffer.read.m	/^:- type read_buffer ==$/;kq|-;/\<read_buffer\>/;'q;"	kind:type
read_buffer	bit_buffer.read.m	/^:- type read_buffer(Stream, State, Error)$/;kq|-;/\<read_buffer\>/;'q;"	kind:type	file:
read_buffer_di	bit_buffer.read.m	/^:- mode read_buffer_di == in(uniq_read_buffer).$/;kq|-;/\<read_buffer_di\>/;'q;"	kind:mode
read_buffer_ui	bit_buffer.read.m	/^:- mode read_buffer_ui == in(uniq_read_buffer).$/;kq|-;/\<read_buffer_ui\>/;'q;"	kind:mode
read_buffer_uo	bit_buffer.read.m	/^:- mode read_buffer_uo == out(uniq_read_buffer).$/;kq|-;/\<read_buffer_uo\>/;'q;"	kind:mode
read_byte	io.m	/^:- pred io.read_byte(io.binary_input_stream::in, io.result(int)::out,$/;kq|/^\<io.read_byte\>/;'q;"	kind:pred
read_byte	io.m	/^:- pred io.read_byte(io.result(int)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_byte\>/;'q;"	kind:pred
read_byte_val	io.m	/^:- pred io.read_byte_val(io.input_stream::in, int::out,$/;kq|/^\<io.read_byte_val\>/;'q;"	kind:pred	file:
read_byte_val_2	io.m	/^:- pred io.read_byte_val_2(io.stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.read_byte_val_2\>/;'q;"	kind:pred	file:
read_char	calendar.m	/^:- pred read_char(char::out, list(char)::in, list(char)::out) is semidet.$/;kq|/^\<read_char\>/;'q;"	kind:pred	file:
read_char	io.m	/^:- pred io.read_char(io.input_stream::in, io.result(char)::out,$/;kq|/^\<io.read_char\>/;'q;"	kind:pred
read_char	io.m	/^:- pred io.read_char(io.result(char)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_char\>/;'q;"	kind:pred
read_char_code	io.m	/^:- pred io.read_char_code(io.input_stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.read_char_code\>/;'q;"	kind:pred	file:
read_char_code_2	io.m	/^:- pred io.read_char_code_2(io.stream::in, int::out, io::di, io::uo)$/;kq|/^\<io.read_char_code_2\>/;'q;"	kind:pred	file:
read_char_unboxed	io.m	/^:- pred io.read_char_unboxed(io.input_stream::in, io.result::out, char::out,$/;kq|/^\<io.read_char_unboxed\>/;'q;"	kind:pred
read_days	calendar.m	/^:- pred read_days(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_days\>/;'q;"	kind:pred	file:
read_entry	dir.m	/^:- pred dir.read_entry(dir.stream::in, io.result({dir.stream, string})::out,$/;kq|/^\<dir.read_entry\>/;'q;"	kind:pred	file:
read_entry_2	dir.m	/^:- pred dir.read_entry_2(dir.stream::in, dir.stream::out, int::out,$/;kq|/^\<dir.read_entry_2\>/;'q;"	kind:pred	file:
read_file	io.m	/^:- pred io.read_file(io.input_stream::in,$/;kq|/^\<io.read_file\>/;'q;"	kind:pred
read_file	io.m	/^:- pred io.read_file(io.maybe_partial_res(list(char))::out, io::di, io::uo)$/;kq|/^\<io.read_file\>/;'q;"	kind:pred
read_file_2	io.m	/^:- pred io.read_file_2(io.input_stream::in, list(char)::in,$/;kq|/^\<io.read_file_2\>/;'q;"	kind:pred	file:
read_file_as_string	io.m	/^:- pred io.read_file_as_string(io.input_stream::in,$/;kq|/^\<io.read_file_as_string\>/;'q;"	kind:pred
read_file_as_string	io.m	/^:- pred io.read_file_as_string(io.maybe_partial_res(string)::out,$/;kq|/^\<io.read_file_as_string\>/;'q;"	kind:pred
read_file_as_string_2	io.m	/^:- pred io.read_file_as_string_2(io.input_stream::in, buffer::buffer_di,$/;kq|/^\<io.read_file_as_string_2\>/;'q;"	kind:pred	file:
read_first_entry	dir.m	/^:- pred dir.read_first_entry(dir.stream::in,$/;kq|/^\<dir.read_first_entry\>/;'q;"	kind:pred	file:
read_from_string	io.m	/^:- pred io.read_from_string(string::in, string::in, int::in,$/;kq|/^\<io.read_from_string\>/;'q;"	kind:pred
read_hours	calendar.m	/^:- pred read_hours(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_hours\>/;'q;"	kind:pred	file:
read_if_val	lazy.m	/^:- impure pred read_if_val(lazy(T)::in, T::out) is semidet.$/;kq|/^\<read_if_val\>/;'q;"	kind:pred
read_int	calendar.m	/^:- pred read_int(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_int\>/;'q;"	kind:pred	file:
read_int_2	calendar.m	/^:- pred read_int_2(int::in, int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_int_2\>/;'q;"	kind:pred	file:
read_int_and_char_or_zero	calendar.m	/^:- pred read_int_and_char_or_zero(int::out, char::in,$/;kq|/^\<read_int_and_char_or_zero\>/;'q;"	kind:pred	file:
read_int_and_num_chars	calendar.m	/^:- pred read_int_and_num_chars(int::out, int::out,$/;kq|/^\<read_int_and_num_chars\>/;'q;"	kind:pred	file:
read_int_and_num_chars_2	calendar.m	/^:- pred read_int_and_num_chars_2(int::in, int::out, int::in, int::out,$/;kq|/^\<read_int_and_num_chars_2\>/;'q;"	kind:pred	file:
read_into_array	io.m	/^:- pred io.read_into_array(stream::in,$/;kq|/^\<io.read_into_array\>/;'q;"	kind:pred	file:
read_into_buffer	io.m	/^:- pred io.read_into_buffer(stream::in, buffer::buffer_di, buffer::buffer_uo,$/;kq|/^\<io.read_into_buffer\>/;'q;"	kind:pred	file:
read_line	io.m	/^:- pred io.read_line(io.input_stream::in, io.result(list(char))::out,$/;kq|/^\<io.read_line\>/;'q;"	kind:pred
read_line	io.m	/^:- pred io.read_line(io.result(list(char))::out, io::di, io::uo) is det.$/;kq|/^\<io.read_line\>/;'q;"	kind:pred
read_line_2	io.m	/^:- pred io.read_line_2(io.input_stream::in, list(char)::out,$/;kq|/^\<io.read_line_2\>/;'q;"	kind:pred	file:
read_line_as_string	io.m	/^:- pred io.read_line_as_string(io.input_stream::in, io.result(string)::out,$/;kq|/^\<io.read_line_as_string\>/;'q;"	kind:pred
read_line_as_string	io.m	/^:- pred io.read_line_as_string(io.result(string)::out, io::di, io::uo) is det.$/;kq|/^\<io.read_line_as_string\>/;'q;"	kind:pred
read_line_as_string_2	io.m	/^:- pred io.read_line_as_string_2(io.stream::in, bool::in, int::out,$/;kq|/^\<io.read_line_as_string_2\>/;'q;"	kind:pred	file:
read_microseconds	calendar.m	/^:- pred read_microseconds(microseconds::out, list(char)::in, list(char)::out)$/;kq|/^\<read_microseconds\>/;'q;"	kind:pred	file:
read_minutes	calendar.m	/^:- pred read_minutes(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_minutes\>/;'q;"	kind:pred	file:
read_months	calendar.m	/^:- pred read_months(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_months\>/;'q;"	kind:pred	file:
read_result	io.m	/^:- type io.read_result(T)$/;kq|-;/\<read_result\>/;'q;"	kind:type
read_seconds_and_microseconds	calendar.m	/^:- pred read_seconds_and_microseconds(seconds::out, microseconds::out,$/;kq|/^\<read_seconds_and_microseconds\>/;'q;"	kind:pred	file:
read_sign	calendar.m	/^:- pred read_sign(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_sign\>/;'q;"	kind:pred	file:
read_stm_var	stm_builtin.m	/^:- pred read_stm_var(stm_var(T)::in, T::out, stm::di, stm::uo) is det.$/;kq|/^\<read_stm_var\>/;'q;"	kind:pred
read_stream	bit_buffer.read.m	/^    ---> read_stream.$/;kq|-;/\<read_stream\>/;'q;"	kind:cons
read_stream	bit_buffer.read.m	/^:- type read_stream(Stream)$/;kq|-;/\<read_stream\>/;'q;"	kind:type
read_symlink	io.m	/^:- pred io.read_symlink(string::in, io.res(string)::out, io::di, io::uo)$/;kq|/^\<io.read_symlink\>/;'q;"	kind:pred
read_symlink_2	io.m	/^:- pred io.read_symlink_2(string::in, string::out, int::out,$/;kq|/^\<io.read_symlink_2\>/;'q;"	kind:pred	file:
read_term	parser.m	/^:- pred read_term(read_term(T)::out, io::di, io::uo) is det.$/;kq|/^\<read_term\>/;'q;"	kind:pred
read_term	term_io.m	/^:- pred term_io.read_term(read_term(T)::out, io::di, io::uo) is det.$/;kq|/^\<term_io.read_term\>/;'q;"	kind:pred
read_term	term_io.m	/^:- type read_term   == read_term(generic).$/;kq|-;/\<read_term\>/;'q;"	kind:type
read_term	term_io.m	/^:- type read_term(T)$/;kq|-;/\<read_term\>/;'q;"	kind:type
read_term_filename	parser.m	/^:- pred read_term_filename(string::in, read_term(T)::out, io::di, io::uo)$/;kq|/^\<read_term_filename\>/;'q;"	kind:pred
read_term_filename_with_op_table	parser.m	/^:- pred read_term_filename_with_op_table(Ops::in, string::in,$/;kq|/^\<read_term_filename_with_op_table\>/;'q;"	kind:pred
read_term_from_string	parser.m	/^:- pred read_term_from_string(string::in, string::in, posn::out,$/;kq|/^\<read_term_from_string\>/;'q;"	kind:pred
read_term_from_string_with_op_table	parser.m	/^:- pred read_term_from_string_with_op_table(Ops::in, string::in,$/;kq|/^\<read_term_from_string_with_op_table\>/;'q;"	kind:pred
read_term_from_substring	parser.m	/^:- pred read_term_from_substring(string::in, string::in, int::in,$/;kq|/^\<read_term_from_substring\>/;'q;"	kind:pred
read_term_from_substring_with_op_table	parser.m	/^:- pred read_term_from_substring_with_op_table(Ops::in, string::in,$/;kq|/^\<read_term_from_substring_with_op_table\>/;'q;"	kind:pred
read_term_with_op_table	parser.m	/^:- pred read_term_with_op_table(Ops::in, read_term(T)::out, io::di, io::uo)$/;kq|/^\<read_term_with_op_table\>/;'q;"	kind:pred
read_term_with_op_table	term_io.m	/^:- pred term_io.read_term_with_op_table(Ops::in, read_term(T)::out,$/;kq|/^\<term_io.read_term_with_op_table\>/;'q;"	kind:pred
read_word	io.m	/^:- pred io.read_word(io.input_stream::in, io.result(list(char))::out,$/;kq|/^\<io.read_word\>/;'q;"	kind:pred
read_word	io.m	/^:- pred io.read_word(io.result(list(char))::out, io::di, io::uo) is det.$/;kq|/^\<io.read_word\>/;'q;"	kind:pred
read_word_2	io.m	/^:- pred io.read_word_2(io.input_stream::in, io.result(list(char))::out,$/;kq|/^\<io.read_word_2\>/;'q;"	kind:pred	file:
read_years	calendar.m	/^:- pred read_years(int::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<read_years\>/;'q;"	kind:pred	file:
reader	bit_buffer.read.m	/^:- instance stream.reader(read_stream(Stream, Error), bool,$/;kq|-;/\<reader\>/;'q;"	kind:tci
reader	io.m	/^:- instance stream.reader(io.binary_input_stream, int, io, io.error)$/;kq|-;/\<reader\>/;'q;"	kind:tci	file:
reader	io.m	/^:- instance stream.reader(io.input_stream, char, io, io.error)$/;kq|-;/\<reader\>/;'q;"	kind:tci	file:
reader	io.m	/^:- instance stream.reader(io.input_stream, line, io, io.error)$/;kq|-;/\<reader\>/;'q;"	kind:tci	file:
reader	io.m	/^:- instance stream.reader(io.input_stream, text_file, io, io.error)$/;kq|-;/\<reader\>/;'q;"	kind:tci	file:
reader	stream.m	/^:- typeclass stream.reader(Stream, Unit, State, Error)$/;kq|-;/\<reader\>/;'q;"	kind:tc
reciprocal	rational.m	/^:- func rational.reciprocal(rational) = rational.$/;kq|/^\<rational.reciprocal\>/;'q;"	kind:func
reclaim_heap_nondet_pragma_foreign_code	private_builtin.m	/^:- pred reclaim_heap_nondet_pragma_foreign_code is erroneous.$/;kq|/^\<reclaim_heap_nondet_pragma_foreign_code\>/;'q;"	kind:pred
record_progress	parsing_utils.m	/^:- impure pred record_progress(src::in, ps::in) is det.$/;kq|/^\<record_progress\>/;'q;"	kind:pred	file:
recursive_foldl2	dir.m	/^:- pred dir.recursive_foldl2(dir.foldl_pred(T)::in(dir.foldl_pred),$/;kq|/^\<dir.recursive_foldl2\>/;'q;"	kind:pred
recursively_get_bitmap	bit_buffer.read.m	/^:- pred recursively_get_bitmap(bit_index::in, num_bits::in,$/;kq|/^\<recursively_get_bitmap\>/;'q;"	kind:pred	file:
recursively_group_interior_nodes	tree_bitset.m	/^:- pred recursively_group_interior_nodes(int::in, list(interior_node)::in,$/;kq|/^\<recursively_group_interior_nodes\>/;'q;"	kind:pred	file:
red	rbtree.m	/^    ;       red(K, V, rbtree(K,V), rbtree(K,V))$/;kq|-;/\<red\>/;'q;"	kind:cons	file:
reduced	digraph.m	/^:- func digraph.reduced(digraph(T)) = digraph(set(T)).$/;kq|/^\<digraph.reduced\>/;'q;"	kind:func
reduced	digraph.m	/^:- pred digraph.reduced(digraph(T)::in, digraph(set(T))::out) is det.$/;kq|/^\<digraph.reduced\>/;'q;"	kind:pred
reduced	digraph.m	/^:- pred digraph.reduced(digraph(T)::in, digraph(set(T))::out,$/;kq|/^\<digraph.reduced\>/;'q;"	kind:pred
ref	store.m	/^:- type generic_ref(T, S) ---> ref(private_builtin.ref(T)).$/;kq|-;/\<ref\>/;'q;"	kind:cons	file:
ref_functor	store.m	/^:- pred store.ref_functor(generic_ref(T, S)::in, string::out, int::out,$/;kq|/^\<store.ref_functor\>/;'q;"	kind:pred
ref_value	benchmarking.m	/^:- semipure pred ref_value(int_reference::in, int::out) is det.$/;kq|/^\<ref_value\>/;'q;"	kind:pred	file:
refill_read_buffer	bit_buffer.read.m	/^:- pred refill_read_buffer(stream.res(Error)::out,$/;kq|/^\<refill_read_buffer\>/;'q;"	kind:pred	file:
region	rtree.m	/^:- instance region(box) where [$/;kq|-;/\<region\>/;'q;"	kind:tci	file:
region	rtree.m	/^:- instance region(box3d) where [$/;kq|-;/\<region\>/;'q;"	kind:tci	file:
region	rtree.m	/^:- instance region(interval) where [$/;kq|-;/\<region\>/;'q;"	kind:tci	file:
region	rtree.m	/^:- typeclass region(K) where [$/;kq|-;/\<region\>/;'q;"	kind:tc
region_builtin.create_region	region_builtin.m	/^:- impure pred create_region(region::out) is det.$/;kq|/^\<create_region\>/;'q;"	kind:pred
region_builtin.remove_region	region_builtin.m	/^:- impure pred remove_region(region::in) is det.$/;kq|/^\<remove_region\>/;'q;"	kind:pred
regular_file	io.m	/^    --->    regular_file$/;kq|-;/\<regular_file\>/;'q;"	kind:cons
reinsert_alist	hash_table.m	/^:- pred reinsert_alist(hash_table_alist(K, V)::in, hash_pred(K)::in(hash_pred),$/;kq|/^\<reinsert_alist\>/;'q;"	kind:pred	file:
reinsert_alist	version_hash_table.m	/^:- pred reinsert_alist(hash_table_alist(K, V)::in, hash_pred(K)::in(hash_pred),$/;kq|/^\<reinsert_alist\>/;'q;"	kind:pred	file:
reinsert_bindings	hash_table.m	/^:- pred reinsert_bindings(int::in, buckets(K, V)::array_ui,$/;kq|/^\<reinsert_bindings\>/;'q;"	kind:pred	file:
reinsert_bindings	version_hash_table.m	/^:- pred reinsert_bindings(int::in, buckets(K, V)::in,$/;kq|/^\<reinsert_bindings\>/;'q;"	kind:pred	file:
reinsert_deleted_subtrees	rtree.m	/^:- pred reinsert_deleted_subtrees(orphans(K, V)::in, int::in,$/;kq|/^\<reinsert_deleted_subtrees\>/;'q;"	kind:pred	file:
relabel_variable	term.m	/^:- func relabel_variable(term(T), var(T), var(T)) = term(T).$/;kq|/^\<relabel_variable\>/;'q;"	kind:func
relabel_variable	term.m	/^:- pred relabel_variable(term(T)::in, var(T)::in, var(T)::in, term(T)::out)$/;kq|/^\<relabel_variable\>/;'q;"	kind:pred
relabel_variables	term.m	/^:- func relabel_variables(list(term(T)), var(T), var(T)) = list(term(T)).$/;kq|/^\<relabel_variables\>/;'q;"	kind:func
relabel_variables	term.m	/^:- pred relabel_variables(list(term(T))::in, var(T)::in, var(T)::in,$/;kq|/^\<relabel_variables\>/;'q;"	kind:pred
relative_path_name_from_components	dir.m	/^:- func dir.relative_path_name_from_components(list(string)) = string.$/;kq|/^\<dir.relative_path_name_from_components\>/;'q;"	kind:func
rem_bits_per_int	int.m	/^:- func int.rem_bits_per_int(int) = int.$/;kq|/^\<int.rem_bits_per_int\>/;'q;"	kind:func
remove	assoc_list.m	/^:- pred assoc_list.remove(assoc_list(K, V)::in, K::in, V::out,$/;kq|/^\<assoc_list.remove\>/;'q;"	kind:pred
remove	bag.m	/^:- pred bag.remove(T::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove\>/;'q;"	kind:pred
remove	fat_sparse_bitset.m	/^:- pred remove(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
remove	map.m	/^:- pred map.remove(K::in, V::out, map(K, V)::in, map(K, V)::out) is semidet.$/;kq|/^\<map.remove\>/;'q;"	kind:pred
remove	multi_map.m	/^:- pred multi_map.remove(K::in, list(V)::out,$/;kq|/^\<multi_map.remove\>/;'q;"	kind:pred
remove	pqueue.m	/^:- pred pqueue.remove(K::out, V::out, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.remove\>/;'q;"	kind:pred
remove	rbtree.m	/^:- pred rbtree.remove(K::in, V::out, rbtree(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.remove\>/;'q;"	kind:pred
remove	set.m	/^:- pred set.remove(T::in, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.remove\>/;'q;"	kind:pred
remove	set_bbbtree.m	/^:- pred set_bbbtree.remove(T::in, set_bbbtree(T)::in, set_bbbtree(T)::out)$/;kq|/^\<set_bbbtree.remove\>/;'q;"	kind:pred
remove	set_ctree234.m	/^:- pred set_ctree234.remove(T::in, set_ctree234(T)::in, set_ctree234(T)::out)$/;kq|/^\<set_ctree234.remove\>/;'q;"	kind:pred
remove	set_ordlist.m	/^:- pred set_ordlist.remove(T::in, set_ordlist(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.remove\>/;'q;"	kind:pred
remove	set_tree234.m	/^:- pred set_tree234.remove(T::in, set_tree234(T)::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.remove\>/;'q;"	kind:pred
remove	set_unordlist.m	/^:- pred set_unordlist.remove(T::in,$/;kq|/^\<set_unordlist.remove\>/;'q;"	kind:pred
remove	sparse_bitset.m	/^:- pred remove(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
remove	test_bitset.m	/^:- pred remove(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
remove	tree234.m	/^:- pred tree234.remove(K, V, tree234(K, V), tree234(K, V)).$/;kq|/^\<tree234.remove\>/;'q;"	kind:pred
remove	tree_bitset.m	/^:- pred remove(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
remove_2	pqueue.m	/^:- pred pqueue.remove_2(pqueue(K, V)::in, pqueue(K, V)::in, pqueue(K, V)::out)$/;kq|/^\<pqueue.remove_2\>/;'q;"	kind:pred	file:
remove_2	set_tree234.m	/^:- pred set_tree234.remove_2(T::in, set_tree234(T)::in, set_tree234(T)::out,$/;kq|/^\<set_tree234.remove_2\>/;'q;"	kind:pred	file:
remove_2	tree234.m	/^:- pred tree234.remove_2(tree234(K, V), K, V, tree234(K, V), bool).$/;kq|/^\<tree234.remove_2\>/;'q;"	kind:pred	file:
remove_adjacent_dups	list.m	/^:- func list.remove_adjacent_dups(list(T)) = list(T).$/;kq|/^\<list.remove_adjacent_dups\>/;'q;"	kind:func
remove_adjacent_dups	list.m	/^:- pred list.remove_adjacent_dups(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.remove_adjacent_dups\>/;'q;"	kind:pred
remove_adjacent_dups	list.m	/^:- pred list.remove_adjacent_dups(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.remove_adjacent_dups\>/;'q;"	kind:pred
remove_adjacent_dups_2	list.m	/^:- pred list.remove_adjacent_dups_2(comparison_pred(T)::in(comparison_pred),$/;kq|/^\<list.remove_adjacent_dups_2\>/;'q;"	kind:pred	file:
remove_adjacent_dups_2	list.m	/^:- pred list.remove_adjacent_dups_2(list(T)::in, T::in, list(T)::out) is det.$/;kq|/^\<list.remove_adjacent_dups_2\>/;'q;"	kind:pred	file:
remove_all	bag.m	/^:- pred bag.remove_all(T::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_all\>/;'q;"	kind:pred
remove_directory_entry	io.m	/^:- pred remove_directory_entry(string::in, string::in, file_type::in,$/;kq|/^\<remove_directory_entry\>/;'q;"	kind:pred	file:
remove_dups	list.m	/^:- func list.remove_dups(list(T)) = list(T).$/;kq|/^\<list.remove_dups\>/;'q;"	kind:func
remove_dups	list.m	/^:- pred list.remove_dups(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.remove_dups\>/;'q;"	kind:pred
remove_dups_2	list.m	/^:- pred list.remove_dups_2(list(T)::in, set_tree234(T)::in, list(T)::out)$/;kq|/^\<list.remove_dups_2\>/;'q;"	kind:pred	file:
remove_equivalent_elements	eqvclass.m	/^:- func eqvclass.remove_equivalent_elements(eqvclass(T), T) = eqvclass(T).$/;kq|/^\<eqvclass.remove_equivalent_elements\>/;'q;"	kind:func
remove_equivalent_elements	eqvclass.m	/^:- pred eqvclass.remove_equivalent_elements(T::in,$/;kq|/^\<eqvclass.remove_equivalent_elements\>/;'q;"	kind:pred
remove_file	io.m	/^:- pred io.remove_file(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.remove_file\>/;'q;"	kind:pred
remove_file_2	io.m	/^:- pred io.remove_file_2(string::in, int::out, string::out, io::di, io::uo)$/;kq|/^\<io.remove_file_2\>/;'q;"	kind:pred	file:
remove_file_recursively	io.m	/^:- pred remove_file_recursively(string::in, io.res::out, io::di, io::uo)$/;kq|/^\<remove_file_recursively\>/;'q;"	kind:pred
remove_gt	fat_sparse_bitset.m	/^:- func remove_gt(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_gt\>/;'q;"	kind:func
remove_gt	fat_sparse_bitset.m	/^:- pred remove_gt(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<remove_gt\>/;'q;"	kind:pred
remove_gt	sparse_bitset.m	/^:- func remove_gt(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_gt\>/;'q;"	kind:func
remove_gt	sparse_bitset.m	/^:- pred remove_gt(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_gt\>/;'q;"	kind:pred
remove_gt	tree_bitset.m	/^:- func remove_gt(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<remove_gt\>/;'q;"	kind:func
remove_gt_2	fat_sparse_bitset.m	/^:- func remove_gt_2(fat_bitset_impl, int) = fat_bitset_impl.$/;kq|/^\<remove_gt_2\>/;'q;"	kind:func	file:
remove_gt_2	sparse_bitset.m	/^:- func remove_gt_2(bitset_impl, int) = bitset_impl.$/;kq|/^\<remove_gt_2\>/;'q;"	kind:func	file:
remove_gt_interior	tree_bitset.m	/^:- pred remove_gt_interior(list(interior_node)::in, int::in,$/;kq|/^\<remove_gt_interior\>/;'q;"	kind:pred	file:
remove_gt_leaf	tree_bitset.m	/^:- pred remove_gt_leaf(list(leaf_node)::in, int::in,$/;kq|/^\<remove_gt_leaf\>/;'q;"	kind:pred	file:
remove_implications	robdd.m	/^:- func remove_implications(imp_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<remove_implications\>/;'q;"	kind:func
remove_implications_2	robdd.m	/^:- pred remove_implications_2(imp_vars(T)::in, vars(T)::in,$/;kq|/^\<remove_implications_2\>/;'q;"	kind:pred	file:
remove_largest	rbtree.m	/^:- pred rbtree.remove_largest(K::out, V::out,$/;kq|/^\<rbtree.remove_largest\>/;'q;"	kind:pred
remove_largest	set_bbbtree.m	/^:- pred set_bbbtree.remove_largest(T::out,$/;kq|/^\<set_bbbtree.remove_largest\>/;'q;"	kind:pred
remove_least	fat_sparse_bitset.m	/^:- pred remove_least(T::out,$/;kq|/^\<remove_least\>/;'q;"	kind:pred
remove_least	set.m	/^:- pred set.remove_least(T::out, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.remove_least\>/;'q;"	kind:pred
remove_least	set_bbbtree.m	/^:- pred set_bbbtree.remove_least(T::out,$/;kq|/^\<set_bbbtree.remove_least\>/;'q;"	kind:pred
remove_least	set_ctree234.m	/^:- pred set_ctree234.remove_least(T::out,$/;kq|/^\<set_ctree234.remove_least\>/;'q;"	kind:pred
remove_least	set_ordlist.m	/^:- pred set_ordlist.remove_least(T::out,$/;kq|/^\<set_ordlist.remove_least\>/;'q;"	kind:pred
remove_least	set_tree234.m	/^:- pred set_tree234.remove_least(T::out,$/;kq|/^\<set_tree234.remove_least\>/;'q;"	kind:pred
remove_least	set_unordlist.m	/^:- pred set_unordlist.remove_least(T::out,$/;kq|/^\<set_unordlist.remove_least\>/;'q;"	kind:pred
remove_least	sparse_bitset.m	/^:- pred remove_least(T::out, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_least\>/;'q;"	kind:pred
remove_least	test_bitset.m	/^:- pred remove_least(T::out, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<remove_least\>/;'q;"	kind:pred
remove_least	tree_bitset.m	/^:- pred remove_least(T::out, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<remove_least\>/;'q;"	kind:pred
remove_least_2	set_tree234.m	/^:- pred set_tree234.remove_least_2(set_tree234(E)::in, E::out,$/;kq|/^\<set_tree234.remove_least_2\>/;'q;"	kind:pred	file:
remove_least_interior	tree_bitset.m	/^:- pred remove_least_interior(interior_node::in, list(interior_node)::in,$/;kq|/^\<remove_least_interior\>/;'q;"	kind:pred	file:
remove_least_leaf	tree_bitset.m	/^:- pred remove_least_leaf(leaf_node::in, list(leaf_node)::in, int::out,$/;kq|/^\<remove_least_leaf\>/;'q;"	kind:pred	file:
remove_leq	fat_sparse_bitset.m	/^:- func remove_leq(fat_sparse_bitset(T), T) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_leq\>/;'q;"	kind:func
remove_leq	fat_sparse_bitset.m	/^:- pred remove_leq(T::in, fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<remove_leq\>/;'q;"	kind:pred
remove_leq	sparse_bitset.m	/^:- func remove_leq(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_leq\>/;'q;"	kind:func
remove_leq	sparse_bitset.m	/^:- pred remove_leq(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_leq\>/;'q;"	kind:pred
remove_leq	tree_bitset.m	/^:- func remove_leq(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<remove_leq\>/;'q;"	kind:func
remove_leq_2	fat_sparse_bitset.m	/^:- func remove_leq_2(fat_bitset_impl, int) = fat_bitset_impl.$/;kq|/^\<remove_leq_2\>/;'q;"	kind:func	file:
remove_leq_2	sparse_bitset.m	/^:- func remove_leq_2(bitset_impl, int) = bitset_impl.$/;kq|/^\<remove_leq_2\>/;'q;"	kind:func	file:
remove_leq_interior	tree_bitset.m	/^:- pred remove_leq_interior(list(interior_node)::in, int::in,$/;kq|/^\<remove_leq_interior\>/;'q;"	kind:pred	file:
remove_leq_leaf	tree_bitset.m	/^:- pred remove_leq_leaf(list(leaf_node)::in, int::in, list(leaf_node)::out)$/;kq|/^\<remove_leq_leaf\>/;'q;"	kind:pred	file:
remove_list	bag.m	/^:- pred bag.remove_list(list(T)::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_list\>/;'q;"	kind:pred
remove_list	fat_sparse_bitset.m	/^:- pred remove_list(list(T)::in,$/;kq|/^\<remove_list\>/;'q;"	kind:pred
remove_list	set.m	/^:- pred set.remove_list(list(T)::in, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.remove_list\>/;'q;"	kind:pred
remove_list	set_bbbtree.m	/^:- pred set_bbbtree.remove_list(list(T)::in,$/;kq|/^\<set_bbbtree.remove_list\>/;'q;"	kind:pred
remove_list	set_ctree234.m	/^:- pred set_ctree234.remove_list(list(T)::in,$/;kq|/^\<set_ctree234.remove_list\>/;'q;"	kind:pred
remove_list	set_ordlist.m	/^:- pred set_ordlist.remove_list(list(T)::in,$/;kq|/^\<set_ordlist.remove_list\>/;'q;"	kind:pred
remove_list	set_tree234.m	/^:- pred set_tree234.remove_list(list(T)::in,$/;kq|/^\<set_tree234.remove_list\>/;'q;"	kind:pred
remove_list	set_unordlist.m	/^:- pred set_unordlist.remove_list(list(T)::in,$/;kq|/^\<set_unordlist.remove_list\>/;'q;"	kind:pred
remove_list	sparse_bitset.m	/^:- pred remove_list(list(T)::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_list\>/;'q;"	kind:pred
remove_list	test_bitset.m	/^:- pred remove_list(list(T)::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<remove_list\>/;'q;"	kind:pred
remove_list	tree_bitset.m	/^:- pred remove_list(list(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<remove_list\>/;'q;"	kind:pred
remove_prefix	string.m	/^:- pred string.remove_prefix(string::in, string::in, string::out) is semidet.$/;kq|/^\<string.remove_prefix\>/;'q;"	kind:pred
remove_prefix_if_present	string.m	/^:- func string.remove_prefix_if_present(string, string) = string.$/;kq|/^\<string.remove_prefix_if_present\>/;'q;"	kind:func
remove_region	region_builtin.m	/^:- impure pred remove_region(region::in) is det.$/;kq|/^\<remove_region\>/;'q;"	kind:pred
remove_set	bag.m	/^:- pred bag.remove_set(set(T)::in, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_set\>/;'q;"	kind:pred
remove_smallest	bag.m	/^:- pred bag.remove_smallest(T::out, bag(T)::in, bag(T)::out) is semidet.$/;kq|/^\<bag.remove_smallest\>/;'q;"	kind:pred
remove_smallest	map.m	/^:- pred map.remove_smallest(K::out, V::out, map(K, V)::in, map(K, V)::out)$/;kq|/^\<map.remove_smallest\>/;'q;"	kind:pred
remove_smallest	multi_map.m	/^:- pred multi_map.remove_smallest(K::out, list(V)::out,$/;kq|/^\<multi_map.remove_smallest\>/;'q;"	kind:pred
remove_smallest	rbtree.m	/^:- pred rbtree.remove_smallest(K::out, V::out,$/;kq|/^\<rbtree.remove_smallest\>/;'q;"	kind:pred
remove_smallest	tree234.m	/^:- pred tree234.remove_smallest(K, V, tree234(K, V), tree234(K, V)).$/;kq|/^\<tree234.remove_smallest\>/;'q;"	kind:pred
remove_smallest_2	tree234.m	/^:- pred tree234.remove_smallest_2(tree234(K, V), K, V, tree234(K, V), bool).$/;kq|/^\<tree234.remove_smallest_2\>/;'q;"	kind:pred	file:
remove_suffix	list.m	/^:- pred list.remove_suffix(list(T)::in, list(T)::in, list(T)::out) is semidet.$/;kq|/^\<list.remove_suffix\>/;'q;"	kind:pred
remove_suffix	string.m	/^:- pred string.remove_suffix(string::in, string::in, string::out) is semidet.$/;kq|/^\<string.remove_suffix\>/;'q;"	kind:pred
remove_suffix_if_present	string.m	/^:- func string.remove_suffix_if_present(string, string) = string.$/;kq|/^\<string.remove_suffix_if_present\>/;'q;"	kind:func
remove_trailing_dir_separator	dir.m	/^:- func remove_trailing_dir_separator(list(char)) = list(char).$/;kq|/^\<remove_trailing_dir_separator\>/;'q;"	kind:func	file:
remove_trailing_zeros	string.m	/^:- func remove_trailing_zeros(string) = string.$/;kq|/^\<remove_trailing_zeros\>/;'q;"	kind:func	file:
remove_zeros	string.m	/^:- func remove_zeros(list(char)) = list(char).$/;kq|/^\<remove_zeros\>/;'q;"	kind:func	file:
rename_file	io.m	/^:- pred io.rename_file(string::in, string::in, io.res::out, io::di, io::uo)$/;kq|/^\<io.rename_file\>/;'q;"	kind:pred
rename_file_2	io.m	/^:- pred io.rename_file_2(string::in, string::in, int::out, string::out,$/;kq|/^\<io.rename_file_2\>/;'q;"	kind:pred	file:
rename_vars	robdd.m	/^:- func rename_vars(func(var(T)) = var(T), robdd(T)) = robdd(T).$/;kq|/^\<rename_vars\>/;'q;"	kind:func
repeat	benchmarking.m	/^:- impure pred repeat(int::in) is nondet.$/;kq|/^\<repeat\>/;'q;"	kind:pred	file:
replace	list.m	/^:- pred list.replace(list(T), T, T, list(T)).$/;kq|/^\<list.replace\>/;'q;"	kind:pred
replace	multi_map.m	/^:- pred multi_map.replace(K::in, list(V)::in,$/;kq|/^\<multi_map.replace\>/;'q;"	kind:pred
replace	string.m	/^:- pred string.replace(string::in, string::in, string::in, string::uo)$/;kq|/^\<string.replace\>/;'q;"	kind:pred
replace_all	list.m	/^:- func list.replace_all(list(T), T, T) = list(T).$/;kq|/^\<list.replace_all\>/;'q;"	kind:func
replace_all	list.m	/^:- pred list.replace_all(list(T)::in, T::in, T::in, list(T)::out) is det.$/;kq|/^\<list.replace_all\>/;'q;"	kind:pred
replace_all	string.m	/^:- func string.replace_all(string::in, string::in, string::in) = (string::uo)$/;kq|/^\<string.replace_all\>/;'q;"	kind:func
replace_all	string.m	/^:- pred string.replace_all(string::in, string::in, string::in, string::uo)$/;kq|/^\<string.replace_all\>/;'q;"	kind:pred
replace_all_2	string.m	/^:- func string.replace_all_2(string, string, string, int, int, list(string))$/;kq|/^\<string.replace_all_2\>/;'q;"	kind:func	file:
replace_first	list.m	/^:- pred list.replace_first(list(T)::in, T::in, T::in, list(T)::out)$/;kq|/^\<list.replace_first\>/;'q;"	kind:pred
replace_nth	list.m	/^:- pred list.replace_nth(list(T)::in, int::in, T::in, list(T)::out)$/;kq|/^\<list.replace_nth\>/;'q;"	kind:pred
replace_nth_2	list.m	/^:- pred list.replace_nth_2(list(T)::in, int::in, T::in, list(T)::out)$/;kq|/^\<list.replace_nth_2\>/;'q;"	kind:pred	file:
report_full_memory_stats	benchmarking.m	/^:- impure pred report_full_memory_stats is det.$/;kq|/^\<report_full_memory_stats\>/;'q;"	kind:pred
report_invalid_backjump	backjump.m	/^:- pred report_invalid_backjump(int::in, io::di, io::uo) is det.$/;kq|/^\<report_invalid_backjump\>/;'q;"	kind:pred	file:
report_lookup_error	require.m	/^:- pred report_lookup_error(string::in, K::in) is erroneous.$/;kq|/^\<report_lookup_error\>/;'q;"	kind:pred
report_lookup_error	require.m	/^:- pred report_lookup_error(string::in, K::in, V::unused) is erroneous.$/;kq|/^\<report_lookup_error\>/;'q;"	kind:pred
report_memory_attribution	benchmarking.m	/^:- impure pred report_memory_attribution(string::in) is det.$/;kq|/^\<report_memory_attribution\>/;'q;"	kind:pred
report_memory_attribution	benchmarking.m	/^:- pred report_memory_attribution(string::in, io::di, io::uo) is det.$/;kq|/^\<report_memory_attribution\>/;'q;"	kind:pred
report_stats	benchmarking.m	/^:- impure pred report_stats is det.$/;kq|/^\<report_stats\>/;'q;"	kind:pred
report_stats	io.m	/^:- pred io.report_stats(io::di, io::uo) is det.$/;kq|/^\<io.report_stats\>/;'q;"	kind:pred
report_stats	io.m	/^:- pred io.report_stats(string::in, io::di, io::uo) is det.$/;kq|/^\<io.report_stats\>/;'q;"	kind:pred
report_uncaught_exception	exception.m	/^:- pred report_uncaught_exception(univ::in, io::di, io::uo) is cc_multi.$/;kq|/^\<report_uncaught_exception\>/;'q;"	kind:pred	file:
report_uncaught_exception_2	exception.m	/^:- pred report_uncaught_exception_2(univ::in, unit::out,$/;kq|/^\<report_uncaught_exception_2\>/;'q;"	kind:pred	file:
report_zero_constraint	robdd.m	/^:- impure pred report_zero_constraint is det.$/;kq|/^\<report_zero_constraint\>/;'q;"	kind:pred	file:
require	require.m	/^:- pred require((pred)::((pred) is semidet), string::in) is det.$/;kq|/^\<require\>/;'q;"	kind:pred
require.error	require.m	/^:- pred error(string::in) is erroneous.$/;kq|/^\<error\>/;'q;"	kind:pred
require.expect	require.m	/^:- pred expect((pred)::((pred) is semidet), string::in, string::in) is det.$/;kq|/^\<expect\>/;'q;"	kind:pred
require.expect	require.m	/^:- pred expect((pred)::((pred) is semidet), string::in, string::in,$/;kq|/^\<expect\>/;'q;"	kind:pred
require.expect_not	require.m	/^:- pred expect_not((pred)::((pred) is semidet), string::in, string::in) is det.$/;kq|/^\<expect_not\>/;'q;"	kind:pred
require.expect_not	require.m	/^:- pred expect_not((pred)::((pred) is semidet), string::in, string::in,$/;kq|/^\<expect_not\>/;'q;"	kind:pred
require.func_error	require.m	/^:- func func_error(string) = _ is erroneous.$/;kq|/^\<func_error\>/;'q;"	kind:func
require.report_lookup_error	require.m	/^:- pred report_lookup_error(string::in, K::in) is erroneous.$/;kq|/^\<report_lookup_error\>/;'q;"	kind:pred
require.report_lookup_error	require.m	/^:- pred report_lookup_error(string::in, K::in, V::unused) is erroneous.$/;kq|/^\<report_lookup_error\>/;'q;"	kind:pred
require.sorry	require.m	/^:- func sorry(string, string) = _ is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:func
require.sorry	require.m	/^:- func sorry(string, string, string) = _ is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:func
require.sorry	require.m	/^:- pred sorry(string::in, string::in) is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:pred
require.sorry	require.m	/^:- pred sorry(string::in, string::in, string::in) is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:pred
require.unexpected	require.m	/^:- func unexpected(string, string) = _ is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:func
require.unexpected	require.m	/^:- func unexpected(string, string, string) = _ is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:func
require.unexpected	require.m	/^:- pred unexpected(string::in, string::in) is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:pred
require.unexpected	require.m	/^:- pred unexpected(string::in, string::in, string::in) is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:pred
res	io.m	/^:- type io.res$/;kq|-;/\<res\>/;'q;"	kind:type
res	io.m	/^:- type io.res(T)$/;kq|-;/\<res\>/;'q;"	kind:type
res	stream.m	/^:- type stream.res(Error)$/;kq|-;/\<res\>/;'q;"	kind:type
res	stream.m	/^:- type stream.res(T, Error)$/;kq|-;/\<res\>/;'q;"	kind:type
res_to_stream_res	io.m	/^:- func io.res_to_stream_res(io.res) = stream.res(io.error).$/;kq|/^\<io.res_to_stream_res\>/;'q;"	kind:func	file:
reserved_prefix	term_to_xml.m	/^:- func reserved_prefix = string.$/;kq|/^\<reserved_prefix\>/;'q;"	kind:func	file:
reset_activation_info_ac	profiling_builtin.m	/^:- impure pred reset_activation_info_ac(int::in, proc_dynamic::in) is det.$/;kq|/^\<reset_activation_info_ac\>/;'q;"	kind:pred
reset_activation_info_sr	profiling_builtin.m	/^:- impure pred reset_activation_info_sr(proc_dynamic::in) is det.$/;kq|/^\<reset_activation_info_sr\>/;'q;"	kind:pred
reset_solutions_heap	solutions.m	/^:- impure pred reset_solutions_heap(heap_ptr::in) is det.$/;kq|/^\<reset_solutions_heap\>/;'q;"	kind:pred	file:
reset_ticket_commit	private_builtin.m	/^:- impure pred reset_ticket_commit(ticket::in) is det.$/;kq|/^\<reset_ticket_commit\>/;'q;"	kind:pred
reset_ticket_solve	private_builtin.m	/^:- impure pred reset_ticket_solve(ticket::in) is det.$/;kq|/^\<reset_ticket_solve\>/;'q;"	kind:pred
reset_ticket_undo	private_builtin.m	/^:- impure pred reset_ticket_undo(ticket::in) is det.$/;kq|/^\<reset_ticket_undo\>/;'q;"	kind:pred
resize	array.m	/^:- func array.resize(array(T), int, T) = array(T).$/;kq|/^\<array.resize\>/;'q;"	kind:func
resize	array.m	/^:- pred array.resize(int, T, array(T), array(T)).$/;kq|/^\<array.resize\>/;'q;"	kind:pred
resize	bitmap.m	/^:- func resize(bitmap, num_bits, bool) = bitmap.$/;kq|/^\<resize\>/;'q;"	kind:func
resize	bt_array.m	/^:- func bt_array.resize(bt_array(T), int, int, T) = bt_array(T).$/;kq|/^\<bt_array.resize\>/;'q;"	kind:func
resize	bt_array.m	/^:- pred bt_array.resize(bt_array(T)::in, int::in, int::in, T::in,$/;kq|/^\<bt_array.resize\>/;'q;"	kind:pred
resize	version_array.m	/^:- func resize(version_array(T), int, T) = version_array(T).$/;kq|/^\<resize\>/;'q;"	kind:func
resize	version_array.m	/^:- pred resize(int::in, T::in, version_array(T)::in, version_array(T)::out)$/;kq|/^\<resize\>/;'q;"	kind:pred
resize	version_array2d.m	/^:- func resize(version_array2d(T), int, int, T) = version_array2d(T).$/;kq|/^\<resize\>/;'q;"	kind:func
resize	version_bitmap.m	/^:- func resize(version_bitmap, int, bool) = version_bitmap.$/;kq|/^\<resize\>/;'q;"	kind:func
resize	version_bitmap.m	/^:- pred resize(int::in, bool::in, version_bitmap::in, version_bitmap::out)$/;kq|/^\<resize\>/;'q;"	kind:pred
resize	version_store.m	/^:- func resize(version_store(S), int) = version_store(S).$/;kq|/^\<resize\>/;'q;"	kind:func	file:
resize_2	version_array2d.m	/^:- func resize_2(int, int, int, int, version_array2d(T), version_array2d(T)) =$/;kq|/^\<resize_2\>/;'q;"	kind:func	file:
resize_bitmap	bitmap.m	/^:- func resize_bitmap(bitmap, num_bits) = bitmap.$/;kq|/^\<resize_bitmap\>/;'q;"	kind:func	file:
resize_buffer	io.m	/^:- pred io.resize_buffer(int::in, int::in,$/;kq|/^\<io.resize_buffer\>/;'q;"	kind:pred	file:
rest	fat_sparse_bitset.m	/^                rest    :: fat_bitset_impl$/;kq|-;/\<rest\>/;'q;"	kind:fld	file:
rest	sparse_bitset.m	/^:- func rest(bitset_impl::in(bound([ground | ground]))) =$/;kq|/^\<rest\>/;'q;"	kind:func	file:
restore_hp	private_builtin.m	/^:- impure pred restore_hp(heap_pointer::in) is det.$/;kq|/^\<restore_hp\>/;'q;"	kind:pred
restore_recursion_depth_exit_1	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_1($/;kq|/^\<restore_recursion_depth_exit_1\>/;'q;"	kind:pred
restore_recursion_depth_exit_2	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_2($/;kq|/^\<restore_recursion_depth_exit_2\>/;'q;"	kind:pred
restore_recursion_depth_exit_3	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_3($/;kq|/^\<restore_recursion_depth_exit_3\>/;'q;"	kind:pred
restore_recursion_depth_exit_4	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_4($/;kq|/^\<restore_recursion_depth_exit_4\>/;'q;"	kind:pred
restore_recursion_depth_exit_5	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_5($/;kq|/^\<restore_recursion_depth_exit_5\>/;'q;"	kind:pred
restore_recursion_depth_exit_6	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_6($/;kq|/^\<restore_recursion_depth_exit_6\>/;'q;"	kind:pred
restore_recursion_depth_exit_7	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_7($/;kq|/^\<restore_recursion_depth_exit_7\>/;'q;"	kind:pred
restore_recursion_depth_exit_8	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_8($/;kq|/^\<restore_recursion_depth_exit_8\>/;'q;"	kind:pred
restore_recursion_depth_exit_9	profiling_builtin.m	/^:- impure pred restore_recursion_depth_exit_9($/;kq|/^\<restore_recursion_depth_exit_9\>/;'q;"	kind:pred
restore_recursion_depth_fail_1	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_1($/;kq|/^\<restore_recursion_depth_fail_1\>/;'q;"	kind:pred
restore_recursion_depth_fail_2	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_2($/;kq|/^\<restore_recursion_depth_fail_2\>/;'q;"	kind:pred
restore_recursion_depth_fail_3	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_3($/;kq|/^\<restore_recursion_depth_fail_3\>/;'q;"	kind:pred
restore_recursion_depth_fail_4	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_4($/;kq|/^\<restore_recursion_depth_fail_4\>/;'q;"	kind:pred
restore_recursion_depth_fail_5	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_5($/;kq|/^\<restore_recursion_depth_fail_5\>/;'q;"	kind:pred
restore_recursion_depth_fail_6	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_6($/;kq|/^\<restore_recursion_depth_fail_6\>/;'q;"	kind:pred
restore_recursion_depth_fail_7	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_7($/;kq|/^\<restore_recursion_depth_fail_7\>/;'q;"	kind:pred
restore_recursion_depth_fail_8	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_8($/;kq|/^\<restore_recursion_depth_fail_8\>/;'q;"	kind:pred
restore_recursion_depth_fail_9	profiling_builtin.m	/^:- impure pred restore_recursion_depth_fail_9($/;kq|/^\<restore_recursion_depth_fail_9\>/;'q;"	kind:pred
restrict	robdd.m	/^:- func restrict(var(T), robdd(T)) = robdd(T).$/;kq|/^\<restrict\>/;'q;"	kind:func
restrict_filter	robdd.m	/^:- func restrict_filter(pred(var(T)), pred(var(T)), robdd(T)) = robdd(T).$/;kq|/^\<restrict_filter\>/;'q;"	kind:func
restrict_filter	robdd.m	/^:- func restrict_filter(pred(var(T)), robdd(T)) = robdd(T).$/;kq|/^\<restrict_filter\>/;'q;"	kind:func
restrict_threshold	robdd.m	/^:- func restrict_threshold(var(T), robdd(T)) = robdd(T).$/;kq|/^\<restrict_threshold\>/;'q;"	kind:func
restrict_true_false_vars	robdd.m	/^:- func restrict_true_false_vars(vars(T), vars(T), robdd(T)) = robdd(T).$/;kq|/^\<restrict_true_false_vars\>/;'q;"	kind:func
restrict_true_false_vars_2	robdd.m	/^:- pred restrict_true_false_vars_2(vars(T)::in, vars(T)::in,$/;kq|/^\<restrict_true_false_vars_2\>/;'q;"	kind:pred	file:
result	io.m	/^:- type io.result$/;kq|-;/\<result\>/;'q;"	kind:type
result	io.m	/^:- type io.result(T)$/;kq|-;/\<result\>/;'q;"	kind:type
result	stream.m	/^:- type stream.result(Error)$/;kq|-;/\<result\>/;'q;"	kind:type
result	stream.m	/^:- type stream.result(T, Error)$/;kq|-;/\<result\>/;'q;"	kind:type
result_call_4	erlang_rtti_implementation.m	/^:- pred result_call_4(P::in, comparison_result::out,$/;kq|/^\<result_call_4\>/;'q;"	kind:pred	file:
result_call_4	rtti_implementation.m	/^:- pred result_call_4(P::in, comparison_result::out,$/;kq|/^\<result_call_4\>/;'q;"	kind:pred	file:
result_call_5	erlang_rtti_implementation.m	/^:- pred result_call_5(P::in, comparison_result::out,$/;kq|/^\<result_call_5\>/;'q;"	kind:pred	file:
result_call_5	rtti_implementation.m	/^:- pred result_call_5(P::in, comparison_result::out,$/;kq|/^\<result_call_5\>/;'q;"	kind:pred	file:
result_call_6	erlang_rtti_implementation.m	/^:- pred result_call_6(P::in, comparison_result::out,$/;kq|/^\<result_call_6\>/;'q;"	kind:pred	file:
result_call_6	rtti_implementation.m	/^:- pred result_call_6(P::in, comparison_result::out,$/;kq|/^\<result_call_6\>/;'q;"	kind:pred	file:
result_call_7	erlang_rtti_implementation.m	/^:- pred result_call_7(P::in, comparison_result::out,$/;kq|/^\<result_call_7\>/;'q;"	kind:pred	file:
result_call_7	rtti_implementation.m	/^:- pred result_call_7(P::in, comparison_result::out,$/;kq|/^\<result_call_7\>/;'q;"	kind:pred	file:
result_call_8	erlang_rtti_implementation.m	/^:- pred result_call_8(P::in, comparison_result::out,$/;kq|/^\<result_call_8\>/;'q;"	kind:pred	file:
result_call_8	rtti_implementation.m	/^:- pred result_call_8(P::in, comparison_result::out,$/;kq|/^\<result_call_8\>/;'q;"	kind:pred	file:
result_call_9	erlang_rtti_implementation.m	/^:- pred result_call_9(P::in, comparison_result::out,$/;kq|/^\<result_call_9\>/;'q;"	kind:pred	file:
result_call_9	rtti_implementation.m	/^:- pred result_call_9(P::in, comparison_result::out,$/;kq|/^\<result_call_9\>/;'q;"	kind:pred	file:
result_to_stream_result	io.m	/^:- func io.result_to_stream_result(io.result(T)) = stream.result(T, io.error).$/;kq|/^\<io.result_to_stream_result\>/;'q;"	kind:func	file:
rethrow	exception.m	/^:- func rethrow(exception_result(T)) = _.$/;kq|/^\<rethrow\>/;'q;"	kind:func
rethrow	exception.m	/^:- pred rethrow(exception_result(T)).$/;kq|/^\<rethrow\>/;'q;"	kind:pred
retry	stm_builtin.m	/^:- pred retry(stm::ui) is erroneous.$/;kq|/^\<retry\>/;'q;"	kind:pred
return_no	bool.m	/^:- func bool.return_no = bool.$/;kq|/^\<bool.return_no\>/;'q;"	kind:func	file:
return_yes	bool.m	/^:- func bool.return_yes = bool.$/;kq|/^\<bool.return_yes\>/;'q;"	kind:func	file:
rev_char_list_to_float	lexer.m	/^:- pred rev_char_list_to_float(list(char)::in, token::out) is det.$/;kq|/^\<rev_char_list_to_float\>/;'q;"	kind:pred	file:
rev_char_list_to_int	lexer.m	/^:- pred rev_char_list_to_int(list(char)::in, int::in, token::out) is det.$/;kq|/^\<rev_char_list_to_int\>/;'q;"	kind:pred	file:
rev_char_list_to_string	lexer.m	/^:- pred rev_char_list_to_string(list(char)::in, string::out) is semidet.$/;kq|/^\<rev_char_list_to_string\>/;'q;"	kind:pred	file:
rev_dis_imps	robdd.m	/^                rev_dis_imps    :: imp_map(T)  % ~K =>  V  ( K \\\/  V)$/;kq|-;/\<rev_dis_imps\>/;'q;"	kind:fld
rev_imps	robdd.m	/^                rev_imps        :: imp_map(T), % ~K => ~V  ( K \\\/ ~V)$/;kq|-;/\<rev_imps\>/;'q;"	kind:fld
rev_list	cord.m	/^:- func rev_list(cord(T)) = list(T).$/;kq|/^\<rev_list\>/;'q;"	kind:func
rev_list_2	cord.m	/^:- func rev_list_2(list(cord_node(T)), list(T)) = list(T).$/;kq|/^\<rev_list_2\>/;'q;"	kind:func	file:
rev_map	robdd.m	/^:- func rev_map(entailment_result(leader_to_eqvclass(T))) =$/;kq|/^\<rev_map\>/;'q;"	kind:func	file:
reverse	list.m	/^:- func list.reverse(list(T)) = list(T).$/;kq|/^\<list.reverse\>/;'q;"	kind:func
reverse	list.m	/^:- pred list.reverse(list(T), list(T)).$/;kq|/^\<list.reverse\>/;'q;"	kind:pred
reverse_2	list.m	/^:- pred list.reverse_2(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.reverse_2\>/;'q;"	kind:pred	file:
reverse_from_ra_list	bt_array.m	/^:- pred reverse_from_ra_list(ra_list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<reverse_from_ra_list\>/;'q;"	kind:pred	file:
reverse_from_ra_list_count	bt_array.m	/^:- pred reverse_from_ra_list_count(int::in, ra_list(T)::in,$/;kq|/^\<reverse_from_ra_list_count\>/;'q;"	kind:pred	file:
reverse_into_ra_list	bt_array.m	/^:- pred reverse_into_ra_list(list(T)::in,$/;kq|/^\<reverse_into_ra_list\>/;'q;"	kind:pred	file:
reverse_list_acc	map.m	/^:- pred reverse_list_acc(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<reverse_list_acc\>/;'q;"	kind:pred	file:
reverse_lookup	bimap.m	/^:- func bimap.reverse_lookup(bimap(K, V), V) = K.$/;kq|/^\<bimap.reverse_lookup\>/;'q;"	kind:func
reverse_lookup	bimap.m	/^:- pred bimap.reverse_lookup(bimap(K, V)::in, K::out, V::in) is det.$/;kq|/^\<bimap.reverse_lookup\>/;'q;"	kind:pred
reverse_lookup	injection.m	/^:- func injection.reverse_lookup(injection(K, V), V) = K.$/;kq|/^\<injection.reverse_lookup\>/;'q;"	kind:func
reverse_lookup	injection.m	/^:- pred injection.reverse_lookup(injection(K, V)::in, K::out, V::in) is det.$/;kq|/^\<injection.reverse_lookup\>/;'q;"	kind:pred
reverse_map	bimap.m	/^:- func bimap.reverse_map(bimap(K, V)) = map(V, K).$/;kq|/^\<bimap.reverse_map\>/;'q;"	kind:func
reverse_map	injection.m	/^:- func injection.reverse_map(injection(K, V)) = map(V, K).$/;kq|/^\<injection.reverse_map\>/;'q;"	kind:func
reverse_map	injection.m	/^:- pred injection.reverse_map(injection(K, V)::in, map(V, K)::out) is det.$/;kq|/^\<injection.reverse_map\>/;'q;"	kind:pred
reverse_map	map.m	/^:- func map.reverse_map(map(K, V)) = map(V, set(K)).$/;kq|/^\<map.reverse_map\>/;'q;"	kind:func
reverse_map_2	map.m	/^:- pred map.reverse_map_2(K::in, V::in,$/;kq|/^\<map.reverse_map_2\>/;'q;"	kind:pred	file:
reverse_members	assoc_list.m	/^:- func assoc_list.reverse_members(assoc_list(K, V)) = assoc_list(V, K).$/;kq|/^\<assoc_list.reverse_members\>/;'q;"	kind:func
reverse_members	assoc_list.m	/^:- pred assoc_list.reverse_members(assoc_list(K, V)::in,$/;kq|/^\<assoc_list.reverse_members\>/;'q;"	kind:pred
reverse_search	bimap.m	/^:- func bimap.reverse_search(bimap(K, V), V) = K is semidet.$/;kq|/^\<bimap.reverse_search\>/;'q;"	kind:func
reverse_search	bimap.m	/^:- pred bimap.reverse_search(bimap(K, V)::in, K::out, V::in) is semidet.$/;kq|/^\<bimap.reverse_search\>/;'q;"	kind:pred
reverse_search	injection.m	/^:- func injection.reverse_search(injection(K, V), V) = K is semidet.$/;kq|/^\<injection.reverse_search\>/;'q;"	kind:func
reverse_search	injection.m	/^:- pred injection.reverse_search(injection(K, V)::in, K::out, V::in)$/;kq|/^\<injection.reverse_search\>/;'q;"	kind:pred
revstrings	string.m	/^:- type revstrings == list(string).$/;kq|-;/\<revstrings\>/;'q;"	kind:type	file:
rezero_activation_info_ac	profiling_builtin.m	/^:- impure pred rezero_activation_info_ac is det.$/;kq|/^\<rezero_activation_info_ac\>/;'q;"	kind:pred
rezero_activation_info_sr	profiling_builtin.m	/^:- impure pred rezero_activation_info_sr is det.$/;kq|/^\<rezero_activation_info_sr\>/;'q;"	kind:pred
right	string.m	/^    ;       right(list(string)).$/;kq|-;/\<right\>/;'q;"	kind:cons
right	string.m	/^:- func string.right(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.right\>/;'q;"	kind:func
right	string.m	/^:- pred string.right(string::in, int::in, string::out) is det.$/;kq|/^\<string.right\>/;'q;"	kind:pred
right_by_codepoint	string.m	/^:- func string.right_by_codepoint(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.right_by_codepoint\>/;'q;"	kind:func
right_by_codepoint	string.m	/^:- pred string.right_by_codepoint(string::in, int::in, string::out) is det.$/;kq|/^\<string.right_by_codepoint\>/;'q;"	kind:pred
right_to_left	bitmap.m	/^        ;       right_to_left$/;kq|-;/\<right_to_left\>/;'q;"	kind:cons	file:
rightshift	integer.m	/^:- func rightshift(int, int, integer, int) = integer.$/;kq|/^\<rightshift\>/;'q;"	kind:func	file:
robdd	robdd.m	/^    --->    robdd(int).$/;kq|-;/\<robdd\>/;'q;"	kind:cons	file:
robdd	robdd.m	/^:- func robdd(T) * robdd(T) = robdd(T).$/;kq|/^\<robdd\>/;'q;"	kind:func
robdd	robdd.m	/^:- func robdd(T) + robdd(T) = robdd(T).$/;kq|/^\<robdd\>/;'q;"	kind:func
robdd	robdd.m	/^:- pred robdd(T) `entails` robdd(T).$/;kq|/^\<robdd\>/;'q;"	kind:pred
robdd	robdd.m	/^:- type robdd == robdd(generic).$/;kq|-;/\<robdd\>/;'q;"	kind:type
robdd	robdd.m	/^:- type robdd(T)$/;kq|-;/\<robdd\>/;'q;"	kind:type	file:
robdd(T	robdd.m	/^:- func (robdd(T) =:= robdd(T)) = robdd(T).$/;kq|/^\<robdd(T\>/;'q;"	kind:func
robdd(T	robdd.m	/^:- func (robdd(T) =< robdd(T)) = robdd(T).$/;kq|/^\<robdd(T\>/;'q;"	kind:func
robdd(T	robdd.m	/^:- func (robdd(T) =\\= robdd(T)) = robdd(T).$/;kq|/^\<robdd(T\>/;'q;"	kind:func
robdd.'elem	robdd.m	/^:- func 'elem :='(var(T), imp_res(T), vars_entailed_result(T)) = imp_res(T).$/;kq|/^\<'elem\>/;'q;"	kind:func	file:
robdd.T	robdd.m	/^    func T `intersection` T = T$/;kq|-;/\<robdd.T\>/;'q;"	kind:tcm	file:
robdd.V,	robdd.m	/^        leader_to_eqvclass(map.foldl((func(V, VsA, M) =$/;kq|-;/\<robdd.V,\>/;'q;"	kind:tcim	file:
robdd.add_equivalences	robdd.m	/^:- func add_equivalences(equiv_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<add_equivalences\>/;'q;"	kind:func
robdd.add_equivalences_2	robdd.m	/^:- pred add_equivalences_2(assoc_list(var(T))::in, vars(T)::in,$/;kq|/^\<add_equivalences_2\>/;'q;"	kind:pred	file:
robdd.add_implications	robdd.m	/^:- func add_implications(imp_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<add_implications\>/;'q;"	kind:func
robdd.add_implications_2	robdd.m	/^:- func add_implications_2(func(var(T)) = robdd(T), func(var(T)) = robdd(T),$/;kq|/^\<add_implications_2\>/;'q;"	kind:func	file:
robdd.all_vars	robdd.m	/^    --->    all_vars$/;kq|-;/\<robdd.all_vars\>/;'q;"	kind:cons
robdd.at_most_one_of	robdd.m	/^:- func at_most_one_of(vars(T)) = robdd(T).$/;kq|/^\<at_most_one_of\>/;'q;"	kind:func
robdd.at_most_one_of_2	robdd.m	/^:- func at_most_one_of_2(vars(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<at_most_one_of_2\>/;'q;"	kind:func	file:
robdd.clear_caches	robdd.m	/^:- impure pred clear_caches is det.$/;kq|/^\<clear_caches\>/;'q;"	kind:pred
robdd.clear_caches	robdd.m	/^:- pred clear_caches(io::di, io::uo) is det.$/;kq|/^\<clear_caches\>/;'q;"	kind:pred
robdd.conj_not_vars	robdd.m	/^:- func conj_not_vars(vars(T)) = robdd(T).$/;kq|/^\<conj_not_vars\>/;'q;"	kind:func
robdd.conj_vars	robdd.m	/^:- func conj_vars(vars(T)) = robdd(T).$/;kq|/^\<conj_vars\>/;'q;"	kind:func
robdd.definite_vars	robdd.m	/^:- pred definite_vars(robdd(T)::in, vars_entailed_result(T)::out,$/;kq|/^\<definite_vars\>/;'q;"	kind:pred
robdd.dis_imps	robdd.m	/^                dis_imps        :: imp_map(T), %  K => ~V  (~K \\\/ ~V)$/;kq|-;/\<robdd.dis_imps\>/;'q;"	kind:fld
robdd.disj_vars	robdd.m	/^:- func disj_vars(vars(T)) = robdd(T).$/;kq|/^\<disj_vars\>/;'q;"	kind:func
robdd.dnf	robdd.m	/^:- func dnf(robdd(T)) = list(list(literal(T))).$/;kq|/^\<dnf\>/;'q;"	kind:func
robdd.empty_vars_set	robdd.m	/^:- func empty_vars_set = vars(T).$/;kq|/^\<empty_vars_set\>/;'q;"	kind:func
robdd.entailment_result	robdd.m	/^:- type entailment_result(T)$/;kq|-;/\<robdd.entailment_result\>/;'q;"	kind:type
robdd.eq_vars	robdd.m	/^:- func eq_vars(var(T), var(T)) = robdd(T).$/;kq|/^\<eq_vars\>/;'q;"	kind:func
robdd.equiv_vars	robdd.m	/^    --->    equiv_vars($/;kq|-;/\<robdd.equiv_vars\>/;'q;"	kind:cons
robdd.equiv_vars	robdd.m	/^:- type equiv_vars(T)$/;kq|-;/\<robdd.equiv_vars\>/;'q;"	kind:type
robdd.equivalent_result	robdd.m	/^:- type equivalent_result(T) == entailment_result(equiv_vars(T)).$/;kq|-;/\<robdd.equivalent_result\>/;'q;"	kind:type
robdd.equivalent_vars	robdd.m	/^:- func equivalent_vars(robdd(T)) = equivalent_result(T).$/;kq|/^\<equivalent_vars\>/;'q;"	kind:func
robdd.equivalent_vars_2	robdd.m	/^:- func equivalent_vars_2(robdd(T)) =$/;kq|/^\<equivalent_vars_2\>/;'q;"	kind:func	file:
robdd.extract_implications	robdd.m	/^:- func extract_implications(robdd(T)) = imp_vars(T).$/;kq|/^\<extract_implications\>/;'q;"	kind:func
robdd.fa	robdd.m	/^:- func fa(robdd(T)) = robdd(T).$/;kq|/^\<fa\>/;'q;"	kind:func	file:
robdd.filter_2	robdd.m	/^:- pred filter_2(pred(var(T)), pred(var(T)), robdd(T), robdd(T),$/;kq|/^\<filter_2\>/;'q;"	kind:pred	file:
robdd.get	robdd.m	/^:- func get(var(T), imp_map(T)) = vars(T).$/;kq|/^\<get\>/;'q;"	kind:func	file:
robdd.glb	robdd.m	/^:- func glb(robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<glb\>/;'q;"	kind:func	file:
robdd.imp_map	robdd.m	/^:- type imp_map(T) == map(var(T), vars(T)).$/;kq|-;/\<robdd.imp_map\>/;'q;"	kind:type
robdd.imp_res	robdd.m	/^:- type imp_res(T) == entailment_result(imp_res_2(T)).$/;kq|-;/\<robdd.imp_res\>/;'q;"	kind:type	file:
robdd.imp_res_2	robdd.m	/^:- type imp_res_2(T)$/;kq|-;/\<robdd.imp_res_2\>/;'q;"	kind:type	file:
robdd.imp_res_to_imp_map	robdd.m	/^:- func imp_res_to_imp_map(imp_res(T)) = imp_map(T).$/;kq|/^\<imp_res_to_imp_map\>/;'q;"	kind:func	file:
robdd.imp_vars	robdd.m	/^    --->    imp_vars($/;kq|-;/\<robdd.imp_vars\>/;'q;"	kind:cons
robdd.imp_vars	robdd.m	/^:- func imp_vars(var(T), var(T)) = robdd(T).$/;kq|/^\<imp_vars\>/;'q;"	kind:func
robdd.imp_vars	robdd.m	/^:- type imp_vars(T)$/;kq|-;/\<robdd.imp_vars\>/;'q;"	kind:type
robdd.implication_result	robdd.m	/^    --->    implication_result($/;kq|-;/\<robdd.implication_result\>/;'q;"	kind:cons	file:
robdd.implication_result	robdd.m	/^:- type implication_result(T)$/;kq|-;/\<robdd.implication_result\>/;'q;"	kind:type	file:
robdd.implications_2	robdd.m	/^:- func implications_2(robdd(T)) = implication_result(T).$/;kq|/^\<implications_2\>/;'q;"	kind:func	file:
robdd.imps	robdd.m	/^                imps            :: imp_map(T), %  K =>  V  (~K \\\/  V)$/;kq|-;/\<robdd.imps\>/;'q;"	kind:fld
robdd.imps	robdd.m	/^    --->    imps(map(var(T), vars_entailed_result(T))).$/;kq|-;/\<robdd.imps\>/;'q;"	kind:cons	file:
robdd.intersectable	robdd.m	/^:- instance intersectable(entailment_result(T)) <= intersectable(T) where [$/;kq|-;/\<robdd.intersectable\>/;'q;"	kind:tci	file:
robdd.intersectable	robdd.m	/^:- instance intersectable(imp_res_2(T)) where [$/;kq|-;/\<robdd.intersectable\>/;'q;"	kind:tci	file:
robdd.intersectable	robdd.m	/^:- instance intersectable(leader_to_eqvclass(T)) where [$/;kq|-;/\<robdd.intersectable\>/;'q;"	kind:tci	file:
robdd.intersectable	robdd.m	/^:- instance intersectable(sparse_bitset(T)) where [$/;kq|-;/\<robdd.intersectable\>/;'q;"	kind:tci	file:
robdd.intersectable	robdd.m	/^:- typeclass intersectable(T) where [$/;kq|-;/\<robdd.intersectable\>/;'q;"	kind:tc	file:
robdd.intersection	robdd.m	/^    func(intersection\/2) is sparse_bitset.intersect$/;kq|-;/\<robdd.intersection\>/;'q;"	kind:tcim	file:
robdd.is_terminal	robdd.m	/^:- pred is_terminal(robdd(T)::in) is semidet.$/;kq|/^\<is_terminal\>/;'q;"	kind:pred
robdd.ite	robdd.m	/^:- func ite(robdd(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<ite\>/;'q;"	kind:func
robdd.ite_var	robdd.m	/^:- func ite_var(var(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<ite_var\>/;'q;"	kind:func
robdd.labelling	robdd.m	/^:- pred labelling(vars(T)::in, robdd(T)::in, vars(T)::out, vars(T)::out)$/;kq|/^\<labelling\>/;'q;"	kind:pred
robdd.labelling_2	robdd.m	/^:- pred labelling_2(list(var(T))::in, robdd(T)::in, vars(T)::in,$/;kq|/^\<labelling_2\>/;'q;"	kind:pred	file:
robdd.leader_map	robdd.m	/^                leader_map  :: leader_map(T)$/;kq|-;/\<robdd.leader_map\>/;'q;"	kind:fld
robdd.leader_map	robdd.m	/^:- type leader_map(T) == map(var(T), var(T)).$/;kq|-;/\<robdd.leader_map\>/;'q;"	kind:type
robdd.leader_to_eqvclass	robdd.m	/^:- type leader_to_eqvclass(T) ---> leader_to_eqvclass(map(var(T), vars(T))).$/;kq|-;/\<robdd.leader_to_eqvclass\>/;'q;"	kind:cons	file:
robdd.leader_to_eqvclass	robdd.m	/^:- type leader_to_eqvclass(T) ---> leader_to_eqvclass(map(var(T), vars(T))).$/;kq|-;/\<robdd.leader_to_eqvclass\>/;'q;"	kind:type	file:
robdd.literal	robdd.m	/^:- type literal(T)$/;kq|-;/\<robdd.literal\>/;'q;"	kind:type
robdd.make_equiv	robdd.m	/^:- func make_equiv(equiv_vars(T)) = robdd(T).$/;kq|/^\<make_equiv\>/;'q;"	kind:func
robdd.make_equiv_2	robdd.m	/^:- func make_equiv_2(assoc_list(var(T)), vars(T)) = robdd(T).$/;kq|/^\<make_equiv_2\>/;'q;"	kind:func	file:
robdd.make_node	robdd.m	/^:- func make_node(var(T), robdd(T), robdd(T)) = robdd(T).$/;kq|/^\<make_node\>/;'q;"	kind:func	file:
robdd.merge_imp_res	robdd.m	/^:- func merge_imp_res(vars_entailed_result(T), vars_entailed_result(T),$/;kq|/^\<merge_imp_res\>/;'q;"	kind:func	file:
robdd.merge_imp_res_2	robdd.m	/^:- func merge_imp_res_2(vars_entailed_result(T), vars_entailed_result(T),$/;kq|/^\<merge_imp_res_2\>/;'q;"	kind:func	file:
robdd.minimal_model	robdd.m	/^:- pred minimal_model(vars(T)::in, robdd(T)::in, vars(T)::out, vars(T)::out)$/;kq|/^\<minimal_model\>/;'q;"	kind:pred
robdd.minimal_model_2	robdd.m	/^:- pred minimal_model_2(list(var(T))::in, robdd(T)::in, vars(T)::in,$/;kq|/^\<minimal_model_2\>/;'q;"	kind:pred	file:
robdd.neg	robdd.m	/^    ;   neg(var(T)).$/;kq|-;/\<robdd.neg\>/;'q;"	kind:cons
robdd.neq_vars	robdd.m	/^:- func neq_vars(var(T), var(T)) = robdd(T).$/;kq|/^\<neq_vars\>/;'q;"	kind:func
robdd.node_name	robdd.m	/^:- func node_name(robdd(T)) = string.$/;kq|/^\<node_name\>/;'q;"	kind:func	file:
robdd.node_num	robdd.m	/^:- func node_num(robdd(T)) = int.$/;kq|/^\<node_num\>/;'q;"	kind:func	file:
robdd.not_var	robdd.m	/^:- func not_var(var(T)) = robdd(T).$/;kq|/^\<not_var\>/;'q;"	kind:func
robdd.one	robdd.m	/^:- func one = robdd(T).$/;kq|/^\<one\>/;'q;"	kind:func
robdd.pos	robdd.m	/^    --->    pos(var(T))$/;kq|-;/\<robdd.pos\>/;'q;"	kind:cons
robdd.print_robdd	robdd.m	/^:- pred print_robdd(robdd(T)::in, io::di, io::uo) is det.$/;kq|/^\<print_robdd\>/;'q;"	kind:pred
robdd.print_robdd_2	robdd.m	/^:- pred print_robdd_2(robdd(T)::in, set_unordlist(var(T))::in,$/;kq|/^\<print_robdd_2\>/;'q;"	kind:pred	file:
robdd.remove_implications	robdd.m	/^:- func remove_implications(imp_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<remove_implications\>/;'q;"	kind:func
robdd.remove_implications_2	robdd.m	/^:- pred remove_implications_2(imp_vars(T)::in, vars(T)::in,$/;kq|/^\<remove_implications_2\>/;'q;"	kind:pred	file:
robdd.rename_vars	robdd.m	/^:- func rename_vars(func(var(T)) = var(T), robdd(T)) = robdd(T).$/;kq|/^\<rename_vars\>/;'q;"	kind:func
robdd.report_zero_constraint	robdd.m	/^:- impure pred report_zero_constraint is det.$/;kq|/^\<report_zero_constraint\>/;'q;"	kind:pred	file:
robdd.restrict	robdd.m	/^:- func restrict(var(T), robdd(T)) = robdd(T).$/;kq|/^\<restrict\>/;'q;"	kind:func
robdd.restrict_filter	robdd.m	/^:- func restrict_filter(pred(var(T)), pred(var(T)), robdd(T)) = robdd(T).$/;kq|/^\<restrict_filter\>/;'q;"	kind:func
robdd.restrict_filter	robdd.m	/^:- func restrict_filter(pred(var(T)), robdd(T)) = robdd(T).$/;kq|/^\<restrict_filter\>/;'q;"	kind:func
robdd.restrict_threshold	robdd.m	/^:- func restrict_threshold(var(T), robdd(T)) = robdd(T).$/;kq|/^\<restrict_threshold\>/;'q;"	kind:func
robdd.restrict_true_false_vars	robdd.m	/^:- func restrict_true_false_vars(vars(T), vars(T), robdd(T)) = robdd(T).$/;kq|/^\<restrict_true_false_vars\>/;'q;"	kind:func
robdd.rev_dis_imps	robdd.m	/^                rev_dis_imps    :: imp_map(T)  % ~K =>  V  ( K \\\/  V)$/;kq|-;/\<robdd.rev_dis_imps\>/;'q;"	kind:fld
robdd.rev_imps	robdd.m	/^                rev_imps        :: imp_map(T), % ~K => ~V  ( K \\\/ ~V)$/;kq|-;/\<robdd.rev_imps\>/;'q;"	kind:fld
robdd.rev_map	robdd.m	/^:- func rev_map(entailment_result(leader_to_eqvclass(T))) =$/;kq|/^\<rev_map\>/;'q;"	kind:func	file:
robdd.s	robdd.m	/^    ;       some_vars(vars :: T).$/;kq|-;/\<robdd.s\>/;'q;"	kind:fld
robdd.size	robdd.m	/^:- pred size(robdd(T)::in, int::out, int::out) is det.$/;kq|/^\<size\>/;'q;"	kind:pred
robdd.size	robdd.m	/^:- pred size(robdd(T)::in, int::out, int::out, list(var(T))::out) is det.$/;kq|/^\<size\>/;'q;"	kind:pred
robdd.size_2	robdd.m	/^:- pred size_2(robdd(T)::in, int::in, int::out, int::in, int::out, int::in,$/;kq|/^\<size_2\>/;'q;"	kind:pred	file:
robdd.some_vars	robdd.m	/^    ;       some_vars(vars :: T).$/;kq|-;/\<robdd.some_vars\>/;'q;"	kind:cons
robdd.squeeze_equiv	robdd.m	/^:- func squeeze_equiv(equiv_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<squeeze_equiv\>/;'q;"	kind:func
robdd.terminal_name	robdd.m	/^:- func terminal_name(robdd(T)) = string.$/;kq|/^\<terminal_name\>/;'q;"	kind:func	file:
robdd.tr	robdd.m	/^:- func tr(robdd(T)) = robdd(T).$/;kq|/^\<tr\>/;'q;"	kind:func	file:
robdd.value	robdd.m	/^:- func value(robdd(T)) = var(T).$/;kq|/^\<value\>/;'q;"	kind:func	file:
robdd.var	robdd.m	/^:- func var(var(T)) = robdd(T).$/;kq|/^\<var\>/;'q;"	kind:func
robdd.var_cache	robdd.m	/^:- type var_cache(T) == map(var(T), bool).$/;kq|-;/\<robdd.var_cache\>/;'q;"	kind:type	file:
robdd.var_entailed	robdd.m	/^:- pred var_entailed(robdd(T)::in, var(T)::in) is semidet.$/;kq|/^\<var_entailed\>/;'q;"	kind:pred
robdd.var_is_constrained	robdd.m	/^:- pred var_is_constrained(robdd(T)::in, var(T)::in) is semidet.$/;kq|/^\<var_is_constrained\>/;'q;"	kind:pred
robdd.var_restrict_false	robdd.m	/^:- func var_restrict_false(var(T), robdd(T)) = robdd(T).$/;kq|/^\<var_restrict_false\>/;'q;"	kind:func
robdd.var_restrict_true	robdd.m	/^:- func var_restrict_true(var(T), robdd(T)) = robdd(T).$/;kq|/^\<var_restrict_true\>/;'q;"	kind:func
robdd.vars	robdd.m	/^:- type vars(T) == sparse_bitset(var(T)). % XXX experiment with different reps.$/;kq|-;/\<robdd.vars\>/;'q;"	kind:type
robdd.vars_are_constrained	robdd.m	/^:- pred vars_are_constrained(robdd(T)::in, vars(T)::in) is semidet.$/;kq|/^\<vars_are_constrained\>/;'q;"	kind:pred
robdd.vars_are_constrained_2	robdd.m	/^:- pred vars_are_constrained_2(robdd(T)::in, list(var(T))::in) is semidet.$/;kq|/^\<vars_are_constrained_2\>/;'q;"	kind:pred	file:
robdd.vars_disentailed	robdd.m	/^:- func vars_disentailed(robdd(T)) = vars_entailed_result(T).$/;kq|/^\<vars_disentailed\>/;'q;"	kind:func
robdd.vars_entailed	robdd.m	/^:- func vars_entailed(robdd(T)) = vars_entailed_result(T).$/;kq|/^\<vars_entailed\>/;'q;"	kind:func
robdd.vars_entailed_result	robdd.m	/^:- func vars_entailed_result(T) `insert` var(T) = vars_entailed_result(T).$/;kq|/^\<vars_entailed_result\>/;'q;"	kind:func	file:
robdd.vars_entailed_result	robdd.m	/^:- type vars_entailed_result(T) == entailment_result(vars(T)).$/;kq|-;/\<robdd.vars_entailed_result\>/;'q;"	kind:type
robdd.write_edge	robdd.m	/^:- pred write_edge(robdd(T)::in, robdd(T)::in, bool::in,$/;kq|/^\<write_edge\>/;'q;"	kind:pred	file:
robdd.write_node	robdd.m	/^:- pred write_node(robdd(T)::in, write_var(T)::in(write_var),$/;kq|/^\<write_node\>/;'q;"	kind:pred	file:
robdd.write_var	robdd.m	/^:- inst write_var == (pred(in, di, uo) is det).$/;kq|-;/\<robdd.write_var\>/;'q;"	kind:inst
robdd.write_var	robdd.m	/^:- type write_var(T) == pred(var(T), io, io).$/;kq|-;/\<robdd.write_var\>/;'q;"	kind:type
robdd.zero	robdd.m	/^:- func zero = robdd(T).$/;kq|/^\<zero\>/;'q;"	kind:func
robdd.~ robdd(T	robdd.m	/^:- func (~ robdd(T)) = robdd(T).$/;kq|/^\<~ robdd(T\>/;'q;"	kind:func
robdd_cache	robdd.m	/^:- type robdd_cache(T) == map(robdd(T), robdd(T)).$/;kq|-;/\<robdd_cache\>/;'q;"	kind:type	file:
robdd_hash	robdd.m	/^:- pred robdd_hash(robdd(T)::in, int::out) is det.$/;kq|/^\<robdd_hash\>/;'q;"	kind:pred	file:
robdd_to_doc	pprint.m	/^:- func robdd_to_doc(int, robdd(T)) = doc.$/;kq|/^\<robdd_to_doc\>/;'q;"	kind:func	file:
robdd_to_dot	robdd.m	/^:- pred robdd_to_dot(robdd(T)::in, write_var(T)::in(write_var), string::in,$/;kq|/^\<robdd_to_dot\>/;'q;"	kind:pred
robdd_to_dot	robdd.m	/^:- pred robdd_to_dot(robdd(T)::in, write_var(T)::in(write_var),$/;kq|/^\<robdd_to_dot\>/;'q;"	kind:pred
robdd_to_dot_2	robdd.m	/^:- pred robdd_to_dot_2(robdd(T)::in, write_var(T)::in(write_var),$/;kq|/^\<robdd_to_dot_2\>/;'q;"	kind:pred	file:
rollback_exception	stm_builtin.m	/^:- type rollback_exception$/;kq|-;/\<rollback_exception\>/;'q;"	kind:type
rollback_invalid_transaction	stm_builtin.m	/^    --->    rollback_invalid_transaction$/;kq|-;/\<rollback_invalid_transaction\>/;'q;"	kind:cons
rollback_retry	stm_builtin.m	/^    ;       rollback_retry.$/;kq|-;/\<rollback_retry\>/;'q;"	kind:cons
round	math.m	/^:- func math.round(float) = float.$/;kq|/^\<math.round\>/;'q;"	kind:func
round_to_int	float.m	/^:- func round_to_int(float) = int.$/;kq|/^\<round_to_int\>/;'q;"	kind:func
rpad	string.m	/^:- func rpad(char, int, string) = string.$/;kq|/^\<rpad\>/;'q;"	kind:func	file:
rs	random.m	/^    --->    rs(int). % I(j)$/;kq|-;/\<rs\>/;'q;"	kind:cons	file:
rstrip	string.m	/^:- func string.rstrip(string) = string.$/;kq|/^\<string.rstrip\>/;'q;"	kind:func
rstrip_pred	string.m	/^:- func string.rstrip_pred(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.rstrip_pred\>/;'q;"	kind:func
rtc	digraph.m	/^:- func digraph.rtc(digraph(T)) = digraph(T).$/;kq|/^\<digraph.rtc\>/;'q;"	kind:func
rtc	digraph.m	/^:- pred digraph.rtc(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.rtc\>/;'q;"	kind:pred
rtc_2	digraph.m	/^:- pred digraph.rtc_2(list(digraph_key(T))::in, digraph(T)::in,$/;kq|/^\<digraph.rtc_2\>/;'q;"	kind:pred	file:
rtree	rtree.m	/^    ;       rtree(rtree_2(K, V)).$/;kq|-;/\<rtree\>/;'q;"	kind:cons	file:
rtree	rtree.m	/^:- type rtree(K, V)  $/;kq|-;/\<rtree\>/;'q;"	kind:type	file:
rtree.bounding_region	rtree.m	/^    func bounding_region(K, K) = K,$/;kq|-;/\<rtree.bounding_region\>/;'q;"	kind:tcm
rtree.bounding_region	rtree.m	/^    func(bounding_region\/2) is box3d_bounding_region, $/;kq|-;/\<rtree.bounding_region\>/;'q;"	kind:tcim	file:
rtree.bounding_region	rtree.m	/^    func(bounding_region\/2) is box_bounding_region, $/;kq|-;/\<rtree.bounding_region\>/;'q;"	kind:tcim	file:
rtree.bounding_region	rtree.m	/^    func(bounding_region\/2) is interval_bounding_region, $/;kq|-;/\<rtree.bounding_region\>/;'q;"	kind:tcim	file:
rtree.bounding_region_size	rtree.m	/^    func bounding_region_size(K, K) = float$/;kq|-;/\<rtree.bounding_region_size\>/;'q;"	kind:tcm
rtree.bounding_region_size	rtree.m	/^    func(bounding_region_size\/2) is box3d_bounding_region_volume$/;kq|-;/\<rtree.bounding_region_size\>/;'q;"	kind:tcim	file:
rtree.bounding_region_size	rtree.m	/^    func(bounding_region_size\/2) is box_bounding_region_area$/;kq|-;/\<rtree.bounding_region_size\>/;'q;"	kind:tcim	file:
rtree.bounding_region_size	rtree.m	/^    func(bounding_region_size\/2) is interval_bounding_region_length$/;kq|-;/\<rtree.bounding_region_size\>/;'q;"	kind:tcim	file:
rtree.box	rtree.m	/^    --->    box(float, float, float, float).$/;kq|-;/\<rtree.box\>/;'q;"	kind:cons
rtree.box	rtree.m	/^:- type box$/;kq|-;/\<rtree.box\>/;'q;"	kind:type
rtree.box3d	rtree.m	/^    --->    box3d(float, float, float, float, float, float).$/;kq|-;/\<rtree.box3d\>/;'q;"	kind:cons
rtree.box3d	rtree.m	/^:- type box3d$/;kq|-;/\<rtree.box3d\>/;'q;"	kind:type
rtree.box3d_bounding_region	rtree.m	/^:- func box3d_bounding_region(box3d, box3d) = box3d.$/;kq|/^\<box3d_bounding_region\>/;'q;"	kind:func	file:
rtree.box3d_contains	rtree.m	/^:- pred box3d_contains(box3d::in, box3d::in) is semidet.$/;kq|/^\<box3d_contains\>/;'q;"	kind:pred	file:
rtree.box3d_intersects	rtree.m	/^:- pred box3d_intersects(box3d::in, box3d::in) is semidet.$/;kq|/^\<box3d_intersects\>/;'q;"	kind:pred	file:
rtree.box3d_volume	rtree.m	/^:- func box3d_volume(box3d) = float.$/;kq|/^\<box3d_volume\>/;'q;"	kind:func	file:
rtree.box_area	rtree.m	/^:- func box_area(box) = float.$/;kq|/^\<box_area\>/;'q;"	kind:func	file:
rtree.box_bounding_region	rtree.m	/^:- func box_bounding_region(box, box) = box.$/;kq|/^\<box_bounding_region\>/;'q;"	kind:func	file:
rtree.box_bounding_region_area	rtree.m	/^:- func box_bounding_region_area(box, box) = float.$/;kq|/^\<box_bounding_region_area\>/;'q;"	kind:func	file:
rtree.box_contains	rtree.m	/^:- pred box_contains(box::in, box::in) is semidet.$/;kq|/^\<box_contains\>/;'q;"	kind:pred	file:
rtree.box_intersects	rtree.m	/^:- pred box_intersects(box::in, box::in) is semidet.$/;kq|/^\<box_intersects\>/;'q;"	kind:pred	file:
rtree.choose_subtree	rtree.m	/^:- func choose_subtree(K, K, K) = min_of_two_result <= region(K).$/;kq|/^\<choose_subtree\>/;'q;"	kind:func	file:
rtree.choose_subtree	rtree.m	/^:- func choose_subtree(K, K, K, K) = min_of_three_result <= region(K).$/;kq|/^\<choose_subtree\>/;'q;"	kind:func	file:
rtree.contains	rtree.m	/^    pred contains(K::in, K::in) is semidet,$/;kq|-;/\<rtree.contains\>/;'q;"	kind:tcm
rtree.contains	rtree.m	/^    pred(contains\/2) is box3d_contains, $/;kq|-;/\<rtree.contains\>/;'q;"	kind:tcim	file:
rtree.contains	rtree.m	/^    pred(contains\/2) is box_contains, $/;kq|-;/\<rtree.contains\>/;'q;"	kind:tcim	file:
rtree.contains	rtree.m	/^    pred(contains\/2) is interval_contains, $/;kq|-;/\<rtree.contains\>/;'q;"	kind:tcim	file:
rtree.delete	rtree.m	/^:- pred rtree.delete(K::in, V::in, rtree(K, V)::in, rtree(K, V)::out) $/;kq|/^\<rtree.delete\>/;'q;"	kind:pred
rtree.delete_2	rtree.m	/^:- pred delete_2(rtree_2(K, V)::in, K::in, V::in, int::in, K::out,$/;kq|/^\<delete_2\>/;'q;"	kind:pred	file:
rtree.delete_info	rtree.m	/^:- type delete_info(K, V) $/;kq|-;/\<rtree.delete_info\>/;'q;"	kind:type	file:
rtree.deleting	rtree.m	/^    --->    deleting(orphans(K, V))$/;kq|-;/\<rtree.deleting\>/;'q;"	kind:cons	file:
rtree.empty	rtree.m	/^    --->    empty$/;kq|-;/\<rtree.empty\>/;'q;"	kind:cons	file:
rtree.finished	rtree.m	/^    ;       finished(int, orphans(K, V)).$/;kq|-;/\<rtree.finished\>/;'q;"	kind:cons	file:
rtree.fold	rtree.m	/^:- pred rtree.fold(pred(K, V, A, A), rtree(K, V), A, A).$/;kq|/^\<rtree.fold\>/;'q;"	kind:pred
rtree.fold_2	rtree.m	/^:- pred fold_2(pred(K, V, A, A), rtree_2(K, V), A, A).$/;kq|/^\<fold_2\>/;'q;"	kind:pred	file:
rtree.fold_subtree	rtree.m	/^:- pred fold_subtree(pred(K, V, A, A), K, rtree_2(K, V), A, A).$/;kq|/^\<fold_subtree\>/;'q;"	kind:pred	file:
rtree.four	rtree.m	/^    ;       four(K, rtree_2(K, V), K, rtree_2(K, V), K, rtree_2(K, V), K,$/;kq|-;/\<rtree.four\>/;'q;"	kind:cons	file:
rtree.four	rtree.m	/^:- inst four ==$/;kq|-;/\<rtree.four\>/;'q;"	kind:inst	file:
rtree.include_min	rtree.m	/^:- pred include_min(float::in, float::in, float::in, float::in,$/;kq|/^\<include_min\>/;'q;"	kind:pred	file:
rtree.init	rtree.m	/^:- func rtree.init = (rtree(K, V)::uo) is det <= region(K).$/;kq|/^\<rtree.init\>/;'q;"	kind:func
rtree.insert	rtree.m	/^:- func rtree.insert(K, V, rtree(K, V)) = rtree(K, V) <= region(K).$/;kq|/^\<rtree.insert\>/;'q;"	kind:func
rtree.insert	rtree.m	/^:- pred rtree.insert(K::in, V::in, rtree(K, V)::in, rtree(K, V)::out)$/;kq|/^\<rtree.insert\>/;'q;"	kind:pred
rtree.insert_2	rtree.m	/^:- pred insert_2(rtree_2(K, V)::in, K::in, V::in, rtree_2(K, V)::out)$/;kq|/^\<insert_2\>/;'q;"	kind:pred	file:
rtree.insert_and_split_child2	rtree.m	/^:- pred insert_and_split_child2(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<insert_and_split_child2\>/;'q;"	kind:pred	file:
rtree.insert_and_split_child3	rtree.m	/^:- pred insert_and_split_child3(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<insert_and_split_child3\>/;'q;"	kind:pred	file:
rtree.insert_tree	rtree.m	/^:- func insert_tree(rtree_2(K, V), K, rtree_2(K, V), int, int) =$/;kq|/^\<insert_tree\>/;'q;"	kind:func	file:
rtree.intersects	rtree.m	/^    pred intersects(K::in, K::in) is semidet,$/;kq|-;/\<rtree.intersects\>/;'q;"	kind:tcm
rtree.intersects	rtree.m	/^    pred(intersects\/2) is box3d_intersects, $/;kq|-;/\<rtree.intersects\>/;'q;"	kind:tcim	file:
rtree.intersects	rtree.m	/^    pred(intersects\/2) is box_intersects, $/;kq|-;/\<rtree.intersects\>/;'q;"	kind:tcim	file:
rtree.intersects	rtree.m	/^    pred(intersects\/2) is interval_intersects, $/;kq|-;/\<rtree.intersects\>/;'q;"	kind:tcim	file:
rtree.interval	rtree.m	/^    --->    interval(float, float).$/;kq|-;/\<rtree.interval\>/;'q;"	kind:cons
rtree.interval	rtree.m	/^:- type interval$/;kq|-;/\<rtree.interval\>/;'q;"	kind:type
rtree.interval_bounding_region	rtree.m	/^:- func interval_bounding_region(interval, interval) = interval.$/;kq|/^\<interval_bounding_region\>/;'q;"	kind:func	file:
rtree.interval_contains	rtree.m	/^:- pred interval_contains(interval::in, interval::in) is semidet.$/;kq|/^\<interval_contains\>/;'q;"	kind:pred	file:
rtree.interval_intersects	rtree.m	/^:- pred interval_intersects(interval::in, interval::in) is semidet.$/;kq|/^\<interval_intersects\>/;'q;"	kind:pred	file:
rtree.interval_length	rtree.m	/^:- func interval_length(interval) = float.$/;kq|/^\<interval_length\>/;'q;"	kind:func	file:
rtree.is_empty	rtree.m	/^:- pred rtree.is_empty(rtree(K, V)::in) is semidet.$/;kq|/^\<rtree.is_empty\>/;'q;"	kind:pred
rtree.leaf	rtree.m	/^    --->    leaf(V) $/;kq|-;/\<rtree.leaf\>/;'q;"	kind:cons	file:
rtree.map_values	rtree.m	/^:- pred rtree.map_values(pred(K, V, W), rtree(K, V), rtree(K, W)).$/;kq|/^\<rtree.map_values\>/;'q;"	kind:pred
rtree.map_values_2	rtree.m	/^:- pred map_values_2(pred(K, V, W), rtree_2(K, V), rtree_2(K, W)).$/;kq|/^\<map_values_2\>/;'q;"	kind:pred	file:
rtree.map_values_key_2	rtree.m	/^:- pred map_values_key_2(pred(K, V, W), K, rtree_2(K, V), rtree_2(K, W)).$/;kq|/^\<map_values_key_2\>/;'q;"	kind:pred	file:
rtree.maybe_limit	rtree.m	/^:- pred maybe_limit(K::in, pred(K, E)::in(pred(in, out) is semidet),$/;kq|/^\<maybe_limit\>/;'q;"	kind:pred	file:
rtree.min2_first	rtree.m	/^    --->    min2_first$/;kq|-;/\<rtree.min2_first\>/;'q;"	kind:cons	file:
rtree.min2_second	rtree.m	/^    ;       min2_second.$/;kq|-;/\<rtree.min2_second\>/;'q;"	kind:cons	file:
rtree.min3_first	rtree.m	/^    --->    min3_first $/;kq|-;/\<rtree.min3_first\>/;'q;"	kind:cons	file:
rtree.min3_second	rtree.m	/^    ;       min3_second $/;kq|-;/\<rtree.min3_second\>/;'q;"	kind:cons	file:
rtree.min3_third	rtree.m	/^    ;       min3_third.$/;kq|-;/\<rtree.min3_third\>/;'q;"	kind:cons	file:
rtree.min4_first	rtree.m	/^    --->    min4_first$/;kq|-;/\<rtree.min4_first\>/;'q;"	kind:cons	file:
rtree.min4_fourth	rtree.m	/^    ;       min4_fourth.$/;kq|-;/\<rtree.min4_fourth\>/;'q;"	kind:cons	file:
rtree.min4_second	rtree.m	/^    ;       min4_second $/;kq|-;/\<rtree.min4_second\>/;'q;"	kind:cons	file:
rtree.min4_third	rtree.m	/^    ;       min4_third $/;kq|-;/\<rtree.min4_third\>/;'q;"	kind:cons	file:
rtree.min_of_four_result	rtree.m	/^:- type min_of_four_result$/;kq|-;/\<rtree.min_of_four_result\>/;'q;"	kind:type	file:
rtree.min_of_three_result	rtree.m	/^:- type min_of_three_result $/;kq|-;/\<rtree.min_of_three_result\>/;'q;"	kind:type	file:
rtree.min_of_two_result	rtree.m	/^:- type min_of_two_result$/;kq|-;/\<rtree.min_of_two_result\>/;'q;"	kind:type	file:
rtree.minimum_of_four	rtree.m	/^:- func minimum_of_four(T, T, T, T) = min_of_four_result.$/;kq|/^\<minimum_of_four\>/;'q;"	kind:func	file:
rtree.minimum_of_three	rtree.m	/^:- func minimum_of_three(T, T, T) = min_of_three_result.$/;kq|/^\<minimum_of_three\>/;'q;"	kind:func	file:
rtree.one	rtree.m	/^    ;       one(K, V) $/;kq|-;/\<rtree.one\>/;'q;"	kind:cons	file:
rtree.orphan	rtree.m	/^    --->    orphan(K, rtree_2(K, V)).$/;kq|-;/\<rtree.orphan\>/;'q;"	kind:cons	file:
rtree.orphan	rtree.m	/^:- type orphan(K, V)$/;kq|-;/\<rtree.orphan\>/;'q;"	kind:type	file:
rtree.orphans	rtree.m	/^:- type orphans(K, V) == list(orphan(K, V)).$/;kq|-;/\<rtree.orphans\>/;'q;"	kind:type	file:
rtree.region	rtree.m	/^:- instance region(box) where [$/;kq|-;/\<rtree.region\>/;'q;"	kind:tci	file:
rtree.region	rtree.m	/^:- instance region(box3d) where [$/;kq|-;/\<rtree.region\>/;'q;"	kind:tci	file:
rtree.region	rtree.m	/^:- instance region(interval) where [$/;kq|-;/\<rtree.region\>/;'q;"	kind:tci	file:
rtree.region	rtree.m	/^:- typeclass region(K) where [$/;kq|-;/\<rtree.region\>/;'q;"	kind:tc
rtree.search_contains	rtree.m	/^:- func rtree.search_contains(rtree(K, V), K) = list(V) <= region(K).$/;kq|/^\<rtree.search_contains\>/;'q;"	kind:func
rtree.search_contains_2	rtree.m	/^:- pred search_contains_2(rtree_2(K, V)::in, K::in, list(V)::in, list(V)::out)$/;kq|/^\<search_contains_2\>/;'q;"	kind:pred	file:
rtree.search_contains_subtree	rtree.m	/^:- pred search_contains_subtree(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<search_contains_subtree\>/;'q;"	kind:pred	file:
rtree.search_first	rtree.m	/^:- pred rtree.search_first(pred(K, L), pred(V, L), rtree(K, V), L, V, L).$/;kq|/^\<rtree.search_first\>/;'q;"	kind:pred
rtree.search_first_2	rtree.m	/^:- pred search_first_2(rtree_2(K, V), pred(K, E), pred(V, E), E, V, E).$/;kq|/^\<search_first_2\>/;'q;"	kind:pred	file:
rtree.search_general	rtree.m	/^:- func rtree.search_general(pred(K)::in(pred(in) is semidet),$/;kq|/^\<rtree.search_general\>/;'q;"	kind:func
rtree.search_general_2	rtree.m	/^:- pred search_general_2(rtree_2(K, V)::in,$/;kq|/^\<search_general_2\>/;'q;"	kind:pred	file:
rtree.search_general_fold	rtree.m	/^:- pred rtree.search_general_fold(pred(K), pred(K, V, A, A), rtree(K, V), $/;kq|/^\<rtree.search_general_fold\>/;'q;"	kind:pred
rtree.search_general_fold_2	rtree.m	/^:- pred search_general_fold_2(rtree_2(K, V), pred(K),$/;kq|/^\<search_general_fold_2\>/;'q;"	kind:pred	file:
rtree.search_general_subtree	rtree.m	/^:- pred search_general_subtree(K::in, rtree_2(K, V)::in, $/;kq|/^\<search_general_subtree\>/;'q;"	kind:pred	file:
rtree.search_intersects	rtree.m	/^:- func rtree.search_intersects(rtree(K, V), K) = list(V) <= region(K).$/;kq|/^\<rtree.search_intersects\>/;'q;"	kind:func
rtree.search_intersects_2	rtree.m	/^:- pred search_intersects_2(rtree_2(K, V)::in, K::in, list(V)::in,$/;kq|/^\<search_intersects_2\>/;'q;"	kind:pred	file:
rtree.size	rtree.m	/^    func size(K) = float,$/;kq|-;/\<rtree.size\>/;'q;"	kind:tcm
rtree.size	rtree.m	/^    func(size\/1) is box3d_volume, $/;kq|-;/\<rtree.size\>/;'q;"	kind:tcim	file:
rtree.size	rtree.m	/^    func(size\/1) is box_area, $/;kq|-;/\<rtree.size\>/;'q;"	kind:tcim	file:
rtree.size	rtree.m	/^    func(size\/1) is interval_length, $/;kq|-;/\<rtree.size\>/;'q;"	kind:tcim	file:
rtree.split_4_node	rtree.m	/^:- pred split_4_node(rtree_2(K, V)::in(four), K::out, rtree_2(K, V)::out,$/;kq|/^\<split_4_node\>/;'q;"	kind:pred	file:
rtree.three	rtree.m	/^    ;       three(K, rtree_2(K, V), K, rtree_2(K, V), K, rtree_2(K, V)) $/;kq|-;/\<rtree.three\>/;'q;"	kind:cons	file:
rtree.try_deletion2	rtree.m	/^:- pred try_deletion2(K::in, rtree_2(K, V)::in, K::in, rtree_2(K, V)::in,$/;kq|/^\<try_deletion2\>/;'q;"	kind:pred	file:
rtree.try_deletion3	rtree.m	/^:- pred try_deletion3(K::in, rtree_2(K, V)::in, K::in, rtree_2(K, V)::in,$/;kq|/^\<try_deletion3\>/;'q;"	kind:pred	file:
rtree.try_deletion4	rtree.m	/^:- pred try_deletion4(K::in, rtree_2(K, V)::in, K::in, rtree_2(K, V)::in,$/;kq|/^\<try_deletion4\>/;'q;"	kind:pred	file:
rtree.two	rtree.m	/^    ;       two(K, rtree_2(K, V), K, rtree_2(K, V)) $/;kq|-;/\<rtree.two\>/;'q;"	kind:cons	file:
rtree_2	rtree.m	/^:- type rtree_2(K, V) $/;kq|-;/\<rtree_2\>/;'q;"	kind:type	file:
rtti_implementation.arg_names	rtti_implementation.m	/^:- type arg_names ---> arg_names(c_pointer).$/;kq|-;/\<rtti_implementation.arg_names\>/;'q;"	kind:cons	file:
rtti_implementation.arg_names	rtti_implementation.m	/^:- type arg_names ---> arg_names(c_pointer).$/;kq|-;/\<rtti_implementation.arg_names\>/;'q;"	kind:type	file:
rtti_implementation.arg_types	rtti_implementation.m	/^:- type arg_types ---> arg_types(c_pointer).$/;kq|-;/\<rtti_implementation.arg_types\>/;'q;"	kind:cons	file:
rtti_implementation.arg_types	rtti_implementation.m	/^:- type arg_types ---> arg_types(c_pointer).$/;kq|-;/\<rtti_implementation.arg_types\>/;'q;"	kind:type	file:
rtti_implementation.construct	rtti_implementation.m	/^:- func construct(type_info, int, list(univ)) = univ is semidet.$/;kq|/^\<construct\>/;'q;"	kind:func
rtti_implementation.du	rtti_implementation.m	/^:- inst du == bound(tcr_du ; tcr_du_usereq ; tcr_reserved_addr ;$/;kq|-;/\<rtti_implementation.du\>/;'q;"	kind:inst	file:
rtti_implementation.enum	rtti_implementation.m	/^:- inst enum == bound(tcr_enum ; tcr_enum_usereq ; tcr_dummy).$/;kq|-;/\<rtti_implementation.enum\>/;'q;"	kind:inst	file:
rtti_implementation.exist_info	rtti_implementation.m	/^:- type exist_info ---> exist_info(c_pointer).$/;kq|-;/\<rtti_implementation.exist_info\>/;'q;"	kind:cons	file:
rtti_implementation.exist_info	rtti_implementation.m	/^:- type exist_info ---> exist_info(c_pointer).$/;kq|-;/\<rtti_implementation.exist_info\>/;'q;"	kind:type	file:
rtti_implementation.get_arg	rtti_implementation.m	/^:- some [T] pred get_arg(U::in, sectag_locn::in, du_functor_desc::in,$/;kq|/^\<get_arg\>/;'q;"	kind:pred	file:
rtti_implementation.iterate	rtti_implementation.m	/^:- func iterate(int, int, (func(int) = T)) = list(T).$/;kq|/^\<iterate\>/;'q;"	kind:func	file:
rtti_implementation.notag	rtti_implementation.m	/^:- inst notag == bound(tcr_notag ; tcr_notag_usereq ;$/;kq|-;/\<rtti_implementation.notag\>/;'q;"	kind:inst	file:
rtti_implementation.null	rtti_implementation.m	/^:- pred null(T::in) is semidet.$/;kq|/^\<null\>/;'q;"	kind:pred	file:
rtti_implementation.ptag_entry	rtti_implementation.m	/^:- type ptag_entry ---> ptag_entry(c_pointer).$/;kq|-;/\<rtti_implementation.ptag_entry\>/;'q;"	kind:cons	file:
rtti_implementation.ptag_entry	rtti_implementation.m	/^:- type ptag_entry ---> ptag_entry(c_pointer).$/;kq|-;/\<rtti_implementation.ptag_entry\>/;'q;"	kind:type	file:
rtti_implementation.ptag_index	rtti_implementation.m	/^:- func ptag_index(int, type_layout) = ptag_entry.$/;kq|/^\<ptag_index\>/;'q;"	kind:func	file:
rtti_implementation.stag_local	rtti_implementation.m	/^    ;       stag_local$/;kq|-;/\<rtti_implementation.stag_local\>/;'q;"	kind:cons	file:
rtti_implementation.stag_none	rtti_implementation.m	/^    --->    stag_none$/;kq|-;/\<rtti_implementation.stag_none\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_array	rtti_implementation.m	/^    ;       tcr_array$/;kq|-;/\<rtti_implementation.tcr_array\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_bitmap	rtti_implementation.m	/^    ;       tcr_bitmap$/;kq|-;/\<rtti_implementation.tcr_bitmap\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_char	rtti_implementation.m	/^    ;       tcr_char$/;kq|-;/\<rtti_implementation.tcr_char\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_curfr	rtti_implementation.m	/^    ;       tcr_curfr$/;kq|-;/\<rtti_implementation.tcr_curfr\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_du	rtti_implementation.m	/^    ;       tcr_du$/;kq|-;/\<rtti_implementation.tcr_du\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_dummy	rtti_implementation.m	/^    ;       tcr_dummy$/;kq|-;/\<rtti_implementation.tcr_dummy\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_enum	rtti_implementation.m	/^    --->    tcr_enum$/;kq|-;/\<rtti_implementation.tcr_enum\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_equiv	rtti_implementation.m	/^    ;       tcr_equiv$/;kq|-;/\<rtti_implementation.tcr_equiv\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_float	rtti_implementation.m	/^    ;       tcr_float$/;kq|-;/\<rtti_implementation.tcr_float\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_func	rtti_implementation.m	/^    ;       tcr_func$/;kq|-;/\<rtti_implementation.tcr_func\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_hp	rtti_implementation.m	/^    ;       tcr_hp$/;kq|-;/\<rtti_implementation.tcr_hp\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_int	rtti_implementation.m	/^    ;       tcr_int$/;kq|-;/\<rtti_implementation.tcr_int\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_maxfr	rtti_implementation.m	/^    ;       tcr_maxfr$/;kq|-;/\<rtti_implementation.tcr_maxfr\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_notag	rtti_implementation.m	/^    ;       tcr_notag$/;kq|-;/\<rtti_implementation.tcr_notag\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_pred	rtti_implementation.m	/^    ;       tcr_pred$/;kq|-;/\<rtti_implementation.tcr_pred\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_redofr	rtti_implementation.m	/^    ;       tcr_redofr$/;kq|-;/\<rtti_implementation.tcr_redofr\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_redoip	rtti_implementation.m	/^    ;       tcr_redoip$/;kq|-;/\<rtti_implementation.tcr_redoip\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_string	rtti_implementation.m	/^    ;       tcr_string$/;kq|-;/\<rtti_implementation.tcr_string\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_succip	rtti_implementation.m	/^    ;       tcr_succip$/;kq|-;/\<rtti_implementation.tcr_succip\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_ticket	rtti_implementation.m	/^    ;       tcr_ticket$/;kq|-;/\<rtti_implementation.tcr_ticket\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_tuple	rtti_implementation.m	/^    ;       tcr_tuple$/;kq|-;/\<rtti_implementation.tcr_tuple\>/;'q;"	kind:cons	file:
rtti_implementation.tcr_void	rtti_implementation.m	/^    ;       tcr_void$/;kq|-;/\<rtti_implementation.tcr_void\>/;'q;"	kind:cons	file:
rtti_implementation.type_info	rtti_implementation.m	/^:- type type_info ---> type_info(c_pointer).$/;kq|-;/\<rtti_implementation.type_info\>/;'q;"	kind:cons	file:
rtti_implementation.type_info	rtti_implementation.m	/^:- type type_info ---> type_info(c_pointer).$/;kq|-;/\<rtti_implementation.type_info\>/;'q;"	kind:type	file:
rtti_implementation.usereq	rtti_implementation.m	/^:- inst usereq$/;kq|-;/\<rtti_implementation.usereq\>/;'q;"	kind:inst	file:
s	robdd.m	/^    ;       some_vars(vars :: T).$/;kq|-;/\<s\>/;'q;"	kind:fld
s	string.m	/^    ;       s(string)$/;kq|-;/\<s\>/;'q;"	kind:cons
s	string.m	/^    ;       s(string)$/;kq|-;/\<s\>/;'q;"	kind:cons	file:
same_array_elem_type	erlang_rtti_implementation.m	/^:- pred same_array_elem_type(array(T)::unused, T::unused) is det.$/;kq|/^\<same_array_elem_type\>/;'q;"	kind:pred	file:
same_array_elem_type	rtti_implementation.m	/^:- pred same_array_elem_type(array(T)::unused, T::unused) is det.$/;kq|/^\<same_array_elem_type\>/;'q;"	kind:pred	file:
same_array_elem_type	stream.string_writer.m	/^:- pred same_array_elem_type(array(T)::unused, T::unused) is det.$/;kq|/^\<same_array_elem_type\>/;'q;"	kind:pred	file:
same_array_elem_type	string.m	/^:- pred same_array_elem_type(array(T)::unused, T::unused) is det.$/;kq|/^\<same_array_elem_type\>/;'q;"	kind:pred	file:
same_eqvclass	eqvclass.m	/^:- pred eqvclass.same_eqvclass(eqvclass(T)::in, T::in, T::in) is semidet.$/;kq|/^\<eqvclass.same_eqvclass\>/;'q;"	kind:pred
same_eqvclass_list	eqvclass.m	/^:- pred eqvclass.same_eqvclass_list(eqvclass(T)::in, list(T)::in) is semidet.$/;kq|/^\<eqvclass.same_eqvclass_list\>/;'q;"	kind:pred
same_eqvclass_list_2	eqvclass.m	/^:- pred eqvclass.same_eqvclass_list_2(map(T, partition_id)::in,$/;kq|/^\<eqvclass.same_eqvclass_list_2\>/;'q;"	kind:pred	file:
same_length	list.m	/^:- pred list.same_length(list(T1), list(T2)).$/;kq|/^\<list.same_length\>/;'q;"	kind:pred
same_length3	list.m	/^:- pred list.same_length3(list(T1)::in, list(T2)::in, list(T3)::in)$/;kq|/^\<list.same_length3\>/;'q;"	kind:pred
same_pointer_value	rtti_implementation.m	/^:- pred same_pointer_value(T::in, T::in) is semidet.$/;kq|/^\<same_pointer_value\>/;'q;"	kind:pred	file:
same_pointer_value_untyped	rtti_implementation.m	/^:- pred same_pointer_value_untyped(T::in, U::in) is semidet.$/;kq|/^\<same_pointer_value_untyped\>/;'q;"	kind:pred	file:
same_private_builtin_type	stream.string_writer.m	/^:- pred same_private_builtin_type(private_builtin.type_info::unused,$/;kq|/^\<same_private_builtin_type\>/;'q;"	kind:pred	file:
same_private_builtin_type	string.m	/^:- pred same_private_builtin_type(private_builtin.type_info::unused,$/;kq|/^\<same_private_builtin_type\>/;'q;"	kind:pred	file:
same_type	type_desc.m	/^:- pred same_type(T::unused, T::unused) is det.$/;kq|/^\<same_type\>/;'q;"	kind:pred
same_version_array_elem_type	stream.string_writer.m	/^:- pred same_version_array_elem_type(version_array(T)::unused, T::unused)$/;kq|/^\<same_version_array_elem_type\>/;'q;"	kind:pred	file:
same_version_array_elem_type	string.m	/^:- pred same_version_array_elem_type(version_array(T)::unused, T::unused)$/;kq|/^\<same_version_array_elem_type\>/;'q;"	kind:pred	file:
sample_type_info	private_builtin.m	/^    ---> sample_type_info(type_info).$/;kq|-;/\<sample_type_info\>/;'q;"	kind:cons
sample_type_info	private_builtin.m	/^:- type sample_type_info$/;kq|-;/\<sample_type_info\>/;'q;"	kind:type
sample_typeclass_info	private_builtin.m	/^    ---> sample_typeclass_info(typeclass_info).$/;kq|-;/\<sample_typeclass_info\>/;'q;"	kind:cons
sample_typeclass_info	private_builtin.m	/^:- type sample_typeclass_info$/;kq|-;/\<sample_typeclass_info\>/;'q;"	kind:type
samsort_down	array.m	/^:- pred samsort_down(int::in, array(T)::array_di, array(T)::array_uo,$/;kq|/^\<samsort_down\>/;'q;"	kind:pred	file:
samsort_subarray	array.m	/^:- func samsort_subarray(array(T)::array_di, int::in, int::in) =$/;kq|/^\<samsort_subarray\>/;'q;"	kind:func	file:
samsort_up	array.m	/^:- pred samsort_up(int::in, array(T)::array_di, array(T)::array_uo,$/;kq|/^\<samsort_up\>/;'q;"	kind:pred	file:
saturday	calendar.m	/^    ;       saturday$/;kq|-;/\<saturday\>/;'q;"	kind:cons
save_and_zero_activation_info_ac	profiling_builtin.m	/^:- impure pred save_and_zero_activation_info_ac(int::out, proc_dynamic::out)$/;kq|/^\<save_and_zero_activation_info_ac\>/;'q;"	kind:pred
save_and_zero_activation_info_sr	profiling_builtin.m	/^:- impure pred save_and_zero_activation_info_sr(proc_dynamic::out) is det.$/;kq|/^\<save_and_zero_activation_info_sr\>/;'q;"	kind:pred
save_recursion_depth_1	profiling_builtin.m	/^:- impure pred save_recursion_depth_1(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_1\>/;'q;"	kind:pred
save_recursion_depth_2	profiling_builtin.m	/^:- impure pred save_recursion_depth_2(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_2\>/;'q;"	kind:pred
save_recursion_depth_3	profiling_builtin.m	/^:- impure pred save_recursion_depth_3(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_3\>/;'q;"	kind:pred
save_recursion_depth_4	profiling_builtin.m	/^:- impure pred save_recursion_depth_4(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_4\>/;'q;"	kind:pred
save_recursion_depth_5	profiling_builtin.m	/^:- impure pred save_recursion_depth_5(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_5\>/;'q;"	kind:pred
save_recursion_depth_6	profiling_builtin.m	/^:- impure pred save_recursion_depth_6(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_6\>/;'q;"	kind:pred
save_recursion_depth_7	profiling_builtin.m	/^:- impure pred save_recursion_depth_7(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_7\>/;'q;"	kind:pred
save_recursion_depth_8	profiling_builtin.m	/^:- impure pred save_recursion_depth_8(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_8\>/;'q;"	kind:pred
save_recursion_depth_9	profiling_builtin.m	/^:- impure pred save_recursion_depth_9(call_site_dynamic::in,$/;kq|/^\<save_recursion_depth_9\>/;'q;"	kind:pred
sc	digraph.m	/^:- func digraph.sc(digraph(T)) = digraph(T).$/;kq|/^\<digraph.sc\>/;'q;"	kind:func
sc	digraph.m	/^:- pred digraph.sc(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.sc\>/;'q;"	kind:pred
scanned_past_whitespace	lexer.m	/^    --->    scanned_past_whitespace$/;kq|-;/\<scanned_past_whitespace\>/;'q;"	kind:cons	file:
scanned_past_whitespace	lexer.m	/^:- type scanned_past_whitespace$/;kq|-;/\<scanned_past_whitespace\>/;'q;"	kind:type	file:
sdi_four	tree234.m	/^:- mode sdi_four == di(uniq_four(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<sdi_four\>/;'q;"	kind:mode	file:
sdi_three	tree234.m	/^:- mode sdi_three == di(uniq_three(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<sdi_three\>/;'q;"	kind:mode	file:
sdi_two	tree234.m	/^:- mode sdi_two == di(uniq_two(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<sdi_two\>/;'q;"	kind:mode	file:
search	assoc_list.m	/^:- pred assoc_list.search(assoc_list(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<assoc_list.search\>/;'q;"	kind:pred
search	bimap.m	/^:- pred bimap.search(bimap(K, V), K, V).$/;kq|/^\<bimap.search\>/;'q;"	kind:pred
search	hash_table.m	/^:- func search(hash_table(K, V), K) = V.$/;kq|/^\<search\>/;'q;"	kind:func
search	hash_table.m	/^:- pred search(hash_table(K, V), K, V).$/;kq|/^\<search\>/;'q;"	kind:pred
search	injection.m	/^:- pred injection.search(injection(K, V), K, V).$/;kq|/^\<injection.search\>/;'q;"	kind:pred
search	map.m	/^:- func map.search(map(K, V), K) = V is semidet.$/;kq|/^\<map.search\>/;'q;"	kind:func
search	map.m	/^:- pred map.search(map(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<map.search\>/;'q;"	kind:pred
search	multi_map.m	/^:- pred multi_map.search(multi_map(K, V)::in, K::in, list(V)::out) is semidet.$/;kq|/^\<multi_map.search\>/;'q;"	kind:pred
search	rbtree.m	/^:- pred rbtree.search(rbtree(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<rbtree.search\>/;'q;"	kind:pred
search	tree234.m	/^:- pred tree234.search(tree234(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<tree234.search\>/;'q;"	kind:pred
search	version_hash_table.m	/^:- func search(version_hash_table(K, V), K) = V is semidet.$/;kq|/^\<search\>/;'q;"	kind:func
search	version_hash_table.m	/^:- pred search(version_hash_table(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<search\>/;'q;"	kind:pred
search_arg_names	rtti_implementation.m	/^:- pred search_arg_names(arg_names::in, int::in, int::in, string::in, int::out)$/;kq|/^\<search_arg_names\>/;'q;"	kind:pred	file:
search_contains	rtree.m	/^:- func rtree.search_contains(rtree(K, V), K) = list(V) <= region(K).$/;kq|/^\<rtree.search_contains\>/;'q;"	kind:func
search_contains_2	rtree.m	/^:- pred search_contains_2(rtree_2(K, V)::in, K::in, list(V)::in, list(V)::out)$/;kq|/^\<search_contains_2\>/;'q;"	kind:pred	file:
search_contains_subtree	rtree.m	/^:- pred search_contains_subtree(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<search_contains_subtree\>/;'q;"	kind:pred	file:
search_first	rtree.m	/^:- pred rtree.search_first(pred(K, L), pred(V, L), rtree(K, V), L, V, L).$/;kq|/^\<rtree.search_first\>/;'q;"	kind:pred
search_first_2	rtree.m	/^:- pred search_first_2(rtree_2(K, V), pred(K, E), pred(V, E), E, V, E).$/;kq|/^\<search_first_2\>/;'q;"	kind:pred	file:
search_first_2_better_solution_three	rtree.m	/^:- pred search_first_2_better_solution_three(V, E, E, E, rtree_2(K, V), $/;kq|/^\<search_first_2_better_solution_three\>/;'q;"	kind:pred	file:
search_first_2_better_solution_two	rtree.m	/^:- pred search_first_2_better_solution_two(V, E, E, rtree_2(K, V), $/;kq|/^\<search_first_2_better_solution_two\>/;'q;"	kind:pred	file:
search_first_2_find_better_solution_one	rtree.m	/^:- pred search_first_2_find_better_solution_one(V, E, E, rtree_2(K, V), $/;kq|/^\<search_first_2_find_better_solution_one\>/;'q;"	kind:pred	file:
search_first_2_find_better_solution_three	rtree.m	/^:- pred search_first_2_find_better_solution_three(V, E, E, E, E, rtree_2(K, V), $/;kq|/^\<search_first_2_find_better_solution_three\>/;'q;"	kind:pred	file:
search_first_2_find_better_solution_two	rtree.m	/^:- pred search_first_2_find_better_solution_two(V, E, E, E, rtree_2(K, V), $/;kq|/^\<search_first_2_find_better_solution_two\>/;'q;"	kind:pred	file:
search_first_2_four_choices	rtree.m	/^:- pred search_first_2_four_choices(E, E, E, E, rtree_2(K, V), rtree_2(K, V), $/;kq|/^\<search_first_2_four_choices\>/;'q;"	kind:pred	file:
search_first_2_three_choices	rtree.m	/^:- pred search_first_2_three_choices(E::in, E::in, E::in,$/;kq|/^\<search_first_2_three_choices\>/;'q;"	kind:pred	file:
search_first_2_try_first_from_four	rtree.m	/^:- pred search_first_2_try_first_from_four(E, E, E, rtree_2(K, V),$/;kq|/^\<search_first_2_try_first_from_four\>/;'q;"	kind:pred	file:
search_first_2_try_first_from_three	rtree.m	/^:- pred search_first_2_try_first_from_three(E, E, rtree_2(K, V), rtree_2(K, V), $/;kq|/^\<search_first_2_try_first_from_three\>/;'q;"	kind:pred	file:
search_first_2_try_first_from_two	rtree.m	/^:- pred search_first_2_try_first_from_two(E, rtree_2(K, V), rtree_2(K, V), $/;kq|/^\<search_first_2_try_first_from_two\>/;'q;"	kind:pred	file:
search_first_2_two_choices	rtree.m	/^:- pred search_first_2_two_choices(E, E, rtree_2(K, V), rtree_2(K, V), $/;kq|/^\<search_first_2_two_choices\>/;'q;"	kind:pred	file:
search_general	rtree.m	/^:- func rtree.search_general(pred(K)::in(pred(in) is semidet),$/;kq|/^\<rtree.search_general\>/;'q;"	kind:func
search_general_2	rtree.m	/^:- pred search_general_2(rtree_2(K, V)::in,$/;kq|/^\<search_general_2\>/;'q;"	kind:pred	file:
search_general_fold	rtree.m	/^:- pred rtree.search_general_fold(pred(K), pred(K, V, A, A), rtree(K, V), $/;kq|/^\<rtree.search_general_fold\>/;'q;"	kind:pred
search_general_fold_2	rtree.m	/^:- pred search_general_fold_2(rtree_2(K, V), pred(K),$/;kq|/^\<search_general_fold_2\>/;'q;"	kind:pred	file:
search_general_fold_subtree	rtree.m	/^:- pred search_general_fold_subtree(K, rtree_2(K, V),$/;kq|/^\<search_general_fold_subtree\>/;'q;"	kind:pred	file:
search_general_subtree	rtree.m	/^:- pred search_general_subtree(K::in, rtree_2(K, V)::in, $/;kq|/^\<search_general_subtree\>/;'q;"	kind:pred	file:
search_insert	bimap.m	/^:- pred bimap.search_insert(K::in, V::in, maybe(V)::out,$/;kq|/^\<bimap.search_insert\>/;'q;"	kind:pred
search_insert	map.m	/^:- pred map.search_insert(K::in, V::in, maybe(V)::out,$/;kq|/^\<map.search_insert\>/;'q;"	kind:pred
search_insert	tree234.m	/^:- pred tree234.search_insert(K::in, V::in, maybe(V)::out,$/;kq|/^\<tree234.search_insert\>/;'q;"	kind:pred
search_insert2	tree234.m	/^:- pred tree234.search_insert2(tree234(K, V), K, V, maybe(V), tree234(K, V)).$/;kq|/^\<tree234.search_insert2\>/;'q;"	kind:pred	file:
search_insert3	tree234.m	/^:- pred tree234.search_insert3(tree234(K, V), K, V, maybe(V), tree234(K, V)).$/;kq|/^\<tree234.search_insert3\>/;'q;"	kind:pred	file:
search_intersects	rtree.m	/^:- func rtree.search_intersects(rtree(K, V), K) = list(V) <= region(K).$/;kq|/^\<rtree.search_intersects\>/;'q;"	kind:func
search_intersects_2	rtree.m	/^:- pred search_intersects_2(rtree_2(K, V)::in, K::in, list(V)::in,$/;kq|/^\<search_intersects_2\>/;'q;"	kind:pred	file:
search_intersects_subtree	rtree.m	/^:- pred search_intersects_subtree(K::in, rtree_2(K, V)::in, K::in,$/;kq|/^\<search_intersects_subtree\>/;'q;"	kind:pred	file:
search_key	digraph.m	/^:- pred digraph.search_key(digraph(T)::in, T::in, digraph_key(T)::out)$/;kq|/^\<digraph.search_key\>/;'q;"	kind:pred
search_name	varset.m	/^:- pred varset.search_name(varset(T)::in, var(T)::in, string::out) is semidet.$/;kq|/^\<varset.search_name\>/;'q;"	kind:pred
search_until	array.m	/^:- func search_until(comparison_result::in, array(T)::array_ui,$/;kq|/^\<search_until\>/;'q;"	kind:func	file:
search_var	varset.m	/^:- pred varset.search_var(varset(T)::in, var(T)::in, term(T)::out) is semidet.$/;kq|/^\<varset.search_var\>/;'q;"	kind:pred
second	calendar.m	/^:- func second(date) = second.$/;kq|/^\<second\>/;'q;"	kind:func
second	calendar.m	/^:- type second == int.       % 0..61 (60 and 61 are for leap seconds)$/;kq|-;/\<second\>/;'q;"	kind:type
seconds	calendar.m	/^:- func seconds(duration) = seconds.$/;kq|/^\<seconds\>/;'q;"	kind:func
seconds	calendar.m	/^:- type seconds == int.$/;kq|-;/\<seconds\>/;'q;"	kind:type
seconds_duration_string	calendar.m	/^:- func seconds_duration_string(seconds, microseconds) = string.$/;kq|/^\<seconds_duration_string\>/;'q;"	kind:func	file:
seconds_per_day	calendar.m	/^:- func seconds_per_day = int.$/;kq|/^\<seconds_per_day\>/;'q;"	kind:func	file:
sectag_locn	rtti_implementation.m	/^:- func sectag_locn(ptag_entry) = sectag_locn.$/;kq|/^\<sectag_locn\>/;'q;"	kind:func	file:
sectag_locn	rtti_implementation.m	/^:- type sectag_locn$/;kq|-;/\<sectag_locn\>/;'q;"	kind:type	file:
see	io.m	/^:- pred io.see(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.see\>/;'q;"	kind:pred
see_binary	io.m	/^:- pred io.see_binary(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.see_binary\>/;'q;"	kind:pred
seek	stream.m	/^    pred seek(Stream::in, stream.whence::in, int::in, State::di, State::uo)$/;kq|-;/\<seek\>/;'q;"	kind:tcm
seek_binary_2	io.m	/^:- pred io.seek_binary_2(io.stream::in, int::in, int::in,$/;kq|/^\<io.seek_binary_2\>/;'q;"	kind:pred	file:
seek_binary_input	io.m	/^:- pred io.seek_binary_input(io.binary_input_stream::in, io.whence::in,$/;kq|/^\<io.seek_binary_input\>/;'q;"	kind:pred
seek_binary_output	io.m	/^:- pred io.seek_binary_output(io.binary_output_stream::in, io.whence::in,$/;kq|/^\<io.seek_binary_output\>/;'q;"	kind:pred
seekable	io.m	/^:- instance stream.seekable(io.binary_input_stream, io)$/;kq|-;/\<seekable\>/;'q;"	kind:tci	file:
seekable	io.m	/^:- instance stream.seekable(io.binary_output_stream, io)$/;kq|-;/\<seekable\>/;'q;"	kind:tci	file:
seekable	stream.m	/^:- typeclass stream.seekable(Stream, State) <= stream(Stream, State)$/;kq|-;/\<seekable\>/;'q;"	kind:tc
seen	io.m	/^:- pred io.seen(io::di, io::uo) is det.$/;kq|/^\<io.seen\>/;'q;"	kind:pred
seen_binary	io.m	/^:- pred io.seen_binary(io::di, io::uo) is det.$/;kq|/^\<io.seen_binary\>/;'q;"	kind:pred
select	map.m	/^:- func map.select(map(K, V), set(K)) = map(K, V).$/;kq|/^\<map.select\>/;'q;"	kind:func
select	map.m	/^:- pred map.select(map(K, V)::in, set(K)::in, map(K, V)::out) is det.$/;kq|/^\<map.select\>/;'q;"	kind:pred
select	multi_map.m	/^:- func multi_map.select(multi_map(K, V), set(K)) = multi_map(K, V).$/;kq|/^\<multi_map.select\>/;'q;"	kind:func
select	multi_map.m	/^:- pred multi_map.select(multi_map(K, V)::in, set(K)::in,$/;kq|/^\<multi_map.select\>/;'q;"	kind:pred
select	varset.m	/^:- func varset.select(varset(T), set(var(T))) = varset(T).$/;kq|/^\<varset.select\>/;'q;"	kind:func
select	varset.m	/^:- pred varset.select(set(var(T))::in, varset(T)::in, varset(T)::out) is det.$/;kq|/^\<varset.select\>/;'q;"	kind:pred
select_loop	map.m	/^:- pred map.select_loop(list(K)::in, map(K, V)::in,$/;kq|/^\<map.select_loop\>/;'q;"	kind:pred	file:
select_op_info_and_print	stream.string_writer.m	/^:- pred select_op_info_and_print(Stream, deconstruct.noncanon_handling,$/;kq|/^\<select_op_info_and_print\>/;'q;"	kind:pred	file:
select_remaining_op_info_and_print	stream.string_writer.m	/^:- pred select_remaining_op_info_and_print(Stream,$/;kq|/^\<select_remaining_op_info_and_print\>/;'q;"	kind:pred	file:
select_sorted_list	map.m	/^:- func map.select_sorted_list(map(K, V), list(K)) = map(K, V).$/;kq|/^\<map.select_sorted_list\>/;'q;"	kind:func
select_sorted_list	map.m	/^:- pred map.select_sorted_list(map(K, V)::in, list(K)::in, map(K, V)::out)$/;kq|/^\<map.select_sorted_list\>/;'q;"	kind:pred
semaphore	io.m	/^    ;       semaphore$/;kq|-;/\<semaphore\>/;'q;"	kind:cons
semaphore.init	thread.semaphore.m	/^:- impure func semaphore.init(int::in) = (semaphore::uo) is det.$/;kq|/^\<semaphore.init\>/;'q;"	kind:func
semaphore.init	thread.semaphore.m	/^:- pred semaphore.init(semaphore::out, io::di, io::uo) is det.$/;kq|/^\<semaphore.init\>/;'q;"	kind:pred
semaphore.semaphore.init	thread.semaphore.m	/^:- impure func semaphore.init(int::in) = (semaphore::uo) is det.$/;kq|/^\<semaphore.init\>/;'q;"	kind:func
semaphore.semaphore.init	thread.semaphore.m	/^:- pred semaphore.init(semaphore::out, io::di, io::uo) is det.$/;kq|/^\<semaphore.init\>/;'q;"	kind:pred
semaphore.semaphore.signal	thread.semaphore.m	/^:- pred semaphore.signal(semaphore::in, io::di, io::uo) is det.$/;kq|/^\<semaphore.signal\>/;'q;"	kind:pred
semaphore.semaphore.try_wait	thread.semaphore.m	/^:- pred semaphore.try_wait(semaphore::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<semaphore.try_wait\>/;'q;"	kind:pred
semaphore.semaphore.wait	thread.semaphore.m	/^:- pred semaphore.wait(semaphore::in, io::di, io::uo) is det.$/;kq|/^\<semaphore.wait\>/;'q;"	kind:pred
semaphore.signal	thread.semaphore.m	/^:- pred semaphore.signal(semaphore::in, io::di, io::uo) is det.$/;kq|/^\<semaphore.signal\>/;'q;"	kind:pred
semaphore.try_wait	thread.semaphore.m	/^:- pred semaphore.try_wait(semaphore::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<semaphore.try_wait\>/;'q;"	kind:pred
semaphore.try_wait_2	thread.semaphore.m	/^:- pred try_wait_2(semaphore::in, int::out, io::di, io::uo) is det.$/;kq|/^\<try_wait_2\>/;'q;"	kind:pred	file:
semaphore.wait	thread.semaphore.m	/^:- pred semaphore.wait(semaphore::in, io::di, io::uo) is det.$/;kq|/^\<semaphore.wait\>/;'q;"	kind:pred
semi_call_port_code_ac	profiling_builtin.m	/^:- impure pred semi_call_port_code_ac(proc_layout::in,$/;kq|/^\<semi_call_port_code_ac\>/;'q;"	kind:pred
semi_call_port_code_sr	profiling_builtin.m	/^:- impure pred semi_call_port_code_sr(proc_layout::in, call_site_dynamic::out,$/;kq|/^\<semi_call_port_code_sr\>/;'q;"	kind:pred
semi_exit_port_code_ac	profiling_builtin.m	/^:- impure pred semi_exit_port_code_ac(call_site_dynamic::in,$/;kq|/^\<semi_exit_port_code_ac\>/;'q;"	kind:pred
semi_exit_port_code_sr	profiling_builtin.m	/^:- impure pred semi_exit_port_code_sr(call_site_dynamic::in,$/;kq|/^\<semi_exit_port_code_sr\>/;'q;"	kind:pred
semi_fail_port_code_ac	profiling_builtin.m	/^:- impure pred semi_fail_port_code_ac(call_site_dynamic::in,$/;kq|/^\<semi_fail_port_code_ac\>/;'q;"	kind:pred
semi_fail_port_code_sr	profiling_builtin.m	/^:- impure pred semi_fail_port_code_sr(call_site_dynamic::in,$/;kq|/^\<semi_fail_port_code_sr\>/;'q;"	kind:pred
semic	pprint.m	/^:- func semic               = doc.      % Semicolon.$/;kq|/^\<semic\>/;'q;"	kind:func
semic_line	pprint.m	/^:- func semic_line          = doc.$/;kq|/^\<semic_line\>/;'q;"	kind:func
semic_space	pprint.m	/^:- func semic_space         = doc.$/;kq|/^\<semic_space\>/;'q;"	kind:func
semic_space_line	pprint.m	/^:- func semic_space_line    = doc.$/;kq|/^\<semic_space_line\>/;'q;"	kind:func
semidet_call_3	erlang_rtti_implementation.m	/^:- pred semidet_call_3(P::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_3\>/;'q;"	kind:pred	file:
semidet_call_3	rtti_implementation.m	/^:- pred semidet_call_3(P::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_3\>/;'q;"	kind:pred	file:
semidet_call_4	erlang_rtti_implementation.m	/^:- pred semidet_call_4(P::in, A::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_4\>/;'q;"	kind:pred	file:
semidet_call_4	rtti_implementation.m	/^:- pred semidet_call_4(P::in, A::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_4\>/;'q;"	kind:pred	file:
semidet_call_5	erlang_rtti_implementation.m	/^:- pred semidet_call_5(P::in, A::in, B::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_5\>/;'q;"	kind:pred	file:
semidet_call_5	rtti_implementation.m	/^:- pred semidet_call_5(P::in, A::in, B::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_5\>/;'q;"	kind:pred	file:
semidet_call_6	erlang_rtti_implementation.m	/^:- pred semidet_call_6(P::in, A::in, B::in, C::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_6\>/;'q;"	kind:pred	file:
semidet_call_6	rtti_implementation.m	/^:- pred semidet_call_6(P::in, A::in, B::in, C::in, T::in, U::in) is semidet.$/;kq|/^\<semidet_call_6\>/;'q;"	kind:pred	file:
semidet_call_7	erlang_rtti_implementation.m	/^:- pred semidet_call_7(P::in, A::in, B::in, C::in, D::in, T::in, U::in)$/;kq|/^\<semidet_call_7\>/;'q;"	kind:pred	file:
semidet_call_7	rtti_implementation.m	/^:- pred semidet_call_7(P::in, A::in, B::in, C::in, D::in, T::in, U::in)$/;kq|/^\<semidet_call_7\>/;'q;"	kind:pred	file:
semidet_call_8	erlang_rtti_implementation.m	/^:- pred semidet_call_8(P::in, A::in, B::in, C::in, D::in, E::in, T::in, U::in)$/;kq|/^\<semidet_call_8\>/;'q;"	kind:pred	file:
semidet_call_8	rtti_implementation.m	/^:- pred semidet_call_8(P::in, A::in, B::in, C::in, D::in, E::in, T::in, U::in)$/;kq|/^\<semidet_call_8\>/;'q;"	kind:pred	file:
semidet_fail	builtin.m	/^:- pred semidet_fail is semidet.$/;kq|/^\<semidet_fail\>/;'q;"	kind:pred
semidet_false	builtin.m	/^:- pred semidet_false is semidet.$/;kq|/^\<semidet_false\>/;'q;"	kind:pred
semidet_from_char_list	string.m	/^:- pred string.semidet_from_char_list(list(char)::in, string::uo) is semidet.$/;kq|/^\<string.semidet_from_char_list\>/;'q;"	kind:pred
semidet_from_rev_char_list	string.m	/^:- pred string.semidet_from_rev_char_list(list(char)::in, string::uo)$/;kq|/^\<string.semidet_from_rev_char_list\>/;'q;"	kind:pred
semidet_lookup	array.m	/^:- pred array.semidet_lookup(array(T), int, T).$/;kq|/^\<array.semidet_lookup\>/;'q;"	kind:pred
semidet_lookup	bt_array.m	/^:- pred bt_array.semidet_lookup(bt_array(T)::in, int::in, T::out) is semidet.$/;kq|/^\<bt_array.semidet_lookup\>/;'q;"	kind:pred
semidet_set	array.m	/^:- pred array.semidet_set(int, T, array(T), array(T)).$/;kq|/^\<array.semidet_set\>/;'q;"	kind:pred
semidet_set	bt_array.m	/^:- pred bt_array.semidet_set(bt_array(T)::in, int::in, T::in,$/;kq|/^\<bt_array.semidet_set\>/;'q;"	kind:pred
semidet_slow_set	array.m	/^:- pred array.semidet_slow_set(int, T, array(T), array(T)).$/;kq|/^\<array.semidet_slow_set\>/;'q;"	kind:pred
semidet_succeed	builtin.m	/^:- pred semidet_succeed is semidet.$/;kq|/^\<semidet_succeed\>/;'q;"	kind:pred
semidet_true	builtin.m	/^:- pred semidet_true is semidet.$/;kq|/^\<semidet_true\>/;'q;"	kind:pred
semidet_unimplemented	erlang_rtti_implementation.m	/^:- pred semidet_unimplemented(string::in) is semidet.$/;kq|/^\<semidet_unimplemented\>/;'q;"	kind:pred	file:
semidet_unimplemented	rtti_implementation.m	/^:- pred semidet_unimplemented(string::in) is semidet.$/;kq|/^\<semidet_unimplemented\>/;'q;"	kind:pred	file:
semip	private_builtin.m	/^:- semipure pred semip is det.$/;kq|/^\<semip\>/;'q;"	kind:pred
semipure_true	builtin.m	/^:- semipure pred semipure_true is det.$/;kq|/^\<semipure_true\>/;'q;"	kind:pred
separated	pprint.m	/^:- func separated(func(T1) = doc, T2, list(T1)) = doc <= (doc(T2)).$/;kq|/^\<separated\>/;'q;"	kind:func
separated_list	parsing_utils.m	/^:- pred separated_list(string::in, parser(T)::in(parser), src::in,$/;kq|/^\<separated_list\>/;'q;"	kind:pred
separated_list	parsing_utils.m	/^:- pred separated_list(string::in,$/;kq|/^\<separated_list\>/;'q;"	kind:pred
september	calendar.m	/^    ;       september$/;kq|-;/\<september\>/;'q;"	kind:cons
series	list.m	/^:- func list.series(T, pred(T), func(T) = T) = list(T).$/;kq|/^\<list.series\>/;'q;"	kind:func
series_2	list.m	/^:- pred list.series_2(T, pred(T), func(T) = T, list(T), list(T)).$/;kq|/^\<list.series_2\>/;'q;"	kind:pred	file:
set	array.m	/^:- func array.set(array(T), int, T) = array(T).$/;kq|/^\<array.set\>/;'q;"	kind:func
set	array.m	/^:- pred array.set(int, T, array(T), array(T)).$/;kq|/^\<array.set\>/;'q;"	kind:pred
set	array2d.m	/^:- pred set(int, int, T,  array2d(T), array2d(T)).$/;kq|/^\<set\>/;'q;"	kind:pred
set	bimap.m	/^:- func bimap.set(bimap(K, V), K, V) = bimap(K, V).$/;kq|/^\<bimap.set\>/;'q;"	kind:func
set	bimap.m	/^:- pred bimap.set(K::in, V::in, bimap(K, V)::in, bimap(K, V)::out) is det.$/;kq|/^\<bimap.set\>/;'q;"	kind:pred
set	bitmap.m	/^:- func set(bitmap, bit_index) = bitmap.$/;kq|/^\<set\>/;'q;"	kind:func
set	bitmap.m	/^:- pred set(bit_index, bitmap, bitmap).$/;kq|/^\<set\>/;'q;"	kind:pred
set	bt_array.m	/^:- func bt_array.set(bt_array(T), int, T) = bt_array(T).$/;kq|/^\<bt_array.set\>/;'q;"	kind:func
set	bt_array.m	/^:- pred bt_array.set(bt_array(T)::in, int::in, T::in, bt_array(T)::out)$/;kq|/^\<bt_array.set\>/;'q;"	kind:pred
set	hash_table.m	/^:- func set(hash_table(K, V), K, V) = hash_table(K, V).$/;kq|/^\<set\>/;'q;"	kind:func
set	hash_table.m	/^:- pred set(K::in, V::in,$/;kq|/^\<set\>/;'q;"	kind:pred
set	injection.m	/^:- func injection.set(injection(K, V), K, V) = injection(K, V) is semidet.$/;kq|/^\<injection.set\>/;'q;"	kind:func
set	injection.m	/^:- pred injection.set(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.set\>/;'q;"	kind:pred
set	io.m	/^    --->    set$/;kq|-;/\<set\>/;'q;"	kind:cons
set	map.m	/^:- func map.set(map(K, V), K, V) = map(K, V).$/;kq|/^\<map.set\>/;'q;"	kind:func
set	map.m	/^:- pred map.set(K::in, V::in, map(K, V)::in, map(K, V)::out) is det.$/;kq|/^\<map.set\>/;'q;"	kind:pred
set	multi_map.m	/^:- func multi_map.set(multi_map(K, V), K, V) = multi_map(K, V).$/;kq|/^\<multi_map.set\>/;'q;"	kind:func
set	multi_map.m	/^:- pred multi_map.set(K::in, V::in,$/;kq|/^\<multi_map.set\>/;'q;"	kind:pred
set	rbtree.m	/^:- func rbtree.set(rbtree(K, V), K, V) = rbtree(K, V).$/;kq|/^\<rbtree.set\>/;'q;"	kind:func
set	rbtree.m	/^:- pred rbtree.set(K::in, V::in, rbtree(K, V)::in, rbtree(K, V)::out) is det.$/;kq|/^\<rbtree.set\>/;'q;"	kind:pred
set	set.m	/^:- func set.set(list(T)) = set(T).$/;kq|/^\<set.set\>/;'q;"	kind:func
set	set.m	/^:- type set(T) == set_ordlist(T).$/;kq|-;/\<set\>/;'q;"	kind:type
set	stream.m	/^    --->    set$/;kq|-;/\<set\>/;'q;"	kind:cons
set	tree234.m	/^:- func tree234.set(tree234(K, V), K, V) = tree234(K, V).$/;kq|/^\<tree234.set\>/;'q;"	kind:func
set	tree234.m	/^:- pred tree234.set(K::in, V::in, tree234(K, V)::in, tree234(K, V)::out)$/;kq|/^\<tree234.set\>/;'q;"	kind:pred
set	version_array.m	/^:- pred set(int::in, T::in, version_array(T)::in, version_array(T)::out)$/;kq|/^\<set\>/;'q;"	kind:pred
set	version_array2d.m	/^:- pred set(int::in, int::in, T::in, version_array2d(T)::in,$/;kq|/^\<set\>/;'q;"	kind:pred
set	version_bitmap.m	/^:- func set(version_bitmap, int) = version_bitmap.$/;kq|/^\<set\>/;'q;"	kind:func
set	version_bitmap.m	/^:- pred set(int::in, version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<set\>/;'q;"	kind:pred
set	version_hash_table.m	/^:- func set(version_hash_table(K, V), K, V) = version_hash_table(K, V).$/;kq|/^\<set\>/;'q;"	kind:func
set	version_hash_table.m	/^:- pred set(K::in, V::in,$/;kq|/^\<set\>/;'q;"	kind:pred
set	version_store.m	/^:- func set(version_store(S), mutvar(T, S), T) = version_store(S).$/;kq|/^\<set\>/;'q;"	kind:func
set.all_true	set.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), set(T)::in) is semidet.$/;kq|/^\<all_true\>/;'q;"	kind:pred
set.contains	set.m	/^:- pred set.contains(set(T)::in, T::in) is semidet.$/;kq|/^\<set.contains\>/;'q;"	kind:pred
set.count	set.m	/^:- func set.count(set(T)) = int.$/;kq|/^\<set.count\>/;'q;"	kind:func
set.count	set.m	/^:- pred set.count(set(T)::in, int::out) is det.$/;kq|/^\<set.count\>/;'q;"	kind:pred
set.delete	set.m	/^:- func set.delete(set(T), T) = set(T).$/;kq|/^\<set.delete\>/;'q;"	kind:func
set.delete	set.m	/^:- pred set.delete(T::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.delete\>/;'q;"	kind:pred
set.delete_list	set.m	/^:- func set.delete_list(set(T), list(T)) = set(T).$/;kq|/^\<set.delete_list\>/;'q;"	kind:func
set.delete_list	set.m	/^:- pred set.delete_list(list(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.delete_list\>/;'q;"	kind:pred
set.difference	set.m	/^:- func set.difference(set(T), set(T)) = set(T).$/;kq|/^\<set.difference\>/;'q;"	kind:func
set.difference	set.m	/^:- pred set.difference(set(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.difference\>/;'q;"	kind:pred
set.divide	set.m	/^:- pred set.divide(pred(T)::in(pred(in) is semidet), set(T)::in,$/;kq|/^\<set.divide\>/;'q;"	kind:pred
set.divide_by_set	set.m	/^:- pred set.divide_by_set(set(T)::in, set(T)::in, set(T)::out, set(T)::out)$/;kq|/^\<set.divide_by_set\>/;'q;"	kind:pred
set.empty	set.m	/^:- pred set.empty(set(T)::in) is semidet.$/;kq|/^\<set.empty\>/;'q;"	kind:pred
set.equal	set.m	/^:- pred set.equal(set(T)::in, set(T)::in) is semidet.$/;kq|/^\<set.equal\>/;'q;"	kind:pred
set.filter	set.m	/^:- func set.filter(pred(T1), set(T1)) = set(T1).$/;kq|/^\<set.filter\>/;'q;"	kind:func
set.filter	set.m	/^:- pred set.filter(pred(T1), set(T1), set(T1)).$/;kq|/^\<set.filter\>/;'q;"	kind:pred
set.filter	set.m	/^:- pred set.filter(pred(T1), set(T1), set(T1), set(T1)).$/;kq|/^\<set.filter\>/;'q;"	kind:pred
set.filter_map	set.m	/^:- func set.filter_map(func(T1) = T2, set(T1)) = set(T2).$/;kq|/^\<set.filter_map\>/;'q;"	kind:func
set.filter_map	set.m	/^:- pred set.filter_map(pred(T1, T2), set(T1), set(T2)).$/;kq|/^\<set.filter_map\>/;'q;"	kind:pred
set.fold	set.m	/^:- func set.fold(func(T, A) = A, set(T), A) = A.$/;kq|/^\<set.fold\>/;'q;"	kind:func
set.fold	set.m	/^:- pred set.fold(pred(T, A, A), set(T), A, A).$/;kq|/^\<set.fold\>/;'q;"	kind:pred
set.fold2	set.m	/^:- pred set.fold2(pred(T, A, A, B, B), set(T), A, A, B, B).$/;kq|/^\<set.fold2\>/;'q;"	kind:pred
set.fold3	set.m	/^:- pred set.fold3(pred(T, A, A, B, B, C, C), set(T), A, A, B, B, C, C).$/;kq|/^\<set.fold3\>/;'q;"	kind:pred
set.fold4	set.m	/^:- pred set.fold4(pred(T, A, A, B, B, C, C, D, D), set(T), A, A, B, B,$/;kq|/^\<set.fold4\>/;'q;"	kind:pred
set.fold5	set.m	/^:- pred set.fold5(pred(T, A, A, B, B, C, C, D, D, E, E), set(T), A, A, B, B,$/;kq|/^\<set.fold5\>/;'q;"	kind:pred
set.fold6	set.m	/^:- pred set.fold6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F), set(T),$/;kq|/^\<set.fold6\>/;'q;"	kind:pred
set.foldl	set.m	/^:- func set.foldl(func(T, A) = A, set(T), A) = A.$/;kq|/^\<set.foldl\>/;'q;"	kind:func
set.foldl	set.m	/^:- pred set.foldl(pred(T, A, A), set(T), A, A).$/;kq|/^\<set.foldl\>/;'q;"	kind:pred
set.foldl2	set.m	/^:- pred set.foldl2(pred(T, A, A, B, B), set(T), A, A, B, B).$/;kq|/^\<set.foldl2\>/;'q;"	kind:pred
set.foldl3	set.m	/^:- pred set.foldl3(pred(T, A, A, B, B, C, C), set(T), A, A, B, B, C, C).$/;kq|/^\<set.foldl3\>/;'q;"	kind:pred
set.foldl4	set.m	/^:- pred set.foldl4(pred(T, A, A, B, B, C, C, D, D), set(T), A, A, B, B,$/;kq|/^\<set.foldl4\>/;'q;"	kind:pred
set.foldl5	set.m	/^:- pred set.foldl5(pred(T, A, A, B, B, C, C, D, D, E, E), set(T), A, A, B, B,$/;kq|/^\<set.foldl5\>/;'q;"	kind:pred
set.foldl6	set.m	/^:- pred set.foldl6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F), set(T),$/;kq|/^\<set.foldl6\>/;'q;"	kind:pred
set.from_list	set.m	/^:- func set.from_list(list(T)) = set(T).$/;kq|/^\<set.from_list\>/;'q;"	kind:func
set.from_sorted_list	set.m	/^:- func set.from_sorted_list(list(T)) = set(T).$/;kq|/^\<set.from_sorted_list\>/;'q;"	kind:func
set.init	set.m	/^:- func set.init = set(T).$/;kq|/^\<set.init\>/;'q;"	kind:func
set.init	set.m	/^:- pred set.init(set(T)::uo) is det.$/;kq|/^\<set.init\>/;'q;"	kind:pred
set.insert	set.m	/^:- func set.insert(set(T), T) = set(T).$/;kq|/^\<set.insert\>/;'q;"	kind:func
set.insert	set.m	/^:- pred set.insert(T::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.insert\>/;'q;"	kind:pred
set.insert_list	set.m	/^:- func set.insert_list(set(T), list(T)) = set(T).$/;kq|/^\<set.insert_list\>/;'q;"	kind:func
set.insert_list	set.m	/^:- pred set.insert_list(list(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.insert_list\>/;'q;"	kind:pred
set.insert_new	set.m	/^:- pred set.insert_new(T::in, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.insert_new\>/;'q;"	kind:pred
set.intersect	set.m	/^:- func set.intersect(set(T), set(T)) = set(T).$/;kq|/^\<set.intersect\>/;'q;"	kind:func
set.intersect	set.m	/^:- pred set.intersect(set(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.intersect\>/;'q;"	kind:pred
set.intersect_list	set.m	/^:- func set.intersect_list(list(set(T))) = set(T).$/;kq|/^\<set.intersect_list\>/;'q;"	kind:func
set.is_empty	set.m	/^:- pred set.is_empty(set(T)::in) is semidet.$/;kq|/^\<set.is_empty\>/;'q;"	kind:pred
set.is_member	set.m	/^:- pred set.is_member(T::in, set(T)::in, bool::out) is det.$/;kq|/^\<set.is_member\>/;'q;"	kind:pred
set.is_singleton	set.m	/^:- pred set.is_singleton(set(T)::in, T::out) is semidet.$/;kq|/^\<set.is_singleton\>/;'q;"	kind:pred
set.list_to_set	set.m	/^:- func set.list_to_set(list(T)) = set(T).$/;kq|/^\<set.list_to_set\>/;'q;"	kind:func
set.list_to_set	set.m	/^:- pred set.list_to_set(list(T)::in, set(T)::out) is det.$/;kq|/^\<set.list_to_set\>/;'q;"	kind:pred
set.make_singleton_set	set.m	/^:- func set.make_singleton_set(T) = set(T).$/;kq|/^\<set.make_singleton_set\>/;'q;"	kind:func
set.map	set.m	/^:- func set.map(func(T1) = T2, set(T1)) = set(T2).$/;kq|/^\<set.map\>/;'q;"	kind:func
set.map	set.m	/^:- pred set.map(pred(T1, T2), set(T1), set(T2)).$/;kq|/^\<set.map\>/;'q;"	kind:pred
set.map_fold	set.m	/^:- pred set.map_fold(pred(T1, T2, T3, T3), set(T1), set(T2), T3, T3).$/;kq|/^\<set.map_fold\>/;'q;"	kind:pred
set.member	set.m	/^:- pred set.member(T, set(T)).$/;kq|/^\<set.member\>/;'q;"	kind:pred
set.non_empty	set.m	/^:- pred set.non_empty(set(T)::in) is semidet.$/;kq|/^\<set.non_empty\>/;'q;"	kind:pred
set.power_intersect	set.m	/^:- func set.power_intersect(set(set(T))) = set(T).$/;kq|/^\<set.power_intersect\>/;'q;"	kind:func
set.power_intersect	set.m	/^:- pred set.power_intersect(set(set(T))::in, set(T)::out) is det.$/;kq|/^\<set.power_intersect\>/;'q;"	kind:pred
set.power_union	set.m	/^:- func set.power_union(set(set(T))) = set(T).$/;kq|/^\<set.power_union\>/;'q;"	kind:func
set.power_union	set.m	/^:- pred set.power_union(set(set(T))::in, set(T)::out) is det.$/;kq|/^\<set.power_union\>/;'q;"	kind:pred
set.remove	set.m	/^:- pred set.remove(T::in, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.remove\>/;'q;"	kind:pred
set.remove_least	set.m	/^:- pred set.remove_least(T::out, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.remove_least\>/;'q;"	kind:pred
set.remove_list	set.m	/^:- pred set.remove_list(list(T)::in, set(T)::in, set(T)::out) is semidet.$/;kq|/^\<set.remove_list\>/;'q;"	kind:pred
set.set	set.m	/^:- func set.set(list(T)) = set(T).$/;kq|/^\<set.set\>/;'q;"	kind:func
set.singleton_set	set.m	/^:- pred set.singleton_set(T, set(T)).$/;kq|/^\<set.singleton_set\>/;'q;"	kind:pred
set.sorted_list_to_set	set.m	/^:- func set.sorted_list_to_set(list(T)) = set(T).$/;kq|/^\<set.sorted_list_to_set\>/;'q;"	kind:func
set.sorted_list_to_set	set.m	/^:- pred set.sorted_list_to_set(list(T)::in, set(T)::out) is det.$/;kq|/^\<set.sorted_list_to_set\>/;'q;"	kind:pred
set.subset	set.m	/^:- pred set.subset(set(T)::in, set(T)::in) is semidet.$/;kq|/^\<set.subset\>/;'q;"	kind:pred
set.superset	set.m	/^:- pred set.superset(set(T)::in, set(T)::in) is semidet.$/;kq|/^\<set.superset\>/;'q;"	kind:pred
set.to_sorted_list	set.m	/^:- func set.to_sorted_list(set(T)) = list(T).$/;kq|/^\<set.to_sorted_list\>/;'q;"	kind:func
set.to_sorted_list	set.m	/^:- pred set.to_sorted_list(set(T)::in, list(T)::out) is det.$/;kq|/^\<set.to_sorted_list\>/;'q;"	kind:pred
set.union	set.m	/^:- func set.union(set(T), set(T)) = set(T).$/;kq|/^\<set.union\>/;'q;"	kind:func
set.union	set.m	/^:- pred set.union(set(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.union\>/;'q;"	kind:pred
set.union_list	set.m	/^:- func set.union_list(list(set(T))) = set(T).$/;kq|/^\<set.union_list\>/;'q;"	kind:func
set2	tree234.m	/^:- pred tree234.set2(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.set2\>/;'q;"	kind:pred	file:
set3	tree234.m	/^:- pred tree234.set3(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.set3\>/;'q;"	kind:pred	file:
set_2	injection.m	/^:- pred injection.set_2(K::in, V::in, map(K, V)::in, map(K, V)::out,$/;kq|/^\<injection.set_2\>/;'q;"	kind:pred	file:
set_2	rbtree.m	/^:- pred rbtree.set_2(rbtree(K, V), K, V, rbtree(K, V)).$/;kq|/^\<rbtree.set_2\>/;'q;"	kind:pred	file:
set_all	bit_buffer.m	/^:- pred set_all(bitmap::bitmap_di, bit_index::in, num_bits::in, State::di,$/;kq|/^\<set_all\>/;'q;"	kind:pred	file:
set_bbbtree	set_bbbtree.m	/^:- type set_bbbtree(T)$/;kq|-;/\<set_bbbtree\>/;'q;"	kind:type	file:
set_bbbtree.all_true	set_bbbtree.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), set_bbbtree(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
set_bbbtree.balance	set_bbbtree.m	/^:- pred set_bbbtree.balance(T::in, set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.balance\>/;'q;"	kind:pred	file:
set_bbbtree.build_node	set_bbbtree.m	/^:- pred set_bbbtree.build_node(T::in, set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.build_node\>/;'q;"	kind:pred	file:
set_bbbtree.concat3	set_bbbtree.m	/^:- pred set_bbbtree.concat3(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.concat3\>/;'q;"	kind:pred	file:
set_bbbtree.concat4	set_bbbtree.m	/^:- pred set_bbbtree.concat4(set_bbbtree(T)::in, set_bbbtree(T)::in, T::in,$/;kq|/^\<set_bbbtree.concat4\>/;'q;"	kind:pred	file:
set_bbbtree.contains	set_bbbtree.m	/^:- pred set_bbbtree.contains(set_bbbtree(T)::in, T::in) is semidet.$/;kq|/^\<set_bbbtree.contains\>/;'q;"	kind:pred
set_bbbtree.count	set_bbbtree.m	/^:- func set_bbbtree.count(set_bbbtree(T)) = int.$/;kq|/^\<set_bbbtree.count\>/;'q;"	kind:func
set_bbbtree.count	set_bbbtree.m	/^:- pred set_bbbtree.count(set_bbbtree(T)::in, int::out) is det.$/;kq|/^\<set_bbbtree.count\>/;'q;"	kind:pred
set_bbbtree.def_ratio	set_bbbtree.m	/^:- pred set_bbbtree.def_ratio(int::uo) is det.$/;kq|/^\<set_bbbtree.def_ratio\>/;'q;"	kind:pred	file:
set_bbbtree.delete	set_bbbtree.m	/^:- func set_bbbtree.delete(set_bbbtree(T), T) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.delete\>/;'q;"	kind:func
set_bbbtree.delete	set_bbbtree.m	/^:- pred set_bbbtree.delete(T, set_bbbtree(T), set_bbbtree(T)).$/;kq|/^\<set_bbbtree.delete\>/;'q;"	kind:pred
set_bbbtree.delete_list	set_bbbtree.m	/^:- func set_bbbtree.delete_list(set_bbbtree(T), list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.delete_list\>/;'q;"	kind:func
set_bbbtree.delete_list	set_bbbtree.m	/^:- pred set_bbbtree.delete_list(list(T)::in,$/;kq|/^\<set_bbbtree.delete_list\>/;'q;"	kind:pred
set_bbbtree.difference	set_bbbtree.m	/^:- func set_bbbtree.difference(set_bbbtree(T), set_bbbtree(T))$/;kq|/^\<set_bbbtree.difference\>/;'q;"	kind:func
set_bbbtree.difference	set_bbbtree.m	/^:- pred set_bbbtree.difference(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.difference\>/;'q;"	kind:pred
set_bbbtree.difference_r	set_bbbtree.m	/^:- pred set_bbbtree.difference_r(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.difference_r\>/;'q;"	kind:pred	file:
set_bbbtree.double_rot_l	set_bbbtree.m	/^:- pred set_bbbtree.double_rot_l(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.double_rot_l\>/;'q;"	kind:pred	file:
set_bbbtree.double_rot_r	set_bbbtree.m	/^:- pred set_bbbtree.double_rot_r(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.double_rot_r\>/;'q;"	kind:pred	file:
set_bbbtree.empty	set_bbbtree.m	/^    --->    empty$/;kq|-;/\<set_bbbtree.empty\>/;'q;"	kind:cons	file:
set_bbbtree.empty	set_bbbtree.m	/^:- pred set_bbbtree.empty(set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.empty\>/;'q;"	kind:pred
set_bbbtree.equal	set_bbbtree.m	/^:- pred set_bbbtree.equal(set_bbbtree(T)::in, set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.equal\>/;'q;"	kind:pred
set_bbbtree.filter	set_bbbtree.m	/^:- pred set_bbbtree.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_bbbtree.filter\>/;'q;"	kind:pred
set_bbbtree.filter	set_bbbtree.m	/^:- pred set_bbbtree.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_bbbtree.filter\>/;'q;"	kind:pred
set_bbbtree.filter_map	set_bbbtree.m	/^:- func set_bbbtree.filter_map(func(T1) = T2, set_bbbtree(T1))$/;kq|/^\<set_bbbtree.filter_map\>/;'q;"	kind:func
set_bbbtree.fold	set_bbbtree.m	/^:- func set_bbbtree.fold(func(T1, T2) = T2, set_bbbtree(T1), T2) = T2.$/;kq|/^\<set_bbbtree.fold\>/;'q;"	kind:func
set_bbbtree.fold	set_bbbtree.m	/^:- pred set_bbbtree.fold(pred(T1, T2, T2), set_bbbtree(T1), T2, T2).$/;kq|/^\<set_bbbtree.fold\>/;'q;"	kind:pred
set_bbbtree.fold2	set_bbbtree.m	/^:- pred set_bbbtree.fold2(pred(T1, T2, T2, T3, T3), set_bbbtree(T1),$/;kq|/^\<set_bbbtree.fold2\>/;'q;"	kind:pred
set_bbbtree.fold3	set_bbbtree.m	/^:- pred set_bbbtree.fold3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_bbbtree.fold3\>/;'q;"	kind:pred
set_bbbtree.fold4	set_bbbtree.m	/^:- pred set_bbbtree.fold4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_bbbtree.fold4\>/;'q;"	kind:pred
set_bbbtree.fold5	set_bbbtree.m	/^:- pred set_bbbtree.fold5($/;kq|/^\<set_bbbtree.fold5\>/;'q;"	kind:pred
set_bbbtree.fold6	set_bbbtree.m	/^:- pred set_bbbtree.fold6($/;kq|/^\<set_bbbtree.fold6\>/;'q;"	kind:pred
set_bbbtree.from_list	set_bbbtree.m	/^:- func set_bbbtree.from_list(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.from_list\>/;'q;"	kind:func
set_bbbtree.from_sorted_list	set_bbbtree.m	/^:- func set_bbbtree.from_sorted_list(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.from_sorted_list\>/;'q;"	kind:func
set_bbbtree.init	set_bbbtree.m	/^:- func set_bbbtree.init = set_bbbtree(T).$/;kq|/^\<set_bbbtree.init\>/;'q;"	kind:func
set_bbbtree.init	set_bbbtree.m	/^:- pred set_bbbtree.init(set_bbbtree(T)::uo) is det.$/;kq|/^\<set_bbbtree.init\>/;'q;"	kind:pred
set_bbbtree.insert	set_bbbtree.m	/^:- func set_bbbtree.insert(set_bbbtree(T), T) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.insert\>/;'q;"	kind:func
set_bbbtree.insert	set_bbbtree.m	/^:- pred set_bbbtree.insert(T, set_bbbtree(T), set_bbbtree(T)).$/;kq|/^\<set_bbbtree.insert\>/;'q;"	kind:pred
set_bbbtree.insert_list	set_bbbtree.m	/^:- func set_bbbtree.insert_list(set_bbbtree(T), list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.insert_list\>/;'q;"	kind:func
set_bbbtree.insert_list	set_bbbtree.m	/^:- pred set_bbbtree.insert_list(list(T)::in,$/;kq|/^\<set_bbbtree.insert_list\>/;'q;"	kind:pred
set_bbbtree.insert_list_r	set_bbbtree.m	/^:- pred set_bbbtree.insert_list_r(set_bbbtree(T)::in, list(T)::in,$/;kq|/^\<set_bbbtree.insert_list_r\>/;'q;"	kind:pred	file:
set_bbbtree.insert_new	set_bbbtree.m	/^:- pred set_bbbtree.insert_new(T::in,$/;kq|/^\<set_bbbtree.insert_new\>/;'q;"	kind:pred
set_bbbtree.insert_new_r	set_bbbtree.m	/^:- pred set_bbbtree.insert_new_r($/;kq|/^\<set_bbbtree.insert_new_r\>/;'q;"	kind:pred	file:
set_bbbtree.insert_r	set_bbbtree.m	/^:- pred set_bbbtree.insert_r(set_bbbtree(T)::in, T::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.insert_r\>/;'q;"	kind:pred	file:
set_bbbtree.intersect	set_bbbtree.m	/^:- func set_bbbtree.intersect(set_bbbtree(T), set_bbbtree(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.intersect\>/;'q;"	kind:func
set_bbbtree.intersect	set_bbbtree.m	/^:- pred set_bbbtree.intersect(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.intersect\>/;'q;"	kind:pred
set_bbbtree.intersect_list	set_bbbtree.m	/^:- func set_bbbtree.intersect_list(list(set_bbbtree(T))) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.intersect_list\>/;'q;"	kind:func
set_bbbtree.intersect_list_r	set_bbbtree.m	/^:- func set_bbbtree.intersect_list_r(set_bbbtree(T), list(set_bbbtree(T)),$/;kq|/^\<set_bbbtree.intersect_list_r\>/;'q;"	kind:func	file:
set_bbbtree.intersect_r	set_bbbtree.m	/^:- pred set_bbbtree.intersect_r(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.intersect_r\>/;'q;"	kind:pred	file:
set_bbbtree.is_empty	set_bbbtree.m	/^:- pred set_bbbtree.is_empty(set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.is_empty\>/;'q;"	kind:pred
set_bbbtree.is_member	set_bbbtree.m	/^:- pred set_bbbtree.is_member(T::in, set_bbbtree(T)::in, bool::out) is det.$/;kq|/^\<set_bbbtree.is_member\>/;'q;"	kind:pred
set_bbbtree.is_singleton	set_bbbtree.m	/^:- pred set_bbbtree.is_singleton(set_bbbtree(T)::in, T::out) is semidet.$/;kq|/^\<set_bbbtree.is_singleton\>/;'q;"	kind:pred
set_bbbtree.largest	set_bbbtree.m	/^:- pred set_bbbtree.largest(set_bbbtree(T), T).$/;kq|/^\<set_bbbtree.largest\>/;'q;"	kind:pred
set_bbbtree.least	set_bbbtree.m	/^:- pred set_bbbtree.least(set_bbbtree(T), T).$/;kq|/^\<set_bbbtree.least\>/;'q;"	kind:pred
set_bbbtree.list_to_set	set_bbbtree.m	/^:- func set_bbbtree.list_to_set(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.list_to_set\>/;'q;"	kind:func
set_bbbtree.list_to_set	set_bbbtree.m	/^:- pred set_bbbtree.list_to_set(list(T)::in, set_bbbtree(T)::out) is det.$/;kq|/^\<set_bbbtree.list_to_set\>/;'q;"	kind:pred
set_bbbtree.list_to_set_r	set_bbbtree.m	/^:- pred set_bbbtree.list_to_set_r(list(T)::in, set_bbbtree(T)::out, int::in)$/;kq|/^\<set_bbbtree.list_to_set_r\>/;'q;"	kind:pred	file:
set_bbbtree.make_singleton_set	set_bbbtree.m	/^:- func set_bbbtree.make_singleton_set(T) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.make_singleton_set\>/;'q;"	kind:func
set_bbbtree.map	set_bbbtree.m	/^:- func set_bbbtree.map(func(T1) = T2, set_bbbtree(T1)) = set_bbbtree(T2).$/;kq|/^\<set_bbbtree.map\>/;'q;"	kind:func
set_bbbtree.member	set_bbbtree.m	/^:- pred set_bbbtree.member(T, set_bbbtree(T)).$/;kq|/^\<set_bbbtree.member\>/;'q;"	kind:pred
set_bbbtree.non_empty	set_bbbtree.m	/^:- pred set_bbbtree.non_empty(set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.non_empty\>/;'q;"	kind:pred
set_bbbtree.power_intersect	set_bbbtree.m	/^:- func set_bbbtree.power_intersect(set_bbbtree(set_bbbtree(T)))$/;kq|/^\<set_bbbtree.power_intersect\>/;'q;"	kind:func
set_bbbtree.power_intersect	set_bbbtree.m	/^:- pred set_bbbtree.power_intersect(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_intersect\>/;'q;"	kind:pred
set_bbbtree.power_intersect_r	set_bbbtree.m	/^:- pred set_bbbtree.power_intersect_r(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_intersect_r\>/;'q;"	kind:pred	file:
set_bbbtree.power_intersect_r2	set_bbbtree.m	/^:- pred set_bbbtree.power_intersect_r2(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_intersect_r2\>/;'q;"	kind:pred	file:
set_bbbtree.power_union	set_bbbtree.m	/^:- func set_bbbtree.power_union(set_bbbtree(set_bbbtree(T))) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.power_union\>/;'q;"	kind:func
set_bbbtree.power_union	set_bbbtree.m	/^:- pred set_bbbtree.power_union(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_union\>/;'q;"	kind:pred
set_bbbtree.power_union_r	set_bbbtree.m	/^:- pred set_bbbtree.power_union_r(set_bbbtree(set_bbbtree(T))::in,$/;kq|/^\<set_bbbtree.power_union_r\>/;'q;"	kind:pred	file:
set_bbbtree.remove	set_bbbtree.m	/^:- pred set_bbbtree.remove(T::in, set_bbbtree(T)::in, set_bbbtree(T)::out)$/;kq|/^\<set_bbbtree.remove\>/;'q;"	kind:pred
set_bbbtree.remove_largest	set_bbbtree.m	/^:- pred set_bbbtree.remove_largest(T::out,$/;kq|/^\<set_bbbtree.remove_largest\>/;'q;"	kind:pred
set_bbbtree.remove_least	set_bbbtree.m	/^:- pred set_bbbtree.remove_least(T::out,$/;kq|/^\<set_bbbtree.remove_least\>/;'q;"	kind:pred
set_bbbtree.remove_list	set_bbbtree.m	/^:- pred set_bbbtree.remove_list(list(T)::in,$/;kq|/^\<set_bbbtree.remove_list\>/;'q;"	kind:pred
set_bbbtree.single_rot_l	set_bbbtree.m	/^:- pred set_bbbtree.single_rot_l(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.single_rot_l\>/;'q;"	kind:pred	file:
set_bbbtree.single_rot_r	set_bbbtree.m	/^:- pred set_bbbtree.single_rot_r(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.single_rot_r\>/;'q;"	kind:pred	file:
set_bbbtree.singleton_set	set_bbbtree.m	/^:- pred set_bbbtree.singleton_set(T, set_bbbtree(T)).$/;kq|/^\<set_bbbtree.singleton_set\>/;'q;"	kind:pred
set_bbbtree.sorted_list_to_set	set_bbbtree.m	/^:- func set_bbbtree.sorted_list_to_set(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.sorted_list_to_set\>/;'q;"	kind:func
set_bbbtree.sorted_list_to_set	set_bbbtree.m	/^:- pred set_bbbtree.sorted_list_to_set(list(T)::in, set_bbbtree(T)::out)$/;kq|/^\<set_bbbtree.sorted_list_to_set\>/;'q;"	kind:pred
set_bbbtree.split_gt	set_bbbtree.m	/^:- pred set_bbbtree.split_gt(set_bbbtree(T)::in, T::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.split_gt\>/;'q;"	kind:pred	file:
set_bbbtree.split_lt	set_bbbtree.m	/^:- pred set_bbbtree.split_lt(set_bbbtree(T)::in, T::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.split_lt\>/;'q;"	kind:pred	file:
set_bbbtree.subset	set_bbbtree.m	/^:- pred set_bbbtree.subset(set_bbbtree(T)::in, set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.subset\>/;'q;"	kind:pred
set_bbbtree.superset	set_bbbtree.m	/^:- pred set_bbbtree.superset(set_bbbtree(T)::in, set_bbbtree(T)::in)$/;kq|/^\<set_bbbtree.superset\>/;'q;"	kind:pred
set_bbbtree.to_sorted_list	set_bbbtree.m	/^:- func set_bbbtree.to_sorted_list(set_bbbtree(T)) = list(T).$/;kq|/^\<set_bbbtree.to_sorted_list\>/;'q;"	kind:func
set_bbbtree.to_sorted_list	set_bbbtree.m	/^:- pred set_bbbtree.to_sorted_list(set_bbbtree(T), list(T)).$/;kq|/^\<set_bbbtree.to_sorted_list\>/;'q;"	kind:pred
set_bbbtree.to_sorted_list2	set_bbbtree.m	/^:- pred set_bbbtree.to_sorted_list2(set_bbbtree(T), list(T), list(T)).$/;kq|/^\<set_bbbtree.to_sorted_list2\>/;'q;"	kind:pred	file:
set_bbbtree.tree	set_bbbtree.m	/^    ;       tree(T, int, set_bbbtree(T), set_bbbtree(T)).$/;kq|-;/\<set_bbbtree.tree\>/;'q;"	kind:cons	file:
set_bbbtree.union	set_bbbtree.m	/^:- func set_bbbtree.union(set_bbbtree(T), set_bbbtree(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.union\>/;'q;"	kind:func
set_bbbtree.union	set_bbbtree.m	/^:- pred set_bbbtree.union(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.union\>/;'q;"	kind:pred
set_bbbtree.union_list	set_bbbtree.m	/^:- func set_bbbtree.union_list(list(set_bbbtree(T))) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.union_list\>/;'q;"	kind:func
set_bbbtree.union_r	set_bbbtree.m	/^:- pred set_bbbtree.union_r(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.union_r\>/;'q;"	kind:pred	file:
set_binary_input_stream	io.m	/^:- pred io.set_binary_input_stream(io.binary_input_stream::in,$/;kq|/^\<io.set_binary_input_stream\>/;'q;"	kind:pred
set_binary_input_stream_2	io.m	/^:- pred io.set_binary_input_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_binary_input_stream_2\>/;'q;"	kind:pred	file:
set_binary_output_stream	io.m	/^:- pred io.set_binary_output_stream(io.binary_output_stream::in,$/;kq|/^\<io.set_binary_output_stream\>/;'q;"	kind:pred
set_binary_output_stream_2	io.m	/^:- pred io.set_binary_output_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_binary_output_stream_2\>/;'q;"	kind:pred	file:
set_bindings	varset.m	/^:- func varset.set_bindings(varset(T), substitution(T)) = varset(T).$/;kq|/^\<varset.set_bindings\>/;'q;"	kind:func
set_bindings	varset.m	/^:- pred varset.set_bindings(varset(T)::in, substitution(T)::in,$/;kq|/^\<varset.set_bindings\>/;'q;"	kind:pred
set_bit	fat_sparse_bitset.m	/^:- func set_bit(int, int) = int.$/;kq|/^\<set_bit\>/;'q;"	kind:func	file:
set_bit	sparse_bitset.m	/^:- func set_bit(int, int) = int.$/;kq|/^\<set_bit\>/;'q;"	kind:func	file:
set_bit	tree_bitset.m	/^:- func set_bit(int, int) = int.$/;kq|/^\<set_bit\>/;'q;"	kind:func	file:
set_bitmap	bit_buffer.m	/^:- pred set_bitmap(bitmap::bitmap_di, bit_index::in,$/;kq|/^\<set_bitmap\>/;'q;"	kind:pred	file:
set_bits_in_byte	bitmap.m	/^:- func set_bits_in_byte(byte, bit_index_in_byte, num_bits, byte) = byte.$/;kq|/^\<set_bits_in_byte\>/;'q;"	kind:func	file:
set_bits_in_byte_index	bitmap.m	/^:- pred set_bits_in_byte_index(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<set_bits_in_byte_index\>/;'q;"	kind:pred	file:
set_bits_in_bytes	bitmap.m	/^:- pred set_bits_in_bytes(byte_index, bit_index_in_byte, num_bits,$/;kq|/^\<set_bits_in_bytes\>/;'q;"	kind:pred	file:
set_buffer_error	bit_buffer.read.m	/^:- pred set_buffer_error(stream.res(Error)::in,$/;kq|/^\<set_buffer_error\>/;'q;"	kind:pred	file:
set_char	string.m	/^:- pred string.set_char(char, int, string, string).$/;kq|/^\<string.set_char\>/;'q;"	kind:pred
set_char_2	string.m	/^:- pred string.set_char_2(char, int, string, string).$/;kq|/^\<string.set_char_2\>/;'q;"	kind:pred	file:
set_ctree234	set_ctree234.m	/^:- type set_ctree234(T)$/;kq|-;/\<set_ctree234\>/;'q;"	kind:type	file:
set_ctree234.all_true	set_ctree234.m	/^:- pred set_ctree234.all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.all_true\>/;'q;"	kind:pred
set_ctree234.all_true_tree	set_ctree234.m	/^:- pred set_ctree234.all_true_tree(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.all_true_tree\>/;'q;"	kind:pred	file:
set_ctree234.contains	set_ctree234.m	/^:- pred set_ctree234.contains(set_ctree234(T)::in, T::in) is semidet.$/;kq|/^\<set_ctree234.contains\>/;'q;"	kind:pred
set_ctree234.count	set_ctree234.m	/^:- func set_ctree234.count(set_ctree234(T)) = int.$/;kq|/^\<set_ctree234.count\>/;'q;"	kind:func
set_ctree234.ct	set_ctree234.m	/^    --->    ct(int, set_tree234(T)).$/;kq|-;/\<set_ctree234.ct\>/;'q;"	kind:cons	file:
set_ctree234.delete	set_ctree234.m	/^:- func set_ctree234.delete(T, set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.delete\>/;'q;"	kind:func
set_ctree234.delete	set_ctree234.m	/^:- pred set_ctree234.delete(T::in, set_ctree234(T)::in, set_ctree234(T)::out)$/;kq|/^\<set_ctree234.delete\>/;'q;"	kind:pred
set_ctree234.delete_list	set_ctree234.m	/^:- func set_ctree234.delete_list(list(T), set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.delete_list\>/;'q;"	kind:func
set_ctree234.delete_list	set_ctree234.m	/^:- pred set_ctree234.delete_list(list(T)::in,$/;kq|/^\<set_ctree234.delete_list\>/;'q;"	kind:pred
set_ctree234.difference	set_ctree234.m	/^:- func set_ctree234.difference(set_ctree234(T), set_ctree234(T))$/;kq|/^\<set_ctree234.difference\>/;'q;"	kind:func
set_ctree234.difference	set_ctree234.m	/^:- pred set_ctree234.difference(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.difference\>/;'q;"	kind:pred
set_ctree234.divide	set_ctree234.m	/^:- pred set_ctree234.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.divide\>/;'q;"	kind:pred
set_ctree234.divide_by_set	set_ctree234.m	/^:- pred set_ctree234.divide_by_set(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.divide_by_set\>/;'q;"	kind:pred
set_ctree234.do_contains	set_ctree234.m	/^:- pred set_ctree234.do_contains(set_tree234(T)::in, T::in) is semidet.$/;kq|/^\<set_ctree234.do_contains\>/;'q;"	kind:pred	file:
set_ctree234.do_count	set_ctree234.m	/^:- func set_ctree234.do_count(set_tree234(T)) = int.$/;kq|/^\<set_ctree234.do_count\>/;'q;"	kind:func	file:
set_ctree234.do_delete	set_ctree234.m	/^:- pred set_ctree234.do_delete(T::in, int::out, set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_delete\>/;'q;"	kind:pred	file:
set_ctree234.do_delete_list	set_ctree234.m	/^:- pred set_ctree234.do_delete_list(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_delete_list\>/;'q;"	kind:pred	file:
set_ctree234.do_difference	set_ctree234.m	/^:- pred set_ctree234.do_difference(set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_difference\>/;'q;"	kind:pred	file:
set_ctree234.do_divide	set_ctree234.m	/^:- pred set_ctree234.do_divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.do_divide\>/;'q;"	kind:pred	file:
set_ctree234.do_fold2_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold2_pred($/;kq|/^\<set_ctree234.do_fold2_pred\>/;'q;"	kind:pred	file:
set_ctree234.do_fold3_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold3_pred($/;kq|/^\<set_ctree234.do_fold3_pred\>/;'q;"	kind:pred	file:
set_ctree234.do_fold4_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold4_pred($/;kq|/^\<set_ctree234.do_fold4_pred\>/;'q;"	kind:pred	file:
set_ctree234.do_fold5_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold5_pred($/;kq|/^\<set_ctree234.do_fold5_pred\>/;'q;"	kind:pred	file:
set_ctree234.do_fold6_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold6_pred($/;kq|/^\<set_ctree234.do_fold6_pred\>/;'q;"	kind:pred	file:
set_ctree234.do_fold_func	set_ctree234.m	/^:- pred set_ctree234.do_fold_func($/;kq|/^\<set_ctree234.do_fold_func\>/;'q;"	kind:pred	file:
set_ctree234.do_fold_pred	set_ctree234.m	/^:- pred set_ctree234.do_fold_pred(pred(T1, T2, T2), set_tree234(T1),$/;kq|/^\<set_ctree234.do_fold_pred\>/;'q;"	kind:pred	file:
set_ctree234.do_insert	set_ctree234.m	/^:- pred set_ctree234.do_insert(T::in, int::out,$/;kq|/^\<set_ctree234.do_insert\>/;'q;"	kind:pred	file:
set_ctree234.do_insert_list	set_ctree234.m	/^:- pred set_ctree234.do_insert_list(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_insert_list\>/;'q;"	kind:pred	file:
set_ctree234.do_insert_new	set_ctree234.m	/^:- pred set_ctree234.do_insert_new(T::in,$/;kq|/^\<set_ctree234.do_insert_new\>/;'q;"	kind:pred	file:
set_ctree234.do_intersect	set_ctree234.m	/^:- pred set_ctree234.do_intersect(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_intersect\>/;'q;"	kind:pred	file:
set_ctree234.do_intersect_list	set_ctree234.m	/^:- pred set_ctree234.do_intersect_list(int::in, set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_intersect_list\>/;'q;"	kind:pred	file:
set_ctree234.do_is_member	set_ctree234.m	/^:- pred set_ctree234.do_is_member(set_tree234(T)::in, T::in, bool::out)$/;kq|/^\<set_ctree234.do_is_member\>/;'q;"	kind:pred	file:
set_ctree234.do_list_to_set	set_ctree234.m	/^:- pred set_ctree234.do_list_to_set(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_list_to_set\>/;'q;"	kind:pred	file:
set_ctree234.do_one_member	set_ctree234.m	/^:- pred set_ctree234.do_one_member(set_tree234(T)::in, T::out) is nondet.$/;kq|/^\<set_ctree234.do_one_member\>/;'q;"	kind:pred	file:
set_ctree234.do_power_union	set_ctree234.m	/^:- pred set_ctree234.do_power_union(set_tree234(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.do_power_union\>/;'q;"	kind:pred	file:
set_ctree234.do_remove	set_ctree234.m	/^:- pred set_ctree234.do_remove(T::in, set_tree234(T)::in, set_tree234(T)::out,$/;kq|/^\<set_ctree234.do_remove\>/;'q;"	kind:pred	file:
set_ctree234.do_remove_least	set_ctree234.m	/^:- pred set_ctree234.do_remove_least(set_tree234(T)::in, T::out,$/;kq|/^\<set_ctree234.do_remove_least\>/;'q;"	kind:pred	file:
set_ctree234.do_remove_list	set_ctree234.m	/^:- pred set_ctree234.do_remove_list(list(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_remove_list\>/;'q;"	kind:pred	file:
set_ctree234.do_subset	set_ctree234.m	/^:- pred set_ctree234.do_subset(set_tree234(T)::in, set_tree234(T)::in)$/;kq|/^\<set_ctree234.do_subset\>/;'q;"	kind:pred	file:
set_ctree234.do_to_sorted_list	set_ctree234.m	/^:- pred set_ctree234.do_to_sorted_list(set_tree234(T)::in,$/;kq|/^\<set_ctree234.do_to_sorted_list\>/;'q;"	kind:pred	file:
set_ctree234.do_union	set_ctree234.m	/^:- pred set_ctree234.do_union(set_tree234(T)::in, int::in, int::out,$/;kq|/^\<set_ctree234.do_union\>/;'q;"	kind:pred	file:
set_ctree234.do_union_list	set_ctree234.m	/^:- pred set_ctree234.do_union_list(list(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.do_union_list\>/;'q;"	kind:pred	file:
set_ctree234.do_verify_depths	set_ctree234.m	/^:- pred do_verify_depths(set_tree234(T)::in, int::in,$/;kq|/^\<do_verify_depths\>/;'q;"	kind:pred	file:
set_ctree234.empty	set_ctree234.m	/^    --->    empty$/;kq|-;/\<set_ctree234.empty\>/;'q;"	kind:cons	file:
set_ctree234.empty	set_ctree234.m	/^:- pred set_ctree234.empty(set_ctree234(_T)::in) is semidet.$/;kq|/^\<set_ctree234.empty\>/;'q;"	kind:pred
set_ctree234.equal	set_ctree234.m	/^:- pred set_ctree234.equal(set_ctree234(T)::in, set_ctree234(T)::in)$/;kq|/^\<set_ctree234.equal\>/;'q;"	kind:pred
set_ctree234.filter	set_ctree234.m	/^:- pred set_ctree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.filter\>/;'q;"	kind:pred
set_ctree234.filter	set_ctree234.m	/^:- pred set_ctree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ctree234.filter\>/;'q;"	kind:pred
set_ctree234.filter_map	set_ctree234.m	/^:- func set_ctree234.filter_map(func(T1) = T2, set_ctree234(T1))$/;kq|/^\<set_ctree234.filter_map\>/;'q;"	kind:func
set_ctree234.filter_map	set_ctree234.m	/^:- pred set_ctree234.filter_map(pred(T1, T2)::in(pred(in, out) is semidet),$/;kq|/^\<set_ctree234.filter_map\>/;'q;"	kind:pred
set_ctree234.filter_map_func	set_ctree234.m	/^:- pred set_ctree234.filter_map_func($/;kq|/^\<set_ctree234.filter_map_func\>/;'q;"	kind:pred	file:
set_ctree234.filter_map_pred	set_ctree234.m	/^:- pred set_ctree234.filter_map_pred($/;kq|/^\<set_ctree234.filter_map_pred\>/;'q;"	kind:pred	file:
set_ctree234.fix_2node_t0	set_ctree234.m	/^:- pred fix_2node_t0(T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_2node_t0\>/;'q;"	kind:pred	file:
set_ctree234.fix_2node_t1	set_ctree234.m	/^:- pred fix_2node_t1(T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_2node_t1\>/;'q;"	kind:pred	file:
set_ctree234.fix_3node_t0	set_ctree234.m	/^:- pred fix_3node_t0(T::in, T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_3node_t0\>/;'q;"	kind:pred	file:
set_ctree234.fix_3node_t1	set_ctree234.m	/^:- pred fix_3node_t1(T::in, T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_3node_t1\>/;'q;"	kind:pred	file:
set_ctree234.fix_3node_t2	set_ctree234.m	/^:- pred fix_3node_t2(T::in, T::in, set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<fix_3node_t2\>/;'q;"	kind:pred	file:
set_ctree234.fix_4node_t0	set_ctree234.m	/^:- pred fix_4node_t0(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t0\>/;'q;"	kind:pred	file:
set_ctree234.fix_4node_t1	set_ctree234.m	/^:- pred fix_4node_t1(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t1\>/;'q;"	kind:pred	file:
set_ctree234.fix_4node_t2	set_ctree234.m	/^:- pred fix_4node_t2(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t2\>/;'q;"	kind:pred	file:
set_ctree234.fix_4node_t3	set_ctree234.m	/^:- pred fix_4node_t3(T::in, T::in, T::in,$/;kq|/^\<fix_4node_t3\>/;'q;"	kind:pred	file:
set_ctree234.fold	set_ctree234.m	/^:- func set_ctree234.fold(func(T1, T2) = T2, set_ctree234(T1), T2) = T2.$/;kq|/^\<set_ctree234.fold\>/;'q;"	kind:func
set_ctree234.fold	set_ctree234.m	/^:- pred set_ctree234.fold(pred(T1, T2, T2), set_ctree234(T1), T2, T2).$/;kq|/^\<set_ctree234.fold\>/;'q;"	kind:pred
set_ctree234.fold2	set_ctree234.m	/^:- pred set_ctree234.fold2(pred(T1, T2, T2, T3, T3), set_ctree234(T1),$/;kq|/^\<set_ctree234.fold2\>/;'q;"	kind:pred
set_ctree234.fold3	set_ctree234.m	/^:- pred set_ctree234.fold3($/;kq|/^\<set_ctree234.fold3\>/;'q;"	kind:pred
set_ctree234.fold4	set_ctree234.m	/^:- pred set_ctree234.fold4($/;kq|/^\<set_ctree234.fold4\>/;'q;"	kind:pred
set_ctree234.fold5	set_ctree234.m	/^:- pred set_ctree234.fold5($/;kq|/^\<set_ctree234.fold5\>/;'q;"	kind:pred
set_ctree234.fold6	set_ctree234.m	/^:- pred set_ctree234.fold6($/;kq|/^\<set_ctree234.fold6\>/;'q;"	kind:pred
set_ctree234.four	set_ctree234.m	/^    ;       four(T, T, T, set_tree234(T), set_tree234(T),$/;kq|-;/\<set_ctree234.four\>/;'q;"	kind:cons	file:
set_ctree234.four	set_ctree234.m	/^:- inst four(E, T)  ---> four(E, E, E, T, T, T, T).$/;kq|-;/\<set_ctree234.four\>/;'q;"	kind:inst	file:
set_ctree234.from_list	set_ctree234.m	/^:- func set_ctree234.from_list(list(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.from_list\>/;'q;"	kind:func
set_ctree234.in_four	set_ctree234.m	/^:- mode in_four  == in(four(ground, ground)).$/;kq|-;/\<set_ctree234.in_four\>/;'q;"	kind:mode	file:
set_ctree234.in_three	set_ctree234.m	/^:- mode in_three  == in(three(ground, ground)).$/;kq|-;/\<set_ctree234.in_three\>/;'q;"	kind:mode	file:
set_ctree234.in_two	set_ctree234.m	/^:- mode in_two  == in(two(ground, ground)).$/;kq|-;/\<set_ctree234.in_two\>/;'q;"	kind:mode	file:
set_ctree234.init	set_ctree234.m	/^:- func set_ctree234.init = set_ctree234(T).$/;kq|/^\<set_ctree234.init\>/;'q;"	kind:func
set_ctree234.insert	set_ctree234.m	/^:- func set_ctree234.insert(T, set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.insert\>/;'q;"	kind:func
set_ctree234.insert	set_ctree234.m	/^:- pred set_ctree234.insert(T::in, set_ctree234(T)::in, set_ctree234(T)::out)$/;kq|/^\<set_ctree234.insert\>/;'q;"	kind:pred
set_ctree234.insert2	set_ctree234.m	/^:- pred set_ctree234.insert2(T::in, int::out,$/;kq|/^\<set_ctree234.insert2\>/;'q;"	kind:pred	file:
set_ctree234.insert3	set_ctree234.m	/^:- pred set_ctree234.insert3(T::in, int::out,$/;kq|/^\<set_ctree234.insert3\>/;'q;"	kind:pred	file:
set_ctree234.insert_list	set_ctree234.m	/^:- func set_ctree234.insert_list(list(T), set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.insert_list\>/;'q;"	kind:func
set_ctree234.insert_list	set_ctree234.m	/^:- pred set_ctree234.insert_list(list(T)::in,$/;kq|/^\<set_ctree234.insert_list\>/;'q;"	kind:pred
set_ctree234.insert_new	set_ctree234.m	/^:- pred set_ctree234.insert_new(T::in,$/;kq|/^\<set_ctree234.insert_new\>/;'q;"	kind:pred
set_ctree234.insert_new2	set_ctree234.m	/^:- pred set_ctree234.insert_new2(T::in,$/;kq|/^\<set_ctree234.insert_new2\>/;'q;"	kind:pred	file:
set_ctree234.insert_new3	set_ctree234.m	/^:- pred set_ctree234.insert_new3(T::in,$/;kq|/^\<set_ctree234.insert_new3\>/;'q;"	kind:pred	file:
set_ctree234.intersect	set_ctree234.m	/^:- func set_ctree234.intersect(set_ctree234(T), set_ctree234(T))$/;kq|/^\<set_ctree234.intersect\>/;'q;"	kind:func
set_ctree234.intersect	set_ctree234.m	/^:- pred set_ctree234.intersect(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.intersect\>/;'q;"	kind:pred
set_ctree234.intersect_list	set_ctree234.m	/^:- func set_ctree234.intersect_list(list(set_ctree234(T))) = set_ctree234(T).$/;kq|/^\<set_ctree234.intersect_list\>/;'q;"	kind:func
set_ctree234.is_empty	set_ctree234.m	/^:- pred set_ctree234.is_empty(set_ctree234(_T)::in) is semidet.$/;kq|/^\<set_ctree234.is_empty\>/;'q;"	kind:pred
set_ctree234.is_member	set_ctree234.m	/^:- func set_ctree234.is_member(set_ctree234(T), T) = bool.$/;kq|/^\<set_ctree234.is_member\>/;'q;"	kind:func
set_ctree234.is_member	set_ctree234.m	/^:- pred set_ctree234.is_member(set_ctree234(T)::in, T::in, bool::out) is det.$/;kq|/^\<set_ctree234.is_member\>/;'q;"	kind:pred
set_ctree234.is_singleton	set_ctree234.m	/^:- pred set_ctree234.is_singleton(set_ctree234(T)::in, T::out) is semidet.$/;kq|/^\<set_ctree234.is_singleton\>/;'q;"	kind:pred
set_ctree234.list_to_set	set_ctree234.m	/^:- func set_ctree234.list_to_set(list(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.list_to_set\>/;'q;"	kind:func
set_ctree234.map	set_ctree234.m	/^:- func set_ctree234.map(func(T1) = T2, set_ctree234(T1)) = set_ctree234(T2).$/;kq|/^\<set_ctree234.map\>/;'q;"	kind:func
set_ctree234.map	set_ctree234.m	/^:- pred set_ctree234.map(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_ctree234.map\>/;'q;"	kind:pred
set_ctree234.map_func	set_ctree234.m	/^:- pred set_ctree234.map_func((func(T1) = T2)::in((func(in) = out) is det),$/;kq|/^\<set_ctree234.map_func\>/;'q;"	kind:pred	file:
set_ctree234.map_pred	set_ctree234.m	/^:- pred set_ctree234.map_pred(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_ctree234.map_pred\>/;'q;"	kind:pred	file:
set_ctree234.max_level_sizes	set_ctree234.m	/^:- pred max_level_sizes(int::in, int::in, int::in,$/;kq|/^\<max_level_sizes\>/;'q;"	kind:pred	file:
set_ctree234.member	set_ctree234.m	/^:- pred set_ctree234.member(T, set_ctree234(T)).$/;kq|/^\<set_ctree234.member\>/;'q;"	kind:pred
set_ctree234.non_empty	set_ctree234.m	/^:- pred set_ctree234.non_empty(set_ctree234(T)::in) is semidet.$/;kq|/^\<set_ctree234.non_empty\>/;'q;"	kind:pred
set_ctree234.one_member	set_ctree234.m	/^:- pred set_ctree234.one_member(set_ctree234(T)::in, T::out) is nondet.$/;kq|/^\<set_ctree234.one_member\>/;'q;"	kind:pred
set_ctree234.out_two	set_ctree234.m	/^:- mode out_two == out(two(ground, ground)).$/;kq|-;/\<set_ctree234.out_two\>/;'q;"	kind:mode	file:
set_ctree234.power_intersect	set_ctree234.m	/^:- func set_ctree234.power_intersect(set_ctree234(set_ctree234(T)))$/;kq|/^\<set_ctree234.power_intersect\>/;'q;"	kind:func
set_ctree234.power_union	set_ctree234.m	/^:- func set_ctree234.power_union(set_ctree234(set_ctree234(T)))$/;kq|/^\<set_ctree234.power_union\>/;'q;"	kind:func
set_ctree234.power_union	set_ctree234.m	/^:- pred set_ctree234.power_union(set_ctree234(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.power_union\>/;'q;"	kind:pred
set_ctree234.remove	set_ctree234.m	/^:- pred set_ctree234.remove(T::in, set_ctree234(T)::in, set_ctree234(T)::out)$/;kq|/^\<set_ctree234.remove\>/;'q;"	kind:pred
set_ctree234.remove_least	set_ctree234.m	/^:- pred set_ctree234.remove_least(T::out,$/;kq|/^\<set_ctree234.remove_least\>/;'q;"	kind:pred
set_ctree234.remove_list	set_ctree234.m	/^:- pred set_ctree234.remove_list(list(T)::in,$/;kq|/^\<set_ctree234.remove_list\>/;'q;"	kind:pred
set_ctree234.set_tree234	set_ctree234.m	/^:- type set_tree234(T)$/;kq|-;/\<set_ctree234.set_tree234\>/;'q;"	kind:type	file:
set_ctree234.singleton_set	set_ctree234.m	/^:- pred set_ctree234.singleton_set(T, set_ctree234(T)).$/;kq|/^\<set_ctree234.singleton_set\>/;'q;"	kind:pred
set_ctree234.split_four	set_ctree234.m	/^:- pred set_ctree234.split_four(set_tree234(T)::in_four, T::out,$/;kq|/^\<set_ctree234.split_four\>/;'q;"	kind:pred	file:
set_ctree234.subset	set_ctree234.m	/^:- pred set_ctree234.subset(set_ctree234(T)::in, set_ctree234(T)::in)$/;kq|/^\<set_ctree234.subset\>/;'q;"	kind:pred
set_ctree234.superset	set_ctree234.m	/^:- pred set_ctree234.superset(set_ctree234(T)::in, set_ctree234(T)::in)$/;kq|/^\<set_ctree234.superset\>/;'q;"	kind:pred
set_ctree234.three	set_ctree234.m	/^    ;       three(T, T, set_tree234(T), set_tree234(T), set_tree234(T))$/;kq|-;/\<set_ctree234.three\>/;'q;"	kind:cons	file:
set_ctree234.three	set_ctree234.m	/^:- inst three(E, T) ---> three(E, E, T, T, T).$/;kq|-;/\<set_ctree234.three\>/;'q;"	kind:inst	file:
set_ctree234.to_sorted_list	set_ctree234.m	/^:- func set_ctree234.to_sorted_list(set_ctree234(T)) = list(T).$/;kq|/^\<set_ctree234.to_sorted_list\>/;'q;"	kind:func
set_ctree234.two	set_ctree234.m	/^    ;       two(T, set_tree234(T), set_tree234(T))$/;kq|-;/\<set_ctree234.two\>/;'q;"	kind:cons	file:
set_ctree234.two	set_ctree234.m	/^:- inst two(E, T)   ---> two(E, T, T).$/;kq|-;/\<set_ctree234.two\>/;'q;"	kind:inst	file:
set_ctree234.union	set_ctree234.m	/^:- func set_ctree234.union(set_ctree234(T), set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.union\>/;'q;"	kind:func
set_ctree234.union	set_ctree234.m	/^:- pred set_ctree234.union(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.union\>/;'q;"	kind:pred
set_ctree234.union_list	set_ctree234.m	/^:- func set_ctree234.union_list(list(set_ctree234(T))) = set_ctree234(T).$/;kq|/^\<set_ctree234.union_list\>/;'q;"	kind:func
set_ctree234.union_list	set_ctree234.m	/^:- pred set_ctree234.union_list(list(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.union_list\>/;'q;"	kind:pred
set_ctree234.verify_depths	set_ctree234.m	/^:- pred verify_depths(set_ctree234(T)::in, list(int)::out) is det.$/;kq|/^\<verify_depths\>/;'q;"	kind:pred
set_default_formatter	pretty_printer.m	/^:- pred set_default_formatter(string::in, string::in, int::in, formatter::in,$/;kq|/^\<set_default_formatter\>/;'q;"	kind:pred
set_default_formatter_map	pretty_printer.m	/^:- pred set_default_formatter_map(formatter_map::in, io::di, io::uo) is det.$/;kq|/^\<set_default_formatter_map\>/;'q;"	kind:pred
set_default_params	pretty_printer.m	/^:- pred set_default_params(pp_params::in, io::di, io::uo) is det.$/;kq|/^\<set_default_params\>/;'q;"	kind:pred
set_environment_var	io.m	/^:- pred io.set_environment_var(string::in, string::in, io::di, io::uo) is det.$/;kq|/^\<io.set_environment_var\>/;'q;"	kind:pred
set_exit_status	io.m	/^:- pred io.set_exit_status(int::in, io::di, io::uo) is det.$/;kq|/^\<io.set_exit_status\>/;'q;"	kind:pred
set_formatter	pretty_printer.m	/^:- func set_formatter(string, string, int, formatter, formatter_map) =$/;kq|/^\<set_formatter\>/;'q;"	kind:func
set_formatter_sv	pretty_printer.m	/^:- pred set_formatter_sv(string::in, string::in, int::in, formatter::in,$/;kq|/^\<set_formatter_sv\>/;'q;"	kind:pred	file:
set_formatting_limit_correctly	pretty_printer.m	/^:- func set_formatting_limit_correctly(formatting_limit, doc) = doc.$/;kq|/^\<set_formatting_limit_correctly\>/;'q;"	kind:func	file:
set_from_assoc_list	bimap.m	/^:- func bimap.set_from_assoc_list(assoc_list(K, V), bimap(K, V))$/;kq|/^\<bimap.set_from_assoc_list\>/;'q;"	kind:func
set_from_assoc_list	bimap.m	/^:- pred bimap.set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<bimap.set_from_assoc_list\>/;'q;"	kind:pred
set_from_assoc_list	injection.m	/^:- func injection.set_from_assoc_list(assoc_list(K, V), injection(K, V)) =$/;kq|/^\<injection.set_from_assoc_list\>/;'q;"	kind:func
set_from_assoc_list	injection.m	/^:- pred injection.set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<injection.set_from_assoc_list\>/;'q;"	kind:pred
set_from_assoc_list	map.m	/^:- func map.set_from_assoc_list(map(K, V), assoc_list(K, V)) = map(K, V).$/;kq|/^\<map.set_from_assoc_list\>/;'q;"	kind:func
set_from_assoc_list	map.m	/^:- pred map.set_from_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<map.set_from_assoc_list\>/;'q;"	kind:pred
set_from_corresponding_lists	bimap.m	/^:- func bimap.set_from_corresponding_lists(list(K), list(V),$/;kq|/^\<bimap.set_from_corresponding_lists\>/;'q;"	kind:func
set_from_corresponding_lists	bimap.m	/^:- pred bimap.set_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<bimap.set_from_corresponding_lists\>/;'q;"	kind:pred
set_from_corresponding_lists	injection.m	/^:- func injection.set_from_corresponding_lists(list(K), list(V),$/;kq|/^\<injection.set_from_corresponding_lists\>/;'q;"	kind:func
set_from_corresponding_lists	injection.m	/^:- pred injection.set_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<injection.set_from_corresponding_lists\>/;'q;"	kind:pred
set_from_corresponding_lists	map.m	/^:- func map.set_from_corresponding_lists(map(K, V), list(K), list(V))$/;kq|/^\<map.set_from_corresponding_lists\>/;'q;"	kind:func
set_from_corresponding_lists	map.m	/^:- pred map.set_from_corresponding_lists(list(K)::in, list(V)::in,$/;kq|/^\<map.set_from_corresponding_lists\>/;'q;"	kind:pred
set_get_message_hook	exception.m	/^:- pred set_get_message_hook(io::di, io::uo) is det.$/;kq|/^\<set_get_message_hook\>/;'q;"	kind:pred	file:
set_globals	io.m	/^:- pred io.set_globals(univ::in, io::di, io::uo) is det.$/;kq|/^\<io.set_globals\>/;'q;"	kind:pred
set_if_in_range	version_array.m	/^:- pred set_if_in_range(int::in, T::in,$/;kq|/^\<set_if_in_range\>/;'q;"	kind:pred	file:
set_input_stream	io.m	/^:- pred io.set_input_stream(io.input_stream::in, io.input_stream::out,$/;kq|/^\<io.set_input_stream\>/;'q;"	kind:pred
set_input_stream_2	io.m	/^:- pred io.set_input_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_input_stream_2\>/;'q;"	kind:pred	file:
set_limit	pretty_printer.m	/^    ;       set_limit(formatting_limit).$/;kq|-;/\<set_limit\>/;'q;"	kind:cons	file:
set_line	io.m	/^    pred(set_line\/4) is io.set_line_number$/;kq|-;/\<set_line\>/;'q;"	kind:tcim	file:
set_line	io.m	/^    pred(set_line\/4) is io.set_output_line_number$/;kq|-;/\<set_line\>/;'q;"	kind:tcim	file:
set_line	stream.m	/^    pred set_line(Stream::in, int::in,  State::di, State::uo) is det$/;kq|-;/\<set_line\>/;'q;"	kind:tcm
set_line_number	io.m	/^:- pred io.set_line_number(int::in, io::di, io::uo) is det.$/;kq|/^\<io.set_line_number\>/;'q;"	kind:pred
set_line_number	io.m	/^:- pred io.set_line_number(io.input_stream::in, int::in, io::di, io::uo)$/;kq|/^\<io.set_line_number\>/;'q;"	kind:pred
set_line_number_2	io.m	/^:- pred io.set_line_number_2(io.stream::in, int::in, io::di, io::uo)$/;kq|/^\<io.set_line_number_2\>/;'q;"	kind:pred	file:
set_mutvar	mutvar.m	/^:-        pred set_mutvar(ui, di) is det.$/;kq|/^\<set_mutvar\>/;'q;"	kind:pred
set_mutvar	mutvar.m	/^:- impure pred set_mutvar(mutvar(T), T) is det.$/;kq|/^\<set_mutvar\>/;'q;"	kind:pred
set_mutvar	store.m	/^:- pred store.set_mutvar(generic_mutvar(T, S)::in, T::in,$/;kq|/^\<store.set_mutvar\>/;'q;"	kind:pred
set_mutvar	version_store.m	/^:- pred set_mutvar(mutvar(T, S)::in, T::in,$/;kq|/^\<set_mutvar\>/;'q;"	kind:pred
set_op_priority	pretty_printer.m	/^    ;       set_op_priority(ops.priority)$/;kq|-;/\<set_op_priority\>/;'q;"	kind:cons	file:
set_op_table	io.m	/^:- pred io.set_op_table(ops.table::di, io::di, io::uo) is det.$/;kq|/^\<io.set_op_table\>/;'q;"	kind:pred
set_ordlist	set_ordlist.m	/^:- type set_ordlist(T)$/;kq|-;/\<set_ordlist\>/;'q;"	kind:type	file:
set_ordlist.all_true	set_ordlist.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), set_ordlist(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
set_ordlist.contains	set_ordlist.m	/^:- pred set_ordlist.contains(set_ordlist(T)::in, T::in) is semidet.$/;kq|/^\<set_ordlist.contains\>/;'q;"	kind:pred
set_ordlist.count	set_ordlist.m	/^:- func set_ordlist.count(set_ordlist(T)) = int.$/;kq|/^\<set_ordlist.count\>/;'q;"	kind:func
set_ordlist.count	set_ordlist.m	/^:- pred set_ordlist.count(set_ordlist(T)::in, int::out) is det.$/;kq|/^\<set_ordlist.count\>/;'q;"	kind:pred
set_ordlist.delete	set_ordlist.m	/^:- func set_ordlist.delete(set_ordlist(T), T) = set_ordlist(T).$/;kq|/^\<set_ordlist.delete\>/;'q;"	kind:func
set_ordlist.delete	set_ordlist.m	/^:- pred set_ordlist.delete(T::in, set_ordlist(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.delete\>/;'q;"	kind:pred
set_ordlist.delete_list	set_ordlist.m	/^:- func set_ordlist.delete_list(set_ordlist(T), list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.delete_list\>/;'q;"	kind:func
set_ordlist.delete_list	set_ordlist.m	/^:- pred set_ordlist.delete_list(list(T)::in,$/;kq|/^\<set_ordlist.delete_list\>/;'q;"	kind:pred
set_ordlist.difference	set_ordlist.m	/^:- func set_ordlist.difference(set_ordlist(T), set_ordlist(T))$/;kq|/^\<set_ordlist.difference\>/;'q;"	kind:func
set_ordlist.difference	set_ordlist.m	/^:- pred set_ordlist.difference(set_ordlist(T)::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.difference\>/;'q;"	kind:pred
set_ordlist.difference_2	set_ordlist.m	/^:- pred set_ordlist.difference_2(list(T)::in, list(T)::in, list(T)::out)$/;kq|/^\<set_ordlist.difference_2\>/;'q;"	kind:pred	file:
set_ordlist.divide	set_ordlist.m	/^:- pred set_ordlist.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_ordlist.divide\>/;'q;"	kind:pred
set_ordlist.divide_2	set_ordlist.m	/^:- pred set_ordlist.divide_2(pred(T)::in(pred(in) is semidet), list(T)::in,$/;kq|/^\<set_ordlist.divide_2\>/;'q;"	kind:pred	file:
set_ordlist.divide_by_set	set_ordlist.m	/^:- pred set_ordlist.divide_by_set(set_ordlist(T)::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.divide_by_set\>/;'q;"	kind:pred
set_ordlist.divide_by_set_2	set_ordlist.m	/^:- pred set_ordlist.divide_by_set_2(list(T1)::in, list(T1)::in,$/;kq|/^\<set_ordlist.divide_by_set_2\>/;'q;"	kind:pred	file:
set_ordlist.empty	set_ordlist.m	/^:- pred set_ordlist.empty(set_ordlist(_T)::in) is semidet.$/;kq|/^\<set_ordlist.empty\>/;'q;"	kind:pred
set_ordlist.equal	set_ordlist.m	/^:- pred set_ordlist.equal(set_ordlist(T)::in, set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.equal\>/;'q;"	kind:pred
set_ordlist.filter	set_ordlist.m	/^:- func set_ordlist.filter(pred(T1), set_ordlist(T1)) = set_ordlist(T1).$/;kq|/^\<set_ordlist.filter\>/;'q;"	kind:func
set_ordlist.filter	set_ordlist.m	/^:- pred set_ordlist.filter(pred(T1), set_ordlist(T1), set_ordlist(T1)).$/;kq|/^\<set_ordlist.filter\>/;'q;"	kind:pred
set_ordlist.filter	set_ordlist.m	/^:- pred set_ordlist.filter(pred(T1), set_ordlist(T1),$/;kq|/^\<set_ordlist.filter\>/;'q;"	kind:pred
set_ordlist.filter_map	set_ordlist.m	/^:- func set_ordlist.filter_map(func(T1) = T2, set_ordlist(T1))$/;kq|/^\<set_ordlist.filter_map\>/;'q;"	kind:func
set_ordlist.filter_map	set_ordlist.m	/^:- pred set_ordlist.filter_map(pred(T1, T2), set_ordlist(T1),$/;kq|/^\<set_ordlist.filter_map\>/;'q;"	kind:pred
set_ordlist.fold	set_ordlist.m	/^:- func set_ordlist.fold(func(T1, T2) = T2, set_ordlist(T1), T2) = T2.$/;kq|/^\<set_ordlist.fold\>/;'q;"	kind:func
set_ordlist.fold	set_ordlist.m	/^:- pred set_ordlist.fold(pred(T1, T2, T2), set_ordlist(T1), T2, T2).$/;kq|/^\<set_ordlist.fold\>/;'q;"	kind:pred
set_ordlist.fold2	set_ordlist.m	/^:- pred set_ordlist.fold2(pred(T1, T2, T2, T3, T3), set_ordlist(T1),$/;kq|/^\<set_ordlist.fold2\>/;'q;"	kind:pred
set_ordlist.fold3	set_ordlist.m	/^:- pred set_ordlist.fold3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_ordlist.fold3\>/;'q;"	kind:pred
set_ordlist.fold4	set_ordlist.m	/^:- pred set_ordlist.fold4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_ordlist.fold4\>/;'q;"	kind:pred
set_ordlist.fold5	set_ordlist.m	/^:- pred set_ordlist.fold5($/;kq|/^\<set_ordlist.fold5\>/;'q;"	kind:pred
set_ordlist.fold6	set_ordlist.m	/^:- pred set_ordlist.fold6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F),$/;kq|/^\<set_ordlist.fold6\>/;'q;"	kind:pred
set_ordlist.foldl	set_ordlist.m	/^:- func set_ordlist.foldl(func(T1, T2) = T2, set_ordlist(T1), T2) = T2.$/;kq|/^\<set_ordlist.foldl\>/;'q;"	kind:func
set_ordlist.foldl	set_ordlist.m	/^:- pred set_ordlist.foldl(pred(T1, T2, T2), set_ordlist(T1), T2, T2).$/;kq|/^\<set_ordlist.foldl\>/;'q;"	kind:pred
set_ordlist.foldl2	set_ordlist.m	/^:- pred set_ordlist.foldl2(pred(T1, T2, T2, T3, T3), set_ordlist(T1),$/;kq|/^\<set_ordlist.foldl2\>/;'q;"	kind:pred
set_ordlist.foldl3	set_ordlist.m	/^:- pred set_ordlist.foldl3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_ordlist.foldl3\>/;'q;"	kind:pred
set_ordlist.foldl4	set_ordlist.m	/^:- pred set_ordlist.foldl4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_ordlist.foldl4\>/;'q;"	kind:pred
set_ordlist.foldl5	set_ordlist.m	/^:- pred set_ordlist.foldl5($/;kq|/^\<set_ordlist.foldl5\>/;'q;"	kind:pred
set_ordlist.foldl6	set_ordlist.m	/^:- pred set_ordlist.foldl6(pred(T, A, A, B, B, C, C, D, D, E, E, F, F),$/;kq|/^\<set_ordlist.foldl6\>/;'q;"	kind:pred
set_ordlist.from_list	set_ordlist.m	/^:- func set_ordlist.from_list(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.from_list\>/;'q;"	kind:func
set_ordlist.from_sorted_list	set_ordlist.m	/^:- func set_ordlist.from_sorted_list(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.from_sorted_list\>/;'q;"	kind:func
set_ordlist.init	set_ordlist.m	/^:- func set_ordlist.init = set_ordlist(T).$/;kq|/^\<set_ordlist.init\>/;'q;"	kind:func
set_ordlist.init	set_ordlist.m	/^:- pred set_ordlist.init(set_ordlist(_T)::uo) is det.$/;kq|/^\<set_ordlist.init\>/;'q;"	kind:pred
set_ordlist.insert	set_ordlist.m	/^:- func set_ordlist.insert(set_ordlist(T), T) = set_ordlist(T).$/;kq|/^\<set_ordlist.insert\>/;'q;"	kind:func
set_ordlist.insert	set_ordlist.m	/^:- pred set_ordlist.insert(T::in, set_ordlist(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.insert\>/;'q;"	kind:pred
set_ordlist.insert_2	set_ordlist.m	/^:- pred set_ordlist.insert_2(list(T)::in, T::in, list(T)::out)$/;kq|/^\<set_ordlist.insert_2\>/;'q;"	kind:pred	file:
set_ordlist.insert_list	set_ordlist.m	/^:- func set_ordlist.insert_list(set_ordlist(T), list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.insert_list\>/;'q;"	kind:func
set_ordlist.insert_list	set_ordlist.m	/^:- pred set_ordlist.insert_list(list(T)::in,$/;kq|/^\<set_ordlist.insert_list\>/;'q;"	kind:pred
set_ordlist.insert_new	set_ordlist.m	/^:- pred set_ordlist.insert_new(T::in,$/;kq|/^\<set_ordlist.insert_new\>/;'q;"	kind:pred
set_ordlist.insert_new_2	set_ordlist.m	/^:- pred set_ordlist.insert_new_2(list(T)::in, T::in, list(T)::out)$/;kq|/^\<set_ordlist.insert_new_2\>/;'q;"	kind:pred	file:
set_ordlist.intersect	set_ordlist.m	/^:- func set_ordlist.intersect(set_ordlist(T), set_ordlist(T))$/;kq|/^\<set_ordlist.intersect\>/;'q;"	kind:func
set_ordlist.intersect	set_ordlist.m	/^:- pred set_ordlist.intersect(set_ordlist(T), set_ordlist(T), set_ordlist(T)).$/;kq|/^\<set_ordlist.intersect\>/;'q;"	kind:pred
set_ordlist.intersect_2	set_ordlist.m	/^:- pred set_ordlist.intersect_2(list(T), list(T), list(T)).$/;kq|/^\<set_ordlist.intersect_2\>/;'q;"	kind:pred	file:
set_ordlist.intersect_list	set_ordlist.m	/^:- func set_ordlist.intersect_list(list(set_ordlist(T))) = set_ordlist(T).$/;kq|/^\<set_ordlist.intersect_list\>/;'q;"	kind:func
set_ordlist.intersect_list	set_ordlist.m	/^:- pred set_ordlist.intersect_list(list(set_ordlist(T))::in,$/;kq|/^\<set_ordlist.intersect_list\>/;'q;"	kind:pred
set_ordlist.is_empty	set_ordlist.m	/^:- pred set_ordlist.is_empty(set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.is_empty\>/;'q;"	kind:pred
set_ordlist.is_member	set_ordlist.m	/^:- pred set_ordlist.is_member(T::in, set_ordlist(T)::in, bool::out) is det.$/;kq|/^\<set_ordlist.is_member\>/;'q;"	kind:pred
set_ordlist.is_member_2	set_ordlist.m	/^:- pred set_ordlist.is_member_2(T::in, list(T)::in, bool::out) is det.$/;kq|/^\<set_ordlist.is_member_2\>/;'q;"	kind:pred	file:
set_ordlist.is_non_empty	set_ordlist.m	/^:- pred set_ordlist.is_non_empty(set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.is_non_empty\>/;'q;"	kind:pred
set_ordlist.is_singleton	set_ordlist.m	/^:- pred set_ordlist.is_singleton(set_ordlist(T)::in, T::out) is semidet.$/;kq|/^\<set_ordlist.is_singleton\>/;'q;"	kind:pred
set_ordlist.list_to_set	set_ordlist.m	/^:- func set_ordlist.list_to_set(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.list_to_set\>/;'q;"	kind:func
set_ordlist.list_to_set	set_ordlist.m	/^:- pred set_ordlist.list_to_set(list(T)::in, set_ordlist(T)::out) is det.$/;kq|/^\<set_ordlist.list_to_set\>/;'q;"	kind:pred
set_ordlist.make_singleton_set	set_ordlist.m	/^:- func set_ordlist.make_singleton_set(T) = set_ordlist(T).$/;kq|/^\<set_ordlist.make_singleton_set\>/;'q;"	kind:func
set_ordlist.map	set_ordlist.m	/^:- func set_ordlist.map(func(T1) = T2, set_ordlist(T1)) = set_ordlist(T2).$/;kq|/^\<set_ordlist.map\>/;'q;"	kind:func
set_ordlist.member	set_ordlist.m	/^:- pred set_ordlist.member(T, set_ordlist(T)).$/;kq|/^\<set_ordlist.member\>/;'q;"	kind:pred
set_ordlist.no_dups	set_ordlist.m	/^:- pred set_ordlist.no_dups(T::in, list(T)::in) is semidet.$/;kq|/^\<set_ordlist.no_dups\>/;'q;"	kind:pred	file:
set_ordlist.non_empty	set_ordlist.m	/^:- pred set_ordlist.non_empty(set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.non_empty\>/;'q;"	kind:pred
set_ordlist.power_intersect	set_ordlist.m	/^:- func set_ordlist.power_intersect(set_ordlist(set_ordlist(T)))$/;kq|/^\<set_ordlist.power_intersect\>/;'q;"	kind:func
set_ordlist.power_intersect	set_ordlist.m	/^:- pred set_ordlist.power_intersect(set_ordlist(set_ordlist(T))::in,$/;kq|/^\<set_ordlist.power_intersect\>/;'q;"	kind:pred
set_ordlist.power_union	set_ordlist.m	/^:- func set_ordlist.power_union(set_ordlist(set_ordlist(T))) = set_ordlist(T).$/;kq|/^\<set_ordlist.power_union\>/;'q;"	kind:func
set_ordlist.power_union	set_ordlist.m	/^:- pred set_ordlist.power_union(set_ordlist(set_ordlist(T))::in,$/;kq|/^\<set_ordlist.power_union\>/;'q;"	kind:pred
set_ordlist.power_union_2	set_ordlist.m	/^:- pred set_ordlist.power_union_2(list(set_ordlist(T))::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.power_union_2\>/;'q;"	kind:pred	file:
set_ordlist.remove	set_ordlist.m	/^:- pred set_ordlist.remove(T::in, set_ordlist(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.remove\>/;'q;"	kind:pred
set_ordlist.remove_least	set_ordlist.m	/^:- pred set_ordlist.remove_least(T::out,$/;kq|/^\<set_ordlist.remove_least\>/;'q;"	kind:pred
set_ordlist.remove_list	set_ordlist.m	/^:- pred set_ordlist.remove_list(list(T)::in,$/;kq|/^\<set_ordlist.remove_list\>/;'q;"	kind:pred
set_ordlist.singleton_set	set_ordlist.m	/^:- pred set_ordlist.singleton_set(T, set_ordlist(T)).$/;kq|/^\<set_ordlist.singleton_set\>/;'q;"	kind:pred
set_ordlist.sol	set_ordlist.m	/^    --->    sol(list(T)).$/;kq|-;/\<set_ordlist.sol\>/;'q;"	kind:cons	file:
set_ordlist.sort_no_dups	set_ordlist.m	/^:- pred set_ordlist.sort_no_dups(list(T)::in, set_ordlist(T)::out) is semidet.$/;kq|/^\<set_ordlist.sort_no_dups\>/;'q;"	kind:pred	file:
set_ordlist.sorted_list_to_set	set_ordlist.m	/^:- func set_ordlist.sorted_list_to_set(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.sorted_list_to_set\>/;'q;"	kind:func
set_ordlist.sorted_list_to_set	set_ordlist.m	/^:- pred set_ordlist.sorted_list_to_set(list(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.sorted_list_to_set\>/;'q;"	kind:pred
set_ordlist.subset	set_ordlist.m	/^:- pred set_ordlist.subset(set_ordlist(T)::in, set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.subset\>/;'q;"	kind:pred
set_ordlist.superset	set_ordlist.m	/^:- pred set_ordlist.superset(set_ordlist(T)::in, set_ordlist(T)::in)$/;kq|/^\<set_ordlist.superset\>/;'q;"	kind:pred
set_ordlist.to_sorted_list	set_ordlist.m	/^:- func set_ordlist.to_sorted_list(set_ordlist(T)) = list(T).$/;kq|/^\<set_ordlist.to_sorted_list\>/;'q;"	kind:func
set_ordlist.to_sorted_list	set_ordlist.m	/^:- pred set_ordlist.to_sorted_list(set_ordlist(T)::in, list(T)::out) is det.$/;kq|/^\<set_ordlist.to_sorted_list\>/;'q;"	kind:pred
set_ordlist.union	set_ordlist.m	/^:- func set_ordlist.union(set_ordlist(T), set_ordlist(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.union\>/;'q;"	kind:func
set_ordlist.union	set_ordlist.m	/^:- pred set_ordlist.union(set_ordlist(T)::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.union\>/;'q;"	kind:pred
set_ordlist.union_list	set_ordlist.m	/^:- func set_ordlist.union_list(list(set_ordlist(T))) = set_ordlist(T).$/;kq|/^\<set_ordlist.union_list\>/;'q;"	kind:func
set_ordlist.union_list	set_ordlist.m	/^:- pred set_ordlist.union_list(list(set_ordlist(T))::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.union_list\>/;'q;"	kind:pred
set_output_line_number	io.m	/^:- pred io.set_output_line_number(int::in, io::di, io::uo) is det.$/;kq|/^\<io.set_output_line_number\>/;'q;"	kind:pred
set_output_line_number	io.m	/^:- pred io.set_output_line_number(io.output_stream::in, int::in,$/;kq|/^\<io.set_output_line_number\>/;'q;"	kind:pred
set_output_line_number_2	io.m	/^:- pred io.set_output_line_number_2(io.stream::in, int::in,$/;kq|/^\<io.set_output_line_number_2\>/;'q;"	kind:pred	file:
set_output_stream	io.m	/^:- pred io.set_output_stream(io.output_stream::in, io.output_stream::out,$/;kq|/^\<io.set_output_stream\>/;'q;"	kind:pred
set_output_stream_2	io.m	/^:- pred io.set_output_stream_2(io.stream::in, io.stream::out,$/;kq|/^\<io.set_output_stream_2\>/;'q;"	kind:pred	file:
set_read_status	bit_buffer.m	/^:- pred set_read_status(stream.res(Error)::in,$/;kq|/^\<set_read_status\>/;'q;"	kind:pred	file:
set_ref	store.m	/^:- pred store.set_ref(generic_ref(T, S)::in, generic_ref(T, S)::in,$/;kq|/^\<store.set_ref\>/;'q;"	kind:pred
set_ref_value	store.m	/^:- pred store.set_ref_value(generic_ref(T, S)::in, T::di,$/;kq|/^\<store.set_ref_value\>/;'q;"	kind:pred
set_state	bit_buffer.m	/^:- pred set_state(State::di,$/;kq|/^\<set_state\>/;'q;"	kind:pred	file:
set_stream_db	io.m	/^:- pred io.set_stream_db(io.stream_db::in, io::di, io::uo) is det.$/;kq|/^\<io.set_stream_db\>/;'q;"	kind:pred	file:
set_to_bitset	test_bitset.m	/^:- func set_to_bitset(set(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<set_to_bitset\>/;'q;"	kind:func
set_trailing_bits_in_byte	bitmap.m	/^:- func set_trailing_bits_in_byte(bitmap, bit_index, byte) = bitmap.$/;kq|/^\<set_trailing_bits_in_byte\>/;'q;"	kind:func	file:
set_tree234	set_ctree234.m	/^:- type set_tree234(T)$/;kq|-;/\<set_tree234\>/;'q;"	kind:type	file:
set_tree234	set_tree234.m	/^:- type set_tree234(T)$/;kq|-;/\<set_tree234\>/;'q;"	kind:type	file:
set_tree234.all_members	set_tree234.m	/^:- pred set_tree234.all_members(set_tree234(T)::in, T::out) is nondet.$/;kq|/^\<set_tree234.all_members\>/;'q;"	kind:pred	file:
set_tree234.all_true	set_tree234.m	/^:- pred set_tree234.all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.all_true\>/;'q;"	kind:pred
set_tree234.contains	set_tree234.m	/^:- pred set_tree234.contains(set_tree234(T)::in, T::in) is semidet.$/;kq|/^\<set_tree234.contains\>/;'q;"	kind:pred
set_tree234.count	set_tree234.m	/^:- func set_tree234.count(set_tree234(T)) = int.$/;kq|/^\<set_tree234.count\>/;'q;"	kind:func
set_tree234.delete	set_tree234.m	/^:- func set_tree234.delete(T, set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.delete\>/;'q;"	kind:func
set_tree234.delete	set_tree234.m	/^:- pred set_tree234.delete(T::in, set_tree234(T)::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.delete\>/;'q;"	kind:pred
set_tree234.delete_2	set_tree234.m	/^:- pred set_tree234.delete_2(T::in, set_tree234(T)::in, set_tree234(T)::out,$/;kq|/^\<set_tree234.delete_2\>/;'q;"	kind:pred	file:
set_tree234.delete_list	set_tree234.m	/^:- func set_tree234.delete_list(list(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.delete_list\>/;'q;"	kind:func
set_tree234.delete_list	set_tree234.m	/^:- pred set_tree234.delete_list(list(T)::in,$/;kq|/^\<set_tree234.delete_list\>/;'q;"	kind:pred
set_tree234.difference	set_tree234.m	/^:- func set_tree234.difference(set_tree234(T), set_tree234(T))$/;kq|/^\<set_tree234.difference\>/;'q;"	kind:func
set_tree234.difference	set_tree234.m	/^:- pred set_tree234.difference(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.difference\>/;'q;"	kind:pred
set_tree234.difference_2	set_tree234.m	/^:- pred set_tree234.difference_2(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.difference_2\>/;'q;"	kind:pred	file:
set_tree234.divide	set_tree234.m	/^:- pred set_tree234.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.divide\>/;'q;"	kind:pred
set_tree234.divide_2	set_tree234.m	/^:- pred set_tree234.divide_2(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.divide_2\>/;'q;"	kind:pred	file:
set_tree234.divide_by_set	set_tree234.m	/^:- pred set_tree234.divide_by_set(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.divide_by_set\>/;'q;"	kind:pred
set_tree234.do_intersect	set_tree234.m	/^:- pred set_tree234.do_intersect(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.do_intersect\>/;'q;"	kind:pred	file:
set_tree234.do_union	set_tree234.m	/^:- pred set_tree234.do_union(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.do_union\>/;'q;"	kind:pred	file:
set_tree234.empty	set_tree234.m	/^    --->    empty$/;kq|-;/\<set_tree234.empty\>/;'q;"	kind:cons	file:
set_tree234.empty	set_tree234.m	/^:- pred set_tree234.empty(set_tree234(_T)::in) is semidet.$/;kq|/^\<set_tree234.empty\>/;'q;"	kind:pred
set_tree234.equal	set_tree234.m	/^:- pred set_tree234.equal(set_tree234(T)::in, set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.equal\>/;'q;"	kind:pred
set_tree234.filter	set_tree234.m	/^:- func set_tree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.filter\>/;'q;"	kind:func
set_tree234.filter	set_tree234.m	/^:- pred set_tree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.filter\>/;'q;"	kind:pred
set_tree234.filter	set_tree234.m	/^:- pred set_tree234.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_tree234.filter\>/;'q;"	kind:pred
set_tree234.filter_map	set_tree234.m	/^:- func set_tree234.filter_map(func(T1) = T2, set_tree234(T1))$/;kq|/^\<set_tree234.filter_map\>/;'q;"	kind:func
set_tree234.filter_map	set_tree234.m	/^:- pred set_tree234.filter_map(pred(T1, T2)::in(pred(in, out) is semidet),$/;kq|/^\<set_tree234.filter_map\>/;'q;"	kind:pred
set_tree234.filter_map_func	set_tree234.m	/^:- pred set_tree234.filter_map_func(func(T1) = T2, set_tree234(T1),$/;kq|/^\<set_tree234.filter_map_func\>/;'q;"	kind:pred	file:
set_tree234.filter_map_pred	set_tree234.m	/^:- pred set_tree234.filter_map_pred($/;kq|/^\<set_tree234.filter_map_pred\>/;'q;"	kind:pred	file:
set_tree234.fix_2node_t0	set_tree234.m	/^:- pred fix_2node_t0(E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_2node_t0\>/;'q;"	kind:pred	file:
set_tree234.fix_2node_t1	set_tree234.m	/^:- pred fix_2node_t1(E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_2node_t1\>/;'q;"	kind:pred	file:
set_tree234.fix_3node_t0	set_tree234.m	/^:- pred fix_3node_t0(E::in, E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_3node_t0\>/;'q;"	kind:pred	file:
set_tree234.fix_3node_t1	set_tree234.m	/^:- pred fix_3node_t1(E::in, E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_3node_t1\>/;'q;"	kind:pred	file:
set_tree234.fix_3node_t2	set_tree234.m	/^:- pred fix_3node_t2(E::in, E::in, set_tree234(E)::in, set_tree234(E)::in,$/;kq|/^\<fix_3node_t2\>/;'q;"	kind:pred	file:
set_tree234.fix_4node_t0	set_tree234.m	/^:- pred fix_4node_t0(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t0\>/;'q;"	kind:pred	file:
set_tree234.fix_4node_t1	set_tree234.m	/^:- pred fix_4node_t1(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t1\>/;'q;"	kind:pred	file:
set_tree234.fix_4node_t2	set_tree234.m	/^:- pred fix_4node_t2(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t2\>/;'q;"	kind:pred	file:
set_tree234.fix_4node_t3	set_tree234.m	/^:- pred fix_4node_t3(E::in, E::in, E::in,$/;kq|/^\<fix_4node_t3\>/;'q;"	kind:pred	file:
set_tree234.fold	set_tree234.m	/^:- func set_tree234.fold(func(T1, T2) = T2, set_tree234(T1), T2) = T2.$/;kq|/^\<set_tree234.fold\>/;'q;"	kind:func
set_tree234.fold	set_tree234.m	/^:- pred set_tree234.fold(pred(T1, T2, T2), set_tree234(T1), T2, T2).$/;kq|/^\<set_tree234.fold\>/;'q;"	kind:pred
set_tree234.fold2	set_tree234.m	/^:- pred set_tree234.fold2(pred(T1, T2, T2, T3, T3), set_tree234(T1),$/;kq|/^\<set_tree234.fold2\>/;'q;"	kind:pred
set_tree234.fold3	set_tree234.m	/^:- pred set_tree234.fold3($/;kq|/^\<set_tree234.fold3\>/;'q;"	kind:pred
set_tree234.fold4	set_tree234.m	/^:- pred set_tree234.fold4($/;kq|/^\<set_tree234.fold4\>/;'q;"	kind:pred
set_tree234.fold5	set_tree234.m	/^:- pred set_tree234.fold5($/;kq|/^\<set_tree234.fold5\>/;'q;"	kind:pred
set_tree234.fold6	set_tree234.m	/^:- pred set_tree234.fold6($/;kq|/^\<set_tree234.fold6\>/;'q;"	kind:pred
set_tree234.foldl	set_tree234.m	/^:- func set_tree234.foldl(func(T1, T2) = T2, set_tree234(T1), T2) = T2.$/;kq|/^\<set_tree234.foldl\>/;'q;"	kind:func
set_tree234.foldl	set_tree234.m	/^:- pred set_tree234.foldl(pred(T1, T2, T2), set_tree234(T1), T2, T2).$/;kq|/^\<set_tree234.foldl\>/;'q;"	kind:pred
set_tree234.foldl2	set_tree234.m	/^:- pred set_tree234.foldl2(pred(T1, T2, T2, T3, T3), set_tree234(T1),$/;kq|/^\<set_tree234.foldl2\>/;'q;"	kind:pred
set_tree234.foldl3	set_tree234.m	/^:- pred set_tree234.foldl3($/;kq|/^\<set_tree234.foldl3\>/;'q;"	kind:pred
set_tree234.foldl4	set_tree234.m	/^:- pred set_tree234.foldl4($/;kq|/^\<set_tree234.foldl4\>/;'q;"	kind:pred
set_tree234.foldl5	set_tree234.m	/^:- pred set_tree234.foldl5($/;kq|/^\<set_tree234.foldl5\>/;'q;"	kind:pred
set_tree234.foldl6	set_tree234.m	/^:- pred set_tree234.foldl6($/;kq|/^\<set_tree234.foldl6\>/;'q;"	kind:pred
set_tree234.four	set_tree234.m	/^    ;       four(T, T, T, set_tree234(T), set_tree234(T),$/;kq|-;/\<set_tree234.four\>/;'q;"	kind:cons	file:
set_tree234.four	set_tree234.m	/^:- inst four(E, T)  ---> four(E, E, E, T, T, T, T).$/;kq|-;/\<set_tree234.four\>/;'q;"	kind:inst	file:
set_tree234.from_list	set_tree234.m	/^:- func set_tree234.from_list(list(T)) = set_tree234(T).$/;kq|/^\<set_tree234.from_list\>/;'q;"	kind:func
set_tree234.from_list	set_tree234.m	/^:- pred set_tree234.from_list(list(T)::in, set_tree234(T)::out) is det.$/;kq|/^\<set_tree234.from_list\>/;'q;"	kind:pred
set_tree234.from_set	set_tree234.m	/^:- func from_set(set.set(T)) = set_tree234(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
set_tree234.height	set_tree234.m	/^:- pred set_tree234.height(set_tree234(T)::in, int::out) is det.$/;kq|/^\<set_tree234.height\>/;'q;"	kind:pred	file:
set_tree234.in_four	set_tree234.m	/^:- mode in_four  == in(four(ground, ground)).$/;kq|-;/\<set_tree234.in_four\>/;'q;"	kind:mode	file:
set_tree234.in_three	set_tree234.m	/^:- mode in_three  == in(three(ground, ground)).$/;kq|-;/\<set_tree234.in_three\>/;'q;"	kind:mode	file:
set_tree234.in_two	set_tree234.m	/^:- mode in_two  == in(two(ground, ground)).$/;kq|-;/\<set_tree234.in_two\>/;'q;"	kind:mode	file:
set_tree234.init	set_tree234.m	/^:- func set_tree234.init = set_tree234(T).$/;kq|/^\<set_tree234.init\>/;'q;"	kind:func
set_tree234.insert	set_tree234.m	/^:- func set_tree234.insert(T, set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.insert\>/;'q;"	kind:func
set_tree234.insert	set_tree234.m	/^:- pred set_tree234.insert(T::in, set_tree234(T)::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.insert\>/;'q;"	kind:pred
set_tree234.insert2	set_tree234.m	/^:- pred set_tree234.insert2(T::in,$/;kq|/^\<set_tree234.insert2\>/;'q;"	kind:pred	file:
set_tree234.insert3	set_tree234.m	/^:- pred set_tree234.insert3(T::in,$/;kq|/^\<set_tree234.insert3\>/;'q;"	kind:pred	file:
set_tree234.insert_list	set_tree234.m	/^:- func set_tree234.insert_list(list(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.insert_list\>/;'q;"	kind:func
set_tree234.insert_list	set_tree234.m	/^:- pred set_tree234.insert_list(list(T)::in,$/;kq|/^\<set_tree234.insert_list\>/;'q;"	kind:pred
set_tree234.insert_new	set_tree234.m	/^:- pred set_tree234.insert_new(T::in,$/;kq|/^\<set_tree234.insert_new\>/;'q;"	kind:pred
set_tree234.insert_new2	set_tree234.m	/^:- pred set_tree234.insert_new2(T::in,$/;kq|/^\<set_tree234.insert_new2\>/;'q;"	kind:pred	file:
set_tree234.insert_new3	set_tree234.m	/^:- pred set_tree234.insert_new3(T::in,$/;kq|/^\<set_tree234.insert_new3\>/;'q;"	kind:pred	file:
set_tree234.intersect	set_tree234.m	/^:- func set_tree234.intersect(set_tree234(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.intersect\>/;'q;"	kind:func
set_tree234.intersect	set_tree234.m	/^:- pred set_tree234.intersect(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.intersect\>/;'q;"	kind:pred
set_tree234.intersect_list	set_tree234.m	/^:- func set_tree234.intersect_list(list(set_tree234(T))) = set_tree234(T).$/;kq|/^\<set_tree234.intersect_list\>/;'q;"	kind:func
set_tree234.intersect_list	set_tree234.m	/^:- pred set_tree234.intersect_list(list(set_tree234(T))::in,$/;kq|/^\<set_tree234.intersect_list\>/;'q;"	kind:pred
set_tree234.intersect_list_2	set_tree234.m	/^:- func set_tree234.intersect_list_2(set_tree234(T), list(set_tree234(T)))$/;kq|/^\<set_tree234.intersect_list_2\>/;'q;"	kind:func	file:
set_tree234.is_empty	set_tree234.m	/^:- pred set_tree234.is_empty(set_tree234(_T)::in) is semidet.$/;kq|/^\<set_tree234.is_empty\>/;'q;"	kind:pred
set_tree234.is_member	set_tree234.m	/^:- func set_tree234.is_member(set_tree234(T), T) = bool.$/;kq|/^\<set_tree234.is_member\>/;'q;"	kind:func
set_tree234.is_member	set_tree234.m	/^:- pred set_tree234.is_member(set_tree234(T)::in, T::in, bool::out) is det.$/;kq|/^\<set_tree234.is_member\>/;'q;"	kind:pred
set_tree234.is_non_empty	set_tree234.m	/^:- pred set_tree234.is_non_empty(set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.is_non_empty\>/;'q;"	kind:pred
set_tree234.is_singleton	set_tree234.m	/^:- pred set_tree234.is_singleton(set_tree234(T)::in, T::out) is semidet.$/;kq|/^\<set_tree234.is_singleton\>/;'q;"	kind:pred
set_tree234.list_to_set	set_tree234.m	/^:- func set_tree234.list_to_set(list(T)) = set_tree234(T).$/;kq|/^\<set_tree234.list_to_set\>/;'q;"	kind:func
set_tree234.list_to_set	set_tree234.m	/^:- pred set_tree234.list_to_set(list(T)::in, set_tree234(T)::out) is det.$/;kq|/^\<set_tree234.list_to_set\>/;'q;"	kind:pred
set_tree234.list_to_set_2	set_tree234.m	/^:- pred set_tree234.list_to_set_2(list(E)::in, set_tree234(E)::in,$/;kq|/^\<set_tree234.list_to_set_2\>/;'q;"	kind:pred	file:
set_tree234.make_singleton_set	set_tree234.m	/^:- func set_tree234.make_singleton_set(T) = set_tree234(T).$/;kq|/^\<set_tree234.make_singleton_set\>/;'q;"	kind:func
set_tree234.map	set_tree234.m	/^:- func set_tree234.map(func(T1) = T2, set_tree234(T1)) = set_tree234(T2).$/;kq|/^\<set_tree234.map\>/;'q;"	kind:func
set_tree234.map	set_tree234.m	/^:- pred set_tree234.map(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_tree234.map\>/;'q;"	kind:pred
set_tree234.map_func	set_tree234.m	/^:- pred set_tree234.map_func(func(T1) = T2, set_tree234(T1),$/;kq|/^\<set_tree234.map_func\>/;'q;"	kind:pred	file:
set_tree234.map_pred	set_tree234.m	/^:- pred set_tree234.map_pred(pred(T1, T2)::in(pred(in, out) is det),$/;kq|/^\<set_tree234.map_pred\>/;'q;"	kind:pred	file:
set_tree234.member	set_tree234.m	/^:- pred set_tree234.member(T, set_tree234(T)).$/;kq|/^\<set_tree234.member\>/;'q;"	kind:pred
set_tree234.non_empty	set_tree234.m	/^:- pred set_tree234.non_empty(set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.non_empty\>/;'q;"	kind:pred
set_tree234.out_two	set_tree234.m	/^:- mode out_two == out(two(ground, ground)).$/;kq|-;/\<set_tree234.out_two\>/;'q;"	kind:mode	file:
set_tree234.power_intersect	set_tree234.m	/^:- func set_tree234.power_intersect(set_tree234(set_tree234(T)))$/;kq|/^\<set_tree234.power_intersect\>/;'q;"	kind:func
set_tree234.power_intersect	set_tree234.m	/^:- pred set_tree234.power_intersect(set_tree234(set_tree234(T))::in,$/;kq|/^\<set_tree234.power_intersect\>/;'q;"	kind:pred
set_tree234.power_union	set_tree234.m	/^:- func set_tree234.power_union(set_tree234(set_tree234(T))) = set_tree234(T).$/;kq|/^\<set_tree234.power_union\>/;'q;"	kind:func
set_tree234.power_union	set_tree234.m	/^:- pred set_tree234.power_union(set_tree234(set_tree234(T))::in,$/;kq|/^\<set_tree234.power_union\>/;'q;"	kind:pred
set_tree234.power_union_2	set_tree234.m	/^:- pred set_tree234.power_union_2(set_tree234(set_tree234(T))::in,$/;kq|/^\<set_tree234.power_union_2\>/;'q;"	kind:pred	file:
set_tree234.remove	set_tree234.m	/^:- pred set_tree234.remove(T::in, set_tree234(T)::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.remove\>/;'q;"	kind:pred
set_tree234.remove_2	set_tree234.m	/^:- pred set_tree234.remove_2(T::in, set_tree234(T)::in, set_tree234(T)::out,$/;kq|/^\<set_tree234.remove_2\>/;'q;"	kind:pred	file:
set_tree234.remove_least	set_tree234.m	/^:- pred set_tree234.remove_least(T::out,$/;kq|/^\<set_tree234.remove_least\>/;'q;"	kind:pred
set_tree234.remove_least_2	set_tree234.m	/^:- pred set_tree234.remove_least_2(set_tree234(E)::in, E::out,$/;kq|/^\<set_tree234.remove_least_2\>/;'q;"	kind:pred	file:
set_tree234.remove_list	set_tree234.m	/^:- pred set_tree234.remove_list(list(T)::in,$/;kq|/^\<set_tree234.remove_list\>/;'q;"	kind:pred
set_tree234.singleton_set	set_tree234.m	/^:- pred set_tree234.singleton_set(T, set_tree234(T)).$/;kq|/^\<set_tree234.singleton_set\>/;'q;"	kind:pred
set_tree234.sorted_list_to_set	set_tree234.m	/^:- func set_tree234.sorted_list_to_set(list(T)) = set_tree234(T).$/;kq|/^\<set_tree234.sorted_list_to_set\>/;'q;"	kind:func
set_tree234.sorted_list_to_set	set_tree234.m	/^:- pred set_tree234.sorted_list_to_set(list(T)::in, set_tree234(T)::out) is det.$/;kq|/^\<set_tree234.sorted_list_to_set\>/;'q;"	kind:pred
set_tree234.split_four	set_tree234.m	/^:- pred set_tree234.split_four(set_tree234(E)::in_four, E::out,$/;kq|/^\<set_tree234.split_four\>/;'q;"	kind:pred	file:
set_tree234.subset	set_tree234.m	/^:- pred set_tree234.subset(set_tree234(T)::in, set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.subset\>/;'q;"	kind:pred
set_tree234.superset	set_tree234.m	/^:- pred set_tree234.superset(set_tree234(T)::in, set_tree234(T)::in)$/;kq|/^\<set_tree234.superset\>/;'q;"	kind:pred
set_tree234.three	set_tree234.m	/^    ;       three(T, T, set_tree234(T), set_tree234(T), set_tree234(T))$/;kq|-;/\<set_tree234.three\>/;'q;"	kind:cons	file:
set_tree234.three	set_tree234.m	/^:- inst three(E, T) ---> three(E, E, T, T, T).$/;kq|-;/\<set_tree234.three\>/;'q;"	kind:inst	file:
set_tree234.to_set	set_tree234.m	/^:- func to_set(set_tree234(T)) = set.set(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
set_tree234.to_sorted_list	set_tree234.m	/^:- func set_tree234.to_sorted_list(set_tree234(T)) = list(T).$/;kq|/^\<set_tree234.to_sorted_list\>/;'q;"	kind:func
set_tree234.to_sorted_list	set_tree234.m	/^:- pred set_tree234.to_sorted_list(set_tree234(T)::in, list(T)::out) is det.$/;kq|/^\<set_tree234.to_sorted_list\>/;'q;"	kind:pred
set_tree234.to_sorted_list_2	set_tree234.m	/^:- pred set_tree234.to_sorted_list_2(set_tree234(T)::in,$/;kq|/^\<set_tree234.to_sorted_list_2\>/;'q;"	kind:pred	file:
set_tree234.two	set_tree234.m	/^    ;       two(T, set_tree234(T), set_tree234(T))$/;kq|-;/\<set_tree234.two\>/;'q;"	kind:cons	file:
set_tree234.two	set_tree234.m	/^:- inst two(E, T)   ---> two(E, T, T).$/;kq|-;/\<set_tree234.two\>/;'q;"	kind:inst	file:
set_tree234.union	set_tree234.m	/^:- func set_tree234.union(set_tree234(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.union\>/;'q;"	kind:func
set_tree234.union	set_tree234.m	/^:- pred set_tree234.union(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.union\>/;'q;"	kind:pred
set_tree234.union_list	set_tree234.m	/^:- func set_tree234.union_list(list(set_tree234(T))) = set_tree234(T).$/;kq|/^\<set_tree234.union_list\>/;'q;"	kind:func
set_tree234.union_list	set_tree234.m	/^:- pred set_tree234.union_list(list(set_tree234(T))::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.union_list\>/;'q;"	kind:pred
set_type_info_index	rtti_implementation.m	/^:- pred set_type_info_index(int::in, int::in, type_info::in,$/;kq|/^\<set_type_info_index\>/;'q;"	kind:pred	file:
set_unordlist	set_unordlist.m	/^:- type set_unordlist(T)$/;kq|-;/\<set_unordlist\>/;'q;"	kind:type	file:
set_unordlist.all_true	set_unordlist.m	/^:- pred set_unordlist.all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.all_true\>/;'q;"	kind:pred
set_unordlist.contains	set_unordlist.m	/^:- pred set_unordlist.contains(set_unordlist(T)::in, T::in) is semidet.$/;kq|/^\<set_unordlist.contains\>/;'q;"	kind:pred
set_unordlist.count	set_unordlist.m	/^:- func set_unordlist.count(set_unordlist(T)) = int.$/;kq|/^\<set_unordlist.count\>/;'q;"	kind:func
set_unordlist.count	set_unordlist.m	/^:- pred set_unordlist.count(set_unordlist(T)::in, int::out) is det.$/;kq|/^\<set_unordlist.count\>/;'q;"	kind:pred
set_unordlist.delete	set_unordlist.m	/^:- func set_unordlist.delete(set_unordlist(T), T) = set_unordlist(T).$/;kq|/^\<set_unordlist.delete\>/;'q;"	kind:func
set_unordlist.delete	set_unordlist.m	/^:- pred set_unordlist.delete(T, set_unordlist(T), set_unordlist(T)).$/;kq|/^\<set_unordlist.delete\>/;'q;"	kind:pred
set_unordlist.delete_list	set_unordlist.m	/^:- func set_unordlist.delete_list(set_unordlist(T), list(T))$/;kq|/^\<set_unordlist.delete_list\>/;'q;"	kind:func
set_unordlist.delete_list	set_unordlist.m	/^:- pred set_unordlist.delete_list(list(T)::in,$/;kq|/^\<set_unordlist.delete_list\>/;'q;"	kind:pred
set_unordlist.difference	set_unordlist.m	/^:- func set_unordlist.difference(set_unordlist(T), set_unordlist(T))$/;kq|/^\<set_unordlist.difference\>/;'q;"	kind:func
set_unordlist.difference	set_unordlist.m	/^:- pred set_unordlist.difference(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.difference\>/;'q;"	kind:pred
set_unordlist.difference_2	set_unordlist.m	/^:- pred set_unordlist.difference_2(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.difference_2\>/;'q;"	kind:pred	file:
set_unordlist.divide	set_unordlist.m	/^:- pred set_unordlist.divide(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.divide\>/;'q;"	kind:pred
set_unordlist.divide_2	set_unordlist.m	/^:- pred set_unordlist.divide_2(pred(T1)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.divide_2\>/;'q;"	kind:pred	file:
set_unordlist.empty	set_unordlist.m	/^:- pred set_unordlist.empty(set_unordlist(_T)::in) is semidet.$/;kq|/^\<set_unordlist.empty\>/;'q;"	kind:pred
set_unordlist.equal	set_unordlist.m	/^:- pred set_unordlist.equal(set_unordlist(T)::in, set_unordlist(T)::in)$/;kq|/^\<set_unordlist.equal\>/;'q;"	kind:pred
set_unordlist.filter	set_unordlist.m	/^:- pred set_unordlist.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.filter\>/;'q;"	kind:pred
set_unordlist.filter	set_unordlist.m	/^:- pred set_unordlist.filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<set_unordlist.filter\>/;'q;"	kind:pred
set_unordlist.filter_map	set_unordlist.m	/^:- func set_unordlist.filter_map(func(T1) = T2, set_unordlist(T1))$/;kq|/^\<set_unordlist.filter_map\>/;'q;"	kind:func
set_unordlist.fold	set_unordlist.m	/^:- func set_unordlist.fold(func(T1, T2) = T2, set_unordlist(T1), T2) = T2.$/;kq|/^\<set_unordlist.fold\>/;'q;"	kind:func
set_unordlist.fold	set_unordlist.m	/^:- pred set_unordlist.fold(pred(T1, T2, T2), set_unordlist(T1), T2, T2).$/;kq|/^\<set_unordlist.fold\>/;'q;"	kind:pred
set_unordlist.fold2	set_unordlist.m	/^:- pred set_unordlist.fold2(pred(T1, T2, T2, T3, T3), set_unordlist(T1),$/;kq|/^\<set_unordlist.fold2\>/;'q;"	kind:pred
set_unordlist.fold3	set_unordlist.m	/^:- pred set_unordlist.fold3(pred(T1, T2, T2, T3, T3, T4, T4),$/;kq|/^\<set_unordlist.fold3\>/;'q;"	kind:pred
set_unordlist.fold4	set_unordlist.m	/^:- pred set_unordlist.fold4(pred(T1, T2, T2, T3, T3, T4, T4, T5, T5),$/;kq|/^\<set_unordlist.fold4\>/;'q;"	kind:pred
set_unordlist.fold5	set_unordlist.m	/^:- pred set_unordlist.fold5($/;kq|/^\<set_unordlist.fold5\>/;'q;"	kind:pred
set_unordlist.fold6	set_unordlist.m	/^:- pred set_unordlist.fold6($/;kq|/^\<set_unordlist.fold6\>/;'q;"	kind:pred
set_unordlist.from_list	set_unordlist.m	/^:- func set_unordlist.from_list(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.from_list\>/;'q;"	kind:func
set_unordlist.from_sorted_list	set_unordlist.m	/^:- func set_unordlist.from_sorted_list(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.from_sorted_list\>/;'q;"	kind:func
set_unordlist.init	set_unordlist.m	/^:- func set_unordlist.init = set_unordlist(T).$/;kq|/^\<set_unordlist.init\>/;'q;"	kind:func
set_unordlist.init	set_unordlist.m	/^:- pred set_unordlist.init(set_unordlist(_T)::uo) is det.$/;kq|/^\<set_unordlist.init\>/;'q;"	kind:pred
set_unordlist.insert	set_unordlist.m	/^:- func set_unordlist.insert(set_unordlist(T), T) = set_unordlist(T).$/;kq|/^\<set_unordlist.insert\>/;'q;"	kind:func
set_unordlist.insert	set_unordlist.m	/^:- pred set_unordlist.insert(T, set_unordlist(T), set_unordlist(T)).$/;kq|/^\<set_unordlist.insert\>/;'q;"	kind:pred
set_unordlist.insert_list	set_unordlist.m	/^:- func set_unordlist.insert_list(set_unordlist(T), list(T))$/;kq|/^\<set_unordlist.insert_list\>/;'q;"	kind:func
set_unordlist.insert_list	set_unordlist.m	/^:- pred set_unordlist.insert_list(list(T)::in,$/;kq|/^\<set_unordlist.insert_list\>/;'q;"	kind:pred
set_unordlist.insert_new	set_unordlist.m	/^:- pred set_unordlist.insert_new(T::in,$/;kq|/^\<set_unordlist.insert_new\>/;'q;"	kind:pred
set_unordlist.intersect	set_unordlist.m	/^:- func set_unordlist.intersect(set_unordlist(T), set_unordlist(T))$/;kq|/^\<set_unordlist.intersect\>/;'q;"	kind:func
set_unordlist.intersect	set_unordlist.m	/^:- pred set_unordlist.intersect(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.intersect\>/;'q;"	kind:pred
set_unordlist.intersect_2	set_unordlist.m	/^:- pred set_unordlist.intersect_2(list(T)::in, list(T)::in,$/;kq|/^\<set_unordlist.intersect_2\>/;'q;"	kind:pred	file:
set_unordlist.intersect_list	set_unordlist.m	/^:- func set_unordlist.intersect_list(list(set_unordlist(T)))$/;kq|/^\<set_unordlist.intersect_list\>/;'q;"	kind:func
set_unordlist.is_empty	set_unordlist.m	/^:- pred set_unordlist.is_empty(set_unordlist(_T)::in) is semidet.$/;kq|/^\<set_unordlist.is_empty\>/;'q;"	kind:pred
set_unordlist.is_member	set_unordlist.m	/^:- pred set_unordlist.is_member(T::in, set_unordlist(T)::in, bool::out)$/;kq|/^\<set_unordlist.is_member\>/;'q;"	kind:pred
set_unordlist.is_singleton	set_unordlist.m	/^:- pred set_unordlist.is_singleton(set_unordlist(T)::in, T::out) is semidet.$/;kq|/^\<set_unordlist.is_singleton\>/;'q;"	kind:pred
set_unordlist.list_to_set	set_unordlist.m	/^:- func set_unordlist.list_to_set(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.list_to_set\>/;'q;"	kind:func
set_unordlist.list_to_set	set_unordlist.m	/^:- pred set_unordlist.list_to_set(list(T)::in, set_unordlist(T)::out) is det.$/;kq|/^\<set_unordlist.list_to_set\>/;'q;"	kind:pred
set_unordlist.map	set_unordlist.m	/^:- func set_unordlist.map(func(T1) = T2, set_unordlist(T1))$/;kq|/^\<set_unordlist.map\>/;'q;"	kind:func
set_unordlist.member	set_unordlist.m	/^:- pred set_unordlist.member(T, set_unordlist(T)).$/;kq|/^\<set_unordlist.member\>/;'q;"	kind:pred
set_unordlist.non_empty	set_unordlist.m	/^:- pred set_unordlist.non_empty(set_unordlist(_T)::in) is semidet.$/;kq|/^\<set_unordlist.non_empty\>/;'q;"	kind:pred
set_unordlist.power_intersect	set_unordlist.m	/^:- func set_unordlist.power_intersect(set_unordlist(set_unordlist(T)))$/;kq|/^\<set_unordlist.power_intersect\>/;'q;"	kind:func
set_unordlist.power_intersect	set_unordlist.m	/^:- pred set_unordlist.power_intersect(set_unordlist(set_unordlist(T))::in,$/;kq|/^\<set_unordlist.power_intersect\>/;'q;"	kind:pred
set_unordlist.power_union	set_unordlist.m	/^:- func set_unordlist.power_union(set_unordlist(set_unordlist(T)))$/;kq|/^\<set_unordlist.power_union\>/;'q;"	kind:func
set_unordlist.power_union	set_unordlist.m	/^:- pred set_unordlist.power_union(set_unordlist(set_unordlist(T))::in,$/;kq|/^\<set_unordlist.power_union\>/;'q;"	kind:pred
set_unordlist.power_union_2	set_unordlist.m	/^:- pred set_unordlist.power_union_2(list(set_unordlist(T))::in,$/;kq|/^\<set_unordlist.power_union_2\>/;'q;"	kind:pred	file:
set_unordlist.remove	set_unordlist.m	/^:- pred set_unordlist.remove(T::in,$/;kq|/^\<set_unordlist.remove\>/;'q;"	kind:pred
set_unordlist.remove_least	set_unordlist.m	/^:- pred set_unordlist.remove_least(T::out,$/;kq|/^\<set_unordlist.remove_least\>/;'q;"	kind:pred
set_unordlist.remove_list	set_unordlist.m	/^:- pred set_unordlist.remove_list(list(T)::in,$/;kq|/^\<set_unordlist.remove_list\>/;'q;"	kind:pred
set_unordlist.singleton_set	set_unordlist.m	/^:- pred set_unordlist.singleton_set(T, set_unordlist(T)).$/;kq|/^\<set_unordlist.singleton_set\>/;'q;"	kind:pred
set_unordlist.subset	set_unordlist.m	/^:- pred set_unordlist.subset(set_unordlist(T)::in, set_unordlist(T)::in)$/;kq|/^\<set_unordlist.subset\>/;'q;"	kind:pred
set_unordlist.sul	set_unordlist.m	/^    --->    sul(list(T)).$/;kq|-;/\<set_unordlist.sul\>/;'q;"	kind:cons	file:
set_unordlist.superset	set_unordlist.m	/^:- pred set_unordlist.superset(set_unordlist(T)::in, set_unordlist(T)::in)$/;kq|/^\<set_unordlist.superset\>/;'q;"	kind:pred
set_unordlist.to_sorted_list	set_unordlist.m	/^:- func set_unordlist.to_sorted_list(set_unordlist(T)) = list(T).$/;kq|/^\<set_unordlist.to_sorted_list\>/;'q;"	kind:func
set_unordlist.to_sorted_list	set_unordlist.m	/^:- pred set_unordlist.to_sorted_list(set_unordlist(T)::in, list(T)::out)$/;kq|/^\<set_unordlist.to_sorted_list\>/;'q;"	kind:pred
set_unordlist.union	set_unordlist.m	/^:- func set_unordlist.union(set_unordlist(T), set_unordlist(T))$/;kq|/^\<set_unordlist.union\>/;'q;"	kind:func
set_unordlist.union	set_unordlist.m	/^:- pred set_unordlist.union(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.union\>/;'q;"	kind:pred
set_unordlist.union_list	set_unordlist.m	/^:- func set_unordlist.union_list(list(set_unordlist(T))) = set_unordlist(T).$/;kq|/^\<set_unordlist.union_list\>/;'q;"	kind:func
set_use_stream	bit_buffer.m	/^:- pred set_use_stream(bool::in,$/;kq|/^\<set_use_stream\>/;'q;"	kind:pred	file:
setenv	io.m	/^:- impure pred io.setenv(string::in, string::in) is semidet.$/;kq|/^\<io.setenv\>/;'q;"	kind:pred	file:
shared_memory	io.m	/^    ;       shared_memory$/;kq|-;/\<shared_memory\>/;'q;"	kind:cons
short_option	getopt.m	/^                short_option    :: pred(char, OptionType),$/;kq|-;/\<short_option\>/;'q;"	kind:fld	file:
short_option	getopt_io.m	/^                short_option    :: pred(char, OptionType),$/;kq|-;/\<short_option\>/;'q;"	kind:fld	file:
shortint_to_integer	integer.m	/^:- func shortint_to_integer(int) = integer.$/;kq|/^\<shortint_to_integer\>/;'q;"	kind:func	file:
should_atom_be_quoted	term_io.m	/^:- func should_atom_be_quoted(string, adjacent_to_graphic_token) = bool.$/;kq|/^\<should_atom_be_quoted\>/;'q;"	kind:func	file:
should_reduce_stack_usage	io.m	/^:- pred should_reduce_stack_usage(bool::out) is det.$/;kq|/^\<should_reduce_stack_usage\>/;'q;"	kind:pred	file:
shrink	array.m	/^:- func array.shrink(array(T), int) = array(T).$/;kq|/^\<array.shrink\>/;'q;"	kind:func
shrink	array.m	/^:- pred array.shrink(int, array(T), array(T)).$/;kq|/^\<array.shrink\>/;'q;"	kind:pred
shrink	bt_array.m	/^:- func bt_array.shrink(bt_array(T), int, int) = bt_array(T).$/;kq|/^\<bt_array.shrink\>/;'q;"	kind:func
shrink	bt_array.m	/^:- pred bt_array.shrink(bt_array(T)::in, int::in, int::in, bt_array(T)::out)$/;kq|/^\<bt_array.shrink\>/;'q;"	kind:pred
shrink_2	array.m	/^:- pred array.shrink_2(int::in, array(T)::array_di, array(T)::array_uo)$/;kq|/^\<array.shrink_2\>/;'q;"	kind:pred	file:
shrink_without_copying	bitmap.m	/^:- func shrink_without_copying(bitmap, num_bits) = bitmap.$/;kq|/^\<shrink_without_copying\>/;'q;"	kind:func
sign	integer.m	/^:- type sign == int.    % sign of integer and length of digit list$/;kq|-;/\<sign\>/;'q;"	kind:type	file:
signal	thread.semaphore.m	/^:- pred semaphore.signal(semaphore::in, io::di, io::uo) is det.$/;kq|/^\<semaphore.signal\>/;'q;"	kind:pred
signal_future	par_builtin.m	/^:- impure pred signal_future(future(T)::in, T::in) is det.$/;kq|/^\<signal_future\>/;'q;"	kind:pred
signalled	io.m	/^    ;       signalled(int).$/;kq|-;/\<signalled\>/;'q;"	kind:cons
signum	integer.m	/^:- func signum(int) = int.$/;kq|/^\<signum\>/;'q;"	kind:func	file:
signum	rational.m	/^:- func signum(integer) = integer.$/;kq|/^\<signum\>/;'q;"	kind:func	file:
simple	term_to_xml.m	/^    --->    simple$/;kq|-;/\<simple\>/;'q;"	kind:cons
sin	math.m	/^:- func math.sin(float) = float.$/;kq|/^\<math.sin\>/;'q;"	kind:func
single_rot_l	set_bbbtree.m	/^:- pred set_bbbtree.single_rot_l(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.single_rot_l\>/;'q;"	kind:pred	file:
single_rot_r	set_bbbtree.m	/^:- pred set_bbbtree.single_rot_r(T::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.single_rot_r\>/;'q;"	kind:pred	file:
singleton	bimap.m	/^:- func bimap.singleton(K, V) = bimap(K, V).$/;kq|/^\<bimap.singleton\>/;'q;"	kind:func
singleton	cord.m	/^:- func singleton(T) = cord(T).$/;kq|/^\<singleton\>/;'q;"	kind:func
singleton	injection.m	/^:- func injection.singleton(K, V) = injection(K, V).$/;kq|/^\<injection.singleton\>/;'q;"	kind:func
singleton	map.m	/^:- func map.singleton(K, V) = map(K, V).$/;kq|/^\<map.singleton\>/;'q;"	kind:func
singleton	rbtree.m	/^:- func rbtree.singleton(K, V) = rbtree(K, V).$/;kq|/^\<rbtree.singleton\>/;'q;"	kind:func
singleton	tree234.m	/^:- func tree234.singleton(K, V) = tree234(K, V).$/;kq|/^\<tree234.singleton\>/;'q;"	kind:func
singleton_set	fat_sparse_bitset.m	/^:- pred singleton_set(fat_sparse_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:pred
singleton_set	set.m	/^:- pred set.singleton_set(T, set(T)).$/;kq|/^\<set.singleton_set\>/;'q;"	kind:pred
singleton_set	set_bbbtree.m	/^:- pred set_bbbtree.singleton_set(T, set_bbbtree(T)).$/;kq|/^\<set_bbbtree.singleton_set\>/;'q;"	kind:pred
singleton_set	set_ctree234.m	/^:- pred set_ctree234.singleton_set(T, set_ctree234(T)).$/;kq|/^\<set_ctree234.singleton_set\>/;'q;"	kind:pred
singleton_set	set_ordlist.m	/^:- pred set_ordlist.singleton_set(T, set_ordlist(T)).$/;kq|/^\<set_ordlist.singleton_set\>/;'q;"	kind:pred
singleton_set	set_tree234.m	/^:- pred set_tree234.singleton_set(T, set_tree234(T)).$/;kq|/^\<set_tree234.singleton_set\>/;'q;"	kind:pred
singleton_set	set_unordlist.m	/^:- pred set_unordlist.singleton_set(T, set_unordlist(T)).$/;kq|/^\<set_unordlist.singleton_set\>/;'q;"	kind:pred
singleton_set	sparse_bitset.m	/^:- pred singleton_set(sparse_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:pred
singleton_set	test_bitset.m	/^:- func singleton_set(T) = test_bitset(T) <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:func
singleton_set	test_bitset.m	/^:- pred singleton_set(test_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:pred
sinh	math.m	/^:- func math.sinh(float) = float.$/;kq|/^\<math.sinh\>/;'q;"	kind:func
size	array.m	/^:- func array.size(array(_T)) = int.$/;kq|/^\<array.size\>/;'q;"	kind:func
size	array.m	/^:- pred array.size(array(_T), int).$/;kq|/^\<array.size\>/;'q;"	kind:pred
size	bt_array.m	/^:- func bt_array.size(bt_array(_T)) = int.$/;kq|/^\<bt_array.size\>/;'q;"	kind:func
size	bt_array.m	/^:- pred bt_array.size(bt_array(_T)::in, int::out) is det.$/;kq|/^\<bt_array.size\>/;'q;"	kind:pred
size	robdd.m	/^:- pred size(robdd(T)::in, int::out, int::out) is det.$/;kq|/^\<size\>/;'q;"	kind:pred
size	robdd.m	/^:- pred size(robdd(T)::in, int::out, int::out, list(var(T))::out) is det.$/;kq|/^\<size\>/;'q;"	kind:pred
size	rtree.m	/^    func size(K) = float,$/;kq|-;/\<size\>/;'q;"	kind:tcm
size	rtree.m	/^    func(size\/1) is box3d_volume, $/;kq|-;/\<size\>/;'q;"	kind:tcim	file:
size	rtree.m	/^    func(size\/1) is box_area, $/;kq|-;/\<size\>/;'q;"	kind:tcim	file:
size	rtree.m	/^    func(size\/1) is interval_length, $/;kq|-;/\<size\>/;'q;"	kind:tcim	file:
size	version_array.m	/^:- func size(version_array(T)) = int.$/;kq|/^\<size\>/;'q;"	kind:func
size	version_store.m	/^:- func size(version_store(S)) = int.$/;kq|/^\<size\>/;'q;"	kind:func	file:
size_2	robdd.m	/^:- pred size_2(robdd(T)::in, int::in, int::out, int::in, int::out, int::in,$/;kq|/^\<size_2\>/;'q;"	kind:pred	file:
size_of_required_exponent	string.m	/^:- func size_of_required_exponent(string, int) = int.$/;kq|/^\<size_of_required_exponent\>/;'q;"	kind:func	file:
skip_to_eol	lexer.m	/^:- pred skip_to_eol(io.input_stream::in, token::out, token_context::out,$/;kq|/^\<skip_to_eol\>/;'q;"	kind:pred	file:
skip_to_eol	parsing_utils.m	/^:- pred skip_to_eol(src::in, unit::out,$/;kq|/^\<skip_to_eol\>/;'q;"	kind:pred
skip_whitespace	parsing_utils.m	/^:- pred skip_whitespace(src::in, ps::in, ps::out) is semidet.$/;kq|/^\<skip_whitespace\>/;'q;"	kind:pred	file:
skip_whitespace_pred	parsing_utils.m	/^:- type skip_whitespace_pred == parser(unit).$/;kq|-;/\<skip_whitespace_pred\>/;'q;"	kind:type
skip_ws_pred	parsing_utils.m	/^                skip_ws_pred        ::  skip_whitespace_pred,$/;kq|-;/\<skip_ws_pred\>/;'q;"	kind:fld	file:
slice	bitmap.m	/^:- func bitmap.slice(bitmap, bit_index, num_bits) = bitmap.slice.$/;kq|/^\<bitmap.slice\>/;'q;"	kind:func
slice	bitmap.m	/^:- func slice ^ slice_bitmap = bitmap.$/;kq|/^\<slice\>/;'q;"	kind:func
slice	bitmap.m	/^:- func slice ^ slice_num_bits = num_bits.$/;kq|/^\<slice\>/;'q;"	kind:func
slice	bitmap.m	/^:- func slice ^ slice_num_bytes = num_bytes.$/;kq|/^\<slice\>/;'q;"	kind:func
slice	bitmap.m	/^:- func slice ^ slice_start_bit_index = bit_index.$/;kq|/^\<slice\>/;'q;"	kind:func
slice	bitmap.m	/^:- func slice ^ slice_start_byte_index = byte_index.$/;kq|/^\<slice\>/;'q;"	kind:func
slice	bitmap.m	/^:- type bitmap.slice$/;kq|-;/\<slice\>/;'q;"	kind:type	file:
slice_bitmap_field	bitmap.m	/^                slice_bitmap_field          :: bitmap,$/;kq|-;/\<slice_bitmap_field\>/;'q;"	kind:fld	file:
slice_num_bits_field	bitmap.m	/^                slice_num_bits_field        :: num_bits$/;kq|-;/\<slice_num_bits_field\>/;'q;"	kind:fld	file:
slice_start_bit_index_field	bitmap.m	/^                slice_start_bit_index_field :: bit_index,$/;kq|-;/\<slice_start_bit_index_field\>/;'q;"	kind:fld	file:
slow_set	array.m	/^:- func array.slow_set(array(T), int, T) = array(T).$/;kq|/^\<array.slow_set\>/;'q;"	kind:func
slow_set	array.m	/^:- pred array.slow_set(int, T, array(T), array(T)).$/;kq|/^\<array.slow_set\>/;'q;"	kind:pred
snd	pair.m	/^:- func snd(pair(X, Y)) = Y.$/;kq|/^\<snd\>/;'q;"	kind:func
snd	pair.m	/^:- pred snd(pair(X, Y)::in, Y::out) is det.$/;kq|/^\<snd\>/;'q;"	kind:pred
snoc	cord.m	/^:- func snoc(cord(T), T) = cord(T).$/;kq|/^\<snoc\>/;'q;"	kind:func
socket	io.m	/^    ;       socket$/;kq|-;/\<socket\>/;'q;"	kind:cons
software_error	exception.m	/^    --->    software_error(string).$/;kq|-;/\<software_error\>/;'q;"	kind:cons
software_error	exception.m	/^:- type software_error$/;kq|-;/\<software_error\>/;'q;"	kind:type
sol	set_ordlist.m	/^    --->    sol(list(T)).$/;kq|-;/\<sol\>/;'q;"	kind:cons	file:
solutions	solutions.m	/^:- func solutions(pred(T)) = list(T).$/;kq|/^\<solutions\>/;'q;"	kind:func
solutions	solutions.m	/^:- pred solutions(pred(T), list(T)).$/;kq|/^\<solutions\>/;'q;"	kind:pred
solutions.aggregate	solutions.m	/^:- func aggregate(pred(T), func(T, U) = U, U) = U.$/;kq|/^\<aggregate\>/;'q;"	kind:func
solutions.aggregate	solutions.m	/^:- pred aggregate(pred(T), pred(T, U, U), U, U).$/;kq|/^\<aggregate\>/;'q;"	kind:pred
solutions.aggregate2	solutions.m	/^:- pred aggregate2(pred(T), pred(T, U, U, V, V), U, U, V, V).$/;kq|/^\<aggregate2\>/;'q;"	kind:pred
solutions.builtin_aggregate	solutions.m	/^:- pred builtin_aggregate(pred(T), pred(T, U, U), U, U).$/;kq|/^\<builtin_aggregate\>/;'q;"	kind:pred	file:
solutions.builtin_aggregate2	solutions.m	/^:- pred builtin_aggregate2(pred(T), pred(T, U, U, V, V), U, U, V, V).$/;kq|/^\<builtin_aggregate2\>/;'q;"	kind:pred	file:
solutions.builtin_solutions	solutions.m	/^:- pred builtin_solutions(pred(T), list(T)).$/;kq|/^\<builtin_solutions\>/;'q;"	kind:pred	file:
solutions.discard_trail_ticket	solutions.m	/^:- impure pred discard_trail_ticket is det.$/;kq|/^\<discard_trail_ticket\>/;'q;"	kind:pred	file:
solutions.do_while	solutions.m	/^:- pred do_while(pred(T), pred(T, bool, T2, T2), T2, T2).$/;kq|/^\<do_while\>/;'q;"	kind:pred
solutions.get_registers	solutions.m	/^:- impure pred get_registers(heap_ptr::out, heap_ptr::out, trail_ptr::out)$/;kq|/^\<get_registers\>/;'q;"	kind:pred	file:
solutions.heap_ptr	solutions.m	/^:- type heap_ptr == private_builtin.heap_pointer.$/;kq|-;/\<solutions.heap_ptr\>/;'q;"	kind:type	file:
solutions.non_cc_call	solutions.m	/^:- impure pred non_cc_call(pred(T, Acc, Acc), T, Acc, Acc).$/;kq|/^\<non_cc_call\>/;'q;"	kind:pred	file:
solutions.non_cc_call	solutions.m	/^:- impure pred non_cc_call(pred(T1, Acc1, Acc1, Acc2, Acc2), T1,$/;kq|/^\<non_cc_call\>/;'q;"	kind:pred	file:
solutions.non_cc_call	solutions.m	/^:- impure pred non_cc_call(pred(T1, T2, Acc, Acc), T1, T2, Acc, Acc).$/;kq|/^\<non_cc_call\>/;'q;"	kind:pred	file:
solutions.partial_deep_copy	solutions.m	/^:- impure pred partial_deep_copy(heap_ptr, T, T) is det.$/;kq|/^\<partial_deep_copy\>/;'q;"	kind:pred	file:
solutions.reset_solutions_heap	solutions.m	/^:- impure pred reset_solutions_heap(heap_ptr::in) is det.$/;kq|/^\<reset_solutions_heap\>/;'q;"	kind:pred	file:
solutions.trail_ptr	solutions.m	/^:- type trail_ptr ---> trail_ptr(c_pointer).$/;kq|-;/\<solutions.trail_ptr\>/;'q;"	kind:cons	file:
solutions.trail_ptr	solutions.m	/^:- type trail_ptr ---> trail_ptr(c_pointer).$/;kq|-;/\<solutions.trail_ptr\>/;'q;"	kind:type	file:
solutions.unsorted_aggregate	solutions.m	/^:- pred unsorted_aggregate(pred(T), pred(T, U, U), U, U).$/;kq|/^\<unsorted_aggregate\>/;'q;"	kind:pred
solutions.unsorted_aggregate2	solutions.m	/^:- pred unsorted_aggregate2(pred(T), pred(T, U, U, V, V), U, U, V, V).$/;kq|/^\<unsorted_aggregate2\>/;'q;"	kind:pred
solutions.unsorted_solutions	solutions.m	/^:- pred unsorted_solutions(pred(T), list(T)).$/;kq|/^\<unsorted_solutions\>/;'q;"	kind:pred
solutions_set	solutions.m	/^:- func solutions_set(pred(T)) = set(T).$/;kq|/^\<solutions_set\>/;'q;"	kind:func
solutions_set	solutions.m	/^:- pred solutions_set(pred(T), set(T)).$/;kq|/^\<solutions_set\>/;'q;"	kind:pred
solve_quadratic	math.m	/^:- func math.solve_quadratic(float, float, float) = quadratic_roots.$/;kq|/^\<math.solve_quadratic\>/;'q;"	kind:func
some	deconstruct.m	/^    --->    some [T] arg(T)$/;kq|-;/\<some\>/;'q;"	kind:cons
some	univ.m	/^    --->    some [T] univ_cons(T).$/;kq|-;/\<some\>/;'q;"	kind:cons	file:
some_vars	robdd.m	/^    ;       some_vars(vars :: T).$/;kq|-;/\<some_vars\>/;'q;"	kind:cons
some_version_store_type	version_store.m	/^:- type some_version_store_type ---> some_version_store_type.$/;kq|-;/\<some_version_store_type\>/;'q;"	kind:cons	file:
some_version_store_type	version_store.m	/^:- type some_version_store_type ---> some_version_store_type.$/;kq|-;/\<some_version_store_type\>/;'q;"	kind:type	file:
sorry	private_builtin.m	/^:- pred sorry(string::in) is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:pred
sorry	require.m	/^:- func sorry(string, string) = _ is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:func
sorry	require.m	/^:- func sorry(string, string, string) = _ is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:func
sorry	require.m	/^:- pred sorry(string::in, string::in) is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:pred
sorry	require.m	/^:- pred sorry(string::in, string::in, string::in) is erroneous.$/;kq|/^\<sorry\>/;'q;"	kind:pred
sort	array.m	/^:- func array.sort(array(T)) = array(T).$/;kq|/^\<array.sort\>/;'q;"	kind:func
sort	list.m	/^:- func list.sort(comparison_func(X), list(X)) = list(X).$/;kq|/^\<list.sort\>/;'q;"	kind:func
sort	list.m	/^:- func list.sort(list(T)) = list(T).$/;kq|/^\<list.sort\>/;'q;"	kind:func
sort	list.m	/^:- pred list.sort(comparison_pred(X)::in(comparison_pred), list(X)::in,$/;kq|/^\<list.sort\>/;'q;"	kind:pred
sort	list.m	/^:- pred list.sort(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.sort\>/;'q;"	kind:pred
sort_and_remove_dups	list.m	/^:- func list.sort_and_remove_dups(list(T)) = list(T).$/;kq|/^\<list.sort_and_remove_dups\>/;'q;"	kind:func
sort_and_remove_dups	list.m	/^:- pred list.sort_and_remove_dups(comparison_pred(X)::in(comparison_pred),$/;kq|/^\<list.sort_and_remove_dups\>/;'q;"	kind:pred
sort_and_remove_dups	list.m	/^:- pred list.sort_and_remove_dups(list(T)::in, list(T)::out) is det.$/;kq|/^\<list.sort_and_remove_dups\>/;'q;"	kind:pred
sort_fix_2014	array.m	/^:- pred array.sort_fix_2014 is det.$/;kq|/^\<array.sort_fix_2014\>/;'q;"	kind:pred
sort_no_dups	set_ordlist.m	/^:- pred set_ordlist.sort_no_dups(list(T)::in, set_ordlist(T)::out) is semidet.$/;kq|/^\<set_ordlist.sort_no_dups\>/;'q;"	kind:pred	file:
sorted_keys	map.m	/^:- func map.sorted_keys(map(K, _V)) = list(K).$/;kq|/^\<map.sorted_keys\>/;'q;"	kind:func
sorted_keys	map.m	/^:- pred map.sorted_keys(map(K, _V)::in, list(K)::out) is det.$/;kq|/^\<map.sorted_keys\>/;'q;"	kind:pred
sorted_list_to_leaf_nodes	tree_bitset.m	/^:- func sorted_list_to_leaf_nodes(list(int)) = list(leaf_node).$/;kq|/^\<sorted_list_to_leaf_nodes\>/;'q;"	kind:func	file:
sorted_list_to_set	fat_sparse_bitset.m	/^:- func sorted_list_to_set(list(T)) = fat_sparse_bitset(T) <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	fat_sparse_bitset.m	/^:- pred sorted_list_to_set(list(T)::in, fat_sparse_bitset(T)::out)$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	set.m	/^:- func set.sorted_list_to_set(list(T)) = set(T).$/;kq|/^\<set.sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	set.m	/^:- pred set.sorted_list_to_set(list(T)::in, set(T)::out) is det.$/;kq|/^\<set.sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	set_bbbtree.m	/^:- func set_bbbtree.sorted_list_to_set(list(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	set_bbbtree.m	/^:- pred set_bbbtree.sorted_list_to_set(list(T)::in, set_bbbtree(T)::out)$/;kq|/^\<set_bbbtree.sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	set_ctree234.m	/^:- func set_ctree234.sorted_list_to_set(list(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	set_ordlist.m	/^:- func set_ordlist.sorted_list_to_set(list(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	set_ordlist.m	/^:- pred set_ordlist.sorted_list_to_set(list(T)::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	set_tree234.m	/^:- func set_tree234.sorted_list_to_set(list(T)) = set_tree234(T).$/;kq|/^\<set_tree234.sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	set_tree234.m	/^:- pred set_tree234.sorted_list_to_set(list(T)::in, set_tree234(T)::out) is det.$/;kq|/^\<set_tree234.sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	set_unordlist.m	/^:- func set_unordlist.sorted_list_to_set(list(T)) = set_unordlist(T).$/;kq|/^\<set_unordlist.sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	set_unordlist.m	/^:- pred set_unordlist.sorted_list_to_set(list(T)::in, set_unordlist(T)::out)$/;kq|/^\<set_unordlist.sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	sparse_bitset.m	/^:- func sorted_list_to_set(list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	sparse_bitset.m	/^:- pred sorted_list_to_set(list(T)::in, sparse_bitset(T)::out)$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	test_bitset.m	/^:- func sorted_list_to_set(list(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	test_bitset.m	/^:- pred sorted_list_to_set(list(T)::in, test_bitset(T)::out) is det <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set	tree_bitset.m	/^:- func sorted_list_to_set(list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:func
sorted_list_to_set	tree_bitset.m	/^:- pred sorted_list_to_set(list(T)::in, tree_bitset(T)::out) is det <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:pred
sorted_list_to_set_2	fat_sparse_bitset.m	/^:- func sorted_list_to_set_2(list(T)) = fat_bitset_impl <= enum(T).$/;kq|/^\<sorted_list_to_set_2\>/;'q;"	kind:func	file:
sorted_list_to_set_2	sparse_bitset.m	/^:- func sorted_list_to_set_2(list(T)) = bitset_impl <= enum(T).$/;kq|/^\<sorted_list_to_set_2\>/;'q;"	kind:func	file:
sorted_list_to_set_3	fat_sparse_bitset.m	/^:- pred sorted_list_to_set_3(T::in, list(T)::in, int::out, int::out,$/;kq|/^\<sorted_list_to_set_3\>/;'q;"	kind:pred	file:
sorted_list_to_set_3	sparse_bitset.m	/^:- pred sorted_list_to_set_3(T::in, list(T)::in, int::out, int::out,$/;kq|/^\<sorted_list_to_set_3\>/;'q;"	kind:pred	file:
sorted_list_to_set_len	set_bbbtree.m	/^:- pred set_bbbtree.sorted_list_to_set_len(list(T)::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.sorted_list_to_set_len\>/;'q;"	kind:pred
sorted_list_to_set_len2	set_bbbtree.m	/^:- pred set_bbbtree.sorted_list_to_set_len2(list(T)::in, list(T)::out,$/;kq|/^\<set_bbbtree.sorted_list_to_set_len2\>/;'q;"	kind:pred	file:
source_name	io.m	/^:- func source_name(stream_source) = string.$/;kq|/^\<source_name\>/;'q;"	kind:func	file:
space	pprint.m	/^:- func space               = doc.$/;kq|/^\<space\>/;'q;"	kind:func
space_line	pprint.m	/^:- func space_line          = doc.$/;kq|/^\<space_line\>/;'q;"	kind:func
sparse_bitset	sparse_bitset.m	/^    --->    sparse_bitset(bitset_impl).$/;kq|-;/\<sparse_bitset\>/;'q;"	kind:cons	file:
sparse_bitset	sparse_bitset.m	/^:- type sparse_bitset(T)    % <= enum(T)$/;kq|-;/\<sparse_bitset\>/;'q;"	kind:type	file:
sparse_bitset	sparse_bitset.m	/^:- type sparse_bitset(T). % <= enum(T).$/;kq|-;/\<sparse_bitset\>/;'q;"	kind:type
sparse_bitset.all_true	sparse_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), sparse_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
sparse_bitset.all_true_bits	sparse_bitset.m	/^:- pred all_true_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<all_true_bits\>/;'q;"	kind:pred	file:
sparse_bitset.all_true_node	sparse_bitset.m	/^:- pred all_true_node(pred(T)::in(pred(in) is semidet), bitset_impl::in)$/;kq|/^\<all_true_node\>/;'q;"	kind:pred	file:
sparse_bitset.bits	sparse_bitset.m	/^                bits    :: int  % bits offset .. offset + bits_per_int - 1$/;kq|-;/\<sparse_bitset.bits\>/;'q;"	kind:fld	file:
sparse_bitset.bits_for_index	sparse_bitset.m	/^:- pred bits_for_index(int::in, int::out, int::out) is det.$/;kq|/^\<bits_for_index\>/;'q;"	kind:pred	file:
sparse_bitset.bitset_elem	sparse_bitset.m	/^    --->    bitset_elem($/;kq|-;/\<sparse_bitset.bitset_elem\>/;'q;"	kind:cons	file:
sparse_bitset.bitset_elem	sparse_bitset.m	/^:- type bitset_elem$/;kq|-;/\<sparse_bitset.bitset_elem\>/;'q;"	kind:type	file:
sparse_bitset.bitset_impl	sparse_bitset.m	/^:- type bitset_impl == list(bitset_elem).$/;kq|-;/\<sparse_bitset.bitset_impl\>/;'q;"	kind:type	file:
sparse_bitset.clear_bit	sparse_bitset.m	/^:- func clear_bit(int, int) = int.$/;kq|/^\<clear_bit\>/;'q;"	kind:func	file:
sparse_bitset.contains	sparse_bitset.m	/^:- pred contains(sparse_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
sparse_bitset.count	sparse_bitset.m	/^:- func count(sparse_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
sparse_bitset.count_bits	sparse_bitset.m	/^:- pred count_bits(int::in, int::in, int::in,$/;kq|/^\<count_bits\>/;'q;"	kind:pred	file:
sparse_bitset.delete	sparse_bitset.m	/^:- func delete(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<delete\>/;'q;"	kind:func
sparse_bitset.delete	sparse_bitset.m	/^:- pred delete(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
sparse_bitset.delete_list	sparse_bitset.m	/^:- func delete_list(sparse_bitset(T), list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<delete_list\>/;'q;"	kind:func
sparse_bitset.delete_list	sparse_bitset.m	/^:- pred delete_list(list(T)::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<delete_list\>/;'q;"	kind:pred
sparse_bitset.difference	sparse_bitset.m	/^:- func difference(sparse_bitset(T), sparse_bitset(T)) = sparse_bitset(T).$/;kq|/^\<difference\>/;'q;"	kind:func
sparse_bitset.difference	sparse_bitset.m	/^:- pred difference(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<difference\>/;'q;"	kind:pred
sparse_bitset.difference_2	sparse_bitset.m	/^:- func difference_2(bitset_impl, bitset_impl) = bitset_impl.$/;kq|/^\<difference_2\>/;'q;"	kind:func	file:
sparse_bitset.divide	sparse_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), sparse_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
sparse_bitset.divide_bits	sparse_bitset.m	/^:- pred divide_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_bits\>/;'q;"	kind:pred	file:
sparse_bitset.divide_by_set	sparse_bitset.m	/^:- pred divide_by_set(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
sparse_bitset.divide_nodes	sparse_bitset.m	/^:- pred divide_nodes(pred(T)::in(pred(in) is semidet),$/;kq|/^\<divide_nodes\>/;'q;"	kind:pred	file:
sparse_bitset.do_foldl2_pred	sparse_bitset.m	/^:- pred do_foldl2_pred(pred(T, U, U, V, V), bitset_impl, U, U, V, V)$/;kq|/^\<do_foldl2_pred\>/;'q;"	kind:pred	file:
sparse_bitset.do_foldl_pred	sparse_bitset.m	/^:- pred do_foldl_pred(pred(T, U, U), bitset_impl, U, U) <= enum(T).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
sparse_bitset.do_foldr2_pred	sparse_bitset.m	/^:- pred do_foldr2_pred(pred(T, U, U, V, V), bitset_impl, U, U, V, V)$/;kq|/^\<do_foldr2_pred\>/;'q;"	kind:pred	file:
sparse_bitset.do_foldr_pred	sparse_bitset.m	/^:- pred do_foldr_pred(pred(T, U, U), bitset_impl, U, U) <= enum(T).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
sparse_bitset.empty	sparse_bitset.m	/^:- pred empty(sparse_bitset(T)).$/;kq|/^\<empty\>/;'q;"	kind:pred
sparse_bitset.equal	sparse_bitset.m	/^:- pred equal(sparse_bitset(T)::in, sparse_bitset(T)::in) is semidet.$/;kq|/^\<equal\>/;'q;"	kind:pred
sparse_bitset.filter	sparse_bitset.m	/^:- func filter(pred(T), sparse_bitset(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<filter\>/;'q;"	kind:func
sparse_bitset.filter	sparse_bitset.m	/^:- pred filter(pred(T), sparse_bitset(T), sparse_bitset(T), sparse_bitset(T))$/;kq|/^\<filter\>/;'q;"	kind:pred
sparse_bitset.find_least_bit	sparse_bitset.m	/^:- func find_least_bit(int) = int.$/;kq|/^\<find_least_bit\>/;'q;"	kind:func	file:
sparse_bitset.find_least_bit_2	sparse_bitset.m	/^:- func find_least_bit_2(int, int, int) = int.$/;kq|/^\<find_least_bit_2\>/;'q;"	kind:func	file:
sparse_bitset.fold2_bits	sparse_bitset.m	/^:- pred fold2_bits(fold_direction, pred(T, U, U, V, V),$/;kq|/^\<fold2_bits\>/;'q;"	kind:pred	file:
sparse_bitset.fold_bits	sparse_bitset.m	/^:- pred fold_bits(fold_direction, pred(T, U, U),$/;kq|/^\<fold_bits\>/;'q;"	kind:pred	file:
sparse_bitset.fold_direction	sparse_bitset.m	/^:- type fold_direction$/;kq|-;/\<sparse_bitset.fold_direction\>/;'q;"	kind:type	file:
sparse_bitset.foldl	sparse_bitset.m	/^:- func foldl(func(T, U) = U, sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
sparse_bitset.foldl	sparse_bitset.m	/^:- pred foldl(pred(T, U, U), sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
sparse_bitset.foldl2	sparse_bitset.m	/^:- pred foldl2(pred(T, U, U, V, V), sparse_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldl2\>/;'q;"	kind:pred
sparse_bitset.foldr	sparse_bitset.m	/^:- func foldr(func(T, U) = U, sparse_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:func
sparse_bitset.foldr	sparse_bitset.m	/^:- pred foldr(pred(T, U, U), sparse_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:pred
sparse_bitset.foldr2	sparse_bitset.m	/^:- pred foldr2(pred(T, U, U, V, V), sparse_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldr2\>/;'q;"	kind:pred
sparse_bitset.from_set	sparse_bitset.m	/^:- func from_set(set.set(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
sparse_bitset.get_bit	sparse_bitset.m	/^:- func get_bit(int, int) = int.$/;kq|/^\<get_bit\>/;'q;"	kind:func	file:
sparse_bitset.high_to_low	sparse_bitset.m	/^    ;       high_to_low.$/;kq|-;/\<sparse_bitset.high_to_low\>/;'q;"	kind:cons	file:
sparse_bitset.init	sparse_bitset.m	/^:- func init = sparse_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
sparse_bitset.init	sparse_bitset.m	/^:- pred init(sparse_bitset(T)::out) is det.$/;kq|/^\<init\>/;'q;"	kind:pred
sparse_bitset.insert	sparse_bitset.m	/^:- func insert(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<insert\>/;'q;"	kind:func
sparse_bitset.insert	sparse_bitset.m	/^:- pred insert(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
sparse_bitset.insert_2	sparse_bitset.m	/^:- pred insert_2(bitset_impl::in, int::in, bitset_impl::out) is det.$/;kq|/^\<insert_2\>/;'q;"	kind:pred	file:
sparse_bitset.insert_list	sparse_bitset.m	/^:- func insert_list(sparse_bitset(T), list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<insert_list\>/;'q;"	kind:func
sparse_bitset.insert_list	sparse_bitset.m	/^:- pred insert_list(list(T)::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<insert_list\>/;'q;"	kind:pred
sparse_bitset.insert_new	sparse_bitset.m	/^:- pred insert_new(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<insert_new\>/;'q;"	kind:pred
sparse_bitset.insert_new_2	sparse_bitset.m	/^:- pred insert_new_2(int::in, bitset_impl::in, bitset_impl::out)$/;kq|/^\<insert_new_2\>/;'q;"	kind:pred	file:
sparse_bitset.intersect	sparse_bitset.m	/^:- func intersect(sparse_bitset(T), sparse_bitset(T)) = sparse_bitset(T).$/;kq|/^\<intersect\>/;'q;"	kind:func
sparse_bitset.intersect	sparse_bitset.m	/^:- pred intersect(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<intersect\>/;'q;"	kind:pred
sparse_bitset.intersect_2	sparse_bitset.m	/^:- func intersect_2(bitset_impl, bitset_impl) = bitset_impl.$/;kq|/^\<intersect_2\>/;'q;"	kind:func	file:
sparse_bitset.intersect_list	sparse_bitset.m	/^:- func intersect_list(list(sparse_bitset(T))) = sparse_bitset(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
sparse_bitset.intersect_list	sparse_bitset.m	/^:- pred intersect_list(list(sparse_bitset(T))::in, sparse_bitset(T)::out)$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
sparse_bitset.is_empty	sparse_bitset.m	/^:- pred is_empty(sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
sparse_bitset.is_non_empty	sparse_bitset.m	/^:- pred is_non_empty(sparse_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
sparse_bitset.is_singleton	sparse_bitset.m	/^:- pred is_singleton(sparse_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
sparse_bitset.list_to_set	sparse_bitset.m	/^:- func list_to_set(list(T)) = sparse_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
sparse_bitset.list_to_set	sparse_bitset.m	/^:- pred list_to_set(list(T)::in, sparse_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
sparse_bitset.list_to_set_2	sparse_bitset.m	/^:- func list_to_set_2(list(T), bitset_impl) = bitset_impl <= enum(T).$/;kq|/^\<list_to_set_2\>/;'q;"	kind:func	file:
sparse_bitset.list_to_set_3	sparse_bitset.m	/^:- pred list_to_set_3(list(T)::in, int::in, int::in, int::out,$/;kq|/^\<list_to_set_3\>/;'q;"	kind:pred	file:
sparse_bitset.low_to_high	sparse_bitset.m	/^    --->    low_to_high$/;kq|-;/\<sparse_bitset.low_to_high\>/;'q;"	kind:cons	file:
sparse_bitset.make_bitset_elem	sparse_bitset.m	/^:- func make_bitset_elem(int, int) = bitset_elem.$/;kq|/^\<make_bitset_elem\>/;'q;"	kind:func	file:
sparse_bitset.mask	sparse_bitset.m	/^:- func mask(int) = int.$/;kq|/^\<mask\>/;'q;"	kind:func	file:
sparse_bitset.member	sparse_bitset.m	/^:- pred member(T, sparse_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
sparse_bitset.offset	sparse_bitset.m	/^                offset  :: int, % multiple of bits_per_int$/;kq|-;/\<sparse_bitset.offset\>/;'q;"	kind:fld	file:
sparse_bitset.remove	sparse_bitset.m	/^:- pred remove(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
sparse_bitset.remove_gt	sparse_bitset.m	/^:- func remove_gt(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_gt\>/;'q;"	kind:func
sparse_bitset.remove_gt	sparse_bitset.m	/^:- pred remove_gt(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_gt\>/;'q;"	kind:pred
sparse_bitset.remove_gt_2	sparse_bitset.m	/^:- func remove_gt_2(bitset_impl, int) = bitset_impl.$/;kq|/^\<remove_gt_2\>/;'q;"	kind:func	file:
sparse_bitset.remove_least	sparse_bitset.m	/^:- pred remove_least(T::out, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_least\>/;'q;"	kind:pred
sparse_bitset.remove_leq	sparse_bitset.m	/^:- func remove_leq(sparse_bitset(T), T) = sparse_bitset(T) <= enum(T).$/;kq|/^\<remove_leq\>/;'q;"	kind:func
sparse_bitset.remove_leq	sparse_bitset.m	/^:- pred remove_leq(T::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_leq\>/;'q;"	kind:pred
sparse_bitset.remove_leq_2	sparse_bitset.m	/^:- func remove_leq_2(bitset_impl, int) = bitset_impl.$/;kq|/^\<remove_leq_2\>/;'q;"	kind:func	file:
sparse_bitset.remove_list	sparse_bitset.m	/^:- pred remove_list(list(T)::in, sparse_bitset(T)::in, sparse_bitset(T)::out)$/;kq|/^\<remove_list\>/;'q;"	kind:pred
sparse_bitset.rest	sparse_bitset.m	/^:- func rest(bitset_impl::in(bound([ground | ground]))) =$/;kq|/^\<rest\>/;'q;"	kind:func	file:
sparse_bitset.set_bit	sparse_bitset.m	/^:- func set_bit(int, int) = int.$/;kq|/^\<set_bit\>/;'q;"	kind:func	file:
sparse_bitset.singleton_set	sparse_bitset.m	/^:- pred singleton_set(sparse_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:pred
sparse_bitset.subset	sparse_bitset.m	/^:- pred subset(sparse_bitset(T)::in, sparse_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
sparse_bitset.superset	sparse_bitset.m	/^:- pred superset(sparse_bitset(T)::in, sparse_bitset(T)::in) is semidet.$/;kq|/^\<superset\>/;'q;"	kind:pred
sparse_bitset.to_set	sparse_bitset.m	/^:- func to_set(sparse_bitset(T)) = set.set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
sparse_bitset.to_sorted_list	sparse_bitset.m	/^:- func to_sorted_list(sparse_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
sparse_bitset.to_sorted_list	sparse_bitset.m	/^:- pred to_sorted_list(sparse_bitset(T)::in, list(T)::out) is det <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
sparse_bitset.union	sparse_bitset.m	/^:- func union(sparse_bitset(T), sparse_bitset(T)) = sparse_bitset(T).$/;kq|/^\<union\>/;'q;"	kind:func
sparse_bitset.union	sparse_bitset.m	/^:- pred union(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<union\>/;'q;"	kind:pred
sparse_bitset.union_2	sparse_bitset.m	/^:- func union_2(bitset_impl, bitset_impl) = bitset_impl.$/;kq|/^\<union_2\>/;'q;"	kind:func	file:
sparse_bitset.union_list	sparse_bitset.m	/^:- func union_list(list(sparse_bitset(T))) = sparse_bitset(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
sparse_bitset.union_list	sparse_bitset.m	/^:- pred union_list(list(sparse_bitset(T))::in, sparse_bitset(T)::out) is det.$/;kq|/^\<union_list\>/;'q;"	kind:pred
sparse_bitset.union_list_pass	sparse_bitset.m	/^:- pred union_list_pass(list(sparse_bitset(T))::in,$/;kq|/^\<union_list_pass\>/;'q;"	kind:pred	file:
sparse_bitset_to_doc	pprint.m	/^:- func sparse_bitset_to_doc(int, sparse_bitset(T)) = doc <= enum(T).$/;kq|/^\<sparse_bitset_to_doc\>/;'q;"	kind:func	file:
spawn	thread.m	/^:- pred spawn(pred(io, io)::in(pred(di, uo) is cc_multi),$/;kq|/^\<spawn\>/;'q;"	kind:pred
spec	string.m	/^                spec        :: spec$/;kq|-;/\<spec\>/;'q;"	kind:fld	file:
spec	string.m	/^:- pred spec(spec::out,$/;kq|/^\<spec\>/;'q;"	kind:pred	file:
spec	string.m	/^:- type spec$/;kq|-;/\<spec\>/;'q;"	kind:type	file:
spec_case	string.m	/^:- type spec_case$/;kq|-;/\<spec_case\>/;'q;"	kind:type	file:
spec_conv	string.m	/^    --->    spec_conv($/;kq|-;/\<spec_conv\>/;'q;"	kind:cons	file:
spec_is_capital	string.m	/^    --->    spec_is_capital$/;kq|-;/\<spec_is_capital\>/;'q;"	kind:cons	file:
spec_is_not_capital	string.m	/^    ;       spec_is_not_capital.$/;kq|-;/\<spec_is_not_capital\>/;'q;"	kind:cons	file:
spec_string	string.m	/^    ;       spec_string(list(char)).$/;kq|-;/\<spec_string\>/;'q;"	kind:cons	file:
special	getopt.m	/^    ;       special$/;kq|-;/\<special\>/;'q;"	kind:cons
special	getopt_io.m	/^    ;       special$/;kq|-;/\<special\>/;'q;"	kind:cons
special_data	getopt.m	/^:- type special_data$/;kq|-;/\<special_data\>/;'q;"	kind:type
special_data	getopt_io.m	/^:- type special_data$/;kq|-;/\<special_data\>/;'q;"	kind:type
special_handler	getopt.m	/^                special_handler :: option_ops_special(OptionType)$/;kq|-;/\<special_handler\>/;'q;"	kind:fld	file:
special_handler	getopt_io.m	/^                special_handler :: option_ops_special(OptionType)$/;kq|-;/\<special_handler\>/;'q;"	kind:fld	file:
special_token	lexer.m	/^:- pred special_token(char::in, token::out) is semidet.$/;kq|/^\<special_token\>/;'q;"	kind:pred	file:
specifier	string.m	/^:- type string.specifier$/;kq|-;/\<specifier\>/;'q;"	kind:type	file:
specifier_to_string	string.m	/^:- func specifier_to_string(string.specifier) = string.$/;kq|/^\<specifier_to_string\>/;'q;"	kind:func	file:
split	string.m	/^:- pred string.split(string::in, int::in, string::out, string::out) is det.$/;kq|/^\<string.split\>/;'q;"	kind:pred
split_4_node	rtree.m	/^:- pred split_4_node(rtree_2(K, V)::in(four), K::out, rtree_2(K, V)::out,$/;kq|/^\<split_4_node\>/;'q;"	kind:pred	file:
split_at_char	string.m	/^:- func string.split_at_char(char, string) = list(string).$/;kq|/^\<string.split_at_char\>/;'q;"	kind:func
split_at_decimal_point	string.m	/^:- pred split_at_decimal_point(string::in, string::out, string::out) is det.$/;kq|/^\<split_at_decimal_point\>/;'q;"	kind:pred	file:
split_at_exponent	string.m	/^:- pred split_at_exponent(string::in, string::out, string::out) is det.$/;kq|/^\<split_at_exponent\>/;'q;"	kind:pred	file:
split_at_separator	string.m	/^:- func string.split_at_separator(pred(char), string) = list(string).$/;kq|/^\<string.split_at_separator\>/;'q;"	kind:func
split_at_separator_2	string.m	/^:- pred split_at_separator_2(pred(char)::in(pred(in) is semidet), string::in,$/;kq|/^\<split_at_separator_2\>/;'q;"	kind:pred	file:
split_at_string	string.m	/^:- func split_at_string(int, int, string, string) = list(string).$/;kq|/^\<split_at_string\>/;'q;"	kind:func	file:
split_at_string	string.m	/^:- func string.split_at_string(string, string) = list(string).$/;kq|/^\<string.split_at_string\>/;'q;"	kind:func
split_by_codepoint	string.m	/^:- pred string.split_by_codepoint(string::in, int::in, string::out, string::out)$/;kq|/^\<string.split_by_codepoint\>/;'q;"	kind:pred
split_four	set_ctree234.m	/^:- pred set_ctree234.split_four(set_tree234(T)::in_four, T::out,$/;kq|/^\<set_ctree234.split_four\>/;'q;"	kind:pred	file:
split_four	set_tree234.m	/^:- pred set_tree234.split_four(set_tree234(E)::in_four, E::out,$/;kq|/^\<set_tree234.split_four\>/;'q;"	kind:pred	file:
split_four	tree234.m	/^:- pred tree234.split_four(tree234(K, V), K, V, tree234(K, V), tree234(K, V)).$/;kq|/^\<tree234.split_four\>/;'q;"	kind:pred	file:
split_gt	set_bbbtree.m	/^:- pred set_bbbtree.split_gt(set_bbbtree(T)::in, T::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.split_gt\>/;'q;"	kind:pred	file:
split_last	cord.m	/^:- pred split_last(cord(T)::in, cord(T)::out, T::out) is semidet.$/;kq|/^\<split_last\>/;'q;"	kind:pred
split_last	list.m	/^:- pred list.split_last(list(T)::in, list(T)::out, T::out) is semidet.$/;kq|/^\<list.split_last\>/;'q;"	kind:pred
split_last_node	cord.m	/^:- pred split_last_node(cord_node(T)::in, cord(T)::out, T::out) is det.$/;kq|/^\<split_last_node\>/;'q;"	kind:pred	file:
split_list	list.m	/^:- pred list.split_list(int::in, list(T)::in, list(T)::out, list(T)::out)$/;kq|/^\<list.split_list\>/;'q;"	kind:pred
split_list_last	cord.m	/^:- pred split_list_last(T::in, list(T)::in, list(T)::out, T::out) is det.$/;kq|/^\<split_list_last\>/;'q;"	kind:pred	file:
split_lt	set_bbbtree.m	/^:- pred set_bbbtree.split_lt(set_bbbtree(T)::in, T::in, set_bbbtree(T)::out,$/;kq|/^\<set_bbbtree.split_lt\>/;'q;"	kind:pred	file:
split_name	dir.m	/^:- pred dir.split_name(string::in, string::out, string::out) is semidet.$/;kq|/^\<dir.split_name\>/;'q;"	kind:pred
split_name_2	dir.m	/^:- pred dir.split_name_2(list(char)::in, string::out, string::out) is semidet.$/;kq|/^\<dir.split_name_2\>/;'q;"	kind:pred	file:
split_name_3	dir.m	/^:- pred dir.split_name_3(list(char)::in, string::out, string::out) is semidet.$/;kq|/^\<dir.split_name_3\>/;'q;"	kind:pred	file:
split_name_dotnet	dir.m	/^:- pred dir.split_name_dotnet(string::in, string::out, string::out)$/;kq|/^\<dir.split_name_dotnet\>/;'q;"	kind:pred	file:
split_upto	list.m	/^:- pred list.split_upto(int::in, list(T)::in, list(T)::out, list(T)::out)$/;kq|/^\<list.split_upto\>/;'q;"	kind:pred
sqrt	math.m	/^:- func math.sqrt(float) = float.$/;kq|/^\<math.sqrt\>/;'q;"	kind:func
squash	varset.m	/^:- pred varset.squash(varset(T)::in, list(var(T))::in,$/;kq|/^\<varset.squash\>/;'q;"	kind:pred
squeeze_equiv	robdd.m	/^:- func squeeze_equiv(equiv_vars(T), robdd(T)) = robdd(T).$/;kq|/^\<squeeze_equiv\>/;'q;"	kind:func
src	parsing_utils.m	/^    --->    src($/;kq|-;/\<src\>/;'q;"	kind:cons	file:
src	parsing_utils.m	/^:- type src$/;kq|-;/\<src\>/;'q;"	kind:type	file:
src_to_line_numbers	parsing_utils.m	/^:- func src_to_line_numbers(src) = line_numbers.$/;kq|/^\<src_to_line_numbers\>/;'q;"	kind:func
src_to_line_numbers_2	parsing_utils.m	/^:- pred src_to_line_numbers_2(string::in, int::in,$/;kq|/^\<src_to_line_numbers_2\>/;'q;"	kind:pred	file:
stack	stack.m	/^    --->    stack(list(T)).$/;kq|-;/\<stack\>/;'q;"	kind:cons	file:
stack	stack.m	/^:- type stack(T)$/;kq|-;/\<stack\>/;'q;"	kind:type	file:
stack.depth	stack.m	/^:- func stack.depth(stack(T)) = int.$/;kq|/^\<stack.depth\>/;'q;"	kind:func
stack.depth	stack.m	/^:- pred stack.depth(stack(T)::in, int::out) is det.$/;kq|/^\<stack.depth\>/;'q;"	kind:pred
stack.det_pop	stack.m	/^:- pred stack.det_pop(T::out, stack(T)::in, stack(T)::out) is det.$/;kq|/^\<stack.det_pop\>/;'q;"	kind:pred
stack.det_top	stack.m	/^:- func stack.det_top(stack(T)) = T.$/;kq|/^\<stack.det_top\>/;'q;"	kind:func
stack.det_top	stack.m	/^:- pred stack.det_top(stack(T)::in, T::out) is det.$/;kq|/^\<stack.det_top\>/;'q;"	kind:pred
stack.init	stack.m	/^:- func stack.init = stack(T).$/;kq|/^\<stack.init\>/;'q;"	kind:func
stack.init	stack.m	/^:- pred stack.init(stack(T)::out) is det.$/;kq|/^\<stack.init\>/;'q;"	kind:pred
stack.is_empty	stack.m	/^:- pred stack.is_empty(stack(T)::in) is semidet.$/;kq|/^\<stack.is_empty\>/;'q;"	kind:pred
stack.is_full	stack.m	/^:- pred stack.is_full(stack(T)::in) is semidet.$/;kq|/^\<stack.is_full\>/;'q;"	kind:pred
stack.pop	stack.m	/^:- pred stack.pop(T::out, stack(T)::in, stack(T)::out) is semidet.$/;kq|/^\<stack.pop\>/;'q;"	kind:pred
stack.push	stack.m	/^:- func stack.push(stack(T), T) = stack(T).$/;kq|/^\<stack.push\>/;'q;"	kind:func
stack.push	stack.m	/^:- pred stack.push(T::in, stack(T)::in, stack(T)::out) is det.$/;kq|/^\<stack.push\>/;'q;"	kind:pred
stack.push_list	stack.m	/^:- func stack.push_list(stack(T), list(T)) = stack(T).$/;kq|/^\<stack.push_list\>/;'q;"	kind:func
stack.push_list	stack.m	/^:- pred stack.push_list(list(T)::in, stack(T)::in, stack(T)::out) is det.$/;kq|/^\<stack.push_list\>/;'q;"	kind:pred
stack.top	stack.m	/^:- pred stack.top(stack(T)::in, T::out) is semidet.$/;kq|/^\<stack.top\>/;'q;"	kind:pred
stag_local	rtti_implementation.m	/^    ;       stag_local$/;kq|-;/\<stag_local\>/;'q;"	kind:cons	file:
stag_none	rtti_implementation.m	/^    --->    stag_none$/;kq|-;/\<stag_none\>/;'q;"	kind:cons	file:
stag_none_direct_arg	rtti_implementation.m	/^    ;       stag_none_direct_arg$/;kq|-;/\<stag_none_direct_arg\>/;'q;"	kind:cons	file:
stag_remote	rtti_implementation.m	/^    ;       stag_remote$/;kq|-;/\<stag_remote\>/;'q;"	kind:cons	file:
stag_variable	rtti_implementation.m	/^    ;       stag_variable.$/;kq|-;/\<stag_variable\>/;'q;"	kind:cons	file:
standard_time	time.m	/^    --->    standard_time   % no, DST is not in effect$/;kq|-;/\<standard_time\>/;'q;"	kind:cons
start_all_soln_neg_context	solutions.m	/^:- impure pred start_all_soln_neg_context is det.$/;kq|/^\<start_all_soln_neg_context\>/;'q;"	kind:pred	file:
start_global_server	erlang_builtin.m	/^:- pred start_global_server(io::di, io::uo) is det.$/;kq|/^\<start_global_server\>/;'q;"	kind:pred	file:
start_num_node_allocs	table_statistics.m	/^                start_num_node_allocs               :: int,$/;kq|-;/\<start_num_node_allocs\>/;'q;"	kind:fld
start_num_node_bytes	table_statistics.m	/^                start_num_node_bytes                :: int$/;kq|-;/\<start_num_node_bytes\>/;'q;"	kind:fld
start_quoted_name	lexer.m	/^:- pred start_quoted_name(io.input_stream::in, char::in, list(char)::in,$/;kq|/^\<start_quoted_name\>/;'q;"	kind:pred	file:
starts_with_digit	term_io.m	/^:- pred starts_with_digit(term(T)::in) is semidet.$/;kq|/^\<starts_with_digit\>/;'q;"	kind:pred	file:
state	parser.m	/^    --->    state($/;kq|-;/\<state\>/;'q;"	kind:cons	file:
state	parser.m	/^:- type state(Ops, T)   % <= op_table(Ops)$/;kq|-;/\<state\>/;'q;"	kind:type	file:
state	string.builder.m	/^    --->    state(list(string)).$/;kq|-;/\<state\>/;'q;"	kind:cons	file:
state	string.builder.m	/^:- type state$/;kq|-;/\<state\>/;'q;"	kind:type	file:
stats_at_last_call	table_statistics.m	/^                stats_at_last_call          :: table_stats$/;kq|-;/\<stats_at_last_call\>/;'q;"	kind:fld
std_util.compose	std_util.m	/^:- func compose(func(T2) = T3, func(T1) = T2, T1) = T3.$/;kq|/^\<compose\>/;'q;"	kind:func
std_util.converse	std_util.m	/^:- func converse(func(T1, T2) = T3, T2, T1) = T3.$/;kq|/^\<converse\>/;'q;"	kind:func
std_util.id	std_util.m	/^:- func id(T) = T.$/;kq|/^\<id\>/;'q;"	kind:func
std_util.isnt	std_util.m	/^:- pred isnt(pred(T)::in(pred(in) is semidet), T::in) is semidet.$/;kq|/^\<isnt\>/;'q;"	kind:pred
std_util.maybe_func	std_util.m	/^:- func maybe_func(func(T1) = T2, T1) = maybe(T2).$/;kq|/^\<maybe_func\>/;'q;"	kind:func
std_util.maybe_pred	std_util.m	/^:- pred maybe_pred(pred(T1, T2), T1, maybe(T2)).$/;kq|/^\<maybe_pred\>/;'q;"	kind:pred
std_util.negate	std_util.m	/^:- pred negate((pred)::in((pred) is semidet)) is semidet.$/;kq|/^\<negate\>/;'q;"	kind:pred
std_util.pow	std_util.m	/^:- func pow(func(T) = T, int, T) = T.$/;kq|/^\<pow\>/;'q;"	kind:func
stderr	io.m	/^    ;       stderr.$/;kq|-;/\<stderr\>/;'q;"	kind:cons
stderr_stream	io.m	/^:- func io.stderr_stream = io.output_stream.$/;kq|/^\<io.stderr_stream\>/;'q;"	kind:func
stderr_stream	io.m	/^:- pred io.stderr_stream(io.output_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stderr_stream\>/;'q;"	kind:pred
stderr_stream_2	io.m	/^:- func io.stderr_stream_2 = io.stream.$/;kq|/^\<io.stderr_stream_2\>/;'q;"	kind:func	file:
stderr_stream_2	io.m	/^:- pred io.stderr_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stderr_stream_2\>/;'q;"	kind:pred	file:
stdin	io.m	/^    ;       stdin$/;kq|-;/\<stdin\>/;'q;"	kind:cons
stdin_binary_stream	io.m	/^:- pred io.stdin_binary_stream(io.binary_input_stream::out,$/;kq|/^\<io.stdin_binary_stream\>/;'q;"	kind:pred
stdin_binary_stream_2	io.m	/^:- pred io.stdin_binary_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdin_binary_stream_2\>/;'q;"	kind:pred	file:
stdin_stream	io.m	/^:- func io.stdin_stream = io.input_stream.$/;kq|/^\<io.stdin_stream\>/;'q;"	kind:func
stdin_stream	io.m	/^:- pred io.stdin_stream(io.input_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdin_stream\>/;'q;"	kind:pred
stdin_stream_2	io.m	/^:- func io.stdin_stream_2 = io.stream.$/;kq|/^\<io.stdin_stream_2\>/;'q;"	kind:func	file:
stdin_stream_2	io.m	/^:- pred io.stdin_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdin_stream_2\>/;'q;"	kind:pred	file:
stdout	io.m	/^    ;       stdout$/;kq|-;/\<stdout\>/;'q;"	kind:cons
stdout_binary_stream	io.m	/^:- pred io.stdout_binary_stream(io.binary_output_stream::out,$/;kq|/^\<io.stdout_binary_stream\>/;'q;"	kind:pred
stdout_binary_stream_2	io.m	/^:- pred io.stdout_binary_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdout_binary_stream_2\>/;'q;"	kind:pred	file:
stdout_stream	io.m	/^:- func io.stdout_stream = io.output_stream.$/;kq|/^\<io.stdout_stream\>/;'q;"	kind:func
stdout_stream	io.m	/^:- pred io.stdout_stream(io.output_stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdout_stream\>/;'q;"	kind:pred
stdout_stream_2	io.m	/^:- func io.stdout_stream_2 = io.stream.$/;kq|/^\<io.stdout_stream_2\>/;'q;"	kind:func	file:
stdout_stream_2	io.m	/^:- pred io.stdout_stream_2(io.stream::out, io::di, io::uo) is det.$/;kq|/^\<io.stdout_stream_2\>/;'q;"	kind:pred	file:
step_statistics	table_statistics.m	/^                step_statistics             :: list(table_step_stats)$/;kq|-;/\<step_statistics\>/;'q;"	kind:fld
step_stats_du	table_statistics.m	/^    ;       step_stats_du($/;kq|-;/\<step_stats_du\>/;'q;"	kind:cons
step_stats_enum	table_statistics.m	/^    ;       step_stats_enum($/;kq|-;/\<step_stats_enum\>/;'q;"	kind:cons
step_stats_hash	table_statistics.m	/^    ;       step_stats_hash($/;kq|-;/\<step_stats_hash\>/;'q;"	kind:cons
step_stats_none	table_statistics.m	/^    --->    step_stats_none$/;kq|-;/\<step_stats_none\>/;'q;"	kind:cons
step_stats_poly	table_statistics.m	/^    ;       step_stats_poly($/;kq|-;/\<step_stats_poly\>/;'q;"	kind:cons
step_stats_start	table_statistics.m	/^    ;       step_stats_start($/;kq|-;/\<step_stats_start\>/;'q;"	kind:cons
stm	stm_builtin.m	/^    --->    stm(c_pointer).$/;kq|-;/\<stm\>/;'q;"	kind:cons	file:
stm	stm_builtin.m	/^:- type stm$/;kq|-;/\<stm\>/;'q;"	kind:type	file:
stm_block	stm_builtin.m	/^:- impure pred stm_block(stm::ui) is det.$/;kq|/^\<stm_block\>/;'q;"	kind:pred
stm_builtin.atomic_transaction	stm_builtin.m	/^:- pred atomic_transaction(pred(T, stm, stm)::in(pred(out, di, uo) is det),$/;kq|/^\<atomic_transaction\>/;'q;"	kind:pred
stm_builtin.call_atomic_goal	stm_builtin.m	/^:- pred call_atomic_goal(pred(T, stm, stm)::in(pred(out, di, uo) is det),$/;kq|/^\<call_atomic_goal\>/;'q;"	kind:pred	file:
stm_builtin.new_stm_var	stm_builtin.m	/^:- pred new_stm_var(T::in, stm_var(T)::out, io::di, io::uo) is det.$/;kq|/^\<new_stm_var\>/;'q;"	kind:pred
stm_builtin.new_stm_var_atomic	stm_builtin.m	/^:- pred new_stm_var_atomic(T::in, stm_var(T)::out, stm::di, stm::uo) is det.$/;kq|/^\<new_stm_var_atomic\>/;'q;"	kind:pred
stm_builtin.or_else	stm_builtin.m	/^:- pred or_else(pred(T, stm, stm)::in(pred(out, di, uo) is det),$/;kq|/^\<or_else\>/;'q;"	kind:pred
stm_builtin.read_stm_var	stm_builtin.m	/^:- pred read_stm_var(stm_var(T)::in, T::out, stm::di, stm::uo) is det.$/;kq|/^\<read_stm_var\>/;'q;"	kind:pred
stm_builtin.retry	stm_builtin.m	/^:- pred retry(stm::ui) is erroneous.$/;kq|/^\<retry\>/;'q;"	kind:pred
stm_builtin.rollback_exception	stm_builtin.m	/^:- type rollback_exception$/;kq|-;/\<stm_builtin.rollback_exception\>/;'q;"	kind:type
stm_builtin.rollback_retry	stm_builtin.m	/^    ;       rollback_retry.$/;kq|-;/\<stm_builtin.rollback_retry\>/;'q;"	kind:cons
stm_builtin.stm	stm_builtin.m	/^    --->    stm(c_pointer).$/;kq|-;/\<stm_builtin.stm\>/;'q;"	kind:cons	file:
stm_builtin.stm	stm_builtin.m	/^:- type stm$/;kq|-;/\<stm_builtin.stm\>/;'q;"	kind:type	file:
stm_builtin.stm_block	stm_builtin.m	/^:- impure pred stm_block(stm::ui) is det.$/;kq|/^\<stm_block\>/;'q;"	kind:pred
stm_builtin.stm_commit	stm_builtin.m	/^:- impure pred stm_commit(stm::ui) is det.$/;kq|/^\<stm_commit\>/;'q;"	kind:pred
stm_builtin.stm_dummy_output	stm_builtin.m	/^    --->    stm_dummy_output.$/;kq|-;/\<stm_builtin.stm_dummy_output\>/;'q;"	kind:cons
stm_builtin.stm_dummy_output	stm_builtin.m	/^:- type stm_dummy_output$/;kq|-;/\<stm_builtin.stm_dummy_output\>/;'q;"	kind:type
stm_builtin.stm_lock	stm_builtin.m	/^:- impure pred stm_lock is det.$/;kq|/^\<stm_lock\>/;'q;"	kind:pred
stm_builtin.stm_unlock	stm_builtin.m	/^:- impure pred stm_unlock is det.$/;kq|/^\<stm_unlock\>/;'q;"	kind:pred
stm_builtin.stm_validate	stm_builtin.m	/^:- impure pred stm_validate(stm::ui, stm_validation_result::out) is det.$/;kq|/^\<stm_validate\>/;'q;"	kind:pred
stm_builtin.stm_var	stm_builtin.m	/^:- type stm_var(T)$/;kq|-;/\<stm_builtin.stm_var\>/;'q;"	kind:type	file:
stm_builtin.tvar	stm_builtin.m	/^    --->    tvar(c_pointer).$/;kq|-;/\<stm_builtin.tvar\>/;'q;"	kind:cons	file:
stm_builtin.write_stm_var	stm_builtin.m	/^:- pred write_stm_var(stm_var(T)::in, T::in, stm::di, stm::uo) is det.$/;kq|/^\<write_stm_var\>/;'q;"	kind:pred
stm_commit	stm_builtin.m	/^:- impure pred stm_commit(stm::ui) is det.$/;kq|/^\<stm_commit\>/;'q;"	kind:pred
stm_create_nested_transaction_log	stm_builtin.m	/^:- impure pred stm_create_nested_transaction_log(stm::ui, stm::uo) is det.$/;kq|/^\<stm_create_nested_transaction_log\>/;'q;"	kind:pred
stm_create_transaction_log	stm_builtin.m	/^:- impure pred stm_create_transaction_log(stm::uo) is det.$/;kq|/^\<stm_create_transaction_log\>/;'q;"	kind:pred
stm_discard_transaction_log	stm_builtin.m	/^:- impure pred stm_discard_transaction_log(stm::di) is det.$/;kq|/^\<stm_discard_transaction_log\>/;'q;"	kind:pred
stm_dummy_output	stm_builtin.m	/^    --->    stm_dummy_output.$/;kq|-;/\<stm_dummy_output\>/;'q;"	kind:cons
stm_dummy_output	stm_builtin.m	/^:- type stm_dummy_output$/;kq|-;/\<stm_dummy_output\>/;'q;"	kind:type
stm_from_inner_to_outer	stm_builtin.m	/^:- pred stm_from_inner_to_outer(stm::di, T::uo) is det.$/;kq|/^\<stm_from_inner_to_outer\>/;'q;"	kind:pred
stm_from_outer_to_inner	stm_builtin.m	/^:- pred stm_from_outer_to_inner(T::di, stm::uo) is det.$/;kq|/^\<stm_from_outer_to_inner\>/;'q;"	kind:pred
stm_lock	stm_builtin.m	/^:- impure pred stm_lock is det.$/;kq|/^\<stm_lock\>/;'q;"	kind:pred
stm_merge_nested_logs	stm_builtin.m	/^:- impure pred stm_merge_nested_logs(stm::di, stm::di, stm::uo) is det.$/;kq|/^\<stm_merge_nested_logs\>/;'q;"	kind:pred
stm_transaction_invalid	stm_builtin.m	/^    ;       stm_transaction_invalid.$/;kq|-;/\<stm_transaction_invalid\>/;'q;"	kind:cons
stm_transaction_valid	stm_builtin.m	/^    --->    stm_transaction_valid$/;kq|-;/\<stm_transaction_valid\>/;'q;"	kind:cons
stm_unlock	stm_builtin.m	/^:- impure pred stm_unlock is det.$/;kq|/^\<stm_unlock\>/;'q;"	kind:pred
stm_validate	stm_builtin.m	/^:- impure pred stm_validate(stm::ui, stm_validation_result::out) is det.$/;kq|/^\<stm_validate\>/;'q;"	kind:pred
stm_validation_result	stm_builtin.m	/^:- type stm_validation_result$/;kq|-;/\<stm_validation_result\>/;'q;"	kind:type
stm_var	stm_builtin.m	/^:- type stm_var(T)$/;kq|-;/\<stm_var\>/;'q;"	kind:type	file:
stop_global_server	erlang_builtin.m	/^:- pred stop_global_server(io::di, io::uo) is det.$/;kq|/^\<stop_global_server\>/;'q;"	kind:pred	file:
store	store.m	/^:- typeclass store(T) where [].$/;kq|-;/\<store\>/;'q;"	kind:tc
store.arg_ref	store.m	/^:- pred store.arg_ref(generic_ref(T, S)::in, int::in,$/;kq|/^\<store.arg_ref\>/;'q;"	kind:pred
store.copy_mutvar	store.m	/^:- pred store.copy_mutvar(generic_mutvar(T, S)::in, generic_mutvar(T, S)::out,$/;kq|/^\<store.copy_mutvar\>/;'q;"	kind:pred
store.copy_ref_value	store.m	/^:- pred store.copy_ref_value(generic_ref(T, S)::in, T::uo,$/;kq|/^\<store.copy_ref_value\>/;'q;"	kind:pred
store.do_init	store.m	/^:- some [S] pred store.do_init(store(S)::uo) is det.$/;kq|/^\<store.do_init\>/;'q;"	kind:pred	file:
store.extract_ref_value	store.m	/^:- pred store.extract_ref_value(S::di, generic_ref(T, S)::in, T::out)$/;kq|/^\<store.extract_ref_value\>/;'q;"	kind:pred
store.generic_mutvar	store.m	/^:- type generic_mutvar(T, S) ---> mutvar(private_builtin.ref(T)).$/;kq|-;/\<store.generic_mutvar\>/;'q;"	kind:type	file:
store.generic_ref	store.m	/^:- type generic_ref(T, S) ---> ref(private_builtin.ref(T)).$/;kq|-;/\<store.generic_ref\>/;'q;"	kind:type	file:
store.get_mutvar	store.m	/^:- pred store.get_mutvar(generic_mutvar(T, S)::in, T::out,$/;kq|/^\<store.get_mutvar\>/;'q;"	kind:pred
store.init	store.m	/^:- some [S] pred store.init(store(S)::uo) is det.$/;kq|/^\<store.init\>/;'q;"	kind:pred
store.io_mutvar	store.m	/^:- type io_mutvar(T) == generic_mutvar(T, io.state).$/;kq|-;/\<store.io_mutvar\>/;'q;"	kind:type
store.io_ref	store.m	/^:- type io_ref(T, S) == generic_ref(T, io.state).$/;kq|-;/\<store.io_ref\>/;'q;"	kind:type
store.mutvar	store.m	/^:- type generic_mutvar(T, S) ---> mutvar(private_builtin.ref(T)).$/;kq|-;/\<store.mutvar\>/;'q;"	kind:cons	file:
store.new_arg_ref	store.m	/^:- pred store.new_arg_ref(T::di, int::in, generic_ref(ArgT, S)::out,$/;kq|/^\<store.new_arg_ref\>/;'q;"	kind:pred
store.new_cyclic_mutvar	store.m	/^:- pred store.new_cyclic_mutvar((func(generic_mutvar(T, S)) = T)::in,$/;kq|/^\<store.new_cyclic_mutvar\>/;'q;"	kind:pred
store.new_mutvar	store.m	/^:- pred store.new_mutvar(T::in, generic_mutvar(T, S)::out, S::di, S::uo)$/;kq|/^\<store.new_mutvar\>/;'q;"	kind:pred
store.new_ref	store.m	/^:- pred store.new_ref(T::di, generic_ref(T, S)::out,$/;kq|/^\<store.new_ref\>/;'q;"	kind:pred
store.ref	store.m	/^:- type generic_ref(T, S) ---> ref(private_builtin.ref(T)).$/;kq|-;/\<store.ref\>/;'q;"	kind:cons	file:
store.ref_functor	store.m	/^:- pred store.ref_functor(generic_ref(T, S)::in, string::out, int::out,$/;kq|/^\<store.ref_functor\>/;'q;"	kind:pred
store.set_mutvar	store.m	/^:- pred store.set_mutvar(generic_mutvar(T, S)::in, T::in,$/;kq|/^\<store.set_mutvar\>/;'q;"	kind:pred
store.set_ref	store.m	/^:- pred store.set_ref(generic_ref(T, S)::in, generic_ref(T, S)::in,$/;kq|/^\<store.set_ref\>/;'q;"	kind:pred
store.set_ref_value	store.m	/^:- pred store.set_ref_value(generic_ref(T, S)::in, T::di,$/;kq|/^\<store.set_ref_value\>/;'q;"	kind:pred
store.unsafe_arg_ref	store.m	/^:- pred store.unsafe_arg_ref(generic_ref(T, S)::in, int::in,$/;kq|/^\<store.unsafe_arg_ref\>/;'q;"	kind:pred
store.unsafe_new_arg_ref	store.m	/^:- pred store.unsafe_new_arg_ref(T::di, int::in, generic_ref(ArgT, S)::out,$/;kq|/^\<store.unsafe_new_arg_ref\>/;'q;"	kind:pred
store.unsafe_ref_value	store.m	/^:- pred store.unsafe_ref_value(generic_ref(T, S)::in, T::uo,$/;kq|/^\<store.unsafe_ref_value\>/;'q;"	kind:pred	file:
store_at_ref	private_builtin.m	/^:- pred store_at_ref(store_at_ref_type(T)::in, T::in) is det.$/;kq|/^\<store_at_ref\>/;'q;"	kind:pred
store_at_ref_impure	private_builtin.m	/^:- impure pred store_at_ref_impure(store_at_ref_type(T)::in, T::in) is det.$/;kq|/^\<store_at_ref_impure\>/;'q;"	kind:pred
store_at_ref_type	private_builtin.m	/^    --->    store_at_ref_type(int).$/;kq|-;/\<store_at_ref_type\>/;'q;"	kind:cons
store_at_ref_type	private_builtin.m	/^:- type store_at_ref_type(T)$/;kq|-;/\<store_at_ref_type\>/;'q;"	kind:type
store_compare	store.m	/^:- pred store_compare(comparison_result::uo, store(S)::in, store(S)::in)$/;kq|/^\<store_compare\>/;'q;"	kind:pred	file:
store_equal	store.m	/^:- pred store_equal(store(S)::in, store(S)::in) is semidet.$/;kq|/^\<store_equal\>/;'q;"	kind:pred	file:
store_full_buffer	bit_buffer.write.m	/^:- pred store_full_buffer(bit_buffer(Stream, State)::in,$/;kq|/^\<store_full_buffer\>/;'q;"	kind:pred
store_mutvar	store.m	/^:- type store_mutvar(T, S) == generic_mutvar(T, store(S)).$/;kq|-;/\<store_mutvar\>/;'q;"	kind:type
store_ref	store.m	/^:- type store_ref(T, S) == generic_ref(T, store(S)).$/;kq|-;/\<store_ref\>/;'q;"	kind:type
store_ticket	private_builtin.m	/^:- impure pred store_ticket(ticket::out) is det.$/;kq|/^\<store_ticket\>/;'q;"	kind:pred
str	pretty_printer.m	/^    --->    str(string)$/;kq|-;/\<str\>/;'q;"	kind:cons
strchars	string.m	/^:- func strchars(int, int, string) = list(char).$/;kq|/^\<strchars\>/;'q;"	kind:func	file:
stream	bit_buffer.m	/^:- instance stream.stream(error_stream, error_state) where$/;kq|-;/\<stream\>/;'q;"	kind:tci	file:
stream	bit_buffer.read.m	/^:- instance stream.stream(read_stream(Stream, Error),$/;kq|-;/\<stream\>/;'q;"	kind:tci
stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<stream\>/;'q;"	kind:tci
stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<stream\>/;'q;"	kind:tci
stream	dir.m	/^:- type dir.stream ---> dir.stream.$/;kq|-;/\<stream\>/;'q;"	kind:type	file:
stream	io.m	/^    --->    stream($/;kq|-;/\<stream\>/;'q;"	kind:cons
stream	io.m	/^    --->    stream($/;kq|-;/\<stream\>/;'q;"	kind:cons
stream	io.m	/^    --->    stream(c_pointer).$/;kq|-;/\<stream\>/;'q;"	kind:cons	file:
stream	io.m	/^:- instance stream.stream(io.binary_input_stream, io)$/;kq|-;/\<stream\>/;'q;"	kind:tci	file:
stream	io.m	/^:- instance stream.stream(io.binary_output_stream, io)$/;kq|-;/\<stream\>/;'q;"	kind:tci	file:
stream	io.m	/^:- instance stream.stream(io.input_stream, io) where [$/;kq|-;/\<stream\>/;'q;"	kind:tci	file:
stream	io.m	/^:- instance stream.stream(io.output_stream, io) where [$/;kq|-;/\<stream\>/;'q;"	kind:tci	file:
stream	io.m	/^:- type io.stream$/;kq|-;/\<stream\>/;'q;"	kind:type	file:
stream	stream.m	/^:- typeclass stream.stream(Stream, State) <= (Stream -> State) where$/;kq|-;/\<stream\>/;'q;"	kind:tc
stream	string.builder.m	/^:- instance stream.stream(string.builder.handle, string.builder.state)$/;kq|-;/\<stream\>/;'q;"	kind:tci	file:
stream	thread.channel.m	/^:- type stream(T) == mvar(item(T)).$/;kq|-;/\<stream\>/;'q;"	kind:type	file:
stream.bulk_get	stream.m	/^    pred bulk_get(Stream::in, Index::in, int::in,$/;kq|-;/\<stream.bulk_get\>/;'q;"	kind:tcm
stream.bulk_get_di	stream.m	/^:- mode bulk_get_di == in.$/;kq|-;/\<stream.bulk_get_di\>/;'q;"	kind:mode
stream.bulk_get_uo	stream.m	/^:- mode bulk_get_uo == out.$/;kq|-;/\<stream.bulk_get_uo\>/;'q;"	kind:mode
stream.bulk_reader	bit_buffer.m	/^:- instance stream.bulk_reader(error_stream, byte_index, bitmap,$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tci
stream.bulk_reader	bit_buffer.m	/^:- instance stream.bulk_reader(error_stream, byte_index, bitmap,$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tci	file:
stream.bulk_reader	bit_buffer.read.m	/^:- instance stream.bulk_reader(read_stream(Stream, Error),$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tci
stream.bulk_reader	bit_buffer.read.m	/^:- instance stream.bulk_reader(read_stream(Stream, Error),$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tci
stream.bulk_reader	io.m	/^:- instance stream.bulk_reader(io.binary_input_stream, int,$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tci
stream.bulk_reader	io.m	/^:- instance stream.bulk_reader(io.binary_input_stream, int,$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tci	file:
stream.bulk_reader	stream.m	/^:- typeclass stream.bulk_reader(Stream, Index, Store, State, Error)$/;kq|-;/\<stream.bulk_reader\>/;'q;"	kind:tc
stream.cur	stream.m	/^    ;       cur$/;kq|-;/\<stream.cur\>/;'q;"	kind:cons
stream.duplex	stream.m	/^:- typeclass stream.duplex(Stream, State)$/;kq|-;/\<stream.duplex\>/;'q;"	kind:tc
stream.end	stream.m	/^    ;       end.$/;kq|-;/\<stream.end\>/;'q;"	kind:cons
stream.eof	stream.m	/^    ;       eof$/;kq|-;/\<stream.eof\>/;'q;"	kind:cons
stream.eof	stream.m	/^    ;       eof$/;kq|-;/\<stream.eof\>/;'q;"	kind:cons
stream.error	bit_buffer.m	/^:- instance stream.error(error_stream_error) where$/;kq|-;/\<stream.error\>/;'q;"	kind:tci	file:
stream.error	io.m	/^:- instance stream.error(io.error) where [$/;kq|-;/\<stream.error\>/;'q;"	kind:tci	file:
stream.error	stream.m	/^    ;       error(Error).$/;kq|-;/\<stream.error\>/;'q;"	kind:cons
stream.error	stream.m	/^    ;       error(Error).$/;kq|-;/\<stream.error\>/;'q;"	kind:cons
stream.error	stream.m	/^    ;       error(Error).$/;kq|-;/\<stream.error\>/;'q;"	kind:cons
stream.error	stream.m	/^    ;       error(Error).$/;kq|-;/\<stream.error\>/;'q;"	kind:cons
stream.error	stream.m	/^    ;       error(T, Error).$/;kq|-;/\<stream.error\>/;'q;"	kind:cons
stream.error	stream.m	/^:- typeclass stream.error(Error) where$/;kq|-;/\<stream.error\>/;'q;"	kind:tc
stream.error_message	io.m	/^    func(stream.error_message\/1) is io.error_message$/;kq|-;/\<stream.error_message\>/;'q;"	kind:tcim	file:
stream.error_message	stream.m	/^    func error_message(Error) = string$/;kq|-;/\<stream.error_message\>/;'q;"	kind:tcm
stream.flush	stream.m	/^    pred flush(Stream::in, State::di, State::uo) is det$/;kq|-;/\<stream.flush\>/;'q;"	kind:tcm
stream.get	stream.m	/^    pred get(Stream::in, stream.result(Unit, Error)::out,$/;kq|-;/\<stream.get\>/;'q;"	kind:tcm
stream.get_line	stream.m	/^    pred get_line(Stream::in, int::out, State::di, State::uo) is det,$/;kq|-;/\<stream.get_line\>/;'q;"	kind:tcm
stream.ignore_whitespace	stream.m	/^:- pred stream.ignore_whitespace(Stream::in, stream.result(Error)::out,$/;kq|/^\<stream.ignore_whitespace\>/;'q;"	kind:pred
stream.input	bit_buffer.m	/^:- instance stream.input(error_stream, error_state) where$/;kq|-;/\<stream.input\>/;'q;"	kind:tci	file:
stream.input	bit_buffer.read.m	/^:- instance stream.input(read_stream(Stream, Error),$/;kq|-;/\<stream.input\>/;'q;"	kind:tci
stream.input	io.m	/^:- instance stream.input(io.binary_input_stream, io)$/;kq|-;/\<stream.input\>/;'q;"	kind:tci	file:
stream.input	stream.m	/^:- typeclass stream.input(Stream, State) <= stream(Stream, State) where [].$/;kq|-;/\<stream.input\>/;'q;"	kind:tc
stream.input_stream_fold	stream.m	/^:- pred stream.input_stream_fold(Stream, pred(Unit, T, T), T,$/;kq|/^\<stream.input_stream_fold\>/;'q;"	kind:pred
stream.input_stream_fold_state	stream.m	/^:- pred stream.input_stream_fold_state(Stream, pred(Unit, State, State),$/;kq|/^\<stream.input_stream_fold_state\>/;'q;"	kind:pred
stream.line_oriented	io.m	/^:- instance stream.line_oriented(io.input_stream, io) where$/;kq|-;/\<stream.line_oriented\>/;'q;"	kind:tci	file:
stream.line_oriented	io.m	/^:- instance stream.line_oriented(io.output_stream, io) where$/;kq|-;/\<stream.line_oriented\>/;'q;"	kind:tci	file:
stream.line_oriented	stream.m	/^:- typeclass stream.line_oriented(Stream, State) <= stream(Stream, State)$/;kq|-;/\<stream.line_oriented\>/;'q;"	kind:tc
stream.maybe_partial_res	stream.m	/^:- type stream.maybe_partial_res(T, Error)$/;kq|-;/\<stream.maybe_partial_res\>/;'q;"	kind:type
stream.name	stream.m	/^        pred name(Stream::in, stream.name::out, State::di, State::uo) is det$/;kq|-;/\<stream.name\>/;'q;"	kind:tcm
stream.name	stream.m	/^:- type stream.name == string.$/;kq|-;/\<stream.name\>/;'q;"	kind:type
stream.ok	stream.m	/^    --->    ok$/;kq|-;/\<stream.ok\>/;'q;"	kind:cons
stream.ok	stream.m	/^    --->    ok$/;kq|-;/\<stream.ok\>/;'q;"	kind:cons
stream.ok	stream.m	/^    --->    ok(T)$/;kq|-;/\<stream.ok\>/;'q;"	kind:cons
stream.ok	stream.m	/^    --->    ok(T)$/;kq|-;/\<stream.ok\>/;'q;"	kind:cons
stream.ok	stream.m	/^    --->    ok(T)$/;kq|-;/\<stream.ok\>/;'q;"	kind:cons
stream.output	bit_buffer.m	/^:- instance stream.output(error_stream, error_state) where$/;kq|-;/\<stream.output\>/;'q;"	kind:tci	file:
stream.output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<stream.output\>/;'q;"	kind:tci
stream.output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<stream.output\>/;'q;"	kind:tci
stream.output	io.m	/^:- instance stream.output(io.binary_output_stream, io)$/;kq|-;/\<stream.output\>/;'q;"	kind:tci	file:
stream.output	io.m	/^:- instance stream.output(io.output_stream, io) where [$/;kq|-;/\<stream.output\>/;'q;"	kind:tci	file:
stream.output	stream.m	/^:- typeclass stream.output(Stream, State)$/;kq|-;/\<stream.output\>/;'q;"	kind:tc
stream.output	string.builder.m	/^:- instance stream.output(string.builder.handle, string.builder.state)$/;kq|-;/\<stream.output\>/;'q;"	kind:tci	file:
stream.put	stream.m	/^    pred put(Stream::in, Unit::in, State::di, State::uo) is det$/;kq|-;/\<stream.put\>/;'q;"	kind:tcm
stream.put_list	stream.m	/^:- pred put_list(Stream, pred(Stream, T, State, State),$/;kq|/^\<put_list\>/;'q;"	kind:pred
stream.putback	io.m	/^:- instance stream.putback(io.binary_input_stream, int, io, io.error)$/;kq|-;/\<stream.putback\>/;'q;"	kind:tci	file:
stream.putback	io.m	/^:- instance stream.putback(io.input_stream, char, io, io.error) where$/;kq|-;/\<stream.putback\>/;'q;"	kind:tci	file:
stream.putback	stream.m	/^:- typeclass stream.putback(Stream, Unit, State, Error)$/;kq|-;/\<stream.putback\>/;'q;"	kind:tc
stream.reader	bit_buffer.read.m	/^:- instance stream.reader(read_stream(Stream, Error), bool,$/;kq|-;/\<stream.reader\>/;'q;"	kind:tci
stream.reader	io.m	/^:- instance stream.reader(io.binary_input_stream, int, io, io.error)$/;kq|-;/\<stream.reader\>/;'q;"	kind:tci	file:
stream.reader	io.m	/^:- instance stream.reader(io.input_stream, char, io, io.error)$/;kq|-;/\<stream.reader\>/;'q;"	kind:tci	file:
stream.reader	io.m	/^:- instance stream.reader(io.input_stream, line, io, io.error)$/;kq|-;/\<stream.reader\>/;'q;"	kind:tci	file:
stream.reader	io.m	/^:- instance stream.reader(io.input_stream, text_file, io, io.error)$/;kq|-;/\<stream.reader\>/;'q;"	kind:tci	file:
stream.reader	stream.m	/^:- typeclass stream.reader(Stream, Unit, State, Error)$/;kq|-;/\<stream.reader\>/;'q;"	kind:tc
stream.res	stream.m	/^:- type stream.res(Error)$/;kq|-;/\<stream.res\>/;'q;"	kind:type
stream.res	stream.m	/^:- type stream.res(T, Error)$/;kq|-;/\<stream.res\>/;'q;"	kind:type
stream.result	stream.m	/^:- type stream.result(Error)$/;kq|-;/\<stream.result\>/;'q;"	kind:type
stream.result	stream.m	/^:- type stream.result(T, Error)$/;kq|-;/\<stream.result\>/;'q;"	kind:type
stream.seek	stream.m	/^    pred seek(Stream::in, stream.whence::in, int::in, State::di, State::uo)$/;kq|-;/\<stream.seek\>/;'q;"	kind:tcm
stream.seekable	io.m	/^:- instance stream.seekable(io.binary_input_stream, io)$/;kq|-;/\<stream.seekable\>/;'q;"	kind:tci	file:
stream.seekable	io.m	/^:- instance stream.seekable(io.binary_output_stream, io)$/;kq|-;/\<stream.seekable\>/;'q;"	kind:tci	file:
stream.seekable	stream.m	/^:- typeclass stream.seekable(Stream, State) <= stream(Stream, State)$/;kq|-;/\<stream.seekable\>/;'q;"	kind:tc
stream.set	stream.m	/^    --->    set$/;kq|-;/\<stream.set\>/;'q;"	kind:cons
stream.set_line	stream.m	/^    pred set_line(Stream::in, int::in,  State::di, State::uo) is det$/;kq|-;/\<stream.set_line\>/;'q;"	kind:tcm
stream.stream	bit_buffer.m	/^:- instance stream.stream(error_stream, error_state) where$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci	file:
stream.stream	bit_buffer.read.m	/^:- instance stream.stream(read_stream(Stream, Error),$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci
stream.stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci
stream.stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci
stream.stream	io.m	/^:- instance stream.stream(io.binary_input_stream, io)$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci	file:
stream.stream	io.m	/^:- instance stream.stream(io.binary_output_stream, io)$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci	file:
stream.stream	io.m	/^:- instance stream.stream(io.input_stream, io) where [$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci	file:
stream.stream	io.m	/^:- instance stream.stream(io.output_stream, io) where [$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci	file:
stream.stream	stream.m	/^:- typeclass stream.stream(Stream, State) <= (Stream -> State) where$/;kq|-;/\<stream.stream\>/;'q;"	kind:tc
stream.stream	string.builder.m	/^:- instance stream.stream(string.builder.handle, string.builder.state)$/;kq|-;/\<stream.stream\>/;'q;"	kind:tci	file:
stream.string_writer.format	stream.string_writer.m	/^:- pred format(Stream::in, string::in, list(string.poly_type)::in,$/;kq|/^\<format\>/;'q;"	kind:pred
stream.string_writer.nl	stream.string_writer.m	/^:- pred nl(Stream::in, State::di, State::uo) is det$/;kq|/^\<nl\>/;'q;"	kind:pred
stream.string_writer.print	stream.string_writer.m	/^:- pred print(Stream, deconstruct.noncanon_handling, T, State, State)$/;kq|/^\<print\>/;'q;"	kind:pred
stream.string_writer.print	stream.string_writer.m	/^:- pred print(Stream::in, T::in, State::di, State::uo) is det$/;kq|/^\<print\>/;'q;"	kind:pred
stream.string_writer.print_cc	stream.string_writer.m	/^:- pred print_cc(Stream::in, T::in, State::di, State::uo) is cc_multi$/;kq|/^\<print_cc\>/;'q;"	kind:pred
stream.string_writer.put_char	stream.string_writer.m	/^:- pred put_char(Stream::in, char::in, State::di, State::uo) is det$/;kq|/^\<put_char\>/;'q;"	kind:pred
stream.string_writer.put_float	stream.string_writer.m	/^:- pred put_float(Stream::in, float::in, State::di, State::uo) is det$/;kq|/^\<put_float\>/;'q;"	kind:pred
stream.string_writer.put_int	stream.string_writer.m	/^:- pred put_int(Stream::in, int::in, State::di, State::uo) is det$/;kq|/^\<put_int\>/;'q;"	kind:pred
stream.string_writer.write	stream.string_writer.m	/^:- pred write(Stream, deconstruct.noncanon_handling, T, State, State) is det$/;kq|/^\<write\>/;'q;"	kind:pred
stream.string_writer.write	stream.string_writer.m	/^:- pred write(Stream::in, T::in, State::di, State::uo) is det$/;kq|/^\<write\>/;'q;"	kind:pred
stream.string_writer.write_arg	stream.string_writer.m	/^:- pred write_arg(Stream, deconstruct.noncanon_handling, univ, State, State)$/;kq|/^\<write_arg\>/;'q;"	kind:pred	file:
stream.string_writer.write_cc	stream.string_writer.m	/^:- pred write_cc(Stream::in, T::in, State::di, State::uo) is cc_multi$/;kq|/^\<write_cc\>/;'q;"	kind:pred
stream.unbounded_putback	stream.m	/^:- typeclass stream.unbounded_putback(Stream, Unit, State, Error)$/;kq|-;/\<stream.unbounded_putback\>/;'q;"	kind:tc
stream.unget	stream.m	/^    pred unget(Stream::in, Unit::in, State::di, State::uo) is det$/;kq|-;/\<stream.unget\>/;'q;"	kind:tcm
stream.whence	stream.m	/^:- type stream.whence$/;kq|-;/\<stream.whence\>/;'q;"	kind:type
stream.writer	bit_buffer.m	/^:- instance stream.writer(error_stream, bitmap.slice, error_state)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci
stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci
stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci
stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci
stream.writer	io.m	/^:- instance stream.writer(io.binary_output_stream, bitmap, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.binary_output_stream, bitmap.slice, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.binary_output_stream, byte, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.output_stream, char, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.output_stream, float, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.output_stream, int, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.output_stream, string, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	io.m	/^:- instance stream.writer(io.output_stream, univ, io)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	stream.m	/^:- typeclass stream.writer(Stream, Unit, State)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tc
stream.writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, char, string.builder.state)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream.writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, string, string.builder.state)$/;kq|-;/\<stream.writer\>/;'q;"	kind:tci	file:
stream_content	io.m	/^                stream_content          :: stream_content,$/;kq|-;/\<stream_content\>/;'q;"	kind:fld
stream_content	io.m	/^:- type stream_content$/;kq|-;/\<stream_content\>/;'q;"	kind:type
stream_db	io.m	/^:- type io.stream_db ==    map(io.stream_id, stream_info).$/;kq|-;/\<stream_db\>/;'q;"	kind:type
stream_file_size	io.m	/^:- pred io.stream_file_size(stream::in, int::out, io::di, io::uo) is det.$/;kq|/^\<io.stream_file_size\>/;'q;"	kind:pred	file:
stream_id	io.m	/^                stream_id               :: int,$/;kq|-;/\<stream_id\>/;'q;"	kind:fld
stream_id	io.m	/^:- type io.stream_id == int.$/;kq|-;/\<stream_id\>/;'q;"	kind:type	file:
stream_info	io.m	/^:- pred io.stream_info(io.stream::in, maybe(stream_info)::out,$/;kq|/^\<io.stream_info\>/;'q;"	kind:pred	file:
stream_info	io.m	/^:- type stream_info$/;kq|-;/\<stream_info\>/;'q;"	kind:type
stream_mode	io.m	/^                stream_mode             :: stream_mode,$/;kq|-;/\<stream_mode\>/;'q;"	kind:fld
stream_mode	io.m	/^:- type stream_mode$/;kq|-;/\<stream_mode\>/;'q;"	kind:type
stream_name	io.m	/^:- pred io.stream_name(io.stream::in, string::out, io::di, io::uo) is det.$/;kq|/^\<io.stream_name\>/;'q;"	kind:pred	file:
stream_name	parser.m	/^                stream_name :: string,$/;kq|-;/\<stream_name\>/;'q;"	kind:fld	file:
stream_putback	io.m	/^:- type io.stream_putback ==  map(io.stream_id, list(char)).$/;kq|-;/\<stream_putback\>/;'q;"	kind:type	file:
stream_source	io.m	/^                stream_source           :: stream_source$/;kq|-;/\<stream_source\>/;'q;"	kind:fld
stream_source	io.m	/^:- type stream_source$/;kq|-;/\<stream_source\>/;'q;"	kind:type
stream_whence_to_io_whence	io.m	/^:- func stream_whence_to_io_whence(stream.whence) = io.whence.$/;kq|/^\<stream_whence_to_io_whence\>/;'q;"	kind:func	file:
string	dir.m	/^:- func string \/ string = string.$/;kq|/^\<string\>/;'q;"	kind:func
string	getopt.m	/^    ;       string(string)$/;kq|-;/\<string\>/;'q;"	kind:cons
string	getopt.m	/^    ;       string(string)$/;kq|-;/\<string\>/;'q;"	kind:cons
string	getopt_io.m	/^    ;       string(string)$/;kq|-;/\<string\>/;'q;"	kind:cons
string	getopt_io.m	/^    ;       string(string)$/;kq|-;/\<string\>/;'q;"	kind:cons
string	lexer.m	/^    ;       string(string)      % "...."$/;kq|-;/\<string\>/;'q;"	kind:cons
string	string.m	/^:- func string ++ string = string.$/;kq|/^\<string\>/;'q;"	kind:func
string	string.m	/^:- func string ^ elem(int) = char.$/;kq|/^\<string\>/;'q;"	kind:func
string	string.m	/^:- func string ^ unsafe_elem(int) = char.$/;kq|/^\<string\>/;'q;"	kind:func
string	string.m	/^:- func string.string(T) = string.$/;kq|/^\<string.string\>/;'q;"	kind:func
string	term.m	/^    ;       string(string)$/;kq|-;/\<string\>/;'q;"	kind:cons
string.accumulate_int	string.m	/^:- pred accumulate_int(int::in, char::in, int::in, int::out) is semidet.$/;kq|/^\<accumulate_int\>/;'q;"	kind:pred	file:
string.accumulate_negative_int	string.m	/^:- pred accumulate_negative_int(int::in, char::in,$/;kq|/^\<accumulate_negative_int\>/;'q;"	kind:pred	file:
string.add_revstring	string.m	/^:- pred add_revstring(string::in, revstrings::in, revstrings::out) is det.$/;kq|/^\<add_revstring\>/;'q;"	kind:pred	file:
string.adjust_priority	string.m	/^:- pred adjust_priority(ops.priority::in, ops.assoc::in, ops.priority::out)$/;kq|/^\<adjust_priority\>/;'q;"	kind:pred	file:
string.all_empty	string.m	/^:- pred all_empty(list(list(string))::in) is semidet.$/;kq|/^\<all_empty\>/;'q;"	kind:pred	file:
string.all_match	string.m	/^:- pred string.all_match(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.all_match\>/;'q;"	kind:pred
string.all_match_2	string.m	/^:- pred all_match_2(pred(char)::in(pred(in) is semidet), string::in, int::in)$/;kq|/^\<all_match_2\>/;'q;"	kind:pred	file:
string.append	string.m	/^:- func string.append(string::in, string::in) = (string::uo) is det.$/;kq|/^\<string.append\>/;'q;"	kind:func
string.append	string.m	/^:- pred string.append(string, string, string).$/;kq|/^\<string.append\>/;'q;"	kind:pred
string.append_iii	string.m	/^:- pred string.append_iii(string::in, string::in, string::in) is semidet.$/;kq|/^\<string.append_iii\>/;'q;"	kind:pred	file:
string.append_iio	string.m	/^:- pred string.append_iio(string::in, string::in, string::uo) is det.$/;kq|/^\<string.append_iio\>/;'q;"	kind:pred	file:
string.append_ioi	string.m	/^:- pred string.append_ioi(string::in, string::uo, string::in) is semidet.$/;kq|/^\<string.append_ioi\>/;'q;"	kind:pred	file:
string.append_list	string.m	/^:- func string.append_list(list(string)::in) = (string::uo) is det.$/;kq|/^\<string.append_list\>/;'q;"	kind:func
string.append_list	string.m	/^:- pred string.append_list(list(string)::in, string::uo) is det.$/;kq|/^\<string.append_list\>/;'q;"	kind:pred
string.append_ooi	string.m	/^:- pred string.append_ooi(string::out, string::out, string::in) is multi.$/;kq|/^\<string.append_ooi\>/;'q;"	kind:pred	file:
string.append_ooi_2	string.m	/^:- pred string.append_ooi_2(int::in, int::in, string::out, string::out,$/;kq|/^\<string.append_ooi_2\>/;'q;"	kind:pred	file:
string.append_ooi_3	string.m	/^:- pred string.append_ooi_3(int::in, int::in, string::out,$/;kq|/^\<string.append_ooi_3\>/;'q;"	kind:pred	file:
string.arg_to_revstrings	string.m	/^:- pred arg_to_revstrings(noncanon_handling,$/;kq|/^\<arg_to_revstrings\>/;'q;"	kind:pred	file:
string.array_to_revstrings	string.m	/^:- pred array_to_revstrings(noncanon_handling, ops.table, array(T),$/;kq|/^\<array_to_revstrings\>/;'q;"	kind:pred	file:
string.base_string_to_int	string.m	/^:- pred string.base_string_to_int(int::in, string::in, int::out) is semidet.$/;kq|/^\<string.base_string_to_int\>/;'q;"	kind:pred
string.between	string.m	/^:- func string.between(string::in, int::in, int::in) = (string::uo) is det.$/;kq|/^\<string.between\>/;'q;"	kind:func
string.between	string.m	/^:- pred string.between(string::in, int::in, int::in, string::uo) is det.$/;kq|/^\<string.between\>/;'q;"	kind:pred
string.between_codepoints	string.m	/^:- func string.between_codepoints(string::in, int::in, int::in)$/;kq|/^\<string.between_codepoints\>/;'q;"	kind:func
string.between_codepoints	string.m	/^:- pred string.between_codepoints(string::in, int::in, int::in, string::uo)$/;kq|/^\<string.between_codepoints\>/;'q;"	kind:pred
string.break_up_string_reverse	string.m	/^:- func break_up_string_reverse(string, int, list(string)) = list(string).$/;kq|/^\<break_up_string_reverse\>/;'q;"	kind:func	file:
string.builder.handle	string.builder.m	/^    --->    handle.$/;kq|-;/\<string.builder.handle\>/;'q;"	kind:cons
string.builder.handle	string.builder.m	/^:- type handle$/;kq|-;/\<string.builder.handle\>/;'q;"	kind:type
string.builder.init	string.builder.m	/^:- func init = (string.builder.state::uo) is det.$/;kq|/^\<init\>/;'q;"	kind:func
string.builder.state	string.builder.m	/^    --->    state(list(string)).$/;kq|-;/\<string.builder.state\>/;'q;"	kind:cons	file:
string.builder.state	string.builder.m	/^:- type state$/;kq|-;/\<string.builder.state\>/;'q;"	kind:type	file:
string.builder.stream.output	string.builder.m	/^:- instance stream.output(string.builder.handle, string.builder.state)$/;kq|-;/\<string.builder.stream.output\>/;'q;"	kind:tci	file:
string.builder.stream.stream	string.builder.m	/^:- instance stream.stream(string.builder.handle, string.builder.state)$/;kq|-;/\<string.builder.stream.stream\>/;'q;"	kind:tci	file:
string.builder.stream.writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, char, string.builder.state)$/;kq|-;/\<string.builder.stream.writer\>/;'q;"	kind:tci	file:
string.builder.stream.writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, string, string.builder.state)$/;kq|-;/\<string.builder.stream.writer\>/;'q;"	kind:tci	file:
string.builder.to_string	string.builder.m	/^:- func to_string(string.builder.state::di) = (string::uo) is det.$/;kq|/^\<to_string\>/;'q;"	kind:func
string.c	string.m	/^    ;       c(char)$/;kq|-;/\<string.c\>/;'q;"	kind:cons	file:
string.c	string.m	/^    ;       c(char).$/;kq|-;/\<string.c\>/;'q;"	kind:cons
string.cE	string.m	/^    ;       cE(float)$/;kq|-;/\<string.cE\>/;'q;"	kind:cons	file:
string.cF	string.m	/^    ;       cF(float)$/;kq|-;/\<string.cF\>/;'q;"	kind:cons	file:
string.cG	string.m	/^    ;       cG(float)$/;kq|-;/\<string.cG\>/;'q;"	kind:cons	file:
string.cX	string.m	/^    ;       cX(int)$/;kq|-;/\<string.cX\>/;'q;"	kind:cons	file:
string.c_pointer_to_string	string.m	/^:- func string.c_pointer_to_string(c_pointer::in) = (string::uo) is det.$/;kq|/^\<string.c_pointer_to_string\>/;'q;"	kind:func
string.c_pointer_to_string	string.m	/^:- pred string.c_pointer_to_string(c_pointer::in, string::uo) is det.$/;kq|/^\<string.c_pointer_to_string\>/;'q;"	kind:pred
string.calculate_base_unsafe	string.m	/^:- func calculate_base_unsafe(string, int) = string.$/;kq|/^\<calculate_base_unsafe\>/;'q;"	kind:func	file:
string.capitalize_first	string.m	/^:- func string.capitalize_first(string) = string.$/;kq|/^\<string.capitalize_first\>/;'q;"	kind:func
string.capitalize_first	string.m	/^:- pred string.capitalize_first(string::in, string::out) is det.$/;kq|/^\<string.capitalize_first\>/;'q;"	kind:pred
string.change_precision	string.m	/^:- func change_precision(int, string) = string.$/;kq|/^\<change_precision\>/;'q;"	kind:func	file:
string.change_to_e_notation	string.m	/^:- func change_to_e_notation(string, int, string) = string.$/;kq|/^\<change_to_e_notation\>/;'q;"	kind:func	file:
string.change_to_g_notation	string.m	/^:- func change_to_g_notation(string, int, string, flags) = string.$/;kq|/^\<change_to_g_notation\>/;'q;"	kind:func	file:
string.char_list_to_lower	string.m	/^:- pred string.char_list_to_lower(list(char)::in, list(char)::out) is det.$/;kq|/^\<string.char_list_to_lower\>/;'q;"	kind:pred	file:
string.char_list_to_upper	string.m	/^:- pred string.char_list_to_upper(list(char)::in, list(char)::out) is det.$/;kq|/^\<string.char_list_to_upper\>/;'q;"	kind:pred	file:
string.char_to_string	string.m	/^:- func string.char_to_string(char::in) = (string::uo) is det.$/;kq|/^\<string.char_to_string\>/;'q;"	kind:func
string.char_to_string	string.m	/^:- pred string.char_to_string(char, string).$/;kq|/^\<string.char_to_string\>/;'q;"	kind:pred
string.chomp	string.m	/^:- func string.chomp(string) = string.$/;kq|/^\<string.chomp\>/;'q;"	kind:func
string.codepoint_offset	string.m	/^:- pred string.codepoint_offset(string::in, int::in, int::in, int::out)$/;kq|/^\<string.codepoint_offset\>/;'q;"	kind:pred
string.codepoint_offset	string.m	/^:- pred string.codepoint_offset(string::in, int::in, int::out) is semidet.$/;kq|/^\<string.codepoint_offset\>/;'q;"	kind:pred
string.codepoint_offset_2	string.m	/^:- pred codepoint_offset_2(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<codepoint_offset_2\>/;'q;"	kind:pred	file:
string.comma_priority	string.m	/^:- func comma_priority(ops.table) = ops.priority.$/;kq|/^\<comma_priority\>/;'q;"	kind:func	file:
string.contains_char	string.m	/^:- pred string.contains_char(string::in, char::in) is semidet.$/;kq|/^\<string.contains_char\>/;'q;"	kind:pred
string.contains_char	string.m	/^:- pred string.contains_char(string::in, char::in, int::in) is semidet.$/;kq|/^\<string.contains_char\>/;'q;"	kind:pred	file:
string.conv	string.m	/^:- func conv(maybe(list(character))) = maybe(int).$/;kq|/^\<conv\>/;'q;"	kind:func	file:
string.convert_endpoints	string.m	/^:- pred convert_endpoints(int::in, int::in, int::out, int::out) is det.$/;kq|/^\<convert_endpoints\>/;'q;"	kind:pred	file:
string.convert_float_to_string	string.m	/^:- func convert_float_to_string(float) = string.$/;kq|/^\<convert_float_to_string\>/;'q;"	kind:func	file:
string.count_code_units	string.m	/^:- func string.count_code_units(string) = int.$/;kq|/^\<string.count_code_units\>/;'q;"	kind:func
string.count_code_units	string.m	/^:- pred string.count_code_units(string::in, int::out) is det.$/;kq|/^\<string.count_code_units\>/;'q;"	kind:pred
string.count_codepoints	string.m	/^:- func string.count_codepoints(string) = int.$/;kq|/^\<string.count_codepoints\>/;'q;"	kind:func
string.count_codepoints	string.m	/^:- pred string.count_codepoints(string::in, int::out) is det.$/;kq|/^\<string.count_codepoints\>/;'q;"	kind:pred
string.count_codepoints_2	string.m	/^:- pred count_codepoints_2(string::in, int::in, int::in, int::out) is det.$/;kq|/^\<count_codepoints_2\>/;'q;"	kind:pred	file:
string.count_utf8_code_units	string.m	/^:- func string.count_utf8_code_units(string) = int.$/;kq|/^\<string.count_utf8_code_units\>/;'q;"	kind:func
string.count_utf8_code_units_2	string.m	/^:- pred count_utf8_code_units_2(char::in, int::in, int::out) is det.$/;kq|/^\<count_utf8_code_units_2\>/;'q;"	kind:pred	file:
string.d	string.m	/^    --->    d(int)$/;kq|-;/\<string.d\>/;'q;"	kind:cons	file:
string.decimal_pos	string.m	/^:- func decimal_pos(string) = int.$/;kq|/^\<decimal_pos\>/;'q;"	kind:func	file:
string.det_base_string_to_int	string.m	/^:- func string.det_base_string_to_int(int, string) = int.$/;kq|/^\<string.det_base_string_to_int\>/;'q;"	kind:func
string.det_dynamic_cast	string.m	/^:- pred det_dynamic_cast(T1::in, T2::out) is det.$/;kq|/^\<det_dynamic_cast\>/;'q;"	kind:pred	file:
string.det_index	string.m	/^:- func string.det_index(string, int) = char.$/;kq|/^\<string.det_index\>/;'q;"	kind:func
string.det_index	string.m	/^:- pred string.det_index(string::in, int::in, char::uo) is det.$/;kq|/^\<string.det_index\>/;'q;"	kind:pred
string.det_remove_suffix	string.m	/^:- func string.det_remove_suffix(string, string) = string.$/;kq|/^\<string.det_remove_suffix\>/;'q;"	kind:func
string.det_set_char	string.m	/^:- func string.det_set_char(char, int, string) = string.$/;kq|/^\<string.det_set_char\>/;'q;"	kind:func
string.det_set_char	string.m	/^:- pred string.det_set_char(char, int, string, string).$/;kq|/^\<string.det_set_char\>/;'q;"	kind:pred
string.det_to_float	string.m	/^:- func string.det_to_float(string) = float.$/;kq|/^\<string.det_to_float\>/;'q;"	kind:func
string.det_to_int	string.m	/^:- func string.det_to_int(string) = int.$/;kq|/^\<string.det_to_int\>/;'q;"	kind:func
string.digit	string.m	/^:- pred digit(list(char)::in, list(char)::out) is semidet.$/;kq|/^\<digit\>/;'q;"	kind:pred	file:
string.duplicate_char	string.m	/^:- func string.duplicate_char(char::in, int::in) = (string::uo) is det.$/;kq|/^\<string.duplicate_char\>/;'q;"	kind:func
string.duplicate_char	string.m	/^:- pred string.duplicate_char(char::in, int::in, string::uo) is det.$/;kq|/^\<string.duplicate_char\>/;'q;"	kind:pred
string.e	string.m	/^    ;       e(float)$/;kq|-;/\<string.e\>/;'q;"	kind:cons	file:
string.f	string.m	/^    --->    f(float)$/;kq|-;/\<string.f\>/;'q;"	kind:cons
string.f	string.m	/^    ;       f(float)$/;kq|-;/\<string.f\>/;'q;"	kind:cons	file:
string.find_max_length	string.m	/^:- func find_max_length(justified_column) = int.$/;kq|/^\<find_max_length\>/;'q;"	kind:func	file:
string.find_non_zero_pos	string.m	/^:- func find_non_zero_pos(list(char), int) = int.$/;kq|/^\<find_non_zero_pos\>/;'q;"	kind:func	file:
string.first_char	string.m	/^:- pred string.first_char(string, char, string).$/;kq|/^\<string.first_char\>/;'q;"	kind:pred
string.flag	string.m	/^:- pred flag(char::in) is semidet.$/;kq|/^\<flag\>/;'q;"	kind:pred	file:
string.flags	string.m	/^                flags       :: list(char),$/;kq|-;/\<string.flags\>/;'q;"	kind:fld	file:
string.flags	string.m	/^:- pred flags(list(char)::out, list(char)::in, list(char)::out) is semidet.$/;kq|/^\<flags\>/;'q;"	kind:pred	file:
string.flags	string.m	/^:- type flags == list(char).$/;kq|-;/\<string.flags\>/;'q;"	kind:type	file:
string.float_to_string	string.m	/^:- func string.float_to_string(float::in) = (string::uo) is det.$/;kq|/^\<string.float_to_string\>/;'q;"	kind:func
string.float_to_string	string.m	/^:- pred string.float_to_string(float::in, string::uo) is det.$/;kq|/^\<string.float_to_string\>/;'q;"	kind:pred
string.float_to_string_2	string.m	/^:- func string.float_to_string_2(int, float) = (string) is det.$/;kq|/^\<string.float_to_string_2\>/;'q;"	kind:func	file:
string.foldl	string.m	/^:- func string.foldl(func(char, A) = A, string, A) = A.$/;kq|/^\<string.foldl\>/;'q;"	kind:func
string.foldl	string.m	/^:- pred string.foldl(pred(char, A, A), string, A, A).$/;kq|/^\<string.foldl\>/;'q;"	kind:pred
string.foldl2	string.m	/^:- pred string.foldl2(pred(char, A, A, B, B), string, A, A, B, B).$/;kq|/^\<string.foldl2\>/;'q;"	kind:pred
string.foldl2_between	string.m	/^:- pred string.foldl2_between(pred(char, A, A, B, B),$/;kq|/^\<string.foldl2_between\>/;'q;"	kind:pred
string.foldl2_between_2	string.m	/^:- pred string.foldl2_between_2(pred(char, A, A, B, B), string, int, int,$/;kq|/^\<string.foldl2_between_2\>/;'q;"	kind:pred	file:
string.foldl2_substring	string.m	/^:- pred string.foldl2_substring(pred(char, A, A, B, B),$/;kq|/^\<string.foldl2_substring\>/;'q;"	kind:pred
string.foldl_between	string.m	/^:- func string.foldl_between(func(char, A) = A, string, int, int, A) = A.$/;kq|/^\<string.foldl_between\>/;'q;"	kind:func
string.foldl_between	string.m	/^:- pred string.foldl_between(pred(char, A, A), string, int, int, A, A).$/;kq|/^\<string.foldl_between\>/;'q;"	kind:pred
string.foldl_between_2	string.m	/^:- pred string.foldl_between_2(pred(char, A, A), string, int, int, A, A).$/;kq|/^\<string.foldl_between_2\>/;'q;"	kind:pred	file:
string.foldl_substring	string.m	/^:- func string.foldl_substring(func(char, A) = A, string, int, int, A) = A.$/;kq|/^\<string.foldl_substring\>/;'q;"	kind:func
string.foldl_substring	string.m	/^:- pred string.foldl_substring(pred(char, A, A), string, int, int, A, A).$/;kq|/^\<string.foldl_substring\>/;'q;"	kind:pred
string.foldr	string.m	/^:- func string.foldr(func(char, T) = T, string, T) = T.$/;kq|/^\<string.foldr\>/;'q;"	kind:func
string.foldr	string.m	/^:- pred string.foldr(pred(char, T, T), string, T, T).$/;kq|/^\<string.foldr\>/;'q;"	kind:pred
string.foldr_between	string.m	/^:- func string.foldr_between(func(char, T) = T, string, int, int, T) = T.$/;kq|/^\<string.foldr_between\>/;'q;"	kind:func
string.foldr_between	string.m	/^:- pred string.foldr_between(pred(char, T, T), string, int, int, T, T).$/;kq|/^\<string.foldr_between\>/;'q;"	kind:pred
string.foldr_between_2	string.m	/^:- pred string.foldr_between_2(pred(char, T, T), string, int, int, T, T).$/;kq|/^\<string.foldr_between_2\>/;'q;"	kind:pred	file:
string.foldr_substring	string.m	/^:- func string.foldr_substring(func(char, T) = T, string, int, int, T) = T.$/;kq|/^\<string.foldr_substring\>/;'q;"	kind:func
string.foldr_substring	string.m	/^:- pred string.foldr_substring(pred(char, T, T), string, int, int, T, T).$/;kq|/^\<string.foldr_substring\>/;'q;"	kind:pred
string.format	string.m	/^:- func string.format(string, list(string.poly_type)) = string.$/;kq|/^\<string.format\>/;'q;"	kind:func
string.format	string.m	/^:- pred string.format(string::in, list(string.poly_type)::in, string::out)$/;kq|/^\<string.format\>/;'q;"	kind:pred
string.format_char	string.m	/^:- func format_char(flags, maybe_width, char) = string.$/;kq|/^\<format_char\>/;'q;"	kind:func	file:
string.format_float	string.m	/^:- func format_float(flags, spec_case, maybe_width, maybe_precision, float)$/;kq|/^\<format_float\>/;'q;"	kind:func	file:
string.format_inf	string.m	/^:- func format_inf(float, spec_case) = string.$/;kq|/^\<format_inf\>/;'q;"	kind:func	file:
string.format_int	string.m	/^:- func format_int(flags, maybe_width, maybe_precision, int) = string.$/;kq|/^\<format_int\>/;'q;"	kind:func	file:
string.format_nan	string.m	/^:- func format_nan(spec_case) = string.$/;kq|/^\<format_nan\>/;'q;"	kind:func	file:
string.format_string	string.m	/^:- func format_string(flags, maybe_width, maybe_precision, string) = string.$/;kq|/^\<format_string\>/;'q;"	kind:func	file:
string.format_table	string.m	/^:- func string.format_table(list(justified_column), string) = string.$/;kq|/^\<string.format_table\>/;'q;"	kind:func
string.format_table_max	string.m	/^:- func string.format_table_max(assoc_list(justified_column, maybe(int)),$/;kq|/^\<string.format_table_max\>/;'q;"	kind:func
string.format_unsigned_int	string.m	/^:- func format_unsigned_int(flags, maybe_width, maybe_precision,$/;kq|/^\<format_unsigned_int\>/;'q;"	kind:func	file:
string.from_c_pointer	string.m	/^:- func string.from_c_pointer(c_pointer::in) = (string::uo) is det.$/;kq|/^\<string.from_c_pointer\>/;'q;"	kind:func
string.from_char	string.m	/^:- func string.from_char(char::in) = (string::uo) is det.$/;kq|/^\<string.from_char\>/;'q;"	kind:func
string.from_char_list	string.m	/^:- func string.from_char_list(list(char)::in) = (string::uo) is det.$/;kq|/^\<string.from_char_list\>/;'q;"	kind:func
string.from_char_list	string.m	/^:- pred string.from_char_list(list(char), string).$/;kq|/^\<string.from_char_list\>/;'q;"	kind:pred
string.from_code_unit_list	string.m	/^:- pred string.from_code_unit_list(list(int)::in, string::uo) is semidet.$/;kq|/^\<string.from_code_unit_list\>/;'q;"	kind:pred
string.from_float	string.m	/^:- func string.from_float(float::in) = (string::uo) is det.$/;kq|/^\<string.from_float\>/;'q;"	kind:func
string.from_int	string.m	/^:- func string.from_int(int::in) = (string::uo) is det.$/;kq|/^\<string.from_int\>/;'q;"	kind:func
string.from_rev_char_list	string.m	/^:- func string.from_rev_char_list(list(char)::in) = (string::uo) is det.$/;kq|/^\<string.from_rev_char_list\>/;'q;"	kind:func
string.from_rev_char_list	string.m	/^:- pred string.from_rev_char_list(list(char)::in, string::uo) is det.$/;kq|/^\<string.from_rev_char_list\>/;'q;"	kind:pred
string.g	string.m	/^    ;       g(float)$/;kq|-;/\<string.g\>/;'q;"	kind:cons	file:
string.generate_rows	string.m	/^:- pred generate_rows(assoc_list(justify_sense, int)::in, string::in, int::in,$/;kq|/^\<generate_rows\>/;'q;"	kind:pred	file:
string.get_capital_hex_int	string.m	/^:- func get_capital_hex_int(integer) = string.$/;kq|/^\<get_capital_hex_int\>/;'q;"	kind:func	file:
string.get_hex_int	string.m	/^:- func get_hex_int(integer) = string.$/;kq|/^\<get_hex_int\>/;'q;"	kind:func	file:
string.get_next_line	string.m	/^:- pred get_next_line(list(list(string))::in,$/;kq|/^\<get_next_line\>/;'q;"	kind:pred	file:
string.hash	string.m	/^:- func string.hash(string) = int.$/;kq|/^\<string.hash\>/;'q;"	kind:func
string.hash	string.m	/^:- pred string.hash(string::in, int::out) is det.$/;kq|/^\<string.hash\>/;'q;"	kind:pred
string.hash2	string.m	/^:- func string.hash2(string) = int.$/;kq|/^\<string.hash2\>/;'q;"	kind:func
string.hash2_loop	string.m	/^:- pred string.hash2_loop(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<string.hash2_loop\>/;'q;"	kind:pred	file:
string.hash3	string.m	/^:- func string.hash3(string) = int.$/;kq|/^\<string.hash3\>/;'q;"	kind:func
string.hash3_loop	string.m	/^:- pred string.hash3_loop(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<string.hash3_loop\>/;'q;"	kind:pred	file:
string.hash_loop	string.m	/^:- pred string.hash_loop(string::in, int::in, int::in, int::in, int::out)$/;kq|/^\<string.hash_loop\>/;'q;"	kind:pred	file:
string.i	string.m	/^    ;       i(int)$/;kq|-;/\<string.i\>/;'q;"	kind:cons
string.i	string.m	/^    ;       i(int)$/;kq|-;/\<string.i\>/;'q;"	kind:cons	file:
string.index	string.m	/^:- pred string.index(string::in, int::in, char::uo) is semidet.$/;kq|/^\<string.index\>/;'q;"	kind:pred
string.index_check	string.m	/^:- pred string.index_check(int::in, int::in) is semidet.$/;kq|/^\<string.index_check\>/;'q;"	kind:pred	file:
string.index_next	string.m	/^:- pred string.index_next(string::in, int::in, int::out, char::uo) is semidet.$/;kq|/^\<string.index_next\>/;'q;"	kind:pred
string.int_length_modifer	string.m	/^:- func int_length_modifer = string.$/;kq|/^\<int_length_modifer\>/;'q;"	kind:func	file:
string.int_to_base_string	string.m	/^:- func string.int_to_base_string(int::in, int::in) = (string::uo) is det.$/;kq|/^\<string.int_to_base_string\>/;'q;"	kind:func
string.int_to_base_string	string.m	/^:- pred string.int_to_base_string(int::in, int::in, string::uo) is det.$/;kq|/^\<string.int_to_base_string\>/;'q;"	kind:pred
string.int_to_base_string_1	string.m	/^:- pred string.int_to_base_string_1(int::in, int::in, string::uo) is det.$/;kq|/^\<string.int_to_base_string_1\>/;'q;"	kind:pred	file:
string.int_to_base_string_2	string.m	/^:- pred string.int_to_base_string_2(int::in, int::in,$/;kq|/^\<string.int_to_base_string_2\>/;'q;"	kind:pred	file:
string.int_to_string	string.m	/^:- func string.int_to_string(int::in) = (string::uo) is det.$/;kq|/^\<string.int_to_string\>/;'q;"	kind:func
string.int_to_string	string.m	/^:- pred string.int_to_string(int::in, string::uo) is det.$/;kq|/^\<string.int_to_string\>/;'q;"	kind:pred
string.int_to_string_thousands	string.m	/^:- func string.int_to_string_thousands(int::in) = (string::uo) is det.$/;kq|/^\<string.int_to_string_thousands\>/;'q;"	kind:func
string.is_all_alpha	string.m	/^:- pred string.is_all_alpha(string::in) is semidet.$/;kq|/^\<string.is_all_alpha\>/;'q;"	kind:pred
string.is_all_digits	string.m	/^:- pred string.is_all_digits(string::in) is semidet.$/;kq|/^\<string.is_all_digits\>/;'q;"	kind:pred
string.is_decimal_point	string.m	/^:- pred is_decimal_point(char :: in) is semidet.$/;kq|/^\<is_decimal_point\>/;'q;"	kind:pred	file:
string.is_exponent	string.m	/^:- pred is_exponent(char :: in) is semidet.$/;kq|/^\<is_exponent\>/;'q;"	kind:pred	file:
string.join_list	string.m	/^:- func string.join_list(string::in, list(string)::in) = (string::uo) is det.$/;kq|/^\<string.join_list\>/;'q;"	kind:func
string.join_list_2	string.m	/^:- func join_list_2(string::in, list(string)::in) = (string::uo) is det.$/;kq|/^\<join_list_2\>/;'q;"	kind:func	file:
string.join_rev_columns	string.m	/^:- func join_rev_columns(string, string, string) = string.$/;kq|/^\<join_rev_columns\>/;'q;"	kind:func	file:
string.just_left	string.m	/^    --->    just_left$/;kq|-;/\<string.just_left\>/;'q;"	kind:cons	file:
string.just_right	string.m	/^    ;       just_right.$/;kq|-;/\<string.just_right\>/;'q;"	kind:cons	file:
string.justified_column	string.m	/^:- type justified_column$/;kq|-;/\<string.justified_column\>/;'q;"	kind:type
string.justify_sense	string.m	/^:- type justify_sense$/;kq|-;/\<string.justify_sense\>/;'q;"	kind:type	file:
string.justify_string	string.m	/^:- func justify_string(flags, maybe_width, string) = string.$/;kq|/^\<justify_string\>/;'q;"	kind:func	file:
string.left	string.m	/^    --->    left(list(string))$/;kq|-;/\<string.left\>/;'q;"	kind:cons
string.left	string.m	/^:- func string.left(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.left\>/;'q;"	kind:func
string.left	string.m	/^:- pred string.left(string::in, int::in, string::out) is det.$/;kq|/^\<string.left\>/;'q;"	kind:pred
string.left_by_codepoint	string.m	/^:- func string.left_by_codepoint(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.left_by_codepoint\>/;'q;"	kind:func
string.left_by_codepoint	string.m	/^:- pred string.left_by_codepoint(string::in, int::in, string::out) is det.$/;kq|/^\<string.left_by_codepoint\>/;'q;"	kind:pred
string.length	string.m	/^:- func string.length(string::in) = (int::uo) is det.$/;kq|/^\<string.length\>/;'q;"	kind:func
string.length	string.m	/^:- pred string.length(string, int).$/;kq|/^\<string.length\>/;'q;"	kind:pred
string.line	string.m	/^    --->    line(string).$/;kq|-;/\<string.line\>/;'q;"	kind:cons
string.line	string.m	/^:- type line$/;kq|-;/\<string.line\>/;'q;"	kind:type
string.lpad	string.m	/^:- func lpad(char, int, string) = string.$/;kq|/^\<lpad\>/;'q;"	kind:func	file:
string.lstrip	string.m	/^:- func string.lstrip(string) = string.$/;kq|/^\<string.lstrip\>/;'q;"	kind:func
string.lstrip_pred	string.m	/^:- func string.lstrip_pred(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.lstrip_pred\>/;'q;"	kind:func
string.make_format	string.m	/^:- func make_format(list(char), maybe(list(char)),$/;kq|/^\<make_format\>/;'q;"	kind:func	file:
string.make_format_dotnet	string.m	/^:- func make_format_dotnet(list(char), maybe(list(char)),$/;kq|/^\<make_format_dotnet\>/;'q;"	kind:func	file:
string.make_format_sprintf	string.m	/^:- func make_format_sprintf(list(char), maybe(list(char)),$/;kq|/^\<make_format_sprintf\>/;'q;"	kind:func	file:
string.max_precision	string.m	/^:- func max_precision = int.$/;kq|/^\<max_precision\>/;'q;"	kind:func	file:
string.max_str_length	string.m	/^:- pred max_str_length(string::in, int::in, int::out) is det.$/;kq|/^\<max_str_length\>/;'q;"	kind:pred	file:
string.maybe_add_revstring	string.m	/^:- pred maybe_add_revstring(string::in, ops.priority::in, ops.priority::in,$/;kq|/^\<maybe_add_revstring\>/;'q;"	kind:pred	file:
string.maybe_precision	string.m	/^:- type maybe_precision == maybe(int).$/;kq|-;/\<string.maybe_precision\>/;'q;"	kind:type	file:
string.maybe_width	string.m	/^:- type maybe_width == maybe(int).$/;kq|-;/\<string.maybe_width\>/;'q;"	kind:type	file:
string.mercury_append	string.m	/^:- pred string.mercury_append(string, string, string).$/;kq|/^\<string.mercury_append\>/;'q;"	kind:pred	file:
string.min_precision	string.m	/^:- func min_precision = int.$/;kq|/^\<min_precision\>/;'q;"	kind:func	file:
string.native_format_char	string.m	/^:- func native_format_char(string, char) = string.$/;kq|/^\<native_format_char\>/;'q;"	kind:func	file:
string.native_format_float	string.m	/^:- func native_format_float(string, float) = string.$/;kq|/^\<native_format_float\>/;'q;"	kind:func	file:
string.native_format_int	string.m	/^:- func native_format_int(string, int) = string.$/;kq|/^\<native_format_int\>/;'q;"	kind:func	file:
string.native_format_string	string.m	/^:- func native_format_string(string, string) = string.$/;kq|/^\<native_format_string\>/;'q;"	kind:func	file:
string.next_boundary	string.m	/^:- pred next_boundary(pred(char)::in(pred(in) is semidet), string::in, int::in,$/;kq|/^\<next_boundary\>/;'q;"	kind:pred	file:
string.non_zero_digit	string.m	/^:- pred non_zero_digit(list(char)::in, list(char)::out) is semidet.$/;kq|/^\<non_zero_digit\>/;'q;"	kind:pred	file:
string.o	string.m	/^    ;       o(int)$/;kq|-;/\<string.o\>/;'q;"	kind:cons	file:
string.optional	string.m	/^:- pred optional($/;kq|/^\<optional\>/;'q;"	kind:pred	file:
string.other	string.m	/^:- pred other(list(char)::out, list(char)::in, list(char)::out) is det.$/;kq|/^\<other\>/;'q;"	kind:pred	file:
string.p	string.m	/^    ;       p(int)$/;kq|-;/\<string.p\>/;'q;"	kind:cons	file:
string.pad_column	string.m	/^:- func pad_column(int, justified_column) = list(string).$/;kq|/^\<pad_column\>/;'q;"	kind:func	file:
string.pad_left	string.m	/^:- func string.pad_left(string, char, int) = string.$/;kq|/^\<string.pad_left\>/;'q;"	kind:func
string.pad_left	string.m	/^:- pred string.pad_left(string::in, char::in, int::in, string::out) is det.$/;kq|/^\<string.pad_left\>/;'q;"	kind:pred
string.pad_right	string.m	/^:- func string.pad_right(string, char, int) = string.$/;kq|/^\<string.pad_right\>/;'q;"	kind:func
string.pad_right	string.m	/^:- pred string.pad_right(string::in, char::in, int::in, string::out) is det.$/;kq|/^\<string.pad_right\>/;'q;"	kind:pred
string.pad_row	string.m	/^:- pred pad_row(assoc_list(justify_sense, int)::in, list(string)::in,$/;kq|/^\<pad_row\>/;'q;"	kind:pred	file:
string.percent	string.m	/^    ;       percent.$/;kq|-;/\<string.percent\>/;'q;"	kind:cons	file:
string.poly_type	string.m	/^:- type string.poly_type$/;kq|-;/\<string.poly_type\>/;'q;"	kind:type
string.prec	string.m	/^:- pred prec(list(char)::out,$/;kq|/^\<prec\>/;'q;"	kind:pred	file:
string.precision	string.m	/^                precision   :: maybe(list(char)),$/;kq|-;/\<string.precision\>/;'q;"	kind:fld	file:
string.prefix	string.m	/^:- pred string.prefix(string, string).$/;kq|/^\<string.prefix\>/;'q;"	kind:pred
string.prefix_2_iii	string.m	/^:- pred prefix_2_iii(string::in, string::in, int::in) is semidet.$/;kq|/^\<prefix_2_iii\>/;'q;"	kind:pred	file:
string.prefix_2_ioi	string.m	/^:- pred prefix_2_ioi(string::in, string::out, int::in) is multi.$/;kq|/^\<prefix_2_ioi\>/;'q;"	kind:pred	file:
string.prefix_length	string.m	/^:- func string.prefix_length(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.prefix_length\>/;'q;"	kind:func
string.prefix_length_2	string.m	/^:- pred prefix_length_2(pred(char)::in(pred(in) is semidet),$/;kq|/^\<prefix_length_2\>/;'q;"	kind:pred	file:
string.prev_index	string.m	/^:- pred string.prev_index(string::in, int::in, int::out, char::uo) is semidet.$/;kq|/^\<string.prev_index\>/;'q;"	kind:pred
string.project_column_strings	string.m	/^:- func project_column_strings(pair(justified_column, maybe(int)))$/;kq|/^\<project_column_strings\>/;'q;"	kind:func	file:
string.remove_prefix	string.m	/^:- pred string.remove_prefix(string::in, string::in, string::out) is semidet.$/;kq|/^\<string.remove_prefix\>/;'q;"	kind:pred
string.remove_suffix	string.m	/^:- pred string.remove_suffix(string::in, string::in, string::out) is semidet.$/;kq|/^\<string.remove_suffix\>/;'q;"	kind:pred
string.remove_trailing_zeros	string.m	/^:- func remove_trailing_zeros(string) = string.$/;kq|/^\<remove_trailing_zeros\>/;'q;"	kind:func	file:
string.remove_zeros	string.m	/^:- func remove_zeros(list(char)) = list(char).$/;kq|/^\<remove_zeros\>/;'q;"	kind:func	file:
string.replace	string.m	/^:- pred string.replace(string::in, string::in, string::in, string::uo)$/;kq|/^\<string.replace\>/;'q;"	kind:pred
string.replace_all	string.m	/^:- func string.replace_all(string::in, string::in, string::in) = (string::uo)$/;kq|/^\<string.replace_all\>/;'q;"	kind:func
string.replace_all	string.m	/^:- pred string.replace_all(string::in, string::in, string::in, string::uo)$/;kq|/^\<string.replace_all\>/;'q;"	kind:pred
string.replace_all_2	string.m	/^:- func string.replace_all_2(string, string, string, int, int, list(string))$/;kq|/^\<string.replace_all_2\>/;'q;"	kind:func	file:
string.revstrings	string.m	/^:- type revstrings == list(string).$/;kq|-;/\<string.revstrings\>/;'q;"	kind:type	file:
string.right	string.m	/^    ;       right(list(string)).$/;kq|-;/\<string.right\>/;'q;"	kind:cons
string.right	string.m	/^:- func string.right(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.right\>/;'q;"	kind:func
string.right	string.m	/^:- pred string.right(string::in, int::in, string::out) is det.$/;kq|/^\<string.right\>/;'q;"	kind:pred
string.right_by_codepoint	string.m	/^:- func string.right_by_codepoint(string::in, int::in) = (string::out) is det.$/;kq|/^\<string.right_by_codepoint\>/;'q;"	kind:func
string.right_by_codepoint	string.m	/^:- pred string.right_by_codepoint(string::in, int::in, string::out) is det.$/;kq|/^\<string.right_by_codepoint\>/;'q;"	kind:pred
string.rpad	string.m	/^:- func rpad(char, int, string) = string.$/;kq|/^\<rpad\>/;'q;"	kind:func	file:
string.rstrip	string.m	/^:- func string.rstrip(string) = string.$/;kq|/^\<string.rstrip\>/;'q;"	kind:func
string.rstrip_pred	string.m	/^:- func string.rstrip_pred(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.rstrip_pred\>/;'q;"	kind:func
string.s	string.m	/^    ;       s(string)$/;kq|-;/\<string.s\>/;'q;"	kind:cons
string.s	string.m	/^    ;       s(string)$/;kq|-;/\<string.s\>/;'q;"	kind:cons	file:
string.same_array_elem_type	string.m	/^:- pred same_array_elem_type(array(T)::unused, T::unused) is det.$/;kq|/^\<same_array_elem_type\>/;'q;"	kind:pred	file:
string.semidet_from_char_list	string.m	/^:- pred string.semidet_from_char_list(list(char)::in, string::uo) is semidet.$/;kq|/^\<string.semidet_from_char_list\>/;'q;"	kind:pred
string.set_char	string.m	/^:- pred string.set_char(char, int, string, string).$/;kq|/^\<string.set_char\>/;'q;"	kind:pred
string.set_char_2	string.m	/^:- pred string.set_char_2(char, int, string, string).$/;kq|/^\<string.set_char_2\>/;'q;"	kind:pred	file:
string.spec	string.m	/^                spec        :: spec$/;kq|-;/\<string.spec\>/;'q;"	kind:fld	file:
string.spec	string.m	/^:- pred spec(spec::out,$/;kq|/^\<spec\>/;'q;"	kind:pred	file:
string.spec	string.m	/^:- type spec$/;kq|-;/\<string.spec\>/;'q;"	kind:type	file:
string.spec_case	string.m	/^:- type spec_case$/;kq|-;/\<string.spec_case\>/;'q;"	kind:type	file:
string.spec_conv	string.m	/^    --->    spec_conv($/;kq|-;/\<string.spec_conv\>/;'q;"	kind:cons	file:
string.spec_is_capital	string.m	/^    --->    spec_is_capital$/;kq|-;/\<string.spec_is_capital\>/;'q;"	kind:cons	file:
string.spec_is_not_capital	string.m	/^    ;       spec_is_not_capital.$/;kq|-;/\<string.spec_is_not_capital\>/;'q;"	kind:cons	file:
string.spec_string	string.m	/^    ;       spec_string(list(char)).$/;kq|-;/\<string.spec_string\>/;'q;"	kind:cons	file:
string.specifier	string.m	/^:- type string.specifier$/;kq|-;/\<string.specifier\>/;'q;"	kind:type	file:
string.specifier_to_string	string.m	/^:- func specifier_to_string(string.specifier) = string.$/;kq|/^\<specifier_to_string\>/;'q;"	kind:func	file:
string.split	string.m	/^:- pred string.split(string::in, int::in, string::out, string::out) is det.$/;kq|/^\<string.split\>/;'q;"	kind:pred
string.split_at_char	string.m	/^:- func string.split_at_char(char, string) = list(string).$/;kq|/^\<string.split_at_char\>/;'q;"	kind:func
string.split_at_decimal_point	string.m	/^:- pred split_at_decimal_point(string::in, string::out, string::out) is det.$/;kq|/^\<split_at_decimal_point\>/;'q;"	kind:pred	file:
string.split_at_exponent	string.m	/^:- pred split_at_exponent(string::in, string::out, string::out) is det.$/;kq|/^\<split_at_exponent\>/;'q;"	kind:pred	file:
string.split_at_separator	string.m	/^:- func string.split_at_separator(pred(char), string) = list(string).$/;kq|/^\<string.split_at_separator\>/;'q;"	kind:func
string.split_at_separator_2	string.m	/^:- pred split_at_separator_2(pred(char)::in(pred(in) is semidet), string::in,$/;kq|/^\<split_at_separator_2\>/;'q;"	kind:pred	file:
string.split_at_string	string.m	/^:- func split_at_string(int, int, string, string) = list(string).$/;kq|/^\<split_at_string\>/;'q;"	kind:func	file:
string.split_at_string	string.m	/^:- func string.split_at_string(string, string) = list(string).$/;kq|/^\<string.split_at_string\>/;'q;"	kind:func
string.split_by_codepoint	string.m	/^:- pred string.split_by_codepoint(string::in, int::in, string::out, string::out)$/;kq|/^\<string.split_by_codepoint\>/;'q;"	kind:pred
string.strchars	string.m	/^:- func strchars(int, int, string) = list(char).$/;kq|/^\<strchars\>/;'q;"	kind:func	file:
string.string	string.m	/^:- func string.string(T) = string.$/;kq|/^\<string.string\>/;'q;"	kind:func
string.string_ops	string.m	/^:- func string.string_ops(ops.table, T) = string.$/;kq|/^\<string.string_ops\>/;'q;"	kind:func
string.string_ops_noncanon	string.m	/^:- pred string.string_ops_noncanon(noncanon_handling, ops.table, T, string).$/;kq|/^\<string.string_ops_noncanon\>/;'q;"	kind:pred
string.string_to_doc	string.m	/^:- func string.string_to_doc(string) = pretty_printer.doc.$/;kq|/^\<string.string_to_doc\>/;'q;"	kind:func
string.strip	string.m	/^:- func string.strip(string) = string.$/;kq|/^\<string.strip\>/;'q;"	kind:func
string.sub_string_search	string.m	/^:- pred string.sub_string_search(string::in, string::in, int::out) is semidet.$/;kq|/^\<string.sub_string_search\>/;'q;"	kind:pred
string.sub_string_search_start	string.m	/^:- pred string.sub_string_search_start(string::in, string::in, int::in,$/;kq|/^\<string.sub_string_search_start\>/;'q;"	kind:pred
string.substring	string.m	/^:- func string.substring(string::in, int::in, int::in) = (string::uo) is det.$/;kq|/^\<string.substring\>/;'q;"	kind:func
string.substring	string.m	/^:- pred string.substring(string::in, int::in, int::in, string::uo) is det.$/;kq|/^\<string.substring\>/;'q;"	kind:pred
string.suffix	string.m	/^:- pred string.suffix(string, string).$/;kq|/^\<string.suffix\>/;'q;"	kind:pred
string.suffix_2_iiii	string.m	/^:- pred suffix_2_iiii(string::in, string::in, int::in, int::in, int::in)$/;kq|/^\<suffix_2_iiii\>/;'q;"	kind:pred	file:
string.suffix_2_ioii	string.m	/^:- pred suffix_2_ioii(string::in, string::out, int::in, int::in) is multi.$/;kq|/^\<suffix_2_ioii\>/;'q;"	kind:pred	file:
string.suffix_length	string.m	/^:- func string.suffix_length(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.suffix_length\>/;'q;"	kind:func
string.suffix_length_2	string.m	/^:- pred suffix_length_2(pred(char)::in(pred(in) is semidet),$/;kq|/^\<suffix_length_2\>/;'q;"	kind:pred	file:
string.term_args_to_revstrings	string.m	/^:- pred term_args_to_revstrings(noncanon_handling, ops.table, list(univ),$/;kq|/^\<term_args_to_revstrings\>/;'q;"	kind:pred	file:
string.text_file	string.m	/^    --->    text_file(string).$/;kq|-;/\<string.text_file\>/;'q;"	kind:cons
string.text_file	string.m	/^:- type text_file$/;kq|-;/\<string.text_file\>/;'q;"	kind:type
string.to_capital_hex	string.m	/^:- func to_capital_hex(integer) = string.$/;kq|/^\<to_capital_hex\>/;'q;"	kind:func	file:
string.to_char_list	string.m	/^:- func string.to_char_list(string) = list(char).$/;kq|/^\<string.to_char_list\>/;'q;"	kind:func
string.to_char_list	string.m	/^:- pred string.to_char_list(string, list(char)).$/;kq|/^\<string.to_char_list\>/;'q;"	kind:pred
string.to_char_list_2	string.m	/^:- pred string.to_char_list_2(string, list(char)).$/;kq|/^\<string.to_char_list_2\>/;'q;"	kind:pred	file:
string.to_code_unit_list	string.m	/^:- pred string.to_code_unit_list(string::in, list(int)::out) is det.$/;kq|/^\<string.to_code_unit_list\>/;'q;"	kind:pred
string.to_code_unit_list_2	string.m	/^:- pred string.to_code_unit_list_2(string::in, int::in, int::in,$/;kq|/^\<string.to_code_unit_list_2\>/;'q;"	kind:pred	file:
string.to_float	string.m	/^:- pred string.to_float(string::in, float::out) is semidet.$/;kq|/^\<string.to_float\>/;'q;"	kind:pred
string.to_hex	string.m	/^:- func to_hex(integer) = string.$/;kq|/^\<to_hex\>/;'q;"	kind:func	file:
string.to_int	string.m	/^:- pred string.to_int(string::in, int::out) is semidet.$/;kq|/^\<string.to_int\>/;'q;"	kind:pred
string.to_lower	string.m	/^:- func string.to_lower(string::in) = (string::uo) is det.$/;kq|/^\<string.to_lower\>/;'q;"	kind:func
string.to_lower	string.m	/^:- pred string.to_lower(string, string).$/;kq|/^\<string.to_lower\>/;'q;"	kind:pred
string.to_octal	string.m	/^:- func to_octal(integer) = string.$/;kq|/^\<to_octal\>/;'q;"	kind:func	file:
string.to_upper	string.m	/^:- func string.to_upper(string::in) = (string::uo) is det.$/;kq|/^\<string.to_upper\>/;'q;"	kind:func
string.to_upper	string.m	/^:- pred string.to_upper(string, string).$/;kq|/^\<string.to_upper\>/;'q;"	kind:pred
string.type_desc_to_revstrings	string.m	/^:- pred type_desc_to_revstrings(type_desc::in,$/;kq|/^\<type_desc_to_revstrings\>/;'q;"	kind:pred	file:
string.u	string.m	/^    ;       u(int)$/;kq|-;/\<string.u\>/;'q;"	kind:cons	file:
string.uncapitalize_first	string.m	/^:- func string.uncapitalize_first(string) = string.$/;kq|/^\<string.uncapitalize_first\>/;'q;"	kind:func
string.uncapitalize_first	string.m	/^:- pred string.uncapitalize_first(string::in, string::out) is det.$/;kq|/^\<string.uncapitalize_first\>/;'q;"	kind:pred
string.unsafe_between	string.m	/^:- func string.unsafe_between(string::in, int::in, int::in) = (string::uo)$/;kq|/^\<string.unsafe_between\>/;'q;"	kind:func
string.unsafe_between	string.m	/^:- pred string.unsafe_between(string::in, int::in, int::in, string::uo)$/;kq|/^\<string.unsafe_between\>/;'q;"	kind:pred
string.unsafe_index	string.m	/^:- func string.unsafe_index(string, int) = char.$/;kq|/^\<string.unsafe_index\>/;'q;"	kind:func
string.unsafe_index	string.m	/^:- pred string.unsafe_index(string::in, int::in, char::uo) is det.$/;kq|/^\<string.unsafe_index\>/;'q;"	kind:pred
string.unsafe_index_2	string.m	/^:- pred string.unsafe_index_2(string::in, int::in, char::uo) is semidet.$/;kq|/^\<string.unsafe_index_2\>/;'q;"	kind:pred	file:
string.unsafe_index_code_unit	string.m	/^:- pred string.unsafe_index_code_unit(string::in, int::in, int::out) is det.$/;kq|/^\<string.unsafe_index_code_unit\>/;'q;"	kind:pred
string.unsafe_index_next	string.m	/^:- pred string.unsafe_index_next(string::in, int::in, int::out, char::uo)$/;kq|/^\<string.unsafe_index_next\>/;'q;"	kind:pred
string.unsafe_prev_index	string.m	/^:- pred string.unsafe_prev_index(string::in, int::in, int::out, char::uo)$/;kq|/^\<string.unsafe_prev_index\>/;'q;"	kind:pred
string.unsafe_set_char	string.m	/^:- func string.unsafe_set_char(char, int, string) = string.$/;kq|/^\<string.unsafe_set_char\>/;'q;"	kind:func
string.unsafe_set_char	string.m	/^:- pred string.unsafe_set_char(char, int, string, string).$/;kq|/^\<string.unsafe_set_char\>/;'q;"	kind:pred
string.unsafe_set_char_2	string.m	/^:- pred string.unsafe_set_char_2(char, int, string, string).$/;kq|/^\<string.unsafe_set_char_2\>/;'q;"	kind:pred	file:
string.unsafe_substring	string.m	/^:- func string.unsafe_substring(string::in, int::in, int::in) = (string::uo)$/;kq|/^\<string.unsafe_substring\>/;'q;"	kind:func
string.unsafe_substring	string.m	/^:- pred string.unsafe_substring(string::in, int::in, int::in, string::uo)$/;kq|/^\<string.unsafe_substring\>/;'q;"	kind:pred
string.using_sprintf	string.m	/^:- pred using_sprintf is semidet.$/;kq|/^\<using_sprintf\>/;'q;"	kind:pred	file:
string.using_sprintf_for_char	string.m	/^:- pred using_sprintf_for_char(char::in) is semidet.$/;kq|/^\<using_sprintf_for_char\>/;'q;"	kind:pred	file:
string.value_to_revstrings	string.m	/^:- pred value_to_revstrings(noncanon_handling, ops.table, T,$/;kq|/^\<value_to_revstrings\>/;'q;"	kind:pred	file:
string.width	string.m	/^                width       :: maybe(list(char)),$/;kq|-;/\<string.width\>/;'q;"	kind:fld	file:
string.width	string.m	/^:- pred width(list(char)::out,$/;kq|/^\<width\>/;'q;"	kind:pred	file:
string.word_wrap	string.m	/^:- func string.word_wrap(string, int) = string.$/;kq|/^\<string.word_wrap\>/;'q;"	kind:func
string.word_wrap_2	string.m	/^:- pred word_wrap_2(list(string)::in, string::in, int::in, int::in, int::in,$/;kq|/^\<word_wrap_2\>/;'q;"	kind:pred	file:
string.word_wrap_separator	string.m	/^:- func string.word_wrap_separator(string, int, string) = string.$/;kq|/^\<string.word_wrap_separator\>/;'q;"	kind:func
string.words	string.m	/^:- func string.words(string) = list(string).$/;kq|/^\<string.words\>/;'q;"	kind:func
string.words_2	string.m	/^:- pred words_2(pred(char)::in(pred(in) is semidet), string::in, int::in,$/;kq|/^\<words_2\>/;'q;"	kind:pred	file:
string.words_separator	string.m	/^:- func string.words_separator(pred(char), string) = list(string).$/;kq|/^\<string.words_separator\>/;'q;"	kind:func
string.x	string.m	/^    ;       x(int)$/;kq|-;/\<string.x\>/;'q;"	kind:cons	file:
string.zero_or_more_occurences	string.m	/^:- pred zero_or_more_occurences($/;kq|/^\<zero_or_more_occurences\>/;'q;"	kind:pred	file:
string_finish_hex_escape	lexer.m	/^:- pred string_finish_hex_escape(string::in, int::in, char::in,$/;kq|/^\<string_finish_hex_escape\>/;'q;"	kind:pred	file:
string_finish_octal_escape	lexer.m	/^:- pred string_finish_octal_escape(string::in, int::in, char::in,$/;kq|/^\<string_finish_octal_escape\>/;'q;"	kind:pred	file:
string_get_binary	lexer.m	/^:- pred string_get_binary(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_binary\>/;'q;"	kind:pred	file:
string_get_binary_2	lexer.m	/^:- pred string_get_binary_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_binary_2\>/;'q;"	kind:pred	file:
string_get_char_code	lexer.m	/^:- pred string_get_char_code(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_char_code\>/;'q;"	kind:pred	file:
string_get_comment	lexer.m	/^:- pred string_get_comment(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_comment\>/;'q;"	kind:pred	file:
string_get_comment_2	lexer.m	/^:- pred string_get_comment_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_comment_2\>/;'q;"	kind:pred	file:
string_get_context	lexer.m	/^:- pred string_get_context(posn::in, string_token_context::out,$/;kq|/^\<string_get_context\>/;'q;"	kind:pred	file:
string_get_dot	lexer.m	/^:- pred string_get_dot(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_dot\>/;'q;"	kind:pred	file:
string_get_float_decimals	lexer.m	/^:- pred string_get_float_decimals(string::in, int::in, posn::in,$/;kq|/^\<string_get_float_decimals\>/;'q;"	kind:pred	file:
string_get_float_exponent	lexer.m	/^:- pred string_get_float_exponent(string::in, int::in, posn::in,$/;kq|/^\<string_get_float_exponent\>/;'q;"	kind:pred	file:
string_get_float_exponent_2	lexer.m	/^:- pred string_get_float_exponent_2(string::in, int::in, posn::in,$/;kq|/^\<string_get_float_exponent_2\>/;'q;"	kind:pred	file:
string_get_float_exponent_3	lexer.m	/^:- pred string_get_float_exponent_3(string::in, int::in, posn::in,$/;kq|/^\<string_get_float_exponent_3\>/;'q;"	kind:pred	file:
string_get_graphic	lexer.m	/^:- pred string_get_graphic(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_graphic\>/;'q;"	kind:pred	file:
string_get_hex	lexer.m	/^:- pred string_get_hex(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_hex\>/;'q;"	kind:pred	file:
string_get_hex_2	lexer.m	/^:- pred string_get_hex_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_hex_2\>/;'q;"	kind:pred	file:
string_get_hex_escape	lexer.m	/^:- pred string_get_hex_escape(string::in, int::in, char::in,$/;kq|/^\<string_get_hex_escape\>/;'q;"	kind:pred	file:
string_get_implementation_defined_literal_rest	lexer.m	/^:- pred string_get_implementation_defined_literal_rest(string::in, int::in,$/;kq|/^\<string_get_implementation_defined_literal_rest\>/;'q;"	kind:pred	file:
string_get_int_dot	lexer.m	/^:- pred string_get_int_dot(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_int_dot\>/;'q;"	kind:pred	file:
string_get_name	lexer.m	/^:- pred string_get_name(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_name\>/;'q;"	kind:pred	file:
string_get_number	lexer.m	/^:- pred string_get_number(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_number\>/;'q;"	kind:pred	file:
string_get_octal	lexer.m	/^:- pred string_get_octal(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_octal\>/;'q;"	kind:pred	file:
string_get_octal_2	lexer.m	/^:- pred string_get_octal_2(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_octal_2\>/;'q;"	kind:pred	file:
string_get_octal_escape	lexer.m	/^:- pred string_get_octal_escape(string::in, int::in, char::in,$/;kq|/^\<string_get_octal_escape\>/;'q;"	kind:pred	file:
string_get_quoted_name	lexer.m	/^:- pred string_get_quoted_name(string::in, int::in, char::in,$/;kq|/^\<string_get_quoted_name\>/;'q;"	kind:pred	file:
string_get_quoted_name_escape	lexer.m	/^:- pred string_get_quoted_name_escape(string::in, int::in, char::in,$/;kq|/^\<string_get_quoted_name_escape\>/;'q;"	kind:pred	file:
string_get_quoted_name_quote	lexer.m	/^:- pred string_get_quoted_name_quote(string::in, int::in, char::in,$/;kq|/^\<string_get_quoted_name_quote\>/;'q;"	kind:pred	file:
string_get_slash	lexer.m	/^:- pred string_get_slash(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_slash\>/;'q;"	kind:pred	file:
string_get_source_line_number	lexer.m	/^:- pred string_get_source_line_number(string::in, int::in, posn::in,$/;kq|/^\<string_get_source_line_number\>/;'q;"	kind:pred	file:
string_get_token	lexer.m	/^:- pred string_get_token(string::in, int::in, token::out,$/;kq|/^\<string_get_token\>/;'q;"	kind:pred	file:
string_get_token_2	lexer.m	/^:- pred string_get_token_2(string::in, int::in, token::out,$/;kq|/^\<string_get_token_2\>/;'q;"	kind:pred	file:
string_get_token_list	lexer.m	/^:- pred string_get_token_list(string::in, token_list::out,$/;kq|/^\<string_get_token_list\>/;'q;"	kind:pred
string_get_token_list_max	lexer.m	/^:- pred string_get_token_list_max(string::in, offset::in, token_list::out,$/;kq|/^\<string_get_token_list_max\>/;'q;"	kind:pred
string_get_unicode_escape	lexer.m	/^:- pred string_get_unicode_escape(int::in, string::in, int::in, char::in,$/;kq|/^\<string_get_unicode_escape\>/;'q;"	kind:pred	file:
string_get_variable	lexer.m	/^:- pred string_get_variable(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_variable\>/;'q;"	kind:pred	file:
string_get_zero	lexer.m	/^:- pred string_get_zero(string::in, int::in, posn::in, token::out,$/;kq|/^\<string_get_zero\>/;'q;"	kind:pred	file:
string_hash	hash_table.m	/^:- pred string_hash(string::in, int::out) is det.$/;kq|/^\<string_hash\>/;'q;"	kind:pred
string_hash	version_hash_table.m	/^:- pred string_hash(string::in, int::out) is det.$/;kq|/^\<string_hash\>/;'q;"	kind:pred
string_if_nonzero	calendar.m	/^:- func string_if_nonzero(int, string) = string.$/;kq|/^\<string_if_nonzero\>/;'q;"	kind:func	file:
string_is_escaped_char	term_io.m	/^:- pred string_is_escaped_char(char, string).$/;kq|/^\<string_is_escaped_char\>/;'q;"	kind:pred
string_literal	parsing_utils.m	/^:- pred string_literal(char::in, src::in, string::out,$/;kq|/^\<string_literal\>/;'q;"	kind:pred
string_literal_2	parsing_utils.m	/^:- pred string_literal_2(src::in, char::in, unit::out,$/;kq|/^\<string_literal_2\>/;'q;"	kind:pred	file:
string_ops	string.m	/^:- func string.string_ops(ops.table, T) = string.$/;kq|/^\<string.string_ops\>/;'q;"	kind:func
string_ops_noncanon	string.m	/^:- pred string.string_ops_noncanon(noncanon_handling, ops.table, T, string).$/;kq|/^\<string.string_ops_noncanon\>/;'q;"	kind:pred
string_read_char	lexer.m	/^:- pred string_read_char(string::in, int::in, char::out,$/;kq|/^\<string_read_char\>/;'q;"	kind:pred	file:
string_set_line_number	lexer.m	/^:- pred string_set_line_number(int::in, posn::in, posn::out) is det.$/;kq|/^\<string_set_line_number\>/;'q;"	kind:pred	file:
string_skip_to_eol	lexer.m	/^:- pred string_skip_to_eol(string::in, int::in, token::out,$/;kq|/^\<string_skip_to_eol\>/;'q;"	kind:pred	file:
string_special	getopt.m	/^    ;       string_special$/;kq|-;/\<string_special\>/;'q;"	kind:cons
string_special	getopt_io.m	/^    ;       string_special$/;kq|-;/\<string_special\>/;'q;"	kind:cons
string_start_quoted_name	lexer.m	/^:- pred string_start_quoted_name(string::in, int::in, char::in,$/;kq|/^\<string_start_quoted_name\>/;'q;"	kind:pred	file:
string_to_doc	string.m	/^:- func string.string_to_doc(string) = pretty_printer.doc.$/;kq|/^\<string.string_to_doc\>/;'q;"	kind:func
string_to_integer	integer.m	/^:- func string_to_integer(list(char)::in) = (integer::out) is semidet.$/;kq|/^\<string_to_integer\>/;'q;"	kind:func	file:
string_to_integer_acc	integer.m	/^:- func string_to_integer_acc(list(char)::in, integer::in) = (integer::out)$/;kq|/^\<string_to_integer_acc\>/;'q;"	kind:func	file:
string_token_context	lexer.m	/^:- type string_token_context == token_context.$/;kq|-;/\<string_token_context\>/;'q;"	kind:type	file:
string_ungetchar	lexer.m	/^:- pred string_ungetchar(string::in, posn::in, posn::out) is det.$/;kq|/^\<string_ungetchar\>/;'q;"	kind:pred	file:
string_writer.arg_priority	stream.string_writer.m	/^:- pred arg_priority(int::out, State::di, State::uo) is det.$/;kq|/^\<arg_priority\>/;'q;"	kind:pred	file:
string_writer.do_write_univ	stream.string_writer.m	/^:- pred do_write_univ(Stream, deconstruct.noncanon_handling, univ,$/;kq|/^\<do_write_univ\>/;'q;"	kind:pred	file:
string_writer.format	stream.string_writer.m	/^:- pred format(Stream::in, string::in, list(string.poly_type)::in,$/;kq|/^\<format\>/;'q;"	kind:pred
string_writer.nl	stream.string_writer.m	/^:- pred nl(Stream::in, State::di, State::uo) is det$/;kq|/^\<nl\>/;'q;"	kind:pred
string_writer.print	stream.string_writer.m	/^:- pred print(Stream, deconstruct.noncanon_handling, T, State, State)$/;kq|/^\<print\>/;'q;"	kind:pred
string_writer.print	stream.string_writer.m	/^:- pred print(Stream::in, T::in, State::di, State::uo) is det$/;kq|/^\<print\>/;'q;"	kind:pred
string_writer.print_cc	stream.string_writer.m	/^:- pred print_cc(Stream::in, T::in, State::di, State::uo) is cc_multi$/;kq|/^\<print_cc\>/;'q;"	kind:pred
string_writer.print_quoted	stream.string_writer.m	/^:- pred print_quoted(Stream, deconstruct.noncanon_handling, T, State, State)$/;kq|/^\<print_quoted\>/;'q;"	kind:pred	file:
string_writer.put_char	stream.string_writer.m	/^:- pred put_char(Stream::in, char::in, State::di, State::uo) is det$/;kq|/^\<put_char\>/;'q;"	kind:pred
string_writer.put_float	stream.string_writer.m	/^:- pred put_float(Stream::in, float::in, State::di, State::uo) is det$/;kq|/^\<put_float\>/;'q;"	kind:pred
string_writer.put_int	stream.string_writer.m	/^:- pred put_int(Stream::in, int::in, State::di, State::uo) is det$/;kq|/^\<put_int\>/;'q;"	kind:pred
string_writer.write	stream.string_writer.m	/^:- pred write(Stream, deconstruct.noncanon_handling, T, State, State) is det$/;kq|/^\<write\>/;'q;"	kind:pred
string_writer.write	stream.string_writer.m	/^:- pred write(Stream::in, T::in, State::di, State::uo) is det$/;kq|/^\<write\>/;'q;"	kind:pred
string_writer.write_arg	stream.string_writer.m	/^:- pred write_arg(Stream, deconstruct.noncanon_handling, univ, State, State)$/;kq|/^\<write_arg\>/;'q;"	kind:pred	file:
string_writer.write_array	stream.string_writer.m	/^:- pred write_array(Stream::in, array(T)::in, State::di, State::uo) is det$/;kq|/^\<write_array\>/;'q;"	kind:pred	file:
string_writer.write_c_pointer	stream.string_writer.m	/^:- pred write_c_pointer(Stream::in, c_pointer::in, State::di, State::uo) is det$/;kq|/^\<write_c_pointer\>/;'q;"	kind:pred	file:
string_writer.write_cc	stream.string_writer.m	/^:- pred write_cc(Stream::in, T::in, State::di, State::uo) is cc_multi$/;kq|/^\<write_cc\>/;'q;"	kind:pred
string_writer.write_list_tail	stream.string_writer.m	/^:- pred write_list_tail(Stream, deconstruct.noncanon_handling, univ,$/;kq|/^\<write_list_tail\>/;'q;"	kind:pred	file:
string_writer.write_term_args	stream.string_writer.m	/^:- pred write_term_args(Stream, deconstruct.noncanon_handling, list(univ),$/;kq|/^\<write_term_args\>/;'q;"	kind:pred	file:
string_writer.write_type_desc	stream.string_writer.m	/^:- pred write_type_desc(Stream::in, type_desc::in, State::di, State::uo) is det$/;kq|/^\<write_type_desc\>/;'q;"	kind:pred	file:
string_writer.write_univ	stream.string_writer.m	/^:- pred write_univ(Stream, deconstruct.noncanon_handling,$/;kq|/^\<write_univ\>/;'q;"	kind:pred
string_writer.write_univ	stream.string_writer.m	/^:- pred write_univ(Stream::in, univ::in, State::di, State::uo) is det$/;kq|/^\<write_univ\>/;'q;"	kind:pred
strip	string.m	/^:- func string.strip(string) = string.$/;kq|/^\<string.strip\>/;'q;"	kind:func
strip_leading_win32_current_drive_root_directory	dir.m	/^:- pred strip_leading_win32_current_drive_root_directory(list(char)::in,$/;kq|/^\<strip_leading_win32_current_drive_root_directory\>/;'q;"	kind:pred	file:
strip_leading_win32_drive_root_directory	dir.m	/^:- pred strip_leading_win32_drive_root_directory(list(char)::in,$/;kq|/^\<strip_leading_win32_drive_root_directory\>/;'q;"	kind:pred	file:
strip_leading_win32_root_directory	dir.m	/^:- pred strip_leading_win32_root_directory(list(char)::in,$/;kq|/^\<strip_leading_win32_root_directory\>/;'q;"	kind:pred	file:
strip_leading_win32_unc_root_directory	dir.m	/^:- pred strip_leading_win32_unc_root_directory(list(char)::in, list(char)::out)$/;kq|/^\<strip_leading_win32_unc_root_directory\>/;'q;"	kind:pred	file:
stylesheet_href	term_to_xml.m	/^                stylesheet_href :: string$/;kq|-;/\<stylesheet_href\>/;'q;"	kind:fld
stylesheet_type	term_to_xml.m	/^                stylesheet_type :: string, % For example "text\/xsl"$/;kq|-;/\<stylesheet_type\>/;'q;"	kind:fld
sub_string_search	string.m	/^:- pred string.sub_string_search(string::in, string::in, int::out) is semidet.$/;kq|/^\<string.sub_string_search\>/;'q;"	kind:pred
sub_string_search_start	string.m	/^:- pred string.sub_string_search_start(string::in, string::in, int::in,$/;kq|/^\<string.sub_string_search_start\>/;'q;"	kind:pred
sub_string_search_start_2	string.m	/^:- pred sub_string_search_start_2(string::in, string::in, int::in, int::in,$/;kq|/^\<sub_string_search_start_2\>/;'q;"	kind:pred	file:
sublist	list.m	/^:- pred list.sublist(list(T)::in, list(T)::in) is semidet.$/;kq|/^\<list.sublist\>/;'q;"	kind:pred
subset	fat_sparse_bitset.m	/^:- pred subset(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
subset	set.m	/^:- pred set.subset(set(T)::in, set(T)::in) is semidet.$/;kq|/^\<set.subset\>/;'q;"	kind:pred
subset	set_bbbtree.m	/^:- pred set_bbbtree.subset(set_bbbtree(T)::in, set_bbbtree(T)::in) is semidet.$/;kq|/^\<set_bbbtree.subset\>/;'q;"	kind:pred
subset	set_ctree234.m	/^:- pred set_ctree234.subset(set_ctree234(T)::in, set_ctree234(T)::in)$/;kq|/^\<set_ctree234.subset\>/;'q;"	kind:pred
subset	set_ordlist.m	/^:- pred set_ordlist.subset(set_ordlist(T)::in, set_ordlist(T)::in) is semidet.$/;kq|/^\<set_ordlist.subset\>/;'q;"	kind:pred
subset	set_tree234.m	/^:- pred set_tree234.subset(set_tree234(T)::in, set_tree234(T)::in) is semidet.$/;kq|/^\<set_tree234.subset\>/;'q;"	kind:pred
subset	set_unordlist.m	/^:- pred set_unordlist.subset(set_unordlist(T)::in, set_unordlist(T)::in)$/;kq|/^\<set_unordlist.subset\>/;'q;"	kind:pred
subset	sparse_bitset.m	/^:- pred subset(sparse_bitset(T)::in, sparse_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
subset	test_bitset.m	/^:- pred subset(test_bitset(T)::in, test_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
subset	tree_bitset.m	/^:- pred subset(tree_bitset(T)::in, tree_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
subset_compare	bag.m	/^:- pred bag.subset_compare(comparison_result::out, bag(T)::in, bag(T)::in)$/;kq|/^\<bag.subset_compare\>/;'q;"	kind:pred
substitute	term.m	/^:- func substitute(term(T), var(T), term(T)) = term(T).$/;kq|/^\<substitute\>/;'q;"	kind:func
substitute	term.m	/^:- pred substitute(term(T)::in, var(T)::in, term(T)::in, term(T)::out)$/;kq|/^\<substitute\>/;'q;"	kind:pred
substitute_corresponding	term.m	/^:- func substitute_corresponding(list(var(T)), list(term(T)),$/;kq|/^\<substitute_corresponding\>/;'q;"	kind:func
substitute_corresponding	term.m	/^:- pred substitute_corresponding(list(var(T))::in, list(term(T))::in,$/;kq|/^\<substitute_corresponding\>/;'q;"	kind:pred
substitute_corresponding_2	term.m	/^:- pred substitute_corresponding_2(list(var(T))::in, list(term(T))::in,$/;kq|/^\<substitute_corresponding_2\>/;'q;"	kind:pred	file:
substitute_corresponding_list	term.m	/^:- func substitute_corresponding_list(list(var(T)),$/;kq|/^\<substitute_corresponding_list\>/;'q;"	kind:func
substitute_corresponding_list	term.m	/^:- pred substitute_corresponding_list(list(var(T))::in,$/;kq|/^\<substitute_corresponding_list\>/;'q;"	kind:pred
substitute_list	term.m	/^:- func substitute_list(list(term(T)), var(T), term(T)) = list(term(T)).$/;kq|/^\<substitute_list\>/;'q;"	kind:func
substitute_list	term.m	/^:- pred substitute_list(list(term(T))::in, var(T)::in, term(T)::in,$/;kq|/^\<substitute_list\>/;'q;"	kind:pred
substitution	term.m	/^:- type substitution    == substitution(generic).$/;kq|-;/\<substitution\>/;'q;"	kind:type
substitution	term.m	/^:- type substitution(T) == map(var(T), term(T)).$/;kq|-;/\<substitution\>/;'q;"	kind:type
substring	string.m	/^:- func string.substring(string::in, int::in, int::in) = (string::uo) is det.$/;kq|/^\<string.substring\>/;'q;"	kind:func
substring	string.m	/^:- pred string.substring(string::in, int::in, int::in, string::uo) is det.$/;kq|/^\<string.substring\>/;'q;"	kind:pred
subtract	bag.m	/^:- func bag.subtract(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.subtract\>/;'q;"	kind:func
subtract	bag.m	/^:- pred bag.subtract(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.subtract\>/;'q;"	kind:pred
subtract_ints_with_borrow	calendar.m	/^:- pred subtract_ints_with_borrow(int::in, int::in, int::in, int::out,$/;kq|/^\<subtract_ints_with_borrow\>/;'q;"	kind:pred	file:
succeeded	exception.m	/^    --->    succeeded(T)$/;kq|-;/\<succeeded\>/;'q;"	kind:cons
successive_integers	list.m	/^:- pred successive_integers(int::in, int::in, list(int)::in, list(int)::out)$/;kq|/^\<successive_integers\>/;'q;"	kind:pred	file:
suffix	string.m	/^:- pred string.suffix(string, string).$/;kq|/^\<string.suffix\>/;'q;"	kind:pred
suffix_2_iiii	string.m	/^:- pred suffix_2_iiii(string::in, string::in, int::in, int::in, int::in)$/;kq|/^\<suffix_2_iiii\>/;'q;"	kind:pred	file:
suffix_2_ioii	string.m	/^:- pred suffix_2_ioii(string::in, string::out, int::in, int::in) is multi.$/;kq|/^\<suffix_2_ioii\>/;'q;"	kind:pred	file:
suffix_length	string.m	/^:- func string.suffix_length(pred(char)::in(pred(in) is semidet), string::in)$/;kq|/^\<string.suffix_length\>/;'q;"	kind:func
suffix_length_2	string.m	/^:- pred suffix_length_2(pred(char)::in(pred(in) is semidet),$/;kq|/^\<suffix_length_2\>/;'q;"	kind:pred	file:
sul	set_unordlist.m	/^    --->    sul(list(T)).$/;kq|-;/\<sul\>/;'q;"	kind:cons	file:
sunday	calendar.m	/^    ;       sunday.$/;kq|-;/\<sunday\>/;'q;"	kind:cons
suo_two	tree234.m	/^:- mode suo_two == out(uniq_two(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<suo_two\>/;'q;"	kind:mode	file:
superclass_from_typeclass_info	private_builtin.m	/^:- pred superclass_from_typeclass_info(typeclass_info::in,$/;kq|/^\<superclass_from_typeclass_info\>/;'q;"	kind:pred
superset	fat_sparse_bitset.m	/^:- pred superset(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in)$/;kq|/^\<superset\>/;'q;"	kind:pred
superset	set.m	/^:- pred set.superset(set(T)::in, set(T)::in) is semidet.$/;kq|/^\<set.superset\>/;'q;"	kind:pred
superset	set_bbbtree.m	/^:- pred set_bbbtree.superset(set_bbbtree(T)::in, set_bbbtree(T)::in)$/;kq|/^\<set_bbbtree.superset\>/;'q;"	kind:pred
superset	set_ctree234.m	/^:- pred set_ctree234.superset(set_ctree234(T)::in, set_ctree234(T)::in)$/;kq|/^\<set_ctree234.superset\>/;'q;"	kind:pred
superset	set_ordlist.m	/^:- pred set_ordlist.superset(set_ordlist(T)::in, set_ordlist(T)::in)$/;kq|/^\<set_ordlist.superset\>/;'q;"	kind:pred
superset	set_tree234.m	/^:- pred set_tree234.superset(set_tree234(T)::in, set_tree234(T)::in)$/;kq|/^\<set_tree234.superset\>/;'q;"	kind:pred
superset	set_unordlist.m	/^:- pred set_unordlist.superset(set_unordlist(T)::in, set_unordlist(T)::in)$/;kq|/^\<set_unordlist.superset\>/;'q;"	kind:pred
superset	sparse_bitset.m	/^:- pred superset(sparse_bitset(T)::in, sparse_bitset(T)::in) is semidet.$/;kq|/^\<superset\>/;'q;"	kind:pred
superset	test_bitset.m	/^:- pred superset(test_bitset(T)::in, test_bitset(T)::in) is semidet.$/;kq|/^\<superset\>/;'q;"	kind:pred
superset	tree_bitset.m	/^:- pred superset(tree_bitset(T)::in, tree_bitset(T)::in) is semidet.$/;kq|/^\<superset\>/;'q;"	kind:pred
supply	random.m	/^:- type random.supply$/;kq|-;/\<supply\>/;'q;"	kind:type	file:
swap_elems	array.m	/^:- func swap_elems(array(T), int, int) = array(T).$/;kq|/^\<swap_elems\>/;'q;"	kind:func	file:
swap_heap_and_solutions_heap	solutions.m	/^:- impure pred swap_heap_and_solutions_heap is det.$/;kq|/^\<swap_heap_and_solutions_heap\>/;'q;"	kind:pred	file:
sym_name	erlang_rtti_implementation.m	/^:- type sym_name$/;kq|-;/\<sym_name\>/;'q;"	kind:type	file:
symbolic_link	io.m	/^    ;       symbolic_link$/;kq|-;/\<symbolic_link\>/;'q;"	kind:cons
system	term_to_xml.m	/^    ;       system(string).                 % URL$/;kq|-;/\<system\>/;'q;"	kind:cons
system_result	io.m	/^:- type io.system_result$/;kq|-;/\<system_result\>/;'q;"	kind:type
table	ops.m	/^:- type ops.table == ops.mercury_op_table.$/;kq|-;/\<table\>/;'q;"	kind:type
table_builtin.loop_active	table_builtin.m	/^    ;       loop_active.$/;kq|-;/\<table_builtin.loop_active\>/;'q;"	kind:cons
table_builtin.loop_inactive	table_builtin.m	/^    --->    loop_inactive$/;kq|-;/\<table_builtin.loop_inactive\>/;'q;"	kind:cons
table_builtin.loop_status	table_builtin.m	/^:- type loop_status$/;kq|-;/\<table_builtin.loop_status\>/;'q;"	kind:type
table_builtin.memo_det_active	table_builtin.m	/^    ;       memo_det_active$/;kq|-;/\<table_builtin.memo_det_active\>/;'q;"	kind:cons
table_builtin.memo_det_status	table_builtin.m	/^:- type memo_det_status$/;kq|-;/\<table_builtin.memo_det_status\>/;'q;"	kind:type
table_builtin.memo_non_active	table_builtin.m	/^    ;       memo_non_active$/;kq|-;/\<table_builtin.memo_non_active\>/;'q;"	kind:cons
table_builtin.memo_non_record	table_builtin.m	/^:- type memo_non_record --->        memo_non_record(c_pointer).$/;kq|-;/\<table_builtin.memo_non_record\>/;'q;"	kind:cons	file:
table_builtin.memo_non_record	table_builtin.m	/^:- type memo_non_record --->        memo_non_record(c_pointer).$/;kq|-;/\<table_builtin.memo_non_record\>/;'q;"	kind:type	file:
table_builtin.memo_non_status	table_builtin.m	/^:- type memo_non_status$/;kq|-;/\<table_builtin.memo_non_status\>/;'q;"	kind:type
table_builtin.memo_semi_active	table_builtin.m	/^    ;       memo_semi_active$/;kq|-;/\<table_builtin.memo_semi_active\>/;'q;"	kind:cons
table_builtin.memo_semi_failed	table_builtin.m	/^    ;       memo_semi_failed.$/;kq|-;/\<table_builtin.memo_semi_failed\>/;'q;"	kind:cons
table_builtin.memo_semi_status	table_builtin.m	/^:- type memo_semi_status$/;kq|-;/\<table_builtin.memo_semi_status\>/;'q;"	kind:type
table_builtin.ml_answer_block	table_builtin.m	/^:- type ml_answer_block --->    ml_answer_block(c_pointer).$/;kq|-;/\<table_builtin.ml_answer_block\>/;'q;"	kind:cons	file:
table_builtin.ml_answer_block	table_builtin.m	/^:- type ml_answer_block --->    ml_answer_block(c_pointer).$/;kq|-;/\<table_builtin.ml_answer_block\>/;'q;"	kind:type	file:
table_builtin.ml_answer_list	table_builtin.m	/^:- type ml_answer_list ---> ml_answer_list(c_pointer).$/;kq|-;/\<table_builtin.ml_answer_list\>/;'q;"	kind:cons	file:
table_builtin.ml_answer_list	table_builtin.m	/^:- type ml_answer_list ---> ml_answer_list(c_pointer).$/;kq|-;/\<table_builtin.ml_answer_list\>/;'q;"	kind:type	file:
table_builtin.ml_consumer	table_builtin.m	/^:- type ml_consumer --->    ml_consumer(c_pointer).$/;kq|-;/\<table_builtin.ml_consumer\>/;'q;"	kind:cons	file:
table_builtin.ml_consumer	table_builtin.m	/^:- type ml_consumer --->    ml_consumer(c_pointer).$/;kq|-;/\<table_builtin.ml_consumer\>/;'q;"	kind:type	file:
table_builtin.ml_generator	table_builtin.m	/^:- type ml_generator --->   ml_generator(c_pointer).$/;kq|-;/\<table_builtin.ml_generator\>/;'q;"	kind:cons	file:
table_builtin.ml_generator	table_builtin.m	/^:- type ml_generator --->   ml_generator(c_pointer).$/;kq|-;/\<table_builtin.ml_generator\>/;'q;"	kind:type	file:
table_builtin.ml_subgoal	table_builtin.m	/^:- type ml_subgoal --->     ml_subgoal(c_pointer).$/;kq|-;/\<table_builtin.ml_subgoal\>/;'q;"	kind:cons	file:
table_builtin.ml_subgoal	table_builtin.m	/^:- type ml_subgoal --->     ml_subgoal(c_pointer).$/;kq|-;/\<table_builtin.ml_subgoal\>/;'q;"	kind:type	file:
table_builtin.ml_trie_node	table_builtin.m	/^    --->   ml_trie_node(c_pointer).$/;kq|-;/\<table_builtin.ml_trie_node\>/;'q;"	kind:cons	file:
table_builtin.ml_trie_node	table_builtin.m	/^:- type ml_trie_node$/;kq|-;/\<table_builtin.ml_trie_node\>/;'q;"	kind:type	file:
table_builtin.mm_active	table_builtin.m	/^    ;       mm_active$/;kq|-;/\<table_builtin.mm_active\>/;'q;"	kind:cons
table_builtin.mm_complete	table_builtin.m	/^    ;       mm_complete.$/;kq|-;/\<table_builtin.mm_complete\>/;'q;"	kind:cons
table_builtin.mm_inactive	table_builtin.m	/^    --->    mm_inactive$/;kq|-;/\<table_builtin.mm_inactive\>/;'q;"	kind:cons
table_builtin.mm_status	table_builtin.m	/^:- type mm_status$/;kq|-;/\<table_builtin.mm_status\>/;'q;"	kind:type
table_builtin.table_error	table_builtin.m	/^:- pred table_error(string::in) is erroneous.$/;kq|/^\<table_error\>/;'q;"	kind:pred
table_builtin.table_loop_setup	table_builtin.m	/^:- impure pred table_loop_setup(ml_trie_node::in, loop_status::out) is det.$/;kq|/^\<table_loop_setup\>/;'q;"	kind:pred
table_builtin.table_mm_setup	table_builtin.m	/^:- impure pred table_mm_setup(ml_trie_node::in, ml_subgoal::out,$/;kq|/^\<table_mm_setup\>/;'q;"	kind:pred
table_error	table_builtin.m	/^:- pred table_error(string::in) is erroneous.$/;kq|/^\<table_error\>/;'q;"	kind:pred
table_io_copy_io_state	table_builtin.m	/^:- pred table_io_copy_io_state(io.state::di, io.state::uo) is det.$/;kq|/^\<table_io_copy_io_state\>/;'q;"	kind:pred
table_io_has_occurred	table_builtin.m	/^:- impure pred table_io_has_occurred(ml_trie_node::in) is semidet.$/;kq|/^\<table_io_has_occurred\>/;'q;"	kind:pred
table_io_in_range	table_builtin.m	/^:- impure pred table_io_in_range(ml_trie_node::out, int::out, int::out)$/;kq|/^\<table_io_in_range\>/;'q;"	kind:pred
table_io_left_bracket_unitized_goal	table_builtin.m	/^:- impure pred table_io_left_bracket_unitized_goal(int::out) is det.$/;kq|/^\<table_io_left_bracket_unitized_goal\>/;'q;"	kind:pred
table_io_right_bracket_unitized_goal	table_builtin.m	/^:- impure pred table_io_right_bracket_unitized_goal(int::in) is det.$/;kq|/^\<table_io_right_bracket_unitized_goal\>/;'q;"	kind:pred
table_lookup_insert_char	table_builtin.m	/^:- impure pred table_lookup_insert_char(ml_trie_node::in, character::in,$/;kq|/^\<table_lookup_insert_char\>/;'q;"	kind:pred
table_lookup_insert_enum	table_builtin.m	/^:- impure pred table_lookup_insert_enum(ml_trie_node::in, int::in, T::in,$/;kq|/^\<table_lookup_insert_enum\>/;'q;"	kind:pred
table_lookup_insert_float	table_builtin.m	/^:- impure pred table_lookup_insert_float(ml_trie_node::in, float::in,$/;kq|/^\<table_lookup_insert_float\>/;'q;"	kind:pred
table_lookup_insert_foreign_enum	table_builtin.m	/^:- impure pred table_lookup_insert_foreign_enum(ml_trie_node::in, T::in,$/;kq|/^\<table_lookup_insert_foreign_enum\>/;'q;"	kind:pred
table_lookup_insert_gen	table_builtin.m	/^:- impure pred table_lookup_insert_gen(ml_trie_node::in, T::in,$/;kq|/^\<table_lookup_insert_gen\>/;'q;"	kind:pred
table_lookup_insert_gen_addr	table_builtin.m	/^:- impure pred table_lookup_insert_gen_addr(ml_trie_node::in, T::in,$/;kq|/^\<table_lookup_insert_gen_addr\>/;'q;"	kind:pred
table_lookup_insert_gen_poly	table_builtin.m	/^:- impure pred table_lookup_insert_gen_poly(ml_trie_node::in, T::in,$/;kq|/^\<table_lookup_insert_gen_poly\>/;'q;"	kind:pred
table_lookup_insert_gen_poly_addr	table_builtin.m	/^:- impure pred table_lookup_insert_gen_poly_addr(ml_trie_node::in, T::in,$/;kq|/^\<table_lookup_insert_gen_poly_addr\>/;'q;"	kind:pred
table_lookup_insert_int	table_builtin.m	/^:- impure pred table_lookup_insert_int(ml_trie_node::in, int::in,$/;kq|/^\<table_lookup_insert_int\>/;'q;"	kind:pred
table_lookup_insert_start_int	table_builtin.m	/^:- impure pred table_lookup_insert_start_int(ml_trie_node::in, int::in,$/;kq|/^\<table_lookup_insert_start_int\>/;'q;"	kind:pred
table_lookup_insert_string	table_builtin.m	/^:- impure pred table_lookup_insert_string(ml_trie_node::in, string::in,$/;kq|/^\<table_lookup_insert_string\>/;'q;"	kind:pred
table_lookup_insert_typeclassinfo	table_builtin.m	/^:- impure pred table_lookup_insert_typeclassinfo(ml_trie_node::in,$/;kq|/^\<table_lookup_insert_typeclassinfo\>/;'q;"	kind:pred
table_lookup_insert_typeinfo	table_builtin.m	/^:- impure pred table_lookup_insert_typeinfo(ml_trie_node::in,$/;kq|/^\<table_lookup_insert_typeinfo\>/;'q;"	kind:pred
table_loop_mark_as_active_and_fail	table_builtin.m	/^:- impure pred table_loop_mark_as_active_and_fail(ml_trie_node::in) is failure.$/;kq|/^\<table_loop_mark_as_active_and_fail\>/;'q;"	kind:pred
table_loop_mark_as_inactive	table_builtin.m	/^:- impure pred table_loop_mark_as_inactive(ml_trie_node::in) is det.$/;kq|/^\<table_loop_mark_as_inactive\>/;'q;"	kind:pred
table_loop_mark_as_inactive_and_fail	table_builtin.m	/^:- impure pred table_loop_mark_as_inactive_and_fail(ml_trie_node::in)$/;kq|/^\<table_loop_mark_as_inactive_and_fail\>/;'q;"	kind:pred
table_loop_setup	table_builtin.m	/^:- impure pred table_loop_setup(ml_trie_node::in, loop_status::out) is det.$/;kq|/^\<table_loop_setup\>/;'q;"	kind:pred
table_loop_setup_shortcut	table_builtin.m	/^:- impure pred table_loop_setup_shortcut(ml_trie_node::in, ml_trie_node::out,$/;kq|/^\<table_loop_setup_shortcut\>/;'q;"	kind:pred
table_memo_create_answer_block	table_builtin.m	/^:- impure pred table_memo_create_answer_block(ml_trie_node::in, int::in,$/;kq|/^\<table_memo_create_answer_block\>/;'q;"	kind:pred
table_memo_det_setup	table_builtin.m	/^:- impure pred table_memo_det_setup(ml_trie_node::in, memo_det_status::out)$/;kq|/^\<table_memo_det_setup\>/;'q;"	kind:pred
table_memo_det_setup_shortcut	table_builtin.m	/^:- impure pred table_memo_det_setup_shortcut(ml_trie_node::in,$/;kq|/^\<table_memo_det_setup_shortcut\>/;'q;"	kind:pred
table_memo_fill_answer_block_shortcut	table_builtin.m	/^:- impure pred table_memo_fill_answer_block_shortcut(ml_trie_node::in) is det.$/;kq|/^\<table_memo_fill_answer_block_shortcut\>/;'q;"	kind:pred
table_memo_get_answer_block	table_builtin.m	/^:- semipure pred table_memo_get_answer_block(ml_trie_node::in,$/;kq|/^\<table_memo_get_answer_block\>/;'q;"	kind:pred
table_memo_get_answer_block_shortcut	table_builtin.m	/^:- semipure pred table_memo_get_answer_block_shortcut(ml_trie_node::in) is det.$/;kq|/^\<table_memo_get_answer_block_shortcut\>/;'q;"	kind:pred
table_memo_mark_as_active_and_fail	table_builtin.m	/^:- impure pred table_memo_mark_as_active_and_fail(memo_non_record::in)$/;kq|/^\<table_memo_mark_as_active_and_fail\>/;'q;"	kind:pred
table_memo_mark_as_complete_and_fail	table_builtin.m	/^:- impure pred table_memo_mark_as_complete_and_fail(memo_non_record::in)$/;kq|/^\<table_memo_mark_as_complete_and_fail\>/;'q;"	kind:pred
table_memo_mark_as_failed	table_builtin.m	/^:- impure pred table_memo_mark_as_failed(ml_trie_node::in) is failure.$/;kq|/^\<table_memo_mark_as_failed\>/;'q;"	kind:pred
table_memo_mark_as_incomplete	table_builtin.m	/^:- impure pred table_memo_mark_as_incomplete(memo_non_record::in) is det.$/;kq|/^\<table_memo_mark_as_incomplete\>/;'q;"	kind:pred
table_memo_mark_as_succeeded	table_builtin.m	/^:- impure pred table_memo_mark_as_succeeded(ml_trie_node::in) is det.$/;kq|/^\<table_memo_mark_as_succeeded\>/;'q;"	kind:pred
table_memo_non_answer_is_not_duplicate	table_builtin.m	/^:- impure pred table_memo_non_answer_is_not_duplicate(ml_trie_node::in)$/;kq|/^\<table_memo_non_answer_is_not_duplicate\>/;'q;"	kind:pred
table_memo_non_answer_is_not_duplicate_shortcut	table_builtin.m	/^:- impure pred table_memo_non_answer_is_not_duplicate_shortcut($/;kq|/^\<table_memo_non_answer_is_not_duplicate_shortcut\>/;'q;"	kind:pred
table_memo_non_create_answer_block_shortcut	table_builtin.m	/^:- impure pred table_memo_non_create_answer_block_shortcut(memo_non_record::in)$/;kq|/^\<table_memo_non_create_answer_block_shortcut\>/;'q;"	kind:pred
table_memo_non_get_answer_table	table_builtin.m	/^:- semipure pred table_memo_non_get_answer_table(memo_non_record::in,$/;kq|/^\<table_memo_non_get_answer_table\>/;'q;"	kind:pred
table_memo_non_return_all_shortcut	table_builtin.m	/^:- semipure pred table_memo_non_return_all_shortcut(memo_non_record::in)$/;kq|/^\<table_memo_non_return_all_shortcut\>/;'q;"	kind:pred
table_memo_non_setup	table_builtin.m	/^:- impure pred table_memo_non_setup(ml_trie_node::in,$/;kq|/^\<table_memo_non_setup\>/;'q;"	kind:pred
table_memo_return_all_answers_multi	table_builtin.m	/^:- semipure pred table_memo_return_all_answers_multi(memo_non_record::in,$/;kq|/^\<table_memo_return_all_answers_multi\>/;'q;"	kind:pred
table_memo_return_all_answers_nondet	table_builtin.m	/^:- semipure pred table_memo_return_all_answers_nondet(memo_non_record::in,$/;kq|/^\<table_memo_return_all_answers_nondet\>/;'q;"	kind:pred
table_memo_semi_setup	table_builtin.m	/^:- impure pred table_memo_semi_setup(ml_trie_node::in, memo_semi_status::out)$/;kq|/^\<table_memo_semi_setup\>/;'q;"	kind:pred
table_memo_semi_setup_shortcut	table_builtin.m	/^:- impure pred table_memo_semi_setup_shortcut(ml_trie_node::in,$/;kq|/^\<table_memo_semi_setup_shortcut\>/;'q;"	kind:pred
table_mm_answer_is_not_duplicate	table_builtin.m	/^:- impure pred table_mm_answer_is_not_duplicate(ml_trie_node::in) is semidet.$/;kq|/^\<table_mm_answer_is_not_duplicate\>/;'q;"	kind:pred
table_mm_answer_is_not_duplicate_shortcut	table_builtin.m	/^:- impure pred table_mm_answer_is_not_duplicate_shortcut(ml_subgoal::in)$/;kq|/^\<table_mm_answer_is_not_duplicate_shortcut\>/;'q;"	kind:pred
table_mm_completion	table_builtin.m	/^:- impure pred table_mm_completion(ml_subgoal::in) is det.$/;kq|/^\<table_mm_completion\>/;'q;"	kind:pred
table_mm_create_answer_block	table_builtin.m	/^:- impure pred table_mm_create_answer_block(ml_subgoal::in, int::in,$/;kq|/^\<table_mm_create_answer_block\>/;'q;"	kind:pred
table_mm_fill_answer_block_shortcut	table_builtin.m	/^:- impure pred table_mm_fill_answer_block_shortcut(ml_subgoal::in) is det.$/;kq|/^\<table_mm_fill_answer_block_shortcut\>/;'q;"	kind:pred
table_mm_get_answer_table	table_builtin.m	/^:- semipure pred table_mm_get_answer_table(ml_subgoal::in, ml_trie_node::out)$/;kq|/^\<table_mm_get_answer_table\>/;'q;"	kind:pred
table_mm_return_all_multi	table_builtin.m	/^:- semipure pred table_mm_return_all_multi(ml_subgoal::in,$/;kq|/^\<table_mm_return_all_multi\>/;'q;"	kind:pred
table_mm_return_all_nondet	table_builtin.m	/^:- semipure pred table_mm_return_all_nondet(ml_subgoal::in,$/;kq|/^\<table_mm_return_all_nondet\>/;'q;"	kind:pred
table_mm_return_all_shortcut	table_builtin.m	/^:- semipure pred table_mm_return_all_shortcut(ml_answer_block::in) is det.$/;kq|/^\<table_mm_return_all_shortcut\>/;'q;"	kind:pred
table_mm_setup	table_builtin.m	/^:- impure pred table_mm_setup(ml_trie_node::in, ml_subgoal::out,$/;kq|/^\<table_mm_setup\>/;'q;"	kind:pred
table_mm_suspend_consumer	table_builtin.m	/^:- impure pred table_mm_suspend_consumer(ml_subgoal::in, ml_answer_block::out)$/;kq|/^\<table_mm_suspend_consumer\>/;'q;"	kind:pred
table_mmos_answer_is_not_duplicate	table_builtin.m	/^:- impure pred table_mmos_answer_is_not_duplicate(ml_trie_node::in) is semidet.$/;kq|/^\<table_mmos_answer_is_not_duplicate\>/;'q;"	kind:pred
table_mmos_answer_is_not_duplicate_shortcut	table_builtin.m	/^:- impure pred table_mmos_answer_is_not_duplicate_shortcut(ml_generator::in)$/;kq|/^\<table_mmos_answer_is_not_duplicate_shortcut\>/;'q;"	kind:pred
table_mmos_completion	table_builtin.m	/^:- impure pred table_mmos_completion(ml_generator::in) is failure.$/;kq|/^\<table_mmos_completion\>/;'q;"	kind:pred
table_mmos_consume_next_answer_multi	table_builtin.m	/^:- impure pred table_mmos_consume_next_answer_multi(ml_consumer::in,$/;kq|/^\<table_mmos_consume_next_answer_multi\>/;'q;"	kind:pred
table_mmos_consume_next_answer_nondet	table_builtin.m	/^:- impure pred table_mmos_consume_next_answer_nondet(ml_consumer::in,$/;kq|/^\<table_mmos_consume_next_answer_nondet\>/;'q;"	kind:pred
table_mmos_create_answer_block	table_builtin.m	/^:- impure pred table_mmos_create_answer_block(ml_generator::in,$/;kq|/^\<table_mmos_create_answer_block\>/;'q;"	kind:pred
table_mmos_pickup_inputs	table_builtin.m	/^:- impure pred table_mmos_pickup_inputs(ml_generator::out) is det.$/;kq|/^\<table_mmos_pickup_inputs\>/;'q;"	kind:pred
table_mmos_restore_answers	table_builtin.m	/^:- semipure pred table_mmos_restore_answers(ml_answer_block::in) is det.$/;kq|/^\<table_mmos_restore_answers\>/;'q;"	kind:pred
table_mmos_return_answer	table_builtin.m	/^:- impure pred table_mmos_return_answer(ml_generator::in, ml_answer_block::in)$/;kq|/^\<table_mmos_return_answer\>/;'q;"	kind:pred
table_mmos_save_inputs	table_builtin.m	/^:- impure pred table_mmos_save_inputs is det.$/;kq|/^\<table_mmos_save_inputs\>/;'q;"	kind:pred
table_mmos_setup_consumer	table_builtin.m	/^:- impure pred table_mmos_setup_consumer(ml_trie_node::in, c_pointer::in,$/;kq|/^\<table_mmos_setup_consumer\>/;'q;"	kind:pred
table_report_statistics	table_builtin.m	/^:- impure pred table_report_statistics is det.$/;kq|/^\<table_report_statistics\>/;'q;"	kind:pred
table_restore_any_answer	table_builtin.m	/^:- semipure pred table_restore_any_answer(ml_answer_block::in, int::in, T::out)$/;kq|/^\<table_restore_any_answer\>/;'q;"	kind:pred
table_restore_char_answer	table_builtin.m	/^:- semipure pred table_restore_char_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_restore_char_answer\>/;'q;"	kind:pred
table_restore_float_answer	table_builtin.m	/^:- semipure pred table_restore_float_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_restore_float_answer\>/;'q;"	kind:pred
table_restore_int_answer	table_builtin.m	/^:- semipure pred table_restore_int_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_restore_int_answer\>/;'q;"	kind:pred
table_restore_io_state_answer	table_builtin.m	/^:- semipure pred table_restore_io_state_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_restore_io_state_answer\>/;'q;"	kind:pred
table_restore_string_answer	table_builtin.m	/^:- semipure pred table_restore_string_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_restore_string_answer\>/;'q;"	kind:pred
table_save_any_answer	table_builtin.m	/^:- impure pred table_save_any_answer(ml_answer_block::in, int::in, T::in)$/;kq|/^\<table_save_any_answer\>/;'q;"	kind:pred
table_save_char_answer	table_builtin.m	/^:- impure pred table_save_char_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_save_char_answer\>/;'q;"	kind:pred
table_save_float_answer	table_builtin.m	/^:- impure pred table_save_float_answer(ml_answer_block::in, int::in, float::in)$/;kq|/^\<table_save_float_answer\>/;'q;"	kind:pred
table_save_int_answer	table_builtin.m	/^:- impure pred table_save_int_answer(ml_answer_block::in, int::in, int::in)$/;kq|/^\<table_save_int_answer\>/;'q;"	kind:pred
table_save_io_state_answer	table_builtin.m	/^:- impure pred table_save_io_state_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_save_io_state_answer\>/;'q;"	kind:pred
table_save_string_answer	table_builtin.m	/^:- impure pred table_save_string_answer(ml_answer_block::in, int::in,$/;kq|/^\<table_save_string_answer\>/;'q;"	kind:pred
table_statistics.current_stats	table_statistics.m	/^                current_stats               :: table_stats,$/;kq|-;/\<table_statistics.current_stats\>/;'q;"	kind:fld
table_statistics.num_lookups	table_statistics.m	/^                num_lookups                 :: int,$/;kq|-;/\<table_statistics.num_lookups\>/;'q;"	kind:fld
table_statistics.step_stats_du	table_statistics.m	/^    ;       step_stats_du($/;kq|-;/\<table_statistics.step_stats_du\>/;'q;"	kind:cons
table_statistics.table_stats	table_statistics.m	/^    --->    table_stats($/;kq|-;/\<table_statistics.table_stats\>/;'q;"	kind:cons
table_statistics.table_stats	table_statistics.m	/^:- type table_stats$/;kq|-;/\<table_statistics.table_stats\>/;'q;"	kind:type
table_stats	table_statistics.m	/^    --->    table_stats($/;kq|-;/\<table_stats\>/;'q;"	kind:cons
table_stats	table_statistics.m	/^:- type table_stats$/;kq|-;/\<table_stats\>/;'q;"	kind:type
table_stats_curr_prev	table_statistics.m	/^    --->    table_stats_curr_prev($/;kq|-;/\<table_stats_curr_prev\>/;'q;"	kind:cons
table_stats_curr_prev	table_statistics.m	/^:- type table_stats_curr_prev$/;kq|-;/\<table_stats_curr_prev\>/;'q;"	kind:type
table_stats_difference	table_statistics.m	/^:- func table_stats_difference(table_stats, table_stats) = table_stats.$/;kq|/^\<table_stats_difference\>/;'q;"	kind:func
table_step_char	table_statistics.m	/^    ;       table_step_char$/;kq|-;/\<table_step_char\>/;'q;"	kind:cons
table_step_detail	table_statistics.m	/^                table_step_detail                   :: table_step_stat_details$/;kq|-;/\<table_step_detail\>/;'q;"	kind:fld
table_step_dummy	table_statistics.m	/^    --->    table_step_dummy$/;kq|-;/\<table_step_dummy\>/;'q;"	kind:cons
table_step_enum	table_statistics.m	/^    ;       table_step_enum$/;kq|-;/\<table_step_enum\>/;'q;"	kind:cons
table_step_float	table_statistics.m	/^    ;       table_step_float$/;kq|-;/\<table_step_float\>/;'q;"	kind:cons
table_step_foreign_enum	table_statistics.m	/^    ;       table_step_foreign_enum$/;kq|-;/\<table_step_foreign_enum\>/;'q;"	kind:cons
table_step_general	table_statistics.m	/^    ;       table_step_general$/;kq|-;/\<table_step_general\>/;'q;"	kind:cons
table_step_general_addr	table_statistics.m	/^    ;       table_step_general_addr$/;kq|-;/\<table_step_general_addr\>/;'q;"	kind:cons
table_step_general_poly	table_statistics.m	/^    ;       table_step_general_poly$/;kq|-;/\<table_step_general_poly\>/;'q;"	kind:cons
table_step_general_poly_addr	table_statistics.m	/^    ;       table_step_general_poly_addr$/;kq|-;/\<table_step_general_poly_addr\>/;'q;"	kind:cons
table_step_int	table_statistics.m	/^    ;       table_step_int$/;kq|-;/\<table_step_int\>/;'q;"	kind:cons
table_step_kind	table_statistics.m	/^:- type table_step_kind$/;kq|-;/\<table_step_kind\>/;'q;"	kind:type
table_step_num_lookups	table_statistics.m	/^                table_step_num_lookups              :: int,$/;kq|-;/\<table_step_num_lookups\>/;'q;"	kind:fld
table_step_num_lookups_is_dupl	table_statistics.m	/^                table_step_num_lookups_is_dupl      :: int,$/;kq|-;/\<table_step_num_lookups_is_dupl\>/;'q;"	kind:fld
table_step_promise_implied	table_statistics.m	/^    ;       table_step_promise_implied.$/;kq|-;/\<table_step_promise_implied\>/;'q;"	kind:cons
table_step_stat_details	table_statistics.m	/^:- type table_step_stat_details$/;kq|-;/\<table_step_stat_details\>/;'q;"	kind:type
table_step_stats	table_statistics.m	/^    --->    table_step_stats($/;kq|-;/\<table_step_stats\>/;'q;"	kind:cons
table_step_stats	table_statistics.m	/^:- type table_step_stats$/;kq|-;/\<table_step_stats\>/;'q;"	kind:type
table_step_stats_detail_diff	table_statistics.m	/^:- pred table_step_stats_detail_diff(table_step_stat_details::in,$/;kq|/^\<table_step_stats_detail_diff\>/;'q;"	kind:pred	file:
table_step_stats_diff	table_statistics.m	/^:- func table_step_stats_diff(list(table_step_stats), list(table_step_stats))$/;kq|/^\<table_step_stats_diff\>/;'q;"	kind:func	file:
table_step_string	table_statistics.m	/^    ;       table_step_string$/;kq|-;/\<table_step_string\>/;'q;"	kind:cons
table_step_typeclassinfo	table_statistics.m	/^    ;       table_step_typeclassinfo$/;kq|-;/\<table_step_typeclassinfo\>/;'q;"	kind:cons
table_step_typeinfo	table_statistics.m	/^    ;       table_step_typeinfo$/;kq|-;/\<table_step_typeinfo\>/;'q;"	kind:cons
table_step_var_name	table_statistics.m	/^                table_step_var_name                 :: string,$/;kq|-;/\<table_step_var_name\>/;'q;"	kind:fld
tail	integer.m	/^:- func tail(integer) = integer.$/;kq|/^\<tail\>/;'q;"	kind:func	file:
tail	list.m	/^:- func list.tail(list(T)) = list(T) is semidet.$/;kq|/^\<list.tail\>/;'q;"	kind:func
take	list.m	/^:- pred list.take(int::in, list(T)::in, list(T)::out) is semidet.$/;kq|/^\<list.take\>/;'q;"	kind:pred
take	thread.channel.m	/^:- pred channel.take(channel(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<channel.take\>/;'q;"	kind:pred
take	thread.mvar.m	/^:- pred mvar.take(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.take\>/;'q;"	kind:pred
take_upto	list.m	/^:- func list.take_upto(int, list(T)) = list(T).$/;kq|/^\<list.take_upto\>/;'q;"	kind:func
take_upto	list.m	/^:- pred list.take_upto(int::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.take_upto\>/;'q;"	kind:pred
takewhile	list.m	/^:- pred list.takewhile(pred(T)::in(pred(in) is semidet), list(T)::in,$/;kq|/^\<list.takewhile\>/;'q;"	kind:pred
tan	math.m	/^:- func math.tan(float) = float.$/;kq|/^\<math.tan\>/;'q;"	kind:func
tanh	math.m	/^:- func math.tanh(float) = float.$/;kq|/^\<math.tanh\>/;'q;"	kind:func
tc	digraph.m	/^:- func digraph.tc(digraph(T)) = digraph(T).$/;kq|/^\<digraph.tc\>/;'q;"	kind:func
tc	digraph.m	/^:- pred digraph.tc(digraph(T)::in, digraph(T)::out) is det.$/;kq|/^\<digraph.tc\>/;'q;"	kind:pred
tc_constraint	erlang_rtti_implementation.m	/^    --->    tc_constraint($/;kq|-;/\<tc_constraint\>/;'q;"	kind:cons	file:
tc_constraint	erlang_rtti_implementation.m	/^:- type tc_constraint$/;kq|-;/\<tc_constraint\>/;'q;"	kind:type	file:
tc_name	erlang_rtti_implementation.m	/^    --->    tc_name($/;kq|-;/\<tc_name\>/;'q;"	kind:cons	file:
tc_name	erlang_rtti_implementation.m	/^:- type tc_name$/;kq|-;/\<tc_name\>/;'q;"	kind:type	file:
tc_type	erlang_rtti_implementation.m	/^:- type tc_type == maybe_pseudo_type_info.$/;kq|-;/\<tc_type\>/;'q;"	kind:type	file:
tcc_class_name	erlang_rtti_implementation.m	/^                tcc_class_name          :: tc_name,$/;kq|-;/\<tcc_class_name\>/;'q;"	kind:fld	file:
tcc_types	erlang_rtti_implementation.m	/^                tcc_types               :: list(tc_type)$/;kq|-;/\<tcc_types\>/;'q;"	kind:fld	file:
tcn_arity	erlang_rtti_implementation.m	/^                tcn_arity               :: int$/;kq|-;/\<tcn_arity\>/;'q;"	kind:fld	file:
tcn_module	erlang_rtti_implementation.m	/^                tcn_module              :: module_name,$/;kq|-;/\<tcn_module\>/;'q;"	kind:fld	file:
tcn_name	erlang_rtti_implementation.m	/^                tcn_name                :: list(char),$/;kq|-;/\<tcn_name\>/;'q;"	kind:fld	file:
tcr_array	rtti_implementation.m	/^    ;       tcr_array$/;kq|-;/\<tcr_array\>/;'q;"	kind:cons	file:
tcr_base_typeclass_info	rtti_implementation.m	/^    ;       tcr_base_typeclass_info$/;kq|-;/\<tcr_base_typeclass_info\>/;'q;"	kind:cons	file:
tcr_bitmap	rtti_implementation.m	/^    ;       tcr_bitmap$/;kq|-;/\<tcr_bitmap\>/;'q;"	kind:cons	file:
tcr_c_pointer	rtti_implementation.m	/^    ;       tcr_c_pointer$/;kq|-;/\<tcr_c_pointer\>/;'q;"	kind:cons	file:
tcr_char	rtti_implementation.m	/^    ;       tcr_char$/;kq|-;/\<tcr_char\>/;'q;"	kind:cons	file:
tcr_curfr	rtti_implementation.m	/^    ;       tcr_curfr$/;kq|-;/\<tcr_curfr\>/;'q;"	kind:cons	file:
tcr_du	rtti_implementation.m	/^    ;       tcr_du$/;kq|-;/\<tcr_du\>/;'q;"	kind:cons	file:
tcr_du_usereq	rtti_implementation.m	/^    ;       tcr_du_usereq$/;kq|-;/\<tcr_du_usereq\>/;'q;"	kind:cons	file:
tcr_dummy	rtti_implementation.m	/^    ;       tcr_dummy$/;kq|-;/\<tcr_dummy\>/;'q;"	kind:cons	file:
tcr_enum	rtti_implementation.m	/^    --->    tcr_enum$/;kq|-;/\<tcr_enum\>/;'q;"	kind:cons	file:
tcr_enum_usereq	rtti_implementation.m	/^    ;       tcr_enum_usereq$/;kq|-;/\<tcr_enum_usereq\>/;'q;"	kind:cons	file:
tcr_equiv	rtti_implementation.m	/^    ;       tcr_equiv$/;kq|-;/\<tcr_equiv\>/;'q;"	kind:cons	file:
tcr_equiv_ground	rtti_implementation.m	/^    ;       tcr_equiv_ground$/;kq|-;/\<tcr_equiv_ground\>/;'q;"	kind:cons	file:
tcr_float	rtti_implementation.m	/^    ;       tcr_float$/;kq|-;/\<tcr_float\>/;'q;"	kind:cons	file:
tcr_foreign	rtti_implementation.m	/^    ;       tcr_foreign$/;kq|-;/\<tcr_foreign\>/;'q;"	kind:cons	file:
tcr_foreign_enum	rtti_implementation.m	/^    ;       tcr_foreign_enum$/;kq|-;/\<tcr_foreign_enum\>/;'q;"	kind:cons	file:
tcr_foreign_enum_usereq	rtti_implementation.m	/^    ;       tcr_foreign_enum_usereq$/;kq|-;/\<tcr_foreign_enum_usereq\>/;'q;"	kind:cons	file:
tcr_func	rtti_implementation.m	/^    ;       tcr_func$/;kq|-;/\<tcr_func\>/;'q;"	kind:cons	file:
tcr_hp	rtti_implementation.m	/^    ;       tcr_hp$/;kq|-;/\<tcr_hp\>/;'q;"	kind:cons	file:
tcr_int	rtti_implementation.m	/^    ;       tcr_int$/;kq|-;/\<tcr_int\>/;'q;"	kind:cons	file:
tcr_maxfr	rtti_implementation.m	/^    ;       tcr_maxfr$/;kq|-;/\<tcr_maxfr\>/;'q;"	kind:cons	file:
tcr_notag	rtti_implementation.m	/^    ;       tcr_notag$/;kq|-;/\<tcr_notag\>/;'q;"	kind:cons	file:
tcr_notag_ground	rtti_implementation.m	/^    ;       tcr_notag_ground$/;kq|-;/\<tcr_notag_ground\>/;'q;"	kind:cons	file:
tcr_notag_ground_usereq	rtti_implementation.m	/^    ;       tcr_notag_ground_usereq$/;kq|-;/\<tcr_notag_ground_usereq\>/;'q;"	kind:cons	file:
tcr_notag_usereq	rtti_implementation.m	/^    ;       tcr_notag_usereq$/;kq|-;/\<tcr_notag_usereq\>/;'q;"	kind:cons	file:
tcr_pred	rtti_implementation.m	/^    ;       tcr_pred$/;kq|-;/\<tcr_pred\>/;'q;"	kind:cons	file:
tcr_pseudo_type_desc	rtti_implementation.m	/^    ;       tcr_pseudo_type_desc$/;kq|-;/\<tcr_pseudo_type_desc\>/;'q;"	kind:cons	file:
tcr_redofr	rtti_implementation.m	/^    ;       tcr_redofr$/;kq|-;/\<tcr_redofr\>/;'q;"	kind:cons	file:
tcr_redoip	rtti_implementation.m	/^    ;       tcr_redoip$/;kq|-;/\<tcr_redoip\>/;'q;"	kind:cons	file:
tcr_reference	rtti_implementation.m	/^    ;       tcr_reference$/;kq|-;/\<tcr_reference\>/;'q;"	kind:cons	file:
tcr_reserved_addr	rtti_implementation.m	/^    ;       tcr_reserved_addr$/;kq|-;/\<tcr_reserved_addr\>/;'q;"	kind:cons	file:
tcr_reserved_addr_usereq	rtti_implementation.m	/^    ;       tcr_reserved_addr_usereq$/;kq|-;/\<tcr_reserved_addr_usereq\>/;'q;"	kind:cons	file:
tcr_stable_c_pointer	rtti_implementation.m	/^    ;       tcr_stable_c_pointer$/;kq|-;/\<tcr_stable_c_pointer\>/;'q;"	kind:cons	file:
tcr_stable_foreign	rtti_implementation.m	/^    ;       tcr_stable_foreign$/;kq|-;/\<tcr_stable_foreign\>/;'q;"	kind:cons	file:
tcr_string	rtti_implementation.m	/^    ;       tcr_string$/;kq|-;/\<tcr_string\>/;'q;"	kind:cons	file:
tcr_subgoal	rtti_implementation.m	/^    ;       tcr_subgoal$/;kq|-;/\<tcr_subgoal\>/;'q;"	kind:cons	file:
tcr_succip	rtti_implementation.m	/^    ;       tcr_succip$/;kq|-;/\<tcr_succip\>/;'q;"	kind:cons	file:
tcr_ticket	rtti_implementation.m	/^    ;       tcr_ticket$/;kq|-;/\<tcr_ticket\>/;'q;"	kind:cons	file:
tcr_trail_ptr	rtti_implementation.m	/^    ;       tcr_trail_ptr$/;kq|-;/\<tcr_trail_ptr\>/;'q;"	kind:cons	file:
tcr_tuple	rtti_implementation.m	/^    ;       tcr_tuple$/;kq|-;/\<tcr_tuple\>/;'q;"	kind:cons	file:
tcr_type_ctor_desc	rtti_implementation.m	/^    ;       tcr_type_ctor_desc$/;kq|-;/\<tcr_type_ctor_desc\>/;'q;"	kind:cons	file:
tcr_type_ctor_info	rtti_implementation.m	/^    ;       tcr_type_ctor_info$/;kq|-;/\<tcr_type_ctor_info\>/;'q;"	kind:cons	file:
tcr_type_desc	rtti_implementation.m	/^    ;       tcr_type_desc$/;kq|-;/\<tcr_type_desc\>/;'q;"	kind:cons	file:
tcr_typeclassinfo	rtti_implementation.m	/^    ;       tcr_typeclassinfo$/;kq|-;/\<tcr_typeclassinfo\>/;'q;"	kind:cons	file:
tcr_typeinfo	rtti_implementation.m	/^    ;       tcr_typeinfo$/;kq|-;/\<tcr_typeinfo\>/;'q;"	kind:cons	file:
tcr_unknown	rtti_implementation.m	/^    ;       tcr_unknown.$/;kq|-;/\<tcr_unknown\>/;'q;"	kind:cons	file:
tcr_void	rtti_implementation.m	/^    ;       tcr_void$/;kq|-;/\<tcr_void\>/;'q;"	kind:cons	file:
tell	io.m	/^:- pred io.tell(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.tell\>/;'q;"	kind:pred
tell_binary	io.m	/^:- pred io.tell_binary(string::in, io.res::out, io::di, io::uo) is det.$/;kq|/^\<io.tell_binary\>/;'q;"	kind:pred
term	term.m	/^:- type term    ==  term(generic).$/;kq|-;/\<term\>/;'q;"	kind:type
term	term.m	/^:- type term(T)$/;kq|-;/\<term\>/;'q;"	kind:type
term	term_io.m	/^    ;       term(varset(T), term(T)).$/;kq|-;/\<term\>/;'q;"	kind:cons
term.apply_rec_substitution	term.m	/^:- func apply_rec_substitution(term(T), substitution(T)) = term(T).$/;kq|/^\<apply_rec_substitution\>/;'q;"	kind:func
term.apply_rec_substitution	term.m	/^:- pred apply_rec_substitution(term(T)::in, substitution(T)::in,$/;kq|/^\<apply_rec_substitution\>/;'q;"	kind:pred
term.apply_substitution	term.m	/^:- func apply_substitution(term(T), substitution(T)) = term(T).$/;kq|/^\<apply_substitution\>/;'q;"	kind:func
term.apply_substitution	term.m	/^:- pred apply_substitution(term(T)::in, substitution(T)::in,$/;kq|/^\<apply_substitution\>/;'q;"	kind:pred
term.apply_variable_renaming	term.m	/^:- func apply_variable_renaming(term(T), map(var(T), var(T))) = term(T).$/;kq|/^\<apply_variable_renaming\>/;'q;"	kind:func
term.apply_variable_renaming	term.m	/^:- pred apply_variable_renaming(term(T)::in, map(var(T), var(T))::in,$/;kq|/^\<apply_variable_renaming\>/;'q;"	kind:pred
term.arg_context	term.m	/^    --->    arg_context($/;kq|-;/\<term.arg_context\>/;'q;"	kind:cons
term.atom	term.m	/^    --->    atom(string)$/;kq|-;/\<term.atom\>/;'q;"	kind:cons
term.coerce	term.m	/^:- func coerce(term(T)) = term(U).$/;kq|/^\<coerce\>/;'q;"	kind:func
term.coerce	term.m	/^:- pred coerce(term(T)::in, term(U)::out) is det.$/;kq|/^\<coerce\>/;'q;"	kind:pred
term.coerce_var	term.m	/^:- func coerce_var(var(T)) = var(U).$/;kq|/^\<coerce_var\>/;'q;"	kind:func
term.coerce_var	term.m	/^:- pred coerce_var(var(T)::in, var(U)::out) is det.$/;kq|/^\<coerce_var\>/;'q;"	kind:pred
term.coerce_var_supply	term.m	/^:- func coerce_var_supply(var_supply(T)) = var_supply(U).$/;kq|/^\<coerce_var_supply\>/;'q;"	kind:func
term.coerce_var_supply	term.m	/^:- pred coerce_var_supply(var_supply(T)::in, var_supply(U)::out) is det.$/;kq|/^\<coerce_var_supply\>/;'q;"	kind:pred
term.const	term.m	/^:- type const$/;kq|-;/\<term.const\>/;'q;"	kind:type
term.contains_var	term.m	/^:- pred contains_var(term(T), var(T)).$/;kq|/^\<contains_var\>/;'q;"	kind:pred
term.contains_var_list	term.m	/^:- pred contains_var_list(list(term(T)), var(T)).$/;kq|/^\<contains_var_list\>/;'q;"	kind:pred
term.context	term.m	/^    --->    context(string, int).$/;kq|-;/\<term.context\>/;'q;"	kind:cons
term.context	term.m	/^:- type term.context$/;kq|-;/\<term.context\>/;'q;"	kind:type
term.context_file	term.m	/^:- func context_file(context) = string.$/;kq|/^\<context_file\>/;'q;"	kind:func
term.context_file	term.m	/^:- pred context_file(context::in, string::out) is det.$/;kq|/^\<context_file\>/;'q;"	kind:pred
term.context_init	term.m	/^:- func context_init = context.$/;kq|/^\<context_init\>/;'q;"	kind:func
term.context_init	term.m	/^:- func context_init(string, int) = context.$/;kq|/^\<context_init\>/;'q;"	kind:func
term.context_init	term.m	/^:- pred context_init(context::out) is det.$/;kq|/^\<context_init\>/;'q;"	kind:pred
term.context_init	term.m	/^:- pred context_init(string::in, int::in, context::out) is det.$/;kq|/^\<context_init\>/;'q;"	kind:pred
term.context_line	term.m	/^:- func context_line(context) = int.$/;kq|/^\<context_line\>/;'q;"	kind:func
term.context_line	term.m	/^:- pred context_line(context::in, int::out) is det.$/;kq|/^\<context_line\>/;'q;"	kind:pred
term.create_var	term.m	/^:- pred create_var(var(T)::out, var_supply(T)::in, var_supply(T)::out) is det.$/;kq|/^\<create_var\>/;'q;"	kind:pred
term.det_term_to_type	term.m	/^:- func det_term_to_type(term(_)) = T.$/;kq|/^\<det_term_to_type\>/;'q;"	kind:func
term.det_term_to_type	term.m	/^:- pred det_term_to_type(term(_)::in, T::out) is det.$/;kq|/^\<det_term_to_type\>/;'q;"	kind:pred
term.enum	term.m	/^:- instance enum(var(_)) where [$/;kq|-;/\<term.enum\>/;'q;"	kind:tci	file:
term.error	term.m	/^    ;       error(term_to_type_error(U)).$/;kq|-;/\<term.error\>/;'q;"	kind:cons
term.float	term.m	/^    ;       float(float)$/;kq|-;/\<term.float\>/;'q;"	kind:cons
term.functor	term.m	/^    --->    functor($/;kq|-;/\<term.functor\>/;'q;"	kind:cons
term.generic	term.m	/^    --->    generic.$/;kq|-;/\<term.generic\>/;'q;"	kind:cons
term.generic	term.m	/^:- type generic$/;kq|-;/\<term.generic\>/;'q;"	kind:type
term.generic_term	term.m	/^:- pred generic_term(term::in) is det.$/;kq|/^\<generic_term\>/;'q;"	kind:pred
term.get_term_context	term.m	/^:- func get_term_context(term(T)) = term.context.$/;kq|/^\<get_term_context\>/;'q;"	kind:func
term.implementation_defined	term.m	/^    ;       implementation_defined(string).$/;kq|-;/\<term.implementation_defined\>/;'q;"	kind:cons
term.init_var_supply	term.m	/^:- func init_var_supply = var_supply(T).$/;kq|/^\<init_var_supply\>/;'q;"	kind:func
term.init_var_supply	term.m	/^:- pred init_var_supply(var_supply(T)).$/;kq|/^\<init_var_supply\>/;'q;"	kind:pred
term.integer	term.m	/^    ;       integer(int)$/;kq|-;/\<term.integer\>/;'q;"	kind:cons
term.is_ground	term.m	/^:- pred is_ground(term(T)::in) is semidet.$/;kq|/^\<is_ground\>/;'q;"	kind:pred
term.is_ground_in_bindings	term.m	/^:- pred is_ground_in_bindings(term(T)::in, substitution(T)::in) is semidet.$/;kq|/^\<is_ground_in_bindings\>/;'q;"	kind:pred
term.is_ground_list	term.m	/^:- pred is_ground_list(list(term(T))::in) is semidet.$/;kq|/^\<is_ground_list\>/;'q;"	kind:pred	file:
term.list_subsumes	term.m	/^:- pred list_subsumes(list(term(T))::in, list(term(T))::in,$/;kq|/^\<list_subsumes\>/;'q;"	kind:pred
term.mode_error	term.m	/^    ;       mode_error($/;kq|-;/\<term.mode_error\>/;'q;"	kind:cons
term.occurs	term.m	/^:- pred occurs(term(T)::in, var(T)::in, substitution(T)::in) is semidet.$/;kq|/^\<occurs\>/;'q;"	kind:pred
term.occurs_list	term.m	/^:- pred occurs_list(list(term(T))::in, var(T)::in, substitution(T)::in)$/;kq|/^\<occurs_list\>/;'q;"	kind:pred
term.ok	term.m	/^    --->    ok(T)$/;kq|-;/\<term.ok\>/;'q;"	kind:cons
term.relabel_variable	term.m	/^:- func relabel_variable(term(T), var(T), var(T)) = term(T).$/;kq|/^\<relabel_variable\>/;'q;"	kind:func
term.relabel_variable	term.m	/^:- pred relabel_variable(term(T)::in, var(T)::in, var(T)::in, term(T)::out)$/;kq|/^\<relabel_variable\>/;'q;"	kind:pred
term.relabel_variables	term.m	/^:- func relabel_variables(list(term(T)), var(T), var(T)) = list(term(T)).$/;kq|/^\<relabel_variables\>/;'q;"	kind:func
term.relabel_variables	term.m	/^:- pred relabel_variables(list(term(T))::in, var(T)::in, var(T)::in,$/;kq|/^\<relabel_variables\>/;'q;"	kind:pred
term.string	term.m	/^    ;       string(string)$/;kq|-;/\<term.string\>/;'q;"	kind:cons
term.substitute	term.m	/^:- func substitute(term(T), var(T), term(T)) = term(T).$/;kq|/^\<substitute\>/;'q;"	kind:func
term.substitute	term.m	/^:- pred substitute(term(T)::in, var(T)::in, term(T)::in, term(T)::out)$/;kq|/^\<substitute\>/;'q;"	kind:pred
term.substitute_corresponding	term.m	/^:- func substitute_corresponding(list(var(T)), list(term(T)),$/;kq|/^\<substitute_corresponding\>/;'q;"	kind:func
term.substitute_corresponding	term.m	/^:- pred substitute_corresponding(list(var(T))::in, list(term(T))::in,$/;kq|/^\<substitute_corresponding\>/;'q;"	kind:pred
term.substitute_list	term.m	/^:- func substitute_list(list(term(T)), var(T), term(T)) = list(term(T)).$/;kq|/^\<substitute_list\>/;'q;"	kind:func
term.substitute_list	term.m	/^:- pred substitute_list(list(term(T))::in, var(T)::in, term(T)::in,$/;kq|/^\<substitute_list\>/;'q;"	kind:pred
term.substitution	term.m	/^:- type substitution    == substitution(generic).$/;kq|-;/\<term.substitution\>/;'q;"	kind:type
term.substitution	term.m	/^:- type substitution(T) == map(var(T), term(T)).$/;kq|-;/\<term.substitution\>/;'q;"	kind:type
term.try_term_to_type	term.m	/^:- func try_term_to_type(term(U)) = term_to_type_result(T, U).$/;kq|/^\<try_term_to_type\>/;'q;"	kind:func
term.try_term_to_type	term.m	/^:- pred try_term_to_type(term(U)::in, term_to_type_result(T, U)::out) is det.$/;kq|/^\<try_term_to_type\>/;'q;"	kind:pred
term.try_term_to_univ	term.m	/^:- pred try_term_to_univ(term(T)::in, type_desc.type_desc::in,$/;kq|/^\<try_term_to_univ\>/;'q;"	kind:pred	file:
term.try_term_to_univ_2	term.m	/^:- pred try_term_to_univ_2(term(T)::in,$/;kq|/^\<try_term_to_univ_2\>/;'q;"	kind:pred	file:
term.type_error	term.m	/^    --->    type_error($/;kq|-;/\<term.type_error\>/;'q;"	kind:cons
term.type_info_to_term	term.m	/^:- pred type_info_to_term(context::in, type_desc::in, term(T)::out) is det.$/;kq|/^\<type_info_to_term\>/;'q;"	kind:pred	file:
term.type_to_term	term.m	/^:- func type_to_term(T) = term(_).$/;kq|/^\<type_to_term\>/;'q;"	kind:func
term.type_to_term	term.m	/^:- pred type_to_term(T::in, term(_)::out) is det.$/;kq|/^\<type_to_term\>/;'q;"	kind:pred
term.unify_term	term.m	/^:- pred unify_term(term(T)::in, term(T)::in, substitution(T)::in,$/;kq|/^\<unify_term\>/;'q;"	kind:pred
term.unify_term_bound_var	term.m	/^:- pred unify_term_bound_var(var(T)::in, var(T)::in, list(var(T))::in,$/;kq|/^\<unify_term_bound_var\>/;'q;"	kind:pred	file:
term.unify_term_dont_bind	term.m	/^:- pred unify_term_dont_bind(term(T)::in, term(T)::in, list(var(T))::in,$/;kq|/^\<unify_term_dont_bind\>/;'q;"	kind:pred
term.unify_term_list	term.m	/^:- pred unify_term_list(list(term(T))::in, list(term(T))::in,$/;kq|/^\<unify_term_list\>/;'q;"	kind:pred
term.unify_term_list_dont_bind	term.m	/^:- pred unify_term_list_dont_bind(list(term(T))::in, list(term(T))::in,$/;kq|/^\<unify_term_list_dont_bind\>/;'q;"	kind:pred
term.univ_list_to_term_list	term.m	/^:- pred univ_list_to_term_list(list(univ)::in, list(term(T))::out) is det.$/;kq|/^\<univ_list_to_term_list\>/;'q;"	kind:pred	file:
term.univ_to_term	term.m	/^:- func univ_to_term(univ) = term(_).$/;kq|/^\<univ_to_term\>/;'q;"	kind:func
term.univ_to_term	term.m	/^:- pred univ_to_term(univ::in, term(_)::out) is det.$/;kq|/^\<univ_to_term\>/;'q;"	kind:pred
term.univ_to_term_special_case	term.m	/^:- pred univ_to_term_special_case(string::in, string::in,$/;kq|/^\<univ_to_term_special_case\>/;'q;"	kind:pred	file:
term.unsafe_int_to_var	term.m	/^:- func unsafe_int_to_var(int) = var(T).$/;kq|/^\<unsafe_int_to_var\>/;'q;"	kind:func	file:
term.var	term.m	/^    --->    var(int).$/;kq|-;/\<term.var\>/;'q;"	kind:cons	file:
term.var	term.m	/^:- type var     ==  var(generic).$/;kq|-;/\<term.var\>/;'q;"	kind:type
term.var	term.m	/^:- type var(T)$/;kq|-;/\<term.var\>/;'q;"	kind:type	file:
term.var_id	term.m	/^:- func var_id(var(T)) = int.$/;kq|/^\<var_id\>/;'q;"	kind:func
term.var_list_to_term_list	term.m	/^:- func var_list_to_term_list(list(var(T))) = list(term(T)).$/;kq|/^\<var_list_to_term_list\>/;'q;"	kind:func
term.var_list_to_term_list	term.m	/^:- pred var_list_to_term_list(list(var(T))::in, list(term(T))::out) is det.$/;kq|/^\<var_list_to_term_list\>/;'q;"	kind:pred
term.var_supply	term.m	/^    --->    var_supply(int).$/;kq|-;/\<term.var_supply\>/;'q;"	kind:cons	file:
term.var_supply	term.m	/^:- type var_supply(T)$/;kq|-;/\<term.var_supply\>/;'q;"	kind:type	file:
term.var_supply_max_var	term.m	/^:- func var_supply_max_var(var_supply(T)) = var(T).$/;kq|/^\<var_supply_max_var\>/;'q;"	kind:func
term.var_supply_num_allocated	term.m	/^:- func var_supply_num_allocated(var_supply(T)) = int.$/;kq|/^\<var_supply_num_allocated\>/;'q;"	kind:func
term.var_to_int	term.m	/^:- func var_to_int(var(T)) = int.$/;kq|/^\<var_to_int\>/;'q;"	kind:func
term.var_to_int	term.m	/^:- pred var_to_int(var(T)::in, int::out) is det.$/;kq|/^\<var_to_int\>/;'q;"	kind:pred
term.variable	term.m	/^    ;       variable($/;kq|-;/\<term.variable\>/;'q;"	kind:cons
term.vars	term.m	/^:- func vars(term(T)) = list(var(T)).$/;kq|/^\<vars\>/;'q;"	kind:func
term.vars	term.m	/^:- pred vars(term(T)::in, list(var(T))::out) is det.$/;kq|/^\<vars\>/;'q;"	kind:pred
term.vars_2	term.m	/^:- func vars_2(term(T), list(var(T))) = list(var(T)).$/;kq|/^\<vars_2\>/;'q;"	kind:func
term.vars_2	term.m	/^:- pred vars_2(term(T)::in, list(var(T))::in, list(var(T))::out) is det.$/;kq|/^\<vars_2\>/;'q;"	kind:pred
term.vars_2_list	term.m	/^:- pred vars_2_list(list(term(T))::in, list(var(T))::in,$/;kq|/^\<vars_2_list\>/;'q;"	kind:pred	file:
term.vars_list	term.m	/^:- func vars_list(list(term(T))) = list(var(T)).$/;kq|/^\<vars_list\>/;'q;"	kind:func
term.vars_list	term.m	/^:- pred vars_list(list(term(T))::in, list(var(T))::out) is det.$/;kq|/^\<vars_list\>/;'q;"	kind:pred
term_args_to_revstrings	string.m	/^:- pred term_args_to_revstrings(noncanon_handling, ops.table, list(univ),$/;kq|/^\<term_args_to_revstrings\>/;'q;"	kind:pred	file:
term_io.add_escaped_char	term_io.m	/^:- func term_io.add_escaped_char(char, list(string)) = list(string).$/;kq|/^\<term_io.add_escaped_char\>/;'q;"	kind:func	file:
term_io.encode_escaped_char	term_io.m	/^:- pred encode_escaped_char(char, string).$/;kq|/^\<encode_escaped_char\>/;'q;"	kind:pred
term_io.eof	term_io.m	/^    --->    eof$/;kq|-;/\<term_io.eof\>/;'q;"	kind:cons
term_io.error	term_io.m	/^    ;       error(string, int)$/;kq|-;/\<term_io.error\>/;'q;"	kind:cons
term_io.escaped_char	term_io.m	/^:- func term_io.escaped_char(char) = string.$/;kq|/^\<term_io.escaped_char\>/;'q;"	kind:func
term_io.escaped_string	term_io.m	/^:- func term_io.escaped_string(string) = string.$/;kq|/^\<term_io.escaped_string\>/;'q;"	kind:func
term_io.format_constant	term_io.m	/^:- func term_io.format_constant(const) = string.$/;kq|/^\<term_io.format_constant\>/;'q;"	kind:func
term_io.format_constant_agt	term_io.m	/^:- func term_io.format_constant_agt(const, adjacent_to_graphic_token) = string.$/;kq|/^\<term_io.format_constant_agt\>/;'q;"	kind:func	file:
term_io.is_mercury_source_char	term_io.m	/^:- pred is_mercury_source_char(char::in) is semidet.$/;kq|/^\<is_mercury_source_char\>/;'q;"	kind:pred	file:
term_io.mercury_escape_char	term_io.m	/^:- func mercury_escape_char(char) = string.$/;kq|/^\<mercury_escape_char\>/;'q;"	kind:func
term_io.quote_atom	term_io.m	/^:- pred term_io.quote_atom(Stream::in, string::in,$/;kq|/^\<term_io.quote_atom\>/;'q;"	kind:pred
term_io.quote_atom	term_io.m	/^:- pred term_io.quote_atom(string::in, io::di, io::uo) is det.$/;kq|/^\<term_io.quote_atom\>/;'q;"	kind:pred
term_io.quote_atom_agt	term_io.m	/^:- pred term_io.quote_atom_agt(Stream::in, string::in,$/;kq|/^\<term_io.quote_atom_agt\>/;'q;"	kind:pred
term_io.quote_atom_agt	term_io.m	/^:- pred term_io.quote_atom_agt(string::in, adjacent_to_graphic_token::in,$/;kq|/^\<term_io.quote_atom_agt\>/;'q;"	kind:pred
term_io.quote_char	term_io.m	/^:- pred term_io.quote_char(Stream::in, char::in,$/;kq|/^\<term_io.quote_char\>/;'q;"	kind:pred
term_io.quote_char	term_io.m	/^:- pred term_io.quote_char(char::in, io::di, io::uo) is det.$/;kq|/^\<term_io.quote_char\>/;'q;"	kind:pred
term_io.quote_string	term_io.m	/^:- pred term_io.quote_string(Stream::in, string::in,$/;kq|/^\<term_io.quote_string\>/;'q;"	kind:pred
term_io.quote_string	term_io.m	/^:- pred term_io.quote_string(string::in, io::di, io::uo) is det.$/;kq|/^\<term_io.quote_string\>/;'q;"	kind:pred
term_io.quoted_atom	term_io.m	/^:- func term_io.quoted_atom(string) = string.$/;kq|/^\<term_io.quoted_atom\>/;'q;"	kind:func
term_io.quoted_atom_agt	term_io.m	/^:- func term_io.quoted_atom_agt(string, adjacent_to_graphic_token) = string.$/;kq|/^\<term_io.quoted_atom_agt\>/;'q;"	kind:func
term_io.quoted_char	term_io.m	/^:- func term_io.quoted_char(char) = string.$/;kq|/^\<term_io.quoted_char\>/;'q;"	kind:func
term_io.quoted_string	term_io.m	/^:- func term_io.quoted_string(string) = string.$/;kq|/^\<term_io.quoted_string\>/;'q;"	kind:func
term_io.read_term	term_io.m	/^:- pred term_io.read_term(read_term(T)::out, io::di, io::uo) is det.$/;kq|/^\<term_io.read_term\>/;'q;"	kind:pred
term_io.read_term	term_io.m	/^:- type read_term   == read_term(generic).$/;kq|-;/\<term_io.read_term\>/;'q;"	kind:type
term_io.read_term	term_io.m	/^:- type read_term(T)$/;kq|-;/\<term_io.read_term\>/;'q;"	kind:type
term_io.should_atom_be_quoted	term_io.m	/^:- func should_atom_be_quoted(string, adjacent_to_graphic_token) = bool.$/;kq|/^\<should_atom_be_quoted\>/;'q;"	kind:func	file:
term_io.starts_with_digit	term_io.m	/^:- pred starts_with_digit(term(T)::in) is semidet.$/;kq|/^\<starts_with_digit\>/;'q;"	kind:pred	file:
term_io.string_is_escaped_char	term_io.m	/^:- pred string_is_escaped_char(char, string).$/;kq|/^\<string_is_escaped_char\>/;'q;"	kind:pred
term_io.term	term_io.m	/^    ;       term(varset(T), term(T)).$/;kq|-;/\<term_io.term\>/;'q;"	kind:cons
term_io.write_arg_term	term_io.m	/^:- pred term_io.write_arg_term(Ops::in, term(T)::in,$/;kq|/^\<term_io.write_arg_term\>/;'q;"	kind:pred	file:
term_io.write_constant	term_io.m	/^:- pred term_io.write_constant(const::in, adjacent_to_graphic_token::in,$/;kq|/^\<term_io.write_constant\>/;'q;"	kind:pred	file:
term_io.write_constant	term_io.m	/^:- pred term_io.write_constant(const::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_constant\>/;'q;"	kind:pred
term_io.write_escaped_char	term_io.m	/^:- pred term_io.write_escaped_char(Stream::in, char::in,$/;kq|/^\<term_io.write_escaped_char\>/;'q;"	kind:pred
term_io.write_escaped_char	term_io.m	/^:- pred term_io.write_escaped_char(char::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_escaped_char\>/;'q;"	kind:pred
term_io.write_escaped_string	term_io.m	/^:- pred term_io.write_escaped_string(Stream::in, string::in,$/;kq|/^\<term_io.write_escaped_string\>/;'q;"	kind:pred
term_io.write_escaped_string	term_io.m	/^:- pred term_io.write_escaped_string(string::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_escaped_string\>/;'q;"	kind:pred
term_io.write_list_tail	term_io.m	/^:- pred term_io.write_list_tail(Ops::in, term(T)::in,$/;kq|/^\<term_io.write_list_tail\>/;'q;"	kind:pred	file:
term_io.write_term	term_io.m	/^:- pred term_io.write_term(varset(T)::in, term(T)::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_term\>/;'q;"	kind:pred
term_io.write_term_2	term_io.m	/^:- pred term_io.write_term_2(Ops::in, term(T)::in,$/;kq|/^\<term_io.write_term_2\>/;'q;"	kind:pred	file:
term_io.write_term_3	term_io.m	/^:- pred term_io.write_term_3(Ops::in, term(T)::in, ops.priority::in,$/;kq|/^\<term_io.write_term_3\>/;'q;"	kind:pred	file:
term_io.write_term_args	term_io.m	/^:- pred term_io.write_term_args(Ops::in, list(term(T))::in,$/;kq|/^\<term_io.write_term_args\>/;'q;"	kind:pred	file:
term_io.write_term_nl	term_io.m	/^:- pred term_io.write_term_nl(varset(T)::in, term(T)::in, io::di, io::uo)$/;kq|/^\<term_io.write_term_nl\>/;'q;"	kind:pred
term_io.write_variable	term_io.m	/^:- pred term_io.write_variable(var(T)::in, varset(T)::in, io::di, io::uo)$/;kq|/^\<term_io.write_variable\>/;'q;"	kind:pred
term_io.write_variable_2	term_io.m	/^:- pred term_io.write_variable_2(Ops::in, var(T)::in,$/;kq|/^\<term_io.write_variable_2\>/;'q;"	kind:pred	file:
term_kind	parser.m	/^:- type term_kind$/;kq|-;/\<term_kind\>/;'q;"	kind:type	file:
term_list_to_univ_list	term.m	/^:- pred term_list_to_univ_list(list(term(T))::in,$/;kq|/^\<term_list_to_univ_list\>/;'q;"	kind:pred	file:
term_list_to_var_list	term.m	/^:- func term_list_to_var_list(list(term(T))) = list(var(T)).$/;kq|/^\<term_list_to_var_list\>/;'q;"	kind:func
term_list_to_var_list	term.m	/^:- pred term_list_to_var_list(list(term(T))::in, list(var(T))::out) is semidet.$/;kq|/^\<term_list_to_var_list\>/;'q;"	kind:pred
term_size_plus	term_size_prof_builtin.m	/^:- func term_size_plus(int, int) = int.$/;kq|/^\<term_size_plus\>/;'q;"	kind:func
term_to_type	term.m	/^:- pred term_to_type(term(U)::in, T::out) is semidet.$/;kq|/^\<term_to_type\>/;'q;"	kind:pred
term_to_type_arg_context	term.m	/^:- type term_to_type_arg_context$/;kq|-;/\<term_to_type_arg_context\>/;'q;"	kind:type
term_to_type_context	term.m	/^:- type term_to_type_context == list(term_to_type_arg_context).$/;kq|-;/\<term_to_type_context\>/;'q;"	kind:type
term_to_type_error	term.m	/^:- type term_to_type_error(T)$/;kq|-;/\<term_to_type_error\>/;'q;"	kind:type
term_to_type_result	term.m	/^:- type term_to_type_result(T) == term_to_type_result(T, generic).$/;kq|-;/\<term_to_type_result\>/;'q;"	kind:type
term_to_type_result	term.m	/^:- type term_to_type_result(T, U)$/;kq|-;/\<term_to_type_result\>/;'q;"	kind:type
term_to_univ_special_case	term.m	/^:- pred term_to_univ_special_case(string::in, string::in,$/;kq|/^\<term_to_univ_special_case\>/;'q;"	kind:pred	file:
term_to_xml.all_attr_sources	term_to_xml.m	/^:- func all_attr_sources = list(attr_from_source).$/;kq|/^\<all_attr_sources\>/;'q;"	kind:func	file:
term_to_xml.arity	term_to_xml.m	/^    ;       arity.$/;kq|-;/\<term_to_xml.arity\>/;'q;"	kind:cons
term_to_xml.array_element	term_to_xml.m	/^:- func array_element = string.$/;kq|/^\<array_element\>/;'q;"	kind:func	file:
term_to_xml.attr	term_to_xml.m	/^    --->    attr(string, string).$/;kq|-;/\<term_to_xml.attr\>/;'q;"	kind:cons
term_to_xml.attr	term_to_xml.m	/^:- type attr$/;kq|-;/\<term_to_xml.attr\>/;'q;"	kind:type
term_to_xml.attr_from_source	term_to_xml.m	/^    --->    attr_from_source($/;kq|-;/\<term_to_xml.attr_from_source\>/;'q;"	kind:cons
term_to_xml.attr_from_source	term_to_xml.m	/^:- type attr_from_source$/;kq|-;/\<term_to_xml.attr_from_source\>/;'q;"	kind:type
term_to_xml.attr_name	term_to_xml.m	/^                attr_name   :: string,$/;kq|-;/\<term_to_xml.attr_name\>/;'q;"	kind:fld
term_to_xml.attr_source	term_to_xml.m	/^                attr_source :: attr_source$/;kq|-;/\<term_to_xml.attr_source\>/;'q;"	kind:fld
term_to_xml.attr_source	term_to_xml.m	/^:- type attr_source$/;kq|-;/\<term_to_xml.attr_source\>/;'q;"	kind:type
term_to_xml.attributes	term_to_xml.m	/^                attributes      :: list(attr),$/;kq|-;/\<term_to_xml.attributes\>/;'q;"	kind:fld
term_to_xml.can_generate_dtd	term_to_xml.m	/^:- func can_generate_dtd(element_mapping::in(element_mapping),$/;kq|/^\<can_generate_dtd\>/;'q;"	kind:func
term_to_xml.can_generate_dtd_2	term_to_xml.m	/^:- func can_generate_dtd_2(maybe_dtd::in, element_mapping::in(element_mapping),$/;kq|/^\<can_generate_dtd_2\>/;'q;"	kind:func	file:
term_to_xml.cdata	term_to_xml.m	/^    ;       cdata(string)$/;kq|-;/\<term_to_xml.cdata\>/;'q;"	kind:cons
term_to_xml.children	term_to_xml.m	/^                children        :: list(xml)$/;kq|-;/\<term_to_xml.children\>/;'q;"	kind:fld
term_to_xml.comment	term_to_xml.m	/^    ;       comment(string)$/;kq|-;/\<term_to_xml.comment\>/;'q;"	kind:cons
term_to_xml.custom	term_to_xml.m	/^    ;       custom(element_pred).$/;kq|-;/\<term_to_xml.custom\>/;'q;"	kind:cons
term_to_xml.data	term_to_xml.m	/^    ;       data(string)$/;kq|-;/\<term_to_xml.data\>/;'q;"	kind:cons
term_to_xml.doctype	term_to_xml.m	/^:- type doctype$/;kq|-;/\<term_to_xml.doctype\>/;'q;"	kind:type
term_to_xml.du_functor	term_to_xml.m	/^    --->    du_functor($/;kq|-;/\<term_to_xml.du_functor\>/;'q;"	kind:cons
term_to_xml.duplicate_element	term_to_xml.m	/^                duplicate_element   :: string,$/;kq|-;/\<term_to_xml.duplicate_element\>/;'q;"	kind:fld
term_to_xml.duplicate_elements	term_to_xml.m	/^    ;       duplicate_elements($/;kq|-;/\<term_to_xml.duplicate_elements\>/;'q;"	kind:cons
term_to_xml.duplicate_types	term_to_xml.m	/^                duplicate_types     :: list(type_desc)$/;kq|-;/\<term_to_xml.duplicate_types\>/;'q;"	kind:fld
term_to_xml.elem	term_to_xml.m	/^    --->    elem($/;kq|-;/\<term_to_xml.elem\>/;'q;"	kind:cons
term_to_xml.element_mapping	term_to_xml.m	/^:- inst element_mapping$/;kq|-;/\<term_to_xml.element_mapping\>/;'q;"	kind:inst
term_to_xml.element_mapping	term_to_xml.m	/^:- type element_mapping$/;kq|-;/\<term_to_xml.element_mapping\>/;'q;"	kind:type
term_to_xml.element_name	term_to_xml.m	/^                element_name    :: string,$/;kq|-;/\<term_to_xml.element_name\>/;'q;"	kind:fld
term_to_xml.element_pred	term_to_xml.m	/^:- inst element_pred == (pred(in, in, out, out) is det).$/;kq|-;/\<term_to_xml.element_pred\>/;'q;"	kind:inst
term_to_xml.element_pred	term_to_xml.m	/^:- type element_pred == (pred(type_desc, maybe_functor_info, string,$/;kq|-;/\<term_to_xml.element_pred\>/;'q;"	kind:type
term_to_xml.embed_dtd	term_to_xml.m	/^    --->    embed_dtd$/;kq|-;/\<term_to_xml.embed_dtd\>/;'q;"	kind:cons
term_to_xml.entity	term_to_xml.m	/^    ;       entity(string)$/;kq|-;/\<term_to_xml.entity\>/;'q;"	kind:cons
term_to_xml.external_dtd	term_to_xml.m	/^    ;       external_dtd(doctype)$/;kq|-;/\<term_to_xml.external_dtd\>/;'q;"	kind:cons
term_to_xml.field_name	term_to_xml.m	/^    ;       field_name$/;kq|-;/\<term_to_xml.field_name\>/;'q;"	kind:cons
term_to_xml.find_field_names	term_to_xml.m	/^:- pred find_field_names(type_desc::in, list(int)::in, string::in,$/;kq|/^\<find_field_names\>/;'q;"	kind:pred	file:
term_to_xml.format	term_to_xml.m	/^    --->    format$/;kq|-;/\<term_to_xml.format\>/;'q;"	kind:cons	file:
term_to_xml.functor	term_to_xml.m	/^    --->    functor$/;kq|-;/\<term_to_xml.functor\>/;'q;"	kind:cons
term_to_xml.functor_arity	term_to_xml.m	/^                functor_arity   :: int$/;kq|-;/\<term_to_xml.functor_arity\>/;'q;"	kind:fld
term_to_xml.functor_name	term_to_xml.m	/^                functor_name    :: string,$/;kq|-;/\<term_to_xml.functor_name\>/;'q;"	kind:fld
term_to_xml.get_element_pred	term_to_xml.m	/^:- pred get_element_pred(element_mapping::in(element_mapping),$/;kq|/^\<get_element_pred\>/;'q;"	kind:pred	file:
term_to_xml.get_field_names	term_to_xml.m	/^:- func get_field_names(type_desc, string, int) = list(maybe(string)).$/;kq|/^\<get_field_names\>/;'q;"	kind:func	file:
term_to_xml.indent	term_to_xml.m	/^:- pred indent(Stream::in, int::in, State::di, State::uo) is det$/;kq|/^\<indent\>/;'q;"	kind:pred	file:
term_to_xml.is_array	term_to_xml.m	/^:- pred is_array(type_desc::in, pseudo_type_desc::out) is semidet.$/;kq|/^\<is_array\>/;'q;"	kind:pred	file:
term_to_xml.is_maybe_yes	term_to_xml.m	/^:- pred is_maybe_yes(maybe(T)::in, T::out) is semidet.$/;kq|/^\<is_maybe_yes\>/;'q;"	kind:pred	file:
term_to_xml.is_primitive_type	term_to_xml.m	/^:- pred is_primitive_type(type_desc::in, string::out) is semidet.$/;kq|/^\<is_primitive_type\>/;'q;"	kind:pred	file:
term_to_xml.make_du_functor	term_to_xml.m	/^:- func make_du_functor(string, int) = maybe_functor_info.$/;kq|/^\<make_du_functor\>/;'q;"	kind:func	file:
term_to_xml.mangle	term_to_xml.m	/^:- func mangle(string) = string.$/;kq|/^\<mangle\>/;'q;"	kind:func	file:
term_to_xml.mangle_char	term_to_xml.m	/^:- pred mangle_char(char::in, list(char)::in, list(char)::out) is det.$/;kq|/^\<mangle_char\>/;'q;"	kind:pred	file:
term_to_xml.maybe_dtd	term_to_xml.m	/^:- type maybe_dtd$/;kq|-;/\<term_to_xml.maybe_dtd\>/;'q;"	kind:type
term_to_xml.maybe_format	term_to_xml.m	/^:- type maybe_format$/;kq|-;/\<term_to_xml.maybe_format\>/;'q;"	kind:type	file:
term_to_xml.maybe_functor_info	term_to_xml.m	/^:- type maybe_functor_info$/;kq|-;/\<term_to_xml.maybe_functor_info\>/;'q;"	kind:type
term_to_xml.maybe_indent	term_to_xml.m	/^:- pred maybe_indent(Stream::in, maybe_format::in, int::in,$/;kq|/^\<maybe_indent\>/;'q;"	kind:pred	file:
term_to_xml.maybe_nl	term_to_xml.m	/^:- pred maybe_nl(Stream::in, maybe_format::in, State::di, State::uo) is det$/;kq|/^\<maybe_nl\>/;'q;"	kind:pred	file:
term_to_xml.maybe_stylesheet	term_to_xml.m	/^:- type maybe_stylesheet$/;kq|-;/\<term_to_xml.maybe_stylesheet\>/;'q;"	kind:type
term_to_xml.no_dtd	term_to_xml.m	/^    ;       no_dtd.$/;kq|-;/\<term_to_xml.no_dtd\>/;'q;"	kind:cons
term_to_xml.no_format	term_to_xml.m	/^    ;       no_format.$/;kq|-;/\<term_to_xml.no_format\>/;'q;"	kind:cons	file:
term_to_xml.no_stylesheet	term_to_xml.m	/^    ;       no_stylesheet.$/;kq|-;/\<term_to_xml.no_stylesheet\>/;'q;"	kind:cons
term_to_xml.non_du	term_to_xml.m	/^    ;       non_du.$/;kq|-;/\<term_to_xml.non_du\>/;'q;"	kind:cons
term_to_xml.non_embedded_dtd	term_to_xml.m	/^:- inst non_embedded_dtd$/;kq|-;/\<term_to_xml.non_embedded_dtd\>/;'q;"	kind:inst
term_to_xml.ok	term_to_xml.m	/^    --->    ok$/;kq|-;/\<term_to_xml.ok\>/;'q;"	kind:cons
term_to_xml.primitive_value	term_to_xml.m	/^:- pred primitive_value(univ::in, string::out) is semidet.$/;kq|/^\<primitive_value\>/;'q;"	kind:pred	file:
term_to_xml.public	term_to_xml.m	/^    --->    public(string)                  % Formal Public Identifier (FPI)$/;kq|-;/\<term_to_xml.public\>/;'q;"	kind:cons
term_to_xml.public_system	term_to_xml.m	/^    ;       public_system(string, string)   % FPI, URL$/;kq|-;/\<term_to_xml.public_system\>/;'q;"	kind:cons
term_to_xml.raw	term_to_xml.m	/^    ;       raw(string).$/;kq|-;/\<term_to_xml.raw\>/;'q;"	kind:cons
term_to_xml.reserved_prefix	term_to_xml.m	/^:- func reserved_prefix = string.$/;kq|/^\<reserved_prefix\>/;'q;"	kind:func	file:
term_to_xml.simple	term_to_xml.m	/^    --->    simple$/;kq|-;/\<term_to_xml.simple\>/;'q;"	kind:cons
term_to_xml.stylesheet_href	term_to_xml.m	/^                stylesheet_href :: string$/;kq|-;/\<term_to_xml.stylesheet_href\>/;'q;"	kind:fld
term_to_xml.stylesheet_type	term_to_xml.m	/^                stylesheet_type :: string, % For example "text\/xsl"$/;kq|-;/\<term_to_xml.stylesheet_type\>/;'q;"	kind:fld
term_to_xml.system	term_to_xml.m	/^    ;       system(string).                 % URL$/;kq|-;/\<term_to_xml.system\>/;'q;"	kind:cons
term_to_xml.to_xml	term_to_xml.m	/^    func to_xml(T::in) = (xml::out(xml_doc)) is det$/;kq|-;/\<term_to_xml.to_xml\>/;'q;"	kind:tcm
term_to_xml.type_name	term_to_xml.m	/^    ;       type_name$/;kq|-;/\<term_to_xml.type_name\>/;'q;"	kind:cons
term_to_xml.type_not_ground	term_to_xml.m	/^    ;       type_not_ground(pseudo_type_desc).$/;kq|-;/\<term_to_xml.type_not_ground\>/;'q;"	kind:cons
term_to_xml.unique	term_to_xml.m	/^    ;       unique$/;kq|-;/\<term_to_xml.unique\>/;'q;"	kind:cons
term_to_xml.with_stylesheet	term_to_xml.m	/^    --->    with_stylesheet($/;kq|-;/\<term_to_xml.with_stylesheet\>/;'q;"	kind:cons
term_to_xml.write_attribute	term_to_xml.m	/^:- pred write_attribute(Stream::in, attr::in, State::di, State::uo) is det$/;kq|/^\<write_attribute\>/;'q;"	kind:pred	file:
term_to_xml.write_doctype	term_to_xml.m	/^:- pred write_doctype(Stream, deconstruct.noncanon_handling, T,$/;kq|/^\<write_doctype\>/;'q;"	kind:pred	file:
term_to_xml.write_dtd	term_to_xml.m	/^:- pred write_dtd(Stream::in, T::unused,$/;kq|/^\<write_dtd\>/;'q;"	kind:pred
term_to_xml.write_dtd_attlist	term_to_xml.m	/^:- pred write_dtd_attlist(Stream::in, string::in, maybe(string)::in,$/;kq|/^\<write_dtd_attlist\>/;'q;"	kind:pred	file:
term_to_xml.write_dtd_attlists	term_to_xml.m	/^:- pred write_dtd_attlists(Stream::in, string::in, list(attr_from_source)::in,$/;kq|/^\<write_dtd_attlists\>/;'q;"	kind:pred	file:
term_to_xml.write_dtd_entries	term_to_xml.m	/^:- pred write_dtd_entries(Stream::in, element_pred::in(element_pred),$/;kq|/^\<write_dtd_entries\>/;'q;"	kind:pred	file:
term_to_xml.write_dtd_types	term_to_xml.m	/^:- pred write_dtd_types(Stream::in, element_pred::in(element_pred),$/;kq|/^\<write_dtd_types\>/;'q;"	kind:pred	file:
term_to_xml.write_element_end	term_to_xml.m	/^:- pred write_element_end(Stream::in, string::in, State::di, State::uo) is det$/;kq|/^\<write_element_end\>/;'q;"	kind:pred	file:
term_to_xml.write_xml_doc	term_to_xml.m	/^:- pred write_xml_doc(Stream::in, T::in, State::di, State::uo)$/;kq|/^\<write_xml_doc\>/;'q;"	kind:pred
term_to_xml.write_xml_element	term_to_xml.m	/^:- pred write_xml_element(Stream::in, int::in, T::in,$/;kq|/^\<write_xml_element\>/;'q;"	kind:pred
term_to_xml.write_xml_header	term_to_xml.m	/^:- pred write_xml_header(Stream::in, maybe(string)::in,$/;kq|/^\<write_xml_header\>/;'q;"	kind:pred
term_to_xml.xml	term_to_xml.m	/^:- type xml$/;kq|-;/\<term_to_xml.xml\>/;'q;"	kind:type
term_to_xml.xml_doc	term_to_xml.m	/^:- inst xml_doc$/;kq|-;/\<term_to_xml.xml_doc\>/;'q;"	kind:inst
term_to_xml.xmlable	term_to_xml.m	/^:- typeclass xmlable(T) where [$/;kq|-;/\<term_to_xml.xmlable\>/;'q;"	kind:tc
terminal_name	robdd.m	/^:- func terminal_name(robdd(T)) = string.$/;kq|/^\<terminal_name\>/;'q;"	kind:func	file:
test	random.m	/^:- pred random.test(int::in, int::in, list(int)::out, int::out) is det.$/;kq|/^\<random.test\>/;'q;"	kind:pred
test_2	random.m	/^:- pred random.test_2(int, list(int), random.supply, random.supply).$/;kq|/^\<random.test_2\>/;'q;"	kind:pred	file:
test_bitset	test_bitset.m	/^:- type test_bitset(T) == pair(tree_bitset(T), set_ordlist(T)).$/;kq|-;/\<test_bitset\>/;'q;"	kind:type	file:
test_bitset.all_true	test_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), test_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
test_bitset.bitset_error	test_bitset.m	/^:- type bitset_error(T)$/;kq|-;/\<test_bitset.bitset_error\>/;'q;"	kind:type
test_bitset.bitset_to_set	test_bitset.m	/^:- func bitset_to_set(test_bitset(T)) = set(T) <= enum(T).$/;kq|/^\<bitset_to_set\>/;'q;"	kind:func
test_bitset.check0	test_bitset.m	/^:- pred check0(string::in, test_bitset(T)::in, test_bitset(T)::out) is det$/;kq|/^\<check0\>/;'q;"	kind:pred	file:
test_bitset.check1	test_bitset.m	/^:- pred check1(string::in, test_bitset(T)::in, test_bitset(T)::in,$/;kq|/^\<check1\>/;'q;"	kind:pred	file:
test_bitset.check2	test_bitset.m	/^:- pred check2(string::in, test_bitset(T)::in, test_bitset(T)::in,$/;kq|/^\<check2\>/;'q;"	kind:pred	file:
test_bitset.contains	test_bitset.m	/^:- pred contains(test_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
test_bitset.count	test_bitset.m	/^:- func count(test_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
test_bitset.delete	test_bitset.m	/^:- pred delete(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
test_bitset.delete_list	test_bitset.m	/^:- pred delete_list(list(T)::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<delete_list\>/;'q;"	kind:pred
test_bitset.difference	test_bitset.m	/^:- func difference(test_bitset(T), test_bitset(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<difference\>/;'q;"	kind:func
test_bitset.difference	test_bitset.m	/^:- pred difference(test_bitset(T)::in,$/;kq|/^\<difference\>/;'q;"	kind:pred
test_bitset.divide	test_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), test_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
test_bitset.divide_by_set	test_bitset.m	/^:- pred divide_by_set(test_bitset(T)::in, test_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
test_bitset.equal	test_bitset.m	/^:- pred equal(test_bitset(T)::in, test_bitset(T)::in) is semidet <= enum(T).$/;kq|/^\<equal\>/;'q;"	kind:pred
test_bitset.filter	test_bitset.m	/^:- func filter(pred(T)::in(pred(in) is semidet), test_bitset(T)::in)$/;kq|/^\<filter\>/;'q;"	kind:func
test_bitset.filter	test_bitset.m	/^:- pred filter(pred(T)::in(pred(in) is semidet),$/;kq|/^\<filter\>/;'q;"	kind:pred
test_bitset.foldl	test_bitset.m	/^:- func foldl(func(T, Acc) = Acc, test_bitset(T), Acc) = Acc <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
test_bitset.foldl	test_bitset.m	/^:- pred foldl(pred(T, Acc, Acc), test_bitset(T), Acc, Acc) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
test_bitset.from_set	test_bitset.m	/^:- func from_set(set(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
test_bitset.get_sets	test_bitset.m	/^:- pred get_sets(string::in, list(pair(tree_bitset(T), set_ordlist(T)))::in,$/;kq|/^\<get_sets\>/;'q;"	kind:pred	file:
test_bitset.init	test_bitset.m	/^:- func init = test_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
test_bitset.init	test_bitset.m	/^:- pred init(test_bitset(T)::out) is det.$/;kq|/^\<init\>/;'q;"	kind:pred
test_bitset.insert	test_bitset.m	/^:- pred insert(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
test_bitset.insert_list	test_bitset.m	/^:- pred insert_list(list(T)::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<insert_list\>/;'q;"	kind:pred
test_bitset.insert_new	test_bitset.m	/^:- pred insert_new(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<insert_new\>/;'q;"	kind:pred
test_bitset.intersect	test_bitset.m	/^:- func intersect(test_bitset(T), test_bitset(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<intersect\>/;'q;"	kind:func
test_bitset.intersect	test_bitset.m	/^:- pred intersect(test_bitset(T)::in,$/;kq|/^\<intersect\>/;'q;"	kind:pred
test_bitset.intersect_list	test_bitset.m	/^:- func intersect_list(list(test_bitset(T))) = test_bitset(T) <= enum(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
test_bitset.intersect_list	test_bitset.m	/^:- pred intersect_list(list(test_bitset(T))::in, test_bitset(T)::out) is det$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
test_bitset.is_empty	test_bitset.m	/^:- pred is_empty(test_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
test_bitset.is_non_empty	test_bitset.m	/^:- pred is_non_empty(test_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
test_bitset.is_singleton	test_bitset.m	/^:- pred is_singleton(test_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
test_bitset.list_to_set	test_bitset.m	/^:- func list_to_set(list(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
test_bitset.list_to_set	test_bitset.m	/^:- pred list_to_set(list(T)::in, test_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
test_bitset.make_singleton_set	test_bitset.m	/^:- func make_singleton_set(T) = test_bitset(T) <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:func
test_bitset.make_singleton_set	test_bitset.m	/^:- pred make_singleton_set(test_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:pred
test_bitset.member	test_bitset.m	/^:- pred member(T, test_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
test_bitset.one_argument	test_bitset.m	/^    ;       one_argument(string,$/;kq|-;/\<test_bitset.one_argument\>/;'q;"	kind:cons
test_bitset.remove	test_bitset.m	/^:- pred remove(T::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
test_bitset.remove_least	test_bitset.m	/^:- pred remove_least(T::out, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<remove_least\>/;'q;"	kind:pred
test_bitset.remove_list	test_bitset.m	/^:- pred remove_list(list(T)::in, test_bitset(T)::in, test_bitset(T)::out)$/;kq|/^\<remove_list\>/;'q;"	kind:pred
test_bitset.set_to_bitset	test_bitset.m	/^:- func set_to_bitset(set(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<set_to_bitset\>/;'q;"	kind:func
test_bitset.singleton_set	test_bitset.m	/^:- func singleton_set(T) = test_bitset(T) <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:func
test_bitset.singleton_set	test_bitset.m	/^:- pred singleton_set(test_bitset(T)::out, T::in) is det <= enum(T).$/;kq|/^\<singleton_set\>/;'q;"	kind:pred
test_bitset.sorted_list_to_set	test_bitset.m	/^:- func sorted_list_to_set(list(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:func
test_bitset.sorted_list_to_set	test_bitset.m	/^:- pred sorted_list_to_set(list(T)::in, test_bitset(T)::out) is det <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:pred
test_bitset.subset	test_bitset.m	/^:- pred subset(test_bitset(T)::in, test_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
test_bitset.superset	test_bitset.m	/^:- pred superset(test_bitset(T)::in, test_bitset(T)::in) is semidet.$/;kq|/^\<superset\>/;'q;"	kind:pred
test_bitset.to_set	test_bitset.m	/^:- func to_set(test_bitset(T)) = set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
test_bitset.to_sorted_list	test_bitset.m	/^:- func to_sorted_list(test_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
test_bitset.to_sorted_list	test_bitset.m	/^:- pred to_sorted_list(test_bitset(T)::in, list(T)::out) is det <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
test_bitset.two_arguments	test_bitset.m	/^    ;       two_arguments(string,$/;kq|-;/\<test_bitset.two_arguments\>/;'q;"	kind:cons
test_bitset.union	test_bitset.m	/^:- func union(test_bitset(T), test_bitset(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<union\>/;'q;"	kind:func
test_bitset.union	test_bitset.m	/^:- pred union(test_bitset(T)::in,$/;kq|/^\<union\>/;'q;"	kind:pred
test_bitset.union_list	test_bitset.m	/^:- func union_list(list(test_bitset(T))) = test_bitset(T) <= enum(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
test_bitset.union_list	test_bitset.m	/^:- pred union_list(list(test_bitset(T))::in, test_bitset(T)::out) is det$/;kq|/^\<union_list\>/;'q;"	kind:pred
test_bitset.zero_argument	test_bitset.m	/^    --->    zero_argument(string,$/;kq|-;/\<test_bitset.zero_argument\>/;'q;"	kind:cons
test_dates	calendar.m	/^:- func test_dates = list(date).$/;kq|/^\<test_dates\>/;'q;"	kind:func	file:
text	io.m	/^    --->    text$/;kq|-;/\<text\>/;'q;"	kind:cons
text	pprint.m	/^:- func text(string)        = doc.$/;kq|/^\<text\>/;'q;"	kind:func
text_file	string.m	/^    --->    text_file(string).$/;kq|-;/\<text_file\>/;'q;"	kind:cons
text_file	string.m	/^:- type text_file$/;kq|-;/\<text_file\>/;'q;"	kind:type
text_input_stream	io.m	/^:- type io.text_input_stream == io.input_stream.$/;kq|-;/\<text_input_stream\>/;'q;"	kind:type
text_output_stream	io.m	/^:- type io.text_output_stream == io.output_stream.$/;kq|-;/\<text_output_stream\>/;'q;"	kind:type
this_directory	dir.m	/^:- func dir.this_directory = string.$/;kq|/^\<dir.this_directory\>/;'q;"	kind:func
this_directory	dir.m	/^:- pred dir.this_directory(string::out) is det.$/;kq|/^\<dir.this_directory\>/;'q;"	kind:pred
thread.call_back_to_mercury	thread.m	/^:- pred call_back_to_mercury(pred(io, io), io, io).$/;kq|/^\<call_back_to_mercury\>/;'q;"	kind:pred	file:
thread.can_spawn	thread.m	/^:- pred can_spawn is semidet.$/;kq|/^\<can_spawn\>/;'q;"	kind:pred
thread.channel.channel	thread.channel.m	/^    --->    channel($/;kq|-;/\<thread.channel.channel\>/;'q;"	kind:cons	file:
thread.channel.channel	thread.channel.m	/^:- type channel(T)$/;kq|-;/\<thread.channel.channel\>/;'q;"	kind:type	file:
thread.channel.channel.init	thread.channel.m	/^:- pred channel.init(channel(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.init\>/;'q;"	kind:pred
thread.channel.channel.put	thread.channel.m	/^:- pred channel.put(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.put\>/;'q;"	kind:pred
thread.channel.channel.take	thread.channel.m	/^:- pred channel.take(channel(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<channel.take\>/;'q;"	kind:pred
thread.channel.channel.untake	thread.channel.m	/^:- pred channel.untake(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.untake\>/;'q;"	kind:pred
thread.channel.item	thread.channel.m	/^    --->    item($/;kq|-;/\<thread.channel.item\>/;'q;"	kind:cons	file:
thread.channel.item	thread.channel.m	/^:- type item(T)$/;kq|-;/\<thread.channel.item\>/;'q;"	kind:type	file:
thread.channel.stream	thread.channel.m	/^:- type stream(T) == mvar(item(T)).$/;kq|-;/\<thread.channel.stream\>/;'q;"	kind:type	file:
thread.mvar.mvar	thread.mvar.m	/^    --->    mvar($/;kq|-;/\<thread.mvar.mvar\>/;'q;"	kind:cons	file:
thread.mvar.mvar	thread.mvar.m	/^:- type mvar(T)$/;kq|-;/\<thread.mvar.mvar\>/;'q;"	kind:type	file:
thread.mvar.mvar.init	thread.mvar.m	/^:- impure func mvar.init = (mvar(T)::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:func
thread.mvar.mvar.init	thread.mvar.m	/^:- pred mvar.init(mvar(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.init\>/;'q;"	kind:pred
thread.mvar.mvar.put	thread.mvar.m	/^:- pred mvar.put(mvar(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<mvar.put\>/;'q;"	kind:pred
thread.mvar.mvar.read	thread.mvar.m	/^:- pred mvar.read(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.read\>/;'q;"	kind:pred
thread.mvar.mvar.take	thread.mvar.m	/^:- pred mvar.take(mvar(T)::in, T::out, io::di, io::uo) is det.$/;kq|/^\<mvar.take\>/;'q;"	kind:pred
thread.mvar.mvar.try_put	thread.mvar.m	/^:- pred mvar.try_put(mvar(T)::in, T::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_put\>/;'q;"	kind:pred
thread.mvar.mvar.try_take	thread.mvar.m	/^:- pred mvar.try_take(mvar(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_take\>/;'q;"	kind:pred
thread.semaphore.try_wait_2	thread.semaphore.m	/^:- pred try_wait_2(semaphore::in, int::out, io::di, io::uo) is det.$/;kq|/^\<try_wait_2\>/;'q;"	kind:pred	file:
thread.spawn	thread.m	/^:- pred spawn(pred(io, io)::in(pred(di, uo) is cc_multi),$/;kq|/^\<spawn\>/;'q;"	kind:pred
thread.yield	thread.m	/^:- pred yield(io::di, io::uo) is det.$/;kq|/^\<yield\>/;'q;"	kind:pred
three	rtree.m	/^    ;       three(K, rtree_2(K, V), K, rtree_2(K, V), K, rtree_2(K, V)) $/;kq|-;/\<three\>/;'q;"	kind:cons	file:
three	set_ctree234.m	/^    ;       three(T, T, set_tree234(T), set_tree234(T), set_tree234(T))$/;kq|-;/\<three\>/;'q;"	kind:cons	file:
three	set_ctree234.m	/^:- inst three(E, T) ---> three(E, E, T, T, T).$/;kq|-;/\<three\>/;'q;"	kind:inst	file:
three	set_tree234.m	/^    ;       three(T, T, set_tree234(T), set_tree234(T), set_tree234(T))$/;kq|-;/\<three\>/;'q;"	kind:cons	file:
three	set_tree234.m	/^:- inst three(E, T) ---> three(E, E, T, T, T).$/;kq|-;/\<three\>/;'q;"	kind:inst	file:
three	tree234.m	/^    ;       three(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V))$/;kq|-;/\<three\>/;'q;"	kind:cons
three	tree234.m	/^:- inst three(K, V, T) ---> three(K, V, K, V, T, T, T).$/;kq|-;/\<three\>/;'q;"	kind:inst	file:
throw	exception.m	/^:- func throw(T) = _ is erroneous.$/;kq|/^\<throw\>/;'q;"	kind:func
throw	exception.m	/^:- pred throw(T::in) is erroneous.$/;kq|/^\<throw\>/;'q;"	kind:pred
throw_bitmap_error	bitmap.m	/^:- func throw_bitmap_error(string) = _ is erroneous.$/;kq|/^\<throw_bitmap_error\>/;'q;"	kind:func	file:
throw_bitmap_error	bitmap.m	/^:- pred throw_bitmap_error(string::in) is erroneous.$/;kq|/^\<throw_bitmap_error\>/;'q;"	kind:pred	file:
throw_bounds_error	bitmap.m	/^:- func throw_bounds_error(bitmap, string, bit_index) = _ is erroneous.$/;kq|/^\<throw_bounds_error\>/;'q;"	kind:func	file:
throw_bounds_error	bitmap.m	/^:- func throw_bounds_error(bitmap, string, bit_index, num_bits) = _$/;kq|/^\<throw_bounds_error\>/;'q;"	kind:func	file:
throw_bounds_error	bitmap.m	/^:- pred throw_bounds_error(bitmap::in, string::in, bit_index::in, num_bits::in)$/;kq|/^\<throw_bounds_error\>/;'q;"	kind:pred
throw_if_near_stack_limits	exception.m	/^:- impure pred throw_if_near_stack_limits is det.$/;kq|/^\<throw_if_near_stack_limits\>/;'q;"	kind:pred
throw_impl	exception.m	/^:- pred throw_impl(univ::in) is erroneous.$/;kq|/^\<throw_impl\>/;'q;"	kind:pred	file:
throw_io_error	io.m	/^:- pred throw_io_error(string::in) is erroneous.$/;kq|/^\<throw_io_error\>/;'q;"	kind:pred	file:
thursday	calendar.m	/^    ;       thursday$/;kq|-;/\<thursday\>/;'q;"	kind:cons
ti_info	erlang_rtti_implementation.m	/^:- type ti_info(T) == maybe({type_info, pti_info(T)}).$/;kq|-;/\<ti_info\>/;'q;"	kind:type	file:
ticket	private_builtin.m	/^:- type ticket == c_pointer.$/;kq|-;/\<ticket\>/;'q;"	kind:type
ticket_counter	private_builtin.m	/^:- type ticket_counter == c_pointer.$/;kq|-;/\<ticket_counter\>/;'q;"	kind:type
time	time.m	/^:- pred time.time(time_t::out, io::di, io::uo) is det.$/;kq|/^\<time.time\>/;'q;"	kind:pred
time.asctime	time.m	/^:- func time.asctime(tm) = string.$/;kq|/^\<time.asctime\>/;'q;"	kind:func
time.c_clk_tck	time.m	/^:- func time.c_clk_tck = int.$/;kq|/^\<time.c_clk_tck\>/;'q;"	kind:func	file:
time.c_clock	time.m	/^:- pred time.c_clock(int::out, io::di, io::uo) is det.$/;kq|/^\<time.c_clock\>/;'q;"	kind:pred	file:
time.c_difftime	time.m	/^:- pred time.c_difftime(time_t_rep::in, time_t_rep::in, float::out) is det.$/;kq|/^\<time.c_difftime\>/;'q;"	kind:pred	file:
time.c_gmtime	time.m	/^:- pred time.c_gmtime(time_t_rep::in, int::out, int::out, int::out, int::out,$/;kq|/^\<time.c_gmtime\>/;'q;"	kind:pred	file:
time.c_localtime	time.m	/^:- pred time.c_localtime(time_t_rep::in, int::out, int::out, int::out,$/;kq|/^\<time.c_localtime\>/;'q;"	kind:pred	file:
time.c_mktime	time.m	/^:- pred time.c_mktime(int::in, int::in, int::in, int::in, int::in, int::in,$/;kq|/^\<time.c_mktime\>/;'q;"	kind:pred	file:
time.c_time	time.m	/^:- pred time.c_time(time_t_rep::out, io::di, io::uo) is det.$/;kq|/^\<time.c_time\>/;'q;"	kind:pred	file:
time.c_times	time.m	/^:- pred time.c_times(int::out, int::out, int::out, int::out, int::out,$/;kq|/^\<time.c_times\>/;'q;"	kind:pred	file:
time.clk_tck	time.m	/^:- func time.clk_tck = int.$/;kq|/^\<time.clk_tck\>/;'q;"	kind:func
time.clock	time.m	/^:- pred time.clock(clock_t::out, io::di, io::uo) is det.$/;kq|/^\<time.clock\>/;'q;"	kind:pred
time.clock_t	time.m	/^:- type clock_t == int.$/;kq|-;/\<time.clock_t\>/;'q;"	kind:type
time.clocks_per_sec	time.m	/^:- func time.clocks_per_sec = int.$/;kq|/^\<time.clocks_per_sec\>/;'q;"	kind:func
time.compare_time_t_reps	time.m	/^:- pred compare_time_t_reps(comparison_result::uo,$/;kq|/^\<compare_time_t_reps\>/;'q;"	kind:pred	file:
time.construct_time_t	time.m	/^:- func construct_time_t(time_t_rep) = time_t.$/;kq|/^\<construct_time_t\>/;'q;"	kind:func
time.ctime	time.m	/^:- func time.ctime(time_t) = string.$/;kq|/^\<time.ctime\>/;'q;"	kind:func
time.daylight_time	time.m	/^    ;       daylight_time.  % yes, DST is in effect$/;kq|-;/\<time.daylight_time\>/;'q;"	kind:cons
time.difftime	time.m	/^:- func time.difftime(time_t, time_t) = float.$/;kq|/^\<time.difftime\>/;'q;"	kind:func
time.dst	time.m	/^:- type dst$/;kq|-;/\<time.dst\>/;'q;"	kind:type
time.gmtime	time.m	/^:- func time.gmtime(time_t) = tm.$/;kq|/^\<time.gmtime\>/;'q;"	kind:func
time.int_to_maybe_dst	time.m	/^:- func int_to_maybe_dst(int) = maybe(dst).$/;kq|/^\<int_to_maybe_dst\>/;'q;"	kind:func	file:
time.localtime	time.m	/^:- func time.localtime(time_t) = tm.$/;kq|/^\<time.localtime\>/;'q;"	kind:func
time.maybe_dst_to_int	time.m	/^:- func maybe_dst_to_int(maybe(dst)) = int.$/;kq|/^\<maybe_dst_to_int\>/;'q;"	kind:func	file:
time.mktime	time.m	/^:- func time.mktime(tm) = time_t.$/;kq|/^\<time.mktime\>/;'q;"	kind:func
time.mon_name	time.m	/^:- func mon_name(int) = string.$/;kq|/^\<mon_name\>/;'q;"	kind:func	file:
time.mon_name	time.m	/^:- pred mon_name(int::in, string::out) is semidet.$/;kq|/^\<mon_name\>/;'q;"	kind:pred	file:
time.standard_time	time.m	/^    --->    standard_time   % no, DST is not in effect$/;kq|-;/\<time.standard_time\>/;'q;"	kind:cons
time.time	time.m	/^:- pred time.time(time_t::out, io::di, io::uo) is det.$/;kq|/^\<time.time\>/;'q;"	kind:pred
time.time_t_is_invalid	time.m	/^:- pred time.time_t_is_invalid(time_t_rep::in) is semidet.$/;kq|/^\<time.time_t_is_invalid\>/;'q;"	kind:pred	file:
time.times	time.m	/^:- pred time.times(tms::out, clock_t::out, io::di, io::uo) is det.$/;kq|/^\<time.times\>/;'q;"	kind:pred
time.tm	time.m	/^    --->    tm($/;kq|-;/\<time.tm\>/;'q;"	kind:cons
time.tm	time.m	/^:- type tm$/;kq|-;/\<time.tm\>/;'q;"	kind:type
time.tm_dst	time.m	/^                tm_dst  :: maybe(dst)   % IsDST (is DST in effect?)$/;kq|-;/\<time.tm_dst\>/;'q;"	kind:fld
time.tm_hour	time.m	/^                tm_hour :: int,         % Hours (after midnight, 0-23)$/;kq|-;/\<time.tm_hour\>/;'q;"	kind:fld
time.tm_mday	time.m	/^                tm_mday :: int,         % MonthDay (1-31)$/;kq|-;/\<time.tm_mday\>/;'q;"	kind:fld
time.tm_min	time.m	/^                tm_min  :: int,         % Minutes (0-59)$/;kq|-;/\<time.tm_min\>/;'q;"	kind:fld
time.tm_mon	time.m	/^                tm_mon  :: int,         % Month (number since January, 0-11)$/;kq|-;/\<time.tm_mon\>/;'q;"	kind:fld
time.tm_sec	time.m	/^                tm_sec  :: int,         % Seconds (0-61)$/;kq|-;/\<time.tm_sec\>/;'q;"	kind:fld
time.tm_wday	time.m	/^                tm_wday :: int,         % WeekDay (number since Sunday, 0-6)$/;kq|-;/\<time.tm_wday\>/;'q;"	kind:fld
time.tm_yday	time.m	/^                tm_yday :: int,         % YearDay (number since Jan 1st, 0-365)$/;kq|-;/\<time.tm_yday\>/;'q;"	kind:fld
time.tm_year	time.m	/^                tm_year :: int,         % Year (number since 1900)$/;kq|-;/\<time.tm_year\>/;'q;"	kind:fld
time.tms	time.m	/^    --->    tms($/;kq|-;/\<time.tms\>/;'q;"	kind:cons
time.tms	time.m	/^:- type tms$/;kq|-;/\<time.tms\>/;'q;"	kind:type
time.wday_name	time.m	/^:- func wday_name(int) = string.$/;kq|/^\<wday_name\>/;'q;"	kind:func	file:
time.wday_name	time.m	/^:- pred wday_name(int::in, string::out) is semidet.$/;kq|/^\<wday_name\>/;'q;"	kind:pred	file:
time_error	time.m	/^    --->    time_error(string). % Error message$/;kq|-;/\<time_error\>/;'q;"	kind:cons
time_error	time.m	/^:- type time_error$/;kq|-;/\<time_error\>/;'q;"	kind:type
time_t	time.m	/^:- type time_t ---> time_t(time_t_rep).$/;kq|-;/\<time_t\>/;'q;"	kind:cons	file:
time_t	time.m	/^:- type time_t ---> time_t(time_t_rep).$/;kq|-;/\<time_t\>/;'q;"	kind:type	file:
time_t_is_invalid	time.m	/^:- pred time.time_t_is_invalid(time_t_rep::in) is semidet.$/;kq|/^\<time.time_t_is_invalid\>/;'q;"	kind:pred	file:
time_t_rep	time.m	/^:- type time_t_rep ---> time_t_rep(c_pointer).$/;kq|-;/\<time_t_rep\>/;'q;"	kind:cons	file:
time_t_rep	time.m	/^:- type time_t_rep ---> time_t_rep(c_pointer).$/;kq|-;/\<time_t_rep\>/;'q;"	kind:type	file:
times	int.m	/^:- func int.times(int, int) = int.$/;kq|/^\<int.times\>/;'q;"	kind:func
times	time.m	/^:- pred time.times(tms::out, clock_t::out, io::di, io::uo) is det.$/;kq|/^\<time.times\>/;'q;"	kind:pred
times_bits_per_int	int.m	/^:- func int.times_bits_per_int(int) = int.$/;kq|/^\<int.times_bits_per_int\>/;'q;"	kind:func
tm	time.m	/^    --->    tm($/;kq|-;/\<tm\>/;'q;"	kind:cons
tm	time.m	/^:- type tm$/;kq|-;/\<tm\>/;'q;"	kind:type
tm_dst	time.m	/^                tm_dst  :: maybe(dst)   % IsDST (is DST in effect?)$/;kq|-;/\<tm_dst\>/;'q;"	kind:fld
tm_hour	time.m	/^                tm_hour :: int,         % Hours (after midnight, 0-23)$/;kq|-;/\<tm_hour\>/;'q;"	kind:fld
tm_mday	time.m	/^                tm_mday :: int,         % MonthDay (1-31)$/;kq|-;/\<tm_mday\>/;'q;"	kind:fld
tm_min	time.m	/^                tm_min  :: int,         % Minutes (0-59)$/;kq|-;/\<tm_min\>/;'q;"	kind:fld
tm_mon	time.m	/^                tm_mon  :: int,         % Month (number since January, 0-11)$/;kq|-;/\<tm_mon\>/;'q;"	kind:fld
tm_sec	time.m	/^                tm_sec  :: int,         % Seconds (0-61)$/;kq|-;/\<tm_sec\>/;'q;"	kind:fld
tm_to_date	calendar.m	/^:- func tm_to_date(time.tm) = date.$/;kq|/^\<tm_to_date\>/;'q;"	kind:func	file:
tm_wday	time.m	/^                tm_wday :: int,         % WeekDay (number since Sunday, 0-6)$/;kq|-;/\<tm_wday\>/;'q;"	kind:fld
tm_yday	time.m	/^                tm_yday :: int,         % YearDay (number since Jan 1st, 0-365)$/;kq|-;/\<tm_yday\>/;'q;"	kind:fld
tm_year	time.m	/^                tm_year :: int,         % Year (number since 1900)$/;kq|-;/\<tm_year\>/;'q;"	kind:fld
tms	time.m	/^    --->    tms($/;kq|-;/\<tms\>/;'q;"	kind:cons
tms	time.m	/^:- type tms$/;kq|-;/\<tms\>/;'q;"	kind:type
to_assoc_list	bag.m	/^:- func bag.to_assoc_list(bag(T)) = assoc_list(T, int).$/;kq|/^\<bag.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	bag.m	/^:- pred bag.to_assoc_list(bag(T)::in, assoc_list(T, int)::out) is det.$/;kq|/^\<bag.to_assoc_list\>/;'q;"	kind:pred
to_assoc_list	bimap.m	/^:- func bimap.to_assoc_list(bimap(K, V)) = assoc_list(K, V).$/;kq|/^\<bimap.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	bimap.m	/^:- pred bimap.to_assoc_list(bimap(K, V)::in, assoc_list(K, V)::out) is det.$/;kq|/^\<bimap.to_assoc_list\>/;'q;"	kind:pred
to_assoc_list	digraph.m	/^:- func digraph.to_assoc_list(digraph(T)) = assoc_list(T, T).$/;kq|/^\<digraph.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	digraph.m	/^:- pred digraph.to_assoc_list(digraph(T)::in, assoc_list(T, T)::out) is det.$/;kq|/^\<digraph.to_assoc_list\>/;'q;"	kind:pred
to_assoc_list	hash_table.m	/^:- func to_assoc_list(hash_table(K, V)) = assoc_list(K, V).$/;kq|/^\<to_assoc_list\>/;'q;"	kind:func
to_assoc_list	map.m	/^:- func map.to_assoc_list(map(K, V)) = assoc_list(K, V).$/;kq|/^\<map.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	map.m	/^:- pred map.to_assoc_list(map(K, V)::in, assoc_list(K, V)::out) is det.$/;kq|/^\<map.to_assoc_list\>/;'q;"	kind:pred
to_assoc_list	multi_map.m	/^:- func multi_map.to_assoc_list(multi_map(K, V)) = assoc_list(K, list(V)).$/;kq|/^\<multi_map.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	multi_map.m	/^:- pred multi_map.to_assoc_list(multi_map(K, V)::in,$/;kq|/^\<multi_map.to_assoc_list\>/;'q;"	kind:pred
to_assoc_list	pqueue.m	/^:- func pqueue.to_assoc_list(pqueue(K, V)) = assoc_list(K, V).$/;kq|/^\<pqueue.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	pqueue.m	/^:- pred pqueue.to_assoc_list(pqueue(K, V)::in, assoc_list(K, V)::out)$/;kq|/^\<pqueue.to_assoc_list\>/;'q;"	kind:pred
to_assoc_list	rbtree.m	/^:- func rbtree.to_assoc_list(rbtree(K, V)) = assoc_list(K, V).$/;kq|/^\<rbtree.to_assoc_list\>/;'q;"	kind:func
to_assoc_list	version_hash_table.m	/^:- func to_assoc_list(version_hash_table(K, V)) = assoc_list(K, V).$/;kq|/^\<to_assoc_list\>/;'q;"	kind:func
to_assoc_list_2	digraph.m	/^:- pred digraph.to_assoc_list_2(key_set_map(T)::in, list(int)::in,$/;kq|/^\<digraph.to_assoc_list_2\>/;'q;"	kind:pred	file:
to_assoc_list_2	hash_table.m	/^:- pred to_assoc_list_2(hash_table_alist(K, V)::in,$/;kq|/^\<to_assoc_list_2\>/;'q;"	kind:pred	file:
to_assoc_list_2	version_hash_table.m	/^:- pred to_assoc_list_2(hash_table_alist(K, V)::in,$/;kq|/^\<to_assoc_list_2\>/;'q;"	kind:pred	file:
to_byte_string	bitmap.m	/^:- func to_byte_string(bitmap) = string.$/;kq|/^\<to_byte_string\>/;'q;"	kind:func
to_capital_hex	string.m	/^:- func to_capital_hex(integer) = string.$/;kq|/^\<to_capital_hex\>/;'q;"	kind:func	file:
to_char_list	string.m	/^:- func string.to_char_list(string) = list(char).$/;kq|/^\<string.to_char_list\>/;'q;"	kind:func
to_char_list	string.m	/^:- pred string.to_char_list(string, list(char)).$/;kq|/^\<string.to_char_list\>/;'q;"	kind:pred
to_char_list_2	string.m	/^:- pred string.to_char_list_2(string, list(char)).$/;kq|/^\<string.to_char_list_2\>/;'q;"	kind:pred	file:
to_code_unit_list	string.m	/^:- pred string.to_code_unit_list(string::in, list(int)::out) is det.$/;kq|/^\<string.to_code_unit_list\>/;'q;"	kind:pred
to_code_unit_list_2	string.m	/^:- pred string.to_code_unit_list_2(string::in, int::in, int::in,$/;kq|/^\<string.to_code_unit_list_2\>/;'q;"	kind:pred	file:
to_doc	pprint.m	/^:- func to_doc(T)           = doc.$/;kq|/^\<to_doc\>/;'q;"	kind:func
to_doc	pprint.m	/^:- func to_doc(int, T)      = doc.$/;kq|/^\<to_doc\>/;'q;"	kind:func
to_doc	pprint.m	/^:- func to_doc(int, priority, T) = doc.$/;kq|/^\<to_doc\>/;'q;"	kind:func	file:
to_flat_assoc_list	multi_map.m	/^:- func multi_map.to_flat_assoc_list(multi_map(K, V)) = assoc_list(K, V).$/;kq|/^\<multi_map.to_flat_assoc_list\>/;'q;"	kind:func
to_flat_assoc_list	multi_map.m	/^:- pred multi_map.to_flat_assoc_list(multi_map(K, V)::in,$/;kq|/^\<multi_map.to_flat_assoc_list\>/;'q;"	kind:pred
to_float	string.m	/^:- pred string.to_float(string::in, float::out) is semidet.$/;kq|/^\<string.to_float\>/;'q;"	kind:pred
to_hex	string.m	/^:- func to_hex(integer) = string.$/;kq|/^\<to_hex\>/;'q;"	kind:func	file:
to_int	backjump.m	/^:- func to_int(choice_id) = int.$/;kq|/^\<to_int\>/;'q;"	kind:func
to_int	char.m	/^:- func char.to_int(char) = int.$/;kq|/^\<char.to_int\>/;'q;"	kind:func
to_int	char.m	/^:- pred char.to_int(char, int).$/;kq|/^\<char.to_int\>/;'q;"	kind:pred
to_int	enum.m	/^	func to_int(T) = int,$/;kq|-;/\<to_int\>/;'q;"	kind:tcm
to_int	string.m	/^:- pred string.to_int(string::in, int::out) is semidet.$/;kq|/^\<string.to_int\>/;'q;"	kind:pred
to_key_assoc_list	digraph.m	/^:- func digraph.to_key_assoc_list(digraph(T)) =$/;kq|/^\<digraph.to_key_assoc_list\>/;'q;"	kind:func
to_key_assoc_list	digraph.m	/^:- pred digraph.to_key_assoc_list(digraph(T)::in,$/;kq|/^\<digraph.to_key_assoc_list\>/;'q;"	kind:pred
to_key_assoc_list_2	digraph.m	/^:- pred digraph.to_key_assoc_list_2(key_set_map(T)::in, list(int)::in,$/;kq|/^\<digraph.to_key_assoc_list_2\>/;'q;"	kind:pred	file:
to_list	array.m	/^:- func array.to_list(array(T)) = list(T).$/;kq|/^\<array.to_list\>/;'q;"	kind:func
to_list	array.m	/^:- pred array.to_list(array(T), list(T)).$/;kq|/^\<array.to_list\>/;'q;"	kind:pred
to_list	bag.m	/^:- func bag.to_list(bag(T)) = list(T).$/;kq|/^\<bag.to_list\>/;'q;"	kind:func
to_list	bag.m	/^:- pred bag.to_list(bag(T)::in, list(T)::out) is det.$/;kq|/^\<bag.to_list\>/;'q;"	kind:pred
to_list	bt_array.m	/^:- func bt_array.to_list(bt_array(T)) = list(T).$/;kq|/^\<bt_array.to_list\>/;'q;"	kind:func
to_list	bt_array.m	/^:- pred bt_array.to_list(bt_array(T)::in, list(T)::out) is det.$/;kq|/^\<bt_array.to_list\>/;'q;"	kind:pred
to_list	queue.m	/^:- func queue.to_list(queue(T)) = list(T).$/;kq|/^\<queue.to_list\>/;'q;"	kind:func
to_list	version_array.m	/^:- func to_list(version_array(T)) = list(T).$/;kq|/^\<to_list\>/;'q;"	kind:func
to_list_2	bag.m	/^:- pred bag.to_list_2(assoc_list(T, int)::in, list(T)::out) is det.$/;kq|/^\<bag.to_list_2\>/;'q;"	kind:pred	file:
to_list_without_duplicates	bag.m	/^:- func bag.to_list_without_duplicates(bag(T)) = list(T).$/;kq|/^\<bag.to_list_without_duplicates\>/;'q;"	kind:func
to_list_without_duplicates	bag.m	/^:- pred bag.to_list_without_duplicates(bag(T)::in, list(T)::out) is det.$/;kq|/^\<bag.to_list_without_duplicates\>/;'q;"	kind:pred
to_lower	char.m	/^:- func char.to_lower(char) = char.$/;kq|/^\<char.to_lower\>/;'q;"	kind:func
to_lower	char.m	/^:- pred char.to_lower(char::in, char::out) is det.$/;kq|/^\<char.to_lower\>/;'q;"	kind:pred
to_lower	string.m	/^:- func string.to_lower(string::in) = (string::uo) is det.$/;kq|/^\<string.to_lower\>/;'q;"	kind:func
to_lower	string.m	/^:- pred string.to_lower(string, string).$/;kq|/^\<string.to_lower\>/;'q;"	kind:pred
to_octal	string.m	/^:- func to_octal(integer) = string.$/;kq|/^\<to_octal\>/;'q;"	kind:func	file:
to_set	bag.m	/^:- func bag.to_set(bag(T)) = set(T).$/;kq|/^\<bag.to_set\>/;'q;"	kind:func
to_set	fat_sparse_bitset.m	/^:- func to_set(fat_sparse_bitset(T)) = set.set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
to_set	set_tree234.m	/^:- func to_set(set_tree234(T)) = set.set(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
to_set	sparse_bitset.m	/^:- func to_set(sparse_bitset(T)) = set.set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
to_set	test_bitset.m	/^:- func to_set(test_bitset(T)) = set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
to_set	tree_bitset.m	/^:- func to_set(tree_bitset(T)) = set.set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
to_set_without_duplicates	bag.m	/^:- func bag.to_set_without_duplicates(bag(T)) = set(T).$/;kq|/^\<bag.to_set_without_duplicates\>/;'q;"	kind:func
to_set_without_duplicates	bag.m	/^:- pred bag.to_set_without_duplicates(bag(T)::in, set(T)::out) is det.$/;kq|/^\<bag.to_set_without_duplicates\>/;'q;"	kind:pred
to_sorted_assoc_list	map.m	/^:- func map.to_sorted_assoc_list(map(K, V)) = assoc_list(K, V).$/;kq|/^\<map.to_sorted_assoc_list\>/;'q;"	kind:func
to_sorted_assoc_list	map.m	/^:- pred map.to_sorted_assoc_list(map(K, V)::in, assoc_list(K, V)::out) is det.$/;kq|/^\<map.to_sorted_assoc_list\>/;'q;"	kind:pred
to_sorted_list	fat_sparse_bitset.m	/^:- func to_sorted_list(fat_sparse_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
to_sorted_list	fat_sparse_bitset.m	/^:- pred to_sorted_list(fat_sparse_bitset(T)::in, list(T)::out)$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	set.m	/^:- func set.to_sorted_list(set(T)) = list(T).$/;kq|/^\<set.to_sorted_list\>/;'q;"	kind:func
to_sorted_list	set.m	/^:- pred set.to_sorted_list(set(T)::in, list(T)::out) is det.$/;kq|/^\<set.to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	set_bbbtree.m	/^:- func set_bbbtree.to_sorted_list(set_bbbtree(T)) = list(T).$/;kq|/^\<set_bbbtree.to_sorted_list\>/;'q;"	kind:func
to_sorted_list	set_bbbtree.m	/^:- pred set_bbbtree.to_sorted_list(set_bbbtree(T), list(T)).$/;kq|/^\<set_bbbtree.to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	set_ctree234.m	/^:- func set_ctree234.to_sorted_list(set_ctree234(T)) = list(T).$/;kq|/^\<set_ctree234.to_sorted_list\>/;'q;"	kind:func
to_sorted_list	set_ordlist.m	/^:- func set_ordlist.to_sorted_list(set_ordlist(T)) = list(T).$/;kq|/^\<set_ordlist.to_sorted_list\>/;'q;"	kind:func
to_sorted_list	set_ordlist.m	/^:- pred set_ordlist.to_sorted_list(set_ordlist(T)::in, list(T)::out) is det.$/;kq|/^\<set_ordlist.to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	set_tree234.m	/^:- func set_tree234.to_sorted_list(set_tree234(T)) = list(T).$/;kq|/^\<set_tree234.to_sorted_list\>/;'q;"	kind:func
to_sorted_list	set_tree234.m	/^:- pred set_tree234.to_sorted_list(set_tree234(T)::in, list(T)::out) is det.$/;kq|/^\<set_tree234.to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	set_unordlist.m	/^:- func set_unordlist.to_sorted_list(set_unordlist(T)) = list(T).$/;kq|/^\<set_unordlist.to_sorted_list\>/;'q;"	kind:func
to_sorted_list	set_unordlist.m	/^:- pred set_unordlist.to_sorted_list(set_unordlist(T)::in, list(T)::out)$/;kq|/^\<set_unordlist.to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	sparse_bitset.m	/^:- func to_sorted_list(sparse_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
to_sorted_list	sparse_bitset.m	/^:- pred to_sorted_list(sparse_bitset(T)::in, list(T)::out) is det <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	test_bitset.m	/^:- func to_sorted_list(test_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
to_sorted_list	test_bitset.m	/^:- pred to_sorted_list(test_bitset(T)::in, list(T)::out) is det <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
to_sorted_list	tree_bitset.m	/^:- func to_sorted_list(tree_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
to_sorted_list	tree_bitset.m	/^:- pred to_sorted_list(tree_bitset(T)::in, list(T)::out) is det <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
to_sorted_list2	set_bbbtree.m	/^:- pred set_bbbtree.to_sorted_list2(set_bbbtree(T), list(T), list(T)).$/;kq|/^\<set_bbbtree.to_sorted_list2\>/;'q;"	kind:pred	file:
to_sorted_list_2	set_tree234.m	/^:- pred set_tree234.to_sorted_list_2(set_tree234(T)::in,$/;kq|/^\<set_tree234.to_sorted_list_2\>/;'q;"	kind:pred	file:
to_string	bitmap.m	/^:- func to_string(bitmap) = string.$/;kq|/^\<to_string\>/;'q;"	kind:func
to_string	integer.m	/^:- func integer.to_string(integer) = string.$/;kq|/^\<integer.to_string\>/;'q;"	kind:func
to_string	pprint.m	/^:- func to_string(int, doc) = string.$/;kq|/^\<to_string\>/;'q;"	kind:func
to_string	string.builder.m	/^:- func to_string(string.builder.state::di) = (string::uo) is det.$/;kq|/^\<to_string\>/;'q;"	kind:func
to_string_chars	bitmap.m	/^:- pred to_string_chars(int, bitmap, list(char), list(char)).$/;kq|/^\<to_string_chars\>/;'q;"	kind:pred	file:
to_upper	char.m	/^:- func char.to_upper(char) = char.$/;kq|/^\<char.to_upper\>/;'q;"	kind:func
to_upper	char.m	/^:- pred char.to_upper(char::in, char::out) is det.$/;kq|/^\<char.to_upper\>/;'q;"	kind:pred
to_upper	string.m	/^:- func string.to_upper(string::in) = (string::uo) is det.$/;kq|/^\<string.to_upper\>/;'q;"	kind:func
to_upper	string.m	/^:- pred string.to_upper(string, string).$/;kq|/^\<string.to_upper\>/;'q;"	kind:pred
to_utf16	char.m	/^:- pred char.to_utf16(char::in, list(int)::out) is semidet.$/;kq|/^\<char.to_utf16\>/;'q;"	kind:pred
to_utf8	char.m	/^:- pred char.to_utf8(char::in, list(int)::out) is semidet.$/;kq|/^\<char.to_utf8\>/;'q;"	kind:pred
to_xml	term_to_xml.m	/^    func to_xml(T::in) = (xml::out(xml_doc)) is det$/;kq|-;/\<to_xml\>/;'q;"	kind:tcm
token	lexer.m	/^:- type token$/;kq|-;/\<token\>/;'q;"	kind:type
token_cons	lexer.m	/^    --->    token_cons(token, token_context, token_list)$/;kq|-;/\<token_cons\>/;'q;"	kind:cons
token_context	lexer.m	/^:- type token_context == int.   % line number$/;kq|-;/\<token_context\>/;'q;"	kind:type
token_list	lexer.m	/^:- type token_list$/;kq|-;/\<token_list\>/;'q;"	kind:type
token_nil	lexer.m	/^    ;       token_nil.$/;kq|-;/\<token_nil\>/;'q;"	kind:cons
token_to_string	lexer.m	/^:- pred token_to_string(token::in, string::out) is det.$/;kq|/^\<token_to_string\>/;'q;"	kind:pred
tokens_left	parser.m	/^                tokens_left :: token_list,$/;kq|-;/\<tokens_left\>/;'q;"	kind:fld	file:
told	io.m	/^:- pred io.told(io::di, io::uo) is det.$/;kq|/^\<io.told\>/;'q;"	kind:pred
told_binary	io.m	/^:- pred io.told_binary(io::di, io::uo) is det.$/;kq|/^\<io.told_binary\>/;'q;"	kind:pred
top	stack.m	/^:- pred stack.top(stack(T)::in, T::out) is semidet.$/;kq|/^\<stack.top\>/;'q;"	kind:pred
tr	robdd.m	/^:- func tr(robdd(T)) = robdd(T).$/;kq|/^\<tr\>/;'q;"	kind:func	file:
trace_evaluate_runtime_condition	private_builtin.m	/^:- semipure pred trace_evaluate_runtime_condition is semidet.$/;kq|/^\<trace_evaluate_runtime_condition\>/;'q;"	kind:pred
trace_get_io_state	private_builtin.m	/^:- semipure pred trace_get_io_state(io::uo) is det.$/;kq|/^\<trace_get_io_state\>/;'q;"	kind:pred
trace_set_io_state	private_builtin.m	/^:- impure pred trace_set_io_state(io::di) is det.$/;kq|/^\<trace_set_io_state\>/;'q;"	kind:pred
track	getopt.m	/^    ;       track($/;kq|-;/\<track\>/;'q;"	kind:cons	file:
track	getopt_io.m	/^    ;       track($/;kq|-;/\<track\>/;'q;"	kind:cons	file:
trail_ptr	solutions.m	/^:- type trail_ptr ---> trail_ptr(c_pointer).$/;kq|-;/\<trail_ptr\>/;'q;"	kind:cons	file:
trail_ptr	solutions.m	/^:- type trail_ptr ---> trail_ptr(c_pointer).$/;kq|-;/\<trail_ptr\>/;'q;"	kind:type	file:
trailed_nondet_pragma_foreign_code	private_builtin.m	/^:- pred trailed_nondet_pragma_foreign_code is erroneous.$/;kq|/^\<trailed_nondet_pragma_foreign_code\>/;'q;"	kind:pred
transform_value	map.m	/^:- pred map.transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<map.transform_value\>/;'q;"	kind:pred
transform_value	rbtree.m	/^:- pred rbtree.transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<rbtree.transform_value\>/;'q;"	kind:pred
transform_value	tree234.m	/^:- pred tree234.transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<tree234.transform_value\>/;'q;"	kind:pred
traverse	digraph.m	/^:- pred digraph.traverse(digraph(T), pred(T, A, A), pred(T, T, A, A), A, A).$/;kq|/^\<digraph.traverse\>/;'q;"	kind:pred
traverse_2	digraph.m	/^:- pred digraph.traverse_2(list(digraph_key(T)), digraph(T), pred(T, A, A),$/;kq|/^\<digraph.traverse_2\>/;'q;"	kind:pred	file:
traverse_children	digraph.m	/^:- pred digraph.traverse_children(list(digraph_key(T)), T, digraph(T),$/;kq|/^\<digraph.traverse_children\>/;'q;"	kind:pred	file:
tree	set_bbbtree.m	/^    ;       tree(T, int, set_bbbtree(T), set_bbbtree(T)).$/;kq|-;/\<tree\>/;'q;"	kind:cons	file:
tree234	tree234.m	/^:- type tree234(K, V)$/;kq|-;/\<tree234\>/;'q;"	kind:type
tree234.K	tree234.m	/^    --->    (K -> V).$/;kq|-;/\<tree234.K\>/;'q;"	kind:cons	file:
tree234.assoc_list_to_tree234	tree234.m	/^:- func tree234.assoc_list_to_tree234(assoc_list(K, V)) = tree234(K, V).$/;kq|/^\<tree234.assoc_list_to_tree234\>/;'q;"	kind:func
tree234.assoc_list_to_tree234	tree234.m	/^:- pred tree234.assoc_list_to_tree234(assoc_list(K, V)::in,$/;kq|/^\<tree234.assoc_list_to_tree234\>/;'q;"	kind:pred
tree234.count	tree234.m	/^:- func tree234.count(tree234(K, V)) = int.$/;kq|/^\<tree234.count\>/;'q;"	kind:func
tree234.count	tree234.m	/^:- pred tree234.count(tree234(K, V)::in, int::out) is det.$/;kq|/^\<tree234.count\>/;'q;"	kind:pred
tree234.delete	tree234.m	/^:- func tree234.delete(tree234(K, V), K) = tree234(K, V).$/;kq|/^\<tree234.delete\>/;'q;"	kind:func
tree234.delete	tree234.m	/^:- pred tree234.delete(K::in, tree234(K, V)::in, tree234(K, V)::out) is det.$/;kq|/^\<tree234.delete\>/;'q;"	kind:pred
tree234.delete_2	tree234.m	/^:- pred tree234.delete_2(tree234(K, V), K, tree234(K, V), bool).$/;kq|/^\<tree234.delete_2\>/;'q;"	kind:pred	file:
tree234.depth_levels	tree234.m	/^:- pred depth_levels(tree234(K, V)::in, int::in,$/;kq|/^\<depth_levels\>/;'q;"	kind:pred	file:
tree234.di_four	tree234.m	/^:- mode di_four  == di(uniq_four(unique, unique, unique)).$/;kq|-;/\<tree234.di_four\>/;'q;"	kind:mode	file:
tree234.di_three	tree234.m	/^:- mode di_three  == di(uniq_three(unique, unique, unique)).$/;kq|-;/\<tree234.di_three\>/;'q;"	kind:mode	file:
tree234.di_tree234	tree234.m	/^:- mode di_tree234       == uniq_tree234(ground, ground) >> dead.$/;kq|-;/\<tree234.di_tree234\>/;'q;"	kind:mode
tree234.di_tree234	tree234.m	/^:- mode di_tree234(K, V) == uniq_tree234(K, V) >> dead.$/;kq|-;/\<tree234.di_tree234\>/;'q;"	kind:mode
tree234.di_two	tree234.m	/^:- mode di_two  == di(uniq_two(unique, unique, unique)).$/;kq|-;/\<tree234.di_two\>/;'q;"	kind:mode	file:
tree234.empty	tree234.m	/^    --->    empty$/;kq|-;/\<tree234.empty\>/;'q;"	kind:cons
tree234.empty	tree234.m	/^    --->    empty$/;kq|-;/\<tree234.empty\>/;'q;"	kind:cons	file:
tree234.equal	tree234.m	/^:- pred tree234.equal(tree234(K, V)::in, tree234(K, V)::in) is semidet.$/;kq|/^\<tree234.equal\>/;'q;"	kind:pred
tree234.find_depth	tree234.m	/^:- pred find_depth(tree234(K, V)::in, int::out) is det.$/;kq|/^\<find_depth\>/;'q;"	kind:pred	file:
tree234.find_level	tree234.m	/^:- pred find_level(int::in, int::in, int::out,$/;kq|/^\<find_level\>/;'q;"	kind:pred	file:
tree234.fix_2node_t0	tree234.m	/^:- pred fix_2node_t0(K, V, tree234(K, V), tree234(K, V), tree234(K, V), bool).$/;kq|/^\<fix_2node_t0\>/;'q;"	kind:pred	file:
tree234.fix_2node_t1	tree234.m	/^:- pred fix_2node_t1(K, V, tree234(K, V), tree234(K, V), tree234(K, V), bool).$/;kq|/^\<fix_2node_t1\>/;'q;"	kind:pred	file:
tree234.fix_3node_t0	tree234.m	/^:- pred fix_3node_t0(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V),$/;kq|/^\<fix_3node_t0\>/;'q;"	kind:pred	file:
tree234.fix_3node_t1	tree234.m	/^:- pred fix_3node_t1(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V),$/;kq|/^\<fix_3node_t1\>/;'q;"	kind:pred	file:
tree234.fix_3node_t2	tree234.m	/^:- pred fix_3node_t2(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V),$/;kq|/^\<fix_3node_t2\>/;'q;"	kind:pred	file:
tree234.fix_4node_t0	tree234.m	/^:- pred fix_4node_t0(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t0\>/;'q;"	kind:pred	file:
tree234.fix_4node_t1	tree234.m	/^:- pred fix_4node_t1(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t1\>/;'q;"	kind:pred	file:
tree234.fix_4node_t2	tree234.m	/^:- pred fix_4node_t2(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t2\>/;'q;"	kind:pred	file:
tree234.fix_4node_t3	tree234.m	/^:- pred fix_4node_t3(K, V, K, V, K, V,$/;kq|/^\<fix_4node_t3\>/;'q;"	kind:pred	file:
tree234.foldl	tree234.m	/^:- func tree234.foldl(func(K, V, A) = A, tree234(K, V), A) = A.$/;kq|/^\<tree234.foldl\>/;'q;"	kind:func
tree234.foldl	tree234.m	/^:- pred tree234.foldl(pred(K, V, A, A), tree234(K, V), A, A).$/;kq|/^\<tree234.foldl\>/;'q;"	kind:pred
tree234.foldl2	tree234.m	/^:- pred tree234.foldl2(pred(K, V, A, A, B, B), tree234(K, V), A, A, B, B).$/;kq|/^\<tree234.foldl2\>/;'q;"	kind:pred
tree234.foldl2_values	tree234.m	/^:- pred tree234.foldl2_values(pred(V, A, A, B, B), tree234(K, V), A, A, B, B).$/;kq|/^\<tree234.foldl2_values\>/;'q;"	kind:pred
tree234.foldl3	tree234.m	/^:- pred tree234.foldl3(pred(K, V, A, A, B, B, C, C), tree234(K, V),$/;kq|/^\<tree234.foldl3\>/;'q;"	kind:pred
tree234.foldl3_values	tree234.m	/^:- pred tree234.foldl3_values(pred(V, A, A, B, B, C, C), tree234(K, V),$/;kq|/^\<tree234.foldl3_values\>/;'q;"	kind:pred
tree234.foldl4	tree234.m	/^:- pred tree234.foldl4(pred(K, V, A, A, B, B, C, C, D, D), tree234(K, V),$/;kq|/^\<tree234.foldl4\>/;'q;"	kind:pred
tree234.foldl_values	tree234.m	/^:- pred tree234.foldl_values(pred(V, A, A), tree234(K, V), A, A).$/;kq|/^\<tree234.foldl_values\>/;'q;"	kind:pred
tree234.foldr	tree234.m	/^:- func tree234.foldr(func(K, V, A) = A, tree234(K, V), A) = A.$/;kq|/^\<tree234.foldr\>/;'q;"	kind:func
tree234.foldr	tree234.m	/^:- pred tree234.foldr(pred(K, V, A, A), tree234(K, V), A, A).$/;kq|/^\<tree234.foldr\>/;'q;"	kind:pred
tree234.foldr2	tree234.m	/^:- pred tree234.foldr2(pred(K, V, A, A, B, B), tree234(K, V), A, A, B, B).$/;kq|/^\<tree234.foldr2\>/;'q;"	kind:pred
tree234.foldr3	tree234.m	/^:- pred tree234.foldr3(pred(K, V, A, A, B, B, C, C), tree234(K, V),$/;kq|/^\<tree234.foldr3\>/;'q;"	kind:pred
tree234.foldr4	tree234.m	/^:- pred tree234.foldr4(pred(K, V, A, A, B, B, C, C, D, D), tree234(K, V),$/;kq|/^\<tree234.foldr4\>/;'q;"	kind:pred
tree234.four	tree234.m	/^    ;       four(K, V, K, V, K, V, tree234(K, V), tree234(K, V),$/;kq|-;/\<tree234.four\>/;'q;"	kind:cons
tree234.four	tree234.m	/^:- inst four(K, V, T)  ---> four(K, V, K, V, K, V, T, T, T, T).$/;kq|-;/\<tree234.four\>/;'q;"	kind:inst	file:
tree234.from_sorted_assoc_list	tree234.m	/^:- pred tree234.from_sorted_assoc_list(assoc_list(K, V)::in,$/;kq|/^\<tree234.from_sorted_assoc_list\>/;'q;"	kind:pred
tree234.in_four	tree234.m	/^:- mode in_four  == in(four(ground, ground, ground)).$/;kq|-;/\<tree234.in_four\>/;'q;"	kind:mode	file:
tree234.in_three	tree234.m	/^:- mode in_three  == in(three(ground, ground, ground)).$/;kq|-;/\<tree234.in_three\>/;'q;"	kind:mode	file:
tree234.in_two	tree234.m	/^:- mode in_two  == in(two(ground, ground, ground)).$/;kq|-;/\<tree234.in_two\>/;'q;"	kind:mode	file:
tree234.init	tree234.m	/^:- func tree234.init = tree234(K, V).$/;kq|/^\<tree234.init\>/;'q;"	kind:func
tree234.init	tree234.m	/^:- pred tree234.init(tree234(K, V)::uo) is det.$/;kq|/^\<tree234.init\>/;'q;"	kind:pred
tree234.insert	tree234.m	/^:- pred tree234.insert(K::in, V::in, tree234(K, V)::in, tree234(K, V)::out)$/;kq|/^\<tree234.insert\>/;'q;"	kind:pred
tree234.insert2	tree234.m	/^:- pred tree234.insert2(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.insert2\>/;'q;"	kind:pred	file:
tree234.insert3	tree234.m	/^:- pred tree234.insert3(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.insert3\>/;'q;"	kind:pred	file:
tree234.is_empty	tree234.m	/^:- pred tree234.is_empty(tree234(K, V)::in) is semidet.$/;kq|/^\<tree234.is_empty\>/;'q;"	kind:pred
tree234.key_value_pair	tree234.m	/^:- type key_value_pair(K, V)$/;kq|-;/\<tree234.key_value_pair\>/;'q;"	kind:type	file:
tree234.keys	tree234.m	/^:- func tree234.keys(tree234(K, V)) = list(K).$/;kq|/^\<tree234.keys\>/;'q;"	kind:func
tree234.keys	tree234.m	/^:- pred tree234.keys(tree234(K, V)::in, list(K)::out) is det.$/;kq|/^\<tree234.keys\>/;'q;"	kind:pred
tree234.keys_acc	tree234.m	/^:- pred tree234.keys_acc(tree234(K, V), list(K), list(K)).$/;kq|/^\<tree234.keys_acc\>/;'q;"	kind:pred	file:
tree234.keys_and_values	tree234.m	/^:- pred tree234.keys_and_values(tree234(K, V)::in, list(K)::out, list(V)::out)$/;kq|/^\<tree234.keys_and_values\>/;'q;"	kind:pred
tree234.keys_and_values_acc	tree234.m	/^:- pred tree234.keys_and_values_acc(tree234(K, V)::in,$/;kq|/^\<tree234.keys_and_values_acc\>/;'q;"	kind:pred	file:
tree234.lazy_cons	tree234.m	/^    ;       lazy_cons(K, V, (func) = lazy_list(K, V)).$/;kq|-;/\<tree234.lazy_cons\>/;'q;"	kind:cons	file:
tree234.lazy_list	tree234.m	/^:- type lazy_list(K, V)$/;kq|-;/\<tree234.lazy_list\>/;'q;"	kind:type	file:
tree234.lookup	tree234.m	/^:- func tree234.lookup(tree234(K, V), K) = V.$/;kq|/^\<tree234.lookup\>/;'q;"	kind:func
tree234.lookup	tree234.m	/^:- pred tree234.lookup(tree234(K, V)::in, K::in, V::out) is det.$/;kq|/^\<tree234.lookup\>/;'q;"	kind:pred
tree234.lower_bound_lookup	tree234.m	/^:- pred tree234.lower_bound_lookup(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.lower_bound_lookup\>/;'q;"	kind:pred
tree234.lower_bound_search	tree234.m	/^:- pred tree234.lower_bound_search(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.lower_bound_search\>/;'q;"	kind:pred
tree234.map_foldl	tree234.m	/^:- pred tree234.map_foldl(pred(K, V, W, A, A), tree234(K, V), tree234(K, W),$/;kq|/^\<tree234.map_foldl\>/;'q;"	kind:pred
tree234.map_foldl2	tree234.m	/^:- pred tree234.map_foldl2(pred(K, V, W, A, A, B, B),$/;kq|/^\<tree234.map_foldl2\>/;'q;"	kind:pred
tree234.map_foldl3	tree234.m	/^:- pred tree234.map_foldl3(pred(K, V, W, A, A, B, B, C, C),$/;kq|/^\<tree234.map_foldl3\>/;'q;"	kind:pred
tree234.map_values	tree234.m	/^:- func tree234.map_values(func(K, V) = W, tree234(K, V)) = tree234(K, W).$/;kq|/^\<tree234.map_values\>/;'q;"	kind:func
tree234.map_values	tree234.m	/^:- pred tree234.map_values(pred(K, V, W), tree234(K, V), tree234(K, W)).$/;kq|/^\<tree234.map_values\>/;'q;"	kind:pred
tree234.map_values_foldl	tree234.m	/^:- pred tree234.map_values_foldl(pred(V, W, A, A),$/;kq|/^\<tree234.map_values_foldl\>/;'q;"	kind:pred
tree234.map_values_foldl2	tree234.m	/^:- pred tree234.map_values_foldl2(pred(V, W, A, A, B, B),$/;kq|/^\<tree234.map_values_foldl2\>/;'q;"	kind:pred
tree234.map_values_foldl3	tree234.m	/^:- pred tree234.map_values_foldl3(pred(V, W, A, A, B, B, C, C),$/;kq|/^\<tree234.map_values_foldl3\>/;'q;"	kind:pred
tree234.map_values_only	tree234.m	/^:- func tree234.map_values_only(func(V) = W, tree234(K, V)) = tree234(K, W).$/;kq|/^\<tree234.map_values_only\>/;'q;"	kind:func
tree234.map_values_only	tree234.m	/^:- pred tree234.map_values_only(pred(V, W), tree234(K, V), tree234(K, W)).$/;kq|/^\<tree234.map_values_only\>/;'q;"	kind:pred
tree234.match_kv_against_stack	tree234.m	/^:- pred match_kv_against_stack(K::in, V::in,$/;kq|/^\<match_kv_against_stack\>/;'q;"	kind:pred	file:
tree234.max_key	tree234.m	/^:- func tree234.max_key(tree234(K, V)) = K is semidet.$/;kq|/^\<tree234.max_key\>/;'q;"	kind:func
tree234.member	tree234.m	/^:- pred tree234.member(tree234(K, V)::in, K::out, V::out) is nondet.$/;kq|/^\<tree234.member\>/;'q;"	kind:pred
tree234.min_key	tree234.m	/^:- func tree234.min_key(tree234(K, V)) = K is semidet.$/;kq|/^\<tree234.min_key\>/;'q;"	kind:func
tree234.out_two	tree234.m	/^:- mode out_two == out(two(ground, ground, ground)).$/;kq|-;/\<tree234.out_two\>/;'q;"	kind:mode	file:
tree234.remove	tree234.m	/^:- pred tree234.remove(K, V, tree234(K, V), tree234(K, V)).$/;kq|/^\<tree234.remove\>/;'q;"	kind:pred
tree234.remove_2	tree234.m	/^:- pred tree234.remove_2(tree234(K, V), K, V, tree234(K, V), bool).$/;kq|/^\<tree234.remove_2\>/;'q;"	kind:pred	file:
tree234.remove_smallest	tree234.m	/^:- pred tree234.remove_smallest(K, V, tree234(K, V), tree234(K, V)).$/;kq|/^\<tree234.remove_smallest\>/;'q;"	kind:pred
tree234.remove_smallest_2	tree234.m	/^:- pred tree234.remove_smallest_2(tree234(K, V), K, V, tree234(K, V), bool).$/;kq|/^\<tree234.remove_smallest_2\>/;'q;"	kind:pred	file:
tree234.sdi_four	tree234.m	/^:- mode sdi_four == di(uniq_four(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<tree234.sdi_four\>/;'q;"	kind:mode	file:
tree234.sdi_three	tree234.m	/^:- mode sdi_three == di(uniq_three(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<tree234.sdi_three\>/;'q;"	kind:mode	file:
tree234.sdi_two	tree234.m	/^:- mode sdi_two == di(uniq_two(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<tree234.sdi_two\>/;'q;"	kind:mode	file:
tree234.search	tree234.m	/^:- pred tree234.search(tree234(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<tree234.search\>/;'q;"	kind:pred
tree234.search_insert	tree234.m	/^:- pred tree234.search_insert(K::in, V::in, maybe(V)::out,$/;kq|/^\<tree234.search_insert\>/;'q;"	kind:pred
tree234.search_insert2	tree234.m	/^:- pred tree234.search_insert2(tree234(K, V), K, V, maybe(V), tree234(K, V)).$/;kq|/^\<tree234.search_insert2\>/;'q;"	kind:pred	file:
tree234.search_insert3	tree234.m	/^:- pred tree234.search_insert3(tree234(K, V), K, V, maybe(V), tree234(K, V)).$/;kq|/^\<tree234.search_insert3\>/;'q;"	kind:pred	file:
tree234.set	tree234.m	/^:- func tree234.set(tree234(K, V), K, V) = tree234(K, V).$/;kq|/^\<tree234.set\>/;'q;"	kind:func
tree234.set	tree234.m	/^:- pred tree234.set(K::in, V::in, tree234(K, V)::in, tree234(K, V)::out)$/;kq|/^\<tree234.set\>/;'q;"	kind:pred
tree234.set2	tree234.m	/^:- pred tree234.set2(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.set2\>/;'q;"	kind:pred	file:
tree234.set3	tree234.m	/^:- pred tree234.set3(tree234(K, V), K, V, tree234(K, V)).$/;kq|/^\<tree234.set3\>/;'q;"	kind:pred	file:
tree234.singleton	tree234.m	/^:- func tree234.singleton(K, V) = tree234(K, V).$/;kq|/^\<tree234.singleton\>/;'q;"	kind:func
tree234.split_four	tree234.m	/^:- pred tree234.split_four(tree234(K, V), K, V, tree234(K, V), tree234(K, V)).$/;kq|/^\<tree234.split_four\>/;'q;"	kind:pred	file:
tree234.suo_two	tree234.m	/^:- mode suo_two == out(uniq_two(ground, ground, uniq_tree234_gg)).$/;kq|-;/\<tree234.suo_two\>/;'q;"	kind:mode	file:
tree234.three	tree234.m	/^    ;       three(K, V, K, V, tree234(K, V), tree234(K, V), tree234(K, V))$/;kq|-;/\<tree234.three\>/;'q;"	kind:cons
tree234.three	tree234.m	/^:- inst three(K, V, T) ---> three(K, V, K, V, T, T, T).$/;kq|-;/\<tree234.three\>/;'q;"	kind:inst	file:
tree234.transform_value	tree234.m	/^:- pred tree234.transform_value(pred(V, V)::in(pred(in, out) is det), K::in,$/;kq|/^\<tree234.transform_value\>/;'q;"	kind:pred
tree234.tree234_to_assoc_list	tree234.m	/^:- func tree234.tree234_to_assoc_list(tree234(K, V)) = assoc_list(K, V).$/;kq|/^\<tree234.tree234_to_assoc_list\>/;'q;"	kind:func
tree234.tree234_to_assoc_list	tree234.m	/^:- pred tree234.tree234_to_assoc_list(tree234(K, V)::in,$/;kq|/^\<tree234.tree234_to_assoc_list\>/;'q;"	kind:pred
tree234.two	tree234.m	/^    ;       two(K, V, tree234(K, V), tree234(K, V))$/;kq|-;/\<tree234.two\>/;'q;"	kind:cons
tree234.two	tree234.m	/^:- inst two(K, V, T)   ---> two(K, V, T, T).$/;kq|-;/\<tree234.two\>/;'q;"	kind:inst	file:
tree234.uniq_four	tree234.m	/^:- inst uniq_four(K, V, T)  == unique(four(K, V, K, V, K, V, T, T, T, T)).$/;kq|-;/\<tree234.uniq_four\>/;'q;"	kind:inst	file:
tree234.uniq_three	tree234.m	/^:- inst uniq_three(K, V, T) == unique(three(K, V, K, V, T, T, T)).$/;kq|-;/\<tree234.uniq_three\>/;'q;"	kind:inst	file:
tree234.uniq_tree234	tree234.m	/^:- inst uniq_tree234(K, V) ==$/;kq|-;/\<tree234.uniq_tree234\>/;'q;"	kind:inst
tree234.uniq_tree234_gg	tree234.m	/^:- inst uniq_tree234_gg ==$/;kq|-;/\<tree234.uniq_tree234_gg\>/;'q;"	kind:inst
tree234.uniq_two	tree234.m	/^:- inst uniq_two(K, V, T)   == unique(two(K, V, T, T)).$/;kq|-;/\<tree234.uniq_two\>/;'q;"	kind:inst	file:
tree234.uo_tree234	tree234.m	/^:- mode uo_tree234       == free >> uniq_tree234(ground, ground).$/;kq|-;/\<tree234.uo_tree234\>/;'q;"	kind:mode
tree234.uo_tree234	tree234.m	/^:- mode uo_tree234(K, V) == free >> uniq_tree234(K, V).$/;kq|-;/\<tree234.uo_tree234\>/;'q;"	kind:mode
tree234.uo_two	tree234.m	/^:- mode uo_two  == out(uniq_two(unique, unique, unique)).$/;kq|-;/\<tree234.uo_two\>/;'q;"	kind:mode	file:
tree234.update	tree234.m	/^:- pred tree234.update(K::in, V::in, tree234(K, V)::in, tree234(K, V)::out)$/;kq|/^\<tree234.update\>/;'q;"	kind:pred
tree234.upper_bound_lookup	tree234.m	/^:- pred tree234.upper_bound_lookup(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.upper_bound_lookup\>/;'q;"	kind:pred
tree234.upper_bound_search	tree234.m	/^:- pred tree234.upper_bound_search(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.upper_bound_search\>/;'q;"	kind:pred
tree234.values	tree234.m	/^:- func tree234.values(tree234(K, V)) = list(V).$/;kq|/^\<tree234.values\>/;'q;"	kind:func
tree234.values	tree234.m	/^:- pred tree234.values(tree234(K, V)::in, list(V)::out) is det.$/;kq|/^\<tree234.values\>/;'q;"	kind:pred
tree234.values_acc	tree234.m	/^:- pred tree234.values_acc(tree234(K, V), list(V), list(V)).$/;kq|/^\<tree234.values_acc\>/;'q;"	kind:pred	file:
tree234.well_formed	tree234.m	/^:- pred well_formed(tree234(K, V)::in, maybe(int)::out) is det.$/;kq|/^\<well_formed\>/;'q;"	kind:pred
tree234_nonempty	tree234.m	/^:- inst tree234_nonempty$/;kq|-;/\<tree234_nonempty\>/;'q;"	kind:inst	file:
tree234_to_assoc_list	tree234.m	/^:- func tree234.tree234_to_assoc_list(tree234(K, V)) = assoc_list(K, V).$/;kq|/^\<tree234.tree234_to_assoc_list\>/;'q;"	kind:func
tree234_to_assoc_list	tree234.m	/^:- pred tree234.tree234_to_assoc_list(tree234(K, V)::in,$/;kq|/^\<tree234.tree234_to_assoc_list\>/;'q;"	kind:pred
tree234_to_assoc_list_acc	tree234.m	/^:- pred tree234.tree234_to_assoc_list_acc(tree234(K, V)::in,$/;kq|/^\<tree234.tree234_to_assoc_list_acc\>/;'q;"	kind:pred	file:
tree234_to_doc	tree234.m	/^:- func tree234_to_doc(tree234(K, V)) = pretty_printer.doc.$/;kq|/^\<tree234_to_doc\>/;'q;"	kind:func
tree234_to_doc_2	tree234.m	/^:- func tree234_to_doc_2(lazy_list(K, V)) = doc.$/;kq|/^\<tree234_to_doc_2\>/;'q;"	kind:func	file:
tree234_to_lazy_list	tree234.m	/^:- func tree234_to_lazy_list(tree234(K, V), lazy_list(K, V)) = lazy_list(K, V).$/;kq|/^\<tree234_to_lazy_list\>/;'q;"	kind:func	file:
tree_bitset	tree_bitset.m	/^    --->    tree_bitset(node_list).$/;kq|-;/\<tree_bitset\>/;'q;"	kind:cons	file:
tree_bitset	tree_bitset.m	/^:- type tree_bitset(T)    % <= enum(T)$/;kq|-;/\<tree_bitset\>/;'q;"	kind:type	file:
tree_bitset	tree_bitset.m	/^:- type tree_bitset(T). % <= enum(T).$/;kq|-;/\<tree_bitset\>/;'q;"	kind:type
tree_bitset.all_true	tree_bitset.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), tree_bitset(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
tree_bitset.all_true_bits	tree_bitset.m	/^:- pred all_true_bits(pred(T)::in(pred(in) is semidet),$/;kq|/^\<all_true_bits\>/;'q;"	kind:pred	file:
tree_bitset.bits_for_index	tree_bitset.m	/^:- pred bits_for_index(int::in, int::out, int::out) is det.$/;kq|/^\<bits_for_index\>/;'q;"	kind:pred	file:
tree_bitset.bits_per_level	tree_bitset.m	/^:- func bits_per_level = int.$/;kq|/^\<bits_per_level\>/;'q;"	kind:func	file:
tree_bitset.clear_bit	tree_bitset.m	/^:- func clear_bit(int, int) = int.$/;kq|/^\<clear_bit\>/;'q;"	kind:func	file:
tree_bitset.components	tree_bitset.m	/^                components      :: node_list$/;kq|-;/\<tree_bitset.components\>/;'q;"	kind:fld	file:
tree_bitset.contains	tree_bitset.m	/^:- pred contains(tree_bitset(T)::in, T::in) is semidet <= enum(T).$/;kq|/^\<contains\>/;'q;"	kind:pred
tree_bitset.count	tree_bitset.m	/^:- func count(tree_bitset(T)) = int <= enum(T).$/;kq|/^\<count\>/;'q;"	kind:func
tree_bitset.delete	tree_bitset.m	/^:- func delete(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<delete\>/;'q;"	kind:func
tree_bitset.delete	tree_bitset.m	/^:- pred delete(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<delete\>/;'q;"	kind:pred
tree_bitset.delete_list	tree_bitset.m	/^:- func delete_list(tree_bitset(T), list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<delete_list\>/;'q;"	kind:func
tree_bitset.delete_list	tree_bitset.m	/^:- pred delete_list(list(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<delete_list\>/;'q;"	kind:pred
tree_bitset.difference	tree_bitset.m	/^:- func difference(tree_bitset(T), tree_bitset(T)) = tree_bitset(T).$/;kq|/^\<difference\>/;'q;"	kind:func
tree_bitset.difference	tree_bitset.m	/^:- pred difference(tree_bitset(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<difference\>/;'q;"	kind:pred
tree_bitset.divide	tree_bitset.m	/^:- pred divide(pred(T)::in(pred(in) is semidet), tree_bitset(T)::in,$/;kq|/^\<divide\>/;'q;"	kind:pred
tree_bitset.divide_by_set	tree_bitset.m	/^:- pred divide_by_set(tree_bitset(T)::in, tree_bitset(T)::in,$/;kq|/^\<divide_by_set\>/;'q;"	kind:pred
tree_bitset.do_foldl2_pred	tree_bitset.m	/^:- pred do_foldl2_pred(pred(T, U, U, V, V), list(interior_node), U, U, V, V)$/;kq|/^\<do_foldl2_pred\>/;'q;"	kind:pred	file:
tree_bitset.do_foldl_pred	tree_bitset.m	/^:- pred do_foldl_pred(pred(T, U, U), list(interior_node), U, U) <= enum(T).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
tree_bitset.do_foldr2_pred	tree_bitset.m	/^:- pred do_foldr2_pred(pred(T, U, U, V, V), list(interior_node), U, U, V, V)$/;kq|/^\<do_foldr2_pred\>/;'q;"	kind:pred	file:
tree_bitset.do_foldr_pred	tree_bitset.m	/^:- pred do_foldr_pred(pred(T, U, U), list(interior_node), U, U) <= enum(T).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
tree_bitset.empty	tree_bitset.m	/^:- pred empty(tree_bitset(T)).$/;kq|/^\<empty\>/;'q;"	kind:pred
tree_bitset.enum_to_index	tree_bitset.m	/^:- func enum_to_index(T) = int <= enum(T).$/;kq|/^\<enum_to_index\>/;'q;"	kind:func	file:
tree_bitset.equal	tree_bitset.m	/^:- pred equal(tree_bitset(T)::in, tree_bitset(T)::in) is semidet <= enum(T).$/;kq|/^\<equal\>/;'q;"	kind:pred
tree_bitset.expand_range	tree_bitset.m	/^:- pred expand_range(int::in, node_list::in, int::in, int::in, int::in,$/;kq|/^\<expand_range\>/;'q;"	kind:pred	file:
tree_bitset.filter	tree_bitset.m	/^:- func filter(pred(T), tree_bitset(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<filter\>/;'q;"	kind:func
tree_bitset.filter	tree_bitset.m	/^:- pred filter(pred(T), tree_bitset(T), tree_bitset(T), tree_bitset(T))$/;kq|/^\<filter\>/;'q;"	kind:pred
tree_bitset.find_least_bit	tree_bitset.m	/^:- func find_least_bit(int) = int.$/;kq|/^\<find_least_bit\>/;'q;"	kind:func	file:
tree_bitset.find_least_bit_2	tree_bitset.m	/^:- func find_least_bit_2(int, int, int) = int.$/;kq|/^\<find_least_bit_2\>/;'q;"	kind:func	file:
tree_bitset.fold2_bits	tree_bitset.m	/^:- pred fold2_bits(fold_direction, pred(T, U, U, V, V),$/;kq|/^\<fold2_bits\>/;'q;"	kind:pred	file:
tree_bitset.fold_bits	tree_bitset.m	/^:- pred fold_bits(fold_direction, pred(T, U, U),$/;kq|/^\<fold_bits\>/;'q;"	kind:pred	file:
tree_bitset.fold_direction	tree_bitset.m	/^:- type fold_direction$/;kq|-;/\<tree_bitset.fold_direction\>/;'q;"	kind:type	file:
tree_bitset.foldl	tree_bitset.m	/^:- func foldl(func(T, U) = U, tree_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:func
tree_bitset.foldl	tree_bitset.m	/^:- pred foldl(pred(T, U, U), tree_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldl\>/;'q;"	kind:pred
tree_bitset.foldl2	tree_bitset.m	/^:- pred foldl2(pred(T, U, U, V, V), tree_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldl2\>/;'q;"	kind:pred
tree_bitset.foldr	tree_bitset.m	/^:- func foldr(func(T, U) = U, tree_bitset(T), U) = U <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:func
tree_bitset.foldr	tree_bitset.m	/^:- pred foldr(pred(T, U, U), tree_bitset(T), U, U) <= enum(T).$/;kq|/^\<foldr\>/;'q;"	kind:pred
tree_bitset.foldr2	tree_bitset.m	/^:- pred foldr2(pred(T, U, U, V, V), tree_bitset(T), U, U, V, V) <= enum(T).$/;kq|/^\<foldr2\>/;'q;"	kind:pred
tree_bitset.from_set	tree_bitset.m	/^:- func from_set(set.set(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<from_set\>/;'q;"	kind:func
tree_bitset.get_bit	tree_bitset.m	/^:- func get_bit(int, int) = int.$/;kq|/^\<get_bit\>/;'q;"	kind:func	file:
tree_bitset.group_leaf_nodes	tree_bitset.m	/^:- pred group_leaf_nodes(leaf_node::in, list(leaf_node)::in,$/;kq|/^\<group_leaf_nodes\>/;'q;"	kind:pred	file:
tree_bitset.head_and_tail	tree_bitset.m	/^:- pred head_and_tail(list(interior_node)::in,$/;kq|/^\<head_and_tail\>/;'q;"	kind:pred	file:
tree_bitset.high_to_low	tree_bitset.m	/^    ;       high_to_low.$/;kq|-;/\<tree_bitset.high_to_low\>/;'q;"	kind:cons	file:
tree_bitset.index_to_enum	tree_bitset.m	/^:- func index_to_enum(int) = T <= enum(T).$/;kq|/^\<index_to_enum\>/;'q;"	kind:func	file:
tree_bitset.init	tree_bitset.m	/^:- func init = tree_bitset(T).$/;kq|/^\<init\>/;'q;"	kind:func
tree_bitset.init_offset	tree_bitset.m	/^                init_offset     :: int,$/;kq|-;/\<tree_bitset.init_offset\>/;'q;"	kind:fld	file:
tree_bitset.insert	tree_bitset.m	/^:- func insert(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<insert\>/;'q;"	kind:func
tree_bitset.insert	tree_bitset.m	/^:- pred insert(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<insert\>/;'q;"	kind:pred
tree_bitset.insert_list	tree_bitset.m	/^:- func insert_list(tree_bitset(T), list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<insert_list\>/;'q;"	kind:func
tree_bitset.insert_list	tree_bitset.m	/^:- pred insert_list(list(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<insert_list\>/;'q;"	kind:pred
tree_bitset.insert_new	tree_bitset.m	/^:- pred insert_new(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<insert_new\>/;'q;"	kind:pred
tree_bitset.integrity	tree_bitset.m	/^:- func integrity(maybe(pair(int)), node_list) = bool.$/;kq|/^\<integrity\>/;'q;"	kind:func	file:
tree_bitset.interior_all_true	tree_bitset.m	/^:- pred interior_all_true(pred(T)::in(pred(in) is semidet),$/;kq|/^\<interior_all_true\>/;'q;"	kind:pred	file:
tree_bitset.interior_list	tree_bitset.m	/^    ;       interior_list($/;kq|-;/\<tree_bitset.interior_list\>/;'q;"	kind:cons	file:
tree_bitset.interior_node	tree_bitset.m	/^    --->    interior_node($/;kq|-;/\<tree_bitset.interior_node\>/;'q;"	kind:cons	file:
tree_bitset.interior_node	tree_bitset.m	/^:- type interior_node$/;kq|-;/\<tree_bitset.interior_node\>/;'q;"	kind:type	file:
tree_bitset.interior_nodes	tree_bitset.m	/^                interior_nodes  :: list(interior_node)$/;kq|-;/\<tree_bitset.interior_nodes\>/;'q;"	kind:fld	file:
tree_bitset.interiorlist_union	tree_bitset.m	/^:- pred interiorlist_union(list(interior_node)::in, list(interior_node)::in,$/;kq|/^\<interiorlist_union\>/;'q;"	kind:pred	file:
tree_bitset.interiornode_union	tree_bitset.m	/^:- pred interiornode_union($/;kq|/^\<interiornode_union\>/;'q;"	kind:pred	file:
tree_bitset.intersect	tree_bitset.m	/^:- func intersect(tree_bitset(T), tree_bitset(T)) = tree_bitset(T).$/;kq|/^\<intersect\>/;'q;"	kind:func
tree_bitset.intersect	tree_bitset.m	/^:- pred intersect(tree_bitset(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<intersect\>/;'q;"	kind:pred
tree_bitset.intersect_list	tree_bitset.m	/^:- func intersect_list(list(tree_bitset(T))) = tree_bitset(T).$/;kq|/^\<intersect_list\>/;'q;"	kind:func
tree_bitset.intersect_list	tree_bitset.m	/^:- pred intersect_list(list(tree_bitset(T))::in, tree_bitset(T)::out) is det.$/;kq|/^\<intersect_list\>/;'q;"	kind:pred
tree_bitset.is_empty	tree_bitset.m	/^:- pred is_empty(tree_bitset(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
tree_bitset.is_non_empty	tree_bitset.m	/^:- pred is_non_empty(tree_bitset(T)::in) is semidet.$/;kq|/^\<is_non_empty\>/;'q;"	kind:pred
tree_bitset.is_singleton	tree_bitset.m	/^:- pred is_singleton(tree_bitset(T)::in, T::out) is semidet <= enum(T).$/;kq|/^\<is_singleton\>/;'q;"	kind:pred
tree_bitset.items_to_index	tree_bitset.m	/^:- pred items_to_index(list(T)::in, list(int)::out) is det <= enum(T).$/;kq|/^\<items_to_index\>/;'q;"	kind:pred	file:
tree_bitset.leaf_all_true	tree_bitset.m	/^:- pred leaf_all_true(pred(T)::in(pred(in) is semidet), list(leaf_node)::in)$/;kq|/^\<leaf_all_true\>/;'q;"	kind:pred	file:
tree_bitset.leaf_bits	tree_bitset.m	/^                leaf_bits       :: int$/;kq|-;/\<tree_bitset.leaf_bits\>/;'q;"	kind:fld	file:
tree_bitset.leaf_foldl2_pred	tree_bitset.m	/^:- pred leaf_foldl2_pred(pred(T, U, U, V, V), list(leaf_node), U, U, V, V)$/;kq|/^\<leaf_foldl2_pred\>/;'q;"	kind:pred	file:
tree_bitset.leaf_foldl_pred	tree_bitset.m	/^:- pred leaf_foldl_pred(pred(T, U, U), list(leaf_node), U, U) <= enum(T).$/;kq|/^\<leaf_foldl_pred\>/;'q;"	kind:pred	file:
tree_bitset.leaf_foldr2_pred	tree_bitset.m	/^:- pred leaf_foldr2_pred(pred(T, U, U, V, V), list(leaf_node), U, U, V, V)$/;kq|/^\<leaf_foldr2_pred\>/;'q;"	kind:pred	file:
tree_bitset.leaf_foldr_pred	tree_bitset.m	/^:- pred leaf_foldr_pred(pred(T, U, U), list(leaf_node), U, U) <= enum(T).$/;kq|/^\<leaf_foldr_pred\>/;'q;"	kind:pred	file:
tree_bitset.leaf_list	tree_bitset.m	/^    --->    leaf_list($/;kq|-;/\<tree_bitset.leaf_list\>/;'q;"	kind:cons	file:
tree_bitset.leaf_node	tree_bitset.m	/^    --->    leaf_node($/;kq|-;/\<tree_bitset.leaf_node\>/;'q;"	kind:cons	file:
tree_bitset.leaf_node	tree_bitset.m	/^:- type leaf_node$/;kq|-;/\<tree_bitset.leaf_node\>/;'q;"	kind:type	file:
tree_bitset.leaf_nodes	tree_bitset.m	/^                leaf_nodes      :: list(leaf_node)$/;kq|-;/\<tree_bitset.leaf_nodes\>/;'q;"	kind:fld	file:
tree_bitset.leaf_offset	tree_bitset.m	/^                leaf_offset     :: int,$/;kq|-;/\<tree_bitset.leaf_offset\>/;'q;"	kind:fld	file:
tree_bitset.leaflist_contains	tree_bitset.m	/^:- pred leaflist_contains(list(leaf_node)::in, int::in) is semidet.$/;kq|/^\<leaflist_contains\>/;'q;"	kind:pred	file:
tree_bitset.leaflist_delete	tree_bitset.m	/^:- pred leaflist_delete(list(leaf_node)::in, int::in, list(leaf_node)::out)$/;kq|/^\<leaflist_delete\>/;'q;"	kind:pred	file:
tree_bitset.leaflist_divide	tree_bitset.m	/^:- pred leaflist_divide(pred(T)::in(pred(in) is semidet), list(leaf_node)::in,$/;kq|/^\<leaflist_divide\>/;'q;"	kind:pred	file:
tree_bitset.leaflist_insert	tree_bitset.m	/^:- pred leaflist_insert(int::in, list(leaf_node)::in, list(leaf_node)::out)$/;kq|/^\<leaflist_insert\>/;'q;"	kind:pred	file:
tree_bitset.leaflist_intersect	tree_bitset.m	/^:- pred leaflist_intersect(list(leaf_node)::in, list(leaf_node)::in,$/;kq|/^\<leaflist_intersect\>/;'q;"	kind:pred	file:
tree_bitset.leaflist_member	tree_bitset.m	/^:- pred leaflist_member(int::out, list(leaf_node)::in) is nondet.$/;kq|/^\<leaflist_member\>/;'q;"	kind:pred	file:
tree_bitset.leaflist_union	tree_bitset.m	/^:- pred leaflist_union(list(leaf_node)::in, list(leaf_node)::in,$/;kq|/^\<leaflist_union\>/;'q;"	kind:pred	file:
tree_bitset.leafnode_divide	tree_bitset.m	/^:- pred leafnode_divide(pred(T)::in(pred(in) is semidet), int::in, int::in,$/;kq|/^\<leafnode_divide\>/;'q;"	kind:pred	file:
tree_bitset.leafnode_member	tree_bitset.m	/^:- pred leafnode_member(int::out, int::in, int::in, int::in) is nondet.$/;kq|/^\<leafnode_member\>/;'q;"	kind:pred	file:
tree_bitset.level	tree_bitset.m	/^                level           :: int,$/;kq|-;/\<tree_bitset.level\>/;'q;"	kind:fld	file:
tree_bitset.limit_offset	tree_bitset.m	/^                limit_offset    :: int,$/;kq|-;/\<tree_bitset.limit_offset\>/;'q;"	kind:fld	file:
tree_bitset.list_to_set	tree_bitset.m	/^:- func list_to_set(list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:func
tree_bitset.list_to_set	tree_bitset.m	/^:- pred list_to_set(list(T)::in, tree_bitset(T)::out) is det <= enum(T).$/;kq|/^\<list_to_set\>/;'q;"	kind:pred
tree_bitset.low_to_high	tree_bitset.m	/^    --->    low_to_high$/;kq|-;/\<tree_bitset.low_to_high\>/;'q;"	kind:cons	file:
tree_bitset.make_leaf_node	tree_bitset.m	/^:- func make_leaf_node(int, int) = leaf_node.$/;kq|/^\<make_leaf_node\>/;'q;"	kind:func	file:
tree_bitset.make_singleton_set	tree_bitset.m	/^:- func make_singleton_set(T) = tree_bitset(T) <= enum(T).$/;kq|/^\<make_singleton_set\>/;'q;"	kind:func
tree_bitset.mask	tree_bitset.m	/^:- func mask(int) = int.$/;kq|/^\<mask\>/;'q;"	kind:func	file:
tree_bitset.member	tree_bitset.m	/^:- pred member(T, tree_bitset(T)) <= enum(T).$/;kq|/^\<member\>/;'q;"	kind:pred
tree_bitset.node_list	tree_bitset.m	/^:- type node_list$/;kq|-;/\<tree_bitset.node_list\>/;'q;"	kind:type	file:
tree_bitset.prune_top_levels	tree_bitset.m	/^:- pred prune_top_levels(node_list::in, node_list::out) is det.$/;kq|/^\<prune_top_levels\>/;'q;"	kind:pred	file:
tree_bitset.remove	tree_bitset.m	/^:- pred remove(T::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<remove\>/;'q;"	kind:pred
tree_bitset.remove_gt	tree_bitset.m	/^:- func remove_gt(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<remove_gt\>/;'q;"	kind:func
tree_bitset.remove_gt_interior	tree_bitset.m	/^:- pred remove_gt_interior(list(interior_node)::in, int::in,$/;kq|/^\<remove_gt_interior\>/;'q;"	kind:pred	file:
tree_bitset.remove_gt_leaf	tree_bitset.m	/^:- pred remove_gt_leaf(list(leaf_node)::in, int::in,$/;kq|/^\<remove_gt_leaf\>/;'q;"	kind:pred	file:
tree_bitset.remove_least	tree_bitset.m	/^:- pred remove_least(T::out, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<remove_least\>/;'q;"	kind:pred
tree_bitset.remove_least_leaf	tree_bitset.m	/^:- pred remove_least_leaf(leaf_node::in, list(leaf_node)::in, int::out,$/;kq|/^\<remove_least_leaf\>/;'q;"	kind:pred	file:
tree_bitset.remove_leq	tree_bitset.m	/^:- func remove_leq(tree_bitset(T), T) = tree_bitset(T) <= enum(T).$/;kq|/^\<remove_leq\>/;'q;"	kind:func
tree_bitset.remove_leq_leaf	tree_bitset.m	/^:- pred remove_leq_leaf(list(leaf_node)::in, int::in, list(leaf_node)::out)$/;kq|/^\<remove_leq_leaf\>/;'q;"	kind:pred	file:
tree_bitset.remove_list	tree_bitset.m	/^:- pred remove_list(list(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<remove_list\>/;'q;"	kind:pred
tree_bitset.set_bit	tree_bitset.m	/^:- func set_bit(int, int) = int.$/;kq|/^\<set_bit\>/;'q;"	kind:func	file:
tree_bitset.sorted_list_to_set	tree_bitset.m	/^:- func sorted_list_to_set(list(T)) = tree_bitset(T) <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:func
tree_bitset.sorted_list_to_set	tree_bitset.m	/^:- pred sorted_list_to_set(list(T)::in, tree_bitset(T)::out) is det <= enum(T).$/;kq|/^\<sorted_list_to_set\>/;'q;"	kind:pred
tree_bitset.subset	tree_bitset.m	/^:- pred subset(tree_bitset(T)::in, tree_bitset(T)::in) is semidet.$/;kq|/^\<subset\>/;'q;"	kind:pred
tree_bitset.superset	tree_bitset.m	/^:- pred superset(tree_bitset(T)::in, tree_bitset(T)::in) is semidet.$/;kq|/^\<superset\>/;'q;"	kind:pred
tree_bitset.to_set	tree_bitset.m	/^:- func to_set(tree_bitset(T)) = set.set(T) <= enum(T).$/;kq|/^\<to_set\>/;'q;"	kind:func
tree_bitset.to_sorted_list	tree_bitset.m	/^:- func to_sorted_list(tree_bitset(T)) = list(T) <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:func
tree_bitset.to_sorted_list	tree_bitset.m	/^:- pred to_sorted_list(tree_bitset(T)::in, list(T)::out) is det <= enum(T).$/;kq|/^\<to_sorted_list\>/;'q;"	kind:pred
tree_bitset.union	tree_bitset.m	/^:- func union(tree_bitset(T), tree_bitset(T)) = tree_bitset(T).$/;kq|/^\<union\>/;'q;"	kind:func
tree_bitset.union	tree_bitset.m	/^:- pred union(tree_bitset(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<union\>/;'q;"	kind:pred
tree_bitset.union_list	tree_bitset.m	/^:- func union_list(list(tree_bitset(T))) = tree_bitset(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
tree_bitset.union_list	tree_bitset.m	/^:- pred union_list(list(tree_bitset(T))::in, tree_bitset(T)::out) is det.$/;kq|/^\<union_list\>/;'q;"	kind:pred
tree_bitset.union_list_pass	tree_bitset.m	/^:- pred union_list_pass(list(tree_bitset(T))::in,$/;kq|/^\<union_list_pass\>/;'q;"	kind:pred	file:
tree_bitset.wrap_tree_bitset	tree_bitset.m	/^:- func wrap_tree_bitset(node_list) = tree_bitset(T).$/;kq|/^\<wrap_tree_bitset\>/;'q;"	kind:func	file:
triangular	pretty_printer.m	/^    ;       triangular(int).            % Print first arg with limit N-1,$/;kq|-;/\<triangular\>/;'q;"	kind:cons
truncate	math.m	/^:- func math.truncate(float) = float.$/;kq|/^\<math.truncate\>/;'q;"	kind:func
truncate_to_int	float.m	/^:- func truncate_to_int(float) = int.$/;kq|/^\<truncate_to_int\>/;'q;"	kind:func
try	exception.m	/^:- pred try(pred(T),                exception_result(T)).$/;kq|/^\<try\>/;'q;"	kind:pred
try_all	exception.m	/^:- pred try_all(pred(T), maybe(univ), list(T)).$/;kq|/^\<try_all\>/;'q;"	kind:pred
try_all_det	exception.m	/^:- pred try_all_det(exp_determinism, pred(T), maybe(univ), list(T)).$/;kq|/^\<try_all_det\>/;'q;"	kind:pred	file:
try_deletion2	rtree.m	/^:- pred try_deletion2(K::in, rtree_2(K, V)::in, K::in, rtree_2(K, V)::in,$/;kq|/^\<try_deletion2\>/;'q;"	kind:pred	file:
try_deletion3	rtree.m	/^:- pred try_deletion3(K::in, rtree_2(K, V)::in, K::in, rtree_2(K, V)::in,$/;kq|/^\<try_deletion3\>/;'q;"	kind:pred	file:
try_deletion4	rtree.m	/^:- pred try_deletion4(K::in, rtree_2(K, V)::in, K::in, rtree_2(K, V)::in,$/;kq|/^\<try_deletion4\>/;'q;"	kind:pred	file:
try_det	exception.m	/^:- pred try_det(exp_determinism, pred(T), exception_result(T)).$/;kq|/^\<try_det\>/;'q;"	kind:pred	file:
try_io	exception.m	/^:- pred try_io(pred(T, io, io), exception_result(T), io, io).$/;kq|/^\<try_io\>/;'q;"	kind:pred
try_io_det	exception.m	/^:- pred try_io_det(exp_determinism, pred(T, io, io), exception_result(T),$/;kq|/^\<try_io_det\>/;'q;"	kind:pred	file:
try_put	thread.mvar.m	/^:- pred mvar.try_put(mvar(T)::in, T::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_put\>/;'q;"	kind:pred
try_stm	exception.m	/^:- pred try_stm(pred(A, stm, stm), exception_result(A), stm, stm).$/;kq|/^\<try_stm\>/;'q;"	kind:pred
try_stm_cc_multi	exception.m	/^:- pred try_stm_cc_multi(exp_determinism, pred(T, stm, stm),$/;kq|/^\<try_stm_cc_multi\>/;'q;"	kind:pred	file:
try_stm_det	exception.m	/^:- pred try_stm_det(exp_determinism, pred(T, stm, stm),$/;kq|/^\<try_stm_det\>/;'q;"	kind:pred	file:
try_store	exception.m	/^:- pred try_store(pred(T, store(S), store(S)),$/;kq|/^\<try_store\>/;'q;"	kind:pred
try_store_det	exception.m	/^:- pred try_store_det(exp_determinism, pred(T, store(S), store(S)),$/;kq|/^\<try_store_det\>/;'q;"	kind:pred	file:
try_take	thread.channel.m	/^:- pred channel.try_take(channel(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<channel.try_take\>/;'q;"	kind:pred
try_take	thread.mvar.m	/^:- pred mvar.try_take(mvar(T)::in, maybe(T)::out, io::di, io::uo) is det.$/;kq|/^\<mvar.try_take\>/;'q;"	kind:pred
try_term_to_type	term.m	/^:- func try_term_to_type(term(U)) = term_to_type_result(T, U).$/;kq|/^\<try_term_to_type\>/;'q;"	kind:func
try_term_to_type	term.m	/^:- pred try_term_to_type(term(U)::in, term_to_type_result(T, U)::out) is det.$/;kq|/^\<try_term_to_type\>/;'q;"	kind:pred
try_term_to_univ	term.m	/^:- pred try_term_to_univ(term(T)::in, type_desc.type_desc::in,$/;kq|/^\<try_term_to_univ\>/;'q;"	kind:pred	file:
try_term_to_univ_2	term.m	/^:- pred try_term_to_univ_2(term(T)::in,$/;kq|/^\<try_term_to_univ_2\>/;'q;"	kind:pred	file:
try_wait	thread.semaphore.m	/^:- pred semaphore.try_wait(semaphore::in, bool::out, io::di, io::uo) is det.$/;kq|/^\<semaphore.try_wait\>/;'q;"	kind:pred
try_wait_2	thread.semaphore.m	/^:- pred try_wait_2(semaphore::in, int::out, io::di, io::uo) is det.$/;kq|/^\<try_wait_2\>/;'q;"	kind:pred	file:
tsort	digraph.m	/^:- pred digraph.tsort(digraph(T)::in, list(T)::out) is semidet.$/;kq|/^\<digraph.tsort\>/;'q;"	kind:pred
tuesday	calendar.m	/^    ;       tuesday$/;kq|-;/\<tuesday\>/;'q;"	kind:cons
tuple_to_doc	pprint.m	/^:- func tuple_to_doc(int, T) = doc.$/;kq|/^\<tuple_to_doc\>/;'q;"	kind:func	file:
turn_off_call_profiling	benchmarking.m	/^:- impure pred turn_off_call_profiling is det.$/;kq|/^\<turn_off_call_profiling\>/;'q;"	kind:pred
turn_off_call_profiling	benchmarking.m	/^:- pred turn_off_call_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_off_call_profiling\>/;'q;"	kind:pred
turn_off_heap_profiling	benchmarking.m	/^:- impure pred turn_off_heap_profiling is det.$/;kq|/^\<turn_off_heap_profiling\>/;'q;"	kind:pred
turn_off_heap_profiling	benchmarking.m	/^:- pred turn_off_heap_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_off_heap_profiling\>/;'q;"	kind:pred
turn_off_profiling	benchmarking.m	/^:- impure pred turn_off_profiling is det.$/;kq|/^\<turn_off_profiling\>/;'q;"	kind:pred
turn_off_profiling	benchmarking.m	/^:- pred turn_off_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_off_profiling\>/;'q;"	kind:pred
turn_off_time_profiling	benchmarking.m	/^:- impure pred turn_off_time_profiling is det.$/;kq|/^\<turn_off_time_profiling\>/;'q;"	kind:pred
turn_off_time_profiling	benchmarking.m	/^:- pred turn_off_time_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_off_time_profiling\>/;'q;"	kind:pred
turn_on_call_profiling	benchmarking.m	/^:- impure pred turn_on_call_profiling is det.$/;kq|/^\<turn_on_call_profiling\>/;'q;"	kind:pred
turn_on_call_profiling	benchmarking.m	/^:- pred turn_on_call_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_on_call_profiling\>/;'q;"	kind:pred
turn_on_heap_profiling	benchmarking.m	/^:- impure pred turn_on_heap_profiling is det.$/;kq|/^\<turn_on_heap_profiling\>/;'q;"	kind:pred
turn_on_heap_profiling	benchmarking.m	/^:- pred turn_on_heap_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_on_heap_profiling\>/;'q;"	kind:pred
turn_on_profiling	benchmarking.m	/^:- impure pred turn_on_profiling is det.$/;kq|/^\<turn_on_profiling\>/;'q;"	kind:pred
turn_on_profiling	benchmarking.m	/^:- pred turn_on_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_on_profiling\>/;'q;"	kind:pred
turn_on_time_profiling	benchmarking.m	/^:- impure pred turn_on_time_profiling is det.$/;kq|/^\<turn_on_time_profiling\>/;'q;"	kind:pred
turn_on_time_profiling	benchmarking.m	/^:- pred turn_on_time_profiling(io::di, io::uo) is det.$/;kq|/^\<turn_on_time_profiling\>/;'q;"	kind:pred
tvar	stm_builtin.m	/^    --->    tvar(c_pointer).$/;kq|-;/\<tvar\>/;'q;"	kind:cons	file:
two	rtree.m	/^    ;       two(K, rtree_2(K, V), K, rtree_2(K, V)) $/;kq|-;/\<two\>/;'q;"	kind:cons	file:
two	set_ctree234.m	/^    ;       two(T, set_tree234(T), set_tree234(T))$/;kq|-;/\<two\>/;'q;"	kind:cons	file:
two	set_ctree234.m	/^:- inst two(E, T)   ---> two(E, T, T).$/;kq|-;/\<two\>/;'q;"	kind:inst	file:
two	set_tree234.m	/^    ;       two(T, set_tree234(T), set_tree234(T))$/;kq|-;/\<two\>/;'q;"	kind:cons	file:
two	set_tree234.m	/^:- inst two(E, T)   ---> two(E, T, T).$/;kq|-;/\<two\>/;'q;"	kind:inst	file:
two	tree234.m	/^    ;       two(K, V, tree234(K, V), tree234(K, V))$/;kq|-;/\<two\>/;'q;"	kind:cons
two	tree234.m	/^:- inst two(K, V, T)   ---> two(K, V, T, T).$/;kq|-;/\<two\>/;'q;"	kind:inst	file:
two_arguments	test_bitset.m	/^    ;       two_arguments(string,$/;kq|-;/\<two_arguments\>/;'q;"	kind:cons
two_roots	math.m	/^    ;       two_roots(float, float).$/;kq|-;/\<two_roots\>/;'q;"	kind:cons
type_arg_names	type_desc.m	/^:- pred type_arg_names(list(type_desc)::in, bool::in, list(string)::out)$/;kq|/^\<type_arg_names\>/;'q;"	kind:pred	file:
type_args	type_desc.m	/^:- func type_args(type_desc) = list(type_desc).$/;kq|/^\<type_args\>/;'q;"	kind:func
type_ctor	type_desc.m	/^:- func type_ctor(type_desc) = type_ctor_desc.$/;kq|/^\<type_ctor\>/;'q;"	kind:func
type_ctor_and_args	rtti_implementation.m	/^:- pred type_ctor_and_args(type_info::in, type_ctor_info::out,$/;kq|/^\<type_ctor_and_args\>/;'q;"	kind:pred
type_ctor_and_args	type_desc.m	/^:- pred type_ctor_and_args(type_desc::in,$/;kq|/^\<type_ctor_and_args\>/;'q;"	kind:pred
type_ctor_arity	erlang_rtti_implementation.m	/^:- func type_ctor_arity(type_ctor_info_evaled) = int.$/;kq|/^\<type_ctor_arity\>/;'q;"	kind:func	file:
type_ctor_arity	rtti_implementation.m	/^:- func type_ctor_arity(type_ctor_info) = int.$/;kq|/^\<type_ctor_arity\>/;'q;"	kind:func	file:
type_ctor_arity	type_desc.m	/^:- func type_ctor_arity(type_ctor_desc) = int.$/;kq|/^\<type_ctor_arity\>/;'q;"	kind:func
type_ctor_compare_pred	erlang_rtti_implementation.m	/^:- some [P] func type_ctor_compare_pred(type_ctor_info_evaled) = P.$/;kq|/^\<type_ctor_compare_pred\>/;'q;"	kind:func	file:
type_ctor_compare_pred	rtti_implementation.m	/^:- func type_ctor_compare_pred(type_ctor_info) = unify_or_compare_pred.$/;kq|/^\<type_ctor_compare_pred\>/;'q;"	kind:func	file:
type_ctor_desc	erlang_rtti_implementation.m	/^:- pred type_ctor_desc(type_desc::in, type_ctor_desc::out) is det.$/;kq|/^\<type_ctor_desc\>/;'q;"	kind:pred
type_ctor_desc_and_args	erlang_rtti_implementation.m	/^:- pred type_ctor_desc_and_args(type_desc::in, type_ctor_desc::out,$/;kq|/^\<type_ctor_desc_and_args\>/;'q;"	kind:pred
type_ctor_desc_name_and_arity	erlang_rtti_implementation.m	/^:- pred type_ctor_desc_name_and_arity(type_ctor_desc::in,$/;kq|/^\<type_ctor_desc_name_and_arity\>/;'q;"	kind:pred
type_ctor_desc_to_revstrings	string.m	/^:- pred type_ctor_desc_to_revstrings(type_ctor_desc::in,$/;kq|/^\<type_ctor_desc_to_revstrings\>/;'q;"	kind:pred	file:
type_ctor_desc_to_type_ctor_info	type_desc.m	/^:- pred type_ctor_desc_to_type_ctor_info(type_ctor_desc::in,$/;kq|/^\<type_ctor_desc_to_type_ctor_info\>/;'q;"	kind:pred	file:
type_ctor_dummy_functor_name	erlang_rtti_implementation.m	/^:- func type_ctor_dummy_functor_name(type_ctor_info_evaled) = string.$/;kq|/^\<type_ctor_dummy_functor_name\>/;'q;"	kind:func	file:
type_ctor_eqv_type	erlang_rtti_implementation.m	/^:- func type_ctor_eqv_type(type_ctor_info_evaled) = maybe_pseudo_type_info.$/;kq|/^\<type_ctor_eqv_type\>/;'q;"	kind:func	file:
type_ctor_functors	erlang_rtti_implementation.m	/^:- func type_ctor_functors(type_ctor_info_evaled) = list(erlang_du_functor).$/;kq|/^\<type_ctor_functors\>/;'q;"	kind:func	file:
type_ctor_info	erlang_rtti_implementation.m	/^    --->    type_ctor_info.$/;kq|-;/\<type_ctor_info\>/;'q;"	kind:cons	file:
type_ctor_info	erlang_rtti_implementation.m	/^:- type type_ctor_info$/;kq|-;/\<type_ctor_info\>/;'q;"	kind:type	file:
type_ctor_info	rtti_implementation.m	/^:- type type_ctor_info ---> type_ctor_info(c_pointer).$/;kq|-;/\<type_ctor_info\>/;'q;"	kind:cons	file:
type_ctor_info	rtti_implementation.m	/^:- type type_ctor_info ---> type_ctor_info(c_pointer).$/;kq|-;/\<type_ctor_info\>/;'q;"	kind:type	file:
type_ctor_info_and_args	erlang_rtti_implementation.m	/^:- pred type_ctor_info_and_args(type_info::in, type_ctor_info_evaled::out,$/;kq|/^\<type_ctor_info_and_args\>/;'q;"	kind:pred
type_ctor_info_evaled	erlang_rtti_implementation.m	/^    --->    type_ctor_info_evaled.$/;kq|-;/\<type_ctor_info_evaled\>/;'q;"	kind:cons	file:
type_ctor_info_evaled	erlang_rtti_implementation.m	/^:- func type_ctor_info_evaled(type_info) = type_ctor_info_evaled.$/;kq|/^\<type_ctor_info_evaled\>/;'q;"	kind:func	file:
type_ctor_info_evaled	erlang_rtti_implementation.m	/^:- type type_ctor_info_evaled$/;kq|-;/\<type_ctor_info_evaled\>/;'q;"	kind:type	file:
type_ctor_info_from_pseudo_type_info	erlang_rtti_implementation.m	/^:- func type_ctor_info_from_pseudo_type_info(pseudo_type_info) =$/;kq|/^\<type_ctor_info_from_pseudo_type_info\>/;'q;"	kind:func	file:
type_ctor_info_name_and_arity	erlang_rtti_implementation.m	/^:- pred type_ctor_info_name_and_arity(type_ctor_info_evaled::in,$/;kq|/^\<type_ctor_info_name_and_arity\>/;'q;"	kind:pred	file:
type_ctor_is_variable_arity	erlang_rtti_implementation.m	/^:- pred type_ctor_is_variable_arity(type_ctor_info_evaled::in) is semidet.$/;kq|/^\<type_ctor_is_variable_arity\>/;'q;"	kind:pred	file:
type_ctor_is_variable_arity	rtti_implementation.m	/^:- pred type_ctor_is_variable_arity(type_ctor_info::in) is semidet.$/;kq|/^\<type_ctor_is_variable_arity\>/;'q;"	kind:pred	file:
type_ctor_module_name	erlang_rtti_implementation.m	/^:- func type_ctor_module_name(type_ctor_info_evaled) = string.$/;kq|/^\<type_ctor_module_name\>/;'q;"	kind:func	file:
type_ctor_module_name	rtti_implementation.m	/^:- func type_ctor_module_name(type_ctor_info) = string.$/;kq|/^\<type_ctor_module_name\>/;'q;"	kind:func	file:
type_ctor_module_name	type_desc.m	/^:- func type_ctor_module_name(type_ctor_desc) = string.$/;kq|/^\<type_ctor_module_name\>/;'q;"	kind:func
type_ctor_name	rtti_implementation.m	/^:- func type_ctor_name(type_ctor_info) = string.$/;kq|/^\<type_ctor_name\>/;'q;"	kind:func	file:
type_ctor_name	type_desc.m	/^:- func type_ctor_name(type_ctor_desc) = string.$/;kq|/^\<type_ctor_name\>/;'q;"	kind:func
type_ctor_name_and_arity	rtti_implementation.m	/^:- pred type_ctor_name_and_arity(type_ctor_info::in,$/;kq|/^\<type_ctor_name_and_arity\>/;'q;"	kind:pred
type_ctor_name_and_arity	type_desc.m	/^:- pred type_ctor_name_and_arity(type_ctor_desc::in,$/;kq|/^\<type_ctor_name_and_arity\>/;'q;"	kind:pred
type_ctor_num_functors	rtti_implementation.m	/^:- func type_ctor_num_functors(type_ctor_info) = int.$/;kq|/^\<type_ctor_num_functors\>/;'q;"	kind:func	file:
type_ctor_rep	erlang_rtti_implementation.m	/^:- func type_ctor_rep(type_ctor_info_evaled) = erlang_type_ctor_rep.$/;kq|/^\<type_ctor_rep\>/;'q;"	kind:func	file:
type_ctor_rep	rtti_implementation.m	/^:- type type_ctor_rep$/;kq|-;/\<type_ctor_rep\>/;'q;"	kind:type	file:
type_ctor_search_functor_number_map	rtti_implementation.m	/^:- pred type_ctor_search_functor_number_map(type_ctor_info::in,$/;kq|/^\<type_ctor_search_functor_number_map\>/;'q;"	kind:pred	file:
type_ctor_type_name	erlang_rtti_implementation.m	/^:- func type_ctor_type_name(type_ctor_info_evaled) = string.$/;kq|/^\<type_ctor_type_name\>/;'q;"	kind:func	file:
type_ctor_unify_pred	erlang_rtti_implementation.m	/^:- some [P] func type_ctor_unify_pred(type_ctor_info_evaled) = P.$/;kq|/^\<type_ctor_unify_pred\>/;'q;"	kind:func	file:
type_ctor_unify_pred	rtti_implementation.m	/^:- func type_ctor_unify_pred(type_ctor_info) = unify_or_compare_pred.$/;kq|/^\<type_ctor_unify_pred\>/;'q;"	kind:func	file:
type_desc.bound	type_desc.m	/^    --->    bound(type_ctor_desc, list(pseudo_type_desc))$/;kq|-;/\<type_desc.bound\>/;'q;"	kind:cons
type_desc.det_make_type	type_desc.m	/^:- func det_make_type(type_ctor_desc, list(type_desc)) = type_desc.$/;kq|/^\<det_make_type\>/;'q;"	kind:func
type_desc.exist_tvar	type_desc.m	/^    ;       exist_tvar(int).$/;kq|-;/\<type_desc.exist_tvar\>/;'q;"	kind:cons
type_desc.has_type	type_desc.m	/^:- some [T] pred has_type(T::unused, type_desc::in) is det.$/;kq|/^\<has_type\>/;'q;"	kind:pred
type_desc.make_type	type_desc.m	/^:- func make_type(type_ctor_desc, list(type_desc)) = type_desc.$/;kq|/^\<make_type\>/;'q;"	kind:func
type_desc.make_type_ctor_desc	type_desc.m	/^:- pred make_type_ctor_desc(rtti_implementation.type_info::in,$/;kq|/^\<make_type_ctor_desc\>/;'q;"	kind:pred	file:
type_desc.pseudo_type_args	type_desc.m	/^:- func pseudo_type_args(pseudo_type_desc) = list(pseudo_type_desc) is semidet.$/;kq|/^\<pseudo_type_args\>/;'q;"	kind:func
type_desc.pseudo_type_ctor	type_desc.m	/^:- func pseudo_type_ctor(pseudo_type_desc) = type_ctor_desc is semidet.$/;kq|/^\<pseudo_type_ctor\>/;'q;"	kind:func
type_desc.pseudo_type_rep	type_desc.m	/^:- type pseudo_type_rep$/;kq|-;/\<type_desc.pseudo_type_rep\>/;'q;"	kind:type
type_desc.same_type	type_desc.m	/^:- pred same_type(T::unused, T::unused) is det.$/;kq|/^\<same_type\>/;'q;"	kind:pred
type_desc.type_arg_names	type_desc.m	/^:- pred type_arg_names(list(type_desc)::in, bool::in, list(string)::out)$/;kq|/^\<type_arg_names\>/;'q;"	kind:pred	file:
type_desc.type_args	type_desc.m	/^:- func type_args(type_desc) = list(type_desc).$/;kq|/^\<type_args\>/;'q;"	kind:func
type_desc.type_ctor	type_desc.m	/^:- func type_ctor(type_desc) = type_ctor_desc.$/;kq|/^\<type_ctor\>/;'q;"	kind:func
type_desc.type_ctor_and_args	type_desc.m	/^:- pred type_ctor_and_args(type_desc::in,$/;kq|/^\<type_ctor_and_args\>/;'q;"	kind:pred
type_desc.type_ctor_arity	type_desc.m	/^:- func type_ctor_arity(type_ctor_desc) = int.$/;kq|/^\<type_ctor_arity\>/;'q;"	kind:func
type_desc.type_ctor_name	type_desc.m	/^:- func type_ctor_name(type_ctor_desc) = string.$/;kq|/^\<type_ctor_name\>/;'q;"	kind:func
type_desc.type_name	type_desc.m	/^:- func type_name(type_desc) = string.$/;kq|/^\<type_name\>/;'q;"	kind:func
type_desc.type_of	type_desc.m	/^:- func type_of(T::unused) = (type_desc::out) is det.$/;kq|/^\<type_of\>/;'q;"	kind:func
type_desc.univ_tvar	type_desc.m	/^    ;       univ_tvar(int)$/;kq|-;/\<type_desc.univ_tvar\>/;'q;"	kind:cons
type_desc_to_pseudo_type_desc	type_desc.m	/^:- func type_desc_to_pseudo_type_desc(type_desc) = pseudo_type_desc.$/;kq|/^\<type_desc_to_pseudo_type_desc\>/;'q;"	kind:func
type_desc_to_revstrings	string.m	/^:- pred type_desc_to_revstrings(type_desc::in,$/;kq|/^\<type_desc_to_revstrings\>/;'q;"	kind:pred	file:
type_desc_to_type_info	type_desc.m	/^:- pred type_desc_to_type_info(type_desc::in,$/;kq|/^\<type_desc_to_type_info\>/;'q;"	kind:pred
type_descs_from_type_infos	erlang_rtti_implementation.m	/^:- func type_descs_from_type_infos(list(type_info)) = list(type_desc).$/;kq|/^\<type_descs_from_type_infos\>/;'q;"	kind:func	file:
type_error	term.m	/^    --->    type_error($/;kq|-;/\<type_error\>/;'q;"	kind:cons
type_functors	rtti_implementation.m	/^:- type type_functors ---> type_functors(c_pointer).$/;kq|-;/\<type_functors\>/;'q;"	kind:cons	file:
type_functors	rtti_implementation.m	/^:- type type_functors ---> type_functors(c_pointer).$/;kq|-;/\<type_functors\>/;'q;"	kind:type	file:
type_info	erlang_rtti_implementation.m	/^    --->    type_info.$/;kq|-;/\<type_info\>/;'q;"	kind:cons	file:
type_info	erlang_rtti_implementation.m	/^:- func type_info(T::unused) = (type_info::out) is det.$/;kq|/^\<type_info\>/;'q;"	kind:func	file:
type_info	erlang_rtti_implementation.m	/^:- type type_info$/;kq|-;/\<type_info\>/;'q;"	kind:type	file:
type_info	rtti_implementation.m	/^:- type type_info ---> type_info(c_pointer).$/;kq|-;/\<type_info\>/;'q;"	kind:cons	file:
type_info	rtti_implementation.m	/^:- type type_info ---> type_info(c_pointer).$/;kq|-;/\<type_info\>/;'q;"	kind:type	file:
type_info_desc_same_representation	type_desc.m	/^:- pred type_info_desc_same_representation is semidet.$/;kq|/^\<type_info_desc_same_representation\>/;'q;"	kind:pred	file:
type_info_from_pseudo_type_info	rtti_implementation.m	/^:- func type_info_from_pseudo_type_info(pseudo_type_info) = type_info.$/;kq|/^\<type_info_from_pseudo_type_info\>/;'q;"	kind:func	file:
type_info_from_type_desc	erlang_rtti_implementation.m	/^:- func type_info_from_type_desc(type_desc) = type_info.$/;kq|/^\<type_info_from_type_desc\>/;'q;"	kind:func	file:
type_info_from_typeclass_info	private_builtin.m	/^:- pred type_info_from_typeclass_info(typeclass_info::in, int::in,$/;kq|/^\<type_info_from_typeclass_info\>/;'q;"	kind:pred
type_info_get_functor	rtti_implementation.m	/^:- pred type_info_get_functor(type_info::in, int::in, string::out, int::out,$/;kq|/^\<type_info_get_functor\>/;'q;"	kind:pred
type_info_get_functor_lex	rtti_implementation.m	/^:- pred type_info_get_functor_lex(type_info::in, int::in, int::out)$/;kq|/^\<type_info_get_functor_lex\>/;'q;"	kind:pred
type_info_get_functor_ordinal	rtti_implementation.m	/^:- pred type_info_get_functor_ordinal(type_info::in, int::in, int::out)$/;kq|/^\<type_info_get_functor_ordinal\>/;'q;"	kind:pred
type_info_get_functor_with_names	rtti_implementation.m	/^:- pred type_info_get_functor_with_names(type_info::in, int::in, string::out,$/;kq|/^\<type_info_get_functor_with_names\>/;'q;"	kind:pred
type_info_get_higher_order_arity	rtti_implementation.m	/^:- func type_info_get_higher_order_arity(type_info) = int.$/;kq|/^\<type_info_get_higher_order_arity\>/;'q;"	kind:func	file:
type_info_index	erlang_rtti_implementation.m	/^:- func type_info_index(int, type_info) = type_info.$/;kq|/^\<type_info_index\>/;'q;"	kind:func	file:
type_info_index_as_pti	rtti_implementation.m	/^:- func type_info_index_as_pti(type_info, int) = pseudo_type_info.$/;kq|/^\<type_info_index_as_pti\>/;'q;"	kind:func	file:
type_info_index_as_ti	rtti_implementation.m	/^:- func type_info_index_as_ti(type_info, int) = type_info.$/;kq|/^\<type_info_index_as_ti\>/;'q;"	kind:func	file:
type_info_list_to_type_desc_list	type_desc.m	/^:- pred type_info_list_to_type_desc_list($/;kq|/^\<type_info_list_to_type_desc_list\>/;'q;"	kind:pred
type_info_num_functors	rtti_implementation.m	/^:- pred type_info_num_functors(type_info::in, int::out) is semidet.$/;kq|/^\<type_info_num_functors\>/;'q;"	kind:pred
type_info_thunk	erlang_rtti_implementation.m	/^:- type type_info_thunk ---> type_info_thunk.$/;kq|-;/\<type_info_thunk\>/;'q;"	kind:cons	file:
type_info_thunk	erlang_rtti_implementation.m	/^:- type type_info_thunk ---> type_info_thunk.$/;kq|-;/\<type_info_thunk\>/;'q;"	kind:type	file:
type_info_to_term	term.m	/^:- pred type_info_to_term(context::in, type_desc::in, term(T)::out) is det.$/;kq|/^\<type_info_to_term\>/;'q;"	kind:pred	file:
type_info_to_type_desc	type_desc.m	/^:- pred type_info_to_type_desc(rtti_implementation.type_info::in,$/;kq|/^\<type_info_to_type_desc\>/;'q;"	kind:pred
type_layout	rtti_implementation.m	/^:- type type_layout ---> type_layout(c_pointer).$/;kq|-;/\<type_layout\>/;'q;"	kind:cons	file:
type_layout	rtti_implementation.m	/^:- type type_layout ---> type_layout(c_pointer).$/;kq|-;/\<type_layout\>/;'q;"	kind:type	file:
type_name	term_to_xml.m	/^    ;       type_name$/;kq|-;/\<type_name\>/;'q;"	kind:cons
type_name	type_desc.m	/^:- func type_name(type_desc) = string.$/;kq|/^\<type_name\>/;'q;"	kind:func
type_not_ground	term_to_xml.m	/^    ;       type_not_ground(pseudo_type_desc).$/;kq|-;/\<type_not_ground\>/;'q;"	kind:cons
type_of	type_desc.m	/^:- func type_of(T::unused) = (type_desc::out) is det.$/;kq|/^\<type_of\>/;'q;"	kind:func
type_to_term	term.m	/^:- func type_to_term(T) = term(_).$/;kq|/^\<type_to_term\>/;'q;"	kind:func
type_to_term	term.m	/^:- pred type_to_term(T::in, term(_)::out) is det.$/;kq|/^\<type_to_term\>/;'q;"	kind:pred
type_to_univ	univ.m	/^:- pred type_to_univ(T, univ).$/;kq|/^\<type_to_univ\>/;'q;"	kind:pred
type_variable_is_exist_quant	rtti_implementation.m	/^:- pred type_variable_is_exist_quant(int::in) is semidet.$/;kq|/^\<type_variable_is_exist_quant\>/;'q;"	kind:pred	file:
type_variable_is_univ_quant	rtti_implementation.m	/^:- pred type_variable_is_univ_quant(int::in) is semidet.$/;kq|/^\<type_variable_is_univ_quant\>/;'q;"	kind:pred	file:
typeclass_info	rtti_implementation.m	/^:- type typeclass_info ---> typeclass_info(c_pointer).$/;kq|-;/\<typeclass_info\>/;'q;"	kind:cons	file:
typeclass_info	rtti_implementation.m	/^:- type typeclass_info ---> typeclass_info(c_pointer).$/;kq|-;/\<typeclass_info\>/;'q;"	kind:type	file:
typeclass_info_type_info	rtti_implementation.m	/^:- func typeclass_info_type_info(typeclass_info, int) = type_info.$/;kq|/^\<typeclass_info_type_info\>/;'q;"	kind:func	file:
typed_compare	private_builtin.m	/^:- pred typed_compare(comparison_result::uo, T1::in, T2::in) is det.$/;kq|/^\<typed_compare\>/;'q;"	kind:pred
typed_unify	private_builtin.m	/^:- pred typed_unify(T1, T2).$/;kq|/^\<typed_unify\>/;'q;"	kind:pred
typeinfo_in_tci	erlang_rtti_implementation.m	/^    ;       typeinfo_in_tci($/;kq|-;/\<typeinfo_in_tci\>/;'q;"	kind:cons	file:
typeinfo_locn	rtti_implementation.m	/^:- type typeinfo_locn ---> typeinfo_locn(c_pointer).$/;kq|-;/\<typeinfo_locn\>/;'q;"	kind:cons	file:
typeinfo_locn	rtti_implementation.m	/^:- type typeinfo_locn ---> typeinfo_locn(c_pointer).$/;kq|-;/\<typeinfo_locn\>/;'q;"	kind:type	file:
typeinfo_locns_index	rtti_implementation.m	/^:- func typeinfo_locns_index(int, exist_info) = typeinfo_locn.$/;kq|/^\<typeinfo_locns_index\>/;'q;"	kind:func	file:
u	string.m	/^    ;       u(int)$/;kq|-;/\<u\>/;'q;"	kind:cons	file:
ui	builtin.m	/^:- mode ui == unique >> unique.$/;kq|-;/\<ui\>/;'q;"	kind:mode
unbounded_putback	stream.m	/^:- typeclass stream.unbounded_putback(Stream, Unit, State, Error)$/;kq|-;/\<unbounded_putback\>/;'q;"	kind:tc
uncapitalize_first	string.m	/^:- func string.uncapitalize_first(string) = string.$/;kq|/^\<string.uncapitalize_first\>/;'q;"	kind:func
uncapitalize_first	string.m	/^:- pred string.uncapitalize_first(string::in, string::out) is det.$/;kq|/^\<string.uncapitalize_first\>/;'q;"	kind:pred
unchecked_acos	math.m	/^:- func math.unchecked_acos(float) = float.$/;kq|/^\<math.unchecked_acos\>/;'q;"	kind:func
unchecked_asin	math.m	/^:- func math.unchecked_asin(float) = float.$/;kq|/^\<math.unchecked_asin\>/;'q;"	kind:func
unchecked_left_shift	int.m	/^:- func unchecked_left_shift(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_left_shift\>/;'q;"	kind:func
unchecked_ln	math.m	/^:- func math.unchecked_ln(float) = float.$/;kq|/^\<math.unchecked_ln\>/;'q;"	kind:func
unchecked_log	math.m	/^:- func math.unchecked_log(float, float) = float.$/;kq|/^\<math.unchecked_log\>/;'q;"	kind:func
unchecked_log10	math.m	/^:- func math.unchecked_log10(float) = float.$/;kq|/^\<math.unchecked_log10\>/;'q;"	kind:func
unchecked_log2	math.m	/^:- func math.unchecked_log2(float) = float.$/;kq|/^\<math.unchecked_log2\>/;'q;"	kind:func
unchecked_pow	math.m	/^:- func math.unchecked_pow(float, float) = float.$/;kq|/^\<math.unchecked_pow\>/;'q;"	kind:func
unchecked_quotient	float.m	/^:- func unchecked_quotient(float::in, float::in) = (float::uo) is det.$/;kq|/^\<unchecked_quotient\>/;'q;"	kind:func
unchecked_quotient	int.m	/^:- func unchecked_quotient(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_quotient\>/;'q;"	kind:func
unchecked_rem	int.m	/^:- func unchecked_rem(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_rem\>/;'q;"	kind:func
unchecked_right_shift	int.m	/^:- func unchecked_right_shift(int::in, int::in) = (int::uo) is det.$/;kq|/^\<unchecked_right_shift\>/;'q;"	kind:func
unchecked_sqrt	math.m	/^:- func math.unchecked_sqrt(float) = float.$/;kq|/^\<math.unchecked_sqrt\>/;'q;"	kind:func
unconstrained_type_info_from_typeclass_info	private_builtin.m	/^:- pred unconstrained_type_info_from_typeclass_info(typeclass_info::in,$/;kq|/^\<unconstrained_type_info_from_typeclass_info\>/;'q;"	kind:pred
unexpected	require.m	/^:- func unexpected(string, string) = _ is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:func
unexpected	require.m	/^:- func unexpected(string, string, string) = _ is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:func
unexpected	require.m	/^:- pred unexpected(string::in, string::in) is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:pred
unexpected	require.m	/^:- pred unexpected(string::in, string::in, string::in) is erroneous.$/;kq|/^\<unexpected\>/;'q;"	kind:pred
unget	io.m	/^    pred(unget\/4) is io.putback_byte$/;kq|-;/\<unget\>/;'q;"	kind:tcim	file:
unget	io.m	/^    pred(unget\/4) is io.putback_char$/;kq|-;/\<unget\>/;'q;"	kind:tcim	file:
unget	stream.m	/^    pred unget(Stream::in, Unit::in, State::di, State::uo) is det$/;kq|-;/\<unget\>/;'q;"	kind:tcm
unify	builtin.m	/^:- inst unify == (pred(in, in) is semidet).$/;kq|-;/\<unify\>/;'q;"	kind:inst
unify	builtin.m	/^:- pred unify(T::in, T::in) is semidet.$/;kq|/^\<unify\>/;'q;"	kind:pred
unify	builtin.m	/^:- type unify(T) == pred(T, T).$/;kq|-;/\<unify\>/;'q;"	kind:type
unify_or_compare_pred	rtti_implementation.m	/^    --->    unify_or_compare_pred.$/;kq|-;/\<unify_or_compare_pred\>/;'q;"	kind:cons	file:
unify_or_compare_pred	rtti_implementation.m	/^:- type unify_or_compare_pred$/;kq|-;/\<unify_or_compare_pred\>/;'q;"	kind:type	file:
unify_term	term.m	/^:- pred unify_term(term(T)::in, term(T)::in, substitution(T)::in,$/;kq|/^\<unify_term\>/;'q;"	kind:pred
unify_term_bound_var	term.m	/^:- pred unify_term_bound_var(var(T)::in, var(T)::in, list(var(T))::in,$/;kq|/^\<unify_term_bound_var\>/;'q;"	kind:pred	file:
unify_term_dont_bind	term.m	/^:- pred unify_term_dont_bind(term(T)::in, term(T)::in, list(var(T))::in,$/;kq|/^\<unify_term_dont_bind\>/;'q;"	kind:pred
unify_term_list	term.m	/^:- pred unify_term_list(list(term(T))::in, list(term(T))::in,$/;kq|/^\<unify_term_list\>/;'q;"	kind:pred
unify_term_list_dont_bind	term.m	/^:- pred unify_term_list_dont_bind(list(term(T))::in, list(term(T))::in,$/;kq|/^\<unify_term_list_dont_bind\>/;'q;"	kind:pred
unify_tuple	erlang_rtti_implementation.m	/^:- pred unify_tuple(type_info::in, T::in, T::in) is semidet.$/;kq|/^\<unify_tuple\>/;'q;"	kind:pred	file:
unify_tuple	rtti_implementation.m	/^:- pred unify_tuple(type_info::in, T::in, T::in) is semidet.$/;kq|/^\<unify_tuple\>/;'q;"	kind:pred	file:
unify_tuple_pos	erlang_rtti_implementation.m	/^:- pred unify_tuple_pos(int::in, int::in,$/;kq|/^\<unify_tuple_pos\>/;'q;"	kind:pred	file:
unify_tuple_pos	rtti_implementation.m	/^:- pred unify_tuple_pos(int::in, int::in,$/;kq|/^\<unify_tuple_pos\>/;'q;"	kind:pred	file:
union	bag.m	/^:- func bag.union(bag(T), bag(T)) = bag(T).$/;kq|/^\<bag.union\>/;'q;"	kind:func
union	bag.m	/^:- pred bag.union(bag(T)::in, bag(T)::in, bag(T)::out) is det.$/;kq|/^\<bag.union\>/;'q;"	kind:pred
union	bitmap.m	/^:- func union(bitmap, bitmap) = bitmap.$/;kq|/^\<union\>/;'q;"	kind:func
union	fat_sparse_bitset.m	/^:- func union(fat_sparse_bitset(T), fat_sparse_bitset(T)) =$/;kq|/^\<union\>/;'q;"	kind:func
union	fat_sparse_bitset.m	/^:- pred union(fat_sparse_bitset(T)::in, fat_sparse_bitset(T)::in,$/;kq|/^\<union\>/;'q;"	kind:pred
union	map.m	/^:- func map.union(func(V, V) = V, map(K, V), map(K, V)) = map(K, V).$/;kq|/^\<map.union\>/;'q;"	kind:func
union	map.m	/^:- pred map.union(pred(V, V, V), map(K, V), map(K, V), map(K, V)).$/;kq|/^\<map.union\>/;'q;"	kind:pred
union	set.m	/^:- func set.union(set(T), set(T)) = set(T).$/;kq|/^\<set.union\>/;'q;"	kind:func
union	set.m	/^:- pred set.union(set(T)::in, set(T)::in, set(T)::out) is det.$/;kq|/^\<set.union\>/;'q;"	kind:pred
union	set_bbbtree.m	/^:- func set_bbbtree.union(set_bbbtree(T), set_bbbtree(T)) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.union\>/;'q;"	kind:func
union	set_bbbtree.m	/^:- pred set_bbbtree.union(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.union\>/;'q;"	kind:pred
union	set_ctree234.m	/^:- func set_ctree234.union(set_ctree234(T), set_ctree234(T)) = set_ctree234(T).$/;kq|/^\<set_ctree234.union\>/;'q;"	kind:func
union	set_ctree234.m	/^:- pred set_ctree234.union(set_ctree234(T)::in, set_ctree234(T)::in,$/;kq|/^\<set_ctree234.union\>/;'q;"	kind:pred
union	set_ordlist.m	/^:- func set_ordlist.union(set_ordlist(T), set_ordlist(T)) = set_ordlist(T).$/;kq|/^\<set_ordlist.union\>/;'q;"	kind:func
union	set_ordlist.m	/^:- pred set_ordlist.union(set_ordlist(T)::in, set_ordlist(T)::in,$/;kq|/^\<set_ordlist.union\>/;'q;"	kind:pred
union	set_tree234.m	/^:- func set_tree234.union(set_tree234(T), set_tree234(T)) = set_tree234(T).$/;kq|/^\<set_tree234.union\>/;'q;"	kind:func
union	set_tree234.m	/^:- pred set_tree234.union(set_tree234(T)::in, set_tree234(T)::in,$/;kq|/^\<set_tree234.union\>/;'q;"	kind:pred
union	set_unordlist.m	/^:- func set_unordlist.union(set_unordlist(T), set_unordlist(T))$/;kq|/^\<set_unordlist.union\>/;'q;"	kind:func
union	set_unordlist.m	/^:- pred set_unordlist.union(set_unordlist(T)::in, set_unordlist(T)::in,$/;kq|/^\<set_unordlist.union\>/;'q;"	kind:pred
union	sparse_bitset.m	/^:- func union(sparse_bitset(T), sparse_bitset(T)) = sparse_bitset(T).$/;kq|/^\<union\>/;'q;"	kind:func
union	sparse_bitset.m	/^:- pred union(sparse_bitset(T)::in, sparse_bitset(T)::in,$/;kq|/^\<union\>/;'q;"	kind:pred
union	test_bitset.m	/^:- func union(test_bitset(T), test_bitset(T)) = test_bitset(T) <= enum(T).$/;kq|/^\<union\>/;'q;"	kind:func
union	test_bitset.m	/^:- pred union(test_bitset(T)::in,$/;kq|/^\<union\>/;'q;"	kind:pred
union	tree_bitset.m	/^:- func union(tree_bitset(T), tree_bitset(T)) = tree_bitset(T).$/;kq|/^\<union\>/;'q;"	kind:func
union	tree_bitset.m	/^:- pred union(tree_bitset(T)::in, tree_bitset(T)::in, tree_bitset(T)::out)$/;kq|/^\<union\>/;'q;"	kind:pred
union	version_bitmap.m	/^:- func union(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<union\>/;'q;"	kind:func
union_2	fat_sparse_bitset.m	/^:- func union_2(fat_bitset_impl, fat_bitset_impl) = fat_bitset_impl.$/;kq|/^\<union_2\>/;'q;"	kind:func	file:
union_2	map.m	/^:- pred map.union_2(assoc_list(K, V), assoc_list(K, V), pred(V, V, V),$/;kq|/^\<map.union_2\>/;'q;"	kind:pred	file:
union_2	sparse_bitset.m	/^:- func union_2(bitset_impl, bitset_impl) = bitset_impl.$/;kq|/^\<union_2\>/;'q;"	kind:func	file:
union_list	fat_sparse_bitset.m	/^:- func union_list(list(fat_sparse_bitset(T))) = fat_sparse_bitset(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
union_list	fat_sparse_bitset.m	/^:- pred union_list(list(fat_sparse_bitset(T))::in,$/;kq|/^\<union_list\>/;'q;"	kind:pred
union_list	set.m	/^:- func set.union_list(list(set(T))) = set(T).$/;kq|/^\<set.union_list\>/;'q;"	kind:func
union_list	set_bbbtree.m	/^:- func set_bbbtree.union_list(list(set_bbbtree(T))) = set_bbbtree(T).$/;kq|/^\<set_bbbtree.union_list\>/;'q;"	kind:func
union_list	set_ctree234.m	/^:- func set_ctree234.union_list(list(set_ctree234(T))) = set_ctree234(T).$/;kq|/^\<set_ctree234.union_list\>/;'q;"	kind:func
union_list	set_ctree234.m	/^:- pred set_ctree234.union_list(list(set_ctree234(T))::in,$/;kq|/^\<set_ctree234.union_list\>/;'q;"	kind:pred
union_list	set_ordlist.m	/^:- func set_ordlist.union_list(list(set_ordlist(T))) = set_ordlist(T).$/;kq|/^\<set_ordlist.union_list\>/;'q;"	kind:func
union_list	set_ordlist.m	/^:- pred set_ordlist.union_list(list(set_ordlist(T))::in, set_ordlist(T)::out)$/;kq|/^\<set_ordlist.union_list\>/;'q;"	kind:pred
union_list	set_tree234.m	/^:- func set_tree234.union_list(list(set_tree234(T))) = set_tree234(T).$/;kq|/^\<set_tree234.union_list\>/;'q;"	kind:func
union_list	set_tree234.m	/^:- pred set_tree234.union_list(list(set_tree234(T))::in, set_tree234(T)::out)$/;kq|/^\<set_tree234.union_list\>/;'q;"	kind:pred
union_list	set_unordlist.m	/^:- func set_unordlist.union_list(list(set_unordlist(T))) = set_unordlist(T).$/;kq|/^\<set_unordlist.union_list\>/;'q;"	kind:func
union_list	sparse_bitset.m	/^:- func union_list(list(sparse_bitset(T))) = sparse_bitset(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
union_list	sparse_bitset.m	/^:- pred union_list(list(sparse_bitset(T))::in, sparse_bitset(T)::out) is det.$/;kq|/^\<union_list\>/;'q;"	kind:pred
union_list	test_bitset.m	/^:- func union_list(list(test_bitset(T))) = test_bitset(T) <= enum(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
union_list	test_bitset.m	/^:- pred union_list(list(test_bitset(T))::in, test_bitset(T)::out) is det$/;kq|/^\<union_list\>/;'q;"	kind:pred
union_list	tree_bitset.m	/^:- func union_list(list(tree_bitset(T))) = tree_bitset(T).$/;kq|/^\<union_list\>/;'q;"	kind:func
union_list	tree_bitset.m	/^:- pred union_list(list(tree_bitset(T))::in, tree_bitset(T)::out) is det.$/;kq|/^\<union_list\>/;'q;"	kind:pred
union_list_pass	fat_sparse_bitset.m	/^:- pred union_list_pass(list(fat_sparse_bitset(T))::in,$/;kq|/^\<union_list_pass\>/;'q;"	kind:pred	file:
union_list_pass	sparse_bitset.m	/^:- pred union_list_pass(list(sparse_bitset(T))::in,$/;kq|/^\<union_list_pass\>/;'q;"	kind:pred	file:
union_list_pass	tree_bitset.m	/^:- pred union_list_pass(list(tree_bitset(T))::in,$/;kq|/^\<union_list_pass\>/;'q;"	kind:pred	file:
union_r	set_bbbtree.m	/^:- pred set_bbbtree.union_r(set_bbbtree(T)::in, set_bbbtree(T)::in,$/;kq|/^\<set_bbbtree.union_r\>/;'q;"	kind:pred	file:
uniq_array	array.m	/^:- inst uniq_array == uniq_array(ground).   % XXX work-around$/;kq|-;/\<uniq_array\>/;'q;"	kind:inst
uniq_array	array.m	/^:- inst uniq_array(I) == array(I).          % XXX work-around$/;kq|-;/\<uniq_array\>/;'q;"	kind:inst
uniq_bitmap	bitmap.m	/^:- inst uniq_bitmap == bitmap.  % XXX should be unique$/;kq|-;/\<uniq_bitmap\>/;'q;"	kind:inst
uniq_buffer	io.m	/^:- inst uniq_buffer == bound(buffer(uniq_array)).$/;kq|-;/\<uniq_buffer\>/;'q;"	kind:inst	file:
uniq_four	tree234.m	/^:- inst uniq_four(K, V, T)  == unique(four(K, V, K, V, K, V, T, T, T, T)).$/;kq|-;/\<uniq_four\>/;'q;"	kind:inst	file:
uniq_read_buffer	bit_buffer.read.m	/^:- inst uniq_read_buffer == ground.   % XXX Should be unique.$/;kq|-;/\<uniq_read_buffer\>/;'q;"	kind:inst
uniq_three	tree234.m	/^:- inst uniq_three(K, V, T) == unique(three(K, V, K, V, T, T, T)).$/;kq|-;/\<uniq_three\>/;'q;"	kind:inst	file:
uniq_tree234	tree234.m	/^:- inst uniq_tree234(K, V) ==$/;kq|-;/\<uniq_tree234\>/;'q;"	kind:inst
uniq_tree234_gg	tree234.m	/^:- inst uniq_tree234_gg ==$/;kq|-;/\<uniq_tree234_gg\>/;'q;"	kind:inst
uniq_two	tree234.m	/^:- inst uniq_two(K, V, T)   == unique(two(K, V, T, T)).$/;kq|-;/\<uniq_two\>/;'q;"	kind:inst	file:
uniq_write_buffer	bit_buffer.write.m	/^:- inst uniq_write_buffer == ground.   % XXX Should be unique.$/;kq|-;/\<uniq_write_buffer\>/;'q;"	kind:inst
unique	term_to_xml.m	/^    ;       unique$/;kq|-;/\<unique\>/;'q;"	kind:cons
unit	unit.m	/^:- type unit ---> unit.$/;kq|-;/\<unit\>/;'q;"	kind:cons
unit	unit.m	/^:- type unit ---> unit.$/;kq|-;/\<unit\>/;'q;"	kind:type
unit	unit.m	/^:- type unit(T) ---> unit1.$/;kq|-;/\<unit\>/;'q;"	kind:type
unit1	unit.m	/^:- type unit(T) ---> unit1.$/;kq|-;/\<unit1\>/;'q;"	kind:cons
unit_node	cord.m	/^    --->    unit_node(T)$/;kq|-;/\<unit_node\>/;'q;"	kind:cons	file:
univ	univ.m	/^:- func univ(T) = univ.$/;kq|/^\<univ\>/;'q;"	kind:func
univ	univ.m	/^:- type univ$/;kq|-;/\<univ\>/;'q;"	kind:type	file:
univ.construct_univ	univ.m	/^:- pred construct_univ(T::in, univ::out) is det.$/;kq|/^\<construct_univ\>/;'q;"	kind:pred	file:
univ.det_univ_to_type	univ.m	/^:- pred det_univ_to_type(univ::in, T::out) is det.$/;kq|/^\<det_univ_to_type\>/;'q;"	kind:pred
univ.some	univ.m	/^    --->    some [T] univ_cons(T).$/;kq|-;/\<univ.some\>/;'q;"	kind:cons	file:
univ.type_to_univ	univ.m	/^:- pred type_to_univ(T, univ).$/;kq|/^\<type_to_univ\>/;'q;"	kind:pred
univ.unravel_univ	univ.m	/^:- some [T] pred unravel_univ(univ::in, T::out) is det.$/;kq|/^\<unravel_univ\>/;'q;"	kind:pred	file:
univ_arg_can	deconstruct.m	/^:- pred univ_arg_can(T::in, int::in, univ::out) is semidet.$/;kq|/^\<univ_arg_can\>/;'q;"	kind:pred	file:
univ_arg_dna	deconstruct.m	/^:- pred univ_arg_dna(T::in, int::in, univ::out) is semidet.$/;kq|/^\<univ_arg_dna\>/;'q;"	kind:pred	file:
univ_arg_idcc	deconstruct.m	/^:- pred univ_arg_idcc(T::in, int::in, univ::in, univ::out, int::out)$/;kq|/^\<univ_arg_idcc\>/;'q;"	kind:pred	file:
univ_list_tail_to_revstrings	string.m	/^:- pred univ_list_tail_to_revstrings(noncanon_handling, ops.table, univ,$/;kq|/^\<univ_list_tail_to_revstrings\>/;'q;"	kind:pred	file:
univ_list_to_term_list	term.m	/^:- pred univ_list_to_term_list(list(univ)::in, list(term(T))::out) is det.$/;kq|/^\<univ_list_to_term_list\>/;'q;"	kind:pred	file:
univ_named_arg	rtti_implementation.m	/^:- pred univ_named_arg(T, noncanon_handling, string, univ).$/;kq|/^\<univ_named_arg\>/;'q;"	kind:pred
univ_named_arg_2	rtti_implementation.m	/^:- pred univ_named_arg_2(T, type_info, type_ctor_info, type_ctor_rep,$/;kq|/^\<univ_named_arg_2\>/;'q;"	kind:pred	file:
univ_named_arg_can	deconstruct.m	/^:- pred univ_named_arg_can(T::in, string::in, univ::out) is semidet.$/;kq|/^\<univ_named_arg_can\>/;'q;"	kind:pred	file:
univ_named_arg_dna	deconstruct.m	/^:- pred univ_named_arg_dna(T::in, string::in, univ::out) is semidet.$/;kq|/^\<univ_named_arg_dna\>/;'q;"	kind:pred	file:
univ_named_arg_idcc	deconstruct.m	/^:- pred univ_named_arg_idcc(T::in, string::in, univ::in, univ::out, int::out)$/;kq|/^\<univ_named_arg_idcc\>/;'q;"	kind:pred	file:
univ_result	prolog.m	/^:- type univ_result == pair(string, list(univ)).$/;kq|-;/\<univ_result\>/;'q;"	kind:type
univ_to_doc	pprint.m	/^:- func univ_to_doc(int, priority, univ) = doc.$/;kq|/^\<univ_to_doc\>/;'q;"	kind:func	file:
univ_to_term	term.m	/^:- func univ_to_term(univ) = term(_).$/;kq|/^\<univ_to_term\>/;'q;"	kind:func
univ_to_term	term.m	/^:- pred univ_to_term(univ::in, term(_)::out) is det.$/;kq|/^\<univ_to_term\>/;'q;"	kind:pred
univ_to_term_special_case	term.m	/^:- pred univ_to_term_special_case(string::in, string::in,$/;kq|/^\<univ_to_term_special_case\>/;'q;"	kind:pred	file:
univ_to_type	univ.m	/^:- pred univ_to_type(univ, T).$/;kq|/^\<univ_to_type\>/;'q;"	kind:pred
univ_tvar	type_desc.m	/^    ;       univ_tvar(int)$/;kq|-;/\<univ_tvar\>/;'q;"	kind:cons
univ_type	univ.m	/^:- func univ_type(univ) = type_desc.$/;kq|/^\<univ_type\>/;'q;"	kind:func
univ_type_info	erlang_rtti_implementation.m	/^:- func univ_type_info(univ) = type_info.$/;kq|/^\<univ_type_info\>/;'q;"	kind:func	file:
univ_value	univ.m	/^:- some [T] func univ_value(univ) = T.$/;kq|/^\<univ_value\>/;'q;"	kind:func
universal_type_info	erlang_rtti_implementation.m	/^    --->    universal_type_info(int)$/;kq|-;/\<universal_type_info\>/;'q;"	kind:cons	file:
unix_epoch	calendar.m	/^:- func unix_epoch = date.$/;kq|/^\<unix_epoch\>/;'q;"	kind:func
unknown	io.m	/^    ;       unknown.$/;kq|-;/\<unknown\>/;'q;"	kind:cons
unknown_stream	io.m	/^    ;       unknown_stream.$/;kq|-;/\<unknown_stream\>/;'q;"	kind:cons
unlock_globals	io.m	/^:- impure pred io.unlock_globals is det.$/;kq|/^\<io.unlock_globals\>/;'q;"	kind:pred	file:
unlock_globals	io.m	/^:- pred io.unlock_globals(io::di, io::uo) is det.$/;kq|/^\<io.unlock_globals\>/;'q;"	kind:pred	file:
unlock_stream_db	io.m	/^:- pred io.unlock_stream_db(io::di, io::uo) is det.$/;kq|/^\<io.unlock_stream_db\>/;'q;"	kind:pred	file:
unpack_date	calendar.m	/^:- pred unpack_date(date::in,$/;kq|/^\<unpack_date\>/;'q;"	kind:pred
unpack_duration	calendar.m	/^:- pred unpack_duration(duration::in, years::out, months::out,$/;kq|/^\<unpack_duration\>/;'q;"	kind:pred
unqualified	erlang_rtti_implementation.m	/^    --->    unqualified(list(char))$/;kq|-;/\<unqualified\>/;'q;"	kind:cons	file:
unravel_univ	univ.m	/^:- some [T] pred unravel_univ(univ::in, T::out) is det.$/;kq|/^\<unravel_univ\>/;'q;"	kind:pred	file:
unreachable	exception.m	/^:- pred unreachable is erroneous.$/;kq|/^\<unreachable\>/;'q;"	kind:pred
unsafe_arg_ref	store.m	/^:- pred store.unsafe_arg_ref(generic_ref(T, S)::in, int::in,$/;kq|/^\<store.unsafe_arg_ref\>/;'q;"	kind:pred
unsafe_between	string.m	/^:- func string.unsafe_between(string::in, int::in, int::in) = (string::uo)$/;kq|/^\<string.unsafe_between\>/;'q;"	kind:func
unsafe_between	string.m	/^:- pred string.unsafe_between(string::in, int::in, int::in, string::uo)$/;kq|/^\<string.unsafe_between\>/;'q;"	kind:pred
unsafe_cast	erlang_rtti_implementation.m	/^:- func unsafe_cast(T) = U.$/;kq|/^\<unsafe_cast\>/;'q;"	kind:func	file:
unsafe_cast_any_to_ground	builtin.m	/^:- func unsafe_cast_any_to_ground(T::ia) = (T::out) is det.$/;kq|/^\<unsafe_cast_any_to_ground\>/;'q;"	kind:func
unsafe_clear	bitmap.m	/^:- func unsafe_clear(bitmap, bit_index) = bitmap.$/;kq|/^\<unsafe_clear\>/;'q;"	kind:func
unsafe_clear	bitmap.m	/^:- pred unsafe_clear(bit_index, bitmap, bitmap).$/;kq|/^\<unsafe_clear\>/;'q;"	kind:pred
unsafe_copy_bits	bitmap.m	/^:- func unsafe_copy_bits(int, bitmap, bit_index,$/;kq|/^\<unsafe_copy_bits\>/;'q;"	kind:func	file:
unsafe_copy_bytes	bitmap.m	/^:- func unsafe_copy_bytes(int, bitmap, byte_index,$/;kq|/^\<unsafe_copy_bytes\>/;'q;"	kind:func	file:
unsafe_copy_unaligned_bits	bitmap.m	/^:- func unsafe_copy_unaligned_bits(int, bitmap, bit_index,$/;kq|/^\<unsafe_copy_unaligned_bits\>/;'q;"	kind:func	file:
unsafe_copy_unaligned_bytes_ltor	bitmap.m	/^:- func unsafe_copy_unaligned_bytes_ltor(bitmap, byte_index, bit_index_in_byte,$/;kq|/^\<unsafe_copy_unaligned_bytes_ltor\>/;'q;"	kind:func	file:
unsafe_copy_unaligned_bytes_rtol	bitmap.m	/^:- func unsafe_copy_unaligned_bytes_rtol(bitmap, byte_index, bit_index_in_byte,$/;kq|/^\<unsafe_copy_unaligned_bytes_rtol\>/;'q;"	kind:func	file:
unsafe_do_copy_bytes	bitmap.m	/^:- func unsafe_do_copy_bytes(bitmap, byte_index,$/;kq|/^\<unsafe_do_copy_bytes\>/;'q;"	kind:func	file:
unsafe_elem	array.m	/^:- func array.unsafe_elem(int, array(T)) = T.$/;kq|/^\<array.unsafe_elem\>/;'q;"	kind:func
unsafe_empty	version_array.m	/^:- func unsafe_empty = version_array(T).$/;kq|/^\<unsafe_empty\>/;'q;"	kind:func
unsafe_flip	bitmap.m	/^:- func unsafe_flip(bitmap, bit_index) = bitmap.$/;kq|/^\<unsafe_flip\>/;'q;"	kind:func
unsafe_flip	bitmap.m	/^:- pred unsafe_flip(bit_index, bitmap, bitmap).$/;kq|/^\<unsafe_flip\>/;'q;"	kind:pred
unsafe_get_default_formatter_map	pretty_printer.m	/^:- pred unsafe_get_default_formatter_map(formatter_map::out, io::di, io::uo)$/;kq|/^\<unsafe_get_default_formatter_map\>/;'q;"	kind:pred	file:
unsafe_get_enum_value	rtti_implementation.m	/^:- func unsafe_get_enum_value(T) = int.$/;kq|/^\<unsafe_get_enum_value\>/;'q;"	kind:func	file:
unsafe_get_foreign_enum_value	rtti_implementation.m	/^:- func unsafe_get_foreign_enum_value(T) = int.$/;kq|/^\<unsafe_get_foreign_enum_value\>/;'q;"	kind:func	file:
unsafe_get_globals	io.m	/^:- pred io.unsafe_get_globals(univ::out, io::di, io::uo) is det.$/;kq|/^\<io.unsafe_get_globals\>/;'q;"	kind:pred	file:
unsafe_hash_pred_cast	version_hash_table.m	/^:- pred unsafe_hash_pred_cast(hash_pred(K)::in, hash_pred(K)::out(hash_pred))$/;kq|/^\<unsafe_hash_pred_cast\>/;'q;"	kind:pred	file:
unsafe_index	rtti_implementation.m	/^:- func unsafe_index(int, T) = U.$/;kq|/^\<unsafe_index\>/;'q;"	kind:func	file:
unsafe_index	string.m	/^:- func string.unsafe_index(string, int) = char.$/;kq|/^\<string.unsafe_index\>/;'q;"	kind:func
unsafe_index	string.m	/^:- pred string.unsafe_index(string::in, int::in, char::uo) is det.$/;kq|/^\<string.unsafe_index\>/;'q;"	kind:pred
unsafe_index_2	string.m	/^:- pred string.unsafe_index_2(string::in, int::in, char::uo) is semidet.$/;kq|/^\<string.unsafe_index_2\>/;'q;"	kind:pred	file:
unsafe_index_code_unit	string.m	/^:- pred string.unsafe_index_code_unit(string::in, int::in, int::out) is det.$/;kq|/^\<string.unsafe_index_code_unit\>/;'q;"	kind:pred
unsafe_index_next	string.m	/^:- pred string.unsafe_index_next(string::in, int::in, int::out, char::uo)$/;kq|/^\<string.unsafe_index_next\>/;'q;"	kind:pred
unsafe_init	array.m	/^:- func unsafe_init(int::in, T::in, int::in) = (array(T)::array_uo) is det.$/;kq|/^\<unsafe_init\>/;'q;"	kind:func	file:
unsafe_init	version_array.m	/^:- func unsafe_init(int, T) = version_array(T).$/;kq|/^\<unsafe_init\>/;'q;"	kind:func
unsafe_init	version_hash_table.m	/^:- func unsafe_init(hash_pred(K)::in(hash_pred), int::in, float::in) =$/;kq|/^\<unsafe_init\>/;'q;"	kind:func
unsafe_init_default	version_hash_table.m	/^:- func unsafe_init_default(hash_pred(K)::in(hash_pred)) =$/;kq|/^\<unsafe_init_default\>/;'q;"	kind:func
unsafe_insert	hash_table.m	/^:- pred unsafe_insert(K::in, V::in, hash_pred(K)::in(hash_pred), int::in,$/;kq|/^\<unsafe_insert\>/;'q;"	kind:pred	file:
unsafe_insert	version_hash_table.m	/^:- pred unsafe_insert(K::in, V::in, hash_pred(K)::in(hash_pred), int::in,$/;kq|/^\<unsafe_insert\>/;'q;"	kind:pred	file:
unsafe_insert_items	array.m	/^:- pred array.unsafe_insert_items(list(T)::in, int::in,$/;kq|/^\<array.unsafe_insert_items\>/;'q;"	kind:pred	file:
unsafe_insert_items_reverse	array.m	/^:- pred array.unsafe_insert_items_reverse(list(T)::in, int::in,$/;kq|/^\<array.unsafe_insert_items_reverse\>/;'q;"	kind:pred	file:
unsafe_int_to_var	term.m	/^:- func unsafe_int_to_var(int) = var(T).$/;kq|/^\<unsafe_int_to_var\>/;'q;"	kind:func	file:
unsafe_is_clear	bitmap.m	/^:- pred unsafe_is_clear(bitmap, bit_index).$/;kq|/^\<unsafe_is_clear\>/;'q;"	kind:pred
unsafe_is_set	bitmap.m	/^:- pred unsafe_is_set(bitmap, bit_index).$/;kq|/^\<unsafe_is_set\>/;'q;"	kind:pred
unsafe_lookup	array.m	/^:- pred array.unsafe_lookup(array(T), int, T).$/;kq|/^\<array.unsafe_lookup\>/;'q;"	kind:pred
unsafe_make_enum	rtti_implementation.m	/^:- func unsafe_make_enum(int) = T.$/;kq|/^\<unsafe_make_enum\>/;'q;"	kind:func	file:
unsafe_new	version_array.m	/^:- func unsafe_new(int, T) = version_array(T).$/;kq|/^\<unsafe_new\>/;'q;"	kind:func
unsafe_new_arg_ref	store.m	/^:- pred store.unsafe_new_arg_ref(T::di, int::in, generic_ref(ArgT, S)::out,$/;kq|/^\<store.unsafe_new_arg_ref\>/;'q;"	kind:pred
unsafe_new_uninitialized_mutvar	store.m	/^:- pred store.unsafe_new_uninitialized_mutvar(generic_mutvar(T, S)::out,$/;kq|/^\<store.unsafe_new_uninitialized_mutvar\>/;'q;"	kind:pred	file:
unsafe_prev_index	string.m	/^:- pred string.unsafe_prev_index(string::in, int::in, int::out, char::uo)$/;kq|/^\<string.unsafe_prev_index\>/;'q;"	kind:pred
unsafe_promise_unique	builtin.m	/^:- func unsafe_promise_unique(T::in) = (T::uo) is det.$/;kq|/^\<unsafe_promise_unique\>/;'q;"	kind:func
unsafe_promise_unique	builtin.m	/^:- pred unsafe_promise_unique(T::in, T::uo) is det.$/;kq|/^\<unsafe_promise_unique\>/;'q;"	kind:pred
unsafe_pseudo_type_info_index	erlang_rtti_implementation.m	/^:- func unsafe_pseudo_type_info_index(int, T) = maybe_pseudo_type_info.$/;kq|/^\<unsafe_pseudo_type_info_index\>/;'q;"	kind:func	file:
unsafe_ref_value	store.m	/^:- pred store.unsafe_ref_value(generic_ref(T, S)::in, T::uo,$/;kq|/^\<store.unsafe_ref_value\>/;'q;"	kind:pred	file:
unsafe_rewind	version_array.m	/^:- func unsafe_rewind(version_array(T)) = version_array(T).$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
unsafe_rewind	version_array.m	/^:- pred unsafe_rewind(version_array(T)::in, version_array(T)::out) is det.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:pred
unsafe_rewind	version_array2d.m	/^:- func unsafe_rewind(version_array2d(T)) = version_array2d(T).$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
unsafe_rewind	version_bitmap.m	/^:- func unsafe_rewind(version_bitmap) = version_bitmap.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
unsafe_rewind	version_bitmap.m	/^:- pred unsafe_rewind(version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:pred
unsafe_rewind	version_store.m	/^:- func unsafe_rewind(version_store(T)) = version_store(T).$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
unsafe_rewind	version_store.m	/^:- pred unsafe_rewind(version_store(T)::in, version_store(T)::out) is det.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:pred
unsafe_set	array.m	/^:- pred array.unsafe_set(int, T, array(T), array(T)).$/;kq|/^\<array.unsafe_set\>/;'q;"	kind:pred
unsafe_set	array2d.m	/^:- pred unsafe_set(int, int, T,  array2d(T), array2d(T)).$/;kq|/^\<unsafe_set\>/;'q;"	kind:pred
unsafe_set	bitmap.m	/^:- func unsafe_set(bitmap, bit_index) = bitmap.$/;kq|/^\<unsafe_set\>/;'q;"	kind:func
unsafe_set	bitmap.m	/^:- pred unsafe_set(bit_index, bitmap, bitmap).$/;kq|/^\<unsafe_set\>/;'q;"	kind:pred
unsafe_set_char	string.m	/^:- func string.unsafe_set_char(char, int, string) = string.$/;kq|/^\<string.unsafe_set_char\>/;'q;"	kind:func
unsafe_set_char	string.m	/^:- pred string.unsafe_set_char(char, int, string, string).$/;kq|/^\<string.unsafe_set_char\>/;'q;"	kind:pred
unsafe_set_char_2	string.m	/^:- pred string.unsafe_set_char_2(char, int, string, string).$/;kq|/^\<string.unsafe_set_char_2\>/;'q;"	kind:pred	file:
unsafe_set_globals	io.m	/^:- pred io.unsafe_set_globals(univ::in, io::di, io::uo) is det.$/;kq|/^\<io.unsafe_set_globals\>/;'q;"	kind:pred	file:
unsafe_skip_ws_pred_cast	parsing_utils.m	/^:- pred unsafe_skip_ws_pred_cast(skip_whitespace_pred::in,$/;kq|/^\<unsafe_skip_ws_pred_cast\>/;'q;"	kind:pred	file:
unsafe_substring	string.m	/^:- func string.unsafe_substring(string::in, int::in, int::in) = (string::uo)$/;kq|/^\<string.unsafe_substring\>/;'q;"	kind:func
unsafe_substring	string.m	/^:- pred string.unsafe_substring(string::in, int::in, int::in, string::uo)$/;kq|/^\<string.unsafe_substring\>/;'q;"	kind:pred
unsafe_try_stm	exception.m	/^:- pred unsafe_try_stm(pred(A, stm, stm),$/;kq|/^\<unsafe_try_stm\>/;'q;"	kind:pred
unsafe_type_cast	private_builtin.m	/^:- pred unsafe_type_cast(T1::in, T2::out) is det.$/;kq|/^\<unsafe_type_cast\>/;'q;"	kind:pred
unsafe_type_info_index	erlang_rtti_implementation.m	/^:- func unsafe_type_info_index(int, type_info) = type_info.$/;kq|/^\<unsafe_type_info_index\>/;'q;"	kind:func	file:
unsafe_write_stm_var	stm_builtin.m	/^:- pred unsafe_write_stm_var(stm_var(T)::in, T::in, stm::di, stm::uo) is det.$/;kq|/^\<unsafe_write_stm_var\>/;'q;"	kind:pred
unsorted_aggregate	solutions.m	/^:- pred unsorted_aggregate(pred(T), pred(T, U, U), U, U).$/;kq|/^\<unsorted_aggregate\>/;'q;"	kind:pred
unsorted_aggregate2	solutions.m	/^:- pred unsorted_aggregate2(pred(T), pred(T, U, U, V, V), U, U, V, V).$/;kq|/^\<unsorted_aggregate2\>/;'q;"	kind:pred
unsorted_solutions	solutions.m	/^:- pred unsorted_solutions(pred(T), list(T)).$/;kq|/^\<unsorted_solutions\>/;'q;"	kind:pred
unsupported_dtd_type	term_to_xml.m	/^    ;       unsupported_dtd_type(type_desc)$/;kq|-;/\<unsupported_dtd_type\>/;'q;"	kind:cons
untake	thread.channel.m	/^:- pred channel.untake(channel(T)::in, T::in, io::di, io::uo) is det.$/;kq|/^\<channel.untake\>/;'q;"	kind:pred
unused	builtin.m	/^:- mode unused == free >> free.$/;kq|-;/\<unused\>/;'q;"	kind:mode
unused	private_builtin.m	/^:- pred unused is det.$/;kq|/^\<unused\>/;'q;"	kind:pred
uo	builtin.m	/^:- mode uo == free >> unique.$/;kq|-;/\<uo\>/;'q;"	kind:mode
uo_tree234	tree234.m	/^:- mode uo_tree234       == free >> uniq_tree234(ground, ground).$/;kq|-;/\<uo_tree234\>/;'q;"	kind:mode
uo_tree234	tree234.m	/^:- mode uo_tree234(K, V) == free >> uniq_tree234(K, V).$/;kq|-;/\<uo_tree234\>/;'q;"	kind:mode
uo_two	tree234.m	/^:- mode uo_two  == out(uniq_two(unique, unique, unique)).$/;kq|-;/\<uo_two\>/;'q;"	kind:mode	file:
update	injection.m	/^:- func injection.update(injection(K, V), K, V) = injection(K, V) is semidet.$/;kq|/^\<injection.update\>/;'q;"	kind:func
update	injection.m	/^:- pred injection.update(injection(K, V)::in, K::in, V::in,$/;kq|/^\<injection.update\>/;'q;"	kind:pred
update	map.m	/^:- func map.update(map(K, V), K, V) = map(K, V) is semidet.$/;kq|/^\<map.update\>/;'q;"	kind:func
update	map.m	/^:- pred map.update(K::in, V::in, map(K, V)::in, map(K, V)::out) is semidet.$/;kq|/^\<map.update\>/;'q;"	kind:pred
update	multi_map.m	/^:- pred multi_map.update(K::in, V::in,$/;kq|/^\<multi_map.update\>/;'q;"	kind:pred
update	rbtree.m	/^:- pred rbtree.update(K::in, V::in, rbtree(K, V)::in, rbtree(K, V)::out)$/;kq|/^\<rbtree.update\>/;'q;"	kind:pred
update	tree234.m	/^:- pred tree234.update(K::in, V::in, tree234(K, V)::in, tree234(K, V)::out)$/;kq|/^\<tree234.update\>/;'q;"	kind:pred
update_globals	io.m	/^:- pred io.update_globals(pred(univ, univ)::in(pred(in, out) is det),$/;kq|/^\<io.update_globals\>/;'q;"	kind:pred
update_ref	benchmarking.m	/^:- impure pred update_ref(int_reference::in, int::in) is det.$/;kq|/^\<update_ref\>/;'q;"	kind:pred	file:
upper_bound_lookup	map.m	/^:- pred map.upper_bound_lookup(map(K, V)::in, K::in, K::out, V::out) is det.$/;kq|/^\<map.upper_bound_lookup\>/;'q;"	kind:pred
upper_bound_lookup	rbtree.m	/^:- pred rbtree.upper_bound_lookup(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.upper_bound_lookup\>/;'q;"	kind:pred
upper_bound_lookup	tree234.m	/^:- pred tree234.upper_bound_lookup(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.upper_bound_lookup\>/;'q;"	kind:pred
upper_bound_search	map.m	/^:- pred map.upper_bound_search(map(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<map.upper_bound_search\>/;'q;"	kind:pred
upper_bound_search	rbtree.m	/^:- pred rbtree.upper_bound_search(rbtree(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<rbtree.upper_bound_search\>/;'q;"	kind:pred
upper_bound_search	tree234.m	/^:- pred tree234.upper_bound_search(tree234(K, V)::in, K::in, K::out, V::out)$/;kq|/^\<tree234.upper_bound_search\>/;'q;"	kind:pred
use	exception.m	/^:- impure pred use(T::in) is det.$/;kq|/^\<use\>/;'q;"	kind:pred	file:
use_windows_paths	dir.m	/^:- pred dir.use_windows_paths is semidet.$/;kq|/^\<dir.use_windows_paths\>/;'q;"	kind:pred
usereq	rtti_implementation.m	/^:- inst usereq$/;kq|-;/\<usereq\>/;'q;"	kind:inst	file:
using_sprintf	string.m	/^:- pred using_sprintf is semidet.$/;kq|/^\<using_sprintf\>/;'q;"	kind:pred	file:
using_sprintf_for_char	string.m	/^:- pred using_sprintf_for_char(char::in) is semidet.$/;kq|/^\<using_sprintf_for_char\>/;'q;"	kind:pred	file:
using_sprintf_for_string	string.m	/^:- pred using_sprintf_for_string(string::in) is semidet.$/;kq|/^\<using_sprintf_for_string\>/;'q;"	kind:pred	file:
val	lazy.m	/^:- func val(T) = lazy(T).$/;kq|/^\<val\>/;'q;"	kind:func
value	lazy.m	/^    --->    value(T)$/;kq|-;/\<value\>/;'q;"	kind:cons	file:
value	robdd.m	/^:- func value(robdd(T)) = var(T).$/;kq|/^\<value\>/;'q;"	kind:func	file:
value_to_revstrings	string.m	/^:- pred value_to_revstrings(noncanon_handling, ops.table, T,$/;kq|/^\<value_to_revstrings\>/;'q;"	kind:pred	file:
value_to_revstrings_prio	string.m	/^:- pred value_to_revstrings_prio(noncanon_handling, ops.table, ops.priority, T,$/;kq|/^\<value_to_revstrings_prio\>/;'q;"	kind:pred	file:
values	assoc_list.m	/^:- func assoc_list.values(assoc_list(K, V)) = list(V).$/;kq|/^\<assoc_list.values\>/;'q;"	kind:func
values	assoc_list.m	/^:- pred assoc_list.values(assoc_list(K, V)::in, list(V)::out) is det.$/;kq|/^\<assoc_list.values\>/;'q;"	kind:pred
values	injection.m	/^:- func injection.values(injection(K, V)) = list(V).$/;kq|/^\<injection.values\>/;'q;"	kind:func
values	injection.m	/^:- pred injection.values(injection(K, V)::in, list(V)::out) is det.$/;kq|/^\<injection.values\>/;'q;"	kind:pred
values	map.m	/^:- func map.values(map(_K, V)) = list(V).$/;kq|/^\<map.values\>/;'q;"	kind:func
values	map.m	/^:- pred map.values(map(_K, V)::in, list(V)::out) is det.$/;kq|/^\<map.values\>/;'q;"	kind:pred
values	multi_map.m	/^:- func multi_map.values(multi_map(_K, V)) = list(V).$/;kq|/^\<multi_map.values\>/;'q;"	kind:func
values	multi_map.m	/^:- pred multi_map.values(multi_map(_K, V)::in, list(V)::out) is det.$/;kq|/^\<multi_map.values\>/;'q;"	kind:pred
values	rbtree.m	/^:- func rbtree.values(rbtree(K, V)) = list(V).$/;kq|/^\<rbtree.values\>/;'q;"	kind:func
values	rbtree.m	/^:- pred rbtree.values(rbtree(K, V)::in, list(V)::out) is det.$/;kq|/^\<rbtree.values\>/;'q;"	kind:pred
values	tree234.m	/^:- func tree234.values(tree234(K, V)) = list(V).$/;kq|/^\<tree234.values\>/;'q;"	kind:func
values	tree234.m	/^:- pred tree234.values(tree234(K, V)::in, list(V)::out) is det.$/;kq|/^\<tree234.values\>/;'q;"	kind:pred
values_acc	tree234.m	/^:- pred tree234.values_acc(tree234(K, V), list(V), list(V)).$/;kq|/^\<tree234.values_acc\>/;'q;"	kind:pred	file:
var	private_builtin.m	/^:- impure pred var(T).$/;kq|/^\<var\>/;'q;"	kind:pred
var	robdd.m	/^:- func var(var(T)) = robdd(T).$/;kq|/^\<var\>/;'q;"	kind:func
var	term.m	/^    --->    var(int).$/;kq|-;/\<var\>/;'q;"	kind:cons	file:
var	term.m	/^:- type var     ==  var(generic).$/;kq|-;/\<var\>/;'q;"	kind:type
var	term.m	/^:- type var(T)$/;kq|-;/\<var\>/;'q;"	kind:type	file:
var_arity_arg_type_info	erlang_rtti_implementation.m	/^:- func var_arity_arg_type_info(ti_info(T), TypeInfo, int) = type_info.$/;kq|/^\<var_arity_arg_type_info\>/;'q;"	kind:func	file:
var_arity_pseudo_type_info_index	erlang_rtti_implementation.m	/^:- func var_arity_pseudo_type_info_index(int, T) = maybe_pseudo_type_info.$/;kq|/^\<var_arity_pseudo_type_info_index\>/;'q;"	kind:func	file:
var_arity_type_info_arity	erlang_rtti_implementation.m	/^:- func var_arity_type_info_arity(type_info) = int.$/;kq|/^\<var_arity_type_info_arity\>/;'q;"	kind:func	file:
var_arity_type_info_index	erlang_rtti_implementation.m	/^:- func var_arity_type_info_index(int, type_info) = type_info.$/;kq|/^\<var_arity_type_info_index\>/;'q;"	kind:func	file:
var_arity_type_info_index_as_pti	rtti_implementation.m	/^:- func var_arity_type_info_index_as_pti(type_info, int) = pseudo_type_info.$/;kq|/^\<var_arity_type_info_index_as_pti\>/;'q;"	kind:func	file:
var_arity_type_info_index_as_ti	rtti_implementation.m	/^:- func var_arity_type_info_index_as_ti(type_info, int) = type_info.$/;kq|/^\<var_arity_type_info_index_as_ti\>/;'q;"	kind:func	file:
var_cache	robdd.m	/^:- type var_cache(T) == map(var(T), bool).$/;kq|-;/\<var_cache\>/;'q;"	kind:type	file:
var_entailed	robdd.m	/^:- pred var_entailed(robdd(T)::in, var(T)::in) is semidet.$/;kq|/^\<var_entailed\>/;'q;"	kind:pred
var_id	term.m	/^:- func var_id(var(T)) = int.$/;kq|/^\<var_id\>/;'q;"	kind:func
var_is_constrained	robdd.m	/^:- pred var_is_constrained(robdd(T)::in, var(T)::in) is semidet.$/;kq|/^\<var_is_constrained\>/;'q;"	kind:pred
var_list_to_term_list	term.m	/^:- func var_list_to_term_list(list(var(T))) = list(term(T)).$/;kq|/^\<var_list_to_term_list\>/;'q;"	kind:func
var_list_to_term_list	term.m	/^:- pred var_list_to_term_list(list(var(T))::in, list(term(T))::out) is det.$/;kq|/^\<var_list_to_term_list\>/;'q;"	kind:pred
var_name_list	varset.m	/^:- func varset.var_name_list(varset(T)) = assoc_list(var(T), string).$/;kq|/^\<varset.var_name_list\>/;'q;"	kind:func
var_name_list	varset.m	/^:- pred varset.var_name_list(varset(T)::in, assoc_list(var(T), string)::out)$/;kq|/^\<varset.var_name_list\>/;'q;"	kind:pred
var_names	parser.m	/^                var_names   :: map(string, var(T))$/;kq|-;/\<var_names\>/;'q;"	kind:fld	file:
var_names	varset.m	/^                var_names   :: map(var(T), string),$/;kq|-;/\<var_names\>/;'q;"	kind:fld	file:
var_restrict_false	robdd.m	/^:- func var_restrict_false(var(T), robdd(T)) = robdd(T).$/;kq|/^\<var_restrict_false\>/;'q;"	kind:func
var_restrict_true	robdd.m	/^:- func var_restrict_true(var(T), robdd(T)) = robdd(T).$/;kq|/^\<var_restrict_true\>/;'q;"	kind:func
var_supply	term.m	/^    --->    var_supply(int).$/;kq|-;/\<var_supply\>/;'q;"	kind:cons	file:
var_supply	term.m	/^:- type var_supply(T)$/;kq|-;/\<var_supply\>/;'q;"	kind:type	file:
var_supply	varset.m	/^                var_supply  :: var_supply(T),$/;kq|-;/\<var_supply\>/;'q;"	kind:fld	file:
var_supply_max_var	term.m	/^:- func var_supply_max_var(var_supply(T)) = var(T).$/;kq|/^\<var_supply_max_var\>/;'q;"	kind:func
var_supply_num_allocated	term.m	/^:- func var_supply_num_allocated(var_supply(T)) = int.$/;kq|/^\<var_supply_num_allocated\>/;'q;"	kind:func
var_to_doc	pprint.m	/^:- func var_to_doc(int, var(T)) = doc.$/;kq|/^\<var_to_doc\>/;'q;"	kind:func	file:
var_to_int	term.m	/^:- func var_to_int(var(T)) = int.$/;kq|/^\<var_to_int\>/;'q;"	kind:func
var_to_int	term.m	/^:- pred var_to_int(var(T)::in, int::out) is det.$/;kq|/^\<var_to_int\>/;'q;"	kind:pred
var_values	varset.m	/^                var_values  :: map(var(T), term(T))$/;kq|-;/\<var_values\>/;'q;"	kind:fld	file:
variable	lexer.m	/^    ;       variable(string)$/;kq|-;/\<variable\>/;'q;"	kind:cons
variable	term.m	/^    ;       variable($/;kq|-;/\<variable\>/;'q;"	kind:cons
vars	robdd.m	/^:- type vars(T) == sparse_bitset(var(T)). % XXX experiment with different reps.$/;kq|-;/\<vars\>/;'q;"	kind:type
vars	term.m	/^:- func vars(term(T)) = list(var(T)).$/;kq|/^\<vars\>/;'q;"	kind:func
vars	term.m	/^:- pred vars(term(T)::in, list(var(T))::out) is det.$/;kq|/^\<vars\>/;'q;"	kind:pred
vars	varset.m	/^:- func varset.vars(varset(T)) = list(var(T)).$/;kq|/^\<varset.vars\>/;'q;"	kind:func
vars	varset.m	/^:- pred varset.vars(varset(T)::in, list(var(T))::out) is det.$/;kq|/^\<varset.vars\>/;'q;"	kind:pred
vars_2	term.m	/^:- func vars_2(term(T), list(var(T))) = list(var(T)).$/;kq|/^\<vars_2\>/;'q;"	kind:func
vars_2	term.m	/^:- pred vars_2(term(T)::in, list(var(T))::in, list(var(T))::out) is det.$/;kq|/^\<vars_2\>/;'q;"	kind:pred
vars_2	varset.m	/^:- func varset.vars_2(var_supply(T), var_supply(T), list(var(T)))$/;kq|/^\<varset.vars_2\>/;'q;"	kind:func	file:
vars_2_list	term.m	/^:- pred vars_2_list(list(term(T))::in, list(var(T))::in,$/;kq|/^\<vars_2_list\>/;'q;"	kind:pred	file:
vars_are_constrained	robdd.m	/^:- pred vars_are_constrained(robdd(T)::in, vars(T)::in) is semidet.$/;kq|/^\<vars_are_constrained\>/;'q;"	kind:pred
vars_are_constrained_2	robdd.m	/^:- pred vars_are_constrained_2(robdd(T)::in, list(var(T))::in) is semidet.$/;kq|/^\<vars_are_constrained_2\>/;'q;"	kind:pred	file:
vars_disentailed	robdd.m	/^:- func vars_disentailed(robdd(T)) = vars_entailed_result(T).$/;kq|/^\<vars_disentailed\>/;'q;"	kind:func
vars_entailed	robdd.m	/^:- func vars_entailed(robdd(T)) = vars_entailed_result(T).$/;kq|/^\<vars_entailed\>/;'q;"	kind:func
vars_entailed_result	robdd.m	/^:- func vars_entailed_result(T) `insert` var(T) = vars_entailed_result(T).$/;kq|/^\<vars_entailed_result\>/;'q;"	kind:func	file:
vars_entailed_result	robdd.m	/^:- type vars_entailed_result(T) == entailment_result(vars(T)).$/;kq|-;/\<vars_entailed_result\>/;'q;"	kind:type
vars_list	term.m	/^:- func vars_list(list(term(T))) = list(var(T)).$/;kq|/^\<vars_list\>/;'q;"	kind:func
vars_list	term.m	/^:- pred vars_list(list(term(T))::in, list(var(T))::out) is det.$/;kq|/^\<vars_list\>/;'q;"	kind:pred
varset	parser.m	/^                varset      :: varset(T),$/;kq|-;/\<varset\>/;'q;"	kind:fld	file:
varset	varset.m	/^    --->    varset($/;kq|-;/\<varset\>/;'q;"	kind:cons	file:
varset	varset.m	/^:- type varset  ==  varset(generic).$/;kq|-;/\<varset\>/;'q;"	kind:type
varset	varset.m	/^:- type varset(T)$/;kq|-;/\<varset\>/;'q;"	kind:type	file:
varset.bind_var	varset.m	/^:- func varset.bind_var(varset(T), var(T), term(T)) = varset(T).$/;kq|/^\<varset.bind_var\>/;'q;"	kind:func
varset.bind_var	varset.m	/^:- pred varset.bind_var(var(T)::in, term(T)::in,$/;kq|/^\<varset.bind_var\>/;'q;"	kind:pred
varset.bind_vars	varset.m	/^:- func varset.bind_vars(varset(T), substitution(T)) = varset(T).$/;kq|/^\<varset.bind_vars\>/;'q;"	kind:func
varset.bind_vars	varset.m	/^:- pred varset.bind_vars(substitution(T)::in,$/;kq|/^\<varset.bind_vars\>/;'q;"	kind:pred
varset.bind_vars_2	varset.m	/^:- pred varset.bind_vars_2(assoc_list(var(T), term(T))::in, varset(T)::in,$/;kq|/^\<varset.bind_vars_2\>/;'q;"	kind:pred	file:
varset.coerce	varset.m	/^:- func varset.coerce(varset(T)) = varset(U).$/;kq|/^\<varset.coerce\>/;'q;"	kind:func
varset.coerce	varset.m	/^:- pred varset.coerce(varset(T)::in, varset(U)::out) is det.$/;kq|/^\<varset.coerce\>/;'q;"	kind:pred
varset.copy_var_names	varset.m	/^:- pred copy_var_names(assoc_list(var(T), string)::in, map(var(T), var(T))::in,$/;kq|/^\<copy_var_names\>/;'q;"	kind:pred	file:
varset.create_name_var_map	varset.m	/^:- func varset.create_name_var_map(varset(T)) = map(string, var(T)).$/;kq|/^\<varset.create_name_var_map\>/;'q;"	kind:func
varset.create_name_var_map	varset.m	/^:- pred varset.create_name_var_map(varset(T)::in, map(string, var(T))::out)$/;kq|/^\<varset.create_name_var_map\>/;'q;"	kind:pred
varset.delete_sorted_vars	varset.m	/^:- func varset.delete_sorted_vars(varset(T), list(var(T))) = varset(T).$/;kq|/^\<varset.delete_sorted_vars\>/;'q;"	kind:func
varset.delete_sorted_vars	varset.m	/^:- pred varset.delete_sorted_vars(list(var(T))::in,$/;kq|/^\<varset.delete_sorted_vars\>/;'q;"	kind:pred
varset.delete_var	varset.m	/^:- func varset.delete_var(varset(T), var(T)) = varset(T).$/;kq|/^\<varset.delete_var\>/;'q;"	kind:func
varset.delete_var	varset.m	/^:- pred varset.delete_var(var(T)::in, varset(T)::in, varset(T)::out) is det.$/;kq|/^\<varset.delete_var\>/;'q;"	kind:pred
varset.delete_vars	varset.m	/^:- func varset.delete_vars(varset(T), list(var(T))) = varset(T).$/;kq|/^\<varset.delete_vars\>/;'q;"	kind:func
varset.delete_vars	varset.m	/^:- pred varset.delete_vars(list(var(T))::in, varset(T)::in, varset(T)::out)$/;kq|/^\<varset.delete_vars\>/;'q;"	kind:pred
varset.ensure_unique_names	varset.m	/^:- func varset.ensure_unique_names(list(var(T)), string, varset(T))$/;kq|/^\<varset.ensure_unique_names\>/;'q;"	kind:func
varset.ensure_unique_names	varset.m	/^:- pred varset.ensure_unique_names(list(var(T))::in,$/;kq|/^\<varset.ensure_unique_names\>/;'q;"	kind:pred
varset.ensure_unique_names_2	varset.m	/^:- pred varset.ensure_unique_names_2(list(var(T))::in, string::in,$/;kq|/^\<varset.ensure_unique_names_2\>/;'q;"	kind:pred	file:
varset.get_bindings	varset.m	/^:- func varset.get_bindings(varset(T)) = substitution(T).$/;kq|/^\<varset.get_bindings\>/;'q;"	kind:func
varset.get_bindings	varset.m	/^:- pred varset.get_bindings(varset(T)::in, substitution(T)::out) is det.$/;kq|/^\<varset.get_bindings\>/;'q;"	kind:pred
varset.init	varset.m	/^:- func varset.init = varset(T).$/;kq|/^\<varset.init\>/;'q;"	kind:func
varset.init	varset.m	/^:- pred varset.init(varset(T)::out) is det.$/;kq|/^\<varset.init\>/;'q;"	kind:pred
varset.is_empty	varset.m	/^:- pred varset.is_empty(varset(T)::in) is semidet.$/;kq|/^\<varset.is_empty\>/;'q;"	kind:pred
varset.lookup_name	varset.m	/^:- func varset.lookup_name(varset(T), var(T)) = string.$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:func
varset.lookup_name	varset.m	/^:- func varset.lookup_name(varset(T), var(T), string) = string.$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:func
varset.lookup_name	varset.m	/^:- pred varset.lookup_name(varset(T)::in, var(T)::in, string::in, string::out)$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:pred
varset.lookup_name	varset.m	/^:- pred varset.lookup_name(varset(T)::in, var(T)::in, string::out) is det.$/;kq|/^\<varset.lookup_name\>/;'q;"	kind:pred
varset.lookup_vars	varset.m	/^:- func varset.lookup_vars(varset(T)) = substitution(T).$/;kq|/^\<varset.lookup_vars\>/;'q;"	kind:func
varset.lookup_vars	varset.m	/^:- pred varset.lookup_vars(varset(T)::in, substitution(T)::out) is det.$/;kq|/^\<varset.lookup_vars\>/;'q;"	kind:pred
varset.max_var	varset.m	/^:- func varset.max_var(varset(T)) = var(T).$/;kq|/^\<varset.max_var\>/;'q;"	kind:func
varset.merge	varset.m	/^:- pred varset.merge(varset(T)::in, varset(T)::in, list(term(T))::in,$/;kq|/^\<varset.merge\>/;'q;"	kind:pred
varset.merge_renaming	varset.m	/^:- pred varset.merge_renaming(varset(T)::in, varset(T)::in, varset(T)::out,$/;kq|/^\<varset.merge_renaming\>/;'q;"	kind:pred
varset.merge_renaming_2	varset.m	/^:- pred varset.merge_renaming_2(var_supply(T)::in, var_supply(T)::in,$/;kq|/^\<varset.merge_renaming_2\>/;'q;"	kind:pred	file:
varset.merge_subst	varset.m	/^:- pred varset.merge_subst(varset(T)::in, varset(T)::in, varset(T)::out,$/;kq|/^\<varset.merge_subst\>/;'q;"	kind:pred
varset.merge_subst_2	varset.m	/^:- pred varset.merge_subst_2(var_supply(T)::in, var_supply(T)::in,$/;kq|/^\<varset.merge_subst_2\>/;'q;"	kind:pred	file:
varset.merge_without_names	varset.m	/^:- pred varset.merge_without_names(varset(T)::in, varset(T)::in,$/;kq|/^\<varset.merge_without_names\>/;'q;"	kind:pred
varset.name_var	varset.m	/^:- func varset.name_var(varset(T), var(T), string) = varset(T).$/;kq|/^\<varset.name_var\>/;'q;"	kind:func
varset.name_var	varset.m	/^:- pred varset.name_var(var(T)::in, string::in,$/;kq|/^\<varset.name_var\>/;'q;"	kind:pred
varset.new_maybe_named_var	varset.m	/^:- pred varset.new_maybe_named_var(maybe(string)::in, var(T)::out,$/;kq|/^\<varset.new_maybe_named_var\>/;'q;"	kind:pred
varset.new_named_var	varset.m	/^:- pred varset.new_named_var(string::in, var(T)::out,$/;kq|/^\<varset.new_named_var\>/;'q;"	kind:pred
varset.new_uniquely_named_var	varset.m	/^:- pred varset.new_uniquely_named_var(string::in, var(T)::out,$/;kq|/^\<varset.new_uniquely_named_var\>/;'q;"	kind:pred
varset.new_var	varset.m	/^:- pred varset.new_var(var(T)::out, varset(T)::in, varset(T)::out) is det.$/;kq|/^\<varset.new_var\>/;'q;"	kind:pred
varset.new_vars	varset.m	/^:- pred varset.new_vars(int::in, list(var(T))::out,$/;kq|/^\<varset.new_vars\>/;'q;"	kind:pred
varset.new_vars_2	varset.m	/^:- pred varset.new_vars_2(int::in, list(var(T))::in,$/;kq|/^\<varset.new_vars_2\>/;'q;"	kind:pred	file:
varset.num_allocated	varset.m	/^:- func varset.num_allocated(varset(T)) = int.$/;kq|/^\<varset.num_allocated\>/;'q;"	kind:func
varset.search_name	varset.m	/^:- pred varset.search_name(varset(T)::in, var(T)::in, string::out) is semidet.$/;kq|/^\<varset.search_name\>/;'q;"	kind:pred
varset.search_var	varset.m	/^:- pred varset.search_var(varset(T)::in, var(T)::in, term(T)::out) is semidet.$/;kq|/^\<varset.search_var\>/;'q;"	kind:pred
varset.select	varset.m	/^:- func varset.select(varset(T), set(var(T))) = varset(T).$/;kq|/^\<varset.select\>/;'q;"	kind:func
varset.select	varset.m	/^:- pred varset.select(set(var(T))::in, varset(T)::in, varset(T)::out) is det.$/;kq|/^\<varset.select\>/;'q;"	kind:pred
varset.set_bindings	varset.m	/^:- func varset.set_bindings(varset(T), substitution(T)) = varset(T).$/;kq|/^\<varset.set_bindings\>/;'q;"	kind:func
varset.set_bindings	varset.m	/^:- pred varset.set_bindings(varset(T)::in, substitution(T)::in,$/;kq|/^\<varset.set_bindings\>/;'q;"	kind:pred
varset.squash	varset.m	/^:- pred varset.squash(varset(T)::in, list(var(T))::in,$/;kq|/^\<varset.squash\>/;'q;"	kind:pred
varset.var_name_list	varset.m	/^:- func varset.var_name_list(varset(T)) = assoc_list(var(T), string).$/;kq|/^\<varset.var_name_list\>/;'q;"	kind:func
varset.var_name_list	varset.m	/^:- pred varset.var_name_list(varset(T)::in, assoc_list(var(T), string)::out)$/;kq|/^\<varset.var_name_list\>/;'q;"	kind:pred
varset.var_names	varset.m	/^                var_names   :: map(var(T), string),$/;kq|-;/\<varset.var_names\>/;'q;"	kind:fld	file:
varset.var_supply	varset.m	/^                var_supply  :: var_supply(T),$/;kq|-;/\<varset.var_supply\>/;'q;"	kind:fld	file:
varset.var_values	varset.m	/^                var_values  :: map(var(T), term(T))$/;kq|-;/\<varset.var_values\>/;'q;"	kind:fld	file:
varset.vars	varset.m	/^:- func varset.vars(varset(T)) = list(var(T)).$/;kq|/^\<varset.vars\>/;'q;"	kind:func
varset.vars	varset.m	/^:- pred varset.vars(varset(T)::in, list(var(T))::out) is det.$/;kq|/^\<varset.vars\>/;'q;"	kind:pred
varset.vars_2	varset.m	/^:- func varset.vars_2(var_supply(T), var_supply(T), list(var(T)))$/;kq|/^\<varset.vars_2\>/;'q;"	kind:func	file:
verify_depths	set_ctree234.m	/^:- pred verify_depths(set_ctree234(T)::in, list(int)::out) is det.$/;kq|/^\<verify_depths\>/;'q;"	kind:pred
verify_identical	array.m	/^:- pred verify_identical(array(T)::array_ui, array(T)::array_ui,$/;kq|/^\<verify_identical\>/;'q;"	kind:pred	file:
verify_sorted	array.m	/^:- pred verify_sorted(array(T)::array_ui, int::in, int::in) is det.$/;kq|/^\<verify_sorted\>/;'q;"	kind:pred	file:
version	library.m	/^:- pred library.version(string::out) is det.$/;kq|/^\<library.version\>/;'q;"	kind:pred
version_array	version_array.m	/^    --->    version_array(T).$/;kq|-;/\<version_array\>/;'q;"	kind:cons	file:
version_array	version_array.m	/^    --->    version_array.index_out_of_bounds(string).$/;kq|-;/\<version_array\>/;'q;"	kind:cons
version_array	version_array.m	/^:- func version_array(T) ^ elem(int) = T.$/;kq|/^\<version_array\>/;'q;"	kind:func
version_array	version_array.m	/^:- func version_array(list(T)) = version_array(T).$/;kq|/^\<version_array\>/;'q;"	kind:func
version_array	version_array.m	/^:- type version_array(T)$/;kq|-;/\<version_array\>/;'q;"	kind:type	file:
version_array(T	version_array.m	/^:- func (version_array(T) ^ elem(int) := T) = version_array(T).$/;kq|/^\<version_array(T\>/;'q;"	kind:func
version_array.all_false	version_array.m	/^:- pred all_false(pred(T)::in(pred(in) is semidet), version_array(T)::in)$/;kq|/^\<all_false\>/;'q;"	kind:pred
version_array.all_true	version_array.m	/^:- pred all_true(pred(T)::in(pred(in) is semidet), version_array(T)::in)$/;kq|/^\<all_true\>/;'q;"	kind:pred
version_array.copy	version_array.m	/^:- func copy(version_array(T)) = version_array(T).$/;kq|/^\<copy\>/;'q;"	kind:func
version_array.do_all_false	version_array.m	/^:- pred do_all_false(pred(T)::in(pred(in) is semidet), int::in, int::in,$/;kq|/^\<do_all_false\>/;'q;"	kind:pred	file:
version_array.do_all_true	version_array.m	/^:- pred do_all_true(pred(T)::in(pred(in) is semidet), int::in, int::in,$/;kq|/^\<do_all_true\>/;'q;"	kind:pred	file:
version_array.do_foldl2	version_array.m	/^:- pred do_foldl2(pred(T1, T2, T2, T3, T3), version_array(T1), int, int,$/;kq|/^\<do_foldl2\>/;'q;"	kind:pred	file:
version_array.do_foldl_func	version_array.m	/^:- func do_foldl_func(func(T1, T2) = T2, version_array(T1), T2, int, int) = T2.$/;kq|/^\<do_foldl_func\>/;'q;"	kind:func	file:
version_array.do_foldl_pred	version_array.m	/^:- pred do_foldl_pred(pred(T1, T2, T2), version_array(T1), int, int, T2, T2).$/;kq|/^\<do_foldl_pred\>/;'q;"	kind:pred	file:
version_array.do_foldr2	version_array.m	/^:- pred do_foldr2(pred(T1, T2, T2, T3, T3), version_array(T1), int,$/;kq|/^\<do_foldr2\>/;'q;"	kind:pred	file:
version_array.do_foldr_func	version_array.m	/^:- func do_foldr_func(func(T1, T2) = T2, version_array(T1), T2, int) = T2.$/;kq|/^\<do_foldr_func\>/;'q;"	kind:func	file:
version_array.do_foldr_pred	version_array.m	/^:- pred do_foldr_pred(pred(T1, T2, T2), version_array(T1), int, T2, T2).$/;kq|/^\<do_foldr_pred\>/;'q;"	kind:pred	file:
version_array.empty	version_array.m	/^:- func empty = version_array(T).$/;kq|/^\<empty\>/;'q;"	kind:func
version_array.eq_version_array	version_array.m	/^:- pred eq_version_array(version_array(T)::in, version_array(T)::in)$/;kq|/^\<eq_version_array\>/;'q;"	kind:pred	file:
version_array.foldl	version_array.m	/^:- func foldl(func(T1, T2) = T2, version_array(T1), T2) = T2.$/;kq|/^\<foldl\>/;'q;"	kind:func
version_array.foldl	version_array.m	/^:- pred foldl(pred(T1, T2, T2), version_array(T1), T2, T2).$/;kq|/^\<foldl\>/;'q;"	kind:pred
version_array.foldl2	version_array.m	/^:- pred foldl2(pred(T1, T2, T2, T3, T3), version_array(T1), T2, T2, T3, T3).$/;kq|/^\<foldl2\>/;'q;"	kind:pred
version_array.foldr	version_array.m	/^:- func foldr(func(T1, T2) = T2, version_array(T1), T2) = T2.$/;kq|/^\<foldr\>/;'q;"	kind:func
version_array.foldr	version_array.m	/^:- pred foldr(pred(T1, T2, T2), version_array(T1), T2, T2).$/;kq|/^\<foldr\>/;'q;"	kind:pred
version_array.foldr2	version_array.m	/^:- pred foldr2(pred(T1, T2, T2, T3, T3), version_array(T1), T2, T2, T3, T3).$/;kq|/^\<foldr2\>/;'q;"	kind:pred
version_array.from_list	version_array.m	/^:- func from_list(list(T)) = version_array(T).$/;kq|/^\<from_list\>/;'q;"	kind:func
version_array.get_if_in_range	version_array.m	/^:- pred get_if_in_range(version_array(T)::in, int::in, T::out) is semidet.$/;kq|/^\<get_if_in_range\>/;'q;"	kind:pred	file:
version_array.init	version_array.m	/^:- func init(int, T) = version_array(T).$/;kq|/^\<init\>/;'q;"	kind:func
version_array.is_empty	version_array.m	/^:- pred is_empty(version_array(T)::in) is semidet.$/;kq|/^\<is_empty\>/;'q;"	kind:pred
version_array.list	version_array.m	/^:- func list(version_array(T)) = list(T).$/;kq|/^\<list\>/;'q;"	kind:func
version_array.lookup	version_array.m	/^:- func lookup(version_array(T), int) = T.$/;kq|/^\<lookup\>/;'q;"	kind:func
version_array.max	version_array.m	/^:- func max(version_array(T)) = int.$/;kq|/^\<max\>/;'q;"	kind:func
version_array.resize	version_array.m	/^:- func resize(version_array(T), int, T) = version_array(T).$/;kq|/^\<resize\>/;'q;"	kind:func
version_array.resize	version_array.m	/^:- pred resize(int::in, T::in, version_array(T)::in, version_array(T)::out)$/;kq|/^\<resize\>/;'q;"	kind:pred
version_array.set	version_array.m	/^:- pred set(int::in, T::in, version_array(T)::in, version_array(T)::out)$/;kq|/^\<set\>/;'q;"	kind:pred
version_array.set_if_in_range	version_array.m	/^:- pred set_if_in_range(int::in, T::in,$/;kq|/^\<set_if_in_range\>/;'q;"	kind:pred	file:
version_array.size	version_array.m	/^:- func size(version_array(T)) = int.$/;kq|/^\<size\>/;'q;"	kind:func
version_array.to_list	version_array.m	/^:- func to_list(version_array(T)) = list(T).$/;kq|/^\<to_list\>/;'q;"	kind:func
version_array.unsafe_empty	version_array.m	/^:- func unsafe_empty = version_array(T).$/;kq|/^\<unsafe_empty\>/;'q;"	kind:func
version_array.unsafe_init	version_array.m	/^:- func unsafe_init(int, T) = version_array(T).$/;kq|/^\<unsafe_init\>/;'q;"	kind:func
version_array.unsafe_new	version_array.m	/^:- func unsafe_new(int, T) = version_array(T).$/;kq|/^\<unsafe_new\>/;'q;"	kind:func
version_array.unsafe_rewind	version_array.m	/^:- func unsafe_rewind(version_array(T)) = version_array(T).$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
version_array.unsafe_rewind	version_array.m	/^:- pred unsafe_rewind(version_array(T)::in, version_array(T)::out) is det.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:pred
version_array2d	version_array2d.m	/^:- func version_array2d(T) ^ elem(int, int) = T.$/;kq|/^\<version_array2d\>/;'q;"	kind:func
version_array2d	version_array2d.m	/^:- func version_array2d(list(list(T))) = version_array2d(T).$/;kq|/^\<version_array2d\>/;'q;"	kind:func
version_array2d	version_array2d.m	/^:- type version_array2d(T) ---> version_array2d(int, int, version_array(T)).$/;kq|-;/\<version_array2d\>/;'q;"	kind:cons	file:
version_array2d	version_array2d.m	/^:- type version_array2d(T) ---> version_array2d(int, int, version_array(T)).$/;kq|-;/\<version_array2d\>/;'q;"	kind:type	file:
version_array2d.bounds	version_array2d.m	/^:- pred bounds(version_array2d(T)::in, int::out, int::out) is det.$/;kq|/^\<bounds\>/;'q;"	kind:pred
version_array2d.copy	version_array2d.m	/^:- func copy(version_array2d(T)) = version_array2d(T).$/;kq|/^\<copy\>/;'q;"	kind:func
version_array2d.in_bounds	version_array2d.m	/^:- pred in_bounds(version_array2d(T)::in, int::in, int::in) is semidet.$/;kq|/^\<in_bounds\>/;'q;"	kind:pred
version_array2d.init	version_array2d.m	/^:- func init(int, int, T) = version_array2d(T).$/;kq|/^\<init\>/;'q;"	kind:func
version_array2d.lists	version_array2d.m	/^:- func lists(version_array2d(T)) = list(list(T)).$/;kq|/^\<lists\>/;'q;"	kind:func
version_array2d.lists_2	version_array2d.m	/^:- func lists_2(int, int, int, version_array(T), list(T), list(list(T))) =$/;kq|/^\<lists_2\>/;'q;"	kind:func	file:
version_array2d.resize	version_array2d.m	/^:- func resize(version_array2d(T), int, int, T) = version_array2d(T).$/;kq|/^\<resize\>/;'q;"	kind:func
version_array2d.resize_2	version_array2d.m	/^:- func resize_2(int, int, int, int, version_array2d(T), version_array2d(T)) =$/;kq|/^\<resize_2\>/;'q;"	kind:func	file:
version_array2d.set	version_array2d.m	/^:- pred set(int::in, int::in, T::in, version_array2d(T)::in,$/;kq|/^\<set\>/;'q;"	kind:pred
version_array2d.unsafe_rewind	version_array2d.m	/^:- func unsafe_rewind(version_array2d(T)) = version_array2d(T).$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
version_array_2	version_array.m	/^:- pred version_array_2(int::in, list(T)::in,$/;kq|/^\<version_array_2\>/;'q;"	kind:pred	file:
version_array_to_doc	pprint.m	/^:- func version_array_to_doc(int, version_array(T)) = doc.$/;kq|/^\<version_array_to_doc\>/;'q;"	kind:func	file:
version_array_to_doc	version_array.m	/^:- func version_array_to_doc(version_array(T)) = pretty_printer.doc.$/;kq|/^\<version_array_to_doc\>/;'q;"	kind:func
version_array_to_doc_2	version_array.m	/^:- func version_array_to_doc_2(int, version_array(T)) = doc.$/;kq|/^\<version_array_to_doc_2\>/;'q;"	kind:func	file:
version_array_to_revstrings	string.m	/^:- pred version_array_to_revstrings(noncanon_handling, ops.table, version_array(T),$/;kq|/^\<version_array_to_revstrings\>/;'q;"	kind:pred	file:
version_bitmap	version_bitmap.m	/^:- func version_bitmap ^ bit(int) = bool.$/;kq|/^\<version_bitmap\>/;'q;"	kind:func
version_bitmap	version_bitmap.m	/^:- type version_bitmap == version_array(int).$/;kq|-;/\<version_bitmap\>/;'q;"	kind:type	file:
version_bitmap ^ bit(int	version_bitmap.m	/^:- func (version_bitmap ^ bit(int) := bool) = version_bitmap.$/;kq|/^\<version_bitmap ^ bit(int\>/;'q;"	kind:func
version_bitmap.bitmask	version_bitmap.m	/^:- func bitmask(int) = int.$/;kq|/^\<bitmask\>/;'q;"	kind:func	file:
version_bitmap.bitsmask	version_bitmap.m	/^:- func bitsmask(int) = int.$/;kq|/^\<bitsmask\>/;'q;"	kind:func	file:
version_bitmap.clear	version_bitmap.m	/^:- func clear(version_bitmap, int) = version_bitmap.$/;kq|/^\<clear\>/;'q;"	kind:func
version_bitmap.clear	version_bitmap.m	/^:- pred clear(int::in, version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<clear\>/;'q;"	kind:pred
version_bitmap.complement	version_bitmap.m	/^:- func complement(version_bitmap) = version_bitmap.$/;kq|/^\<complement\>/;'q;"	kind:func
version_bitmap.complement_2	version_bitmap.m	/^:- func complement_2(int, version_bitmap) = version_bitmap.$/;kq|/^\<complement_2\>/;'q;"	kind:func	file:
version_bitmap.copy	version_bitmap.m	/^:- func copy(version_bitmap) = version_bitmap.$/;kq|/^\<copy\>/;'q;"	kind:func
version_bitmap.difference	version_bitmap.m	/^:- func difference(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<difference\>/;'q;"	kind:func
version_bitmap.flip	version_bitmap.m	/^:- func flip(version_bitmap, int) = version_bitmap.$/;kq|/^\<flip\>/;'q;"	kind:func
version_bitmap.flip	version_bitmap.m	/^:- pred flip(int::in, version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<flip\>/;'q;"	kind:pred
version_bitmap.in_range	version_bitmap.m	/^:- pred in_range(version_bitmap::in, int::in) is semidet.$/;kq|/^\<in_range\>/;'q;"	kind:pred	file:
version_bitmap.init	version_bitmap.m	/^:- func init(int, bool) = version_bitmap.$/;kq|/^\<init\>/;'q;"	kind:func
version_bitmap.initializer	version_bitmap.m	/^:- func initializer(bool) = int.$/;kq|/^\<initializer\>/;'q;"	kind:func	file:
version_bitmap.int_offset	version_bitmap.m	/^:- func int_offset(int) = int.$/;kq|/^\<int_offset\>/;'q;"	kind:func	file:
version_bitmap.intersect	version_bitmap.m	/^:- func intersect(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<intersect\>/;'q;"	kind:func
version_bitmap.is_clear	version_bitmap.m	/^:- pred is_clear(version_bitmap::in, int::in) is semidet.$/;kq|/^\<is_clear\>/;'q;"	kind:pred
version_bitmap.is_set	version_bitmap.m	/^:- pred is_set(version_bitmap::in, int::in) is semidet.$/;kq|/^\<is_set\>/;'q;"	kind:pred
version_bitmap.num_bits	version_bitmap.m	/^:- func num_bits(version_bitmap) = int.$/;kq|/^\<num_bits\>/;'q;"	kind:func
version_bitmap.resize	version_bitmap.m	/^:- func resize(version_bitmap, int, bool) = version_bitmap.$/;kq|/^\<resize\>/;'q;"	kind:func
version_bitmap.resize	version_bitmap.m	/^:- pred resize(int::in, bool::in, version_bitmap::in, version_bitmap::out)$/;kq|/^\<resize\>/;'q;"	kind:pred
version_bitmap.set	version_bitmap.m	/^:- func set(version_bitmap, int) = version_bitmap.$/;kq|/^\<set\>/;'q;"	kind:func
version_bitmap.set	version_bitmap.m	/^:- pred set(int::in, version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<set\>/;'q;"	kind:pred
version_bitmap.union	version_bitmap.m	/^:- func union(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<union\>/;'q;"	kind:func
version_bitmap.unsafe_rewind	version_bitmap.m	/^:- func unsafe_rewind(version_bitmap) = version_bitmap.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
version_bitmap.unsafe_rewind	version_bitmap.m	/^:- pred unsafe_rewind(version_bitmap::in, version_bitmap::out) is det.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:pred
version_bitmap.xor	version_bitmap.m	/^:- func xor(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<xor\>/;'q;"	kind:func
version_bitmap.zip	version_bitmap.m	/^:- func zip(int, func(int, int) = int, version_bitmap, version_bitmap) =$/;kq|/^\<zip\>/;'q;"	kind:func	file:
version_hash_table	version_hash_table.m	/^:- func version_hash_table(K, V) ^ elem(K) = V.$/;kq|/^\<version_hash_table\>/;'q;"	kind:func
version_hash_table	version_hash_table.m	/^:- type version_hash_table(K, V)$/;kq|-;/\<version_hash_table\>/;'q;"	kind:type	file:
version_hash_table.'elem	version_hash_table.m	/^:- func 'elem :='(K, version_hash_table(K, V), V) = version_hash_table(K, V).$/;kq|/^\<'elem\>/;'q;"	kind:func
version_hash_table.buckets	version_hash_table.m	/^:- type buckets(K, V) == version_array(hash_table_alist(K, V)).$/;kq|-;/\<version_hash_table.buckets\>/;'q;"	kind:type	file:
version_hash_table.char_hash	version_hash_table.m	/^:- pred char_hash(char::in, int::out) is det.$/;kq|/^\<char_hash\>/;'q;"	kind:pred
version_hash_table.copy	version_hash_table.m	/^:- func copy(version_hash_table(K, V)) = version_hash_table(K, V).$/;kq|/^\<copy\>/;'q;"	kind:func
version_hash_table.delete	version_hash_table.m	/^:- func delete(version_hash_table(K, V), K) = version_hash_table(K, V).$/;kq|/^\<delete\>/;'q;"	kind:func
version_hash_table.delete	version_hash_table.m	/^:- pred delete(K::in, version_hash_table(K, V)::in,$/;kq|/^\<delete\>/;'q;"	kind:pred
version_hash_table.det_insert	version_hash_table.m	/^:- func det_insert(version_hash_table(K, V), K, V) = version_hash_table(K, V).$/;kq|/^\<det_insert\>/;'q;"	kind:func
version_hash_table.det_insert	version_hash_table.m	/^:- pred det_insert(K::in, V::in,$/;kq|/^\<det_insert\>/;'q;"	kind:pred
version_hash_table.det_update	version_hash_table.m	/^:- func det_update(version_hash_table(K, V), K, V) = version_hash_table(K, V).$/;kq|/^\<det_update\>/;'q;"	kind:func
version_hash_table.det_update	version_hash_table.m	/^:- pred det_update(K::in, V::in,$/;kq|/^\<det_update\>/;'q;"	kind:pred
version_hash_table.equal	version_hash_table.m	/^:- pred equal(version_hash_table(K, V)::in, version_hash_table(K, V)::in)$/;kq|/^\<equal\>/;'q;"	kind:pred
version_hash_table.expand	version_hash_table.m	/^:- func expand(int, int, hash_pred(K), buckets(K, V)) =$/;kq|/^\<expand\>/;'q;"	kind:func	file:
version_hash_table.find_slot	version_hash_table.m	/^:- func find_slot(version_hash_table(K, V), K) = int.$/;kq|/^\<find_slot\>/;'q;"	kind:func	file:
version_hash_table.find_slot_2	version_hash_table.m	/^:- pred find_slot_2(hash_pred(K)::in(hash_pred), K::in, int::in, int::out)$/;kq|/^\<find_slot_2\>/;'q;"	kind:pred	file:
version_hash_table.float_hash	version_hash_table.m	/^:- pred float_hash(float::in, int::out) is det.$/;kq|/^\<float_hash\>/;'q;"	kind:pred
version_hash_table.fold	version_hash_table.m	/^:- func fold(func(K, V, T) = T, version_hash_table(K, V), T) = T.$/;kq|/^\<fold\>/;'q;"	kind:func
version_hash_table.fold	version_hash_table.m	/^:- pred fold(pred(K, V, T, T), version_hash_table(K, V), T, T).$/;kq|/^\<fold\>/;'q;"	kind:pred
version_hash_table.fold_f	version_hash_table.m	/^:- pred fold_f(func(K, V, T) = T, hash_table_alist(K, V), T, T).$/;kq|/^\<fold_f\>/;'q;"	kind:pred	file:
version_hash_table.fold_p	version_hash_table.m	/^:- pred fold_p(pred(K, V, T, T), hash_table_alist(K, V), T, T).$/;kq|/^\<fold_p\>/;'q;"	kind:pred	file:
version_hash_table.hash_pred	version_hash_table.m	/^:- inst hash_pred    == ( pred(in, out) is det ).$/;kq|-;/\<version_hash_table.hash_pred\>/;'q;"	kind:inst
version_hash_table.hash_pred	version_hash_table.m	/^:- type hash_pred(K) == ( pred(K,  int)        ).$/;kq|-;/\<version_hash_table.hash_pred\>/;'q;"	kind:type
version_hash_table.ht	version_hash_table.m	/^    --->    ht($/;kq|-;/\<version_hash_table.ht\>/;'q;"	kind:cons	file:
version_hash_table.ht_buckets	version_hash_table.m	/^                ht_buckets              :: buckets(K, V)$/;kq|-;/\<version_hash_table.ht_buckets\>/;'q;"	kind:fld	file:
version_hash_table.ht_cons	version_hash_table.m	/^    ;       ht_cons(K, V, hash_table_alist(K, V)).$/;kq|-;/\<version_hash_table.ht_cons\>/;'q;"	kind:cons	file:
version_hash_table.ht_nil	version_hash_table.m	/^    --->    ht_nil$/;kq|-;/\<version_hash_table.ht_nil\>/;'q;"	kind:cons	file:
version_hash_table.ht_single	version_hash_table.m	/^    ;       ht_single(K, V)$/;kq|-;/\<version_hash_table.ht_single\>/;'q;"	kind:cons	file:
version_hash_table.init	version_hash_table.m	/^:- func init(hash_pred(K)::in(hash_pred), int::in, float::in) =$/;kq|/^\<init\>/;'q;"	kind:func
version_hash_table.init_2	version_hash_table.m	/^:- func init_2(hash_pred(K)::in(hash_pred), int::in, float::in, bool::in) =$/;kq|/^\<init_2\>/;'q;"	kind:func	file:
version_hash_table.int_hash	version_hash_table.m	/^:- pred int_hash(int::in, int::out) is det.$/;kq|/^\<int_hash\>/;'q;"	kind:pred
version_hash_table.lookup	version_hash_table.m	/^:- func lookup(version_hash_table(K, V), K) = V.$/;kq|/^\<lookup\>/;'q;"	kind:func
version_hash_table.munge	version_hash_table.m	/^:- func munge(int, int) = int.$/;kq|/^\<munge\>/;'q;"	kind:func	file:
version_hash_table.num_buckets	version_hash_table.m	/^:- func num_buckets(version_hash_table(K, V)) = int.$/;kq|/^\<num_buckets\>/;'q;"	kind:func
version_hash_table.search	version_hash_table.m	/^:- func search(version_hash_table(K, V), K) = V is semidet.$/;kq|/^\<search\>/;'q;"	kind:func
version_hash_table.search	version_hash_table.m	/^:- pred search(version_hash_table(K, V)::in, K::in, V::out) is semidet.$/;kq|/^\<search\>/;'q;"	kind:pred
version_hash_table.set	version_hash_table.m	/^:- func set(version_hash_table(K, V), K, V) = version_hash_table(K, V).$/;kq|/^\<set\>/;'q;"	kind:func
version_hash_table.set	version_hash_table.m	/^:- pred set(K::in, V::in,$/;kq|/^\<set\>/;'q;"	kind:pred
version_hash_table.string_hash	version_hash_table.m	/^:- pred string_hash(string::in, int::out) is det.$/;kq|/^\<string_hash\>/;'q;"	kind:pred
version_hash_table.unsafe_init	version_hash_table.m	/^:- func unsafe_init(hash_pred(K)::in(hash_pred), int::in, float::in) =$/;kq|/^\<unsafe_init\>/;'q;"	kind:func
version_store	version_store.m	/^:- func version_store(S) ^ elem(mutvar(T, S)) = T.$/;kq|/^\<version_store\>/;'q;"	kind:func
version_store	version_store.m	/^:- type version_store(S)        ---> version_store(version_array(univ)).$/;kq|-;/\<version_store\>/;'q;"	kind:cons	file:
version_store	version_store.m	/^:- type version_store(S)        ---> version_store(version_array(univ)).$/;kq|-;/\<version_store\>/;'q;"	kind:type	file:
version_store. version_store(S	version_store.m	/^:- func ( version_store(S) ^ elem(mutvar(T, S)) := T ) = version_store(S).$/;kq|/^\< version_store(S\>/;'q;"	kind:func
version_store.copy_mutvar	version_store.m	/^:- pred copy_mutvar(mutvar(T, S)::in, mutvar(T, S)::out,$/;kq|/^\<copy_mutvar\>/;'q;"	kind:pred
version_store.get_mutvar	version_store.m	/^:- pred get_mutvar(mutvar(T, S)::in, T::out,$/;kq|/^\<get_mutvar\>/;'q;"	kind:pred
version_store.init	version_store.m	/^:- some [S] func init = version_store(S).$/;kq|/^\<init\>/;'q;"	kind:func
version_store.lookup	version_store.m	/^:- func lookup(version_store(S), mutvar(T, S)) = T.$/;kq|/^\<lookup\>/;'q;"	kind:func
version_store.mutvar	version_store.m	/^:- type mutvar(T, S)            ---> mutvar(int).$/;kq|-;/\<version_store.mutvar\>/;'q;"	kind:cons	file:
version_store.mutvar	version_store.m	/^:- type mutvar(T, S)            ---> mutvar(int).$/;kq|-;/\<version_store.mutvar\>/;'q;"	kind:type	file:
version_store.new_mutvar	version_store.m	/^:- pred new_mutvar(T::in, mutvar(T, S)::out,$/;kq|/^\<new_mutvar\>/;'q;"	kind:pred
version_store.resize	version_store.m	/^:- func resize(version_store(S), int) = version_store(S).$/;kq|/^\<resize\>/;'q;"	kind:func	file:
version_store.set	version_store.m	/^:- func set(version_store(S), mutvar(T, S), T) = version_store(S).$/;kq|/^\<set\>/;'q;"	kind:func
version_store.set_mutvar	version_store.m	/^:- pred set_mutvar(mutvar(T, S)::in, T::in,$/;kq|/^\<set_mutvar\>/;'q;"	kind:pred
version_store.size	version_store.m	/^:- func size(version_store(S)) = int.$/;kq|/^\<size\>/;'q;"	kind:func	file:
version_store.unsafe_rewind	version_store.m	/^:- func unsafe_rewind(version_store(T)) = version_store(T).$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:func
version_store.unsafe_rewind	version_store.m	/^:- pred unsafe_rewind(version_store(T)::in, version_store(T)::out) is det.$/;kq|/^\<unsafe_rewind\>/;'q;"	kind:pred
vertex_map	digraph.m	/^                vertex_map          :: bimap(T, digraph_key(T)),$/;kq|-;/\<vertex_map\>/;'q;"	kind:fld	file:
vertices	digraph.m	/^:- func digraph.vertices(digraph(T)) = set(T).$/;kq|/^\<digraph.vertices\>/;'q;"	kind:func
vertices	digraph.m	/^:- pred digraph.vertices(digraph(T)::in, set(T)::out) is det.$/;kq|/^\<digraph.vertices\>/;'q;"	kind:pred
very_unsafe_perform_io	exception.m	/^:- pred very_unsafe_perform_io(pred(T, io, io), T).$/;kq|/^\<very_unsafe_perform_io\>/;'q;"	kind:pred	file:
wait	thread.semaphore.m	/^:- pred semaphore.wait(semaphore::in, io::di, io::uo) is det.$/;kq|/^\<semaphore.wait\>/;'q;"	kind:pred
wait_future	par_builtin.m	/^:- impure pred wait_future(future(T)::in, T::out) is det.$/;kq|/^\<wait_future\>/;'q;"	kind:pred
wday_name	time.m	/^:- func wday_name(int) = string.$/;kq|/^\<wday_name\>/;'q;"	kind:func	file:
wday_name	time.m	/^:- pred wday_name(int::in, string::out) is semidet.$/;kq|/^\<wday_name\>/;'q;"	kind:pred	file:
wednesday	calendar.m	/^    ;       wednesday$/;kq|-;/\<wednesday\>/;'q;"	kind:cons
well_formed	tree234.m	/^:- pred well_formed(tree234(K, V)::in, maybe(int)::out) is det.$/;kq|/^\<well_formed\>/;'q;"	kind:pred
whence	io.m	/^:- type io.whence$/;kq|-;/\<whence\>/;'q;"	kind:type
whence	stream.m	/^:- type stream.whence$/;kq|-;/\<whence\>/;'q;"	kind:type
whence_to_int	io.m	/^:- pred whence_to_int(io.whence::in, int::out) is det.$/;kq|/^\<whence_to_int\>/;'q;"	kind:pred	file:
whitespace	parsing_utils.m	/^:- pred whitespace(src::in, unit::out,$/;kq|/^\<whitespace\>/;'q;"	kind:pred
whitespace_after_dot	lexer.m	/^:- pred whitespace_after_dot(char::in) is semidet.$/;kq|/^\<whitespace_after_dot\>/;'q;"	kind:pred	file:
width	string.m	/^                width       :: maybe(list(char)),$/;kq|-;/\<width\>/;'q;"	kind:fld	file:
width	string.m	/^:- pred width(list(char)::out,$/;kq|/^\<width\>/;'q;"	kind:pred	file:
with_stylesheet	term_to_xml.m	/^    --->    with_stylesheet($/;kq|-;/\<with_stylesheet\>/;'q;"	kind:cons
word	bitmap.m	/^:- type word == int.$/;kq|-;/\<word\>/;'q;"	kind:type
word_wrap	string.m	/^:- func string.word_wrap(string, int) = string.$/;kq|/^\<string.word_wrap\>/;'q;"	kind:func
word_wrap_2	string.m	/^:- pred word_wrap_2(list(string)::in, string::in, int::in, int::in, int::in,$/;kq|/^\<word_wrap_2\>/;'q;"	kind:pred	file:
word_wrap_separator	string.m	/^:- func string.word_wrap_separator(string, int, string) = string.$/;kq|/^\<string.word_wrap_separator\>/;'q;"	kind:func
word_wrapped	pprint.m	/^:- func word_wrapped(string) = doc.$/;kq|/^\<word_wrapped\>/;'q;"	kind:func
words	string.m	/^:- func string.words(string) = list(string).$/;kq|/^\<string.words\>/;'q;"	kind:func
words_2	string.m	/^:- pred words_2(pred(char)::in(pred(in) is semidet), string::in, int::in,$/;kq|/^\<words_2\>/;'q;"	kind:pred	file:
words_separator	string.m	/^:- func string.words_separator(pred(char), string) = list(string).$/;kq|/^\<string.words_separator\>/;'q;"	kind:func
wrap_exception	exception.m	/^:- pred wrap_exception(univ::in, exception_result(T)::out) is det.$/;kq|/^\<wrap_exception\>/;'q;"	kind:pred	file:
wrap_success	exception.m	/^:- pred wrap_success(pred(T), exception_result(T)) is det.$/;kq|/^\<wrap_success\>/;'q;"	kind:pred	file:
wrap_success_or_failure	exception.m	/^:- pred wrap_success_or_failure(pred(T), exception_result(T)) is det.$/;kq|/^\<wrap_success_or_failure\>/;'q;"	kind:pred	file:
wrap_tree_bitset	tree_bitset.m	/^:- func wrap_tree_bitset(node_list) = tree_bitset(T).$/;kq|/^\<wrap_tree_bitset\>/;'q;"	kind:func	file:
write	io.m	/^    ;       write$/;kq|-;/\<write\>/;'q;"	kind:cons
write	io.m	/^:- pred io.write(T::in, io::di, io::uo) is det.$/;kq|/^\<io.write\>/;'q;"	kind:pred
write	io.m	/^:- pred io.write(io.output_stream, deconstruct.noncanon_handling, T, io, io).$/;kq|/^\<io.write\>/;'q;"	kind:pred
write	io.m	/^:- pred io.write(io.output_stream::in, T::in, io::di, io::uo) is det.$/;kq|/^\<io.write\>/;'q;"	kind:pred
write	pprint.m	/^:- pred write(Stream::in, int::in, T::in, State::di, State::uo) is det$/;kq|/^\<write\>/;'q;"	kind:pred
write	pprint.m	/^:- pred write(int::in, T::in, io::di, io::uo) is det <= doc(T).$/;kq|/^\<write\>/;'q;"	kind:pred
write	stream.string_writer.m	/^:- pred write(Stream, deconstruct.noncanon_handling, T, State, State) is det$/;kq|/^\<write\>/;'q;"	kind:pred
write	stream.string_writer.m	/^:- pred write(Stream::in, T::in, State::di, State::uo) is det$/;kq|/^\<write\>/;'q;"	kind:pred
write.copy_out_bitmap	bit_buffer.write.m	/^:- pred copy_out_bitmap(bitmap::in, bit_index::in,$/;kq|/^\<copy_out_bitmap\>/;'q;"	kind:pred
write.finalize	bit_buffer.write.m	/^:- pred finalize(write_buffer(Stream, State), Stream, State)$/;kq|/^\<finalize\>/;'q;"	kind:pred
write.finalize_to_bitmap	bit_buffer.write.m	/^:- func finalize_to_bitmap(write_buffer) = bitmap.$/;kq|/^\<finalize_to_bitmap\>/;'q;"	kind:func
write.flush	bit_buffer.write.m	/^:- pred flush(write_buffer(Stream, State), write_buffer(Stream, State))$/;kq|/^\<flush\>/;'q;"	kind:pred
write.flush_all_to_stream	bit_buffer.write.m	/^:- pred flush_all_to_stream(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<flush_all_to_stream\>/;'q;"	kind:pred
write.flush_chunk_to_stream	bit_buffer.write.m	/^:- pred flush_chunk_to_stream(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<flush_chunk_to_stream\>/;'q;"	kind:pred
write.io_write_buffer	bit_buffer.write.m	/^:- type io_write_buffer == write_buffer(io.binary_output_stream, io.state).$/;kq|-;/\<write.io_write_buffer\>/;'q;"	kind:type
write.make_room	bit_buffer.write.m	/^:- pred make_room(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<make_room\>/;'q;"	kind:pred
write.maybe_make_room	bit_buffer.write.m	/^:- pred maybe_make_room(bit_buffer(Stream, State)::bit_buffer_di,$/;kq|/^\<maybe_make_room\>/;'q;"	kind:pred
write.new	bit_buffer.write.m	/^:- func new(num_bytes, Stream, State) = write_buffer(Stream, State)$/;kq|/^\<new\>/;'q;"	kind:func
write.new_bitmap_builder	bit_buffer.write.m	/^:- func new_bitmap_builder(num_bytes) = write_buffer.$/;kq|/^\<new_bitmap_builder\>/;'q;"	kind:func
write.num_buffered_bits	bit_buffer.write.m	/^:- func num_buffered_bits(write_buffer(_, _)) = num_bits.$/;kq|/^\<num_buffered_bits\>/;'q;"	kind:func
write.put_bit	bit_buffer.write.m	/^:- pred put_bit(bool, write_buffer(Stream, State), write_buffer(Stream, State))$/;kq|/^\<put_bit\>/;'q;"	kind:pred
write.put_bitmap	bit_buffer.write.m	/^:- pred put_bitmap(bitmap, bit_index, num_bits,$/;kq|/^\<put_bitmap\>/;'q;"	kind:pred
write.put_bitmap	bit_buffer.write.m	/^:- pred put_bitmap(bitmap, write_buffer(Stream, State),$/;kq|/^\<put_bitmap\>/;'q;"	kind:pred
write.put_bitmap_2	bit_buffer.write.m	/^:- pred put_bitmap_2(bitmap, bit_index, num_bits,$/;kq|/^\<put_bitmap_2\>/;'q;"	kind:pred
write.put_bits	bit_buffer.write.m	/^:- pred put_bits(word, num_bits, write_buffer(Stream, State),$/;kq|/^\<put_bits\>/;'q;"	kind:pred
write.put_byte	bit_buffer.write.m	/^:- pred put_byte(word, write_buffer(Stream, State),$/;kq|/^\<put_byte\>/;'q;"	kind:pred
write.r	bit_buffer.write.m	/^        ---> write_buffer(bit_buffer :: bit_buffer(Stream, State)).$/;kq|-;/\<write.r\>/;'q;"	kind:fld
write.store_full_buffer	bit_buffer.write.m	/^:- pred store_full_buffer(bit_buffer(Stream, State)::in,$/;kq|/^\<store_full_buffer\>/;'q;"	kind:pred
write.stream.output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<write.stream.output\>/;'q;"	kind:tci
write.stream.output	bit_buffer.write.m	/^:- instance stream.output(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<write.stream.output\>/;'q;"	kind:tci
write.stream.stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<write.stream.stream\>/;'q;"	kind:tci
write.stream.stream	bit_buffer.write.m	/^:- instance stream.stream(write_stream(Stream), write_buffer(Stream, State))$/;kq|-;/\<write.stream.stream\>/;'q;"	kind:tci
write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<write.stream.writer\>/;'q;"	kind:tci
write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<write.stream.writer\>/;'q;"	kind:tci
write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<write.stream.writer\>/;'q;"	kind:tci
write.stream.writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<write.stream.writer\>/;'q;"	kind:tci
write.uniq_write_buffer	bit_buffer.write.m	/^:- inst uniq_write_buffer == ground.   % XXX Should be unique.$/;kq|-;/\<write.uniq_write_buffer\>/;'q;"	kind:inst
write.write_buffer	bit_buffer.write.m	/^        ---> write_buffer(bit_buffer :: bit_buffer(Stream, State)).$/;kq|-;/\<write.write_buffer\>/;'q;"	kind:cons
write.write_buffer	bit_buffer.write.m	/^:- type write_buffer == write_buffer(error_stream, error_state).$/;kq|-;/\<write.write_buffer\>/;'q;"	kind:type
write.write_buffer	bit_buffer.write.m	/^:- type write_buffer(Stream, State)$/;kq|-;/\<write.write_buffer\>/;'q;"	kind:type
write.write_buffer_di	bit_buffer.write.m	/^:- mode write_buffer_di == in(uniq_write_buffer).$/;kq|-;/\<write.write_buffer_di\>/;'q;"	kind:mode
write.write_buffer_ui	bit_buffer.write.m	/^:- mode write_buffer_ui == in(uniq_write_buffer).$/;kq|-;/\<write.write_buffer_ui\>/;'q;"	kind:mode
write.write_buffer_uo	bit_buffer.write.m	/^:- mode write_buffer_uo == out(uniq_write_buffer).$/;kq|-;/\<write.write_buffer_uo\>/;'q;"	kind:mode
write.write_stream	bit_buffer.write.m	/^:- type write_stream(Stream) ---> write_stream.$/;kq|-;/\<write.write_stream\>/;'q;"	kind:cons
write.write_stream	bit_buffer.write.m	/^:- type write_stream(Stream) ---> write_stream.$/;kq|-;/\<write.write_stream\>/;'q;"	kind:type
write_arg	stream.string_writer.m	/^:- pred write_arg(Stream, deconstruct.noncanon_handling, univ, State, State)$/;kq|/^\<write_arg\>/;'q;"	kind:pred	file:
write_arg_term	term_io.m	/^:- pred term_io.write_arg_term(Ops::in, term(T)::in,$/;kq|/^\<term_io.write_arg_term\>/;'q;"	kind:pred	file:
write_array	stream.string_writer.m	/^:- pred write_array(Stream::in, array(T)::in, State::di, State::uo) is det$/;kq|/^\<write_array\>/;'q;"	kind:pred	file:
write_attribute	term_to_xml.m	/^:- pred write_attribute(Stream::in, attr::in, State::di, State::uo) is det$/;kq|/^\<write_attribute\>/;'q;"	kind:pred	file:
write_attribute_source_kind	term_to_xml.m	/^:- pred write_attribute_source_kind(Stream::in, attr_source::in,$/;kq|/^\<write_attribute_source_kind\>/;'q;"	kind:pred	file:
write_binary	io.m	/^:- pred io.write_binary(T::in, io::di, io::uo) is det.$/;kq|/^\<io.write_binary\>/;'q;"	kind:pred
write_binary	io.m	/^:- pred io.write_binary(io.binary_output_stream::in, T::in, io::di, io::uo)$/;kq|/^\<io.write_binary\>/;'q;"	kind:pred
write_bitmap	io.m	/^:- pred io.write_bitmap(bitmap, int, int, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
write_bitmap	io.m	/^:- pred io.write_bitmap(bitmap, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
write_bitmap	io.m	/^:- pred io.write_bitmap(io.binary_output_stream, bitmap, int, int, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
write_bitmap	io.m	/^:- pred io.write_bitmap(io.binary_output_stream, bitmap, io, io).$/;kq|/^\<io.write_bitmap\>/;'q;"	kind:pred
write_buffer	bit_buffer.write.m	/^        ---> write_buffer(bit_buffer :: bit_buffer(Stream, State)).$/;kq|-;/\<write_buffer\>/;'q;"	kind:cons
write_buffer	bit_buffer.write.m	/^:- type write_buffer == write_buffer(error_stream, error_state).$/;kq|-;/\<write_buffer\>/;'q;"	kind:type
write_buffer	bit_buffer.write.m	/^:- type write_buffer(Stream, State)$/;kq|-;/\<write_buffer\>/;'q;"	kind:type
write_buffer_di	bit_buffer.write.m	/^:- mode write_buffer_di == in(uniq_write_buffer).$/;kq|-;/\<write_buffer_di\>/;'q;"	kind:mode
write_buffer_ui	bit_buffer.write.m	/^:- mode write_buffer_ui == in(uniq_write_buffer).$/;kq|-;/\<write_buffer_ui\>/;'q;"	kind:mode
write_buffer_uo	bit_buffer.write.m	/^:- mode write_buffer_uo == out(uniq_write_buffer).$/;kq|-;/\<write_buffer_uo\>/;'q;"	kind:mode
write_byte	io.m	/^:- pred io.write_byte(int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_byte\>/;'q;"	kind:pred
write_byte	io.m	/^:- pred io.write_byte(io.binary_output_stream::in, int::in, io::di, io::uo)$/;kq|/^\<io.write_byte\>/;'q;"	kind:pred
write_byte_2	io.m	/^:- pred io.write_byte_2(io.stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_byte_2\>/;'q;"	kind:pred	file:
write_c_pointer	stream.string_writer.m	/^:- pred write_c_pointer(Stream::in, c_pointer::in, State::di, State::uo) is det$/;kq|/^\<write_c_pointer\>/;'q;"	kind:pred	file:
write_cc	io.m	/^:- pred io.write_cc(T::in, io::di, io::uo) is cc_multi.$/;kq|/^\<io.write_cc\>/;'q;"	kind:pred
write_cc	stream.string_writer.m	/^:- pred write_cc(Stream::in, T::in, State::di, State::uo) is cc_multi$/;kq|/^\<write_cc\>/;'q;"	kind:pred
write_char	io.m	/^:- pred io.write_char(char::in, io::di, io::uo) is det.$/;kq|/^\<io.write_char\>/;'q;"	kind:pred
write_char	io.m	/^:- pred io.write_char(io.output_stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.write_char\>/;'q;"	kind:pred
write_char_2	io.m	/^:- pred io.write_char_2(io.stream::in, char::in, io::di, io::uo) is det.$/;kq|/^\<io.write_char_2\>/;'q;"	kind:pred	file:
write_child_xml_elements	term_to_xml.m	/^:- pred write_child_xml_elements(Stream, deconstruct.noncanon_handling,$/;kq|/^\<write_child_xml_elements\>/;'q;"	kind:pred	file:
write_constant	term_io.m	/^:- pred term_io.write_constant(const::in, adjacent_to_graphic_token::in,$/;kq|/^\<term_io.write_constant\>/;'q;"	kind:pred	file:
write_constant	term_io.m	/^:- pred term_io.write_constant(const::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_constant\>/;'q;"	kind:pred
write_doc	pretty_printer.m	/^:- pred write_doc(doc::in, io::di, io::uo) is det.$/;kq|/^\<write_doc\>/;'q;"	kind:pred
write_doc	pretty_printer.m	/^:- pred write_doc(io.output_stream::in, doc::in, io::di, io::uo) is det.$/;kq|/^\<write_doc\>/;'q;"	kind:pred
write_doc_to_stream	pretty_printer.m	/^:- pred write_doc_to_stream(Stream, noncanon_handling, formatter_map, int, int,$/;kq|/^\<write_doc_to_stream\>/;'q;"	kind:pred
write_doc_to_stream	pretty_printer.m	/^:- pred write_doc_to_stream(Stream, noncanon_handling, formatter_map, int,$/;kq|/^\<write_doc_to_stream\>/;'q;"	kind:pred	file:
write_doctype	term_to_xml.m	/^:- pred write_doctype(Stream, deconstruct.noncanon_handling, T,$/;kq|/^\<write_doctype\>/;'q;"	kind:pred	file:
write_dtd	term_to_xml.m	/^:- pred write_dtd(Stream::in, T::unused,$/;kq|/^\<write_dtd\>/;'q;"	kind:pred
write_dtd_attlist	term_to_xml.m	/^:- pred write_dtd_attlist(Stream::in, string::in, maybe(string)::in,$/;kq|/^\<write_dtd_attlist\>/;'q;"	kind:pred	file:
write_dtd_attlists	term_to_xml.m	/^:- pred write_dtd_attlists(Stream::in, string::in, list(attr_from_source)::in,$/;kq|/^\<write_dtd_attlists\>/;'q;"	kind:pred	file:
write_dtd_entries	term_to_xml.m	/^:- pred write_dtd_entries(Stream::in, element_pred::in(element_pred),$/;kq|/^\<write_dtd_entries\>/;'q;"	kind:pred	file:
write_dtd_from_type	term_to_xml.m	/^:- pred write_dtd_from_type(Stream::in, type_desc::in,$/;kq|/^\<write_dtd_from_type\>/;'q;"	kind:pred
write_dtd_type_elements	term_to_xml.m	/^:- pred write_dtd_type_elements(Stream::in, element_pred::in(element_pred),$/;kq|/^\<write_dtd_type_elements\>/;'q;"	kind:pred	file:
write_dtd_types	term_to_xml.m	/^:- pred write_dtd_types(Stream::in, element_pred::in(element_pred),$/;kq|/^\<write_dtd_types\>/;'q;"	kind:pred	file:
write_edge	robdd.m	/^:- pred write_edge(robdd(T)::in, robdd(T)::in, bool::in,$/;kq|/^\<write_edge\>/;'q;"	kind:pred	file:
write_element_end	term_to_xml.m	/^:- pred write_element_end(Stream::in, string::in, State::di, State::uo) is det$/;kq|/^\<write_element_end\>/;'q;"	kind:pred	file:
write_element_start	term_to_xml.m	/^:- pred write_element_start(Stream::in, string::in, list(attr)::in,$/;kq|/^\<write_element_start\>/;'q;"	kind:pred	file:
write_element_start_with_attr_from_source	term_to_xml.m	/^:- pred write_element_start_with_attr_from_source(Stream::in, string::in,$/;kq|/^\<write_element_start_with_attr_from_source\>/;'q;"	kind:pred	file:
write_empty_element	term_to_xml.m	/^:- pred write_empty_element(Stream::in, string::in, list(attr)::in,$/;kq|/^\<write_empty_element\>/;'q;"	kind:pred	file:
write_empty_element_with_attr_from_source	term_to_xml.m	/^:- pred write_empty_element_with_attr_from_source(Stream::in, string::in,$/;kq|/^\<write_empty_element_with_attr_from_source\>/;'q;"	kind:pred	file:
write_escaped_char	term_io.m	/^:- pred term_io.write_escaped_char(Stream::in, char::in,$/;kq|/^\<term_io.write_escaped_char\>/;'q;"	kind:pred
write_escaped_char	term_io.m	/^:- pred term_io.write_escaped_char(char::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_escaped_char\>/;'q;"	kind:pred
write_escaped_string	term_io.m	/^:- pred term_io.write_escaped_string(Stream::in, string::in,$/;kq|/^\<term_io.write_escaped_string\>/;'q;"	kind:pred
write_escaped_string	term_io.m	/^:- pred term_io.write_escaped_string(string::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_escaped_string\>/;'q;"	kind:pred
write_external_doctype	term_to_xml.m	/^:- pred write_external_doctype(Stream::in, string::in, doctype::in,$/;kq|/^\<write_external_doctype\>/;'q;"	kind:pred	file:
write_float	io.m	/^:- pred io.write_float(float::in, io::di, io::uo) is det.$/;kq|/^\<io.write_float\>/;'q;"	kind:pred
write_float	io.m	/^:- pred io.write_float(io.output_stream::in, float::in, io::di, io::uo)$/;kq|/^\<io.write_float\>/;'q;"	kind:pred
write_float_2	io.m	/^:- pred io.write_float_2(io.stream::in, float::in, io::di, io::uo) is det.$/;kq|/^\<io.write_float_2\>/;'q;"	kind:pred	file:
write_functor_and_args	stream.string_writer.m	/^:- pred write_functor_and_args(Stream, deconstruct.noncanon_handling, string,$/;kq|/^\<write_functor_and_args\>/;'q;"	kind:pred	file:
write_int	io.m	/^:- pred io.write_int(int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_int\>/;'q;"	kind:pred
write_int	io.m	/^:- pred io.write_int(io.output_stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_int\>/;'q;"	kind:pred
write_int_2	io.m	/^:- pred io.write_int_2(io.stream::in, int::in, io::di, io::uo) is det.$/;kq|/^\<io.write_int_2\>/;'q;"	kind:pred	file:
write_list	io.m	/^:- pred io.write_list(io.output_stream, list(T), string,$/;kq|/^\<io.write_list\>/;'q;"	kind:pred
write_list	io.m	/^:- pred io.write_list(list(T), string, pred(T, io, io), io, io).$/;kq|/^\<io.write_list\>/;'q;"	kind:pred
write_list_tail	stream.string_writer.m	/^:- pred write_list_tail(Stream, deconstruct.noncanon_handling, univ,$/;kq|/^\<write_list_tail\>/;'q;"	kind:pred	file:
write_list_tail	term_io.m	/^:- pred term_io.write_list_tail(Ops::in, term(T)::in,$/;kq|/^\<term_io.write_list_tail\>/;'q;"	kind:pred	file:
write_many	io.m	/^:- pred io.write_many(io.output_stream::in, list(io.poly_type)::in,$/;kq|/^\<io.write_many\>/;'q;"	kind:pred
write_many	io.m	/^:- pred io.write_many(list(io.poly_type)::in, io::di, io::uo) is det.$/;kq|/^\<io.write_many\>/;'q;"	kind:pred
write_node	robdd.m	/^:- pred write_node(robdd(T)::in, write_var(T)::in(write_var),$/;kq|/^\<write_node\>/;'q;"	kind:pred	file:
write_ordinary_term	stream.string_writer.m	/^:- pred write_ordinary_term(Stream, deconstruct.noncanon_handling, univ,$/;kq|/^\<write_ordinary_term\>/;'q;"	kind:pred	file:
write_out_trace_counts	benchmarking.m	/^:- pred write_out_trace_counts(string::in, maybe(string)::out,$/;kq|/^\<write_out_trace_counts\>/;'q;"	kind:pred
write_primitive_element_with_attr_from_source	term_to_xml.m	/^:- pred write_primitive_element_with_attr_from_source(Stream::in, string::in,$/;kq|/^\<write_primitive_element_with_attr_from_source\>/;'q;"	kind:pred	file:
write_private_builtin_type_info	stream.string_writer.m	/^:- pred write_private_builtin_type_info(Stream::in,$/;kq|/^\<write_private_builtin_type_info\>/;'q;"	kind:pred	file:
write_stm_var	stm_builtin.m	/^:- pred write_stm_var(stm_var(T)::in, T::in, stm::di, stm::uo) is det.$/;kq|/^\<write_stm_var\>/;'q;"	kind:pred
write_stream	bit_buffer.write.m	/^:- type write_stream(Stream) ---> write_stream.$/;kq|-;/\<write_stream\>/;'q;"	kind:cons
write_stream	bit_buffer.write.m	/^:- type write_stream(Stream) ---> write_stream.$/;kq|-;/\<write_stream\>/;'q;"	kind:type
write_string	io.m	/^:- pred io.write_string(io.output_stream::in, string::in, io::di, io::uo)$/;kq|/^\<io.write_string\>/;'q;"	kind:pred
write_string	io.m	/^:- pred io.write_string(string::in, io::di, io::uo) is det.$/;kq|/^\<io.write_string\>/;'q;"	kind:pred
write_string_2	io.m	/^:- pred io.write_string_2(io.stream::in, string::in, io::di, io::uo) is det.$/;kq|/^\<io.write_string_2\>/;'q;"	kind:pred	file:
write_strings	io.m	/^:- pred io.write_strings(io.output_stream::in, list(string)::in,$/;kq|/^\<io.write_strings\>/;'q;"	kind:pred
write_strings	io.m	/^:- pred io.write_strings(list(string)::in, io::di, io::uo) is det.$/;kq|/^\<io.write_strings\>/;'q;"	kind:pred
write_stylesheet_ref	term_to_xml.m	/^:- pred write_stylesheet_ref(Stream::in, maybe_stylesheet::in,$/;kq|/^\<write_stylesheet_ref\>/;'q;"	kind:pred	file:
write_table_stats	table_statistics.m	/^:- pred write_table_stats(table_stats::in, io::di, io::uo) is det.$/;kq|/^\<write_table_stats\>/;'q;"	kind:pred
write_table_step_stats	table_statistics.m	/^:- pred write_table_step_stats(table_step_stats::in, int::in,$/;kq|/^\<write_table_step_stats\>/;'q;"	kind:pred	file:
write_table_step_stats_du	table_statistics.m	/^:- pred write_table_step_stats_du(int::in, int::in, int::in, int::in,$/;kq|/^\<write_table_step_stats_du\>/;'q;"	kind:pred	file:
write_table_step_stats_enum	table_statistics.m	/^:- pred write_table_step_stats_enum(int::in, int::in, io::di, io::uo) is det.$/;kq|/^\<write_table_step_stats_enum\>/;'q;"	kind:pred	file:
write_table_step_stats_hash	table_statistics.m	/^:- pred write_table_step_stats_hash(int::in, int::in, int::in, int::in,$/;kq|/^\<write_table_step_stats_hash\>/;'q;"	kind:pred	file:
write_table_step_stats_header	table_statistics.m	/^:- pred write_table_step_stats_header(string::in, int::in, string::in,$/;kq|/^\<write_table_step_stats_header\>/;'q;"	kind:pred	file:
write_table_step_stats_loop	table_statistics.m	/^:- pred write_table_step_stats_loop(table_step_stats::in, int::in, int::out,$/;kq|/^\<write_table_step_stats_loop\>/;'q;"	kind:pred	file:
write_table_step_stats_start	table_statistics.m	/^:- pred write_table_step_stats_start(int::in, int::in, io::di, io::uo) is det.$/;kq|/^\<write_table_step_stats_start\>/;'q;"	kind:pred	file:
write_term	term_io.m	/^:- pred term_io.write_term(varset(T)::in, term(T)::in, io::di, io::uo) is det.$/;kq|/^\<term_io.write_term\>/;'q;"	kind:pred
write_term_2	term_io.m	/^:- pred term_io.write_term_2(Ops::in, term(T)::in,$/;kq|/^\<term_io.write_term_2\>/;'q;"	kind:pred	file:
write_term_3	term_io.m	/^:- pred term_io.write_term_3(Ops::in, term(T)::in, ops.priority::in,$/;kq|/^\<term_io.write_term_3\>/;'q;"	kind:pred	file:
write_term_args	stream.string_writer.m	/^:- pred write_term_args(Stream, deconstruct.noncanon_handling, list(univ),$/;kq|/^\<write_term_args\>/;'q;"	kind:pred	file:
write_term_args	term_io.m	/^:- pred term_io.write_term_args(Ops::in, list(term(T))::in,$/;kq|/^\<term_io.write_term_args\>/;'q;"	kind:pred	file:
write_term_nl	term_io.m	/^:- pred term_io.write_term_nl(varset(T)::in, term(T)::in, io::di, io::uo)$/;kq|/^\<term_io.write_term_nl\>/;'q;"	kind:pred
write_term_nl_with_op_table	term_io.m	/^:- pred term_io.write_term_nl_with_op_table(Ops::in, varset(T)::in,$/;kq|/^\<term_io.write_term_nl_with_op_table\>/;'q;"	kind:pred
write_term_with_op_table	term_io.m	/^:- pred term_io.write_term_with_op_table(Ops::in, varset(T)::in, term(T)::in,$/;kq|/^\<term_io.write_term_with_op_table\>/;'q;"	kind:pred
write_type_ctor_desc	stream.string_writer.m	/^:- pred write_type_ctor_desc(Stream::in, type_ctor_desc::in,$/;kq|/^\<write_type_ctor_desc\>/;'q;"	kind:pred	file:
write_type_desc	stream.string_writer.m	/^:- pred write_type_desc(Stream::in, type_desc::in, State::di, State::uo) is det$/;kq|/^\<write_type_desc\>/;'q;"	kind:pred	file:
write_univ	stream.string_writer.m	/^:- pred write_univ(Stream, deconstruct.noncanon_handling,$/;kq|/^\<write_univ\>/;'q;"	kind:pred
write_univ	stream.string_writer.m	/^:- pred write_univ(Stream::in, univ::in, State::di, State::uo) is det$/;kq|/^\<write_univ\>/;'q;"	kind:pred
write_var	robdd.m	/^:- inst write_var == (pred(in, di, uo) is det).$/;kq|-;/\<write_var\>/;'q;"	kind:inst
write_var	robdd.m	/^:- type write_var(T) == pred(var(T), io, io).$/;kq|-;/\<write_var\>/;'q;"	kind:type
write_variable	term_io.m	/^:- pred term_io.write_variable(var(T)::in, varset(T)::in, io::di, io::uo)$/;kq|/^\<term_io.write_variable\>/;'q;"	kind:pred
write_variable_2	term_io.m	/^:- pred term_io.write_variable_2(Ops::in, var(T)::in,$/;kq|/^\<term_io.write_variable_2\>/;'q;"	kind:pred	file:
write_variable_with_op_table	term_io.m	/^:- pred term_io.write_variable_with_op_table(Ops::in, var(T)::in,$/;kq|/^\<term_io.write_variable_with_op_table\>/;'q;"	kind:pred
write_version_array	stream.string_writer.m	/^:- pred write_version_array(Stream::in, version_array(T)::in,$/;kq|/^\<write_version_array\>/;'q;"	kind:pred	file:
write_xml_doc	term_to_xml.m	/^:- pred write_xml_doc(Stream::in, T::in, State::di, State::uo)$/;kq|/^\<write_xml_doc\>/;'q;"	kind:pred
write_xml_doc_general	term_to_xml.m	/^:- pred write_xml_doc_general(Stream::in, T::in,$/;kq|/^\<write_xml_doc_general\>/;'q;"	kind:pred
write_xml_doc_general_cc	term_to_xml.m	/^:- pred write_xml_doc_general_cc(Stream::in, T::in,$/;kq|/^\<write_xml_doc_general_cc\>/;'q;"	kind:pred
write_xml_doc_style_dtd	term_to_xml.m	/^:- pred write_xml_doc_style_dtd(Stream::in, T::in,$/;kq|/^\<write_xml_doc_style_dtd\>/;'q;"	kind:pred
write_xml_element	term_to_xml.m	/^:- pred write_xml_element(Stream::in, int::in, T::in,$/;kq|/^\<write_xml_element\>/;'q;"	kind:pred
write_xml_element_format	term_to_xml.m	/^:- pred write_xml_element_format(Stream::in, maybe_format::in, int::in, xml::in,$/;kq|/^\<write_xml_element_format\>/;'q;"	kind:pred	file:
write_xml_element_general	term_to_xml.m	/^:- pred write_xml_element_general(Stream, deconstruct.noncanon_handling,$/;kq|/^\<write_xml_element_general\>/;'q;"	kind:pred
write_xml_element_univ	term_to_xml.m	/^:- pred write_xml_element_univ(Stream, deconstruct.noncanon_handling,$/;kq|/^\<write_xml_element_univ\>/;'q;"	kind:pred	file:
write_xml_element_univ_canonicalize	term_to_xml.m	/^:- pred write_xml_element_univ_canonicalize(Stream::in,$/;kq|/^\<write_xml_element_univ_canonicalize\>/;'q;"	kind:pred	file:
write_xml_element_univ_do_not_allow	term_to_xml.m	/^:- pred write_xml_element_univ_do_not_allow(Stream::in,$/;kq|/^\<write_xml_element_univ_do_not_allow\>/;'q;"	kind:pred	file:
write_xml_element_univ_include_details_cc	term_to_xml.m	/^:- pred write_xml_element_univ_include_details_cc(Stream::in,$/;kq|/^\<write_xml_element_univ_include_details_cc\>/;'q;"	kind:pred	file:
write_xml_escaped_char	term_to_xml.m	/^:- pred write_xml_escaped_char(Stream::in, char::in, State::di, State::uo)$/;kq|/^\<write_xml_escaped_char\>/;'q;"	kind:pred	file:
write_xml_escaped_string	term_to_xml.m	/^:- pred write_xml_escaped_string(Stream::in, string::in,$/;kq|/^\<write_xml_escaped_string\>/;'q;"	kind:pred	file:
write_xml_header	term_to_xml.m	/^:- pred write_xml_header(Stream::in, maybe(string)::in,$/;kq|/^\<write_xml_header\>/;'q;"	kind:pred
writer	bit_buffer.m	/^:- instance stream.writer(error_stream, bitmap.slice, error_state)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<writer\>/;'q;"	kind:tci
writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bitmap.slice,$/;kq|-;/\<writer\>/;'q;"	kind:tci
writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<writer\>/;'q;"	kind:tci
writer	bit_buffer.write.m	/^:- instance stream.writer(write_stream(Stream), bool,$/;kq|-;/\<writer\>/;'q;"	kind:tci
writer	io.m	/^:- instance stream.writer(io.binary_output_stream, bitmap, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.binary_output_stream, bitmap.slice, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.binary_output_stream, byte, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.output_stream, char, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.output_stream, float, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.output_stream, int, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.output_stream, string, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	io.m	/^:- instance stream.writer(io.output_stream, univ, io)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	stream.m	/^:- typeclass stream.writer(Stream, Unit, State)$/;kq|-;/\<writer\>/;'q;"	kind:tc
writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, char, string.builder.state)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
writer	string.builder.m	/^:- instance stream.writer(string.builder.handle, string, string.builder.state)$/;kq|-;/\<writer\>/;'q;"	kind:tci	file:
x	ops.m	/^    --->    x$/;kq|-;/\<x\>/;'q;"	kind:cons
x	string.m	/^    ;       x(int)$/;kq|-;/\<x\>/;'q;"	kind:cons	file:
xml	term_to_xml.m	/^:- type xml$/;kq|-;/\<xml\>/;'q;"	kind:type
xml_doc	term_to_xml.m	/^:- inst xml_doc$/;kq|-;/\<xml_doc\>/;'q;"	kind:inst
xml_predefined_entity	term_to_xml.m	/^:- pred xml_predefined_entity(char::in, string::out) is semidet.$/;kq|/^\<xml_predefined_entity\>/;'q;"	kind:pred	file:
xmlable	term_to_xml.m	/^:- typeclass xmlable(T) where [$/;kq|-;/\<xmlable\>/;'q;"	kind:tc
xor	bitmap.m	/^:- func xor(bitmap, bitmap) = bitmap.$/;kq|/^\<xor\>/;'q;"	kind:func
xor	bool.m	/^:- func bool.xor(bool, bool) = bool.$/;kq|/^\<bool.xor\>/;'q;"	kind:func
xor	int.m	/^:- func int.xor(int, int) = int.$/;kq|/^\<int.xor\>/;'q;"	kind:func
xor	version_bitmap.m	/^:- func xor(version_bitmap, version_bitmap) = version_bitmap.$/;kq|/^\<xor\>/;'q;"	kind:func
xor_pairs	integer.m	/^:- func xor_pairs(integer, integer) = integer.$/;kq|/^\<xor_pairs\>/;'q;"	kind:func	file:
xor_pairs_equal	integer.m	/^:- func xor_pairs_equal(list(digit), list(digit)) = list(digit).$/;kq|/^\<xor_pairs_equal\>/;'q;"	kind:func	file:
y	ops.m	/^    ;       y.$/;kq|-;/\<y\>/;'q;"	kind:cons
year	calendar.m	/^:- func year(date) = year.$/;kq|/^\<year\>/;'q;"	kind:func
year	calendar.m	/^:- type year == int.         % Year 0 is 1 BC, -1 is 2 BC, etc.$/;kq|-;/\<year\>/;'q;"	kind:type
years	calendar.m	/^:- func years(duration) = years.$/;kq|/^\<years\>/;'q;"	kind:func
years	calendar.m	/^:- type years == int.$/;kq|-;/\<years\>/;'q;"	kind:type
yes	bool.m	/^    ;       yes.$/;kq|-;/\<yes\>/;'q;"	kind:cons
yes	maybe.m	/^    ;       yes(T).$/;kq|-;/\<yes\>/;'q;"	kind:cons
yield	thread.m	/^:- pred yield(io::di, io::uo) is det.$/;kq|/^\<yield\>/;'q;"	kind:pred
zero	integer.m	/^:- func integer.zero = integer.$/;kq|/^\<integer.zero\>/;'q;"	kind:func
zero	rational.m	/^:- func rational.zero = rational.$/;kq|/^\<rational.zero\>/;'q;"	kind:func
zero	robdd.m	/^:- func zero = robdd(T).$/;kq|/^\<zero\>/;'q;"	kind:func
zero_argument	test_bitset.m	/^    --->    zero_argument(string,$/;kq|-;/\<zero_argument\>/;'q;"	kind:cons
zero_duration	calendar.m	/^:- func zero_duration = duration.$/;kq|/^\<zero_duration\>/;'q;"	kind:func
zero_or_more	parsing_utils.m	/^:- pred zero_or_more(parser(T)::in(parser), src::in, list(T)::out,$/;kq|/^\<zero_or_more\>/;'q;"	kind:pred
zero_or_more	parsing_utils.m	/^:- pred zero_or_more(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<zero_or_more\>/;'q;"	kind:pred
zero_or_more_2	parsing_utils.m	/^:- pred zero_or_more_2(parser(T)::in(parser), src::in,$/;kq|/^\<zero_or_more_2\>/;'q;"	kind:pred	file:
zero_or_more_2	parsing_utils.m	/^:- pred zero_or_more_2(parser_with_state(T, S)::in(parser_with_state), src::in,$/;kq|/^\<zero_or_more_2\>/;'q;"	kind:pred	file:
zero_or_more_occurences	string.m	/^:- pred zero_or_more_occurences($/;kq|/^\<zero_or_more_occurences\>/;'q;"	kind:pred	file:
zeros	integer.m	/^:- pred zeros(int::in, list(digit)::out, list(digit)::in) is det.$/;kq|/^\<zeros\>/;'q;"	kind:pred	file:
zip	bitmap.m	/^:- func zip(func(byte, byte) = byte,$/;kq|/^\<zip\>/;'q;"	kind:func	file:
zip	list.m	/^:- func list.zip(list(T), list(T)) = list(T).$/;kq|/^\<list.zip\>/;'q;"	kind:func
zip	list.m	/^:- pred list.zip(list(T)::in, list(T)::in, list(T)::out) is det.$/;kq|/^\<list.zip\>/;'q;"	kind:pred
zip	version_bitmap.m	/^:- func zip(int, func(int, int) = int, version_bitmap, version_bitmap) =$/;kq|/^\<zip\>/;'q;"	kind:func	file:
zip2	bitmap.m	/^:- func zip2(byte_index, func(byte, byte) = byte,$/;kq|/^\<zip2\>/;'q;"	kind:func	file:
zip2	list.m	/^:- pred list.zip2(list(T), list(T), list(T)).$/;kq|/^\<list.zip2\>/;'q;"	kind:pred	file:
~ robdd(T	robdd.m	/^:- func (~ robdd(T)) = robdd(T).$/;kq|/^\<~ robdd(T\>/;'q;"	kind:func
