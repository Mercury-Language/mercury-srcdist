:- module list.
:- use_module builtin.
:- use_module int.
:- use_module pretty_printer.
:- use_module private_builtin.
:- use_module require.
:- use_module set_tree234.
:- use_module stream.
:- use_module string.
:- use_module term.
:- use_module (string.format).
:- use_module (string.parse_util).

:- pred list.accumulate_n_copies(int, T, list.list(T), list.list(T)).
:- mode accumulate_n_copies((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.all_same_as(T, list.list(T)).
:- mode all_same_as((builtin.in), (builtin.in)) is semidet.
:- pred list.chunk_loop(list.list(T), int, list.list(T), int, list.list(list.list(T))).
:- mode chunk_loop((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.condense_acc(list.list(list.list(T)), list.list(T), list.list(T)).
:- mode condense_acc((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.hosort(pred(X, X, builtin.comparison_result), int, list.list(X), list.list(X), list.list(X)).
:- mode hosort(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.in), (builtin.out), (builtin.out)) is semidet.
:- pred list.index0_of_first_occurrence_2(list.list(T), T, int, int).
:- mode index0_of_first_occurrence_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred list.inst_preserving_reverse_prepend(list.list(T), list.list(T), list.list(T)).
:- mode inst_preserving_reverse_prepend(builtin.in(list.list_skel((V_2 =< ground))), builtin.in(list.list_skel((V_2 =< ground))), builtin.out(list.list_skel((V_2 =< ground)))) is det.
:- pred list.length_acc(list.list(T), int, int).
:- mode length_acc((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.member_indexes0_loop(T, int, list.list(T), list.list(int)).
:- mode member_indexes0_loop((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.merge_sort(int, list.list(T), list.list(T)).
:- mode merge_sort((builtin.in), (builtin.in), (builtin.out)) is det.
:- pragma type_spec(list.merge_sort((builtin.in), (builtin.in), (builtin.out)), (T = term.var(V_2)), (list.'TypeSpecOf__pred__merge_sort__[T = var(V_2)]')).
:- pred list.merge_sort_and_remove_dups(int, list.list(T), list.list(T)).
:- mode merge_sort_and_remove_dups((builtin.in), (builtin.in), (builtin.out)) is det.
:- pragma type_spec(list.merge_sort_and_remove_dups((builtin.in), (builtin.in), (builtin.out)), (T = term.var(V_2)), (list.'TypeSpecOf__pred__merge_sort_and_remove_dups__[T = var(V_2)]')).
:- pred list.remove_adjacent_dups_loop(T, list.list(T), list.list(T)).
:- mode remove_adjacent_dups_loop((builtin.in), (builtin.in), (builtin.out)) is det.
:- pragma type_spec(pred((list.remove_adjacent_dups_loop)/3), (T = term.var(V_2)), (list.'TypeSpecOf__pred__remove_adjacent_dups_loop__[T = var(V_2)]')).
:- pred list.remove_adjacent_dups_loop(pred(T, T, builtin.comparison_result), T, list.list(T), list.list(T)).
:- mode remove_adjacent_dups_loop(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.remove_dups_loop(list.list(T), set_tree234.set_tree234(T), list.list(T)).
:- mode remove_dups_loop((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred list.replace_nth_loop(list.list(T), int, T, list.list(T)).
:- mode replace_nth_loop((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred list.series_acc(T, (pred T), ((func T) = T), list.list(T), list.list(T)).
:- mode series_acc((builtin.in), ((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), ((func((builtin.in)) = (builtin.out) is det) >> (func((builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.out)) is det.
:- pred list.successive_integers(int, int, list.list(int), list.list(int)).
:- mode successive_integers((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.

list.(V_4 ++ V_5) = V_3 :-
    V_3 = list.append(V_4, V_5).

list.(V_4 .. V_5) = V_6 :-
    V_7 = list.[] : list.list(int),
    list.successive_integers(V_4, V_5, V_7, V_6).

list.all_false(V_3, list.[]).
list.all_false(V_4, list.[V_5 | V_6]) :-
    not (
      call(V_4, V_5)
    ),
    list.all_false(V_4, V_6).

list.all_false_corresponding(V_4, list.[], list.[]).
list.all_false_corresponding(V_5, list.[], list.[V_6 | V_7]) :-
    V_8 = "predicate `list.all_false_corresponding\'/3" : string,
    V_9 = "mismatched list lengths" : string,
    require.unexpected(V_8, V_9).
list.all_false_corresponding(V_10, list.[V_11 | V_12], list.[]) :-
    V_13 = "predicate `list.all_false_corresponding\'/3" : string,
    V_14 = "mismatched list lengths" : string,
    require.unexpected(V_13, V_14).
list.all_false_corresponding(V_15, list.[V_16 | V_17], list.[V_18 | V_19]) :-
    not (
      call(V_15, V_16, V_18)
    ),
    list.all_false_corresponding(V_15, V_17, V_19).

list.all_same(list.[]).
list.all_same(list.[V_2 | V_3]) :-
    list.all_same_as(V_2, V_3).

list.all_true(V_3, list.[]).
list.all_true(V_4, list.[V_5 | V_6]) :-
    call(V_4, V_5),
    list.all_true(V_4, V_6).

list.all_true_corresponding(V_4, list.[], list.[]).
list.all_true_corresponding(V_5, list.[], list.[V_6 | V_7]) :-
    V_8 = "predicate `list.all_true_corresponding\'/3" : string,
    V_9 = "mismatched list lengths" : string,
    require.unexpected(V_8, V_9).
list.all_true_corresponding(V_10, list.[V_11 | V_12], list.[]) :-
    V_13 = "predicate `list.all_true_corresponding\'/3" : string,
    V_14 = "mismatched list lengths" : string,
    require.unexpected(V_13, V_14).
list.all_true_corresponding(V_15, list.[V_16 | V_17], list.[V_18 | V_19]) :-
    call(V_15, V_16, V_18),
    list.all_true_corresponding(V_15, V_17, V_19).

list.any_false(V_3, V_4) :-
    not (
      list.all_true(V_3, V_4)
    ).

list.any_true(V_3, V_4) :-
    not (
      list.all_false(V_3, V_4)
    ).

list.append(V_4, V_5) = V_6 :-
    list.append(V_4, V_5, V_6).

list.chunk(V_4, V_5) = V_6 :-
    list.chunk(V_4, V_5, V_6).

list.chunk(V_4, V_5, V_6) :-
    V_7 = list.[] : list.list(T_1),
    V_8 = V_5,
    list.chunk_loop(V_4, V_5, V_7, V_8, V_6).

list.condense(V_3) = V_4 :-
    list.condense(V_3, V_4).

list.condense(V_3, V_4) :-
    list.reverse(V_3, V_5),
    V_6 = list.[] : list.list(T_1),
    list.condense_acc(V_5, V_6, V_4).

list.cons(V_4, V_5) = list.[V_4 | V_5].

list.cons(V_4, V_5, list.[V_4 | V_5]).

list.contains(V_3, V_4) :-
    list.member(V_4, V_3).

list.delete_all(V_4, V_5) = V_6 :-
    list.delete_all(V_4, V_5, V_6).

list.delete_elems(V_4, V_5) = V_6 :-
    list.delete_elems(V_4, V_5, V_6).

list.det_index0(V_4, V_5) = V_6 :-
    list.det_index0(V_4, V_5, V_6).

list.det_index1(V_4, V_5) = V_6 :-
    list.det_index1(V_4, V_5, V_6).

list.det_index1(V_4, V_5, V_6) :-
    V_7 = int.(V_5 - V_8),
    V_8 = 1 : int,
    list.det_index0(V_4, V_7, V_6).

list.det_last(V_3) = V_4 :-
    list.det_last(V_3, V_4).

list.det_replace_nth(V_5, V_6, V_7) = V_8 :-
    list.det_replace_nth(V_5, V_6, V_7, V_8).

list.drop_while(V_4, V_5) = V_6 :-
    list.drop_while(V_4, V_5, V_6).

list.drop_while(V_4, list.[], list.[]).
list.drop_while(V_5, list.[V_6 | V_7], V_8) :-
    ( if
      call(V_5, V_6)
    then
      list.drop_while(V_5, V_7, V_8)
    else
      V_8 = list.[V_6 | V_7] : list.list(T_1)
    ).

list.duplicate(V_4, V_5) = V_6 :-
    V_7 = list.[] : list.list(T_1),
    list.accumulate_n_copies(V_4, V_5, V_7, V_6).

list.duplicate(V_4, V_5, V_6) :-
    V_7 = list.[] : list.list(T_1),
    list.accumulate_n_copies(V_4, V_5, V_7, V_6).

list.filter(V_4, V_5) = V_6 :-
    list.filter(V_4, V_5, V_6).

list.filter(V_4, list.[], list.[]).
list.filter(V_5, list.[V_6 | V_7], V_8) :-
    ( if
      call(V_5, V_6)
    then
      list.filter(V_5, V_7, V_9),
      V_8 = list.[V_6 | V_9] : list.list(X_1)
    else
      list.filter(V_5, V_7, V_8)
    ).

list.filter(V_5, list.[], list.[], list.[]).
list.filter(V_6, list.[V_7 | V_8], V_9, V_10) :-
    ( if
      call(V_6, V_7)
    then
      list.filter(V_6, V_8, V_11, V_10),
      V_9 = list.[V_7 | V_11] : list.list(X_1)
    else
      list.filter(V_6, V_8, V_9, V_12),
      V_10 = list.[V_7 | V_12] : list.list(X_1)
    ).

list.filter_map(V_4, V_5) = V_6 :-
    V_7 = (pred(V_10::(builtin.in), V_11::(builtin.out)) is semidet :-
      some [] (
        V_10 = V_12,
        V_13 = apply(V_4, V_12),
        V_11 = V_13
      )
    ) : pred(X_1, Y_2),
    list.filter_map(V_7, V_5, V_6).

list.filter_map(V_4, list.[], list.[]).
list.filter_map(V_5, list.[V_6 | V_7], V_8) :-
    ( if
      call(V_5, V_6, V_9)
    then
      list.filter_map(V_5, V_7, V_10),
      V_8 = list.[V_9 | V_10] : list.list(Y_2)
    else
      list.filter_map(V_5, V_7, V_8)
    ).

list.filter_map(V_5, list.[], list.[], list.[]).
list.filter_map(V_6, list.[V_7 | V_8], V_9, V_10) :-
    ( if
      call(V_6, V_7, V_11)
    then
      list.filter_map(V_6, V_8, V_12, V_10),
      V_9 = list.[V_11 | V_12] : list.list(Y_2)
    else
      list.filter_map(V_6, V_8, V_9, V_13),
      V_10 = list.[V_7 | V_13] : list.list(X_1)
    ).

list.filter_map_corresponding(V_5, list.[], list.[]) = list.[].
list.filter_map_corresponding(V_6, list.[], list.[V_7 | V_8]) = V_4 :-
    V_4 = require.unexpected(V_9, V_10),
    V_9 = "function `list.filter_map_corresponding\'/3" : string,
    V_10 = "mismatched list lengths" : string.
list.filter_map_corresponding(V_11, list.[V_12 | V_13], list.[]) = V_4 :-
    V_4 = require.unexpected(V_14, V_15),
    V_14 = "function `list.filter_map_corresponding\'/3" : string,
    V_15 = "mismatched list lengths" : string.
list.filter_map_corresponding(V_16, list.[V_17 | V_18], list.[V_19 | V_20]) = V_4 :-
    ( if
      V_21 = apply(V_16, V_17, V_19)
    then
      V_4 = list.[V_21 | V_22] : list.list(R_3),
      V_22 = list.filter_map_corresponding(V_16, V_18, V_20)
    else
      V_4 = list.filter_map_corresponding(V_16, V_18, V_20)
    ).

list.filter_map_corresponding(V_5, list.[], list.[], list.[]).
list.filter_map_corresponding(V_6, list.[], list.[V_7 | V_8], V_9) :-
    V_10 = "predicate `list.filter_map_corresponding\'/4" : string,
    V_11 = "mismatched list lengths" : string,
    require.unexpected(V_10, V_11).
list.filter_map_corresponding(V_12, list.[V_13 | V_14], list.[], V_15) :-
    V_16 = "predicate `list.filter_map_corresponding\'/4" : string,
    V_17 = "mismatched list lengths" : string,
    require.unexpected(V_16, V_17).
list.filter_map_corresponding(V_18, list.[V_19 | V_20], list.[V_21 | V_22], V_23) :-
    ( if
      call(V_18, V_19, V_21, V_24)
    then
      list.filter_map_corresponding(V_18, V_20, V_22, V_25),
      V_23 = list.[V_24 | V_25] : list.list(R_3)
    else
      list.filter_map_corresponding(V_18, V_20, V_22, V_23)
    ).

list.filter_map_corresponding3(V_6, V_7, V_8, V_9) = V_5 :-
    ( if
      V_7 = list.[V_10 | V_11] : list.list(A_1),
      V_8 = list.[V_12 | V_13] : list.list(B_2),
      V_9 = list.[V_14 | V_15] : list.list(C_3)
    then
      ( if
        V_16 = apply(V_6, V_10, V_12, V_14)
      then
        V_5 = list.[V_16 | V_17] : list.list(R_4),
        V_17 = list.filter_map_corresponding3(V_6, V_11, V_13, V_15)
      else
        V_5 = list.filter_map_corresponding3(V_6, V_11, V_13, V_15)
      )
    else
      ( if
        V_7 = list.[] : list.list(A_1),
        V_8 = list.[] : list.list(B_2),
        V_9 = list.[] : list.list(C_3)
      then
        V_5 = list.[] : list.list(R_4)
      else
        V_5 = require.unexpected(V_18, V_19),
        V_18 = "function `list.filter_map_corresponding3\'/4" : string,
        V_19 = "mismatched list lengths" : string
      )
    ).

list.filter_map_corresponding3(V_6, V_7, V_8, V_9, V_10) :-
    ( if
      V_7 = list.[V_11 | V_12] : list.list(A_1),
      V_8 = list.[V_13 | V_14] : list.list(B_2),
      V_9 = list.[V_15 | V_16] : list.list(C_3)
    then
      ( if
        call(V_6, V_11, V_13, V_15, V_17)
      then
        list.filter_map_corresponding3(V_6, V_12, V_14, V_16, V_18),
        V_10 = list.[V_17 | V_18] : list.list(R_4)
      else
        list.filter_map_corresponding3(V_6, V_12, V_14, V_16, V_10)
      )
    else
      ( if
        V_7 = list.[] : list.list(A_1),
        V_8 = list.[] : list.list(B_2),
        V_9 = list.[] : list.list(C_3)
      then
        V_10 = list.[] : list.list(R_4)
      else
        V_19 = "predicate `list.filter_map_corresponding3\'/5" : string,
        V_20 = "mismatched list lengths" : string,
        require.unexpected(V_19, V_20)
      )
    ).

list.filter_map_foldl(V_6, list.[], list.[], V_8, V_9) :-
    V_9 = V_8.
list.filter_map_foldl(V_10, list.[V_11 | V_12], V_13, V_17, V_18) :-
    ( if
      call(V_10, V_11, V_15, V_17, V_19)
    then
      list.filter_map_foldl(V_10, V_12, V_16, V_19, V_18),
      V_13 = list.[V_15 | V_16] : list.list(Y_2)
    else
      list.filter_map_foldl(V_10, V_12, V_13, V_17, V_18)
    ).

list.find_first_map(V_4, list.[V_5 | V_6], V_7) :-
    ( if
      call(V_4, V_5, V_8)
    then
      V_7 = V_8
    else
      list.find_first_map(V_4, V_6, V_7)
    ).

list.find_first_map2(V_5, list.[V_6 | V_7], V_8, V_9) :-
    ( if
      call(V_5, V_6, V_10, V_11)
    then
      V_8 = V_10,
      V_9 = V_11
    else
      list.find_first_map2(V_5, V_7, V_8, V_9)
    ).

list.find_first_map3(V_6, list.[V_7 | V_8], V_9, V_10, V_11) :-
    ( if
      call(V_6, V_7, V_12, V_13, V_14)
    then
      V_9 = V_12,
      V_10 = V_13,
      V_11 = V_14
    else
      list.find_first_map3(V_6, V_8, V_9, V_10, V_11)
    ).

list.find_first_match(V_4, list.[V_5 | V_6], V_7) :-
    ( if
      call(V_4, V_5)
    then
      V_7 = V_5
    else
      list.find_first_match(V_4, V_6, V_7)
    ).

list.find_index_of_match(V_5, list.[V_6 | V_7], V_8, V_9) :-
    ( if
      call(V_5, V_6)
    then
      V_9 = V_8
    else
      V_10 = int.(V_8 + V_11),
      V_11 = 1 : int,
      list.find_index_of_match(V_5, V_7, V_10, V_9)
    ).

list.foldl(V_5, V_6, V_7) = V_8 :-
    V_9 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(L_1, A_2, A_2),
    list.foldl(V_9, V_6, V_7, V_8).

list.foldl(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
list.foldl(V_9, list.[V_10 | V_11], V_13, V_14) :-
    call(V_9, V_10, V_13, V_15),
    list.foldl(V_9, V_11, V_15, V_14).

list.foldl2(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
list.foldl2(V_14, list.[V_15 | V_16], V_19, V_20, V_21, V_22) :-
    call(V_14, V_15, V_19, V_23, V_21, V_24),
    list.foldl2(V_14, V_16, V_23, V_20, V_24, V_22).

list.foldl2_corresponding(V_8, list.[], list.[], V_11, V_12, V_13, V_14) :-
    V_14 = V_13,
    V_12 = V_11.
list.foldl2_corresponding(V_15, list.[], list.[V_16 | V_17], V_18, V_19, V_20, V_21) :-
    V_22 = "predicate `list.foldl2_corresponding\'/7" : string,
    V_23 = "mismatched list lengths" : string,
    require.unexpected(V_22, V_23).
list.foldl2_corresponding(V_24, list.[V_25 | V_26], list.[], V_27, V_28, V_29, V_30) :-
    V_31 = "predicate `list.foldl2_corresponding\'/7" : string,
    V_32 = "mismatched list lengths" : string,
    require.unexpected(V_31, V_32).
list.foldl2_corresponding(V_33, list.[V_34 | V_35], list.[V_36 | V_37], V_40, V_41, V_42, V_43) :-
    call(V_33, V_34, V_36, V_40, V_44, V_42, V_45),
    list.foldl2_corresponding(V_33, V_35, V_37, V_44, V_41, V_45, V_43).

list.foldl3(V_9, list.[], V_13, V_14, V_15, V_16, V_17, V_18) :-
    V_18 = V_17,
    V_16 = V_15,
    V_14 = V_13.
list.foldl3(V_19, list.[V_20 | V_21], V_25, V_26, V_27, V_28, V_29, V_30) :-
    call(V_19, V_20, V_25, V_31, V_27, V_32, V_29, V_33),
    list.foldl3(V_19, V_21, V_31, V_26, V_32, V_28, V_33, V_30).

list.foldl3_corresponding(V_10, list.[], list.[], V_14, V_15, V_16, V_17, V_18, V_19) :-
    V_19 = V_18,
    V_17 = V_16,
    V_15 = V_14.
list.foldl3_corresponding(V_20, list.[], list.[V_21 | V_22], V_23, V_24, V_25, V_26, V_27, V_28) :-
    V_29 = "predicate `list.foldl3_corresponding\'/9" : string,
    V_30 = "mismatched list lengths" : string,
    require.unexpected(V_29, V_30).
list.foldl3_corresponding(V_31, list.[V_32 | V_33], list.[], V_34, V_35, V_36, V_37, V_38, V_39) :-
    V_40 = "predicate `list.foldl3_corresponding\'/9" : string,
    V_41 = "mismatched list lengths" : string,
    require.unexpected(V_40, V_41).
list.foldl3_corresponding(V_42, list.[V_43 | V_44], list.[V_45 | V_46], V_50, V_51, V_52, V_53, V_54, V_55) :-
    call(V_42, V_43, V_45, V_50, V_56, V_52, V_57, V_54, V_58),
    list.foldl3_corresponding(V_42, V_44, V_46, V_56, V_51, V_57, V_53, V_58, V_55).

list.foldl4(V_11, list.[], V_16, V_17, V_18, V_19, V_20, V_21, V_22, V_23) :-
    V_23 = V_22,
    V_21 = V_20,
    V_19 = V_18,
    V_17 = V_16.
list.foldl4(V_24, list.[V_25 | V_26], V_31, V_32, V_33, V_34, V_35, V_36, V_37, V_38) :-
    call(V_24, V_25, V_31, V_39, V_33, V_40, V_35, V_41, V_37, V_42),
    list.foldl4(V_24, V_26, V_39, V_32, V_40, V_34, V_41, V_36, V_42, V_38).

list.foldl5(V_13, list.[], V_19, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28) :-
    V_28 = V_27,
    V_26 = V_25,
    V_24 = V_23,
    V_22 = V_21,
    V_20 = V_19.
list.foldl5(V_29, list.[V_30 | V_31], V_37, V_38, V_39, V_40, V_41, V_42, V_43, V_44, V_45, V_46) :-
    call(V_29, V_30, V_37, V_47, V_39, V_48, V_41, V_49, V_43, V_50, V_45, V_51),
    list.foldl5(V_29, V_31, V_47, V_38, V_48, V_40, V_49, V_42, V_50, V_44, V_51, V_46).

list.foldl6(V_15, list.[], V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33) :-
    V_33 = V_32,
    V_31 = V_30,
    V_29 = V_28,
    V_27 = V_26,
    V_25 = V_24,
    V_23 = V_22.
list.foldl6(V_34, list.[V_35 | V_36], V_43, V_44, V_45, V_46, V_47, V_48, V_49, V_50, V_51, V_52, V_53, V_54) :-
    call(V_34, V_35, V_43, V_55, V_45, V_56, V_47, V_57, V_49, V_58, V_51, V_59, V_53, V_60),
    list.foldl6(V_34, V_36, V_55, V_44, V_56, V_46, V_57, V_48, V_58, V_50, V_59, V_52, V_60, V_54).

list.foldl7(V_17, list.[], V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33, V_34, V_35, V_36, V_37, V_38) :-
    V_38 = V_37,
    V_36 = V_35,
    V_34 = V_33,
    V_32 = V_31,
    V_30 = V_29,
    V_28 = V_27,
    V_26 = V_25.
list.foldl7(V_39, list.[V_40 | V_41], V_49, V_50, V_51, V_52, V_53, V_54, V_55, V_56, V_57, V_58, V_59, V_60, V_61, V_62) :-
    call(V_39, V_40, V_49, V_63, V_51, V_64, V_53, V_65, V_55, V_66, V_57, V_67, V_59, V_68, V_61, V_69),
    list.foldl7(V_39, V_41, V_63, V_50, V_64, V_52, V_65, V_54, V_66, V_56, V_67, V_58, V_68, V_60, V_69, V_62).

list.foldl8(V_19, list.[], V_28, V_29, V_30, V_31, V_32, V_33, V_34, V_35, V_36, V_37, V_38, V_39, V_40, V_41, V_42, V_43) :-
    V_43 = V_42,
    V_41 = V_40,
    V_39 = V_38,
    V_37 = V_36,
    V_35 = V_34,
    V_33 = V_32,
    V_31 = V_30,
    V_29 = V_28.
list.foldl8(V_44, list.[V_45 | V_46], V_54, V_55, V_56, V_57, V_58, V_59, V_60, V_61, V_62, V_63, V_64, V_65, V_66, V_67, V_68, V_69) :-
    call(V_44, V_45, V_54, V_70, V_56, V_71, V_58, V_72, V_60, V_73, V_62, V_74, V_64, V_75, V_66, V_76, V_68, V_77),
    list.foldl8(V_44, V_46, V_70, V_55, V_71, V_57, V_72, V_59, V_73, V_61, V_74, V_63, V_75, V_65, V_76, V_67, V_77, V_69).

list.foldl_corresponding(V_6, list.[], list.[], V_7) = V_7.
list.foldl_corresponding(V_8, list.[], list.[V_9 | V_10], V_11) = V_12 :-
    V_13 = "function `list.foldl_corresponding\'/4" : string,
    V_14 = "mismatched list lengths" : string,
    require.unexpected(V_13, V_14).
list.foldl_corresponding(V_15, list.[V_16 | V_17], list.[], V_18) = V_19 :-
    V_20 = "function `list.foldl_corresponding\'/4" : string,
    V_21 = "mismatched list lengths" : string,
    require.unexpected(V_20, V_21).
list.foldl_corresponding(V_22, list.[V_23 | V_24], list.[V_25 | V_26], V_28) = V_29 :-
    V_30 = apply(V_22, V_23, V_25, V_28),
    V_29 = list.foldl_corresponding(V_22, V_24, V_26, V_30).

list.foldl_corresponding(V_6, list.[], list.[], V_8, V_9) :-
    V_9 = V_8.
list.foldl_corresponding(V_10, list.[], list.[V_11 | V_12], V_13, V_14) :-
    V_15 = "predicate `list.foldl_corresponding\'/5" : string,
    V_16 = "mismatched list lengths" : string,
    require.unexpected(V_15, V_16).
list.foldl_corresponding(V_17, list.[V_18 | V_19], list.[], V_20, V_21) :-
    V_22 = "predicate `list.foldl_corresponding\'/5" : string,
    V_23 = "mismatched list lengths" : string,
    require.unexpected(V_22, V_23).
list.foldl_corresponding(V_24, list.[V_25 | V_26], list.[V_27 | V_28], V_30, V_31) :-
    call(V_24, V_25, V_27, V_30, V_32),
    list.foldl_corresponding(V_24, V_26, V_28, V_32, V_31).

list.foldr(V_5, V_6, V_7) = V_8 :-
    V_9 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(L_1, A_2, A_2),
    list.foldr(V_9, V_6, V_7, V_8).

list.foldr(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
list.foldr(V_9, list.[V_10 | V_11], V_13, V_14) :-
    list.foldr(V_9, V_11, V_13, V_15),
    call(V_9, V_10, V_15, V_14).

list.foldr2(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
list.foldr2(V_14, list.[V_15 | V_16], V_19, V_20, V_21, V_22) :-
    list.foldr2(V_14, V_16, V_19, V_23, V_21, V_24),
    call(V_14, V_15, V_23, V_20, V_24, V_22).

list.foldr3(V_9, list.[], V_13, V_14, V_15, V_16, V_17, V_18) :-
    V_18 = V_17,
    V_16 = V_15,
    V_14 = V_13.
list.foldr3(V_19, list.[V_20 | V_21], V_25, V_26, V_27, V_28, V_29, V_30) :-
    list.foldr3(V_19, V_21, V_25, V_31, V_27, V_32, V_29, V_33),
    call(V_19, V_20, V_31, V_26, V_32, V_28, V_33, V_30).

list.head(list.[V_3 | V_4]) = V_3.

list.hosort(V_6, V_7, V_8, V_9, V_10) :-
    ( if
      V_7 = 1 : int
    then
      V_8 = list.[V_11 | V_10] : list.list(X_1),
      V_9 = list.[V_11 | V_19] : list.list(X_1),
      V_19 = list.[] : list.list(X_1)
    else
      ( if
        V_7 = 2 : int
      then
        V_8 = list.[V_28 | V_20] : list.list(X_1),
        V_20 = list.[V_12 | V_10] : list.list(X_1),
        call(V_6, V_28, V_12, V_13),
        ( % disjunction
          V_13 = builtin.(<) : builtin.comparison_result,
          V_9 = list.[V_28 | V_25] : list.list(X_1),
          V_25 = list.[V_12 | V_26] : list.list(X_1),
          V_26 = list.[] : list.list(X_1)
        ;
          V_13 = builtin.(=) : builtin.comparison_result,
          V_9 = list.[V_28 | V_23] : list.list(X_1),
          V_23 = list.[V_12 | V_24] : list.list(X_1),
          V_24 = list.[] : list.list(X_1)
        ;
          V_13 = builtin.(>) : builtin.comparison_result,
          V_9 = list.[V_12 | V_21] : list.list(X_1),
          V_21 = list.[V_28 | V_22] : list.list(X_1),
          V_22 = list.[] : list.list(X_1)
        )
      else
        V_14 = int.(V_7 // V_27),
        V_27 = 2 : int,
        V_15 = int.(V_7 - V_14),
        list.hosort(V_6, V_14, V_8, V_16, V_17),
        list.hosort(V_6, V_15, V_17, V_18, V_10),
        list.merge(V_6, V_16, V_18, V_9)
      )
    ).

list.index0_of_first_occurrence(V_4, V_5, V_6) :-
    V_7 = 0 : int,
    list.index0_of_first_occurrence_2(V_4, V_5, V_7, V_6).

list.index1(V_4, V_5, V_6) :-
    V_7 = int.(V_5 - V_8),
    V_8 = 1 : int,
    list.index0(V_4, V_7, V_6).

list.index1_of_first_occurrence(V_4, V_5, V_3) :-
    V_3 = int.(V_6 + V_7),
    V_7 = 1 : int,
    list.index0_of_first_occurrence(V_4, V_5, V_6).

list.insert(V_4, V_5, V_6) :-
    list.delete(V_6, V_4, V_5).

list.inst_preserving_reverse(V_3) = V_4 :-
    V_5 = list.[] : list.list(T_1),
    list.inst_preserving_reverse_prepend(V_3, V_5, V_4).

list.is_empty(list.[]).

list.is_not_empty(list.[V_2 | V_3]).

list.length(V_3) = V_4 :-
    list.length(V_3, V_4).

list.length(V_3, V_4) :-
    V_5 = 0 : int,
    list.length_acc(V_3, V_5, V_4).

list.map(V_4, list.[]) = list.[].
list.map(V_5, list.[V_6 | V_7]) = list.[V_8 | V_9] :-
    V_8 = apply(V_5, V_6),
    V_9 = list.map(V_5, V_7).

list.map(V_4, list.[], list.[]).
list.map(V_5, list.[V_6 | V_7], list.[V_8 | V_9]) :-
    call(V_5, V_6, V_8),
    list.map(V_5, V_7, V_9).

list.map2(V_5, list.[], list.[], list.[]).
list.map2(V_6, list.[V_7 | V_8], list.[V_9 | V_10], list.[V_11 | V_12]) :-
    call(V_6, V_7, V_9, V_11),
    list.map2(V_6, V_8, V_10, V_12).

list.map2_foldl(V_7, list.[], list.[], list.[], V_9, V_10) :-
    V_10 = V_9.
list.map2_foldl(V_11, list.[V_12 | V_13], list.[V_14 | V_15], list.[V_16 | V_17], V_19, V_20) :-
    call(V_11, V_12, V_14, V_16, V_19, V_21),
    list.map2_foldl(V_11, V_13, V_15, V_17, V_21, V_20).

list.map2_foldl2(V_9, list.[], list.[], list.[], V_12, V_13, V_14, V_15) :-
    V_15 = V_14,
    V_13 = V_12.
list.map2_foldl2(V_16, list.[V_17 | V_18], list.[V_19 | V_20], list.[V_21 | V_22], V_25, V_26, V_27, V_28) :-
    call(V_16, V_17, V_19, V_21, V_25, V_29, V_27, V_30),
    list.map2_foldl2(V_16, V_18, V_20, V_22, V_29, V_26, V_30, V_28).

list.map2_foldl3(V_11, list.[], list.[], list.[], V_15, V_16, V_17, V_18, V_19, V_20) :-
    V_20 = V_19,
    V_18 = V_17,
    V_16 = V_15.
list.map2_foldl3(V_21, list.[V_22 | V_23], list.[V_24 | V_25], list.[V_26 | V_27], V_31, V_32, V_33, V_34, V_35, V_36) :-
    call(V_21, V_22, V_24, V_26, V_31, V_37, V_33, V_38, V_35, V_39),
    list.map2_foldl3(V_21, V_23, V_25, V_27, V_37, V_32, V_38, V_34, V_39, V_36).

list.map2_foldl4(V_13, list.[], list.[], list.[], V_18, V_19, V_20, V_21, V_22, V_23, V_24, V_25) :-
    V_25 = V_24,
    V_23 = V_22,
    V_21 = V_20,
    V_19 = V_18.
list.map2_foldl4(V_26, list.[V_27 | V_28], list.[V_29 | V_30], list.[V_31 | V_32], V_37, V_38, V_39, V_40, V_41, V_42, V_43, V_44) :-
    call(V_26, V_27, V_29, V_31, V_37, V_45, V_39, V_46, V_41, V_47, V_43, V_48),
    list.map2_foldl4(V_26, V_28, V_30, V_32, V_45, V_38, V_46, V_40, V_47, V_42, V_48, V_44).

list.map3(V_6, list.[], list.[], list.[], list.[]).
list.map3(V_7, list.[V_8 | V_9], list.[V_10 | V_11], list.[V_12 | V_13], list.[V_14 | V_15]) :-
    call(V_7, V_8, V_10, V_12, V_14),
    list.map3(V_7, V_9, V_11, V_13, V_15).

list.map3_foldl(V_8, list.[], list.[], list.[], list.[], V_10, V_11) :-
    V_11 = V_10.
list.map3_foldl(V_12, list.[V_13 | V_14], list.[V_15 | V_16], list.[V_17 | V_18], list.[V_19 | V_20], V_22, V_23) :-
    call(V_12, V_13, V_15, V_17, V_19, V_22, V_24),
    list.map3_foldl(V_12, V_14, V_16, V_18, V_20, V_24, V_23).

list.map3_foldl2(V_10, list.[], list.[], list.[], list.[], V_13, V_14, V_15, V_16) :-
    V_16 = V_15,
    V_14 = V_13.
list.map3_foldl2(V_17, list.[V_18 | V_19], list.[V_20 | V_21], list.[V_22 | V_23], list.[V_24 | V_25], V_28, V_29, V_30, V_31) :-
    call(V_17, V_18, V_20, V_22, V_24, V_28, V_32, V_30, V_33),
    list.map3_foldl2(V_17, V_19, V_21, V_23, V_25, V_32, V_29, V_33, V_31).

list.map4(V_7, list.[], list.[], list.[], list.[], list.[]).
list.map4(V_8, list.[V_9 | V_10], list.[V_11 | V_12], list.[V_13 | V_14], list.[V_15 | V_16], list.[V_17 | V_18]) :-
    call(V_8, V_9, V_11, V_13, V_15, V_17),
    list.map4(V_8, V_10, V_12, V_14, V_16, V_18).

list.map4_foldl(V_9, list.[], list.[], list.[], list.[], list.[], V_11, V_12) :-
    V_12 = V_11.
list.map4_foldl(V_13, list.[V_14 | V_15], list.[V_16 | V_17], list.[V_18 | V_19], list.[V_20 | V_21], list.[V_22 | V_23], V_25, V_26) :-
    call(V_13, V_14, V_16, V_18, V_20, V_22, V_25, V_27),
    list.map4_foldl(V_13, V_15, V_17, V_19, V_21, V_23, V_27, V_26).

list.map5(V_8, list.[], list.[], list.[], list.[], list.[], list.[]).
list.map5(V_9, list.[V_10 | V_11], list.[V_12 | V_13], list.[V_14 | V_15], list.[V_16 | V_17], list.[V_18 | V_19], list.[V_20 | V_21]) :-
    call(V_9, V_10, V_12, V_14, V_16, V_18, V_20),
    list.map5(V_9, V_11, V_13, V_15, V_17, V_19, V_21).

list.map6(V_9, list.[], list.[], list.[], list.[], list.[], list.[], list.[]).
list.map6(V_10, list.[V_11 | V_12], list.[V_13 | V_14], list.[V_15 | V_16], list.[V_17 | V_18], list.[V_19 | V_20], list.[V_21 | V_22], list.[V_23 | V_24]) :-
    call(V_10, V_11, V_13, V_15, V_17, V_19, V_21, V_23),
    list.map6(V_10, V_12, V_14, V_16, V_18, V_20, V_22, V_24).

list.map7(V_10, list.[], list.[], list.[], list.[], list.[], list.[], list.[], list.[]).
list.map7(V_11, list.[V_12 | V_13], list.[V_14 | V_15], list.[V_16 | V_17], list.[V_18 | V_19], list.[V_20 | V_21], list.[V_22 | V_23], list.[V_24 | V_25], list.[V_26 | V_27]) :-
    call(V_11, V_12, V_14, V_16, V_18, V_20, V_22, V_24, V_26),
    list.map7(V_11, V_13, V_15, V_17, V_19, V_21, V_23, V_25, V_27).

list.map8(V_11, list.[], list.[], list.[], list.[], list.[], list.[], list.[], list.[], list.[]).
list.map8(V_12, list.[V_13 | V_14], list.[V_15 | V_16], list.[V_17 | V_18], list.[V_19 | V_20], list.[V_21 | V_22], list.[V_23 | V_24], list.[V_25 | V_26], list.[V_27 | V_28], list.[V_29 | V_30]) :-
    call(V_12, V_13, V_15, V_17, V_19, V_21, V_23, V_25, V_27, V_29),
    list.map8(V_12, V_14, V_16, V_18, V_20, V_22, V_24, V_26, V_28, V_30).

list.map_corresponding(V_5, list.[], list.[]) = list.[].
list.map_corresponding(V_6, list.[], list.[V_7 | V_8]) = V_4 :-
    V_4 = require.unexpected(V_9, V_10),
    V_9 = "function `list.map_corresponding\'/3" : string,
    V_10 = "mismatched list lengths" : string.
list.map_corresponding(V_11, list.[V_12 | V_13], list.[]) = V_4 :-
    V_4 = require.unexpected(V_14, V_15),
    V_14 = "function `list.map_corresponding\'/3" : string,
    V_15 = "mismatched list lengths" : string.
list.map_corresponding(V_16, list.[V_17 | V_18], list.[V_19 | V_20]) = list.[V_21 | V_22] :-
    V_21 = apply(V_16, V_17, V_19),
    V_22 = list.map_corresponding(V_16, V_18, V_20).

list.map_corresponding(V_5, list.[], list.[], list.[]).
list.map_corresponding(V_6, list.[], list.[V_7 | V_8], V_9) :-
    V_10 = "predicate `list.map_corresponding\'/4" : string,
    V_11 = "mismatched list lengths" : string,
    require.unexpected(V_10, V_11).
list.map_corresponding(V_12, list.[V_13 | V_14], list.[], V_15) :-
    V_16 = "predicate `list.map_corresponding\'/4" : string,
    V_17 = "mismatched list lengths" : string,
    require.unexpected(V_16, V_17).
list.map_corresponding(V_18, list.[V_19 | V_20], list.[V_21 | V_22], list.[V_23 | V_24]) :-
    call(V_18, V_19, V_21, V_23),
    list.map_corresponding(V_18, V_20, V_22, V_24).

list.map_corresponding3(V_6, V_7, V_8, V_9) = V_5 :-
    ( if
      V_7 = list.[V_10 | V_11] : list.list(A_1),
      V_8 = list.[V_12 | V_13] : list.list(B_2),
      V_9 = list.[V_14 | V_15] : list.list(C_3)
    then
      V_5 = list.[V_16 | V_17] : list.list(R_4),
      V_16 = apply(V_6, V_10, V_12, V_14),
      V_17 = list.map_corresponding3(V_6, V_11, V_13, V_15)
    else
      ( if
        V_7 = list.[] : list.list(A_1),
        V_8 = list.[] : list.list(B_2),
        V_9 = list.[] : list.list(C_3)
      then
        V_5 = list.[] : list.list(R_4)
      else
        V_5 = require.unexpected(V_18, V_19),
        V_18 = "function `list.map_corresponding3\'/4" : string,
        V_19 = "mismatched list lengths" : string
      )
    ).

list.map_corresponding3(V_6, V_7, V_8, V_9, V_10) :-
    ( if
      V_7 = list.[V_11 | V_12] : list.list(A_1),
      V_8 = list.[V_13 | V_14] : list.list(B_2),
      V_9 = list.[V_15 | V_16] : list.list(C_3)
    then
      call(V_6, V_11, V_13, V_15, V_17),
      list.map_corresponding3(V_6, V_12, V_14, V_16, V_18),
      V_10 = list.[V_17 | V_18] : list.list(R_4)
    else
      ( if
        V_7 = list.[] : list.list(A_1),
        V_8 = list.[] : list.list(B_2),
        V_9 = list.[] : list.list(C_3)
      then
        V_10 = list.[] : list.list(R_4)
      else
        V_19 = "predicate `list.map_corresponding3\'/5" : string,
        V_20 = "mismatched list lengths" : string,
        require.unexpected(V_19, V_20)
      )
    ).

list.map_corresponding_foldl(V_7, list.[], list.[], list.[], V_9, V_10) :-
    V_10 = V_9.
list.map_corresponding_foldl(V_11, list.[], list.[V_12 | V_13], V_14, V_15, V_16) :-
    V_17 = "predicate `list.map_corresponding_foldl\'/6" : string,
    V_18 = "mismatched list lengths" : string,
    require.unexpected(V_17, V_18).
list.map_corresponding_foldl(V_19, list.[V_20 | V_21], list.[], V_22, V_23, V_24) :-
    V_25 = "predicate `list.map_corresponding_foldl\'/6" : string,
    V_26 = "mismatched list lengths" : string,
    require.unexpected(V_25, V_26).
list.map_corresponding_foldl(V_27, list.[V_28 | V_29], list.[V_30 | V_31], list.[V_32 | V_33], V_35, V_36) :-
    call(V_27, V_28, V_30, V_32, V_35, V_37),
    list.map_corresponding_foldl(V_27, V_29, V_31, V_33, V_37, V_36).

list.map_corresponding_foldl2(V_9, list.[], list.[], list.[], V_12, V_13, V_14, V_15) :-
    V_15 = V_14,
    V_13 = V_12.
list.map_corresponding_foldl2(V_16, list.[], list.[V_17 | V_18], V_19, V_20, V_21, V_22, V_23) :-
    V_24 = "predicate `list.map_corresponding_foldl2\'/8" : string,
    V_25 = "mismatched list lengths" : string,
    require.unexpected(V_24, V_25).
list.map_corresponding_foldl2(V_26, list.[V_27 | V_28], list.[], V_29, V_30, V_31, V_32, V_33) :-
    V_34 = "predicate `list.map_corresponding_foldl2\'/8" : string,
    V_35 = "mismatched list lengths" : string,
    require.unexpected(V_34, V_35).
list.map_corresponding_foldl2(V_36, list.[V_37 | V_38], list.[V_39 | V_40], list.[V_41 | V_42], V_45, V_46, V_47, V_48) :-
    call(V_36, V_37, V_39, V_41, V_45, V_49, V_47, V_50),
    list.map_corresponding_foldl2(V_36, V_38, V_40, V_42, V_49, V_46, V_50, V_48).

list.map_foldl(V_6, list.[], list.[], V_8, V_9) :-
    V_9 = V_8.
list.map_foldl(V_10, list.[V_11 | V_12], list.[V_13 | V_14], V_16, V_17) :-
    call(V_10, V_11, V_13, V_16, V_18),
    list.map_foldl(V_10, V_12, V_14, V_18, V_17).

list.map_foldl2(V_8, list.[], list.[], V_11, V_12, V_13, V_14) :-
    V_14 = V_13,
    V_12 = V_11.
list.map_foldl2(V_15, list.[V_16 | V_17], list.[V_18 | V_19], V_22, V_23, V_24, V_25) :-
    call(V_15, V_16, V_18, V_22, V_26, V_24, V_27),
    list.map_foldl2(V_15, V_17, V_19, V_26, V_23, V_27, V_25).

list.map_foldl3(V_10, list.[], list.[], V_14, V_15, V_16, V_17, V_18, V_19) :-
    V_19 = V_18,
    V_17 = V_16,
    V_15 = V_14.
list.map_foldl3(V_20, list.[V_21 | V_22], list.[V_23 | V_24], V_28, V_29, V_30, V_31, V_32, V_33) :-
    call(V_20, V_21, V_23, V_28, V_34, V_30, V_35, V_32, V_36),
    list.map_foldl3(V_20, V_22, V_24, V_34, V_29, V_35, V_31, V_36, V_33).

list.map_foldl4(V_12, list.[], list.[], V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24) :-
    V_24 = V_23,
    V_22 = V_21,
    V_20 = V_19,
    V_18 = V_17.
list.map_foldl4(V_25, list.[V_26 | V_27], list.[V_28 | V_29], V_34, V_35, V_36, V_37, V_38, V_39, V_40, V_41) :-
    call(V_25, V_26, V_28, V_34, V_42, V_36, V_43, V_38, V_44, V_40, V_45),
    list.map_foldl4(V_25, V_27, V_29, V_42, V_35, V_43, V_37, V_44, V_39, V_45, V_41).

list.map_foldl5(V_14, list.[], list.[], V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29) :-
    V_29 = V_28,
    V_27 = V_26,
    V_25 = V_24,
    V_23 = V_22,
    V_21 = V_20.
list.map_foldl5(V_30, list.[V_31 | V_32], list.[V_33 | V_34], V_40, V_41, V_42, V_43, V_44, V_45, V_46, V_47, V_48, V_49) :-
    call(V_30, V_31, V_33, V_40, V_50, V_42, V_51, V_44, V_52, V_46, V_53, V_48, V_54),
    list.map_foldl5(V_30, V_32, V_34, V_50, V_41, V_51, V_43, V_52, V_45, V_53, V_47, V_54, V_49).

list.map_foldl6(V_16, list.[], list.[], V_23, V_24, V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33, V_34) :-
    V_34 = V_33,
    V_32 = V_31,
    V_30 = V_29,
    V_28 = V_27,
    V_26 = V_25,
    V_24 = V_23.
list.map_foldl6(V_35, list.[V_36 | V_37], list.[V_38 | V_39], V_46, V_47, V_48, V_49, V_50, V_51, V_52, V_53, V_54, V_55, V_56, V_57) :-
    call(V_35, V_36, V_38, V_46, V_58, V_48, V_59, V_50, V_60, V_52, V_61, V_54, V_62, V_56, V_63),
    list.map_foldl6(V_35, V_37, V_39, V_58, V_47, V_59, V_49, V_60, V_51, V_61, V_53, V_62, V_55, V_63, V_57).

list.map_foldr(V_6, list.[], list.[], V_8, V_9) :-
    V_9 = V_8.
list.map_foldr(V_10, list.[V_11 | V_12], list.[V_13 | V_14], V_16, V_17) :-
    list.map_foldr(V_10, V_12, V_14, V_16, V_18),
    call(V_10, V_11, V_13, V_18, V_17).

list.member(V_3, list.[V_3 | V_4]).
list.member(V_5, list.[V_6 | V_7]) :-
    list.member(V_5, V_7).

list.member(V_4, V_5, V_6) :-
    V_6 = list.[V_4 | V_7] : list.list(T_1),
    list.append(V_8, V_6, V_5).

list.member_indexes0(V_4, V_5, V_6) :-
    V_7 = 0 : int,
    list.member_indexes0_loop(V_4, V_7, V_5, V_6).

list.merge(V_4, V_5) = V_6 :-
    list.merge(V_4, V_5, V_6).

list.merge(V_5, V_6, V_7) = V_8 :-
    V_9 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(X_1, X_1, builtin.comparison_result),
    list.merge(V_9, V_6, V_7, V_8).

list.merge(V_5, list.[], list.[], list.[]).
list.merge(V_6, list.[], list.[V_7 | V_8], list.[V_7 | V_8]).
list.merge(V_9, list.[V_10 | V_11], list.[], list.[V_10 | V_11]).
list.merge(V_12, list.[V_13 | V_14], list.[V_15 | V_16], V_17) :-
    ( if
      V_19 = builtin.(>) : builtin.comparison_result,
      call(V_12, V_13, V_15, V_19)
    then
      V_20 = list.[V_13 | V_14] : list.list(X_1),
      list.merge(V_12, V_20, V_16, V_18),
      V_17 = list.[V_15 | V_18] : list.list(X_1)
    else
      V_21 = list.[V_15 | V_16] : list.list(X_1),
      list.merge(V_12, V_14, V_21, V_22),
      V_17 = list.[V_13 | V_22] : list.list(X_1)
    ).

list.merge_and_remove_dups(V_4, V_5) = V_6 :-
    list.merge_and_remove_dups(V_4, V_5, V_6).

list.merge_and_remove_dups(V_5, V_6, V_7) = V_8 :-
    V_9 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(X_1, X_1, builtin.comparison_result),
    list.merge_and_remove_dups(V_9, V_6, V_7, V_8).

list.merge_and_remove_dups(V_5, list.[], list.[], list.[]).
list.merge_and_remove_dups(V_6, list.[], list.[V_7 | V_8], list.[V_7 | V_8]).
list.merge_and_remove_dups(V_9, list.[V_10 | V_11], list.[], list.[V_10 | V_11]).
list.merge_and_remove_dups(V_12, list.[V_13 | V_14], list.[V_15 | V_16], V_17) :-
    call(V_12, V_13, V_15, V_18),
    ( % disjunction
      V_18 = builtin.(<) : builtin.comparison_result,
      V_21 = list.[V_15 | V_16] : list.list(X_1),
      list.merge_and_remove_dups(V_12, V_14, V_21, V_19),
      V_17 = list.[V_13 | V_19] : list.list(X_1)
    ;
      V_18 = builtin.(=) : builtin.comparison_result,
      list.merge_and_remove_dups(V_12, V_14, V_16, V_22),
      V_17 = list.[V_13 | V_22] : list.list(X_1)
    ;
      V_18 = builtin.(>) : builtin.comparison_result,
      V_20 = list.[V_13 | V_14] : list.list(X_1),
      list.merge_and_remove_dups(V_12, V_20, V_16, V_23),
      V_17 = list.[V_15 | V_23] : list.list(X_1)
    ).

list.negated_filter(V_4, V_5) = V_6 :-
    list.negated_filter(V_4, V_5, V_6).

list.negated_filter(V_4, list.[], list.[]).
list.negated_filter(V_5, list.[V_6 | V_7], V_8) :-
    ( if
      call(V_5, V_6)
    then
      list.negated_filter(V_5, V_7, V_8)
    else
      list.negated_filter(V_5, V_7, V_9),
      V_8 = list.[V_6 | V_9] : list.list(X_1)
    ).

list.nth_member_lookup(V_4, V_5, V_6) :-
    V_6 = list.det_index1_of_first_occurrence(V_4, V_5).

list.nth_member_search(V_4, V_5, V_6) :-
    list.index1_of_first_occurrence(V_4, V_5, V_6).

:- promise all [A, B, C, ABC] (
  not (
    some [] (
      list.append(A, B, AB),
      list.append(AB, C, ABC)
    ),
    not (
      some [] (
        list.append(B, C, BC),
        list.append(A, BC, ABC)
      )
    )
  ),
  not (
    some [] (
      list.append(B, C, BC),
      list.append(A, BC, ABC)
    ),
    not (
      some [] (
        list.append(A, B, AB),
        list.append(AB, C, ABC)
      )
    )
  )).

:- promise all [L, H, T] (
  not (
    V_4 = list.[H | V_5],
    V_5 = list.[],
    list.append(V_4, T, L),
    not (
      L = list.[H | T]
    )
  ),
  not (
    L = list.[H | T],
    not (
      V_6 = list.[H | V_7],
      V_7 = list.[],
      list.append(V_6, T, L)
    )
  )).

list.remove_adjacent_dups(V_3) = V_4 :-
    list.remove_adjacent_dups(V_3, V_4).

list.remove_adjacent_dups(list.[], list.[]).
list.remove_adjacent_dups(list.[V_3 | V_4], V_5) :-
    list.remove_adjacent_dups_loop(V_3, V_4, V_5).

list.remove_adjacent_dups(V_4, list.[], list.[]).
list.remove_adjacent_dups(V_5, list.[V_6 | V_7], V_8) :-
    list.remove_adjacent_dups_loop(V_5, V_6, V_7, V_8).

list.remove_adjacent_dups_loop(V_5, V_6, list.[], list.[V_6 | V_7]) :-
    V_7 = list.[] : list.list(T_1).
list.remove_adjacent_dups_loop(V_8, V_9, list.[V_10 | V_11], V_12) :-
    ( if
      V_14 = builtin.(=) : builtin.comparison_result,
      call(V_8, V_9, V_10, V_14)
    then
      list.remove_adjacent_dups_loop(V_8, V_9, V_11, V_12)
    else
      list.remove_adjacent_dups_loop(V_8, V_10, V_11, V_13),
      V_12 = list.[V_9 | V_13] : list.list(T_1)
    ).

list.remove_dups(V_3) = V_4 :-
    list.remove_dups(V_3, V_4).

list.remove_dups(V_3, V_4) :-
    V_5 = set_tree234.init,
    list.remove_dups_loop(V_3, V_5, V_4).

list.remove_suffix(V_4, V_5, V_6) :-
    list.length(V_4, V_7),
    list.length(V_5, V_8),
    V_9 = int.(V_7 - V_8),
    list.split_list(V_9, V_4, V_6, V_5).

list.replace_all(V_5, V_6, V_7) = V_8 :-
    list.replace_all(V_5, V_6, V_7, V_8).

list.replace_nth(V_5, V_6, V_7, V_8) :-
    V_9 = 0 : int,
    int.(V_6 > V_9),
    list.replace_nth_loop(V_5, V_6, V_7, V_8).

list.reverse(V_3) = V_4 :-
    list.reverse(V_3, V_4).

list.reverse_prepend(V_4, V_5) = V_6 :-
    list.reverse_prepend(V_4, V_5, V_6).

list.same_length(list.[], list.[]).
list.same_length(list.[V_3 | V_4], list.[V_5 | V_6]) :-
    list.same_length(V_4, V_6).

list.series(V_5, V_6, V_7) = V_8 :-
    V_10 = list.[] : list.list(T_1),
    list.series_acc(V_5, V_6, V_7, V_10, V_9),
    list.reverse(V_9, V_8).

list.series_acc(V_6, V_7, V_8, V_10, V_11) :-
    ( if
      call(V_7, V_6)
    then
      V_12 = list.[V_6 | V_10] : list.list(T_1),
      V_13 = apply(V_8, V_6),
      list.series_acc(V_13, V_7, V_8, V_12, V_11)
    else
      V_11 = V_10
    ).

list.sort(V_3) = V_4 :-
    list.sort(V_3, V_4).

list.sort(V_3, V_4) :-
    V_5 = list.length(V_3),
    list.merge_sort(V_5, V_3, V_4).

list.sort(V_4, V_5) = V_6 :-
    V_7 = (pred(V_11::(builtin.in), V_12::(builtin.in), V_13::(builtin.out)) is det :-
      some [] (
        V_11 = V_14,
        V_12 = V_15,
        V_16 = apply(V_4, V_14, V_15),
        V_13 = V_16
      )
    ) : pred(X_1, X_1, builtin.comparison_result),
    list.sort(V_7, V_5, V_6).

list.sort(V_4, V_5, V_6) :-
    list.length(V_5, V_7),
    ( if
      V_7 = 0 : int
    then
      V_6 = list.[] : list.list(X_1)
    else
      ( if
        list.hosort(V_4, V_7, V_5, V_8, V_9),
        V_9 = list.[] : list.list(X_1)
      then
        V_6 = V_8
      else
        V_10 = "predicate `list.sort\'/3" : string,
        V_11 = "hosort failed" : string,
        require.unexpected(V_10, V_11)
      )
    ).

list.sort_and_remove_dups(V_3) = V_4 :-
    list.sort_and_remove_dups(V_3, V_4).

list.sort_and_remove_dups(V_3, V_4) :-
    V_5 = list.length(V_3),
    list.merge_sort_and_remove_dups(V_5, V_3, V_4).

list.sort_and_remove_dups(V_4, V_5, V_6) :-
    list.sort(V_4, V_5, V_7),
    list.remove_adjacent_dups(V_4, V_7, V_6).

list.tail(list.[V_3 | V_4]) = V_4.

list.take_upto(V_4, V_5) = V_6 :-
    list.take_upto(V_4, V_5, V_6).

list.take_while(V_4, V_5) = V_6 :-
    list.take_while(V_4, V_5, V_6).

list.take_while(V_4, list.[], list.[]).
list.take_while(V_5, list.[V_6 | V_7], V_8) :-
    ( if
      call(V_5, V_6)
    then
      list.take_while(V_5, V_7, V_9),
      V_8 = list.[V_6 | V_9] : list.list(T_1)
    else
      V_8 = list.[] : list.list(T_1)
    ).

list.take_while(V_5, list.[], list.[], list.[]).
list.take_while(V_6, list.[V_7 | V_8], V_9, V_10) :-
    ( if
      call(V_6, V_7)
    then
      V_9 = list.[V_7 | V_11] : list.list(T_1),
      list.take_while(V_6, V_8, V_11, V_10)
    else
      V_9 = list.[] : list.list(T_1),
      V_10 = list.[V_7 | V_8] : list.list(T_1)
    ).

list.zip(V_4, V_5) = V_6 :-
    list.zip(V_4, V_5, V_6).

:- pragma termination_info(list.'++'((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.'..'((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.accumulate_n_copies((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.all_false(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.all_false_corresponding(builtin.in((pred((builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.all_same((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(list.all_same_as((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(list.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.all_true_corresponding(builtin.in((pred((builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.any_false(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.any_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.append((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.append((builtin.di), (builtin.di), (builtin.uo)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.append((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.append((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.append((builtin.in), (builtin.out), (builtin.in)), finite(0, [no, no, no, yes]), cannot_loop).
:- pragma termination_info(list.append((builtin.out), (builtin.out), (builtin.in)), finite(0, [no, no, no, yes]), cannot_loop).
:- pragma termination_info(list.chunk((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.chunk((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.chunk_loop((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.condense((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.condense((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.condense_acc((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.cons((builtin.in), (builtin.in)) = (builtin.out), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.cons((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(list.delete((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.delete((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete((builtin.in), (builtin.out), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete((builtin.out), (builtin.in), (builtin.in)), finite(2, [no, no, yes, yes]), cannot_loop).
:- pragma termination_info(list.delete_all((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete_all((builtin.di), (builtin.in), (builtin.uo)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete_all((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete_elems((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete_elems((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete_first((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.delete_nth((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.det_drop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(list.det_head((builtin.in)) = (builtin.out), finite(-2, [no, yes, no]), can_loop).
:- pragma termination_info(list.det_head_tail((builtin.in), (builtin.out), (builtin.out)), finite(-2, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_index0((builtin.in), (builtin.in)) = (builtin.out), finite(-2, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_index0((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_index0_of_first_occurrence((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(list.det_index1((builtin.in), (builtin.in)) = (builtin.out), finite(-2, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_index1((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_index1_of_first_occurrence((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(list.det_last((builtin.in)) = (builtin.out), finite(-2, [no, yes, no]), can_loop).
:- pragma termination_info(list.det_last((builtin.in), (builtin.out)), finite(-2, [no, yes, no]), can_loop).
:- pragma termination_info(list.det_replace_nth((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, yes, no]), can_loop).
:- pragma termination_info(list.det_replace_nth((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, yes, no]), can_loop).
:- pragma termination_info(list.det_split_last((builtin.in), (builtin.out), (builtin.out)), finite(-2, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_split_list((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(0, [no, no, yes, no, no]), can_loop).
:- pragma termination_info(list.det_tail((builtin.in)) = (builtin.out), finite(-2, [no, yes, no]), can_loop).
:- pragma termination_info(list.det_take((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(list.drop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(list.drop_while(((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.drop_while(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.duplicate((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.duplicate((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter_map(((func((builtin.in)) = (builtin.out) is semidet) >> (func((builtin.in)) = (builtin.out) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.filter_map(builtin.in((pred((builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter_map(builtin.in((pred((builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter_map_corresponding(((func((builtin.in), (builtin.in)) = (builtin.out) is semidet) >> (func((builtin.in), (builtin.in)) = (builtin.out) is semidet)), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.filter_map_corresponding(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter_map_corresponding3(((func((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is semidet) >> (func((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is semidet)), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.filter_map_corresponding3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.filter_map_foldl(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.find_first_map(builtin.in((pred((builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.find_first_map2(builtin.in((pred((builtin.in), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.find_first_map3(builtin.in((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.find_first_match(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.find_index_of_match(((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl2_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl3_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl4_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl7(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl8(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding((builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding(((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldl_corresponding3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.foldr3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.head((builtin.in)) = (builtin.out), finite(-2, [no, yes, no]), cannot_loop).
:- pragma termination_info(list.hosort(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.index0((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.index0_of_first_occurrence((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.index0_of_first_occurrence_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, yes, no]), cannot_loop).
:- pragma termination_info(list.index1((builtin.in), (builtin.in), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.index1_of_first_occurrence((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.insert((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.insert((builtin.in), (builtin.out), (builtin.in)), finite(-2, [no, no, no, yes]), cannot_loop).
:- pragma termination_info(list.insert((builtin.out), (builtin.out), (builtin.in)), finite(-2, [no, no, no, yes]), cannot_loop).
:- pragma termination_info(list.insert((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.inst_preserving_append(builtin.in(list.list_skel((V_2 =< ground))), builtin.in(list.list_skel((V_2 =< ground)))) = builtin.out(list.list_skel((V_2 =< ground))), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.inst_preserving_reverse(builtin.in(list.list_skel((V_2 =< ground)))) = builtin.out(list.list_skel((V_2 =< ground))), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.inst_preserving_reverse_prepend(builtin.in(list.list_skel((V_2 =< ground))), builtin.in(list.list_skel((V_2 =< ground))), builtin.out(list.list_skel((V_2 =< ground)))), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(list.is_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(list.is_not_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(list.last((builtin.in), (builtin.out)), finite(-2, [no, yes, no]), cannot_loop).
:- pragma termination_info(list.length((builtin.in)) = (builtin.out), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(list.length((builtin.in), (builtin.out)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(list.length_acc((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(list.list_to_doc((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.map((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.map(((pred((builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map(((pred((builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map(((pred((builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map(((pred((builtin.in), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map(((pred((builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map(((pred((builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map2(((pred((builtin.in), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2(((pred((builtin.in), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2(((pred((builtin.in), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2(((pred((builtin.in), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2(((pred((builtin.in), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2(((pred((builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map2_foldl4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map3_foldl2(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map4_foldl(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map5(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map5(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map5(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map5(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map5(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map5(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map6(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map6(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map6(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map6(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map6(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map6(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map7(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map7(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map7(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map7(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map7(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map7(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map8(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map8(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map8(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map8(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is multi)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map8(((pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map8(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.map_corresponding(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3((builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3_foldl(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3_foldl(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3_foldl(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3_foldl(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3_foldl(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding3_foldl(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_corresponding_foldl3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is nondet)), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl(((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl2(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl3(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl3(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl3(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl3(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl3(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl3(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl4(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl4(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl4(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl4(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl4(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl4(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl5(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl5(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl5(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl5(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl5(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl5(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl6(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl6(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl6(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldl6(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl6(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldl6(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.map_foldr(((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(list.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(list.member((builtin.out), (builtin.in)), finite(-2, [no, no, yes]), cannot_loop).
:- pragma termination_info(list.member((builtin.out), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(list.member_index0((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.member_index0((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.member_index0((builtin.out), (builtin.in), (builtin.out)), finite(-2, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(list.member_indexes0((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(list.member_indexes0_loop((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(list.merge((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.merge((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.merge((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.merge(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.merge_and_remove_dups((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.merge_and_remove_dups((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.merge_and_remove_dups((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.merge_and_remove_dups(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.merge_sort((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(list.merge_sort_and_remove_dups((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(list.negated_filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.negated_filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.nth_member_lookup((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(list.nth_member_search((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.perm((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(list.remove_adjacent_dups((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(list.remove_adjacent_dups((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(list.remove_adjacent_dups(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.remove_adjacent_dups_loop((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.remove_adjacent_dups_loop(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.remove_dups((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.remove_dups((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.remove_dups_loop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(list.remove_suffix((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.replace((builtin.in), (builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no, no]), cannot_loop).
:- pragma termination_info(list.replace((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, yes, no]), cannot_loop).
:- pragma termination_info(list.replace_all((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(list.replace_all((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(list.replace_first((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, yes, no]), cannot_loop).
:- pragma termination_info(list.replace_nth((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, yes, no]), cannot_loop).
:- pragma termination_info(list.replace_nth_loop((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, yes, no]), cannot_loop).
:- pragma termination_info(list.reverse((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.reverse((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.reverse((builtin.out), (builtin.in)), finite(0, [no, no, yes]), can_loop).
:- pragma termination_info(list.reverse_prepend((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(list.reverse_prepend((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(list.same_length((builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(list.same_length3((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no, no, no]), cannot_loop).
:- pragma termination_info(list.series((builtin.in), ((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), ((func((builtin.in)) = (builtin.out) is det) >> (func((builtin.in)) = (builtin.out) is det))) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.series_acc((builtin.in), ((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), ((func((builtin.in)) = (builtin.out) is det) >> (func((builtin.in)) = (builtin.out) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.sort((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.sort((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.sort((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.sort(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.sort_and_remove_dups((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.sort_and_remove_dups((builtin.in), (builtin.out)), finite(0, [no, yes, no]), can_loop).
:- pragma termination_info(list.sort_and_remove_dups(builtin.in((builtin.comparison_pred)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.split_last((builtin.in), (builtin.out), (builtin.out)), finite(-2, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.split_list((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(0, [no, no, yes, no, no]), cannot_loop).
:- pragma termination_info(list.split_upto((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(0, [no, no, yes, no, no]), can_loop).
:- pragma termination_info(list.sublist((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(list.successive_integers((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.tail((builtin.in)) = (builtin.out), finite(-2, [no, yes, no]), cannot_loop).
:- pragma termination_info(list.take((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(list.take_upto((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(list.take_upto((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(list.take_while(((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(list.take_while(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.take_while(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(list.zip((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(list.zip((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), cannot_loop).

:- pragma exceptions(function, (list.(++)), 2, 0, will_not_throw).
:- pragma exceptions(function, (list.(..)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.accumulate_n_copies), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (list.all_false), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.all_false_corresponding), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.all_same), 1, 0, conditional).
:- pragma exceptions(predicate, (list.all_same_as), 2, 0, conditional).
:- pragma exceptions(predicate, (list.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.all_true_corresponding), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.any_false), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.any_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.append), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.append), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.append), 3, 1, will_not_throw).
:- pragma exceptions(predicate, (list.append), 3, 2, conditional).
:- pragma exceptions(predicate, (list.append), 3, 3, conditional).
:- pragma exceptions(predicate, (list.append), 3, 4, will_not_throw).
:- pragma exceptions(function, (list.chunk), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.chunk), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.chunk_loop), 5, 0, will_not_throw).
:- pragma exceptions(function, (list.condense), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.condense), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.condense_acc), 3, 0, will_not_throw).
:- pragma exceptions(function, (list.cons), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.cons), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.contains), 2, 0, conditional).
:- pragma exceptions(predicate, (list.delete), 3, 0, conditional).
:- pragma exceptions(predicate, (list.delete), 3, 1, conditional).
:- pragma exceptions(predicate, (list.delete), 3, 2, will_not_throw).
:- pragma exceptions(predicate, (list.delete), 3, 3, will_not_throw).
:- pragma exceptions(function, (list.delete_all), 2, 0, conditional).
:- pragma exceptions(predicate, (list.delete_all), 3, 0, conditional).
:- pragma exceptions(predicate, (list.delete_all), 3, 1, conditional).
:- pragma exceptions(function, (list.delete_elems), 2, 0, conditional).
:- pragma exceptions(predicate, (list.delete_elems), 3, 0, conditional).
:- pragma exceptions(predicate, (list.delete_first), 3, 0, conditional).
:- pragma exceptions(predicate, (list.delete_nth), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.det_drop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_head), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_head_tail), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_index0), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_index0), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_index0_of_first_occurrence), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_index1), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_index1), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_index1_of_first_occurrence), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_last), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_last), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_replace_nth), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_replace_nth), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_split_last), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_split_list), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.det_tail), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.det_take), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.drop), 3, 0, will_not_throw).
:- pragma exceptions(function, (list.drop_while), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.drop_while), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.duplicate), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.duplicate), 3, 0, will_not_throw).
:- pragma exceptions(function, (list.filter), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.filter_map), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter_map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter_map), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.filter_map_corresponding), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter_map_corresponding), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.filter_map_corresponding3), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter_map_corresponding3), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.filter_map_foldl), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.find_first_map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.find_first_map2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.find_first_map3), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.find_first_match), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.find_index_of_match), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.foldl), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl), 4, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 11, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2), 6, 12, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding), 7, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl2_corresponding3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3), 8, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding), 9, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding), 9, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding3), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding3), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding3), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding3), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding3), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl3_corresponding3), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4), 10, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding), 11, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding), 11, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding), 11, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding), 11, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding), 11, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding), 11, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding3), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding3), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding3), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding3), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding3), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl4_corresponding3), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl5), 12, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl6), 14, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl7), 16, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl8), 18, 8, may_throw(user_exception)).
:- pragma exceptions(function, (list.foldl_corresponding), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding), 5, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding3), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding3), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding3), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding3), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding3), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldl_corresponding3), 6, 5, may_throw(user_exception)).
:- pragma exceptions(function, (list.foldr), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr), 4, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.foldr3), 8, 7, may_throw(user_exception)).
:- pragma exceptions(function, (list.head), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.hosort), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.index0), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.index0_of_first_occurrence), 3, 0, conditional).
:- pragma exceptions(predicate, (list.index0_of_first_occurrence_2), 4, 0, conditional).
:- pragma exceptions(predicate, (list.index1), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.index1_of_first_occurrence), 3, 0, conditional).
:- pragma exceptions(predicate, (list.insert), 3, 0, conditional).
:- pragma exceptions(predicate, (list.insert), 3, 1, conditional).
:- pragma exceptions(predicate, (list.insert), 3, 2, will_not_throw).
:- pragma exceptions(predicate, (list.insert), 3, 3, will_not_throw).
:- pragma exceptions(function, (list.inst_preserving_append), 2, 0, will_not_throw).
:- pragma exceptions(function, (list.inst_preserving_reverse), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.inst_preserving_reverse_prepend), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.is_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.is_not_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.last), 2, 0, will_not_throw).
:- pragma exceptions(function, (list.length), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.length), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.length_acc), 3, 0, will_not_throw).
:- pragma exceptions(function, (list.list_to_doc), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.map), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map), 3, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map), 3, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map), 3, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map), 3, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl2), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl2), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl2), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl2), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl2), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl2), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl3), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl3), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl3), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl3), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl3), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl3), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl4), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl4), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl4), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl4), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl4), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map2_foldl4), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3), 5, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3), 5, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl), 7, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl2), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl2), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl2), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl2), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl2), 9, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map3_foldl2), 9, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map4_foldl), 8, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map5), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map5), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map5), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map5), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map5), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map5), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map6), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map6), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map6), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map6), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map6), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map6), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map7), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map7), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map7), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map7), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map7), 9, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map7), 9, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map8), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map8), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map8), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map8), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map8), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map8), 10, 5, may_throw(user_exception)).
:- pragma exceptions(function, (list.map_corresponding), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding), 4, 1, may_throw(user_exception)).
:- pragma exceptions(function, (list.map_corresponding3), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3_foldl), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3_foldl), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3_foldl), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3_foldl), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3_foldl), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding3_foldl), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl2), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl2), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl2), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl2), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl2), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl2), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl3), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl3), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl3), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl3), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl3), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_corresponding_foldl3), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl), 5, 11, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl2), 7, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl3), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl3), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl3), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl3), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl3), 9, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl3), 9, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl4), 11, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl4), 11, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl4), 11, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl4), 11, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl4), 11, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl4), 11, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl5), 13, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl5), 13, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl5), 13, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl5), 13, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl5), 13, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl5), 13, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl6), 15, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl6), 15, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl6), 15, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl6), 15, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl6), 15, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldl6), 15, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.map_foldr), 5, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.member), 2, 0, conditional).
:- pragma exceptions(predicate, (list.member), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (list.member), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.member_index0), 3, 0, conditional).
:- pragma exceptions(predicate, (list.member_index0), 3, 1, conditional).
:- pragma exceptions(predicate, (list.member_index0), 3, 2, will_not_throw).
:- pragma exceptions(predicate, (list.member_indexes0), 3, 0, conditional).
:- pragma exceptions(predicate, (list.member_indexes0_loop), 4, 0, conditional).
:- pragma exceptions(function, (list.merge), 2, 0, conditional).
:- pragma exceptions(predicate, (list.merge), 3, 0, conditional).
:- pragma exceptions(function, (list.merge), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.merge), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.merge_and_remove_dups), 2, 0, conditional).
:- pragma exceptions(predicate, (list.merge_and_remove_dups), 3, 0, conditional).
:- pragma exceptions(function, (list.merge_and_remove_dups), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.merge_and_remove_dups), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.merge_sort), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.merge_sort_and_remove_dups), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.negated_filter), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.negated_filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.nth_member_lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.nth_member_search), 3, 0, conditional).
:- pragma exceptions(predicate, (list.perm), 2, 0, will_not_throw).
:- pragma exceptions(function, (list.remove_adjacent_dups), 1, 0, conditional).
:- pragma exceptions(predicate, (list.remove_adjacent_dups), 2, 0, conditional).
:- pragma exceptions(predicate, (list.remove_adjacent_dups), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.remove_adjacent_dups_loop), 3, 0, conditional).
:- pragma exceptions(predicate, (list.remove_adjacent_dups_loop), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.remove_dups), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.remove_dups), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.remove_dups_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.remove_suffix), 3, 0, conditional).
:- pragma exceptions(predicate, (list.replace), 4, 0, conditional).
:- pragma exceptions(predicate, (list.replace), 4, 1, conditional).
:- pragma exceptions(function, (list.replace_all), 3, 0, conditional).
:- pragma exceptions(predicate, (list.replace_all), 4, 0, conditional).
:- pragma exceptions(predicate, (list.replace_first), 4, 0, conditional).
:- pragma exceptions(predicate, (list.replace_nth), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (list.replace_nth_loop), 4, 0, will_not_throw).
:- pragma exceptions(function, (list.reverse), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.reverse), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.reverse), 2, 1, will_not_throw).
:- pragma exceptions(function, (list.reverse_prepend), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.reverse_prepend), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.same_length), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.same_length3), 3, 0, will_not_throw).
:- pragma exceptions(function, (list.series), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.series_acc), 5, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.sort), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.sort), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.sort), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.sort), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.sort_and_remove_dups), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.sort_and_remove_dups), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.sort_and_remove_dups), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.split_last), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (list.split_list), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (list.split_upto), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.sublist), 2, 0, conditional).
:- pragma exceptions(predicate, (list.successive_integers), 4, 0, will_not_throw).
:- pragma exceptions(function, (list.tail), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (list.take), 3, 0, will_not_throw).
:- pragma exceptions(function, (list.take_upto), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.take_upto), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.take_while), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.take_while), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (list.take_while), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (list.zip), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (list.zip), 3, 0, will_not_throw).
