:- module fat_sparse_bitset.
:- use_module builtin.
:- use_module enum.
:- use_module int.
:- use_module list.
:- use_module private_builtin.
:- use_module require.
:- use_module set.
:- use_module term.
:- use_module uint.

:- type bitset_elems
    --->    bitset_nil 
    ;       bitset_cons((fat_sparse_bitset.offset) :: int, (fat_sparse_bitset.bits) :: uint, (fat_sparse_bitset.tail) :: fat_sparse_bitset.bitset_elems).
:- type fat_sparse_bitset(T)
    --->    fat_sparse_bitset(fat_sparse_bitset.bitset_elems).

:- pred fat_sparse_bitset.all_true_bits((pred T_1), int, uint, int) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.all_true_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)) is semidet.
:- pragma type_spec((fat_sparse_bitset.all_true_bits)/4, (T_1 = term.var(V_2)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__all_true_bits__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.all_true_bits)/4, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__all_true_bits__[T = int]')).
:- pred fat_sparse_bitset.all_true_node((pred T_1), fat_sparse_bitset.bitset_elems) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.all_true_node(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) is semidet.
:- pragma type_spec((fat_sparse_bitset.all_true_node)/2, (T_1 = term.var(V_2)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__all_true_node__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.all_true_node)/2, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__all_true_node__[T = int]')).
:- pred fat_sparse_bitset.contains_search_nodes(fat_sparse_bitset.bitset_elems, int).
:- mode fat_sparse_bitset.contains_search_nodes((builtin.in), (builtin.in)) is semidet.
:- func fat_sparse_bitset.difference_loop(fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems) = fat_sparse_bitset.bitset_elems.
:- mode fat_sparse_bitset.difference_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pred fat_sparse_bitset.divide_bits((pred T_1), int, int, uint, int, uint, uint, uint, uint) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.divide_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred fat_sparse_bitset.divide_nodes((pred T_1), fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.divide_nodes(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred fat_sparse_bitset.do_foldl2_pred(pred(T_1, U_2, U_2, V_3, V_3), fat_sparse_bitset.bitset_elems, U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.do_foldl2_pred)/6, (T_1 = term.var(V_4)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldl2_pred__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.do_foldl2_pred)/6, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldl2_pred__[T = int]')).
:- pred fat_sparse_bitset.do_foldl_pred(pred(T_1, U_2, U_2), fat_sparse_bitset.bitset_elems, U_2, U_2) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- mode fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.do_foldl_pred)/4, (T_1 = term.var(V_3)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldl_pred__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.do_foldl_pred)/4, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldl_pred__[T = int]')).
:- pred fat_sparse_bitset.do_foldr2_pred(pred(T_1, U_2, U_2, V_3, V_3), fat_sparse_bitset.bitset_elems, U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.do_foldr2_pred)/6, (T_1 = term.var(V_4)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldr2_pred__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.do_foldr2_pred)/6, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldr2_pred__[T = int]')).
:- pred fat_sparse_bitset.do_foldr_pred(pred(T_1, U_2, U_2), fat_sparse_bitset.bitset_elems, U_2, U_2) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.do_foldr_pred)/4, (T_1 = term.var(V_3)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldr_pred__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.do_foldr_pred)/4, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__do_foldr_pred__[T = int]')).
:- pred fat_sparse_bitset.fold2_bits_high_to_low(pred(T_1, U_2, U_2, V_3, V_3), int, uint, int, U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.fold2_bits_high_to_low)/8, (T_1 = term.var(V_4)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold2_bits_high_to_low__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.fold2_bits_high_to_low)/8, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold2_bits_high_to_low__[T = int]')).
:- pred fat_sparse_bitset.fold2_bits_low_to_high(pred(T_1, U_2, U_2, V_3, V_3), int, uint, int, U_2, U_2, V_3, V_3) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.fold2_bits_low_to_high)/8, (T_1 = term.var(V_4)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold2_bits_low_to_high__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.fold2_bits_low_to_high)/8, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold2_bits_low_to_high__[T = int]')).
:- pred fat_sparse_bitset.fold_bits_high_to_low(pred(T_1, U_2, U_2), int, uint, int, U_2, U_2) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.fold_bits_high_to_low)/6, (T_1 = term.var(V_3)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold_bits_high_to_low__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.fold_bits_high_to_low)/6, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold_bits_high_to_low__[T = int]')).
:- pred fat_sparse_bitset.fold_bits_low_to_high(pred(T_1, U_2, U_2), int, uint, int, U_2, U_2) <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec((fat_sparse_bitset.fold_bits_low_to_high)/6, (T_1 = term.var(V_3)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold_bits_low_to_high__[T = var(V_2)]')).
:- pragma type_spec((fat_sparse_bitset.fold_bits_low_to_high)/6, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__fold_bits_low_to_high__[T = int]')).
:- pred fat_sparse_bitset.insert_loop(int, fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems).
:- mode fat_sparse_bitset.insert_loop((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred fat_sparse_bitset.insert_new_loop(int, fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems).
:- mode fat_sparse_bitset.insert_new_loop((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred fat_sparse_bitset.intersect_list_passes(fat_sparse_bitset.fat_sparse_bitset(T_1), list.list(fat_sparse_bitset.fat_sparse_bitset(T_1)), fat_sparse_bitset.fat_sparse_bitset(T_1)).
:- mode fat_sparse_bitset.intersect_list_passes((builtin.in), (builtin.in), (builtin.out)) is det.
:- func fat_sparse_bitset.intersect_loop(fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems) = fat_sparse_bitset.bitset_elems.
:- mode fat_sparse_bitset.intersect_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- func fat_sparse_bitset.list_to_set_passes(list.list(T_1), fat_sparse_bitset.bitset_elems) = fat_sparse_bitset.bitset_elems <= (enum.enum(T_1)).
:- mode fat_sparse_bitset.list_to_set_passes((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pragma type_spec((fat_sparse_bitset.list_to_set_passes)/2, (T_1 = int), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__list_to_set_passes__[T = int]')).
:- pragma type_spec((fat_sparse_bitset.list_to_set_passes)/2, (T_1 = term.var(V_2)), (fat_sparse_bitset.'TypeSpecOf__pred_or_func__list_to_set_passes__[T = var(V_2)]')).
:- func fat_sparse_bitset.make_bitset_cons(int, uint, fat_sparse_bitset.bitset_elems) = fat_sparse_bitset.bitset_elems.
:- mode fat_sparse_bitset.make_bitset_cons((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det.
:- pragma inline((fat_sparse_bitset.make_bitset_cons)/3).
:- func fat_sparse_bitset.mask(int) = uint.
:- mode fat_sparse_bitset.mask((builtin.in)) = (builtin.out) is det.
:- pragma inline((fat_sparse_bitset.mask)/1).
:- func fat_sparse_bitset.remove_gt_loop(fat_sparse_bitset.bitset_elems, int) = fat_sparse_bitset.bitset_elems.
:- mode fat_sparse_bitset.remove_gt_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- func fat_sparse_bitset.remove_leq_loop(fat_sparse_bitset.bitset_elems, int) = fat_sparse_bitset.bitset_elems.
:- mode fat_sparse_bitset.remove_leq_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pred fat_sparse_bitset.union_list_passes(fat_sparse_bitset.fat_sparse_bitset(T_1), list.list(fat_sparse_bitset.fat_sparse_bitset(T_1)), fat_sparse_bitset.fat_sparse_bitset(T_1)).
:- mode fat_sparse_bitset.union_list_passes((builtin.in), (builtin.in), (builtin.out)) is det.
:- func fat_sparse_bitset.union_loop(fat_sparse_bitset.bitset_elems, fat_sparse_bitset.bitset_elems) = fat_sparse_bitset.bitset_elems.
:- mode fat_sparse_bitset.union_loop((builtin.in), (builtin.in)) = (builtin.out) is det.

fat_sparse_bitset.all_true(V_3, fat_sparse_bitset.fat_sparse_bitset(V_4)) :-
    fat_sparse_bitset.all_true_node(V_3, V_4).

fat_sparse_bitset.all_true_bits(V_5, V_6, V_7, V_8) :-
    ( if
      V_7 = 0u : uint
    then
      true
    else
      ( if
        V_8 = 1 : int
      then
        V_9 = enum.det_from_int(V_6),
        call(V_5, V_9)
      else
        V_10 = int.unchecked_right_shift(V_8, V_14),
        V_14 = 1 : int,
        V_11 = fat_sparse_bitset.mask(V_10),
        V_12 = uint.(V_11 /\ V_7),
        V_13 = uint.(V_11 /\ V_15),
        V_15 = uint.unchecked_right_shift(V_7, V_10),
        fat_sparse_bitset.all_true_bits(V_5, V_6, V_12, V_10),
        V_16 = int.(V_6 + V_10),
        fat_sparse_bitset.all_true_bits(V_5, V_16, V_13, V_10)
      )
    ).

fat_sparse_bitset.all_true_node(V_3, fat_sparse_bitset.bitset_nil).
fat_sparse_bitset.all_true_node(V_4, fat_sparse_bitset.bitset_cons(V_5, V_6, V_7)) :-
    V_8 = int.bits_per_int,
    fat_sparse_bitset.all_true_bits(V_4, V_5, V_6, V_8),
    fat_sparse_bitset.all_true_node(V_4, V_7).

fat_sparse_bitset.contains(fat_sparse_bitset.fat_sparse_bitset(V_3), V_4) :-
    V_5 = enum.to_int(V_4),
    fat_sparse_bitset.contains_search_nodes(V_3, V_5).

fat_sparse_bitset.count(V_3) = V_2 :-
    V_2 = fat_sparse_bitset.foldl(V_6, V_3, V_11),
    V_6 = (func(V_7::(builtin.in), V_8::(builtin.in)) = (V_9::(builtin.out)) is det :-
      some [] (
        V_7 = V_12,
        V_8 = V_14,
        V_9 = int.(V_14 + V_10),
        V_10 = 1 : int
      )
    ) : (func(T_1, int) = int),
    V_11 = 0 : int.

fat_sparse_bitset.delete(V_4, V_6, V_7) :-
    V_7 = fat_sparse_bitset.delete(V_6, V_4).

fat_sparse_bitset.delete(V_4, V_5) = V_3 :-
    V_3 = fat_sparse_bitset.difference(V_4, V_6),
    V_6 = fat_sparse_bitset.insert(V_7, V_5),
    V_7 = fat_sparse_bitset.init.

fat_sparse_bitset.delete_list(V_4, V_6, V_7) :-
    V_7 = fat_sparse_bitset.delete_list(V_6, V_4).

fat_sparse_bitset.delete_list(V_4, V_5) = V_3 :-
    V_3 = fat_sparse_bitset.difference(V_4, V_6),
    V_6 = fat_sparse_bitset.list_to_set(V_5).

fat_sparse_bitset.difference(V_4, V_5, V_3) :-
    V_3 = fat_sparse_bitset.difference(V_4, V_5).

fat_sparse_bitset.difference(fat_sparse_bitset.fat_sparse_bitset(V_4), fat_sparse_bitset.fat_sparse_bitset(V_5)) = fat_sparse_bitset.fat_sparse_bitset(V_6) :-
    V_6 = fat_sparse_bitset.difference_loop(V_4, V_5).

fat_sparse_bitset.divide(V_5, V_6, V_7, V_8) :-
    V_6 = fat_sparse_bitset.fat_sparse_bitset(V_9) : fat_sparse_bitset.fat_sparse_bitset(T_1),
    fat_sparse_bitset.divide_nodes(V_5, V_9, V_10, V_11),
    V_7 = fat_sparse_bitset.fat_sparse_bitset(V_10) : fat_sparse_bitset.fat_sparse_bitset(T_1),
    V_8 = fat_sparse_bitset.fat_sparse_bitset(V_11) : fat_sparse_bitset.fat_sparse_bitset(T_1).

fat_sparse_bitset.divide_bits(V_10, V_11, V_12, V_13, V_14, V_23, V_24, V_25, V_26) :-
    ( if
      V_13 = 0u : uint
    then
      V_26 = V_25,
      V_24 = V_23
    else
      ( if
        V_14 = 1 : int
      then
        V_17 = enum.det_from_int(V_27),
        V_27 = int.(V_11 + V_12),
        V_18 = uint.unchecked_left_shift(V_28, V_12),
        V_28 = 1u : uint,
        ( if
          call(V_10, V_17)
        then
          V_24 = uint.(V_23 \/ V_18),
          V_26 = V_25
        else
          V_26 = uint.(V_25 \/ V_18),
          V_24 = V_23
        )
      else
        V_19 = int.unchecked_right_shift(V_14, V_31),
        V_31 = 1 : int,
        V_20 = fat_sparse_bitset.mask(V_19),
        V_21 = uint.(V_20 /\ V_13),
        V_22 = uint.(V_20 /\ V_32),
        V_32 = uint.unchecked_right_shift(V_13, V_19),
        fat_sparse_bitset.divide_bits(V_10, V_11, V_12, V_21, V_19, V_23, V_33, V_25, V_34),
        V_35 = int.(V_12 + V_19),
        fat_sparse_bitset.divide_bits(V_10, V_11, V_35, V_22, V_19, V_33, V_24, V_34, V_26)
      )
    ).

fat_sparse_bitset.divide_nodes(V_5, fat_sparse_bitset.bitset_nil, fat_sparse_bitset.bitset_nil, fat_sparse_bitset.bitset_nil).
fat_sparse_bitset.divide_nodes(V_6, fat_sparse_bitset.bitset_cons(V_7, V_8, V_9), V_10, V_11) :-
    fat_sparse_bitset.divide_nodes(V_6, V_9, V_12, V_13),
    V_16 = 0 : int,
    V_17 = int.bits_per_int,
    V_18 = 0u : uint,
    V_19 = 0u : uint,
    fat_sparse_bitset.divide_bits(V_6, V_7, V_16, V_8, V_17, V_18, V_14, V_19, V_15),
    ( if
      V_14 = 0u : uint
    then
      V_10 = V_12
    else
      V_10 = fat_sparse_bitset.make_bitset_cons(V_7, V_14, V_12)
    ),
    ( if
      V_15 = 0u : uint
    then
      V_11 = V_13
    else
      V_11 = fat_sparse_bitset.make_bitset_cons(V_7, V_15, V_13)
    ).

fat_sparse_bitset.do_foldl2_pred(V_7, fat_sparse_bitset.bitset_nil, V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
fat_sparse_bitset.do_foldl2_pred(V_14, fat_sparse_bitset.bitset_cons(V_15, V_16, V_17), V_20, V_21, V_22, V_23) :-
    V_24 = int.bits_per_int,
    fat_sparse_bitset.fold2_bits_low_to_high(V_14, V_15, V_16, V_24, V_20, V_25, V_22, V_26),
    fat_sparse_bitset.do_foldl2_pred(V_14, V_17, V_25, V_21, V_26, V_23).

fat_sparse_bitset.do_foldl_pred(V_5, fat_sparse_bitset.bitset_nil, V_7, V_8) :-
    V_8 = V_7.
fat_sparse_bitset.do_foldl_pred(V_9, fat_sparse_bitset.bitset_cons(V_10, V_11, V_12), V_14, V_15) :-
    V_16 = int.bits_per_int,
    fat_sparse_bitset.fold_bits_low_to_high(V_9, V_10, V_11, V_16, V_14, V_17),
    fat_sparse_bitset.do_foldl_pred(V_9, V_12, V_17, V_15).

fat_sparse_bitset.do_foldr2_pred(V_7, fat_sparse_bitset.bitset_nil, V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
fat_sparse_bitset.do_foldr2_pred(V_14, fat_sparse_bitset.bitset_cons(V_15, V_16, V_17), V_20, V_21, V_22, V_23) :-
    fat_sparse_bitset.do_foldr2_pred(V_14, V_17, V_20, V_24, V_22, V_25),
    V_26 = int.bits_per_int,
    fat_sparse_bitset.fold2_bits_high_to_low(V_14, V_15, V_16, V_26, V_24, V_21, V_25, V_23).

fat_sparse_bitset.do_foldr_pred(V_5, fat_sparse_bitset.bitset_nil, V_7, V_8) :-
    V_8 = V_7.
fat_sparse_bitset.do_foldr_pred(V_9, fat_sparse_bitset.bitset_cons(V_10, V_11, V_12), V_14, V_15) :-
    fat_sparse_bitset.do_foldr_pred(V_9, V_12, V_14, V_16),
    V_17 = int.bits_per_int,
    fat_sparse_bitset.fold_bits_high_to_low(V_9, V_10, V_11, V_17, V_16, V_15).

fat_sparse_bitset.empty(fat_sparse_bitset.fat_sparse_bitset(V_2)) :-
    V_2 = fat_sparse_bitset.bitset_nil : fat_sparse_bitset.bitset_elems.

fat_sparse_bitset.equal(V_3, V_3).

fat_sparse_bitset.filter(V_4, V_5) = V_6 :-
    V_7 = fat_sparse_bitset.to_sorted_list(V_5),
    V_8 = list.filter(V_4, V_7),
    V_6 = fat_sparse_bitset.sorted_list_to_set(V_8).

fat_sparse_bitset.filter(V_5, V_6, V_7, V_8) :-
    V_9 = fat_sparse_bitset.to_sorted_list(V_6),
    list.filter(V_5, V_9, V_10, V_11),
    V_7 = fat_sparse_bitset.sorted_list_to_set(V_10),
    V_8 = fat_sparse_bitset.sorted_list_to_set(V_11).

fat_sparse_bitset.fold2_bits_high_to_low(V_9, V_10, V_11, V_12, V_20, V_21, V_22, V_23) :-
    ( if
      V_11 = 0u : uint
    then
      V_23 = V_22,
      V_21 = V_20
    else
      ( if
        V_12 = 1 : int
      then
        V_15 = enum.det_from_int(V_10),
        call(V_9, V_15, V_20, V_21, V_22, V_23)
      else
        V_16 = int.unchecked_right_shift(V_12, V_26),
        V_26 = 1 : int,
        V_17 = fat_sparse_bitset.mask(V_16),
        V_18 = uint.(V_17 /\ V_11),
        V_19 = uint.(V_17 /\ V_27),
        V_27 = uint.unchecked_right_shift(V_11, V_16),
        V_28 = int.(V_10 + V_16),
        fat_sparse_bitset.fold2_bits_high_to_low(V_9, V_28, V_19, V_16, V_20, V_29, V_22, V_30),
        fat_sparse_bitset.fold2_bits_high_to_low(V_9, V_10, V_18, V_16, V_29, V_21, V_30, V_23)
      )
    ).

fat_sparse_bitset.fold2_bits_low_to_high(V_9, V_10, V_11, V_12, V_20, V_21, V_22, V_23) :-
    ( if
      V_11 = 0u : uint
    then
      V_23 = V_22,
      V_21 = V_20
    else
      ( if
        V_12 = 1 : int
      then
        V_15 = enum.det_from_int(V_10),
        call(V_9, V_15, V_20, V_21, V_22, V_23)
      else
        V_16 = int.unchecked_right_shift(V_12, V_26),
        V_26 = 1 : int,
        V_17 = fat_sparse_bitset.mask(V_16),
        V_18 = uint.(V_17 /\ V_11),
        V_19 = uint.(V_17 /\ V_27),
        V_27 = uint.unchecked_right_shift(V_11, V_16),
        fat_sparse_bitset.fold2_bits_low_to_high(V_9, V_10, V_18, V_16, V_20, V_28, V_22, V_29),
        V_30 = int.(V_10 + V_16),
        fat_sparse_bitset.fold2_bits_low_to_high(V_9, V_30, V_19, V_16, V_28, V_21, V_29, V_23)
      )
    ).

fat_sparse_bitset.fold_bits_high_to_low(V_7, V_8, V_9, V_10, V_17, V_18) :-
    ( if
      V_9 = 0u : uint
    then
      V_18 = V_17
    else
      ( if
        V_10 = 1 : int
      then
        V_12 = enum.det_from_int(V_8),
        call(V_7, V_12, V_17, V_18)
      else
        V_13 = int.unchecked_right_shift(V_10, V_20),
        V_20 = 1 : int,
        V_14 = fat_sparse_bitset.mask(V_13),
        V_15 = uint.(V_14 /\ V_9),
        V_16 = uint.(V_14 /\ V_21),
        V_21 = uint.unchecked_right_shift(V_9, V_13),
        V_22 = int.(V_8 + V_13),
        fat_sparse_bitset.fold_bits_high_to_low(V_7, V_22, V_16, V_13, V_17, V_23),
        fat_sparse_bitset.fold_bits_high_to_low(V_7, V_8, V_15, V_13, V_23, V_18)
      )
    ).

fat_sparse_bitset.fold_bits_low_to_high(V_7, V_8, V_9, V_10, V_17, V_18) :-
    ( if
      V_9 = 0u : uint
    then
      V_18 = V_17
    else
      ( if
        V_10 = 1 : int
      then
        V_12 = enum.det_from_int(V_8),
        call(V_7, V_12, V_17, V_18)
      else
        V_13 = int.unchecked_right_shift(V_10, V_20),
        V_20 = 1 : int,
        V_14 = fat_sparse_bitset.mask(V_13),
        V_15 = uint.(V_14 /\ V_9),
        V_16 = uint.(V_14 /\ V_21),
        V_21 = uint.unchecked_right_shift(V_9, V_13),
        fat_sparse_bitset.fold_bits_low_to_high(V_7, V_8, V_15, V_13, V_17, V_22),
        V_23 = int.(V_8 + V_13),
        fat_sparse_bitset.fold_bits_low_to_high(V_7, V_23, V_16, V_13, V_22, V_18)
      )
    ).

fat_sparse_bitset.foldl(V_5, fat_sparse_bitset.fat_sparse_bitset(V_6), V_8, V_9) :-
    fat_sparse_bitset.do_foldl_pred(V_5, V_6, V_8, V_9).

fat_sparse_bitset.foldl(V_5, fat_sparse_bitset.fat_sparse_bitset(V_6), V_7) = V_8 :-
    V_12 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(T_1, U_2, U_2),
    fat_sparse_bitset.do_foldl_pred(V_12, V_6, V_7, V_8).

fat_sparse_bitset.foldl2(V_7, fat_sparse_bitset.fat_sparse_bitset(V_8), V_11, V_12, V_13, V_14) :-
    fat_sparse_bitset.do_foldl2_pred(V_7, V_8, V_11, V_12, V_13, V_14).

fat_sparse_bitset.foldr(V_5, fat_sparse_bitset.fat_sparse_bitset(V_6), V_8, V_9) :-
    fat_sparse_bitset.do_foldr_pred(V_5, V_6, V_8, V_9).

fat_sparse_bitset.foldr(V_5, fat_sparse_bitset.fat_sparse_bitset(V_6), V_7) = V_8 :-
    V_12 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(T_1, U_2, U_2),
    fat_sparse_bitset.do_foldr_pred(V_12, V_6, V_7, V_8).

fat_sparse_bitset.foldr2(V_7, fat_sparse_bitset.fat_sparse_bitset(V_8), V_11, V_12, V_13, V_14) :-
    fat_sparse_bitset.do_foldr2_pred(V_7, V_8, V_11, V_12, V_13, V_14).

fat_sparse_bitset.from_set(V_3) = V_2 :-
    V_2 = fat_sparse_bitset.sorted_list_to_set(V_4),
    V_4 = set.to_sorted_list(V_3).

fat_sparse_bitset.init(fat_sparse_bitset.fat_sparse_bitset(V_2)) :-
    V_2 = fat_sparse_bitset.bitset_nil : fat_sparse_bitset.bitset_elems.

fat_sparse_bitset.init = fat_sparse_bitset.fat_sparse_bitset(V_2) :-
    V_2 = fat_sparse_bitset.bitset_nil : fat_sparse_bitset.bitset_elems.

fat_sparse_bitset.insert(V_4, V_7, V_8) :-
    V_7 = fat_sparse_bitset.fat_sparse_bitset(V_6) : fat_sparse_bitset.fat_sparse_bitset(T_1),
    V_9 = enum.to_int(V_4),
    fat_sparse_bitset.insert_loop(V_9, V_6, V_5),
    V_8 = fat_sparse_bitset.fat_sparse_bitset(V_5) : fat_sparse_bitset.fat_sparse_bitset(T_1).

fat_sparse_bitset.insert(V_4, V_5) = V_6 :-
    fat_sparse_bitset.insert(V_5, V_4, V_6).

fat_sparse_bitset.insert_list(V_4, V_5, V_6) :-
    V_7 = fat_sparse_bitset.list_to_set(V_4),
    fat_sparse_bitset.union(V_7, V_5, V_6).

fat_sparse_bitset.insert_list(V_4, V_5) = V_6 :-
    fat_sparse_bitset.insert_list(V_5, V_4, V_6).

fat_sparse_bitset.insert_new(V_4, V_7, V_8) :-
    V_7 = fat_sparse_bitset.fat_sparse_bitset(V_6) : fat_sparse_bitset.fat_sparse_bitset(T_1),
    V_9 = enum.to_int(V_4),
    fat_sparse_bitset.insert_new_loop(V_9, V_6, V_5),
    V_8 = fat_sparse_bitset.fat_sparse_bitset(V_5) : fat_sparse_bitset.fat_sparse_bitset(T_1).

fat_sparse_bitset.intersect(V_4, V_5, V_3) :-
    V_3 = fat_sparse_bitset.intersect(V_4, V_5).

fat_sparse_bitset.intersect(fat_sparse_bitset.fat_sparse_bitset(V_4), fat_sparse_bitset.fat_sparse_bitset(V_5)) = fat_sparse_bitset.fat_sparse_bitset(V_6) :-
    V_6 = fat_sparse_bitset.intersect_loop(V_4, V_5).

fat_sparse_bitset.intersect_list(list.[], V_2) :-
    V_2 = fat_sparse_bitset.init.
fat_sparse_bitset.intersect_list(list.[V_3 | V_4], V_5) :-
    fat_sparse_bitset.intersect_list_passes(V_3, V_4, V_5).

fat_sparse_bitset.intersect_list(V_3) = V_4 :-
    fat_sparse_bitset.intersect_list(V_3, V_4).

fat_sparse_bitset.is_empty(fat_sparse_bitset.fat_sparse_bitset(V_2)) :-
    V_2 = fat_sparse_bitset.bitset_nil : fat_sparse_bitset.bitset_elems.

fat_sparse_bitset.is_non_empty(fat_sparse_bitset.fat_sparse_bitset(V_5)) :-
    V_5 = fat_sparse_bitset.bitset_cons(V_2, V_3, V_4) : fat_sparse_bitset.bitset_elems.

fat_sparse_bitset.list_to_set(V_3, V_2) :-
    V_2 = fat_sparse_bitset.list_to_set(V_3).

fat_sparse_bitset.list_to_set(V_3) = fat_sparse_bitset.fat_sparse_bitset(V_4) :-
    V_4 = fat_sparse_bitset.list_to_set_passes(V_3, V_5),
    V_5 = fat_sparse_bitset.bitset_nil : fat_sparse_bitset.bitset_elems.

:- pragma inline((fat_sparse_bitset.make_bitset_cons)/3).
fat_sparse_bitset.make_bitset_cons(V_5, V_6, V_7) = fat_sparse_bitset.bitset_cons(V_5, V_6, V_7).

fat_sparse_bitset.make_singleton_set(V_3) = V_2 :-
    V_2 = fat_sparse_bitset.insert(V_4, V_3),
    V_4 = fat_sparse_bitset.init.

:- pragma inline((fat_sparse_bitset.mask)/1).
fat_sparse_bitset.mask(V_3) = V_2 :-
    V_2 = uint.(\ V_4),
    V_4 = uint.unchecked_left_shift(V_5, V_3),
    V_5 = uint.(\ V_6),
    V_6 = 0u : uint.

fat_sparse_bitset.remove(V_4, V_6, V_7) :-
    fat_sparse_bitset.contains(V_6, V_4),
    V_7 = fat_sparse_bitset.delete(V_6, V_4).

fat_sparse_bitset.remove_gt(V_4, V_6, V_7) :-
    V_7 = fat_sparse_bitset.remove_gt(V_6, V_4).

fat_sparse_bitset.remove_gt(fat_sparse_bitset.fat_sparse_bitset(V_4), V_5) = fat_sparse_bitset.fat_sparse_bitset(V_6) :-
    V_6 = fat_sparse_bitset.remove_gt_loop(V_4, V_7),
    V_7 = enum.to_int(V_5).

fat_sparse_bitset.remove_leq(V_4, V_6, V_7) :-
    V_7 = fat_sparse_bitset.remove_leq(V_6, V_4).

fat_sparse_bitset.remove_leq(fat_sparse_bitset.fat_sparse_bitset(V_4), V_5) = fat_sparse_bitset.fat_sparse_bitset(V_6) :-
    V_6 = fat_sparse_bitset.remove_leq_loop(V_4, V_7),
    V_7 = enum.to_int(V_5).

fat_sparse_bitset.remove_list(V_4, V_7, V_8) :-
    fat_sparse_bitset.list_to_set(V_4, V_6),
    fat_sparse_bitset.subset(V_6, V_7),
    V_8 = fat_sparse_bitset.difference(V_7, V_6).

fat_sparse_bitset.singleton_set(V_1, V_3) :-
    V_1 = fat_sparse_bitset.make_singleton_set(V_3).

fat_sparse_bitset.sorted_list_to_set(V_3, V_2) :-
    V_2 = fat_sparse_bitset.sorted_list_to_set(V_3).

fat_sparse_bitset.subset(V_3, V_4) :-
    V_5 = V_3,
    fat_sparse_bitset.intersect(V_4, V_3, V_5).

fat_sparse_bitset.superset(V_3, V_4) :-
    fat_sparse_bitset.subset(V_4, V_3).

fat_sparse_bitset.to_set(V_3) = V_2 :-
    V_2 = set.sorted_list_to_set(V_4),
    V_4 = fat_sparse_bitset.to_sorted_list(V_3).

fat_sparse_bitset.to_sorted_list(V_3, V_2) :-
    V_2 = fat_sparse_bitset.to_sorted_list(V_3).

fat_sparse_bitset.to_sorted_list(V_3) = V_2 :-
    V_2 = fat_sparse_bitset.foldr(V_6, V_3, V_10),
    V_6 = (func(V_7::(builtin.in), V_8::(builtin.in)) = (V_9::(builtin.out)) is det :-
      some [] (
        V_7 = V_11,
        V_8 = V_12,
        V_9 = list.[V_11 | V_12] : list.list(T_1)
      )
    ) : (func(T_1, list.list(T_1)) = list.list(T_1)),
    V_10 = list.[] : list.list(T_1).

fat_sparse_bitset.union(V_4, V_5, V_3) :-
    V_3 = fat_sparse_bitset.union(V_4, V_5).

fat_sparse_bitset.union(fat_sparse_bitset.fat_sparse_bitset(V_4), fat_sparse_bitset.fat_sparse_bitset(V_5)) = fat_sparse_bitset.fat_sparse_bitset(V_6) :-
    V_6 = fat_sparse_bitset.union_loop(V_4, V_5).

fat_sparse_bitset.union_list(list.[], V_2) :-
    V_2 = fat_sparse_bitset.init.
fat_sparse_bitset.union_list(list.[V_3 | V_4], V_5) :-
    fat_sparse_bitset.union_list_passes(V_3, V_4, V_5).

fat_sparse_bitset.union_list(V_3) = V_4 :-
    fat_sparse_bitset.union_list(V_3, V_4).

:- pragma termination_info(fat_sparse_bitset.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.all_true_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.all_true_node(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.contains_search_nodes((builtin.in), (builtin.in)), finite(0, [no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.count((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.delete((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.delete((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.delete_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.delete_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.difference((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.difference((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.difference_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.divide_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.divide_nodes(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr2_pred((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.empty((builtin.out)), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold2_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_high_to_low((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.fold_bits_low_to_high((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldl2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.from_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.init((builtin.out)), finite(1, [no, no]), cannot_loop).
:- pragma termination_info((fat_sparse_bitset.init) = (builtin.out), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.insert((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.insert((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.insert_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.insert_loop((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.insert_new((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.insert_new_loop((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.intersect((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.intersect((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.intersect_list((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.intersect_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.intersect_list_passes((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.intersect_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.is_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.is_non_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.is_singleton((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.list_to_set_passes((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.make_bitset_cons((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), finite(3, [yes, yes, yes, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.make_singleton_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.mask((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.member((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.remove((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_gt((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_gt((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_gt_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_least((builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_leq((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_leq((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_leq_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.remove_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.singleton_set((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.sorted_list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.sorted_list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.to_sorted_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.to_sorted_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(fat_sparse_bitset.union((builtin.in), (builtin.in), (builtin.out)), finite(-1, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.union((builtin.in), (builtin.in)) = (builtin.out), finite(-1, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(fat_sparse_bitset.union_list((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.union_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.union_list_passes((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(fat_sparse_bitset.union_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, yes, no]), cannot_loop).

:- pragma exceptions(predicate, (fat_sparse_bitset.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.all_true_bits), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.all_true_node), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.contains), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.contains_search_nodes), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.count), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.difference), 3, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.difference), 3, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.difference_loop), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.divide), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.divide_bits), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.divide_by_set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.divide_nodes), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl2_pred), 6, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldl_pred), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr2_pred), 6, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.do_foldr_pred), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.empty), 1, 1, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.equal), 2, 0, may_throw(type_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_high_to_low), 8, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold2_bits_low_to_high), 8, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_high_to_low), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.fold_bits_low_to_high), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl), 4, 8, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldl2), 6, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr), 4, 8, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.foldr2), 6, 10, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.from_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.init), 1, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.init), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.insert), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.insert), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.insert_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.insert_new), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.insert_new_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.intersect), 3, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.intersect), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.intersect_list), 2, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.intersect_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.intersect_list_passes), 3, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.intersect_loop), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.is_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.is_non_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.is_singleton), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.list_to_set_passes), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.make_bitset_cons), 4, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.make_singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.mask), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.member), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.member), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.remove_gt), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.remove_gt), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.remove_gt_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.remove_least), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.remove_leq), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.remove_leq), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.remove_leq_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.subset), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.superset), 2, 0, may_throw(type_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (fat_sparse_bitset.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (fat_sparse_bitset.union), 3, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.union), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.union_list), 2, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.union_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (fat_sparse_bitset.union_list_passes), 3, 0, will_not_throw).
:- pragma exceptions(function, (fat_sparse_bitset.union_loop), 3, 0, will_not_throw).
