:- module sparse_bitset.
:- use_module builtin.
:- use_module enum.
:- use_module int.
:- use_module list.
:- use_module private_builtin.
:- use_module require.
:- use_module set.
:- use_module term.
:- use_module uint.

:- type bitset_elem
    --->    bitset_elem((sparse_bitset.offset) :: int, (sparse_bitset.bits) :: uint).
:- type bitset_elems == list.list(sparse_bitset.bitset_elem).
:- type sparse_bitset(T)
    --->    sparse_bitset(list.list(sparse_bitset.bitset_elem)).

:- pred sparse_bitset.all_true_bits((pred T), int, uint, int) <= (enum.enum(T)).
:- mode all_true_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)) is semidet.
:- pragma type_spec(pred((sparse_bitset.all_true_bits)/4), (T = term.var(V_2)), (sparse_bitset.'TypeSpecOf__pred__all_true_bits__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.all_true_bits)/4), (T = int), (sparse_bitset.'TypeSpecOf__pred__all_true_bits__[T = int]')).
:- pred sparse_bitset.all_true_node((pred T), list.list(sparse_bitset.bitset_elem)) <= (enum.enum(T)).
:- mode all_true_node(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) is semidet.
:- pragma type_spec(pred((sparse_bitset.all_true_node)/2), (T = term.var(V_2)), (sparse_bitset.'TypeSpecOf__pred__all_true_node__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.all_true_node)/2), (T = int), (sparse_bitset.'TypeSpecOf__pred__all_true_node__[T = int]')).
:- pred sparse_bitset.contains_search_nodes(list.list(sparse_bitset.bitset_elem), int).
:- mode contains_search_nodes((builtin.in), (builtin.in)) is semidet.
:- func sparse_bitset.difference_loop(list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem)) = list.list(sparse_bitset.bitset_elem).
:- mode difference_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pred sparse_bitset.divide_bits((pred T), int, int, uint, int, uint, uint, uint, uint) <= (enum.enum(T)).
:- mode divide_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred sparse_bitset.divide_nodes((pred T), list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem)) <= (enum.enum(T)).
:- mode divide_nodes(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred sparse_bitset.do_foldl2_pred(pred(T, U, U, V, V), list.list(sparse_bitset.bitset_elem), U, U, V, V) <= (enum.enum(T)).
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.do_foldl2_pred)/6), (T = term.var(V_4)), (sparse_bitset.'TypeSpecOf__pred__do_foldl2_pred__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.do_foldl2_pred)/6), (T = int), (sparse_bitset.'TypeSpecOf__pred__do_foldl2_pred__[T = int]')).
:- pred sparse_bitset.do_foldl_pred(pred(T, U, U), list.list(sparse_bitset.bitset_elem), U, U) <= (enum.enum(T)).
:- mode do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- mode do_foldl_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.do_foldl_pred)/4), (T = term.var(V_3)), (sparse_bitset.'TypeSpecOf__pred__do_foldl_pred__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.do_foldl_pred)/4), (T = int), (sparse_bitset.'TypeSpecOf__pred__do_foldl_pred__[T = int]')).
:- pred sparse_bitset.do_foldr2_pred(pred(T, U, U, V, V), list.list(sparse_bitset.bitset_elem), U, U, V, V) <= (enum.enum(T)).
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.do_foldr2_pred)/6), (T = term.var(V_4)), (sparse_bitset.'TypeSpecOf__pred__do_foldr2_pred__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.do_foldr2_pred)/6), (T = int), (sparse_bitset.'TypeSpecOf__pred__do_foldr2_pred__[T = int]')).
:- pred sparse_bitset.do_foldr_pred(pred(T, U, U), list.list(sparse_bitset.bitset_elem), U, U) <= (enum.enum(T)).
:- mode do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.do_foldr_pred)/4), (T = term.var(V_3)), (sparse_bitset.'TypeSpecOf__pred__do_foldr_pred__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.do_foldr_pred)/4), (T = int), (sparse_bitset.'TypeSpecOf__pred__do_foldr_pred__[T = int]')).
:- pred sparse_bitset.fold2_bits_high_to_low(pred(T, U, U, V, V), int, uint, int, U, U, V, V) <= (enum.enum(T)).
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.fold2_bits_high_to_low)/8), (T = term.var(V_4)), (sparse_bitset.'TypeSpecOf__pred__fold2_bits_high_to_low__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.fold2_bits_high_to_low)/8), (T = int), (sparse_bitset.'TypeSpecOf__pred__fold2_bits_high_to_low__[T = int]')).
:- pred sparse_bitset.fold2_bits_low_to_high(pred(T, U, U, V, V), int, uint, int, U, U, V, V) <= (enum.enum(T)).
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.fold2_bits_low_to_high)/8), (T = term.var(V_4)), (sparse_bitset.'TypeSpecOf__pred__fold2_bits_low_to_high__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.fold2_bits_low_to_high)/8), (T = int), (sparse_bitset.'TypeSpecOf__pred__fold2_bits_low_to_high__[T = int]')).
:- pred sparse_bitset.fold_bits_high_to_low(pred(T, U, U), int, uint, int, U, U) <= (enum.enum(T)).
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.fold_bits_high_to_low)/6), (T = term.var(V_3)), (sparse_bitset.'TypeSpecOf__pred__fold_bits_high_to_low__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.fold_bits_high_to_low)/6), (T = int), (sparse_bitset.'TypeSpecOf__pred__fold_bits_high_to_low__[T = int]')).
:- pred sparse_bitset.fold_bits_low_to_high(pred(T, U, U), int, uint, int, U, U) <= (enum.enum(T)).
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is cc_multi.
:- mode fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is cc_multi.
:- pragma type_spec(pred((sparse_bitset.fold_bits_low_to_high)/6), (T = term.var(V_3)), (sparse_bitset.'TypeSpecOf__pred__fold_bits_low_to_high__[T = var(V_2)]')).
:- pragma type_spec(pred((sparse_bitset.fold_bits_low_to_high)/6), (T = int), (sparse_bitset.'TypeSpecOf__pred__fold_bits_low_to_high__[T = int]')).
:- pred sparse_bitset.insert_loop(int, list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem)).
:- mode insert_loop((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred sparse_bitset.insert_new_loop(int, list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem)).
:- mode insert_new_loop((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred sparse_bitset.intersect_list_passes(sparse_bitset.sparse_bitset(T), list.list(sparse_bitset.sparse_bitset(T)), sparse_bitset.sparse_bitset(T)).
:- mode intersect_list_passes((builtin.in), (builtin.in), (builtin.out)) is det.
:- func sparse_bitset.intersect_loop(list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem)) = list.list(sparse_bitset.bitset_elem).
:- mode intersect_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- func sparse_bitset.list_to_set_passes(list.list(T), list.list(sparse_bitset.bitset_elem)) = list.list(sparse_bitset.bitset_elem) <= (enum.enum(T)).
:- mode list_to_set_passes((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pragma type_spec(func((sparse_bitset.list_to_set_passes)/2), (T = int), (sparse_bitset.'TypeSpecOf__func__list_to_set_passes__[T = int]')).
:- pragma type_spec(func((sparse_bitset.list_to_set_passes)/2), (T = term.var(V_2)), (sparse_bitset.'TypeSpecOf__func__list_to_set_passes__[T = var(V_2)]')).
:- func sparse_bitset.make_bitset_elem(int, uint) = sparse_bitset.bitset_elem.
:- mode make_bitset_elem((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pragma inline(func((sparse_bitset.make_bitset_elem)/2)).
:- func sparse_bitset.mask(int) = uint.
:- mode mask((builtin.in)) = (builtin.out) is det.
:- pragma inline(func((sparse_bitset.mask)/1)).
:- func sparse_bitset.remove_gt_loop(list.list(sparse_bitset.bitset_elem), int) = list.list(sparse_bitset.bitset_elem).
:- mode remove_gt_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- func sparse_bitset.remove_leq_loop(list.list(sparse_bitset.bitset_elem), int) = list.list(sparse_bitset.bitset_elem).
:- mode remove_leq_loop((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pred sparse_bitset.union_list_passes(sparse_bitset.sparse_bitset(T), list.list(sparse_bitset.sparse_bitset(T)), sparse_bitset.sparse_bitset(T)).
:- mode union_list_passes((builtin.in), (builtin.in), (builtin.out)) is det.
:- func sparse_bitset.union_loop(list.list(sparse_bitset.bitset_elem), list.list(sparse_bitset.bitset_elem)) = list.list(sparse_bitset.bitset_elem).
:- mode union_loop((builtin.in), (builtin.in)) = (builtin.out) is det.

sparse_bitset.all_true(V_3, sparse_bitset.sparse_bitset(V_4)) :-
    sparse_bitset.all_true_node(V_3, V_4).

sparse_bitset.all_true_bits(V_5, V_6, V_7, V_8) :-
    ( if
      V_7 = 0u : uint
    then
      true
    else
      ( if
        V_8 = 1 : int
      then
        V_9 = enum.det_from_int(V_6),
        call(V_5, V_9)
      else
        V_10 = int.unchecked_right_shift(V_8, V_14),
        V_14 = 1 : int,
        V_11 = sparse_bitset.mask(V_10),
        V_12 = uint.(V_11 /\ V_7),
        V_13 = uint.(V_11 /\ V_15),
        V_15 = uint.unchecked_right_shift(V_7, V_10),
        sparse_bitset.all_true_bits(V_5, V_6, V_12, V_10),
        V_16 = int.(V_6 + V_10),
        sparse_bitset.all_true_bits(V_5, V_16, V_13, V_10)
      )
    ).

sparse_bitset.all_true_node(V_3, list.[]).
sparse_bitset.all_true_node(V_4, list.[V_8 | V_7]) :-
    V_8 = sparse_bitset.bitset_elem(V_5, V_6) : sparse_bitset.bitset_elem,
    V_9 = int.bits_per_int,
    sparse_bitset.all_true_bits(V_4, V_5, V_6, V_9),
    sparse_bitset.all_true_node(V_4, V_7).

sparse_bitset.contains(sparse_bitset.sparse_bitset(V_3), V_4) :-
    V_5 = enum.to_int(V_4),
    sparse_bitset.contains_search_nodes(V_3, V_5).

sparse_bitset.count(V_3) = V_2 :-
    V_2 = sparse_bitset.foldl(V_6, V_3, V_11),
    V_6 = (func(V_7::(builtin.in), V_8::(builtin.in)) = (V_9::(builtin.out)) is det :-
      some [] (
        V_7 = V_12,
        V_8 = V_14,
        V_9 = int.(V_14 + V_10),
        V_10 = 1 : int
      )
    ) : (func(T_1, int) = int),
    V_11 = 0 : int.

sparse_bitset.delete(V_4, V_5) = V_3 :-
    V_3 = sparse_bitset.difference(V_4, V_6),
    V_6 = sparse_bitset.insert(V_7, V_5),
    V_7 = sparse_bitset.init.

sparse_bitset.delete(V_4, V_6, V_7) :-
    V_7 = sparse_bitset.delete(V_6, V_4).

sparse_bitset.delete_list(V_4, V_5) = V_3 :-
    V_3 = sparse_bitset.difference(V_4, V_6),
    V_6 = sparse_bitset.list_to_set(V_5).

sparse_bitset.delete_list(V_4, V_6, V_7) :-
    V_7 = sparse_bitset.delete_list(V_6, V_4).

sparse_bitset.difference(sparse_bitset.sparse_bitset(V_4), sparse_bitset.sparse_bitset(V_5)) = sparse_bitset.sparse_bitset(V_6) :-
    V_6 = sparse_bitset.difference_loop(V_4, V_5).

sparse_bitset.difference(V_4, V_5, V_3) :-
    V_3 = sparse_bitset.difference(V_4, V_5).

sparse_bitset.divide(V_5, V_6, V_7, V_8) :-
    V_6 = sparse_bitset.sparse_bitset(V_9) : sparse_bitset.sparse_bitset(T_1),
    sparse_bitset.divide_nodes(V_5, V_9, V_10, V_11),
    V_7 = sparse_bitset.sparse_bitset(V_10) : sparse_bitset.sparse_bitset(T_1),
    V_8 = sparse_bitset.sparse_bitset(V_11) : sparse_bitset.sparse_bitset(T_1).

sparse_bitset.divide_bits(V_10, V_11, V_12, V_13, V_14, V_23, V_24, V_25, V_26) :-
    ( if
      V_13 = 0u : uint
    then
      V_26 = V_25,
      V_24 = V_23
    else
      ( if
        V_14 = 1 : int
      then
        V_17 = enum.det_from_int(V_27),
        V_27 = int.(V_11 + V_12),
        V_18 = uint.unchecked_left_shift(V_28, V_12),
        V_28 = 1u : uint,
        ( if
          call(V_10, V_17)
        then
          V_24 = uint.(V_23 \/ V_18),
          V_26 = V_25
        else
          V_26 = uint.(V_25 \/ V_18),
          V_24 = V_23
        )
      else
        V_19 = int.unchecked_right_shift(V_14, V_31),
        V_31 = 1 : int,
        V_20 = sparse_bitset.mask(V_19),
        V_21 = uint.(V_20 /\ V_13),
        V_22 = uint.(V_20 /\ V_32),
        V_32 = uint.unchecked_right_shift(V_13, V_19),
        sparse_bitset.divide_bits(V_10, V_11, V_12, V_21, V_19, V_23, V_33, V_25, V_34),
        V_35 = int.(V_12 + V_19),
        sparse_bitset.divide_bits(V_10, V_11, V_35, V_22, V_19, V_33, V_24, V_34, V_26)
      )
    ).

sparse_bitset.divide_nodes(V_5, list.[], list.[], list.[]).
sparse_bitset.divide_nodes(V_6, list.[V_7 | V_8], V_9, V_10) :-
    sparse_bitset.divide_nodes(V_6, V_8, V_11, V_12),
    V_7 = sparse_bitset.bitset_elem(V_13, V_14) : sparse_bitset.bitset_elem,
    V_17 = 0 : int,
    V_18 = int.bits_per_int,
    V_19 = 0u : uint,
    V_20 = 0u : uint,
    sparse_bitset.divide_bits(V_6, V_13, V_17, V_14, V_18, V_19, V_15, V_20, V_16),
    ( if
      V_15 = 0u : uint
    then
      V_9 = V_11
    else
      V_9 = list.[V_21 | V_11] : list.list(sparse_bitset.bitset_elem),
      V_21 = sparse_bitset.make_bitset_elem(V_13, V_15)
    ),
    ( if
      V_16 = 0u : uint
    then
      V_10 = V_12
    else
      V_10 = list.[V_22 | V_12] : list.list(sparse_bitset.bitset_elem),
      V_22 = sparse_bitset.make_bitset_elem(V_13, V_16)
    ).

sparse_bitset.do_foldl2_pred(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
sparse_bitset.do_foldl2_pred(V_14, list.[V_15 | V_16], V_19, V_20, V_21, V_22) :-
    V_15 = sparse_bitset.bitset_elem(V_23, V_30) : sparse_bitset.bitset_elem,
    V_15 = sparse_bitset.bitset_elem(V_31, V_24) : sparse_bitset.bitset_elem,
    V_25 = int.bits_per_int,
    sparse_bitset.fold2_bits_low_to_high(V_14, V_23, V_24, V_25, V_19, V_26, V_21, V_27),
    sparse_bitset.do_foldl2_pred(V_14, V_16, V_26, V_20, V_27, V_22).

sparse_bitset.do_foldl_pred(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
sparse_bitset.do_foldl_pred(V_9, list.[V_10 | V_11], V_13, V_14) :-
    V_10 = sparse_bitset.bitset_elem(V_15, V_20) : sparse_bitset.bitset_elem,
    V_10 = sparse_bitset.bitset_elem(V_21, V_16) : sparse_bitset.bitset_elem,
    V_17 = int.bits_per_int,
    sparse_bitset.fold_bits_low_to_high(V_9, V_15, V_16, V_17, V_13, V_18),
    sparse_bitset.do_foldl_pred(V_9, V_11, V_18, V_14).

sparse_bitset.do_foldr2_pred(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
sparse_bitset.do_foldr2_pred(V_14, list.[V_15 | V_16], V_19, V_20, V_21, V_22) :-
    sparse_bitset.do_foldr2_pred(V_14, V_16, V_19, V_23, V_21, V_24),
    V_15 = sparse_bitset.bitset_elem(V_25, V_30) : sparse_bitset.bitset_elem,
    V_15 = sparse_bitset.bitset_elem(V_31, V_26) : sparse_bitset.bitset_elem,
    V_27 = int.bits_per_int,
    sparse_bitset.fold2_bits_high_to_low(V_14, V_25, V_26, V_27, V_23, V_20, V_24, V_22).

sparse_bitset.do_foldr_pred(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
sparse_bitset.do_foldr_pred(V_9, list.[V_10 | V_11], V_13, V_14) :-
    sparse_bitset.do_foldr_pred(V_9, V_11, V_13, V_15),
    V_10 = sparse_bitset.bitset_elem(V_16, V_20) : sparse_bitset.bitset_elem,
    V_10 = sparse_bitset.bitset_elem(V_21, V_17) : sparse_bitset.bitset_elem,
    V_18 = int.bits_per_int,
    sparse_bitset.fold_bits_high_to_low(V_9, V_16, V_17, V_18, V_15, V_14).

sparse_bitset.empty(sparse_bitset.sparse_bitset(V_2)) :-
    V_2 = list.[] : list.list(sparse_bitset.bitset_elem).

sparse_bitset.equal(V_3, V_3).

sparse_bitset.filter(V_4, V_5) = V_6 :-
    V_7 = sparse_bitset.to_sorted_list(V_5),
    V_8 = list.filter(V_4, V_7),
    V_6 = sparse_bitset.sorted_list_to_set(V_8).

sparse_bitset.filter(V_5, V_6, V_7, V_8) :-
    V_9 = sparse_bitset.to_sorted_list(V_6),
    list.filter(V_5, V_9, V_10, V_11),
    V_7 = sparse_bitset.sorted_list_to_set(V_10),
    V_8 = sparse_bitset.sorted_list_to_set(V_11).

sparse_bitset.fold2_bits_high_to_low(V_9, V_10, V_11, V_12, V_20, V_21, V_22, V_23) :-
    ( if
      V_11 = 0u : uint
    then
      V_23 = V_22,
      V_21 = V_20
    else
      ( if
        V_12 = 1 : int
      then
        V_15 = enum.det_from_int(V_10),
        call(V_9, V_15, V_20, V_21, V_22, V_23)
      else
        V_16 = int.unchecked_right_shift(V_12, V_26),
        V_26 = 1 : int,
        V_17 = sparse_bitset.mask(V_16),
        V_18 = uint.(V_17 /\ V_11),
        V_19 = uint.(V_17 /\ V_27),
        V_27 = uint.unchecked_right_shift(V_11, V_16),
        V_28 = int.(V_10 + V_16),
        sparse_bitset.fold2_bits_high_to_low(V_9, V_28, V_19, V_16, V_20, V_29, V_22, V_30),
        sparse_bitset.fold2_bits_high_to_low(V_9, V_10, V_18, V_16, V_29, V_21, V_30, V_23)
      )
    ).

sparse_bitset.fold2_bits_low_to_high(V_9, V_10, V_11, V_12, V_20, V_21, V_22, V_23) :-
    ( if
      V_11 = 0u : uint
    then
      V_23 = V_22,
      V_21 = V_20
    else
      ( if
        V_12 = 1 : int
      then
        V_15 = enum.det_from_int(V_10),
        call(V_9, V_15, V_20, V_21, V_22, V_23)
      else
        V_16 = int.unchecked_right_shift(V_12, V_26),
        V_26 = 1 : int,
        V_17 = sparse_bitset.mask(V_16),
        V_18 = uint.(V_17 /\ V_11),
        V_19 = uint.(V_17 /\ V_27),
        V_27 = uint.unchecked_right_shift(V_11, V_16),
        sparse_bitset.fold2_bits_low_to_high(V_9, V_10, V_18, V_16, V_20, V_28, V_22, V_29),
        V_30 = int.(V_10 + V_16),
        sparse_bitset.fold2_bits_low_to_high(V_9, V_30, V_19, V_16, V_28, V_21, V_29, V_23)
      )
    ).

sparse_bitset.fold_bits_high_to_low(V_7, V_8, V_9, V_10, V_17, V_18) :-
    ( if
      V_9 = 0u : uint
    then
      V_18 = V_17
    else
      ( if
        V_10 = 1 : int
      then
        V_12 = enum.det_from_int(V_8),
        call(V_7, V_12, V_17, V_18)
      else
        V_13 = int.unchecked_right_shift(V_10, V_20),
        V_20 = 1 : int,
        V_14 = sparse_bitset.mask(V_13),
        V_15 = uint.(V_14 /\ V_9),
        V_16 = uint.(V_14 /\ V_21),
        V_21 = uint.unchecked_right_shift(V_9, V_13),
        V_22 = int.(V_8 + V_13),
        sparse_bitset.fold_bits_high_to_low(V_7, V_22, V_16, V_13, V_17, V_23),
        sparse_bitset.fold_bits_high_to_low(V_7, V_8, V_15, V_13, V_23, V_18)
      )
    ).

sparse_bitset.fold_bits_low_to_high(V_7, V_8, V_9, V_10, V_17, V_18) :-
    ( if
      V_9 = 0u : uint
    then
      V_18 = V_17
    else
      ( if
        V_10 = 1 : int
      then
        V_12 = enum.det_from_int(V_8),
        call(V_7, V_12, V_17, V_18)
      else
        V_13 = int.unchecked_right_shift(V_10, V_20),
        V_20 = 1 : int,
        V_14 = sparse_bitset.mask(V_13),
        V_15 = uint.(V_14 /\ V_9),
        V_16 = uint.(V_14 /\ V_21),
        V_21 = uint.unchecked_right_shift(V_9, V_13),
        sparse_bitset.fold_bits_low_to_high(V_7, V_8, V_15, V_13, V_17, V_22),
        V_23 = int.(V_8 + V_13),
        sparse_bitset.fold_bits_low_to_high(V_7, V_23, V_16, V_13, V_22, V_18)
      )
    ).

sparse_bitset.foldl(V_5, sparse_bitset.sparse_bitset(V_6), V_7) = V_8 :-
    V_12 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(T_1, U_2, U_2),
    sparse_bitset.do_foldl_pred(V_12, V_6, V_7, V_8).

sparse_bitset.foldl(V_5, sparse_bitset.sparse_bitset(V_6), V_8, V_9) :-
    sparse_bitset.do_foldl_pred(V_5, V_6, V_8, V_9).

sparse_bitset.foldl2(V_7, sparse_bitset.sparse_bitset(V_8), V_11, V_12, V_13, V_14) :-
    sparse_bitset.do_foldl2_pred(V_7, V_8, V_11, V_12, V_13, V_14).

sparse_bitset.foldr(V_5, sparse_bitset.sparse_bitset(V_6), V_7) = V_8 :-
    V_12 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_5, V_16, V_17),
        V_15 = V_18
      )
    ) : pred(T_1, U_2, U_2),
    sparse_bitset.do_foldr_pred(V_12, V_6, V_7, V_8).

sparse_bitset.foldr(V_5, sparse_bitset.sparse_bitset(V_6), V_8, V_9) :-
    sparse_bitset.do_foldr_pred(V_5, V_6, V_8, V_9).

sparse_bitset.foldr2(V_7, sparse_bitset.sparse_bitset(V_8), V_11, V_12, V_13, V_14) :-
    sparse_bitset.do_foldr2_pred(V_7, V_8, V_11, V_12, V_13, V_14).

sparse_bitset.from_set(V_3) = V_2 :-
    V_2 = sparse_bitset.sorted_list_to_set(V_4),
    V_4 = set.to_sorted_list(V_3).

sparse_bitset.init = sparse_bitset.sparse_bitset(V_2) :-
    V_2 = list.[] : list.list(sparse_bitset.bitset_elem).

sparse_bitset.init(sparse_bitset.sparse_bitset(V_2)) :-
    V_2 = list.[] : list.list(sparse_bitset.bitset_elem).

sparse_bitset.insert(V_4, V_5) = V_6 :-
    sparse_bitset.insert(V_5, V_4, V_6).

sparse_bitset.insert(V_4, V_7, V_8) :-
    V_7 = sparse_bitset.sparse_bitset(V_6) : sparse_bitset.sparse_bitset(T_1),
    V_9 = enum.to_int(V_4),
    sparse_bitset.insert_loop(V_9, V_6, V_5),
    V_8 = sparse_bitset.sparse_bitset(V_5) : sparse_bitset.sparse_bitset(T_1).

sparse_bitset.insert_list(V_4, V_5) = V_6 :-
    sparse_bitset.insert_list(V_5, V_4, V_6).

sparse_bitset.insert_list(V_4, V_5, V_6) :-
    V_7 = sparse_bitset.list_to_set(V_4),
    sparse_bitset.union(V_7, V_5, V_6).

sparse_bitset.insert_new(V_4, V_7, V_8) :-
    V_7 = sparse_bitset.sparse_bitset(V_6) : sparse_bitset.sparse_bitset(T_1),
    V_9 = enum.to_int(V_4),
    sparse_bitset.insert_new_loop(V_9, V_6, V_5),
    V_8 = sparse_bitset.sparse_bitset(V_5) : sparse_bitset.sparse_bitset(T_1).

sparse_bitset.intersect(sparse_bitset.sparse_bitset(V_4), sparse_bitset.sparse_bitset(V_5)) = sparse_bitset.sparse_bitset(V_6) :-
    V_6 = sparse_bitset.intersect_loop(V_4, V_5).

sparse_bitset.intersect(V_4, V_5, V_3) :-
    V_3 = sparse_bitset.intersect(V_4, V_5).

sparse_bitset.intersect_list(V_3) = V_4 :-
    sparse_bitset.intersect_list(V_3, V_4).

sparse_bitset.intersect_list(list.[], V_2) :-
    V_2 = sparse_bitset.init.
sparse_bitset.intersect_list(list.[V_3 | V_4], V_5) :-
    sparse_bitset.intersect_list_passes(V_3, V_4, V_5).

sparse_bitset.is_empty(sparse_bitset.sparse_bitset(V_2)) :-
    V_2 = list.[] : list.list(sparse_bitset.bitset_elem).

sparse_bitset.is_non_empty(sparse_bitset.sparse_bitset(V_4)) :-
    V_4 = list.[V_2 | V_3] : list.list(sparse_bitset.bitset_elem).

sparse_bitset.list_to_set(V_3) = sparse_bitset.sparse_bitset(V_4) :-
    V_4 = sparse_bitset.list_to_set_passes(V_3, V_5),
    V_5 = list.[] : list.list(sparse_bitset.bitset_elem).

sparse_bitset.list_to_set(V_3, V_2) :-
    V_2 = sparse_bitset.list_to_set(V_3).

:- pragma inline(func((sparse_bitset.make_bitset_elem)/2)).
sparse_bitset.make_bitset_elem(V_4, V_5) = sparse_bitset.bitset_elem(V_4, V_5).

sparse_bitset.make_singleton_set(V_3) = V_2 :-
    V_2 = sparse_bitset.insert(V_4, V_3),
    V_4 = sparse_bitset.init.

:- pragma inline(func((sparse_bitset.mask)/1)).
sparse_bitset.mask(V_3) = V_2 :-
    V_2 = uint.(\ V_4),
    V_4 = uint.unchecked_left_shift(V_5, V_3),
    V_5 = uint.(\ V_6),
    V_6 = 0u : uint.

sparse_bitset.remove(V_4, V_6, V_7) :-
    sparse_bitset.contains(V_6, V_4),
    V_7 = sparse_bitset.delete(V_6, V_4).

sparse_bitset.remove_gt(sparse_bitset.sparse_bitset(V_4), V_5) = sparse_bitset.sparse_bitset(V_6) :-
    V_6 = sparse_bitset.remove_gt_loop(V_4, V_7),
    V_7 = enum.to_int(V_5).

sparse_bitset.remove_gt(V_4, V_6, V_7) :-
    V_7 = sparse_bitset.remove_gt(V_6, V_4).

sparse_bitset.remove_leq(sparse_bitset.sparse_bitset(V_4), V_5) = sparse_bitset.sparse_bitset(V_6) :-
    V_6 = sparse_bitset.remove_leq_loop(V_4, V_7),
    V_7 = enum.to_int(V_5).

sparse_bitset.remove_leq(V_4, V_6, V_7) :-
    V_7 = sparse_bitset.remove_leq(V_6, V_4).

sparse_bitset.remove_list(V_4, V_7, V_8) :-
    sparse_bitset.list_to_set(V_4, V_6),
    sparse_bitset.subset(V_6, V_7),
    V_8 = sparse_bitset.difference(V_7, V_6).

sparse_bitset.singleton_set(V_1, V_3) :-
    V_1 = sparse_bitset.make_singleton_set(V_3).

sparse_bitset.sorted_list_to_set(V_3, V_2) :-
    V_2 = sparse_bitset.sorted_list_to_set(V_3).

sparse_bitset.subset(V_3, V_4) :-
    V_5 = V_3,
    sparse_bitset.intersect(V_4, V_3, V_5).

sparse_bitset.superset(V_3, V_4) :-
    sparse_bitset.subset(V_4, V_3).

sparse_bitset.to_set(V_3) = V_2 :-
    V_2 = set.sorted_list_to_set(V_4),
    V_4 = sparse_bitset.to_sorted_list(V_3).

sparse_bitset.to_sorted_list(V_3) = V_2 :-
    V_2 = sparse_bitset.foldr(V_6, V_3, V_10),
    V_6 = (func(V_7::(builtin.in), V_8::(builtin.in)) = (V_9::(builtin.out)) is det :-
      some [] (
        V_7 = V_11,
        V_8 = V_12,
        V_9 = list.[V_11 | V_12] : list.list(T_1)
      )
    ) : (func(T_1, list.list(T_1)) = list.list(T_1)),
    V_10 = list.[] : list.list(T_1).

sparse_bitset.to_sorted_list(V_3, V_2) :-
    V_2 = sparse_bitset.to_sorted_list(V_3).

sparse_bitset.union(sparse_bitset.sparse_bitset(V_4), sparse_bitset.sparse_bitset(V_5)) = sparse_bitset.sparse_bitset(V_6) :-
    V_6 = sparse_bitset.union_loop(V_4, V_5).

sparse_bitset.union(V_4, V_5, V_3) :-
    V_3 = sparse_bitset.union(V_4, V_5).

sparse_bitset.union_list(V_3) = V_4 :-
    sparse_bitset.union_list(V_3, V_4).

sparse_bitset.union_list(list.[], V_2) :-
    V_2 = sparse_bitset.init.
sparse_bitset.union_list(list.[V_3 | V_4], V_5) :-
    sparse_bitset.union_list_passes(V_3, V_4, V_5).

:- pragma termination_info(sparse_bitset.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.all_true_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.all_true_node(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.contains_search_nodes((builtin.in), (builtin.in)), finite(0, [no, no]), can_loop).
:- pragma termination_info(sparse_bitset.count((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.delete((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.delete((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.delete_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.delete_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.difference((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.difference((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.difference_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.divide_bits(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.divide_nodes(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldl_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr2_pred(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.do_foldr_pred(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.empty((builtin.out)), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.filter(((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.filter(((pred((builtin.in)) is semidet) >> (pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold2_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_high_to_low(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.fold_bits_low_to_high(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldl2(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.di), (builtin.uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.foldr2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is cc_multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.from_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info((sparse_bitset.init) = (builtin.out), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.init((builtin.out)), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.insert((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.insert((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.insert_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.insert_loop((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.insert_new((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.insert_new_loop((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.intersect((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.intersect((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.intersect_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.intersect_list((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.intersect_list_passes((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.intersect_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.is_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.is_non_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.is_singleton((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.list_to_set_passes((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.make_bitset_elem((builtin.in), (builtin.in)) = (builtin.out), finite(2, [yes, yes, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.make_singleton_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.mask((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.member((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.remove((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_gt((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_gt((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_gt_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_least((builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.remove_leq((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_leq((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_leq_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, no, no]), can_loop).
:- pragma termination_info(sparse_bitset.remove_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.singleton_set((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.sorted_list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.sorted_list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.to_sorted_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(sparse_bitset.to_sorted_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(sparse_bitset.union((builtin.in), (builtin.in)) = (builtin.out), finite(-1, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.union((builtin.in), (builtin.in), (builtin.out)), finite(-1, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(sparse_bitset.union_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.union_list((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.union_list_passes((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(sparse_bitset.union_loop((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, yes, no]), cannot_loop).

:- pragma exceptions(predicate, (sparse_bitset.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.all_true_bits), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.all_true_node), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.contains), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.contains_search_nodes), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.count), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.delete), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.delete_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.difference), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.difference), 3, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.difference_loop), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.divide), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.divide_bits), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.divide_by_set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.divide_nodes), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl2_pred), 6, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldl_pred), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr2_pred), 6, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.do_foldr_pred), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.empty), 1, 1, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.equal), 2, 0, may_throw(type_exception)).
:- pragma exceptions(function, (sparse_bitset.filter), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_high_to_low), 8, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold2_bits_low_to_high), 8, 10, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_high_to_low), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.fold_bits_low_to_high), 6, 8, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.foldl), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldl2), 6, 10, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.foldr), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr), 4, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 8, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 9, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.foldr2), 6, 10, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.from_set), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.init), 0, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.init), 1, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.insert), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.insert), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.insert_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.insert_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.insert_new), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.insert_new_loop), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.intersect), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.intersect), 3, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.intersect_list), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.intersect_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.intersect_list_passes), 3, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.intersect_loop), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.is_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.is_non_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.is_singleton), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.list_to_set), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.list_to_set_passes), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.make_bitset_elem), 2, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.make_singleton_set), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.mask), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.member), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.member), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.remove_gt), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.remove_gt), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.remove_gt_loop), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.remove_least), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.remove_leq), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.remove_leq), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.remove_leq_loop), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.singleton_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.sorted_list_to_set), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.subset), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (sparse_bitset.superset), 2, 0, may_throw(type_exception)).
:- pragma exceptions(function, (sparse_bitset.to_set), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.to_sorted_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (sparse_bitset.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (sparse_bitset.union), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.union), 3, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.union_list), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.union_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (sparse_bitset.union_list_passes), 3, 0, will_not_throw).
:- pragma exceptions(function, (sparse_bitset.union_loop), 2, 0, will_not_throw).
