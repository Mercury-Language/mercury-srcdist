:- module erlang_rtti_implementation.
:- interface.
:- import_module deconstruct.
:- import_module list.
:- import_module univ.
:- type type_ctor_info.
:- type type_info.
:- pred compare_type_infos((builtin.comparison_result), (erlang_rtti_implementation.type_info), (erlang_rtti_implementation.type_info)).
:- mode compare_type_infos((builtin.out), (builtin.in), (builtin.in)) is det.
:- pred deconstruct(T, (deconstruct.noncanon_handling), string, int, (list.list((univ.univ)))).
:- mode deconstruct((builtin.in), builtin.in((deconstruct.do_not_allow)), (builtin.out), (builtin.out), (builtin.out)) is det.
:- mode deconstruct((builtin.in), builtin.in((deconstruct.canonicalize)), (builtin.out), (builtin.out), (builtin.out)) is det.
:- mode deconstruct((builtin.in), builtin.in((deconstruct.include_details_cc)), (builtin.out), (builtin.out), (builtin.out)) is cc_multi.
:- mode deconstruct((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out)) is cc_multi.
:- pred generic_compare((builtin.comparison_result), T, T).
:- mode generic_compare((builtin.out), (builtin.in), (builtin.in)) is det.
:- pred generic_unify(T, T).
:- mode generic_unify((builtin.in), (builtin.in)) is semidet.
:- func get_type_info(T) = (erlang_rtti_implementation.type_info).
:- mode get_type_info((builtin.unused)) = (builtin.out) is det.
:- pred type_ctor_and_args((erlang_rtti_implementation.type_info), (erlang_rtti_implementation.type_ctor_info), (list.list((erlang_rtti_implementation.type_info)))).
:- mode type_ctor_and_args((builtin.in), (builtin.out), (builtin.out)) is det.
:- pred type_ctor_name_and_arity((erlang_rtti_implementation.type_ctor_info), string, string, int).
:- mode type_ctor_name_and_arity((builtin.in), (builtin.out), (builtin.out), (builtin.out)) is det.
:- implementation.
:- type erlang_atom
	--->	erlang_atom .
:- type erlang_atom.
:- pragma foreign_type(erlang, erlang_atom, "").
:- type pseudo_type_info
	--->	pseudo_type_info .
:- type pseudo_type_info.
:- pragma foreign_type(erlang, pseudo_type_info, "").
:- type pseudo_type_info_thunk
	--->	pseudo_type_info_thunk .
:- type pseudo_type_info_thunk.
:- pragma foreign_type(erlang, pseudo_type_info_thunk, "").
:- type type_ctor_info
	--->	type_ctor_info .
:- pragma foreign_type(erlang, type_ctor_info, "").
:- type type_info
	--->	type_info .
:- pragma foreign_type(erlang, type_info, "").
:- type type_info_thunk
	--->	type_info_thunk .
:- type type_info_thunk.
:- pragma foreign_type(erlang, type_info_thunk, "").
:- pragma foreign_import_module("Erlang", erlang_rtti_implementation).
:- pragma foreign_import_module("Erlang", erlang_rtti_implementation).
