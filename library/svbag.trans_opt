:- module svbag.
:- pragma termination_info(svbag.insert((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(svbag.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.insert_set((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.remove((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(svbag.det_remove((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(svbag.remove_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.det_remove_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.remove_set((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.det_remove_set((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.delete((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(svbag.remove_all((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(svbag.delete_all((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(svbag.subtract((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svbag.remove_smallest((builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma exceptions(predicate, (svbag.insert), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (svbag.insert_list), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (svbag.insert_set), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (svbag.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.det_remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.det_remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.remove_set), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.det_remove_set), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.remove_all), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.delete_all), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.subtract), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svbag.remove_smallest), 3, 0, may_throw(user_exception)).
