:- module array.
:- use_module builtin.
:- use_module exception.
:- use_module int.
:- use_module list.
:- use_module maybe.
:- use_module pretty_printer.
:- use_module private_builtin.
:- use_module random.
:- use_module require.
:- use_module stream.
:- use_module string.
:- use_module type_desc.
:- use_module (string.format).
:- use_module (string.parse_util).
:- type array(T).
:- pragma foreign_type(il, array(T), "class [mscorlib]System.Array")
	where	equality is (array.array_equal),
		comparison is (array.array_compare).
:- pragma foreign_type(c, array(T), "MR_ArrayPtr")
	where	equality is (array.array_equal),
		comparison is (array.array_compare).
:- pragma foreign_type(java, array(T), "/* Array */ java.lang.Object")
	where	equality is (array.array_equal),
		comparison is (array.array_compare).
:- pragma foreign_type(csharp, array(T), "System.Array")
	where	equality is (array.array_equal),
		comparison is (array.array_compare).
:- pragma foreign_type(erlang, array(T), "")
	where	equality is (array.array_equal),
		comparison is (array.array_compare).
:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("IL", array).
:- pragma foreign_import_module("Erlang", array).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("IL", io).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
:- pred array.array_equal(array.array(T_1), array.array(T_1)).
:- mode array.array_equal((builtin.in), (builtin.in)) is semidet.
:- pragma terminates((array.array_equal)/2).
:- pred array.array_compare(builtin.comparison_result, array.array(T_1), array.array(T_1)).
:- mode array.array_compare((builtin.uo), (builtin.in), (builtin.in)) is det.
:- pragma terminates((array.array_compare)/3).
:- func array.unsafe_init(int, T, int) = array.array(T).
:- mode array.unsafe_init((builtin.in), (builtin.in), (builtin.in)) = (array.array_uo) is det.
:- func array.generate_2(int, int, ((func int) = T_1), array.array(T_1)) = array.array(T_1).
:- mode array.generate_2((builtin.in), (builtin.in), (builtin.in), (array.array_di)) = (array.array_uo) is det.
:- pred array.generate_foldl_2(int, int, pred(int, T_1, A_2, A_2), array.array(T_1), array.array(T_1), A_2, A_2).
:- mode array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)) is det.
:- mode array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)) is det.
:- mode array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)) is det.
:- mode array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)) is semidet.
:- mode array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)) is semidet.
:- pred array.bsearch_2(array.array(T_1), int, int, T_1, pred(T_1, T_1, builtin.comparison_result), maybe.maybe(int)).
:- mode array.bsearch_2((builtin.in), (builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.out)) is det.
:- pred array.map_2(int, int, pred(T1_1, T2_2), array.array(T1_1), array.array(T2_2), array.array(T2_2)).
:- mode array.map_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out)) is det)), (builtin.in), (array.array_di), (array.array_uo)) is det.
:- pred array.binary_search_loop((func(T_1, T_1) = builtin.comparison_result), array.array(T_1), T_1, int, int, int).
:- mode array.binary_search_loop((builtin.in), (array.array_ui), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred array.approx_binary_search_loop((func(T_1, T_1) = builtin.comparison_result), array.array(T_1), T_1, int, int, int).
:- mode array.approx_binary_search_loop((builtin.in), (array.array_ui), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func array.do_foldl_func((func(T1_1, T2_2) = T2_2), array.array(T1_1), T2_2, int, int) = T2_2.
:- mode array.do_foldl_func((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det.
:- mode array.do_foldl_func((func((builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di), (builtin.in), (builtin.in)) = (builtin.uo) is det.
:- pred array.do_foldl_pred(pred(T1_1, T2_2, T2_2), array.array(T1_1), int, int, T2_2, T2_2).
:- mode array.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldl2(pred(T1_1, T2_2, T2_2, T3_3, T3_3), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3).
:- mode array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldl3(pred(T1_1, T2_2, T2_2, T3_3, T3_3, T4_4, T4_4), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3, T4_4, T4_4).
:- mode array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldl4(pred(T1_1, T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5).
:- mode array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldl5(pred(T1_1, T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5, T6_6, T6_6), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5, T6_6, T6_6).
:- mode array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- func array.do_foldr_func((func(T1_1, T2_2) = T2_2), array.array(T1_1), T2_2, int, int) = T2_2.
:- mode array.do_foldr_func((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det.
:- mode array.do_foldr_func((func((builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di), (builtin.in), (builtin.in)) = (builtin.uo) is det.
:- pred array.do_foldr_pred(pred(T1_1, T2_2, T2_2), int, int, array.array(T1_1), T2_2, T2_2).
:- mode array.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldr2(pred(T1_1, T2_2, T2_2, T3_3, T3_3), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3).
:- mode array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldr3(pred(T1_1, T2_2, T2_2, T3_3, T3_3, T4_4, T4_4), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3, T4_4, T4_4).
:- mode array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldr4(pred(T1_1, T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5).
:- mode array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.do_foldr5(pred(T1_1, T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5, T6_6, T6_6), int, int, array.array(T1_1), T2_2, T2_2, T3_3, T3_3, T4_4, T4_4, T5_5, T5_5, T6_6, T6_6).
:- mode array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- mode array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det.
:- mode array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet.
:- mode array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet.
:- mode array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet.
:- pred array.map_foldl_2(pred(T1_1, T2_2, T3_3, T3_3), int, array.array(T1_1), array.array(T2_2), array.array(T2_2), T3_3, T3_3).
:- mode array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)) is det.
:- mode array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)) is det.
:- mode array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)) is det.
:- mode array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)) is semidet.
:- pred array.map_corresponding_foldl_2(pred(T1_1, T2_2, T3_3, T4_4, T4_4), int, int, array.array(T1_1), array.array(T2_2), array.array(T3_3), array.array(T3_3), T4_4, T4_4).
:- mode array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)) is det.
:- mode array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)) is det.
:- mode array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)) is det.
:- mode array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)) is semidet.
:- pred array.do_all_true((pred T_1), int, int, array.array(T_1)).
:- mode array.do_all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)) is semidet.
:- pred array.do_all_false((pred T_1), int, int, array.array(T_1)).
:- mode array.do_all_false(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)) is semidet.
:- func array.samsort_subarray(array.array(T_1), int, int) = array.array(T_1).
:- mode array.samsort_subarray((array.array_di), (builtin.in), (builtin.in)) = (array.array_uo) is det.
:- pragma type_spec((array.samsort_subarray)/3, (T_1 = string), (array.'TypeSpecOf__pred_or_func__samsort_subarray__[T = string]')).
:- pragma type_spec((array.samsort_subarray)/3, (T_1 = int), (array.'TypeSpecOf__pred_or_func__samsort_subarray__[T = int]')).
:- pred array.samsort_up(int, array.array(T_1), array.array(T_1), array.array(T_1), array.array(T_1), int, int, int).
:- mode array.samsort_up((builtin.in), (array.array_di), (array.array_uo), (array.array_di), (array.array_uo), (builtin.in), (builtin.in), (builtin.in)) is det.
:- pragma type_spec((array.samsort_up)/8, (T_1 = string), (array.'TypeSpecOf__pred_or_func__samsort_up__[T = string]')).
:- pragma type_spec((array.samsort_up)/8, (T_1 = int), (array.'TypeSpecOf__pred_or_func__samsort_up__[T = int]')).
:- pragma foreign_proc("C", array.make_empty_array(Array :: (array.array_uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, no_sharing, will_not_modify_trail, doesnt_affect_liveness], "
    ML_alloc_array(Array, 1, MR_ALLOC_ID);
    ML_init_array(Array, 0, 0);
").
array.make_empty_array = V_2 :-
    array.make_empty_array(V_2).
array.init(V_4, V_5) = V_6 :-
    array.init(V_4, V_5, V_6).
array.array(V_3) = V_4 :-
    array.from_list(V_3, V_4).
array.generate(V_4, V_5) = V_6 :-
    V_10 = 0 : int,
    builtin.compare(V_7, V_4, V_10),
    ( % disjunction
      V_7 = builtin.(<) : builtin.comparison_result,
      V_14 = "array.generate: negative size" : string,
      require.error(V_14)
    ;
      V_7 = builtin.(=) : builtin.comparison_result,
      array.make_empty_array(V_6)
    ;
      V_7 = builtin.(>) : builtin.comparison_result,
      V_8 = apply(V_5, V_11),
      V_11 = 0 : int,
      V_9 = array.unsafe_init(V_4, V_8, V_12),
      V_12 = 0 : int,
      V_6 = array.generate_2(V_13, V_4, V_5, V_9),
      V_13 = 1 : int
    ).
array.generate_foldl(V_6, V_7, V_8, V_13, V_14) :-
    V_15 = 0 : int,
    builtin.compare(V_10, V_6, V_15),
    ( % disjunction
      V_10 = builtin.(<) : builtin.comparison_result,
      V_21 = "array.generate_foldl: negative size" : string,
      require.error(V_21),
      V_14 = V_13
    ;
      V_10 = builtin.(=) : builtin.comparison_result,
      array.make_empty_array(V_8),
      V_14 = V_13
    ;
      V_10 = builtin.(>) : builtin.comparison_result,
      V_16 = 0 : int,
      call(V_7, V_16, V_11, V_13, V_17),
      V_12 = array.unsafe_init(V_6, V_11, V_18),
      V_18 = 0 : int,
      V_19 = 1 : int,
      array.generate_foldl_2(V_19, V_6, V_7, V_12, V_8, V_17, V_14)
    ).
:- pragma foreign_proc("C", array.min(Array :: (builtin.in), Min :: (builtin.out)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, no_sharing, will_not_modify_trail, doesnt_affect_liveness], "
    /* Array not used */
    Min = 0;
").
array.min(V_3) = V_4 :-
    array.min(V_3, V_4).
array.least_index(V_3) = V_2 :-
    V_2 = array.min(V_3).
:- pragma foreign_proc("C", array.max(Array :: (builtin.in), Max :: (builtin.out)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, no_sharing, will_not_modify_trail, doesnt_affect_liveness], "
    Max = Array->size - 1;
").
array.max(V_3) = V_4 :-
    array.max(V_3, V_4).
array.greatest_index(V_3) = V_2 :-
    V_2 = array.max(V_3).
:- pragma foreign_proc("C", array.size(Array :: (builtin.in), Max :: (builtin.out)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, no_sharing, will_not_modify_trail, doesnt_affect_liveness], "
    Max = Array->size;
").
array.size(V_3) = V_4 :-
    array.size(V_3, V_4).
array.bounds(V_4, V_5, V_6) :-
    array.min(V_4, V_5),
    array.max(V_4, V_6).
array.in_bounds(V_3, V_4) :-
    array.bounds(V_3, V_5, V_6),
    int.(V_5 =< V_4),
    int.(V_4 =< V_6).
array.is_empty(V_2) :-
    V_3 = 0 : int,
    array.size(V_2, V_3).
array.lookup(V_4, V_5) = V_6 :-
    array.lookup(V_4, V_5, V_6).
array.semidet_lookup(V_4, V_5, V_6) :-
    (if
      array.in_bounds(V_4, V_5)
    then
      array.unsafe_lookup(V_4, V_5, V_6)
    else
      fail
    ).
:- pragma foreign_proc("C", array.unsafe_lookup(Array :: (builtin.in), Index :: (builtin.in), Item :: (builtin.out)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, sharing(yes(array.array(T), int, T), [cel(Array, [T]) - cel(Item, [])]), will_not_modify_trail, doesnt_affect_liveness], "
    Item = Array->elements[Index];
").
array.set(V_5, V_6, V_7) = V_8 :-
    array.set(V_6, V_7, V_5, V_8).
:- pragma foreign_proc("C", array.unsafe_set(Index :: (builtin.in), Item :: (builtin.in), Array0 :: (array.array_di), Array :: (array.array_uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, sharing(yes(int, T, array.array(T), array.array(T)), [cel(Array0, []) - cel(Array, []), cel(Item, []) - cel(Array, [T])]), will_not_modify_trail, doesnt_affect_liveness], "
    Array0->elements[Index] = Item; /* destructive update! */
    Array = Array0;
").
array.slow_set(V_5, V_6, V_8, V_9) :-
    array.copy(V_8, V_10),
    array.set(V_5, V_6, V_10, V_9).
array.slow_set(V_8, V_6, V_7) = V_9 :-
    array.slow_set(V_6, V_7, V_8, V_9).
array.elem(V_4, V_5) = V_3 :-
    V_3 = array.lookup(V_5, V_4).
array.unsafe_elem(V_4, V_5) = V_6 :-
    array.unsafe_lookup(V_5, V_4, V_6).
array.'elem :='(V_5, V_6, V_7) = V_4 :-
    V_4 = array.set(V_6, V_5, V_7).
array.'unsafe_elem :='(V_5, V_8, V_7) = V_9 :-
    array.unsafe_set(V_5, V_7, V_8, V_9).
array.member(V_3, V_4) :-
    V_6 = array.min(V_3),
    V_7 = array.max(V_3),
    int.nondet_int_in_range(V_6, V_7, V_5),
    V_4 = array.unsafe_elem(V_5, V_3).
:- pragma foreign_proc("C", array.copy(Array0 :: (builtin.in), Array :: (array.array_uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, sharing(yes(array.array(T), array.array(T)), [cel(Array0, [T]) - cel(Array, [T])]), will_not_modify_trail, doesnt_affect_liveness], "
    ML_alloc_array(Array, Array0->size + 1, MR_ALLOC_ID);
    ML_copy_array(Array, (MR_ConstArrayPtr) Array0);
").
array.copy(V_3) = V_4 :-
    array.copy(V_3, V_4).
:- pragma foreign_proc("C", array.resize(Size :: (builtin.in), Item :: (builtin.in), Array0 :: (array.array_di), Array :: (array.array_uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, sharing(yes(int, T, array.array(T), array.array(T)), [cel(Array0, []) - cel(Array, []), cel(Item, []) - cel(Array, [T])]), will_not_modify_trail, doesnt_affect_liveness], "
    if ((Array0)->size == Size) {
        Array = Array0;
    } else {
        ML_alloc_array(Array, Size + 1, MR_ALLOC_ID);
        ML_resize_array(Array, Array0, Size, Item);
    }
").
array.resize(V_8, V_6, V_7) = V_9 :-
    array.resize(V_6, V_7, V_8, V_9).
array.shrink(V_6, V_5) = V_7 :-
    array.shrink(V_5, V_6, V_7).
array.from_list(V_3) = V_4 :-
    array.from_list(V_3, V_4).
array.to_list(V_3, V_4) :-
    array.bounds(V_3, V_5, V_6),
    array.fetch_items(V_3, V_5, V_6, V_4).
array.to_list(V_3) = V_4 :-
    array.to_list(V_3, V_4).
array.fetch_items(V_5, V_6, V_7) = V_8 :-
    array.fetch_items(V_5, V_6, V_7, V_8).
array.bsearch(V_5, V_6, V_7, V_8) :-
    array.bounds(V_5, V_9, V_10),
    array.bsearch_2(V_5, V_9, V_10, V_6, V_7, V_8).
array.bsearch(V_5, V_6, V_7) = V_8 :-
    V_9 = (pred(V_13::(builtin.in), V_14::(builtin.in), V_15::(builtin.out)) is det :-
      some [] (
        V_13 = V_16,
        V_14 = V_17,
        V_18 = apply(V_7, V_16, V_17),
        V_15 = V_18
      )
    )
 : pred(T_1, T_1, builtin.comparison_result),
    array.bsearch(V_5, V_6, V_9, V_8).
array.binary_search(V_4, V_5, V_6) :-
    V_7 = builtin.ordering : (func(T_1, T_1) = builtin.comparison_result),
    array.binary_search(V_7, V_4, V_5, V_6).
array.binary_search(V_5, V_6, V_7, V_8) :-
    V_9 = 0 : int,
    V_10 = int.(V_11 - V_12),
    V_11 = array.size(V_6),
    V_12 = 1 : int,
    array.binary_search_loop(V_5, V_6, V_7, V_9, V_10, V_8).
array.approx_binary_search(V_4, V_5, V_6) :-
    V_7 = builtin.ordering : (func(T_1, T_1) = builtin.comparison_result),
    array.approx_binary_search(V_7, V_4, V_5, V_6).
array.approx_binary_search(V_5, V_6, V_7, V_8) :-
    V_9 = 0 : int,
    V_10 = int.(V_11 - V_12),
    V_11 = array.size(V_6),
    V_12 = 1 : int,
    array.approx_binary_search_loop(V_5, V_6, V_7, V_9, V_10, V_8).
array.map(V_4, V_5, V_6) :-
    (if
      V_11 = 0 : int,
      array.semidet_lookup(V_5, V_11, V_7)
    then
      array.size(V_5, V_8),
      call(V_4, V_7, V_9),
      V_10 = array.unsafe_init(V_8, V_9, V_12),
      V_12 = 0 : int,
      V_13 = 1 : int,
      array.map_2(V_13, V_8, V_4, V_5, V_10, V_6)
    else
      array.make_empty_array(V_6)
    ).
array.map(V_4, V_5) = V_6 :-
    V_7 = (pred(V_10::(builtin.in), V_11::(builtin.out)) is det :-
      some [] (
        V_10 = V_12,
        V_13 = apply(V_4, V_12),
        V_11 = V_13
      )
    )
 : pred(T1_1, T2_2),
    array.map(V_7, V_5, V_6).
array.array_compare(V_4, V_5) = V_6 :-
    array.array_compare(V_6, V_4, V_5).
array.sort(V_3) = V_2 :-
    V_2 = array.samsort_subarray(V_3, V_4, V_5),
    V_4 = array.min(V_3),
    V_5 = array.max(V_3).
array.foldl(V_5, V_6, V_7) = V_4 :-
    V_4 = array.do_foldl_func(V_5, V_6, V_7, V_8, V_9),
    V_8 = array.min(V_6),
    V_9 = array.max(V_6).
array.foldl(V_5, V_6, V_8, V_9) :-
    V_10 = array.min(V_6),
    V_11 = array.max(V_6),
    array.do_foldl_pred(V_5, V_6, V_10, V_11, V_8, V_9).
array.foldl2(V_7, V_8, V_11, V_12, V_13, V_14) :-
    V_15 = array.min(V_8),
    V_16 = array.max(V_8),
    array.do_foldl2(V_7, V_15, V_16, V_8, V_11, V_12, V_13, V_14).
array.foldl3(V_9, V_10, V_14, V_15, V_16, V_17, V_18, V_19) :-
    V_20 = array.min(V_10),
    V_21 = array.max(V_10),
    array.do_foldl3(V_9, V_20, V_21, V_10, V_14, V_15, V_16, V_17, V_18, V_19).
array.foldl4(V_11, V_12, V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24) :-
    V_25 = array.min(V_12),
    V_26 = array.max(V_12),
    array.do_foldl4(V_11, V_25, V_26, V_12, V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24).
array.foldl5(V_13, V_14, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29) :-
    V_30 = array.min(V_14),
    V_31 = array.max(V_14),
    array.do_foldl5(V_13, V_30, V_31, V_14, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29).
array.foldr(V_5, V_6, V_7) = V_4 :-
    V_4 = array.do_foldr_func(V_5, V_6, V_7, V_8, V_9),
    V_8 = array.min(V_6),
    V_9 = array.max(V_6).
array.foldr(V_5, V_6, V_8, V_9) :-
    V_10 = array.min(V_6),
    V_11 = array.max(V_6),
    array.do_foldr_pred(V_5, V_10, V_11, V_6, V_8, V_9).
array.foldr2(V_7, V_8, V_11, V_12, V_13, V_14) :-
    V_15 = array.min(V_8),
    V_16 = array.max(V_8),
    array.do_foldr2(V_7, V_15, V_16, V_8, V_11, V_12, V_13, V_14).
array.foldr3(V_9, V_10, V_14, V_15, V_16, V_17, V_18, V_19) :-
    V_20 = array.min(V_10),
    V_21 = array.max(V_10),
    array.do_foldr3(V_9, V_20, V_21, V_10, V_14, V_15, V_16, V_17, V_18, V_19).
array.foldr4(V_11, V_12, V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24) :-
    V_25 = array.min(V_12),
    V_26 = array.max(V_12),
    array.do_foldr4(V_11, V_25, V_26, V_12, V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24).
array.foldr5(V_13, V_14, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29) :-
    V_30 = array.min(V_14),
    V_31 = array.max(V_14),
    array.do_foldr5(V_13, V_30, V_31, V_14, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29).
array.map_foldl(V_6, V_7, V_8, V_14, V_15) :-
    V_10 = array.size(V_7),
    (if
      V_16 = 0 : int,
      int.(V_10 =< V_16)
    then
      V_8 = array.make_empty_array,
      V_15 = V_14
    else
      V_17 = 0 : int,
      V_11 = array.unsafe_elem(V_17, V_7),
      call(V_6, V_11, V_12, V_14, V_18),
      V_13 = array.init(V_10, V_12),
      V_19 = 1 : int,
      array.map_foldl_2(V_6, V_19, V_7, V_13, V_8, V_18, V_15)
    ).
array.map_corresponding_foldl(V_7, V_8, V_9, V_10, V_17, V_18) :-
    V_12 = array.size(V_8),
    (if
      V_19 = 0 : int,
      int.(V_12 =< V_19)
    then
      V_10 = array.make_empty_array,
      V_18 = V_17
    else
      V_20 = 0 : int,
      V_13 = array.unsafe_elem(V_20, V_8),
      V_21 = 0 : int,
      V_14 = array.unsafe_elem(V_21, V_9),
      call(V_7, V_13, V_14, V_15, V_17, V_22),
      V_16 = array.init(V_12, V_15),
      V_23 = 1 : int,
      array.map_corresponding_foldl_2(V_7, V_23, V_12, V_8, V_9, V_16, V_10, V_22, V_18)
    ).
array.all_true(V_3, V_4) :-
    V_5 = array.min(V_4),
    V_6 = array.max(V_4),
    array.do_all_true(V_3, V_5, V_6, V_4).
array.all_false(V_3, V_4) :-
    V_5 = array.min(V_4),
    V_6 = array.max(V_4),
    array.do_all_false(V_3, V_5, V_6, V_4).
:- pragma foreign_proc("C", array.append(ArrayA :: (builtin.in), ArrayB :: (builtin.in)) = (ArrayC :: (array.array_uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, sharing(yes(array.array(T), array.array(T), array.array(T)), [cel(ArrayA, [T]) - cel(ArrayC, [T]), cel(ArrayB, [T]) - cel(ArrayC, [T])]), will_not_modify_trail, doesnt_affect_liveness], "
    MR_Integer sizeC;
    MR_Integer i;
    MR_Integer offset;

    sizeC = ArrayA->size + ArrayB->size;
    ML_alloc_array(ArrayC, sizeC + 1, MR_ALLOC_ID);

    ArrayC->size = sizeC;
    for (i = 0; i < ArrayA->size; i++) {
        ArrayC->elements[i] = ArrayA->elements[i];
    }

    offset = ArrayA->size;
    for (i = 0; i < ArrayB->size; i++) {
        ArrayC->elements[offset + i] = ArrayB->elements[i];
    }
").
:- pragma foreign_proc("C", array.unsafe_init(Size :: (builtin.in), FirstElem :: (builtin.in), IndexToSet :: (builtin.in)) = (Array :: (array.array_uo)), [will_not_call_mercury, thread_safe, not_tabled_for_io, promise_pure, will_not_modify_trail, doesnt_affect_liveness], "
    ML_alloc_array(Array, Size + 1, MR_ALLOC_ID);

    /*
    ** In debugging grades we fill the array with the first element
    ** in case the return value of a call to this predicate is examined
    ** in the debugger.
    */
    #if defined(MR_EXEC_TRACE)
        ML_init_array(Array, Size, FirstElem);
    #else
        Array->size = Size;
        Array->elements[IndexToSet] = FirstElem;
    #endif

").
array.generate_2(V_6, V_7, V_8, V_11) = V_12 :-
    (if
      int.(V_6 < V_7)
    then
      V_10 = apply(V_8, V_6),
      array.unsafe_set(V_6, V_10, V_11, V_13),
      V_12 = array.generate_2(V_15, V_7, V_8, V_13),
      V_15 = int.(V_6 + V_16),
      V_16 = 1 : int
    else
      V_12 = V_11
    ).
array.generate_foldl_2(V_8, V_9, V_10, V_14, V_15, V_16, V_17) :-
    (if
      int.(V_8 < V_9)
    then
      call(V_10, V_8, V_13, V_16, V_18),
      array.unsafe_set(V_8, V_13, V_14, V_19),
      V_20 = int.(V_8 + V_23),
      V_23 = 1 : int,
      array.generate_foldl_2(V_20, V_9, V_10, V_19, V_15, V_18, V_17)
    else
      V_17 = V_16,
      V_15 = V_14
    ).
array.bsearch_2(V_7, V_8, V_9, V_10, V_11, V_12) :-
    V_13 = int.(V_9 - V_8),
    (if
      V_18 = 0 : int,
      int.(V_13 < V_18)
    then
      V_12 = maybe.no : maybe.maybe(int)
    else
      (if
        V_13 = 0 : int
      then
        array.lookup(V_7, V_8, V_14),
        (if
          V_19 = builtin.(=) : builtin.comparison_result,
          call(V_11, V_10, V_14, V_19)
        then
          V_12 = maybe.yes(V_8) : maybe.maybe(int)
        else
          V_12 = maybe.no : maybe.maybe(int)
        )
      else
        V_15 = int.(V_8 + V_20),
        V_20 = int.unchecked_right_shift(V_21, V_22),
        V_21 = int.(V_9 - V_8),
        V_22 = 1 : int,
        array.lookup(V_7, V_15, V_16),
        call(V_11, V_16, V_10, V_17),
        ( % disjunction
          V_17 = builtin.(<) : builtin.comparison_result,
          V_25 = int.(V_15 + V_26),
          V_26 = 1 : int,
          array.bsearch_2(V_7, V_25, V_9, V_10, V_11, V_12)
        ;
          V_17 = builtin.(=) : builtin.comparison_result,
          array.bsearch_2(V_7, V_8, V_15, V_10, V_11, V_12)
        ;
          V_17 = builtin.(>) : builtin.comparison_result,
          V_23 = int.(V_15 - V_24),
          V_24 = 1 : int,
          array.bsearch_2(V_7, V_8, V_23, V_10, V_11, V_12)
        )
      )
    ).
array.map_2(V_7, V_8, V_9, V_10, V_14, V_15) :-
    (if
      int.(V_7 >= V_8)
    then
      V_15 = V_14
    else
      array.unsafe_lookup(V_10, V_7, V_12),
      call(V_9, V_12, V_13),
      array.unsafe_set(V_7, V_13, V_14, V_16),
      V_17 = int.(V_7 + V_19),
      V_19 = 1 : int,
      array.map_2(V_17, V_8, V_9, V_10, V_16, V_15)
    ).
array.binary_search_loop(V_7, V_8, V_9, V_10, V_11, V_12) :-
    int.(V_10 =< V_11),
    V_13 = int.(V_10 + V_16),
    V_16 = int.unchecked_right_shift(V_17, V_18),
    V_17 = int.(V_11 - V_10),
    V_18 = 1 : int,
    array.unsafe_lookup(V_8, V_13, V_14),
    V_15 = apply(V_7, V_14, V_9),
    ( % disjunction
      V_15 = builtin.(>) : builtin.comparison_result,
      V_21 = int.(V_13 - V_22),
      V_22 = 1 : int,
      array.binary_search_loop(V_7, V_8, V_9, V_10, V_21, V_12)
    ;
      V_15 = builtin.(=) : builtin.comparison_result,
      V_12 = V_13
    ;
      V_15 = builtin.(<) : builtin.comparison_result,
      V_19 = int.(V_13 + V_20),
      V_20 = 1 : int,
      array.binary_search_loop(V_7, V_8, V_9, V_19, V_11, V_12)
    ).
array.approx_binary_search_loop(V_7, V_8, V_9, V_10, V_11, V_12) :-
    int.(V_10 =< V_11),
    V_13 = int.(V_10 + V_17),
    V_17 = int.unchecked_right_shift(V_18, V_19),
    V_18 = int.(V_11 - V_10),
    V_19 = 1 : int,
    array.unsafe_lookup(V_8, V_13, V_14),
    V_15 = apply(V_7, V_14, V_9),
    ( % disjunction
      V_15 = builtin.(>) : builtin.comparison_result,
      V_25 = int.(V_13 - V_26),
      V_26 = 1 : int,
      array.approx_binary_search_loop(V_7, V_8, V_9, V_10, V_25, V_12)
    ;
      V_15 = builtin.(=) : builtin.comparison_result,
      V_12 = V_13
    ;
      V_15 = builtin.(<) : builtin.comparison_result,
      (if
        (if
          int.(V_13 < V_11)
        then
          V_20 = int.(V_13 + V_21),
          V_21 = 1 : int,
          array.unsafe_lookup(V_8, V_20, V_16),
          V_22 = builtin.(<) : builtin.comparison_result,
          V_22 = apply(V_7, V_9, V_16)
        else
          V_13 = V_11
        )
      then
        V_12 = V_13
      else
        V_23 = int.(V_13 + V_24),
        V_24 = 1 : int,
        array.approx_binary_search_loop(V_7, V_8, V_9, V_23, V_11, V_12)
      )
    ).
array.do_foldl_func(V_7, V_8, V_9, V_10, V_11) = V_6 :-
    (if
      int.(V_11 < V_10)
    then
      V_6 = V_9
    else
      V_6 = array.do_foldl_func(V_7, V_8, V_12, V_14, V_11),
      V_12 = apply(V_7, V_13, V_9),
      V_13 = array.unsafe_elem(V_10, V_8),
      V_14 = int.(V_10 + V_15),
      V_15 = 1 : int
    ).
array.do_foldl_pred(V_7, V_8, V_9, V_10, V_12, V_13) :-
    (if
      int.(V_10 < V_9)
    then
      V_13 = V_12
    else
      V_14 = array.unsafe_elem(V_9, V_8),
      call(V_7, V_14, V_12, V_15),
      V_16 = int.(V_9 + V_18),
      V_18 = 1 : int,
      array.do_foldl_pred(V_7, V_8, V_16, V_10, V_15, V_13)
    ).
array.do_foldl2(V_9, V_10, V_11, V_12, V_15, V_16, V_17, V_18) :-
    (if
      int.(V_11 < V_10)
    then
      V_18 = V_17,
      V_16 = V_15
    else
      V_19 = array.unsafe_elem(V_10, V_12),
      call(V_9, V_19, V_15, V_20, V_17, V_21),
      V_22 = int.(V_10 + V_25),
      V_25 = 1 : int,
      array.do_foldl2(V_9, V_22, V_11, V_12, V_20, V_16, V_21, V_18)
    ).
array.do_foldl3(V_11, V_12, V_13, V_14, V_18, V_19, V_20, V_21, V_22, V_23) :-
    (if
      int.(V_13 < V_12)
    then
      V_23 = V_22,
      V_21 = V_20,
      V_19 = V_18
    else
      V_24 = array.unsafe_elem(V_12, V_14),
      call(V_11, V_24, V_18, V_25, V_20, V_26, V_22, V_27),
      V_28 = int.(V_12 + V_32),
      V_32 = 1 : int,
      array.do_foldl3(V_11, V_28, V_13, V_14, V_25, V_19, V_26, V_21, V_27, V_23)
    ).
array.do_foldl4(V_13, V_14, V_15, V_16, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28) :-
    (if
      int.(V_15 < V_14)
    then
      V_28 = V_27,
      V_26 = V_25,
      V_24 = V_23,
      V_22 = V_21
    else
      V_29 = array.unsafe_elem(V_14, V_16),
      call(V_13, V_29, V_21, V_30, V_23, V_31, V_25, V_32, V_27, V_33),
      V_34 = int.(V_14 + V_39),
      V_39 = 1 : int,
      array.do_foldl4(V_13, V_34, V_15, V_16, V_30, V_22, V_31, V_24, V_32, V_26, V_33, V_28)
    ).
array.do_foldl5(V_15, V_16, V_17, V_18, V_24, V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33) :-
    (if
      int.(V_17 < V_16)
    then
      V_33 = V_32,
      V_31 = V_30,
      V_29 = V_28,
      V_27 = V_26,
      V_25 = V_24
    else
      V_34 = array.unsafe_elem(V_16, V_18),
      call(V_15, V_34, V_24, V_35, V_26, V_36, V_28, V_37, V_30, V_38, V_32, V_39),
      V_40 = int.(V_16 + V_46),
      V_46 = 1 : int,
      array.do_foldl5(V_15, V_40, V_17, V_18, V_35, V_25, V_36, V_27, V_37, V_29, V_38, V_31, V_39, V_33)
    ).
array.do_foldr_func(V_7, V_8, V_9, V_10, V_11) = V_6 :-
    (if
      int.(V_11 < V_10)
    then
      V_6 = V_9
    else
      V_6 = array.do_foldr_func(V_7, V_8, V_12, V_10, V_14),
      V_12 = apply(V_7, V_13, V_9),
      V_13 = array.unsafe_elem(V_11, V_8),
      V_14 = int.(V_11 - V_15),
      V_15 = 1 : int
    ).
array.do_foldr_pred(V_7, V_8, V_9, V_10, V_12, V_13) :-
    (if
      int.(V_9 < V_8)
    then
      V_13 = V_12
    else
      V_14 = array.unsafe_elem(V_9, V_10),
      call(V_7, V_14, V_12, V_15),
      V_16 = int.(V_9 - V_18),
      V_18 = 1 : int,
      array.do_foldr_pred(V_7, V_8, V_16, V_10, V_15, V_13)
    ).
array.do_foldr2(V_9, V_10, V_11, V_12, V_15, V_16, V_17, V_18) :-
    (if
      int.(V_11 < V_10)
    then
      V_18 = V_17,
      V_16 = V_15
    else
      V_19 = array.unsafe_elem(V_11, V_12),
      call(V_9, V_19, V_15, V_20, V_17, V_21),
      V_22 = int.(V_11 - V_25),
      V_25 = 1 : int,
      array.do_foldr2(V_9, V_10, V_22, V_12, V_20, V_16, V_21, V_18)
    ).
array.do_foldr3(V_11, V_12, V_13, V_14, V_18, V_19, V_20, V_21, V_22, V_23) :-
    (if
      int.(V_13 < V_12)
    then
      V_23 = V_22,
      V_21 = V_20,
      V_19 = V_18
    else
      V_24 = array.unsafe_elem(V_13, V_14),
      call(V_11, V_24, V_18, V_25, V_20, V_26, V_22, V_27),
      V_28 = int.(V_13 - V_32),
      V_32 = 1 : int,
      array.do_foldr3(V_11, V_12, V_28, V_14, V_25, V_19, V_26, V_21, V_27, V_23)
    ).
array.do_foldr4(V_13, V_14, V_15, V_16, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28) :-
    (if
      int.(V_15 < V_14)
    then
      V_28 = V_27,
      V_26 = V_25,
      V_24 = V_23,
      V_22 = V_21
    else
      V_29 = array.unsafe_elem(V_15, V_16),
      call(V_13, V_29, V_21, V_30, V_23, V_31, V_25, V_32, V_27, V_33),
      V_34 = int.(V_15 - V_39),
      V_39 = 1 : int,
      array.do_foldr4(V_13, V_14, V_34, V_16, V_30, V_22, V_31, V_24, V_32, V_26, V_33, V_28)
    ).
array.do_foldr5(V_15, V_16, V_17, V_18, V_24, V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33) :-
    (if
      int.(V_17 < V_16)
    then
      V_33 = V_32,
      V_31 = V_30,
      V_29 = V_28,
      V_27 = V_26,
      V_25 = V_24
    else
      V_34 = array.unsafe_elem(V_17, V_18),
      call(V_15, V_34, V_24, V_35, V_26, V_36, V_28, V_37, V_30, V_38, V_32, V_39),
      V_40 = int.(V_17 - V_46),
      V_46 = 1 : int,
      array.do_foldr5(V_15, V_16, V_40, V_18, V_35, V_25, V_36, V_27, V_37, V_29, V_38, V_31, V_39, V_33)
    ).
array.map_foldl_2(V_8, V_9, V_10, V_15, V_16, V_17, V_18) :-
    (if
      V_19 = array.size(V_10),
      int.(V_9 < V_19)
    then
      V_13 = array.unsafe_elem(V_9, V_10),
      call(V_8, V_13, V_14, V_17, V_20),
      V_21 = array.'unsafe_elem :='(V_9, V_15, V_14),
      V_22 = int.(V_9 + V_25),
      V_25 = 1 : int,
      array.map_foldl_2(V_8, V_22, V_10, V_21, V_16, V_20, V_18)
    else
      V_18 = V_17,
      V_16 = V_15
    ).
array.map_corresponding_foldl_2(V_10, V_11, V_12, V_13, V_14, V_20, V_21, V_22, V_23) :-
    (if
      int.(V_11 < V_12)
    then
      V_17 = array.unsafe_elem(V_11, V_13),
      V_18 = array.unsafe_elem(V_11, V_14),
      call(V_10, V_17, V_18, V_19, V_22, V_24),
      V_25 = array.'unsafe_elem :='(V_11, V_20, V_19),
      V_26 = int.(V_11 + V_29),
      V_29 = 1 : int,
      array.map_corresponding_foldl_2(V_10, V_26, V_12, V_13, V_14, V_25, V_21, V_24, V_23)
    else
      V_23 = V_22,
      V_21 = V_20
    ).
array.do_all_true(V_5, V_6, V_7, V_8) :-
    (if
      int.(V_6 =< V_7)
    then
      V_9 = array.unsafe_elem(V_6, V_8),
      call(V_5, V_9),
      V_10 = int.(V_6 + V_11),
      V_11 = 1 : int,
      array.do_all_true(V_5, V_10, V_7, V_8)
    else
      true
    ).
array.do_all_false(V_5, V_6, V_7, V_8) :-
    (if
      int.(V_6 =< V_7)
    then
      V_9 = array.unsafe_elem(V_6, V_8),
      \+ (
        call(V_5, V_9)
      ),
      V_10 = int.(V_6 + V_11),
      V_11 = 1 : int,
      array.do_all_false(V_5, V_10, V_7, V_8)
    else
      true
    ).
array.samsort_subarray(V_5, V_6, V_7) = V_8 :-
    V_10 = 0 : int,
    V_11 = array.copy(V_5),
    V_12 = V_6,
    array.samsort_up(V_10, V_11, V_8, V_5, V_9, V_6, V_7, V_12).
:- pragma exceptions(predicate, (array.make_empty_array), 1, 0, will_not_throw).
:- pragma exceptions(function, (array.make_empty_array), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (array.init), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.init), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.array), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.generate), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl), 5, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl), 5, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.min), 2, 0, will_not_throw).
:- pragma exceptions(function, (array.min), 2, 0, will_not_throw).
:- pragma exceptions(function, (array.least_index), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (array.max), 2, 0, will_not_throw).
:- pragma exceptions(function, (array.max), 2, 0, will_not_throw).
:- pragma exceptions(function, (array.greatest_index), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (array.size), 2, 0, will_not_throw).
:- pragma exceptions(function, (array.size), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (array.bounds), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (array.in_bounds), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (array.is_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (array.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.semidet_lookup), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (array.unsafe_lookup), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (array.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.semidet_set), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (array.unsafe_set), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (array.slow_set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.slow_set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.semidet_slow_set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.elem), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.unsafe_elem), 3, 0, will_not_throw).
:- pragma exceptions(function, (array.'elem :='), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.'unsafe_elem :='), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (array.member), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.copy), 2, 0, will_not_throw).
:- pragma exceptions(function, (array.copy), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (array.resize), 4, 0, will_not_throw).
:- pragma exceptions(function, (array.resize), 4, 0, will_not_throw).
:- pragma exceptions(predicate, (array.shrink), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.shrink), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.from_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.from_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.from_reverse_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.to_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.to_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.fetch_items), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.fetch_items), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.bsearch), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.bsearch), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.binary_search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.binary_search), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.approx_binary_search), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.approx_binary_search), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.map), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.array_compare), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.sort), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.sort_fix_2014), 0, 0, will_not_throw).
:- pragma exceptions(function, (array.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl4), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl4), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl4), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl4), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl4), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl4), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl5), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl5), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl5), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl5), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl5), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldl5), 12, 5, may_throw(user_exception)).
:- pragma exceptions(function, (array.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.foldr), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr4), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr4), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr4), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr4), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr4), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr4), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr5), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr5), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr5), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr5), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr5), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.foldr5), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.all_false), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.append), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (array.random_permutation), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.array_to_doc), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.dynamic_cast_to_array), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.array_equal), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.array_compare), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.unsafe_init), 4, 0, will_not_throw).
:- pragma exceptions(function, (array.generate_2), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl_2), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl_2), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl_2), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl_2), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl_2), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.generate_foldl_2), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.bsearch_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.binary_search_loop), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.approx_binary_search_loop), 6, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.do_foldl_func), 6, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.do_foldl_func), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl2), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl2), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl2), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl2), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl2), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl2), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl3), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl3), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl3), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl3), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl3), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl3), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl4), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl4), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl4), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl4), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl4), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl4), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl5), 14, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl5), 14, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl5), 14, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl5), 14, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl5), 14, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldl5), 14, 5, may_throw(user_exception)).
:- pragma exceptions(function, (array.do_foldr_func), 6, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.do_foldr_func), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr_pred), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr_pred), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr_pred), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr_pred), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr_pred), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr_pred), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr2), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr2), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr2), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr2), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr2), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr2), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr3), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr3), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr3), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr3), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr3), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr3), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr4), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr4), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr4), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr4), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr4), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr4), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr5), 14, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr5), 14, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr5), 14, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr5), 14, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr5), 14, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_foldr5), 14, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl_2), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl_2), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl_2), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_foldl_2), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl_2), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl_2), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl_2), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.map_corresponding_foldl_2), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_all_true), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.do_all_false), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (array.samsort_subarray), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (array.samsort_up), 8, 0, may_throw(user_exception)).
:- pragma termination_info(array.make_empty_array((array.array_uo)), infinite, cannot_loop).
:- pragma termination_info((array.make_empty_array) = (array.array_uo), infinite, cannot_loop).
:- pragma termination_info(array.init((builtin.in), (builtin.in), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.init((builtin.in), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.array((builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.generate((builtin.in), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.generate_foldl((builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl((builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl((builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl((builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl((builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl((builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.min((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(array.min((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(array.least_index((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(array.max((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(array.max((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(array.greatest_index((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(array.size((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(array.size((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(array.bounds((builtin.in), (builtin.out), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(array.in_bounds((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(array.is_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(array.lookup((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.lookup((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.semidet_lookup((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(array.unsafe_lookup((builtin.in), (builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(array.set((builtin.in), (builtin.in), (array.array_di), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.set((array.array_di), (builtin.in), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.semidet_set((builtin.in), (builtin.in), (array.array_di), (array.array_uo)), infinite, cannot_loop).
:- pragma termination_info(array.unsafe_set((builtin.in), (builtin.in), (array.array_di), (array.array_uo)), infinite, cannot_loop).
:- pragma termination_info(array.slow_set((builtin.in), (builtin.in), (builtin.in), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.slow_set((builtin.in), (builtin.in), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.semidet_slow_set((builtin.in), (builtin.in), (builtin.in), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.elem((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.unsafe_elem((builtin.in), (builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(array.'elem :='((builtin.in), (array.array_di), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.'unsafe_elem :='((builtin.in), (array.array_di), (builtin.in)) = (array.array_uo), infinite, cannot_loop).
:- pragma termination_info(array.member((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.copy((builtin.in), (array.array_uo)), infinite, cannot_loop).
:- pragma termination_info(array.copy((builtin.in)) = (array.array_uo), infinite, cannot_loop).
:- pragma termination_info(array.resize((builtin.in), (builtin.in), (array.array_di), (array.array_uo)), infinite, cannot_loop).
:- pragma termination_info(array.resize((array.array_di), (builtin.in), (builtin.in)) = (array.array_uo), infinite, cannot_loop).
:- pragma termination_info(array.shrink((builtin.in), (array.array_di), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.shrink((array.array_di), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.from_list((builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.from_list((builtin.in), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.from_reverse_list((builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.to_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.to_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.fetch_items((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.fetch_items((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.bsearch((builtin.in), (builtin.in), builtin.in((builtin.comparison_pred)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.bsearch((builtin.in), (builtin.in), builtin.in((builtin.comparison_func))) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.binary_search((array.array_ui), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.binary_search((builtin.in), (array.array_ui), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.approx_binary_search((array.array_ui), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.approx_binary_search((builtin.in), (array.array_ui), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map((pred((builtin.in), (builtin.out)) is det), (array.array_di), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.map((func((builtin.in)) = (builtin.out) is det), (array.array_di)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.array_compare((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(array.sort((array.array_di)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info((array.sort_fix_2014), finite(0, []), cannot_loop).
:- pragma termination_info(array.foldl((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.foldl((func((builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di)) = (builtin.uo), infinite, can_loop).
:- pragma termination_info(array.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.foldr((func((builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di)) = (builtin.uo), infinite, can_loop).
:- pragma termination_info(array.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.map_foldl(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_foldl(builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.map_foldl(builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.map_foldl(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(array.all_false(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(array.append((builtin.in), (builtin.in)) = (array.array_uo), infinite, cannot_loop).
:- pragma termination_info(array.random_permutation((array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.array_to_doc((array.array_ui)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.dynamic_cast_to_array((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.array_equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(array.array_compare((builtin.uo), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), cannot_loop).
:- pragma termination_info(array.unsafe_init((builtin.in), (builtin.in), (builtin.in)) = (array.array_uo), infinite, cannot_loop).
:- pragma termination_info(array.generate_2((builtin.in), (builtin.in), (builtin.in), (array.array_di)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.generate_foldl_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.bsearch_2((builtin.in), (builtin.in), (builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_2((builtin.in), (builtin.in), builtin.in((pred((builtin.in), (builtin.out)) is det)), (builtin.in), (array.array_di), (array.array_uo)), infinite, can_loop).
:- pragma termination_info(array.binary_search_loop((builtin.in), (array.array_ui), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.approx_binary_search_loop((builtin.in), (array.array_ui), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl_func((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.do_foldl_func((func((builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di), (builtin.in), (builtin.in)) = (builtin.uo), infinite, can_loop).
:- pragma termination_info(array.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldl5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr_func((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(array.do_foldr_func((func((builtin.in), (builtin.di)) = (builtin.uo) is det), (builtin.in), (builtin.di), (builtin.in), (builtin.in)) = (builtin.uo), infinite, can_loop).
:- pragma termination_info(array.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr_pred((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr_pred((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr_pred((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr2((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr3((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr4((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.do_foldr5((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.map_foldl_2(builtin.in((pred((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(array.map_corresponding_foldl_2(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (array.array_di), (array.array_uo), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(array.do_all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(array.do_all_false(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(array.samsort_subarray((array.array_di), (builtin.in), (builtin.in)) = (array.array_uo), infinite, can_loop).
:- pragma termination_info(array.samsort_up((builtin.in), (array.array_di), (array.array_uo), (array.array_di), (array.array_uo), (builtin.in), (builtin.in), (builtin.in)), infinite, can_loop).
