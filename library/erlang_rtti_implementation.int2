:- module erlang_rtti_implementation.
:- interface.
:- type type_ctor_info.
:- type type_ctor_info_evaled.
:- type type_info.
:- type_representation(erlang_rtti_implementation.module_name, is_eqv_to(erlang_rtti_implementation.sym_name)).
:- type_representation(erlang_rtti_implementation.pti_info(V_1), is_eqv_to(maybe.maybe({erlang_rtti_implementation.erlang_du_functor, V_1}))).
:- type_representation(erlang_rtti_implementation.tc_type, is_eqv_to(erlang_rtti_implementation.maybe_pseudo_type_info)).
:- type_representation(erlang_rtti_implementation.ti_info(V_1), is_eqv_to(maybe.maybe({erlang_rtti_implementation.type_info, erlang_rtti_implementation.pti_info(V_1)}))).
:- type_representation(erlang_rtti_implementation.type_ctor_info, du_repn(direct_dummy("type_ctor_info", [foreign_type(erlang("", []))]))).
:- type_representation(erlang_rtti_implementation.type_ctor_info_evaled, du_repn(direct_dummy("type_ctor_info_evaled", [foreign_type(erlang("", []))]))).
:- type_representation(erlang_rtti_implementation.type_info, du_repn(direct_dummy("type_info", [foreign_type(erlang("", []))]))).
:- implementation.
:- pragma foreign_import_module("Erlang", erlang_rtti_implementation).
:- type erlang_atom
    --->    erlang_atom .
:- pragma foreign_type(erlang, erlang_atom, "").
:- type pseudo_type_info
    --->    pseudo_type_info .
:- pragma foreign_type(erlang, pseudo_type_info, "").
:- type pseudo_type_info_thunk
    --->    pseudo_type_info_thunk .
:- pragma foreign_type(erlang, pseudo_type_info_thunk, "").
:- type type_ctor_info
    --->    type_ctor_info .
:- pragma foreign_type(erlang, type_ctor_info, "").
:- type type_ctor_info_evaled
    --->    type_ctor_info_evaled .
:- pragma foreign_type(erlang, type_ctor_info_evaled, "").
:- type type_info
    --->    type_info .
:- pragma foreign_type(erlang, type_info, "").
:- type type_info_thunk
    --->    type_info_thunk .
:- pragma foreign_type(erlang, type_info_thunk, "").
