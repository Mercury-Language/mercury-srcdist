:- module edit_distance.
:- use_module array.
:- use_module builtin.
:- use_module char.
:- use_module cord.
:- use_module io.
:- use_module list.
:- use_module maybe.
:- use_module private_builtin.
:- use_module require.
:- use_module string.
:- use_module uint.
:- use_module string.format.
:- use_module string.parse_util.

:- pred edit_distance.find_edit_distance_ceiling(edit_distance.edit_params(T), list.list(T), list.list(T), maybe.maybe(uint), uint).
:- mode find_edit_distance_ceiling(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out) is det.

edit_distance.find_edit_distance(V_5, V_6, V_7, V_8) :-
    V_9 = maybe.no : maybe.maybe(uint),
    edit_distance.find_edit_distance_ceiling(V_5, V_6, V_7, V_9, V_8).

:- pragma termination_info(edit_distance.find_best_close_enough_seqs(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(edit_distance.find_best_close_enough_strings(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(edit_distance.find_closest_seqs(builtin.in, builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(edit_distance.find_closest_strings(builtin.in, builtin.in, builtin.in, builtin.out, builtin.out, builtin.out), infinite, can_loop).
:- pragma termination_info(edit_distance.find_edit_distance(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(edit_distance.find_edit_distance_ceiling(builtin.in, builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).

:- pragma exceptions(predicate, edit_distance.find_best_close_enough_seqs, 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, edit_distance.find_best_close_enough_strings, 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, edit_distance.find_closest_seqs, 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, edit_distance.find_closest_strings, 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, edit_distance.find_edit_distance, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, edit_distance.find_edit_distance_ceiling, 5, 0, may_throw(user_exception)).
