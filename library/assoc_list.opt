:- module assoc_list.
:- use_module builtin.
:- use_module list.
:- use_module pair.
:- use_module private_builtin.
:- use_module require.
:- use_module string.
:- use_module type_desc.

:- pred assoc_list.common_subset_loop(list.list(pair.pair(K, V)), list.list(pair.pair(K, V)), list.list(pair.pair(K, V)), list.list(pair.pair(K, V))).
:- mode common_subset_loop((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred assoc_list.from_corresponding_loop(list.list(K), list.list(V), list.list(pair.pair(K, V))).
:- mode from_corresponding_loop((builtin.in), (builtin.in), (builtin.out)) is semidet.

assoc_list.common_subset(V_4, V_5) = V_6 :-
    V_8 = list.[] : list.list(pair.pair(K_1, V_2)),
    assoc_list.common_subset_loop(V_4, V_5, V_8, V_7),
    list.reverse(V_7, V_6).

assoc_list.det_elem(V_5, V_4) = V_6 :-
    assoc_list.lookup(V_4, V_5, V_6).

assoc_list.elem(V_5, V_4) = V_6 :-
    assoc_list.search(V_4, V_5, V_6).

assoc_list.filter(V_4, V_5) = V_6 :-
    assoc_list.filter(V_4, V_5, V_6).

assoc_list.filter(V_4, list.[], list.[]).
assoc_list.filter(V_5, list.[V_11 | V_8], V_9) :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_1, V_2),
    ( if
      call(V_5, V_6)
    then
      assoc_list.filter(V_5, V_8, V_10),
      V_9 = list.[V_12 | V_10] : list.list(pair.pair(K_1, V_2)),
      V_12 = pair.(V_6 - V_7) : pair.pair(K_1, V_2)
    else
      assoc_list.filter(V_5, V_8, V_9)
    ).

assoc_list.filter(V_5, list.[], list.[], list.[]).
assoc_list.filter(V_6, list.[V_14 | V_9], V_10, V_11) :-
    V_14 = pair.(V_7 - V_8) : pair.pair(K_1, V_2),
    ( if
      call(V_6, V_7)
    then
      assoc_list.filter(V_6, V_9, V_12, V_11),
      V_10 = list.[V_15 | V_12] : list.list(pair.pair(K_1, V_2)),
      V_15 = pair.(V_7 - V_8) : pair.pair(K_1, V_2)
    else
      assoc_list.filter(V_6, V_9, V_10, V_13),
      V_11 = list.[V_16 | V_13] : list.list(pair.pair(K_1, V_2)),
      V_16 = pair.(V_7 - V_8) : pair.pair(K_1, V_2)
    ).

assoc_list.foldl(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
assoc_list.foldl(V_9, list.[V_16 | V_12], V_14, V_15) :-
    V_16 = pair.(V_10 - V_11) : pair.pair(K_1, V_2),
    call(V_9, V_10, V_11, V_14, V_17),
    assoc_list.foldl(V_9, V_12, V_17, V_15).

assoc_list.foldl2(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
assoc_list.foldl2(V_14, list.[V_24 | V_17], V_20, V_21, V_22, V_23) :-
    V_24 = pair.(V_15 - V_16) : pair.pair(K_1, V_2),
    call(V_14, V_15, V_16, V_20, V_25, V_22, V_26),
    assoc_list.foldl2(V_14, V_17, V_25, V_21, V_26, V_23).

assoc_list.foldl2_values(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
assoc_list.foldl2_values(V_14, list.[V_15 | V_16], V_21, V_22, V_23, V_24) :-
    V_15 = pair.(V_19 - V_20) : pair.pair(K_4, V_1),
    call(V_14, V_20, V_21, V_25, V_23, V_26),
    assoc_list.foldl2_values(V_14, V_16, V_25, V_22, V_26, V_24).

assoc_list.foldl3(V_9, list.[], V_13, V_14, V_15, V_16, V_17, V_18) :-
    V_18 = V_17,
    V_16 = V_15,
    V_14 = V_13.
assoc_list.foldl3(V_19, list.[V_32 | V_22], V_26, V_27, V_28, V_29, V_30, V_31) :-
    V_32 = pair.(V_20 - V_21) : pair.pair(K_1, V_2),
    call(V_19, V_20, V_21, V_26, V_33, V_28, V_34, V_30, V_35),
    assoc_list.foldl3(V_19, V_22, V_33, V_27, V_34, V_29, V_35, V_31).

assoc_list.foldl3_values(V_9, list.[], V_13, V_14, V_15, V_16, V_17, V_18) :-
    V_18 = V_17,
    V_16 = V_15,
    V_14 = V_13.
assoc_list.foldl3_values(V_19, list.[V_20 | V_21], V_27, V_28, V_29, V_30, V_31, V_32) :-
    V_20 = pair.(V_25 - V_26) : pair.pair(K_5, V_1),
    call(V_19, V_26, V_27, V_33, V_29, V_34, V_31, V_35),
    assoc_list.foldl3_values(V_19, V_21, V_33, V_28, V_34, V_30, V_35, V_32).

assoc_list.foldl_keys(V_5, list.[], V_6) = V_6.
assoc_list.foldl_keys(V_7, list.[V_8 | V_9], V_13) = V_14 :-
    V_8 = pair.(V_11 - V_12) : pair.pair(K_1, V_3),
    V_15 = apply(V_7, V_11, V_13),
    V_14 = assoc_list.foldl_keys(V_7, V_9, V_15).

assoc_list.foldl_keys(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
assoc_list.foldl_keys(V_9, list.[V_10 | V_11], V_15, V_16) :-
    V_10 = pair.(V_13 - V_14) : pair.pair(K_1, V_3),
    call(V_9, V_13, V_15, V_17),
    assoc_list.foldl_keys(V_9, V_11, V_17, V_16).

assoc_list.foldl_values(V_5, list.[], V_6) = V_6.
assoc_list.foldl_values(V_7, list.[V_8 | V_9], V_13) = V_14 :-
    V_8 = pair.(V_11 - V_12) : pair.pair(K_3, V_1),
    V_15 = apply(V_7, V_12, V_13),
    V_14 = assoc_list.foldl_values(V_7, V_9, V_15).

assoc_list.foldl_values(V_5, list.[], V_7, V_8) :-
    V_8 = V_7.
assoc_list.foldl_values(V_9, list.[V_10 | V_11], V_15, V_16) :-
    V_10 = pair.(V_13 - V_14) : pair.pair(K_3, V_1),
    call(V_9, V_14, V_15, V_17),
    assoc_list.foldl_values(V_9, V_11, V_17, V_16).

assoc_list.from_corresponding_lists(V_4, V_5) = V_6 :-
    assoc_list.from_corresponding_lists(V_4, V_5, V_6).

assoc_list.keys(V_3) = V_4 :-
    assoc_list.keys(V_3, V_4).

assoc_list.map_keys_only(V_4, list.[]) = list.[].
assoc_list.map_keys_only(V_5, list.[V_11 | V_8]) = list.[V_12 | V_10] :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_1, V_3),
    V_12 = pair.(V_9 - V_7) : pair.pair(L_2, V_3),
    V_9 = apply(V_5, V_6),
    V_10 = assoc_list.map_keys_only(V_5, V_8).

assoc_list.map_keys_only(V_4, list.[], list.[]).
assoc_list.map_keys_only(V_5, list.[V_11 | V_8], list.[V_12 | V_10]) :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_1, V_3),
    V_12 = pair.(V_9 - V_7) : pair.pair(L_2, V_3),
    call(V_5, V_6, V_9),
    assoc_list.map_keys_only(V_5, V_8, V_10).

assoc_list.map_values(V_4, list.[]) = list.[].
assoc_list.map_values(V_5, list.[V_11 | V_8]) = list.[V_12 | V_10] :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_1, V_2),
    V_12 = pair.(V_6 - V_9) : pair.pair(K_1, W_3),
    V_9 = apply(V_5, V_6, V_7),
    V_10 = assoc_list.map_values(V_5, V_8).

assoc_list.map_values(V_4, list.[], list.[]).
assoc_list.map_values(V_5, list.[V_11 | V_8], list.[V_12 | V_10]) :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_1, V_2),
    V_12 = pair.(V_6 - V_9) : pair.pair(K_1, W_3),
    call(V_5, V_6, V_7, V_9),
    assoc_list.map_values(V_5, V_8, V_10).

assoc_list.map_values_only(V_4, list.[]) = list.[].
assoc_list.map_values_only(V_5, list.[V_11 | V_8]) = list.[V_12 | V_10] :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_3, V_1),
    V_12 = pair.(V_6 - V_9) : pair.pair(K_3, W_2),
    V_9 = apply(V_5, V_7),
    V_10 = assoc_list.map_values_only(V_5, V_8).

assoc_list.map_values_only(V_4, list.[], list.[]).
assoc_list.map_values_only(V_5, list.[V_11 | V_8], list.[V_12 | V_10]) :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_3, V_1),
    V_12 = pair.(V_6 - V_9) : pair.pair(K_3, W_2),
    call(V_5, V_7, V_9),
    assoc_list.map_values_only(V_5, V_8, V_10).

assoc_list.maybe_from_corresponding_lists(V_4, V_5, V_6) :-
    assoc_list.from_corresponding_loop(V_4, V_5, V_6).

assoc_list.merge(V_4, V_5) = V_6 :-
    assoc_list.merge(V_4, V_5, V_6).

assoc_list.negated_filter(V_4, V_5) = V_6 :-
    assoc_list.negated_filter(V_4, V_5, V_6).

assoc_list.negated_filter(V_4, list.[], list.[]).
assoc_list.negated_filter(V_5, list.[V_11 | V_8], V_9) :-
    V_11 = pair.(V_6 - V_7) : pair.pair(K_1, V_2),
    ( if
      call(V_5, V_6)
    then
      assoc_list.negated_filter(V_5, V_8, V_9)
    else
      assoc_list.negated_filter(V_5, V_8, V_10),
      V_9 = list.[V_12 | V_10] : list.list(pair.pair(K_1, V_2)),
      V_12 = pair.(V_6 - V_7) : pair.pair(K_1, V_2)
    ).

assoc_list.reverse_members(V_3) = V_4 :-
    assoc_list.reverse_members(V_3, V_4).

assoc_list.svremove(V_5, V_6, V_8, V_9) :-
    assoc_list.remove(V_8, V_5, V_6, V_9).

assoc_list.values(V_3) = V_4 :-
    assoc_list.values(V_3, V_4).

:- pragma termination_info(assoc_list.common_subset((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.common_subset_loop((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.det_elem((builtin.in), (builtin.in)) = (builtin.out), finite(-4, [no, no, no, yes, no]), can_loop).
:- pragma termination_info(assoc_list.elem((builtin.in), (builtin.in)) = (builtin.out), finite(-4, [no, no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl2_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3(builtin.in((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl3_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_keys(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is multi)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.foldl_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is nondet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.from_corresponding_lists((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, yes, yes, no]), can_loop).
:- pragma termination_info(assoc_list.from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no]), can_loop).
:- pragma termination_info(assoc_list.from_corresponding_loop((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.keys((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.keys((builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.keys_and_values((builtin.in), (builtin.out), (builtin.out)), finite(0, [no, no, yes, no, no]), cannot_loop).
:- pragma termination_info(assoc_list.lookup((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, no, yes, no, no]), can_loop).
:- pragma termination_info(assoc_list.map_keys_only((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.map_keys_only(builtin.in((pred((builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.map_values((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.map_values(builtin.in((pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.map_values_only((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.map_values_only(builtin.in((pred((builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.maybe_from_corresponding_lists((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.merge((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.merge((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.negated_filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(assoc_list.negated_filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(assoc_list.remove((builtin.in), (builtin.in), (builtin.out), (builtin.out)), finite(-4, [no, no, yes, no, no, no]), cannot_loop).
:- pragma termination_info(assoc_list.reverse_members((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.reverse_members((builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.search((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, no, yes, no, no]), cannot_loop).
:- pragma termination_info(assoc_list.svremove((builtin.in), (builtin.out), (builtin.in), (builtin.out)), finite(-4, [no, no, no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.update((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, yes, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.values((builtin.in)) = (builtin.out), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(assoc_list.values((builtin.in), (builtin.out)), finite(0, [no, no, yes, no]), cannot_loop).

:- pragma exceptions(function, (assoc_list.common_subset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.common_subset_loop), 4, 0, conditional).
:- pragma exceptions(function, (assoc_list.det_elem), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.elem), 2, 0, conditional).
:- pragma exceptions(function, (assoc_list.filter), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl2_values), 6, 7, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl3_values), 8, 7, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.foldl_keys), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_keys), 4, 7, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.foldl_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 6, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.foldl_values), 4, 7, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.from_corresponding_lists), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.from_corresponding_lists), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.from_corresponding_loop), 3, 0, will_not_throw).
:- pragma exceptions(function, (assoc_list.keys), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (assoc_list.keys), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (assoc_list.keys_and_values), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (assoc_list.lookup), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.map_keys_only), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.map_keys_only), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.map_values), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.map_values), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (assoc_list.map_values_only), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.map_values_only), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.maybe_from_corresponding_lists), 3, 0, will_not_throw).
:- pragma exceptions(function, (assoc_list.merge), 2, 0, conditional).
:- pragma exceptions(predicate, (assoc_list.merge), 3, 0, conditional).
:- pragma exceptions(function, (assoc_list.negated_filter), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.negated_filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (assoc_list.remove), 4, 0, conditional).
:- pragma exceptions(function, (assoc_list.reverse_members), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (assoc_list.reverse_members), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (assoc_list.search), 3, 0, conditional).
:- pragma exceptions(predicate, (assoc_list.svremove), 4, 0, conditional).
:- pragma exceptions(predicate, (assoc_list.update), 4, 0, conditional).
:- pragma exceptions(function, (assoc_list.values), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (assoc_list.values), 2, 0, will_not_throw).
