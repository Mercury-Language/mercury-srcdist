:- module thread.semaphore.

:- pragma termination_info((thread.semaphore).impure_init(builtin.uo), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).impure_init(builtin.in) = builtin.uo, infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).impure_init(builtin.in, builtin.uo), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).impure_signal(builtin.in), finite(0, [no]), cannot_loop).
:- pragma termination_info((thread.semaphore).impure_try_wait(builtin.in, builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).impure_wait(builtin.in), finite(0, [no]), cannot_loop).
:- pragma termination_info((thread.semaphore).init(builtin.uo, builtin.di, builtin.uo), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).init(builtin.in, builtin.uo, builtin.di, builtin.uo), infinite, cannot_loop).
:- pragma termination_info((thread.semaphore).signal(builtin.in, builtin.di, builtin.uo), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).try_wait(builtin.in, builtin.out, builtin.di, builtin.uo), finite(0, [no, no, yes, no]), cannot_loop).
:- pragma termination_info((thread.semaphore).wait(builtin.in, builtin.di, builtin.uo), finite(0, [no, yes, no]), cannot_loop).

:- pragma exceptions(predicate, (thread.semaphore).impure_init, 1, 0, will_not_throw).
:- pragma exceptions(function, (thread.semaphore).impure_init, 1, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).impure_init, 2, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).impure_signal, 1, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).impure_try_wait, 2, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).impure_wait, 1, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).init, 3, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).init, 4, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).signal, 3, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).try_wait, 4, 0, will_not_throw).
:- pragma exceptions(predicate, (thread.semaphore).wait, 3, 0, will_not_throw).
