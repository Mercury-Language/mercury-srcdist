:- module bitmap.
:- interface.
:- type bit_index == int.
:- type bitmap.
:- type bitmap_error
    --->    bitmap_error(string).
:- type byte == int.
:- type byte_index == int.
:- type num_bits == int.
:- type num_bytes == int.
:- type slice.
:- type word == int.
:- inst (bitmap) == ground.
:- inst (uniq_bitmap) == (bitmap.bitmap).
:- mode (bitmap_di) == builtin.in((bitmap.uniq_bitmap)).
:- mode (bitmap_ui) == builtin.in((bitmap.uniq_bitmap)).
:- mode (bitmap_uo) == builtin.out((bitmap.uniq_bitmap)).
:- type_representation(bit_index, is_eqv_to(int)).
:- type_representation(bit_index_in_byte, is_eqv_to(int)).
:- type_representation(bitmap_error, du_repn(notag("bitmap_error", []))).
:- type_representation(byte, is_eqv_to(int)).
:- type_representation(byte_index, is_eqv_to(int)).
:- type_representation(num_bits, is_eqv_to(int)).
:- type_representation(num_bytes, is_eqv_to(int)).
:- type_representation(slice, is_word_aligned_ptr).
:- type_representation(word, is_eqv_to(int)).
:- implementation.
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("Erlang", bitmap).
:- pragma foreign_type(c, bitmap, "MR_BitmapPtr", [can_pass_as_mercury_type])
    where   type_is_abstract_noncanonical.
:- pragma foreign_type(java, bitmap, "jmercury.runtime.MercuryBitmap")
    where   type_is_abstract_noncanonical.
:- pragma foreign_type(csharp, bitmap, "mercury.runtime.MercuryBitmap")
    where   type_is_abstract_noncanonical.
:- pragma foreign_type(erlang, bitmap, "")
    where   type_is_abstract_noncanonical.
