:- module (io.text_read).
:- use_module array.
:- use_module benchmarking.
:- use_module bitmap.
:- use_module bool.
:- use_module builtin.
:- use_module char.
:- use_module deconstruct.
:- use_module dir.
:- use_module exception.
:- use_module int.
:- use_module int16.
:- use_module int32.
:- use_module int64.
:- use_module int8.
:- use_module list.
:- use_module map.
:- use_module maybe.
:- use_module mercury_term_parser.
:- use_module private_builtin.
:- use_module require.
:- use_module rtti_implementation.
:- use_module stream.
:- use_module string.
:- use_module table_builtin.
:- use_module term.
:- use_module term_conversion.
:- use_module term_subst.
:- use_module time.
:- use_module type_desc.
:- use_module uint16.
:- use_module uint32.
:- use_module uint64.
:- use_module uint8.
:- use_module univ.
:- use_module (io.call_system).
:- use_module (io.environment).
:- use_module (io.error_util).
:- use_module (io.file).
:- use_module (io.primitives_read).
:- use_module (io.primitives_write).
:- use_module (io.stream_db).
:- use_module (io.stream_ops).
:- use_module (io.text_read).
:- use_module (stream.string_writer).

:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C", dir).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C", stm_builtin).
:- pragma foreign_import_module("C", store).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", table_builtin).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", (io.stream_ops)).
:- pragma foreign_import_module("C", (io.text_read)).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("C#", dir).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("C#", rtti_implementation).
:- pragma foreign_import_module("C#", store).
:- pragma foreign_import_module("C#", (io.primitives_write)).
:- pragma foreign_import_module("C#", (io.stream_ops)).
:- pragma foreign_import_module("C#", (io.text_read)).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("Java", dir).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Java", rtti_implementation).
:- pragma foreign_import_module("Java", store).
:- pragma foreign_import_module("Java", (io.stream_ops)).
:- pragma foreign_import_module("Java", (io.text_read)).

:- type buffer
    --->    buffer(array.array(character)).
:- pragma foreign_type(c, buffer, "char *", [can_pass_as_mercury_type]).

:- inst uniq_buffer for (io.text_read).buffer/0
    --->    io.text_read.buffer((array.uniq_array)).

:- mode (buffer_di) == builtin.di(((io.text_read).uniq_buffer)).
:- mode (buffer_uo) == builtin.out(((io.text_read).uniq_buffer)).

:- pragma foreign_proc("C",
    (io.text_read).read_line_as_string_2(Stream :: (builtin.in), _FirstCall :: (builtin.in), Res :: (builtin.out), Error :: (builtin.out), RetString :: (builtin.out), _IO0 :: (builtin.di), _IO :: (builtin.uo)),
    [will_not_call_mercury, thread_safe, tabled_for_io, promise_pure, no_sharing, may_modify_trail, doesnt_affect_liveness],
"
#define ML_IO_READ_LINE_GROW(n) ((n) * 3 / 2)
#define ML_IO_BYTES_TO_WORDS(n) (((n) + sizeof(MR_Word) - 1) / sizeof(MR_Word))
#define ML_IO_READ_LINE_START   1024

    char initial_read_buffer[ML_IO_READ_LINE_START];
    char *read_buffer = initial_read_buffer;
    size_t read_buf_size = ML_IO_READ_LINE_START;
    size_t i;
    int char_code = \'\\0\';

    Res = ML_RLAS_OK;
    Error = 0;
    for (i = 0; char_code != \'\\n\'; ) {
        char_code = mercury_get_byte(Stream);
        if (char_code == EOF) {
            if (i == 0) {
                if (MR_FERROR(*Stream)) {
                    Res = ML_RLAS_ERROR;
                    Error = errno;
                } else {
                    Res = ML_RLAS_EOF;
                }
            }
            break;
        }
        if (char_code == 0) {
            Res = ML_RLAS_NULL_CHAR;
            break;
        }
        read_buffer[i++] = (char) char_code;
        MR_assert(i <= read_buf_size);
        if (i == read_buf_size) {
            // Grow the read buffer.
            read_buf_size = ML_IO_READ_LINE_GROW(read_buf_size);
            if (read_buffer == initial_read_buffer) {
                read_buffer = MR_NEW_ARRAY(char, read_buf_size);
                MR_memcpy(read_buffer, initial_read_buffer,
                    ML_IO_READ_LINE_START);
            } else {
                read_buffer = MR_RESIZE_ARRAY(read_buffer, char,
                    read_buf_size);
            }
        }
    }
    if (Res == ML_RLAS_OK) {
        MR_Word ret_string_word;
        MR_offset_incr_hp_atomic_msg(ret_string_word,
            0, ML_IO_BYTES_TO_WORDS((i + 1) * sizeof(char)),
            MR_ALLOC_ID, \"string.string/0\");
        RetString = (MR_String) ret_string_word;
        MR_memcpy(RetString, read_buffer, i * sizeof(char));
        RetString[i] = \'\\0\';
    } else {
        RetString = MR_make_string_const(\"\");
    }
    if (read_buffer != initial_read_buffer) {
        MR_free(read_buffer);
    }
").

:- pragma termination_info((io.text_read).read_binary_file_as_bitmap_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((io.text_read).read_file_as_string_2((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((io.text_read).read_line_2((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info((io.text_read).read_line_as_string_2((builtin.in), (builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((io.text_read).read_word_2((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).

:- pragma exceptions(predicate, ((io.text_read).read_binary_file_as_bitmap_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((io.text_read).read_file_as_string_2), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((io.text_read).read_line_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((io.text_read).read_line_as_string_2), 7, 0, will_not_throw).
:- pragma exceptions(predicate, ((io.text_read).read_word_2), 4, 0, may_throw(user_exception)).
