:- module set_unordlist.
:- use_module bool.
:- use_module builtin.
:- use_module list.
:- use_module private_builtin.
:- use_module require.

:- type set_unordlist(T)
    --->    sul(list.list(T)).

:- pred set_unordlist.difference_2(set_unordlist.set_unordlist(T), set_unordlist.set_unordlist(T), set_unordlist.set_unordlist(T)).
:- mode difference_2((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_unordlist.divide_2((pred T1), list.list(T1), list.list(T1), list.list(T1), list.list(T1), list.list(T1)).
:- mode divide_2(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred set_unordlist.intersect_2(list.list(T), list.list(T), list.list(T), list.list(T)).
:- mode intersect_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred set_unordlist.power_union_2(list.list(set_unordlist.set_unordlist(T)), set_unordlist.set_unordlist(T), set_unordlist.set_unordlist(T)).
:- mode power_union_2((builtin.in), (builtin.in), (builtin.out)) is det.

set_unordlist.all_true(V_3, set_unordlist.sul(V_4)) :-
    list.all_true(V_3, V_4).

set_unordlist.contains(V_3, V_4) :-
    set_unordlist.member(V_4, V_3).

set_unordlist.count(V_3) = V_4 :-
    set_unordlist.count(V_3, V_4).

set_unordlist.count(set_unordlist.sul(V_3), V_4) :-
    list.remove_dups(V_3, V_5),
    list.length(V_5, V_4).

set_unordlist.delete(V_6, V_5) = V_7 :-
    set_unordlist.delete(V_5, V_6, V_7).

set_unordlist.delete(V_4, set_unordlist.sul(V_6), set_unordlist.sul(V_7)) :-
    list.delete_all(V_6, V_4, V_7).

set_unordlist.delete_list(V_6, V_5) = V_7 :-
    set_unordlist.delete_list(V_5, V_6, V_7).

set_unordlist.difference(V_4, V_5) = V_6 :-
    set_unordlist.difference(V_4, V_5, V_6).

set_unordlist.difference(V_4, V_5, V_6) :-
    set_unordlist.difference_2(V_5, V_4, V_6).

set_unordlist.divide(V_5, set_unordlist.sul(V_6), set_unordlist.sul(V_7), set_unordlist.sul(V_8)) :-
    V_9 = list.[] : list.list(T_1),
    V_10 = list.[] : list.list(T_1),
    set_unordlist.divide_2(V_5, V_6, V_9, V_7, V_10, V_8).

set_unordlist.divide_2(V_7, list.[], V_10, V_11, V_12, V_13) :-
    V_13 = V_12,
    V_11 = V_10.
set_unordlist.divide_2(V_14, list.[V_15 | V_16], V_19, V_20, V_21, V_22) :-
    ( if
      call(V_14, V_15)
    then
      V_23 = list.[V_15 | V_19] : list.list(T1_1),
      V_24 = V_21
    else
      V_24 = list.[V_15 | V_21] : list.list(T1_1),
      V_23 = V_19
    ),
    set_unordlist.divide_2(V_14, V_16, V_23, V_20, V_24, V_22).

set_unordlist.empty(set_unordlist.sul(V_2)) :-
    V_2 = list.[] : list.list(_T_1).

set_unordlist.equal(V_3, V_4) :-
    set_unordlist.subset(V_3, V_4),
    set_unordlist.subset(V_4, V_3).

set_unordlist.filter(V_4, V_5, V_6) :-
    set_unordlist.divide(V_4, V_5, V_6, V_7).

set_unordlist.filter(V_5, V_6, V_7, V_8) :-
    set_unordlist.divide(V_5, V_6, V_7, V_8).

set_unordlist.filter_map(V_4, V_5) = V_6 :-
    V_6 = set_unordlist.list_to_set(V_7),
    V_7 = list.filter_map(V_4, V_8),
    V_8 = set_unordlist.to_sorted_list(V_5).

set_unordlist.fold(V_5, V_6, V_7) = V_8 :-
    V_8 = list.foldl(V_5, V_9, V_7),
    V_9 = set_unordlist.to_sorted_list(V_6).

set_unordlist.fold(V_5, V_6, V_8, V_9) :-
    V_10 = set_unordlist.to_sorted_list(V_6),
    list.foldl(V_5, V_10, V_8, V_9).

set_unordlist.fold2(V_7, V_8, V_11, V_12, V_13, V_14) :-
    V_15 = set_unordlist.to_sorted_list(V_8),
    list.foldl2(V_7, V_15, V_11, V_12, V_13, V_14).

set_unordlist.fold3(V_9, V_10, V_14, V_15, V_16, V_17, V_18, V_19) :-
    V_20 = set_unordlist.to_sorted_list(V_10),
    list.foldl3(V_9, V_20, V_14, V_15, V_16, V_17, V_18, V_19).

set_unordlist.fold4(V_11, V_12, V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24) :-
    V_25 = set_unordlist.to_sorted_list(V_12),
    list.foldl4(V_11, V_25, V_17, V_18, V_19, V_20, V_21, V_22, V_23, V_24).

set_unordlist.fold5(V_13, V_14, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29) :-
    V_30 = set_unordlist.to_sorted_list(V_14),
    list.foldl5(V_13, V_30, V_20, V_21, V_22, V_23, V_24, V_25, V_26, V_27, V_28, V_29).

set_unordlist.fold6(V_15, V_16, V_23, V_24, V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33, V_34) :-
    V_35 = set_unordlist.to_sorted_list(V_16),
    list.foldl6(V_15, V_35, V_23, V_24, V_25, V_26, V_27, V_28, V_29, V_30, V_31, V_32, V_33, V_34).

set_unordlist.from_list(V_3) = set_unordlist.sul(V_3).

set_unordlist.from_sorted_list(V_3) = set_unordlist.sul(V_3).

set_unordlist.init = V_2 :-
    set_unordlist.init(V_2).

set_unordlist.init(set_unordlist.sul(V_2)) :-
    V_2 = list.[] : list.list(_T_1).

set_unordlist.insert(V_6, V_5) = V_7 :-
    set_unordlist.insert(V_5, V_6, V_7).

set_unordlist.insert(V_4, set_unordlist.sul(V_5), set_unordlist.sul(V_6)) :-
    V_6 = list.[V_4 | V_5] : list.list(T_1).

set_unordlist.insert_list(V_6, V_5) = V_7 :-
    set_unordlist.insert_list(V_5, V_6, V_7).

set_unordlist.insert_list(V_4, set_unordlist.sul(V_6), set_unordlist.sul(V_7)) :-
    list.append(V_4, V_6, V_7).

set_unordlist.insert_new(V_4, set_unordlist.sul(V_5), set_unordlist.sul(V_6)) :-
    ( if
      list.member(V_4, V_5)
    then
      fail
    else
      V_6 = list.[V_4 | V_5] : list.list(T_1)
    ).

set_unordlist.intersect(V_4, V_5) = V_6 :-
    set_unordlist.intersect(V_4, V_5, V_6).

set_unordlist.intersect(set_unordlist.sul(V_4), set_unordlist.sul(V_5), set_unordlist.sul(V_6)) :-
    V_7 = list.[] : list.list(T_1),
    set_unordlist.intersect_2(V_4, V_5, V_7, V_6).

set_unordlist.intersect_list(V_3) = V_2 :-
    V_2 = set_unordlist.power_intersect(V_4),
    V_4 = set_unordlist.sul(V_3) : set_unordlist.set_unordlist(set_unordlist.set_unordlist(T_1)).

set_unordlist.is_empty(set_unordlist.sul(V_2)) :-
    V_2 = list.[] : list.list(_T_1).

set_unordlist.is_member(V_4, V_5, V_6) :-
    ( if
      set_unordlist.member(V_4, V_5)
    then
      V_6 = bool.yes : bool.bool
    else
      V_6 = bool.no : bool.bool
    ).

set_unordlist.is_non_empty(set_unordlist.sul(V_4)) :-
    V_4 = list.[V_2 | V_3] : list.list(_T_1).

set_unordlist.is_singleton(set_unordlist.sul(V_3), V_4) :-
    V_5 = list.[V_4 | V_6] : list.list(T_1),
    V_6 = list.[] : list.list(T_1),
    list.sort_and_remove_dups(V_3, V_5).

set_unordlist.list_to_set(V_3) = V_4 :-
    set_unordlist.list_to_set(V_3, V_4).

set_unordlist.list_to_set(V_3, set_unordlist.sul(V_3)).

set_unordlist.make_singleton_set(V_3) = V_4 :-
    set_unordlist.singleton_set(V_3, V_4).

set_unordlist.map(V_4, V_5) = V_6 :-
    V_6 = set_unordlist.list_to_set(V_7),
    V_7 = list.map(V_4, V_8),
    V_8 = set_unordlist.to_sorted_list(V_5).

set_unordlist.member(V_3, set_unordlist.sul(V_4)) :-
    list.member(V_3, V_4).

set_unordlist.non_empty(set_unordlist.sul(V_4)) :-
    V_4 = list.[V_2 | V_3] : list.list(_T_1).

set_unordlist.power_intersect(V_3) = V_4 :-
    set_unordlist.power_intersect(V_3, V_4).

set_unordlist.power_union(V_3) = V_4 :-
    set_unordlist.power_union(V_3, V_4).

set_unordlist.power_union(set_unordlist.sul(V_3), set_unordlist.sul(V_4)) :-
    set_unordlist.init(V_5),
    V_7 = set_unordlist.sul(V_6) : set_unordlist.set_unordlist(T_1),
    set_unordlist.power_union_2(V_3, V_5, V_7),
    list.sort_and_remove_dups(V_6, V_4).

set_unordlist.remove(V_4, set_unordlist.sul(V_5), set_unordlist.sul(V_6)) :-
    list.member(V_4, V_5),
    V_7 = set_unordlist.sul(V_5) : set_unordlist.set_unordlist(T_1),
    V_8 = set_unordlist.sul(V_6) : set_unordlist.set_unordlist(T_1),
    set_unordlist.delete(V_4, V_7, V_8).

set_unordlist.remove_least(V_4, V_5, set_unordlist.sul(V_6)) :-
    V_5 = set_unordlist.sul(V_9) : set_unordlist.set_unordlist(T_1),
    V_9 = list.[V_7 | V_8] : list.list(T_1),
    V_10 = list.[V_4 | V_6] : list.list(T_1),
    set_unordlist.to_sorted_list(V_5, V_10).

set_unordlist.rev_sorted_list_to_set(V_3) = V_4 :-
    set_unordlist.rev_sorted_list_to_set(V_3, V_4).

set_unordlist.rev_sorted_list_to_set(V_3, set_unordlist.sul(V_3)).

set_unordlist.sorted_list_to_set(V_3) = V_4 :-
    set_unordlist.sorted_list_to_set(V_3, V_4).

set_unordlist.sorted_list_to_set(V_3, set_unordlist.sul(V_3)).

set_unordlist.superset(V_3, V_4) :-
    set_unordlist.subset(V_4, V_3).

set_unordlist.to_sorted_list(V_3) = V_4 :-
    set_unordlist.to_sorted_list(V_3, V_4).

set_unordlist.to_sorted_list(set_unordlist.sul(V_3), V_4) :-
    list.sort_and_remove_dups(V_3, V_4).

set_unordlist.union(V_4, V_5) = V_6 :-
    set_unordlist.union(V_4, V_5, V_6).

set_unordlist.union(set_unordlist.sul(V_4), set_unordlist.sul(V_5), set_unordlist.sul(V_6)) :-
    list.append(V_5, V_4, V_6).

set_unordlist.union_list(V_3) = V_4 :-
    V_5 = set_unordlist.sul(V_3) : set_unordlist.set_unordlist(set_unordlist.set_unordlist(T_1)),
    set_unordlist.power_union(V_5, V_4).

:- pragma termination_info(set_unordlist.all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)), infinite, can_loop).
:- pragma termination_info(set_unordlist.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.count((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.count((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.delete((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.delete((builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.delete((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.delete_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.delete_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.det_remove((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.det_remove_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.difference((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.difference((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.difference_2((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.divide_2(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_unordlist.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.filter_map(((func((builtin.in)) = (builtin.out) is semidet) >> (func((builtin.in)) = (builtin.out) is semidet)), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold(((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold(((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold(((pred((builtin.in), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold(((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold(((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold2(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold3(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold4(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold5(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.fold6(((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet) >> (pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet)), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(set_unordlist.from_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.from_sorted_list((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info((set_unordlist.init) = (builtin.out), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(set_unordlist.init((builtin.uo)), finite(1, [no, no]), cannot_loop).
:- pragma termination_info(set_unordlist.insert((builtin.in), (builtin.in)) = (builtin.out), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.insert((builtin.di), (builtin.di), (builtin.uo)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.insert((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.insert_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.insert_new((builtin.in), (builtin.in), (builtin.out)), finite(2, [no, yes, yes, no]), can_loop).
:- pragma termination_info(set_unordlist.intersect((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(set_unordlist.intersect((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), can_loop).
:- pragma termination_info(set_unordlist.intersect_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, yes, no]), can_loop).
:- pragma termination_info(set_unordlist.intersect_list((builtin.in)) = (builtin.out), finite(2, [no, yes, no]), can_loop).
:- pragma termination_info(set_unordlist.is_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_unordlist.is_member((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.is_non_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_unordlist.is_singleton((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.list_to_set((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.list_to_set((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.make_singleton_set((builtin.in)) = (builtin.out), finite(3, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.map((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.member((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(set_unordlist.non_empty((builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(set_unordlist.power_intersect((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_unordlist.power_intersect((builtin.in), (builtin.out)), finite(1, [no, yes, no]), can_loop).
:- pragma termination_info(set_unordlist.power_union((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.power_union((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.power_union_2((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.remove((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.remove_least((builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.remove_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.rev_sorted_list_to_set((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.rev_sorted_list_to_set((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.singleton_set((builtin.in), (builtin.out)), finite(3, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.singleton_set((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.singleton_set((builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(set_unordlist.sorted_list_to_set((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.sorted_list_to_set((builtin.in), (builtin.out)), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(set_unordlist.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), can_loop).
:- pragma termination_info(set_unordlist.to_sorted_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.to_sorted_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.union((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(set_unordlist.union((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(set_unordlist.union_list((builtin.in)) = (builtin.out), infinite, can_loop).

:- pragma exceptions(predicate, (set_unordlist.all_true), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.contains), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.count), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.count), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.delete), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.delete), 3, 1, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.delete_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.det_remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.det_remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.difference), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.difference), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.difference_2), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.divide), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.divide_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.equal), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.filter), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.filter), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.filter_map), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.fold), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold), 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold), 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold), 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold), 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold2), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold2), 6, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold2), 6, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold2), 6, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold2), 6, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold3), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold3), 8, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold3), 8, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold3), 8, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold3), 8, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold3), 8, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold4), 10, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold4), 10, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold4), 10, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold4), 10, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold4), 10, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold4), 10, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold5), 12, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold5), 12, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold5), 12, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold5), 12, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold5), 12, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold5), 12, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold6), 14, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold6), 14, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold6), 14, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold6), 14, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold6), 14, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.fold6), 14, 5, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.from_list), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_unordlist.from_sorted_list), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_unordlist.init), 0, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.init), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_unordlist.insert), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.insert), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.insert), 3, 1, will_not_throw).
:- pragma exceptions(function, (set_unordlist.insert_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.insert_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.insert_new), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.intersect), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.intersect_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.intersect_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.is_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.is_member), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.is_non_empty), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.is_singleton), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.list_to_set), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.list_to_set), 2, 0, will_not_throw).
:- pragma exceptions(function, (set_unordlist.make_singleton_set), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_unordlist.map), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.member), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.member), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.non_empty), 1, 0, will_not_throw).
:- pragma exceptions(function, (set_unordlist.power_intersect), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.power_intersect), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.power_union), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.power_union), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.power_union_2), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.remove_least), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.rev_sorted_list_to_set), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.rev_sorted_list_to_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.singleton_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.singleton_set), 2, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.singleton_set), 2, 2, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.sorted_list_to_set), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.sorted_list_to_set), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (set_unordlist.subset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.superset), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.to_sorted_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.to_sorted_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.union), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (set_unordlist.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (set_unordlist.union_list), 1, 0, may_throw(user_exception)).
