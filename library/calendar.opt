:- module calendar.
:- use_module builtin.
:- use_module char.
:- use_module int.
:- use_module io.
:- use_module list.
:- use_module private_builtin.
:- use_module require.
:- use_module stream.
:- use_module string.
:- use_module time.
:- use_module (string.format).
:- use_module (string.parse_util).

:- type date
    --->    date((calendar.dt_year) :: int, (calendar.dt_month) :: int, (calendar.dt_day) :: int, (calendar.dt_hour) :: int, (calendar.dt_minute) :: int, (calendar.dt_second) :: int, (calendar.dt_microsecond) :: int).
:- type duration
    --->    duration((calendar.dur_months) :: int, (calendar.dur_days) :: int, (calendar.dur_seconds) :: int, (calendar.dur_microseconds) :: int).
:- type order
    --->    ascending 
    ;       descending .

:- func calendar.compute_day_of_week(calendar.date) = calendar.day_of_week.
:- mode calendar.compute_day_of_week((builtin.in)) = (builtin.out) is det.
:- func calendar.det_day_of_week_from_mod(int) = calendar.day_of_week.
:- mode calendar.det_day_of_week_from_mod((builtin.in)) = (builtin.out) is det.
:- func (calendar.test_dates) = list.list(calendar.date).
:- mode (calendar.test_dates) = (builtin.out) is det.
:- func calendar.tm_to_date(time.tm) = calendar.date.
:- mode calendar.tm_to_date((builtin.in)) = (builtin.out) is det.

calendar.compute_day_of_week(V_3) = V_4 :-
    V_5 = calendar.julian_day_number(V_3),
    V_6 = int.(V_5 mod V_7),
    V_7 = 7 : int,
    V_4 = calendar.det_day_of_week_from_mod(V_6).

calendar.current_local_time(V_4, V_8, V_9) :-
    time.time(V_6, V_8, V_10),
    time.localtime(V_6, V_7, V_10, V_9),
    V_4 = calendar.tm_to_date(V_7).

calendar.current_utc_time(V_4, V_8, V_9) :-
    time.time(V_6, V_8, V_9),
    V_7 = time.gmtime(V_6),
    V_4 = calendar.tm_to_date(V_7).

calendar.day_of_month(V_3) = V_2 :-
    V_3 = calendar.date(V_4, V_5, V_2, V_6, V_7, V_8, V_9) : calendar.date.

calendar.day_of_week(V_3) = V_2 :-
    V_2 = calendar.compute_day_of_week(V_3).

calendar.days(V_3) = V_2 :-
    V_3 = calendar.duration(V_4, V_2, V_5, V_6) : calendar.duration.

calendar.duration_leq(V_3, V_4) :-
    V_9 = (pred(V_11::(builtin.in)) is semidet :-
      some [] (
        V_11 = V_12,
        calendar.add_duration(V_3, V_12, V_6),
        calendar.add_duration(V_4, V_12, V_7),
        builtin.compare(V_8, V_6, V_7),
        ( % disjunction
          V_8 = builtin.(<) : builtin.comparison_result
        ;
          V_8 = builtin.(=) : builtin.comparison_result
        )
      )
    ) : (pred calendar.date),
    V_10 = calendar.test_dates,
    list.all_true(V_9, V_10).

calendar.foldl2_days(V_8, V_14, V_10, V_15, V_16, V_17, V_18) :-
    builtin.compare(V_13, V_14, V_10),
    ( % disjunction
      ( % disjunction
        V_13 = builtin.(<) : builtin.comparison_result
      ;
        V_13 = builtin.(=) : builtin.comparison_result
      ),
      call(V_8, V_14, V_15, V_19, V_17, V_20),
      V_21 = calendar.init_duration(V_23, V_24, V_25, V_26, V_27, V_28, V_29),
      V_23 = 0 : int,
      V_24 = 0 : int,
      V_25 = 1 : int,
      V_26 = 0 : int,
      V_27 = 0 : int,
      V_28 = 0 : int,
      V_29 = 0 : int,
      calendar.add_duration(V_21, V_14, V_22),
      calendar.foldl2_days(V_8, V_22, V_10, V_19, V_16, V_20, V_18)
    ;
      V_13 = builtin.(>) : builtin.comparison_result,
      V_32 = V_14,
      V_16 = V_15,
      V_18 = V_17
    ).

calendar.foldl3_days(V_10, V_17, V_12, V_18, V_19, V_20, V_21, V_22, V_23) :-
    builtin.compare(V_16, V_17, V_12),
    ( % disjunction
      ( % disjunction
        V_16 = builtin.(<) : builtin.comparison_result
      ;
        V_16 = builtin.(=) : builtin.comparison_result
      ),
      call(V_10, V_17, V_18, V_24, V_20, V_25, V_22, V_26),
      V_27 = calendar.init_duration(V_29, V_30, V_31, V_32, V_33, V_34, V_35),
      V_29 = 0 : int,
      V_30 = 0 : int,
      V_31 = 1 : int,
      V_32 = 0 : int,
      V_33 = 0 : int,
      V_34 = 0 : int,
      V_35 = 0 : int,
      calendar.add_duration(V_27, V_17, V_28),
      calendar.foldl3_days(V_10, V_28, V_12, V_24, V_19, V_25, V_21, V_26, V_23)
    ;
      V_16 = builtin.(>) : builtin.comparison_result,
      V_39 = V_17,
      V_19 = V_18,
      V_21 = V_20,
      V_23 = V_22
    ).

calendar.foldl_days(V_6, V_11, V_8, V_12, V_13) :-
    builtin.compare(V_10, V_11, V_8),
    ( % disjunction
      ( % disjunction
        V_10 = builtin.(<) : builtin.comparison_result
      ;
        V_10 = builtin.(=) : builtin.comparison_result
      ),
      call(V_6, V_11, V_12, V_14),
      V_15 = calendar.init_duration(V_17, V_18, V_19, V_20, V_21, V_22, V_23),
      V_17 = 0 : int,
      V_18 = 0 : int,
      V_19 = 1 : int,
      V_20 = 0 : int,
      V_21 = 0 : int,
      V_22 = 0 : int,
      V_23 = 0 : int,
      calendar.add_duration(V_15, V_11, V_16),
      calendar.foldl_days(V_6, V_16, V_8, V_14, V_13)
    ;
      V_10 = builtin.(>) : builtin.comparison_result,
      V_25 = V_11,
      V_13 = V_12
    ).

calendar.hour(V_3) = V_2 :-
    V_3 = calendar.date(V_4, V_5, V_6, V_2, V_7, V_8, V_9) : calendar.date.

calendar.hours(V_3) = V_2 :-
    V_2 = int.(V_4 // V_5),
    V_3 = calendar.duration(V_6, V_7, V_4, V_8) : calendar.duration,
    V_5 = 3600 : int.

calendar.int0_to_month(V_3, V_4) :-
    V_5 = int.(V_3 + V_6),
    V_6 = 1 : int,
    calendar.int_to_month(V_5, V_4).

calendar.microsecond(V_3) = V_2 :-
    V_3 = calendar.date(V_4, V_5, V_6, V_7, V_8, V_9, V_2) : calendar.date.

calendar.microseconds(V_3) = V_2 :-
    V_3 = calendar.duration(V_4, V_5, V_6, V_2) : calendar.duration.

calendar.minute(V_3) = V_2 :-
    V_3 = calendar.date(V_4, V_5, V_6, V_7, V_2, V_8, V_9) : calendar.date.

calendar.minutes(V_3) = V_2 :-
    V_2 = int.(V_4 // V_7),
    V_4 = int.(V_5 rem V_6),
    V_3 = calendar.duration(V_8, V_9, V_5, V_10) : calendar.duration,
    V_6 = 3600 : int,
    V_7 = 60 : int.

calendar.month(V_3) = V_2 :-
    V_2 = calendar.det_int_to_month(V_4),
    V_3 = calendar.date(V_5, V_4, V_6, V_7, V_8, V_9, V_10) : calendar.date.

calendar.month_to_int(V_3) = V_4 :-
    calendar.int_to_month(V_4, V_3).

calendar.month_to_int0(V_3) = V_4 :-
    calendar.int0_to_month(V_4, V_3).

calendar.months(V_3) = V_2 :-
    V_2 = int.(V_4 rem V_5),
    V_3 = calendar.duration(V_4, V_6, V_7, V_8) : calendar.duration,
    V_5 = 12 : int.

calendar.negate(calendar.duration(V_3, V_4, V_5, V_6)) = calendar.duration(V_7, V_8, V_9, V_10) :-
    V_7 = int.(- V_3),
    V_8 = int.(- V_4),
    V_9 = int.(- V_5),
    V_10 = int.(- V_6).

calendar.same_date(V_3, V_4) :-
    V_3 = calendar.date(V_5, V_6, V_7, V_8, V_9, V_10, V_11) : calendar.date,
    V_4 = calendar.date(V_5, V_6, V_7, V_12, V_13, V_14, V_15) : calendar.date.

calendar.second(V_3) = V_2 :-
    V_3 = calendar.date(V_4, V_5, V_6, V_7, V_8, V_2, V_9) : calendar.date.

calendar.seconds(V_3) = V_2 :-
    V_2 = int.(V_4 rem V_5),
    V_3 = calendar.duration(V_6, V_7, V_4, V_8) : calendar.duration,
    V_5 = 60 : int.

calendar.unix_epoch = V_1 :-
    (
    % from_ground_term [V_1, initial]
      ( % conjunction
        V_1 = calendar.date(V_2, V_3, V_4, V_5, V_6, V_7, V_8) : calendar.date
        ,
        V_2 = 1970 : int
        ,
        V_3 = 1 : int
        ,
        V_4 = 1 : int
        ,
        V_5 = 0 : int
        ,
        V_6 = 0 : int
        ,
        V_7 = 0 : int
        ,
        V_8 = 0 : int
      )
    ).

calendar.unpack_date(calendar.date(V_9, V_10, V_11, V_12, V_13, V_14, V_15), V_9, V_3, V_11, V_12, V_13, V_14, V_15) :-
    V_3 = calendar.det_int_to_month(V_10).

calendar.unpack_duration(V_9, V_2, V_3, V_4, V_5, V_6, V_7, V_8) :-
    V_2 = calendar.years(V_9),
    V_3 = calendar.months(V_9),
    V_4 = calendar.days(V_9),
    V_5 = calendar.hours(V_9),
    V_6 = calendar.minutes(V_9),
    V_7 = calendar.seconds(V_9),
    V_8 = calendar.microseconds(V_9).

calendar.year(V_3) = V_2 :-
    V_3 = calendar.date(V_2, V_4, V_5, V_6, V_7, V_8, V_9) : calendar.date.

calendar.years(V_3) = V_2 :-
    V_2 = int.(V_4 // V_5),
    V_3 = calendar.duration(V_4, V_6, V_7, V_8) : calendar.duration,
    V_5 = 12 : int.

calendar.zero_duration = V_1 :-
    (
    % from_ground_term [V_1, initial]
      ( % conjunction
        V_1 = calendar.duration(V_2, V_3, V_4, V_5) : calendar.duration
        ,
        V_2 = 0 : int
        ,
        V_3 = 0 : int
        ,
        V_4 = 0 : int
        ,
        V_5 = 0 : int
      )
    ).

:- pragma exceptions(predicate, (calendar.add_duration), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.compute_day_of_week), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.current_local_time), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.current_utc_time), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.date_from_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.date_to_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.day_duration), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.day_of_month), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.day_of_week), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.days), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.det_date_from_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.det_day_of_week_from_mod), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.det_duration_from_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.det_init_date), 8, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.det_int0_to_month), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.det_int_to_month), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.duration), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.duration_from_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.duration_leq), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.duration_to_string), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl2_days), 7, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl2_days), 7, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl2_days), 7, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl2_days), 7, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl2_days), 7, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl2_days), 7, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl3_days), 9, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl3_days), 9, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl3_days), 9, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl3_days), 9, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl3_days), 9, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl3_days), 9, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl_days), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl_days), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl_days), 5, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl_days), 5, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl_days), 5, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.foldl_days), 5, 5, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.hour), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.hours), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.init_date), 8, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.init_duration), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.int0_to_month), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (calendar.int0_to_month), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (calendar.int_to_month), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (calendar.int_to_month), 2, 1, will_not_throw).
:- pragma exceptions(function, (calendar.julian_day_number), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.local_time_offset), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.microsecond), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.microseconds), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.minute), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.minutes), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.month), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.month_to_int), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.month_to_int0), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.months), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.negate), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (calendar.same_date), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.second), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.seconds), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.test_dates), 1, 0, will_not_throw).
:- pragma exceptions(function, (calendar.tm_to_date), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.unix_epoch), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (calendar.unpack_date), 8, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (calendar.unpack_duration), 8, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.year), 2, 0, will_not_throw).
:- pragma exceptions(function, (calendar.years), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (calendar.zero_duration), 1, 0, will_not_throw).

:- pragma termination_info(calendar.add_duration((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.compute_day_of_week((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.current_local_time((builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.current_utc_time((builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.date_from_string((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.date_to_string((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.day_duration((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.day_of_month((builtin.in)) = (builtin.out), finite(-7, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.day_of_week((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.days((builtin.in)) = (builtin.out), finite(-4, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.det_date_from_string((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.det_day_of_week_from_mod((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.det_duration_from_string((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.det_init_date((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), finite(7, [yes, no, yes, yes, yes, yes, yes, no]), can_loop).
:- pragma termination_info(calendar.det_int0_to_month((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.det_int_to_month((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.duration((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.duration_from_string((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.duration_leq((builtin.in), (builtin.in)), infinite, can_loop).
:- pragma termination_info(calendar.duration_to_string((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.foldl2_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.foldl2_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl2_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl2_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.foldl2_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl2_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl3_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.foldl3_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl3_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl3_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.foldl3_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl3_days((pred((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl_days((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.foldl_days((pred((builtin.in), (builtin.mdi), (builtin.muo)) is det), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl_days((pred((builtin.in), (builtin.di), (builtin.uo)) is det), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl_days((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.foldl_days((pred((builtin.in), (builtin.mdi), (builtin.muo)) is semidet), (builtin.in), (builtin.in), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(calendar.foldl_days((pred((builtin.in), (builtin.di), (builtin.uo)) is semidet), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.hour((builtin.in)) = (builtin.out), finite(-7, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.hours((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.init_date((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), finite(7, [yes, no, yes, yes, yes, yes, yes, no]), can_loop).
:- pragma termination_info(calendar.init_duration((builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.int0_to_month((builtin.in), (builtin.out)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.int0_to_month((builtin.out), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.int_to_month((builtin.in), (builtin.out)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.int_to_month((builtin.out), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.julian_day_number((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.local_time_offset((builtin.out), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(calendar.microsecond((builtin.in)) = (builtin.out), finite(-7, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.microseconds((builtin.in)) = (builtin.out), finite(-4, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.minute((builtin.in)) = (builtin.out), finite(-7, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.minutes((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.month((builtin.in)) = (builtin.out), finite(0, [no, no]), can_loop).
:- pragma termination_info(calendar.month_to_int((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.month_to_int0((builtin.in)) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.months((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(calendar.negate((builtin.in)) = (builtin.out), finite(4, [no, no]), cannot_loop).
:- pragma termination_info(calendar.same_date((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(calendar.second((builtin.in)) = (builtin.out), finite(-7, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.seconds((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info((calendar.test_dates) = (builtin.out), finite(36, [no]), cannot_loop).
:- pragma termination_info(calendar.tm_to_date((builtin.in)) = (builtin.out), finite(-2, [yes, no]), cannot_loop).
:- pragma termination_info((calendar.unix_epoch) = (builtin.out), finite(7, [no]), cannot_loop).
:- pragma termination_info(calendar.unpack_date((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), finite(-7, [yes, no, no, no, no, no, no, no]), can_loop).
:- pragma termination_info(calendar.unpack_duration((builtin.in), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(calendar.year((builtin.in)) = (builtin.out), finite(-7, [yes, no]), cannot_loop).
:- pragma termination_info(calendar.years((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info((calendar.zero_duration) = (builtin.out), finite(4, [no]), cannot_loop).
