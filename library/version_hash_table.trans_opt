:- module version_hash_table.

:- pragma termination_info(version_hash_table.alist_search(builtin.in, builtin.in, builtin.out), finite(-2, [no, no, yes, no, no]), cannot_loop).
:- pragma termination_info(version_hash_table.compute_slot_number(builtin.in(version_hash_table.hash_pred), builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.copy(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.delete(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.delete(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.det_insert(builtin.in, builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.det_insert(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.det_update(builtin.in, builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.det_update(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.do_init(builtin.in(version_hash_table.hash_pred), builtin.in, builtin.in, builtin.in, builtin.out), infinite, cannot_loop).
:- pragma termination_info(version_hash_table.elem(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.'elem :='(builtin.in, builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.equal(builtin.in, builtin.in), infinite, cannot_loop).
:- pragma termination_info(version_hash_table.find_slot(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in, builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred(builtin.in, builtin.in, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred(builtin.in, builtin.in, builtin.mdi, builtin.muo) is det)), builtin.in, builtin.mdi, builtin.muo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred(builtin.in, builtin.in, builtin.di, builtin.uo) is det)), builtin.in, builtin.di, builtin.uo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred(builtin.in, builtin.in, builtin.in, builtin.out) is semidet)), builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred(builtin.in, builtin.in, builtin.mdi, builtin.muo) is semidet)), builtin.in, builtin.mdi, builtin.muo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold(builtin.in((pred(builtin.in, builtin.in, builtin.di, builtin.uo) is semidet)), builtin.in, builtin.di, builtin.uo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_f(builtin.in((func(builtin.in, builtin.in, builtin.in) = builtin.out is det)), builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_f(builtin.in((func(builtin.in, builtin.in, builtin.di) = builtin.uo is det)), builtin.in, builtin.di, builtin.uo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p(builtin.in((pred(builtin.in, builtin.in, builtin.in, builtin.out) is det)), builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p(builtin.in((pred(builtin.in, builtin.in, builtin.mdi, builtin.muo) is det)), builtin.in, builtin.mdi, builtin.muo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p(builtin.in((pred(builtin.in, builtin.in, builtin.di, builtin.uo) is det)), builtin.in, builtin.di, builtin.uo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p(builtin.in((pred(builtin.in, builtin.in, builtin.in, builtin.out) is semidet)), builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p(builtin.in((pred(builtin.in, builtin.in, builtin.mdi, builtin.muo) is semidet)), builtin.in, builtin.mdi, builtin.muo), infinite, can_loop).
:- pragma termination_info(version_hash_table.fold_p(builtin.in((pred(builtin.in, builtin.in, builtin.di, builtin.uo) is semidet)), builtin.in, builtin.di, builtin.uo), infinite, can_loop).
:- pragma termination_info(version_hash_table.from_assoc_list(builtin.in(version_hash_table.hash_pred), builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.from_assoc_list(builtin.in(version_hash_table.hash_pred), builtin.in, builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.from_assoc_list_2(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.init(builtin.in(version_hash_table.hash_pred), builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.init_default(builtin.in(version_hash_table.hash_pred)) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.lookup(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.lookup(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.num_buckets(builtin.in) = builtin.out, infinite, cannot_loop).
:- pragma termination_info(version_hash_table.num_occupants(builtin.in) = builtin.out, finite(-4, [no, no, yes, no]), cannot_loop).
:- pragma termination_info(version_hash_table.search(builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.search(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.set(builtin.in, builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.set(builtin.in, builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.to_assoc_list(builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.to_assoc_list_2(builtin.in, builtin.in, builtin.out), infinite, can_loop).
:- pragma termination_info(version_hash_table.unsafe_init(builtin.in(version_hash_table.hash_pred), builtin.in, builtin.in) = builtin.out, infinite, can_loop).
:- pragma termination_info(version_hash_table.unsafe_init_default(builtin.in(version_hash_table.hash_pred)) = builtin.out, infinite, can_loop).

:- pragma exceptions(predicate, version_hash_table.alist_search, 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, version_hash_table.compute_slot_number, 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.copy, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.delete, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.delete, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.det_insert, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.det_insert, 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.det_update, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.det_update, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.do_init, 5, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.elem, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.'elem :=', 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.equal, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.find_slot, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.fold, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold, 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold, 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold, 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold, 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold, 4, 5, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_f, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_f, 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_p, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_p, 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_p, 4, 2, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_p, 4, 3, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_p, 4, 4, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.fold_p, 4, 5, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.from_assoc_list, 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.from_assoc_list, 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.from_assoc_list_2, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.init, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.init_default, 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.lookup, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.lookup, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.num_buckets, 1, 0, will_not_throw).
:- pragma exceptions(function, version_hash_table.num_occupants, 1, 0, will_not_throw).
:- pragma exceptions(function, version_hash_table.search, 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.search, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.set, 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.set, 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.to_assoc_list, 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, version_hash_table.to_assoc_list_2, 3, 0, will_not_throw).
:- pragma exceptions(function, version_hash_table.unsafe_init, 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, version_hash_table.unsafe_init_default, 1, 0, may_throw(user_exception)).
