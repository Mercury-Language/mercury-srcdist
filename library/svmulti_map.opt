:- module svmulti_map.
:- use_module builtin, list, multi_map, private_builtin.
svmulti_map.insert(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.insert(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.det_insert(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.det_insert(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.update(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.update(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.det_update(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.det_update(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.det_replace(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.det_replace(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.set(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.set(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.add(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.add(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.delete(K_4, MultiMap0_5, MultiMap_6) :-
    multi_map.delete(MultiMap0_5, K_4, MultiMap_6).
svmulti_map.delete(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.delete(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.remove(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.remove(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.det_remove(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.det_remove(MultiMap0_7, K_5, V_6, MultiMap_8).
svmulti_map.remove_smallest(K_5, V_6, MultiMap0_7, MultiMap_8) :-
    multi_map.remove_smallest(MultiMap0_7, K_5, V_6, MultiMap_8).
:- pragma exceptions(predicate, (svmulti_map.insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.det_insert), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.update), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.det_update), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.det_replace), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.set), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.add), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.delete), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.remove), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.det_remove), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (svmulti_map.remove_smallest), 4, 0, may_throw(user_exception)).
:- pragma termination_info(svmulti_map.insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.det_insert((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.update((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.det_update((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.det_replace((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.set((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.add((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.delete((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.delete((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.remove((builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.det_remove((builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(svmulti_map.remove_smallest((builtin.out), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
