:- module random.
:- use_module array.
:- use_module builtin.
:- use_module int.
:- use_module list.
:- use_module private_builtin.

:- type supply
    --->    rs(int).

:- pred random.params(int, int, int).
:- mode random.params((builtin.out), (builtin.out), (builtin.out)) is det.
:- pred random.perform_sampling(int, array.array(T_1), list.list(T_1), list.list(T_1), random.supply, random.supply).
:- mode random.perform_sampling((builtin.in), (array.array_di), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode random.perform_sampling((builtin.in), (array.array_di), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred random.test_2(int, list.list(int), random.supply, random.supply).
:- mode random.test_2((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)) is det.
:- mode random.test_2((builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.

random.init(V_3, random.rs(V_4)) :-
    builtin.copy(V_3, V_4).

random.params(9301, 49297, 233280).

random.permutation(V_5, V_6, V_10, V_11) :-
    V_8 = array.array(V_5),
    V_9 = array.size(V_8),
    V_12 = list.[] : list.list(T_1),
    random.perform_sampling(V_9, V_8, V_12, V_6, V_10, V_11).

random.randcount(V_4, V_5, V_5) :-
    random.params(V_6, V_7, V_4).

random.randmax(V_4, V_5, V_5) :-
    random.params(V_6, V_7, V_8),
    V_4 = int.(V_8 - V_9),
    V_9 = 1 : int.

random.test(V_5, V_6, V_7, V_8) :-
    random.init(V_5, V_9),
    random.randmax(V_8, V_9, V_10),
    random.test_2(V_6, V_7, V_10, V_11).
:- pragma exceptions(predicate, (random.init), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.random), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.random), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.random), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.random), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.randmax), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (random.randmax), 3, 1, will_not_throw).
:- pragma exceptions(predicate, (random.randcount), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (random.randcount), 3, 1, will_not_throw).
:- pragma exceptions(predicate, (random.permutation), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.permutation), 4, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.test), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.params), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (random.perform_sampling), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.perform_sampling), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.test_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (random.test_2), 4, 1, may_throw(user_exception)).
:- pragma termination_info(random.init((builtin.in), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(random.random((builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(random.random((builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(random.random((builtin.in), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(random.random((builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(random.randmax((builtin.out), (builtin.mdi), (builtin.muo)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(random.randmax((builtin.out), (builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(random.randcount((builtin.out), (builtin.mdi), (builtin.muo)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(random.randcount((builtin.out), (builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(random.permutation((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(random.permutation((builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(random.test((builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(random.params((builtin.out), (builtin.out), (builtin.out)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(random.perform_sampling((builtin.in), (array.array_di), (builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(random.perform_sampling((builtin.in), (array.array_di), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(random.test_2((builtin.in), (builtin.out), (builtin.mdi), (builtin.muo)), infinite, can_loop).
:- pragma termination_info(random.test_2((builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
