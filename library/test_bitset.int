:- module test_bitset.
:- interface.
:- import_module enum.
:- import_module list.
:- import_module set.
:- type bitset_error(T)
    --->    zero_argument(string, test_bitset.test_bitset(T))
    ;       one_argument(string, test_bitset.test_bitset(T), test_bitset.test_bitset(T))
    ;       two_arguments(string, test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)).
:- type test_bitset(T).
:- pred all_true((pred T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode all_true(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) is semidet.
:- func bitset_to_set(test_bitset.test_bitset(T)) = set.set(T) <= (enum.enum(T)).
:- pred contains(test_bitset.test_bitset(T), T) <= (enum.enum(T)).
:- mode contains((builtin.in), (builtin.in)) is semidet.
:- func count(test_bitset.test_bitset(T)) = int <= (enum.enum(T)).
:- pred delete(T, test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode delete((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred delete_list(list.list(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode delete_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- func difference(test_bitset.test_bitset(T), test_bitset.test_bitset(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred difference(test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode difference((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred divide((pred T), test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode divide(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred divide_by_set(test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode divide_by_set((builtin.in), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred equal(test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode equal((builtin.in), (builtin.in)) is semidet.
:- func filter((pred T), test_bitset.test_bitset(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- mode filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in)) = (builtin.out) is det.
:- pred filter((pred T), test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode filter(builtin.in((pred((builtin.in)) is semidet)), (builtin.in), (builtin.out), (builtin.out)) is det.
:- pred foldl(pred(T, Acc, Acc), test_bitset.test_bitset(T), Acc, Acc) <= (enum.enum(T)).
:- func foldl((func(T, Acc) = Acc), test_bitset.test_bitset(T), Acc) = Acc <= (enum.enum(T)).
:- mode foldl((pred((builtin.in), (builtin.in), (builtin.out)) is det), (builtin.in), (builtin.in), (builtin.out)) is det.
:- mode foldl((pred((builtin.in), (builtin.in), (builtin.out)) is semidet), (builtin.in), (builtin.in), (builtin.out)) is semidet.
:- mode foldl((func((builtin.in), (builtin.in)) = (builtin.out) is det), (builtin.in), (builtin.in)) = (builtin.out) is det.
:- func from_set(set.set(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- func init = test_bitset.test_bitset(T).
:- pred init(test_bitset.test_bitset(T)).
:- mode init((builtin.out)) is det.
:- pred insert(T, test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode insert((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred insert_list(list.list(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode insert_list((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred insert_new(T, test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode insert_new((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func intersect(test_bitset.test_bitset(T), test_bitset.test_bitset(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred intersect(test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode intersect((builtin.in), (builtin.in), (builtin.out)) is det.
:- func intersect_list(list.list(test_bitset.test_bitset(T))) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred intersect_list(list.list(test_bitset.test_bitset(T)), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode intersect_list((builtin.in), (builtin.out)) is det.
:- pred is_empty(test_bitset.test_bitset(T)).
:- mode is_empty((builtin.in)) is semidet.
:- pred is_non_empty(test_bitset.test_bitset(T)).
:- mode is_non_empty((builtin.in)) is semidet.
:- pred is_singleton(test_bitset.test_bitset(T), T) <= (enum.enum(T)).
:- mode is_singleton((builtin.in), (builtin.out)) is semidet.
:- func list_to_set(list.list(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred list_to_set(list.list(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode list_to_set((builtin.in), (builtin.out)) is det.
:- func make_singleton_set(T) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred make_singleton_set(test_bitset.test_bitset(T), T) <= (enum.enum(T)).
:- mode make_singleton_set((builtin.out), (builtin.in)) is det.
:- pred member(T, test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode member((builtin.in), (builtin.in)) is semidet.
:- mode member((builtin.out), (builtin.in)) is nondet.
:- pred remove(T, test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode remove((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- pred remove_least(T, test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode remove_least((builtin.out), (builtin.in), (builtin.out)) is semidet.
:- pred remove_list(list.list(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode remove_list((builtin.in), (builtin.in), (builtin.out)) is semidet.
:- func set_to_bitset(set.set(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- func singleton_set(T) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred singleton_set(test_bitset.test_bitset(T), T) <= (enum.enum(T)).
:- mode singleton_set((builtin.out), (builtin.in)) is det.
:- func sorted_list_to_set(list.list(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred sorted_list_to_set(list.list(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode sorted_list_to_set((builtin.in), (builtin.out)) is det.
:- pred subset(test_bitset.test_bitset(T), test_bitset.test_bitset(T)).
:- mode subset((builtin.in), (builtin.in)) is semidet.
:- pred superset(test_bitset.test_bitset(T), test_bitset.test_bitset(T)).
:- mode superset((builtin.in), (builtin.in)) is semidet.
:- func to_set(test_bitset.test_bitset(T)) = set.set(T) <= (enum.enum(T)).
:- func to_sorted_list(test_bitset.test_bitset(T)) = list.list(T) <= (enum.enum(T)).
:- pred to_sorted_list(test_bitset.test_bitset(T), list.list(T)) <= (enum.enum(T)).
:- mode to_sorted_list((builtin.in), (builtin.out)) is det.
:- func union(test_bitset.test_bitset(T), test_bitset.test_bitset(T)) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred union(test_bitset.test_bitset(T), test_bitset.test_bitset(T), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode union((builtin.in), (builtin.in), (builtin.out)) is det.
:- func union_list(list.list(test_bitset.test_bitset(T))) = test_bitset.test_bitset(T) <= (enum.enum(T)).
:- pred union_list(list.list(test_bitset.test_bitset(T)), test_bitset.test_bitset(T)) <= (enum.enum(T)).
:- mode union_list((builtin.in), (builtin.out)) is det.
:- implementation.
:- import_module pair.
:- import_module set_ordlist.
:- import_module tree_bitset.
:- type test_bitset(T) == pair.pair(tree_bitset.tree_bitset(T), set_ordlist.set_ordlist(T)).
