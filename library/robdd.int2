:- module robdd.
:- interface.
:- use_module io.
:- use_module list.
:- use_module map.
:- use_module sparse_bitset.
:- use_module term.
:- type entailment_result(T)
    --->    all_vars 
    ;       some_vars((robdd.vars) :: T).
:- type equiv_vars(T)
    --->    equiv_vars((robdd.leader_map) :: robdd.leader_map(T)).
:- type equivalent_result(T) == robdd.entailment_result(robdd.equiv_vars(T)).
:- type imp_map(T) == map.map(term.var(T), robdd.vars(T)).
:- type imp_vars(T)
    --->    imp_vars((robdd.imps) :: robdd.imp_map(T), (robdd.rev_imps) :: robdd.imp_map(T), (robdd.dis_imps) :: robdd.imp_map(T), (robdd.rev_dis_imps) :: robdd.imp_map(T)).
:- type leader_map(T) == map.map(term.var(T), term.var(T)).
:- type literal(T)
    --->    pos(term.var(T))
    ;       neg(term.var(T)).
:- type robdd == robdd.robdd(term.generic).
:- type robdd(T).
:- type vars(T) == sparse_bitset.sparse_bitset(term.var(T)).
:- type vars_entailed_result(T) == robdd.entailment_result(robdd.vars(T)).
:- type write_var(T) == pred(term.var(T), io.io, io.io).
:- inst (write_var) == (pred((builtin.in), (builtin.di), (builtin.uo)) is det).
:- implementation.
:- typeclass intersectable(T).
