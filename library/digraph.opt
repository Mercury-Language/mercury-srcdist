:- module digraph.
:- use_module assoc_list.
:- use_module bimap.
:- use_module builtin.
:- use_module enum.
:- use_module int.
:- use_module list.
:- use_module map.
:- use_module pair.
:- use_module private_builtin.
:- use_module require.
:- use_module set.
:- use_module sparse_bitset.

:- type clique_map(T) == tree234.tree234(digraph.digraph_key(T), digraph.digraph_key(set_ordlist.set_ordlist(T))).
:- type digraph(T)
    --->    digraph((digraph.next_key) :: int, (digraph.vertex_map) :: bimap.bimap(T, digraph.digraph_key(T)), (digraph.fwd_map) :: tree234.tree234(int, sparse_bitset.sparse_bitset(digraph.digraph_key(T))), (digraph.bwd_map) :: tree234.tree234(int, sparse_bitset.sparse_bitset(digraph.digraph_key(T)))).
:- type digraph_key(T)
    --->    digraph_key(int).
:- type key_map(T) == tree234.tree234(int, digraph.digraph_key(T)).
:- type key_set_map(T) == tree234.tree234(int, sparse_bitset.sparse_bitset(digraph.digraph_key(T))).

:- instance (enum.enum(digraph.digraph_key(T))).

:- pred digraph.dfs_2(digraph.digraph(T), digraph.digraph_key(T), sparse_bitset.sparse_bitset(digraph.digraph_key(T)), sparse_bitset.sparse_bitset(digraph.digraph_key(T)), list.list(digraph.digraph_key(T)), list.list(digraph.digraph_key(T))).
:- mode dfs_2((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)) is det.
:- pred digraph.keys(digraph.digraph(T), list.list(digraph.digraph_key(T))).
:- mode keys((builtin.in), (builtin.out)) is det.
:- pred digraph.to_key_assoc_list_2(tree234.tree234(int, sparse_bitset.sparse_bitset(digraph.digraph_key(T))), list.list(int), list.list(pair.pair(digraph.digraph_key(T), digraph.digraph_key(T))), list.list(pair.pair(digraph.digraph_key(T), digraph.digraph_key(T)))).
:- mode to_key_assoc_list_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred digraph.traverse_children(digraph.digraph(T), pred(T, T, A, A), T, list.list(digraph.digraph_key(T)), A, A).
:- mode traverse_children((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode traverse_children((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det.
:- pred digraph.traverse_vertex_list(digraph.digraph(T), pred(T, A, A), pred(T, T, A, A), list.list(digraph.digraph_key(T)), A, A).
:- mode traverse_vertex_list((builtin.in), ((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), ((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)) is det.
:- mode traverse_vertex_list((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), ((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)) is det.

digraph.add_assoc_list(V_4, V_6) = V_7 :-
    digraph.add_assoc_list(V_4, V_6, V_7).

digraph.add_edge(V_5, V_6, V_8) = V_9 :-
    digraph.add_edge(V_5, V_6, V_8, V_9).

digraph.add_vertex_pair(V_4, V_6) = V_7 :-
    digraph.add_vertex_pair(V_4, V_6, V_7).

digraph.add_vertex_pair(pair.(V_4 - V_5), V_7, V_8) :-
    digraph.add_vertices_and_edge(V_4, V_5, V_7, V_8).

digraph.add_vertices_and_edge(V_5, V_6, V_8) = V_9 :-
    digraph.add_vertices_and_edge(V_5, V_6, V_8, V_9).

digraph.add_vertices_and_edge(V_5, V_6, V_10, V_11) :-
    digraph.add_vertex(V_5, V_8, V_10, V_12),
    digraph.add_vertex(V_6, V_9, V_12, V_13),
    digraph.add_edge(V_8, V_9, V_13, V_11).

digraph.atsort(V_3) = V_4 :-
    V_4 = digraph.return_sccs_in_from_to_order(V_3).

digraph.atsort(V_3, V_4) :-
    V_4 = digraph.return_sccs_in_from_to_order(V_3).

digraph.cliques(V_3) = V_4 :-
    digraph.cliques(V_3, V_4).

digraph.components(V_3) = V_4 :-
    digraph.components(V_3, V_4).

digraph.compose(V_4, V_5) = V_6 :-
    digraph.compose(V_4, V_5, V_6).

digraph.delete_assoc_list(V_4, V_6) = V_7 :-
    digraph.delete_assoc_list(V_4, V_6, V_7).

digraph.delete_edge(V_5, V_6, V_8) = V_9 :-
    digraph.delete_edge(V_5, V_6, V_8, V_9).

digraph.dfs(V_3) = V_4 :-
    digraph.dfs(V_3, V_4).

digraph.dfs(V_3, V_4) :-
    digraph.dfsrev(V_3, V_5),
    list.reverse(V_5, V_4).

digraph.dfs(V_4, V_5) = V_6 :-
    digraph.dfs(V_4, V_5, V_6).

digraph.dfs(V_4, V_5, V_6) :-
    digraph.dfsrev(V_4, V_5, V_7),
    list.reverse(V_7, V_6).

digraph.dfs(V_6, V_7, V_11, V_12, V_9) :-
    V_14 = list.[] : list.list(digraph.digraph_key(T_1)),
    digraph.dfs_2(V_6, V_7, V_11, V_12, V_14, V_10),
    list.reverse(V_10, V_9).

digraph.dfsrev(V_3) = V_4 :-
    digraph.dfsrev(V_3, V_4).

digraph.dfsrev(V_4, V_5) = V_6 :-
    digraph.dfsrev(V_4, V_5, V_6).

digraph.dfsrev(V_4, V_5, V_6) :-
    sparse_bitset.init(V_7),
    V_9 = list.[] : list.list(digraph.digraph_key(T_1)),
    digraph.dfs_2(V_4, V_5, V_7, V_8, V_9, V_6).

digraph.dfsrev(V_6, V_7, V_10, V_11, V_9) :-
    V_13 = list.[] : list.list(digraph.digraph_key(T_1)),
    digraph.dfs_2(V_6, V_7, V_10, V_11, V_13, V_9).

digraph.from_assoc_list(V_3) = V_4 :-
    digraph.from_assoc_list(V_3, V_4).

digraph.from_assoc_list(V_3, V_4) :-
    V_5 = digraph.add_vertex_pair : pred(pair.pair(T_1, T_1), digraph.digraph(T_1), digraph.digraph(T_1)),
    V_6 = digraph.init,
    list.foldl(V_5, V_3, V_6, V_4).

digraph.init = V_2 :-
    digraph.init(V_2).

digraph.init(digraph.digraph(V_5, V_2, V_3, V_4)) :-
    V_5 = 0 : int,
    bimap.init(V_2),
    map.init(V_3),
    map.init(V_4).

digraph.inverse(V_3) = V_4 :-
    digraph.inverse(V_3, V_4).

digraph.inverse(V_3, V_4) :-
    V_3 = digraph.digraph(V_5, V_6, V_7, V_8) : digraph.digraph(T_1),
    V_4 = digraph.digraph(V_5, V_6, V_8, V_7) : digraph.digraph(T_1).

digraph.is_edge(V_4, digraph.digraph_key(V_5), V_6) :-
    V_4 = digraph.digraph(V_9, V_10, V_8, V_11) : digraph.digraph(T_1),
    map.search(V_8, V_5, V_7),
    sparse_bitset.member(V_6, V_7).

digraph.is_edge_rev(V_4, V_5, digraph.digraph_key(V_6)) :-
    V_4 = digraph.digraph(V_9, V_10, V_11, V_8) : digraph.digraph(T_1),
    map.search(V_8, V_6, V_7),
    sparse_bitset.member(V_5, V_7).

digraph.keys(V_3, V_4) :-
    V_3 = digraph.digraph(V_6, V_5, V_7, V_8) : digraph.digraph(T_1),
    bimap.coordinates(V_5, V_4).

digraph.lookup_from(V_4, V_5) = V_6 :-
    digraph.lookup_from(V_4, V_5, V_6).

digraph.lookup_from(V_4, V_5, V_3) :-
    V_3 = sparse_bitset.to_set(V_6),
    digraph.lookup_key_set_from(V_4, V_5, V_6).

digraph.lookup_key(V_4, V_5) = V_6 :-
    digraph.lookup_key(V_4, V_5, V_6).

digraph.lookup_key_set_from(V_4, V_5) = V_6 :-
    digraph.lookup_key_set_from(V_4, V_5, V_6).

digraph.lookup_key_set_to(V_4, V_5) = V_6 :-
    digraph.lookup_key_set_to(V_4, V_5, V_6).

digraph.lookup_to(V_4, V_5) = V_6 :-
    digraph.lookup_to(V_4, V_5, V_6).

digraph.lookup_to(V_4, V_5, V_3) :-
    V_3 = sparse_bitset.to_set(V_6),
    digraph.lookup_key_set_to(V_4, V_5, V_6).

digraph.lookup_vertex(V_4, V_5) = V_6 :-
    digraph.lookup_vertex(V_4, V_5, V_6).

digraph.reduced(V_3) = V_4 :-
    digraph.reduced(V_3, V_4).

digraph.reduced(V_3, V_4) :-
    digraph.reduced(V_3, V_4, V_5).

digraph.return_sccs_in_from_to_order(V_3) = V_4 :-
    V_5 = digraph.return_sccs_in_to_from_order(V_3),
    list.reverse(V_5, V_4).

digraph.return_vertices_in_to_from_order(V_3, V_4) :-
    digraph.return_vertices_in_from_to_order(V_3, V_5),
    list.reverse(V_5, V_4).

digraph.rtc(V_3) = V_4 :-
    digraph.rtc(V_3, V_4).

digraph.sc(V_3) = V_4 :-
    digraph.sc(V_3, V_4).

digraph.sc(V_3, V_4) :-
    digraph.inverse(V_3, V_5),
    digraph.to_key_assoc_list(V_5, V_6),
    digraph.add_assoc_list(V_6, V_3, V_4).

digraph.search_key(V_4, V_5, V_6) :-
    V_4 = digraph.digraph(V_8, V_7, V_9, V_10) : digraph.digraph(T_1),
    bimap.search(V_7, V_5, V_6).

digraph.tc(V_3) = V_4 :-
    digraph.tc(V_3, V_4).

digraph.to_assoc_list(V_3) = V_4 :-
    digraph.to_assoc_list(V_3, V_4).

digraph.to_key_assoc_list(V_3) = V_4 :-
    digraph.to_key_assoc_list(V_3, V_4).

digraph.to_key_assoc_list(V_3, V_4) :-
    V_3 = digraph.digraph(V_8, V_9, V_5, V_10) : digraph.digraph(T_1),
    map.keys(V_5, V_6),
    V_7 = list.[] : list.list(pair.pair(digraph.digraph_key(T_1), digraph.digraph_key(T_1))),
    digraph.to_key_assoc_list_2(V_5, V_6, V_7, V_4).

digraph.traverse(V_6, V_7, V_8, V_11, V_12) :-
    digraph.keys(V_6, V_10),
    digraph.traverse_vertex_list(V_6, V_7, V_8, V_10, V_11, V_12).

digraph.traverse_children(V_7, V_8, V_9, list.[], V_11, V_12) :-
    V_12 = V_11.
digraph.traverse_children(V_13, V_14, V_15, list.[V_16 | V_17], V_20, V_21) :-
    V_19 = digraph.lookup_vertex(V_13, V_16),
    call(V_14, V_15, V_19, V_20, V_22),
    digraph.traverse_children(V_13, V_14, V_15, V_17, V_22, V_21).

digraph.traverse_vertex_list(V_7, V_8, V_9, list.[], V_11, V_12) :-
    V_12 = V_11.
digraph.traverse_vertex_list(V_13, V_14, V_15, list.[V_16 | V_17], V_21, V_22) :-
    V_19 = digraph.lookup_vertex(V_13, V_16),
    call(V_14, V_19, V_21, V_23),
    V_20 = set.to_sorted_list(V_24),
    V_24 = digraph.lookup_from(V_13, V_16),
    digraph.traverse_children(V_13, V_15, V_19, V_20, V_23, V_25),
    digraph.traverse_vertex_list(V_13, V_14, V_15, V_17, V_25, V_22).

digraph.tsort(V_3, V_4) :-
    digraph.return_vertices_in_from_to_order(V_3, V_4).

digraph.vertices(V_3) = V_4 :-
    digraph.vertices(V_3, V_4).

digraph.vertices(V_3, V_4) :-
    V_3 = digraph.digraph(V_7, V_6, V_8, V_9) : digraph.digraph(T_1),
    bimap.ordinates(V_6, V_5),
    set.sorted_list_to_set(V_5, V_4).

:- pragma termination_info(digraph.'ClassMethod_for_enum__enum____digraph__digraph_key__arity1______enum__from_int_1'((builtin.in)) = (builtin.out), finite(1, [no, yes, no]), cannot_loop).
:- pragma termination_info(digraph.'ClassMethod_for_enum__enum____digraph__digraph_key__arity1______enum__to_int_1'((builtin.in)) = (builtin.out), finite(-1, [no, yes, no]), cannot_loop).
:- pragma termination_info(digraph.add_assoc_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.add_assoc_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.add_edge((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.add_edge((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.add_vertex((builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.add_vertex_pair((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.add_vertex_pair((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.add_vertices_and_edge((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.add_vertices_and_edge((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.atsort((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.atsort((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.cliques((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.cliques((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.components((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.components((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.compose((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.compose((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.delete_assoc_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.delete_assoc_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.delete_edge((builtin.in), (builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.delete_edge((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfs((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.dfs((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfs((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.dfs((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfs((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfs_2((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfsrev((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.dfsrev((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfsrev((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.dfsrev((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.dfsrev((builtin.in), (builtin.in), (builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.from_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.from_assoc_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info((digraph.init) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.init((builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.inverse((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(digraph.inverse((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(digraph.is_dag((builtin.in)), infinite, can_loop).
:- pragma termination_info(digraph.is_edge((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.is_edge((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(digraph.is_edge_rev((builtin.in), (builtin.out), (builtin.in)), infinite, can_loop).
:- pragma termination_info(digraph.is_edge_rev((builtin.in), (builtin.in), (builtin.in)), finite(0, [no, no, no, no]), can_loop).
:- pragma termination_info(digraph.keys((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.lookup_from((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.lookup_from((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.lookup_key((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.lookup_key((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.lookup_key_set_from((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.lookup_key_set_from((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.lookup_key_set_to((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.lookup_key_set_to((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.lookup_to((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.lookup_to((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.lookup_vertex((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.lookup_vertex((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.reduced((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.reduced((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.reduced((builtin.in), (builtin.out), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.return_sccs_in_from_to_order((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.return_sccs_in_to_from_order((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.return_vertices_in_from_to_order((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.return_vertices_in_to_from_order((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.rtc((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.rtc((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.sc((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.sc((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.search_key((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.tc((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.tc((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.to_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.to_assoc_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.to_key_assoc_list((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.to_key_assoc_list((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.to_key_assoc_list_2((builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.traverse((builtin.in), ((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), ((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(digraph.traverse((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), ((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.traverse_children((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(digraph.traverse_children((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.traverse_vertex_list((builtin.in), ((pred((builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is det)), ((pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det) >> (pred((builtin.in), (builtin.in), (builtin.di), (builtin.uo)) is det)), (builtin.in), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(digraph.traverse_vertex_list((builtin.in), ((pred((builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.out)) is det)), ((pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det) >> (pred((builtin.in), (builtin.in), (builtin.in), (builtin.out)) is det)), (builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.tsort((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(digraph.vertices((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(digraph.vertices((builtin.in), (builtin.out)), infinite, can_loop).

:- pragma exceptions(function, (digraph.add_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.add_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.add_edge), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.add_edge), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.add_vertex), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.add_vertex_pair), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.add_vertex_pair), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.add_vertices_and_edge), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.add_vertices_and_edge), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.atsort), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.atsort), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.cliques), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.cliques), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.components), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.components), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.compose), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.compose), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.delete_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.delete_assoc_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.delete_edge), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.delete_edge), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.dfs), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfs), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.dfs), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfs), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfs), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfs_2), 6, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.dfsrev), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfsrev), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.dfsrev), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfsrev), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.dfsrev), 5, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.from_assoc_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.from_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.init), 0, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.init), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.inverse), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (digraph.inverse), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (digraph.is_dag), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.is_edge), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.is_edge), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.is_edge_rev), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.is_edge_rev), 3, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.keys), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.lookup_from), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.lookup_from), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.lookup_key), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.lookup_key), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.lookup_key_set_from), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.lookup_key_set_from), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.lookup_key_set_to), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.lookup_key_set_to), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.lookup_to), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.lookup_to), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.lookup_vertex), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.lookup_vertex), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.reduced), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.reduced), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.reduced), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.return_sccs_in_from_to_order), 1, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.return_sccs_in_to_from_order), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.return_vertices_in_from_to_order), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.return_vertices_in_to_from_order), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.rtc), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.rtc), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.sc), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.sc), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.search_key), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.tc), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.tc), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.to_assoc_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.to_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.to_key_assoc_list), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.to_key_assoc_list), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.to_key_assoc_list_2), 4, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.traverse), 5, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.traverse), 5, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.traverse_children), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.traverse_children), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.traverse_vertex_list), 6, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.traverse_vertex_list), 6, 1, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.tsort), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (digraph.vertices), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (digraph.vertices), 2, 0, may_throw(user_exception)).
