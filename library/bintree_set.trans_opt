:- module bintree_set.
:- pragma termination_info(bintree_set.list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bintree_set.list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bintree_set.sorted_list_to_set((builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bintree_set.sorted_list_to_set((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bintree_set.to_sorted_list((builtin.in), (builtin.out)), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(bintree_set.to_sorted_list((builtin.in)) = (builtin.out), finite(0, [no, yes, no]), cannot_loop).
:- pragma termination_info(bintree_set.init((builtin.uo)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info((bintree_set.init) = (builtin.out), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(bintree_set.singleton_set((builtin.out), (builtin.in)), finite(4, [no, no, yes]), cannot_loop).
:- pragma termination_info(bintree_set.equal((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.subset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.superset((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.member((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.member((builtin.out), (builtin.in)), finite(-2, [no, no, yes]), cannot_loop).
:- pragma termination_info(bintree_set.is_member((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.contains((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.insert((builtin.di), (builtin.di), (builtin.uo)), finite(4, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(bintree_set.insert((builtin.in), (builtin.in), (builtin.out)), finite(4, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(bintree_set.insert((builtin.in), (builtin.in)) = (builtin.out), finite(4, [no, yes, yes, no]), cannot_loop).
:- pragma termination_info(bintree_set.insert_list((builtin.di), (builtin.di), (builtin.uo)), infinite, can_loop).
:- pragma termination_info(bintree_set.insert_list((builtin.in), (builtin.in), (builtin.out)), infinite, can_loop).
:- pragma termination_info(bintree_set.insert_list((builtin.in), (builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info(bintree_set.remove((builtin.in), (builtin.in), (builtin.out)), finite(-4, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.remove_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.delete((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.delete((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.delete_list((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.delete_list((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.union((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(bintree_set.union((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, yes, no]), can_loop).
:- pragma termination_info(bintree_set.intersect((builtin.in), (builtin.in), (builtin.out)), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.intersect((builtin.in), (builtin.in)) = (builtin.out), finite(0, [no, yes, no, no]), cannot_loop).
:- pragma termination_info(bintree_set.assoc_unit((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(bintree_set.contains_list((builtin.in), (builtin.in)), finite(0, [no, no, no]), cannot_loop).
:- pragma exceptions(predicate, (bintree_set.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bintree_set.list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bintree_set.sorted_list_to_set), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.to_sorted_list), 2, 0, will_not_throw).
:- pragma exceptions(function, (bintree_set.to_sorted_list), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (bintree_set.init), 1, 0, will_not_throw).
:- pragma exceptions(function, (bintree_set.init), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (bintree_set.singleton_set), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.equal), 2, 0, conditional).
:- pragma exceptions(predicate, (bintree_set.subset), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.superset), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.member), 2, 0, conditional).
:- pragma exceptions(predicate, (bintree_set.member), 2, 1, will_not_throw).
:- pragma exceptions(predicate, (bintree_set.is_member), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.contains), 2, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.insert), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.insert), 3, 1, may_throw(type_exception)).
:- pragma exceptions(function, (bintree_set.insert), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.insert_list), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.insert_list), 3, 1, may_throw(type_exception)).
:- pragma exceptions(function, (bintree_set.insert_list), 3, 0, may_throw(type_exception)).
:- pragma exceptions(predicate, (bintree_set.remove), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.remove_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bintree_set.delete), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bintree_set.delete_list), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bintree_set.union), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(function, (bintree_set.intersect), 3, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (bintree_set.assoc_unit), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (bintree_set.contains_list), 2, 0, may_throw(type_exception)).
