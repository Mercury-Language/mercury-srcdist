:- module thread.
:- interface.
:- include_module (thread.barrier).
:- include_module (thread.channel).
:- include_module (thread.closeable_channel).
:- include_module (thread.future).
:- include_module (thread.mvar).
:- include_module (thread.semaphore).
:- use_module io.
:- use_module maybe.
:- type thread.
:- type thread_options.
:- pred can_spawn is semidet.
:- pred can_spawn_native is semidet.
:- func init_thread_options = thread.thread_options.
:- pred num_processors(maybe.maybe(int), io.io, io.io).
:- mode num_processors((builtin.out), (builtin.di), (builtin.uo)) is det.
:- pred set_min_stack_size(uint, thread.thread_options, thread.thread_options).
:- mode set_min_stack_size((builtin.in), (builtin.in), (builtin.out)) is det.
:- pred spawn(pred(io.io, io.io), io.io, io.io).
:- mode spawn(((pred((builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.di), (builtin.uo)) is cc_multi)), (builtin.di), (builtin.uo)) is cc_multi.
:- pred spawn(pred(thread.thread, io.io, io.io), maybe.maybe_error(thread.thread), io.io, io.io).
:- mode spawn(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred spawn_native(pred(thread.thread, io.io, io.io), maybe.maybe_error(thread.thread), io.io, io.io).
:- mode spawn_native(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred spawn_native(pred(thread.thread, io.io, io.io), thread.thread_options, maybe.maybe_error(thread.thread), io.io, io.io).
:- mode spawn_native(((pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi) >> (pred((builtin.in), (builtin.di), (builtin.uo)) is cc_multi)), (builtin.in), (builtin.out), (builtin.di), (builtin.uo)) is cc_multi.
:- pred yield(io.io, io.io).
:- mode yield((builtin.di), (builtin.uo)) is det.
