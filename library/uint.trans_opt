:- module uint.

:- pragma termination_info(uint.'*'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'+'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'+'((builtin.uo), (builtin.in)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'+'((builtin.in), (builtin.uo)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'-'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'-'((builtin.uo), (builtin.in)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'-'((builtin.in), (builtin.uo)) = (builtin.in), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'/\\'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.'<'((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint.'=<'((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint.'>'((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint.'>='((builtin.in), (builtin.in)), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint.'\\'((builtin.in)) = (builtin.uo), finite(0, [no, no]), cannot_loop).
:- pragma termination_info(uint.'\\/'((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info((uint.bits_per_uint) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint.cast_from_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint.cast_to_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint.det_from_int((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint.even((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint.from_int((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info(uint.max((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, yes, no]), cannot_loop).
:- pragma termination_info((uint.max_uint) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint.min((builtin.in), (builtin.in)) = (builtin.out), finite(0, [yes, yes, no]), cannot_loop).
:- pragma termination_info(uint.odd((builtin.in)), finite(0, [no]), cannot_loop).
:- pragma termination_info(uint.uint_to_doc((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info(uint.unchecked_left_shift((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.unchecked_quotient((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.unchecked_rem((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.unchecked_right_shift((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).
:- pragma termination_info(uint.xor((builtin.in), (builtin.in)) = (builtin.uo), finite(0, [no, no, no]), cannot_loop).

:- pragma exceptions(function, (uint.(*)), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.(+)), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.(+)), 3, 1, will_not_throw).
:- pragma exceptions(function, (uint.(+)), 3, 2, will_not_throw).
:- pragma exceptions(function, (uint.(-)), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.(-)), 3, 1, will_not_throw).
:- pragma exceptions(function, (uint.(-)), 3, 2, will_not_throw).
:- pragma exceptions(function, (uint.(/\)), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (uint.(<)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint.(=<)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint.(>)), 2, 0, will_not_throw).
:- pragma exceptions(predicate, (uint.(>=)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint.(\)), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint.(\/)), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.bits_per_uint), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint.cast_from_int), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint.cast_to_int), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint.det_from_int), 2, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, (uint.even), 1, 0, will_not_throw).
:- pragma exceptions(predicate, (uint.from_int), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint.max), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.max_uint), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint.min), 3, 0, will_not_throw).
:- pragma exceptions(predicate, (uint.odd), 1, 0, will_not_throw).
:- pragma exceptions(function, (uint.uint_to_doc), 2, 0, will_not_throw).
:- pragma exceptions(function, (uint.unchecked_left_shift), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.unchecked_quotient), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.unchecked_rem), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.unchecked_right_shift), 3, 0, will_not_throw).
:- pragma exceptions(function, (uint.xor), 3, 0, will_not_throw).
