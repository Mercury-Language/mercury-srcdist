:- module (thread.future).

:- pragma termination_info((thread.future).future((builtin.in)) = (builtin.out), infinite, can_loop).
:- pragma termination_info((thread.future).init((builtin.uo), (builtin.di), (builtin.uo)), infinite, cannot_loop).
:- pragma termination_info((thread.future).signal((builtin.in), (builtin.in), (builtin.di), (builtin.uo)), finite(0, [no, no, no, yes, no]), cannot_loop).
:- pragma termination_info((thread.future).wait((builtin.in)) = (builtin.out), infinite, cannot_loop).
:- pragma termination_info((thread.future).wait((builtin.in), (builtin.out)), infinite, cannot_loop).
:- pragma termination_info((thread.future).wait((builtin.in), (builtin.out), (builtin.di), (builtin.uo)), infinite, cannot_loop).

:- pragma exceptions(function, ((thread.future).future), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((thread.future).init), 3, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.future).signal), 4, 0, may_throw(user_exception)).
:- pragma exceptions(function, ((thread.future).wait), 1, 0, may_throw(user_exception)).
:- pragma exceptions(predicate, ((thread.future).wait), 2, 0, will_not_throw).
:- pragma exceptions(predicate, ((thread.future).wait), 4, 0, will_not_throw).
