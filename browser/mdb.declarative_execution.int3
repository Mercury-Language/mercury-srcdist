:- module (mdb.declarative_execution).
:- interface.
:- import_module bool.
:- import_module io.
:- import_module list.
:- import_module maybe.
:- import_module (mdb.term_rep).
:- import_module (mdbcomp.prim_data).
:- import_module (mdbcomp.program_representation).
:- import_module (mdbcomp.rtti_access).
:- import_module (mdbcomp.sym_name).
:- type event_number.
:- type goal_status
	where	type_is_abstract_enum(2).
:- type implicit_tree_info.
:- type sequence_number.
:- type suspicion_accumulator.
:- type trace_atom.
:- type trace_atom_arg.
:- type trace_node(R).
:- type trace_node_id.
:- type trace_node_key.
:- type trace_node_map.
:- type trace_node_store.
:- type which_headvars
	where	type_is_abstract_enum(1).
:- inst (trace_node_call) == bound(node_call(ground, ground, ground, ground, ground, ground, ground, ground, ground, ground)).
:- inst (trace_node_cond) == bound(node_cond(ground, ground, ground)).
:- inst (trace_node_disj) == bound(node_first_disj(ground, ground) ; node_later_disj(ground, ground, ground)).
:- inst (trace_node_exit) == bound(node_exit(ground, ground, ground, ground, ground, ground, ground, ground)).
:- inst (trace_node_first_disj) == bound(node_first_disj(ground, ground)).
:- inst (trace_node_neg) == bound(node_neg(ground, ground, ground)).
:- inst (trace_node_redo) == bound(node_redo(ground, ground, ground, ground, ground)).
:- typeclass annotated_trace(S, R).
:- instance ((mdb.declarative_execution).annotated_trace(mdb.declarative_execution.trace_node_map, mdb.declarative_execution.trace_node_key)).
:- instance ((mdb.declarative_execution).annotated_trace(mdb.declarative_execution.trace_node_store, mdb.declarative_execution.trace_node_id)).
