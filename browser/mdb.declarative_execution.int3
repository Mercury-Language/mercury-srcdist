:- module (mdb.declarative_execution).
:- interface.
:- import_module bool.
:- import_module io.
:- import_module list.
:- import_module maybe.
:- import_module mdbcomp.
:- import_module (mdb.term_rep).
:- import_module (mdbcomp.prim_data).
:- import_module (mdbcomp.program_representation).
:- import_module (mdbcomp.rtti_access).
:- import_module (mdbcomp.sym_name).
:- type event_number.
:- type goal_status
	where	type_is_abstract_enum(2).
:- type implicit_tree_info.
:- type sequence_number.
:- type suspicion_accumulator.
:- type trace_atom.
:- type trace_atom_arg.
:- type trace_node(R).
:- type trace_node_id.
:- type trace_node_key.
:- type trace_node_map.
:- type trace_node_store.
:- type which_headvars
	where	type_is_abstract_enum(1).
:- abstract_inst((trace_node_call)).
:- abstract_inst((trace_node_cond)).
:- abstract_inst((trace_node_disj)).
:- abstract_inst((trace_node_exit)).
:- abstract_inst((trace_node_first_disj)).
:- abstract_inst((trace_node_neg)).
:- abstract_inst((trace_node_redo)).
:- typeclass annotated_trace(S, R).
:- instance ((mdb.declarative_execution).annotated_trace(mdb.declarative_execution.trace_node_map, mdb.declarative_execution.trace_node_key)).
:- instance ((mdb.declarative_execution).annotated_trace(mdb.declarative_execution.trace_node_store, mdb.declarative_execution.trace_node_id)).
:- type_representation(event_number, is_eqv_to(int)).
:- type_representation(goal_status, du_repn(enum("succeeded", "failed", ["undecided"],  no_c_j_cs))).
:- type_representation(implicit_tree_info, du_repn(notag("implicit_tree_info", int,  no_c_j_cs))).
:- type_representation(sequence_number, is_eqv_to(int)).
:- type_representation(suspicion_accumulator, is_eqv_to(int)).
:- type_representation(trace_atom, is_word_aligned_ptr).
:- type_representation(trace_atom_arg, is_word_aligned_ptr).
:- type_representation(trace_node_id, du_repn(notag("id", c_pointer,  no_c_j_cs))).
:- type_representation(trace_node_key, du_repn(notag("key", int,  no_c_j_cs))).
:- type_representation(trace_node_map, du_repn(notag("map", map(trace_node_key, trace_node(trace_node_key)),  no_c_j_cs))).
:- type_representation(trace_node_store, du_repn(notag("store", int,  no_c_j_cs))).
:- type_representation(which_headvars, du_repn(enum("all_headvars", "only_user_headvars", [],  no_c_j_cs))).
