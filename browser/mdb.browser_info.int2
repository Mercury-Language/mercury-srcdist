:- module (mdb.browser_info).
:- interface.
:- use_module io.
:- use_module list.
:- use_module stream.
:- type browse_caller_type
    --->    print 
    ;       browse 
    ;       print_all .
:- type browser_db
    --->    browser_db(((mdb.browser_info).browser_stream_db) :: io.stream_db).
:- type browser_info
    --->    browser_info(((mdb.browser_info).bri_term) :: mdb.browser_term.browser_term, ((mdb.browser_info).bri_dirs) :: list.list(mdb.browser_info.down_dir), ((mdb.browser_info).bri_caller_type) :: mdb.browser_info.browse_caller_type, ((mdb.browser_info).bri_format) :: maybe.maybe(mdb.browser_info.portray_format), ((mdb.browser_info).bri_state) :: mdb.browser_info.browser_persistent_state, ((mdb.browser_info).bri_maybe_track) :: mdb.browser_info.maybe_track_subterm(list.list(mdb.browser_info.down_dir)), ((mdb.browser_info).bri_maybe_mode_func) :: maybe.maybe(mdb.browser_info.browser_mode_func)).
:- type browser_mode_func == ((func list.list(mdb.browser_info.down_dir)) = mdb.browser_info.browser_term_mode).
:- type browser_persistent_state.
:- type browser_term_mode
    --->    btm_input 
    ;       btm_output 
    ;       btm_unbound 
    ;       btm_not_applicable .
:- type debugger
    --->    debugger_internal(io.text_output_stream)
    ;       debugger_external(io.text_output_stream).
:- type down_dir
    --->    down_child_num(int)
    ;       down_child_name(string).
:- type format_params
    --->    format_params(((mdb.browser_info).depth) :: int, ((mdb.browser_info).size) :: int, ((mdb.browser_info).width) :: int, ((mdb.browser_info).lines) :: int).
:- type how_track_subterm
    --->    track_accurate 
    ;       track_fast .
:- type maybe_track_subterm(P)
    --->    no_track 
    ;       track(mdb.browser_info.how_track_subterm, mdb.browser_info.should_assert_invalid, P).
:- type param_cmd
    --->    format(getopt.maybe_option_table(mdb.parse.setting_option), mdb.browser_info.setting)
    ;       format_param(getopt.maybe_option_table(mdb.parse.setting_option), mdb.browser_info.setting)
    ;       num_io_actions(int)
    ;       print_params .
:- type portray_format
    --->    flat 
    ;       raw_pretty 
    ;       verbose 
    ;       pretty .
:- type setting
    --->    setting_depth(int)
    ;       setting_size(int)
    ;       setting_width(int)
    ;       setting_lines(int)
    ;       setting_format(mdb.browser_info.portray_format).
:- type should_assert_invalid
    --->    assert_invalid 
    ;       no_assert_invalid .
:- type term_browser_response
    --->    browser_str(string)
    ;       browser_int(int)
    ;       browser_nl 
    ;       browser_end_command 
    ;       browser_quit .
:- type up_down_dir
    --->    updown_parent 
    ;       updown_child_num(int)
    ;       updown_child_name(string).
:- instance (stream.output(mdb.browser_info.debugger, io.io)).
:- instance (stream.stream(mdb.browser_info.debugger, io.io)).
:- instance (stream.writer(mdb.browser_info.debugger, int, io.io)).
:- instance (stream.writer(mdb.browser_info.debugger, string, io.io)).
:- type_representation(browse_caller_type, du_repn(enum("print", "browse", ["print_all"],  no_c_j_cs))).
:- type_representation(browser_db, du_repn(notag("browser_db", io.stream_db,  no_c_j_cs))).
:- type_representation(browser_info, is_word_aligned_ptr).
:- type_representation(browser_mode_func, is_eqv_to(((func list.list(mdb.browser_info.down_dir)) = mdb.browser_info.browser_term_mode))).
:- type_representation(browser_persistent_state, is_word_aligned_ptr).
:- type_representation(browser_term_mode, du_repn(enum("btm_input", "btm_output", ["btm_unbound", "btm_not_applicable"],  no_c_j_cs))).
:- type_representation(format_params, is_word_aligned_ptr).
:- type_representation(how_track_subterm, du_repn(enum("track_accurate", "track_fast", [],  no_c_j_cs))).
:- type_representation(portray_format, du_repn(enum("flat", "raw_pretty", ["verbose", "pretty"],  no_c_j_cs))).
:- type_representation(should_assert_invalid, du_repn(enum("assert_invalid", "no_assert_invalid", [],  no_c_j_cs))).
