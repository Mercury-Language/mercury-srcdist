# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated dependencies for module `declarative_test'
# generated from source file `declarative_test.m'
# Generated by the Mercury compiler, version rotd-2017-06-22
# configured for x86_64-apple-darwin13.4.0.

ifeq (x,y)
# Automatically generated dependencies for module `declarative_test'
# generated from source file `declarative_test.m'
# Generated by the Mercury compiler, version rotd-2017-06-22,
# configured for x86_64-apple-darwin13.4.0.
endif

ifneq ($(EXT_FOR_EXE),)
.PHONY : declarative_test
declarative_test : declarative_test$(EXT_FOR_EXE)
endif
ifneq ($(EXT_FOR_EXE),)

ifeq (x,y)
# RULE ext_for_exe
.PHONY: declarative_test
declarative_test : declarative_test$(EXT_FOR_EXE)
endif

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)
declarative_test : $(declarative_test.classes)
else
declarative_test$(EXT_FOR_EXE) : $(declarative_test.os) declarative_test_init.$O \
		$(foreach @,declarative_test,$(ALL_MLOBJS)) \
		$(foreach @,declarative_test,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)declarative_test$(EXT_FOR_EXE) declarative_test_init.$O \
		$(declarative_test.os) \
		$(foreach @,declarative_test,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif
ifeq ($(findstring java,$(GRADE)),java)

ifeq (x,y)
# RULE executable_java
declarative_test : $(declarative_test.classes)
endif

else

ifeq (x,y)
# RULE executable_non_java
declarative_test$(EXT_FOR_EXE) : \
		$(declarative_test.os) \
		declarative_test_init.$O \
		$(foreach @,declarative_test,$(ALL_MLOBJS)) \
		$(foreach @,declarative_test,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)declarative_test$(EXT_FOR_EXE) declarative_test_init.$O \
		$(declarative_test.os) \
		$(foreach @,declarative_test,$(ALL_MLOBJS)) $(ALL_MLLIBS)
endif

endif # conditional fragment

.PHONY : libdeclarative_test
ifeq ($(findstring java,$(GRADE)),java)
libdeclarative_test : declarative_test.jar \
		$(declarative_test.ints) $(declarative_test.int3s) declarative_test.init

else
libdeclarative_test : libdeclarative_test.$A libdeclarative_test.$(EXT_FOR_SHARED_LIB) \
		$(declarative_test.ints) $(declarative_test.int3s) declarative_test.init

endif
ifeq ($(findstring java,$(GRADE)),java)

ifeq (x,y)
# RULE lib_target_java
.PHONY: libdeclarative_test
libdeclarative_test : \
		declarative_test.jar \
		$(declarative_test.ints) \
		$(declarative_test.int3s) \
		declarative_test.init
endif

else

ifeq (x,y)
# RULE lib_target_non_java
.PHONY: libdeclarative_test
libdeclarative_test : \
		libdeclarative_test.$A \
		libdeclarative_test.$(EXT_FOR_SHARED_LIB) \
		$(declarative_test.ints) \
		$(declarative_test.int3s) \
		declarative_test.init
endif

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$A)
libdeclarative_test.$(EXT_FOR_SHARED_LIB) : $(declarative_test.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,declarative_test,$(ALL_MLOBJS))) \
		$(foreach @,declarative_test,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libdeclarative_test.$(EXT_FOR_SHARED_LIB) \
		$(declarative_test.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,declarative_test,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

ifeq (x,y)
# RULE shared_lib
libdeclarative_test.$(EXT_FOR_SHARED_LIB) : \
		$(declarative_test.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,declarative_test,$(ALL_MLOBJS))) \
		$(foreach @,declarative_test,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libdeclarative_test.$(EXT_FOR_SHARED_LIB) \
		$(declarative_test.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,declarative_test,$(ALL_MLOBJS))) $(ALL_MLLIBS)
endif

endif # conditional fragment

libdeclarative_test.$A : $(declarative_test.os) \
		$(foreach @,declarative_test,$(ALL_MLOBJS))
	rm -f libdeclarative_test.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libdeclarative_test.$A $(declarative_test.os) \
		$(foreach @,declarative_test,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libdeclarative_test.$A

ifeq (x,y)
# RULE lib
libdeclarative_test.$A : \
		$(declarative_test.os) \
		$(foreach @,declarative_test,$(ALL_MLOBJS))
	rm -f libdeclarative_test.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libdeclarative_test.$A $(declarative_test.os) \
		$(foreach @,declarative_test,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libdeclarative_test.$A
endif

declarative_test.jar : $(declarative_test.classes)
	$(JAR) $(JAR_CREATE_FLAGS) declarative_test.jar $(declarative_test.classes)

ifeq (x,y)
# RULE jar
declarative_test.jar : $(declarative_test.classes)
	$(JAR) $(JAR_CREATE_FLAGS) declarative_test.jar $(declarative_test.classes)
endif

declarative_test.init : declarative_test.dep $(declarative_test.cs)
	echo > declarative_test.init
	$(MKLIBINIT) $(declarative_test.cs) >> declarative_test.init
	$(EXTRA_INIT_COMMAND) >> declarative_test.init

ifeq (x,y)
# RULE init_file
declarative_test.init : \
		declarative_test.dep \
		$(declarative_test.cs)
	echo > declarative_test.init
	$(MKLIBINIT) $(declarative_test.cs) >> declarative_test.init
	$(EXTRA_INIT_COMMAND) >> declarative_test.init
endif

force-declarative_test_init :

ifeq (x,y)
# RULE force_init_c_file
force-declarative_test_init :
endif

declarative_test_init.c : force-declarative_test_init $(declarative_test.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file declarative_test_init.c.tmp $(declarative_test.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface declarative_test_init.c

ifeq (x,y)
# RULE init_c_file
declarative_test_init.c : \
		force-declarative_test_init \
		$(declarative_test.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file declarative_test_init.c.tmp $(declarative_test.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface declarative_test_init.c
endif

.PHONY : libdeclarative_test.install_ints
libdeclarative_test.install_ints : $(declarative_test.ints) $(declarative_test.int3s) $(declarative_test.module_deps)  install_lib_dirs
	files="$(declarative_test.ints) $(declarative_test.int3s) $(declarative_test.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

ifeq (x,y)
# RULE lib_install_ints
.PHONY: libdeclarative_test.install_ints
libdeclarative_test.install_ints : \
		$(declarative_test.ints) \
		$(declarative_test.int3s) \
		$(declarative_test.module_deps) \
		install_lib_dirs
	files="$(declarative_test.ints) $(declarative_test.int3s) $(declarative_test.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done
endif

.PHONY : libdeclarative_test.install_opts
libdeclarative_test.install_opts : 
	@:

ifeq (x,y)
# RULE lib_install_opts
.PHONY: libdeclarative_test.install_opts
libdeclarative_test.install_opts :
	@:
endif

.PHONY : libdeclarative_test.install_hdrs
libdeclarative_test.install_hdrs : $(declarative_test.mhs) install_lib_dirs
ifeq ($(declarative_test.mhs),)
	@:
else
	for hdr in $(declarative_test.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

ifeq ($(declarative_test.mhs),)

ifeq (x,y)
# RULE install_lib_hdrs_nomhs
.PHONY: libdeclarative_test.install_hdrs
libdeclarative_test.install_hdrs : \
		$(declarative_test.mhs) \
		install_lib_dirs
	@:
endif

else

ifeq (x,y)
# RULE install_lib_hdrs_mhs
.PHONY: libdeclarative_test.install_hdrs
libdeclarative_test.install_hdrs : \
		$(declarative_test.mhs) \
		install_lib_dirs
	for hdr in $(declarative_test.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done
endif

endif # conditional fragment

.PHONY : libdeclarative_test.install_grade_hdrs
libdeclarative_test.install_grade_hdrs : $(declarative_test.mihs) install_grade_dirs
ifeq ($(declarative_test.mihs),)
	@:
else
	for hdr in $(declarative_test.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

ifeq ($(declarative_test.mihs),)

ifeq (x,y)
# RULE install_grade_hdrs_no_mihs
.PHONY: libdeclarative_test.install_grade_hdrs
libdeclarative_test.install_grade_hdrs : \
		$(declarative_test.mihs) \
		install_grade_dirs
	@:
endif

else

ifeq (x,y)
# RULE install_grade_hdrs_mihs
.PHONY: libdeclarative_test.install_grade_hdrs
libdeclarative_test.install_grade_hdrs : \
		$(declarative_test.mihs) \
		install_grade_dirs
	for hdr in $(declarative_test.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1
endif

endif # conditional fragment

.PHONY : declarative_test.check
declarative_test.check : $(declarative_test.errs)

ifeq (x,y)
# RULE collective_target_.check.errs
.PHONY: declarative_test.check
declarative_test.check : $(declarative_test.errs)
endif

.PHONY : declarative_test.ints
declarative_test.ints : $(declarative_test.dates)

ifeq (x,y)
# RULE collective_target_.ints.dates
.PHONY: declarative_test.ints
declarative_test.ints : $(declarative_test.dates)
endif

.PHONY : declarative_test.int3s
declarative_test.int3s : $(declarative_test.date3s)

ifeq (x,y)
# RULE collective_target_.int3s.date3s
.PHONY: declarative_test.int3s
declarative_test.int3s : $(declarative_test.date3s)
endif

.PHONY : declarative_test.opts
declarative_test.opts : $(declarative_test.optdates)

ifeq (x,y)
# RULE collective_target_.opts.optdates
.PHONY: declarative_test.opts
declarative_test.opts : $(declarative_test.optdates)
endif

.PHONY : declarative_test.trans_opts
declarative_test.trans_opts : $(declarative_test.trans_opt_dates)

ifeq (x,y)
# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: declarative_test.trans_opts
declarative_test.trans_opts : $(declarative_test.trans_opt_dates)
endif

.PHONY : declarative_test.javas
declarative_test.javas : $(declarative_test.javas)

ifeq (x,y)
# RULE collective_target_.javas.javas
.PHONY: declarative_test.javas
declarative_test.javas : $(declarative_test.javas)
endif

.PHONY : declarative_test.classes
declarative_test.classes : $(declarative_test.classes)

ifeq (x,y)
# RULE collective_target_.classes.classes
.PHONY: declarative_test.classes
declarative_test.classes : $(declarative_test.classes)
endif

.PHONY : declarative_test.all_ints
declarative_test.all_ints : $(declarative_test.dates)

ifeq (x,y)
# RULE collective_target_.all_ints.dates
.PHONY: declarative_test.all_ints
declarative_test.all_ints : $(declarative_test.dates)
endif

.PHONY : declarative_test.all_int3s
declarative_test.all_int3s : $(declarative_test.date3s)

ifeq (x,y)
# RULE collective_target_.all_int3s.date3s
.PHONY: declarative_test.all_int3s
declarative_test.all_int3s : $(declarative_test.date3s)
endif

.PHONY : declarative_test.all_opts
declarative_test.all_opts : $(declarative_test.optdates)

ifeq (x,y)
# RULE collective_target_.all_opts.optdates
.PHONY: declarative_test.all_opts
declarative_test.all_opts : $(declarative_test.optdates)
endif

.PHONY : declarative_test.all_trans_opts
declarative_test.all_trans_opts : $(declarative_test.trans_opt_dates)

ifeq (x,y)
# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: declarative_test.all_trans_opts
declarative_test.all_trans_opts : $(declarative_test.trans_opt_dates)
endif

clean_local : declarative_test.clean
.PHONY : declarative_test.clean
declarative_test.clean :
	-echo $(declarative_test.dirs) | xargs rm -rf 
	-echo $(declarative_test.cs) declarative_test_init.c | xargs rm -f
	-echo $(declarative_test.mihs) | xargs rm -f
	-echo $(declarative_test.all_os) declarative_test_init.$O | xargs rm -f
	-echo $(declarative_test.all_pic_os) declarative_test_init.pic_o | xargs rm -f
	-echo $(declarative_test.c_dates) | xargs rm -f
	-echo $(declarative_test.java_dates) | xargs rm -f
	-echo $(declarative_test.useds) | xargs rm -f
	-echo $(declarative_test.javas) | xargs rm -f
	-echo $(declarative_test.profs) | xargs rm -f
	-echo $(declarative_test.errs) | xargs rm -f
	-echo $(declarative_test.foreign_cs) | xargs rm -f

ifeq (x,y)
# RULE clean_local
clean_local : declarative_test.clean
endif

ifeq (x,y)
# RULE clean_target
.PHONY: declarative_test.clean
declarative_test.clean :
	-echo $(declarative_test.dirs) | xargs rm -f
	-echo $(declarative_test.cs) | xargs rm -f
	-echo $(declarative_test.mihs) | xargs rm -f
	-echo $(declarative_test.all_os) | xargs rm -f
	-echo $(declarative_test.all_pic_os) | xargs rm -f
	-echo $(declarative_test.c_dates) | xargs rm -f
	-echo $(declarative_test.java_dates) | xargs rm -f
	-echo $(declarative_test.useds) | xargs rm -f
	-echo $(declarative_test.javas) | xargs rm -f
	-echo $(declarative_test.profs) | xargs rm -f
	-echo $(declarative_test.errs) | xargs rm -f
	-echo $(declarative_test.foreign_cs) | xargs rm -f
	-rm -f declarative_test_init.c declarative_test_init.$O declarative_test_init.pic_o
endif

realclean_local : declarative_test.realclean
.PHONY : declarative_test.realclean
declarative_test.realclean : declarative_test.clean
	-echo $(declarative_test.dates) | xargs rm -f
	-echo $(declarative_test.date0s) | xargs rm -f
	-echo $(declarative_test.date3s) | xargs rm -f
	-echo $(declarative_test.optdates) | xargs rm -f
	-echo $(declarative_test.trans_opt_dates) | xargs rm -f
	-echo $(declarative_test.ints) | xargs rm -f
	-echo $(declarative_test.all_int0s) | xargs rm -f
	-echo $(declarative_test.int3s) | xargs rm -f
	-echo $(declarative_test.opts) | xargs rm -f
	-echo $(declarative_test.trans_opts) | xargs rm -f
	-echo $(declarative_test.analysiss) | xargs rm -f
	-echo $(declarative_test.requests) | xargs rm -f
	-echo $(declarative_test.imdgs) | xargs rm -f
	-echo $(declarative_test.ds) | xargs rm -f
	-echo $(declarative_test.module_deps) | xargs rm -f
	-echo $(declarative_test.all_mhs) | xargs rm -f
	-echo $(declarative_test.all_mihs) | xargs rm -f
	-echo $(declarative_test.dlls) | xargs rm -f
	-echo $(declarative_test.foreign_dlls) | xargs rm -f
	-echo $(declarative_test.classes) | xargs rm -f
	-rm -f declarative_test$(EXT_FOR_EXE) declarative_test.init libdeclarative_test.$A libdeclarative_test.$(EXT_FOR_SHARED_LIB) declarative_test.jar declarative_test.dep declarative_test.dv

ifeq (x,y)
# RULE realclean_local
realclean_local : declarative_test.realclean
endif

ifeq (x,y)
# RULE realclean_target
.PHONY: declarative_test.realclean
declarative_test.realclean : declarative_test.clean
	-echo $(declarative_test.dates) | xargs rm -f
	-echo $(declarative_test.date0s) | xargs rm -f
	-echo $(declarative_test.date3s) | xargs rm -f
	-echo $(declarative_test.optdates) | xargs rm -f
	-echo $(declarative_test.trans_opt_dates) | xargs rm -f
	-echo $(declarative_test.ints) | xargs rm -f
	-echo $(declarative_test.all_int0s) | xargs rm -f
	-echo $(declarative_test.int3s) | xargs rm -f
	-echo $(declarative_test.opts) | xargs rm -f
	-echo $(declarative_test.trans_opts) | xargs rm -f
	-echo $(declarative_test.analysiss) | xargs rm -f
	-echo $(declarative_test.requests) | xargs rm -f
	-echo $(declarative_test.imdgs) | xargs rm -f
	-echo $(declarative_test.ds) | xargs rm -f
	-echo $(declarative_test.module_deps) | xargs rm -f
	-echo $(declarative_test.all_mhs) | xargs rm -f
	-echo $(declarative_test.all_mihs) | xargs rm -f
	-echo $(declarative_test.dlls) | xargs rm -f
	-echo $(declarative_test.foreign_dlls) | xargs rm -f
	-echo $(declarative_test.classes) | xargs rm -f
	-rm -f declarative_test$(EXT_FOR_EXE)  declarative_test.init libdeclarative_test.$A libdeclarative_test.$(EXT_FOR_SHARED_LIB) declarative_test.jar declarative_test.dep declarative_test.dv
endif

