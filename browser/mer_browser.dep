# vim: ts=8 sw=8 noexpandtab ft=make

# Automatically generated program dependencies for
# module `mer_browser' in source file `mer_browser.m'.
# Generated by Mercury compiler version rotd-2023-07-05
# configured for x86_64-pc-linux-gnu.

ifneq ($(EXT_FOR_EXE),)

# RULE ext_for_exe
.PHONY: mer_browser
mer_browser : mer_browser$(EXT_FOR_EXE)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE executable_java
mer_browser : $(mer_browser.classes)

else

# RULE executable_non_java
mer_browser$(EXT_FOR_EXE) : \
		$(mer_browser.os) \
		mer_browser_init.$O \
		$(foreach @,mer_browser,$(ALL_MLOBJS)) \
		$(foreach @,mer_browser,$(ALL_MLLIBS_DEP))
	$(ML) $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) -- $(ALL_LDFLAGS) $(EXEFILE_OPT)mer_browser$(EXT_FOR_EXE) mer_browser_init.$O \
		$(mer_browser.os) \
		$(foreach @,mer_browser,$(ALL_MLOBJS)) $(ALL_MLLIBS)

endif # conditional fragment

ifeq ($(findstring java,$(GRADE)),java)

# RULE lib_target_java
.PHONY: libmer_browser
libmer_browser : \
		mer_browser.jar \
		$(mer_browser.ints) \
		$(mer_browser.int3s) \
		mer_browser.init

else

# RULE lib_target_non_java
.PHONY: libmer_browser
libmer_browser : \
		libmer_browser.$A \
		libmer_browser.$(EXT_FOR_SHARED_LIB) \
		$(mer_browser.ints) \
		$(mer_browser.int3s) \
		mer_browser.init

endif # conditional fragment

ifneq ($(EXT_FOR_SHARED_LIB),$(A))

# RULE shared_lib
libmer_browser.$(EXT_FOR_SHARED_LIB) : \
		$(mer_browser.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_browser,$(ALL_MLOBJS))) \
		$(foreach @,mer_browser,$(ALL_MLLIBS_DEP))
	$(ML) --make-shared-lib $(ALL_GRADEFLAGS) $(ALL_MLFLAGS) --  $(ALL_LD_LIBFLAGS) -o libmer_browser.$(EXT_FOR_SHARED_LIB) \
		$(mer_browser.pic_os) \
		$(patsubst %.o,%.$(EXT_FOR_PIC_OBJECTS),$(foreach @,mer_browser,$(ALL_MLOBJS))) $(ALL_MLLIBS)

endif # conditional fragment

# RULE lib
libmer_browser.$A : \
		$(mer_browser.os) \
		$(foreach @,mer_browser,$(ALL_MLOBJS))
	rm -f libmer_browser.$A
	$(AR) $(ALL_ARFLAGS) $(AR_LIBFILE_OPT)libmer_browser.$A $(mer_browser.os) \
		$(foreach @,mer_browser,$(ALL_MLOBJS))
	$(RANLIB) $(ALL_RANLIBFLAGS) libmer_browser.$A

# RULE jar
mer_browser.jar : $(mer_browser.classes)
	$(JAR) $(JAR_CREATE_FLAGS) mer_browser.jar $(mer_browser.classes)

# RULE init_file
mer_browser.init : \
		mer_browser.dep \
		$(mer_browser.cs)
	echo > mer_browser.init
	$(MKLIBINIT) $(mer_browser.cs) >> mer_browser.init
	$(EXTRA_INIT_COMMAND) >> mer_browser.init

# RULE force_init_c_file
force-mer_browser_init :

# RULE init_c_file
mer_browser_init.c : \
		force-mer_browser_init \
		$(mer_browser.cs)
	@$(C2INIT) $(ALL_GRADEFLAGS) $(ALL_C2INITFLAGS) --init-c-file mer_browser_init.c.tmp $(mer_browser.init_cs) $(ALL_C2INITARGS)
	@mercury_update_interface mer_browser_init.c

# RULE lib_install_ints
.PHONY: libmer_browser.install_ints
libmer_browser.install_ints : \
		$(mer_browser.ints) \
		$(mer_browser.int3s) \
		$(mer_browser.int0s) \
		$(mer_browser.module_deps) \
		install_lib_dirs
	files="$(mer_browser.ints) $(mer_browser.int3s) $(mer_browser.int0s) $(mer_browser.module_deps) "; \
	for file in $$files; do \
		target="$(INSTALL_INT_DIR)/`basename $$file`"; \
		if cmp -s "$$file" "$$target"; then \
			echo "$$target unchanged"; \
		else \
			echo "installing $$target"; \
			$(INSTALL) "$$file" "$$target"; \
		fi; \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	for ext in int int2 int3 int0 module_dep; do \
		dir="$(INSTALL_INT_DIR)/Mercury/$${ext}s"; \
		rm -rf "$$dir"; \
		$(LN_S) .. "$$dir" || { \
			{ [ -d "$$dir" ] || \
			$(INSTALL_MKDIR) "$$dir"; } && \
			$(INSTALL) "$(INSTALL_INT_DIR)"/*.$$ext "$$dir"; \
		} || exit 1; \
	done

# RULE lib_install_opts
.PHONY: libmer_browser.install_opts
libmer_browser.install_opts :
	@:

ifeq ($(mer_browser.mhs),)

# RULE install_lib_hdrs_nomhs
.PHONY: libmer_browser.install_hdrs
libmer_browser.install_hdrs : \
		$(mer_browser.mhs) \
		install_lib_dirs
	@:

else

# RULE install_lib_hdrs_mhs
.PHONY: libmer_browser.install_hdrs
libmer_browser.install_hdrs : \
		$(mer_browser.mhs) \
		install_lib_dirs
	for hdr in $(mer_browser.mhs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_INC_DIR); \
	done

endif # conditional fragment

ifeq ($(mer_browser.mihs),)

# RULE install_grade_hdrs_no_mihs
.PHONY: libmer_browser.install_grade_hdrs
libmer_browser.install_grade_hdrs : \
		$(mer_browser.mihs) \
		install_grade_dirs
	@:

else

# RULE install_grade_hdrs_mihs
.PHONY: libmer_browser.install_grade_hdrs
libmer_browser.install_grade_hdrs : \
		$(mer_browser.mihs) \
		install_grade_dirs
	for hdr in $(mer_browser.mihs); do \
		$(INSTALL) $$hdr $(INSTALL_INT_DIR); \
		$(INSTALL) $$hdr $(INSTALL_GRADE_INC_DIR); \
	done
	# The following is needed to support the `--use-subdirs' option.
	# We try using `$(LN_S)', but if that fails, then we just use
	# `$(INSTALL)'.
	rm -rf $(INSTALL_GRADE_INC_SUBDIR)
	$(LN_S) .. $(INSTALL_GRADE_INC_SUBDIR) || { \
		{ [ -d $(INSTALL_GRADE_INC_SUBDIR) ] || \
			$(INSTALL_MKDIR) $(INSTALL_GRADE_INC_SUBDIR); \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_GRADE_INC_SUBDIR); \
	} || exit 1
	rm -rf $(INSTALL_INT_DIR)/Mercury/mihs
	$(LN_S) .. $(INSTALL_INT_DIR)/Mercury/mihs || { \
		{ [ -d $(INSTALL_INT_DIR)/Mercury/mihs ] || \
			$(INSTALL_MKDIR) \
			$(INSTALL_INT_DIR)/Mercury/mihs; \
		} && \
		$(INSTALL) $(INSTALL_GRADE_INC_DIR)/*.mih \
			$(INSTALL_INT_DIR); \
	} || exit 1

endif # conditional fragment

# RULE collective_target_.check.errs
.PHONY: mer_browser.check
mer_browser.check : $(mer_browser.errs)

# RULE collective_target_.ints.dates
.PHONY: mer_browser.ints
mer_browser.ints : $(mer_browser.dates)

# RULE collective_target_.int3s.date3s
.PHONY: mer_browser.int3s
mer_browser.int3s : $(mer_browser.date3s)

# RULE collective_target_.opts.optdates
.PHONY: mer_browser.opts
mer_browser.opts : $(mer_browser.optdates)

# RULE collective_target_.trans_opts.trans_opt_dates
.PHONY: mer_browser.trans_opts
mer_browser.trans_opts : $(mer_browser.trans_opt_dates)

# RULE collective_target_.javas.javas
.PHONY: mer_browser.javas
mer_browser.javas : $(mer_browser.javas)

# RULE collective_target_.classes.classes
.PHONY: mer_browser.classes
mer_browser.classes : $(mer_browser.classes)

# RULE collective_target_.all_ints.dates
.PHONY: mer_browser.all_ints
mer_browser.all_ints : $(mer_browser.dates)

# RULE collective_target_.all_int3s.date3s
.PHONY: mer_browser.all_int3s
mer_browser.all_int3s : $(mer_browser.date3s)

# RULE collective_target_.all_opts.optdates
.PHONY: mer_browser.all_opts
mer_browser.all_opts : $(mer_browser.optdates)

# RULE collective_target_.all_trans_opts.trans_opt_dates
.PHONY: mer_browser.all_trans_opts
mer_browser.all_trans_opts : $(mer_browser.trans_opt_dates)

# RULE clean_local
clean_local : mer_browser.clean

# RULE clean_target
.PHONY: mer_browser.clean
mer_browser.clean :
	-echo $(mer_browser.dirs) | xargs rm -f
	-echo $(mer_browser.cs) | xargs rm -f
	-echo $(mer_browser.mihs) | xargs rm -f
	-echo $(mer_browser.all_os) | xargs rm -f
	-echo $(mer_browser.all_pic_os) | xargs rm -f
	-echo $(mer_browser.c_dates) | xargs rm -f
	-echo $(mer_browser.java_dates) | xargs rm -f
	-echo $(mer_browser.useds) | xargs rm -f
	-echo $(mer_browser.javas) | xargs rm -f
	-echo $(mer_browser.profs) | xargs rm -f
	-echo $(mer_browser.dep_errs) | xargs rm -f
	-echo $(mer_browser.errs) | xargs rm -f
	-echo $(mer_browser.foreign_cs) | xargs rm -f
	-rm -f mer_browser_init.c mer_browser_init.$O mer_browser_init.pic_o

# RULE realclean_local
realclean_local : mer_browser.realclean

# RULE realclean_target
.PHONY: mer_browser.realclean
mer_browser.realclean : mer_browser.clean
	-echo $(mer_browser.dates) | xargs rm -f
	-echo $(mer_browser.date0s) | xargs rm -f
	-echo $(mer_browser.date3s) | xargs rm -f
	-echo $(mer_browser.optdates) | xargs rm -f
	-echo $(mer_browser.trans_opt_dates) | xargs rm -f
	-echo $(mer_browser.ints) | xargs rm -f
	-echo $(mer_browser.all_int0s) | xargs rm -f
	-echo $(mer_browser.int3s) | xargs rm -f
	-echo $(mer_browser.opts) | xargs rm -f
	-echo $(mer_browser.trans_opts) | xargs rm -f
	-echo $(mer_browser.analysiss) | xargs rm -f
	-echo $(mer_browser.requests) | xargs rm -f
	-echo $(mer_browser.imdgs) | xargs rm -f
	-echo $(mer_browser.ds) | xargs rm -f
	-echo $(mer_browser.module_deps) | xargs rm -f
	-echo $(mer_browser.all_mhs) | xargs rm -f
	-echo $(mer_browser.all_mihs) | xargs rm -f
	-echo $(mer_browser.dlls) | xargs rm -f
	-echo $(mer_browser.foreign_dlls) | xargs rm -f
	-echo $(mer_browser.classes) | xargs rm -f
	-rm -f mer_browser$(EXT_FOR_EXE)  mer_browser.init libmer_browser.$A libmer_browser.$(EXT_FOR_SHARED_LIB) mer_browser.jar mer_browser.dep mer_browser.dv

